var $M.0: [ref]i8;

var $M.1: [ref]i16;

var $M.2: [ref]i8;

var $M.3: [ref]i32;

var $M.21: [ref]i16;

var $M.23: [ref]i8;

var $M.24: [ref]i32;

var $M.25: i32;

var $M.26: [ref]i32;

var $M.27: [ref]ref;

var $M.28: [ref]ref;

var $M.29: [ref]i8;

var $M.30: [ref]i32;

var $M.31: [ref]ref;

var $M.32: [ref]i64;

var $M.33: i16;

var $M.34: [ref]i16;

var $M.35: [ref]i8;

var $M.36: ref;

var $M.37: [ref]ref;

var $M.38: i32;

var $M.39: i32;

var $M.40: [ref]i16;

var $M.41: [ref]i8;

var $M.42: [ref]i8;

var $M.43: [ref]i8;

var $M.44: [ref]i8;

var $M.45: [ref]i32;

var $M.46: [ref]i32;

var $M.47: [ref]i16;

var $M.48: [ref]i16;

var $M.49: [ref]i32;

var $M.50: [ref]ref;

var $M.51: ref;

var $M.52: [ref]ref;

var $M.53: [ref]i8;

var $M.54: [ref]i32;

var $M.55: [ref]i32;

var $M.60: [ref]i32;

var $M.61: [ref]i32;

var $M.62: [ref]i8;

var $M.64: [ref]i32;

var $M.65: i32;

var $M.66: i32;

var $M.67: [ref]i8;

var $M.69: [ref]i8;

var $M.70: [ref]i8;

var $M.71: [ref]i8;

var $M.79: [ref]i8;

var $M.80: [ref]i8;

var $M.81: [ref]i8;

var $M.82: [ref]i8;

var $M.83: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 942454);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const {:count 2} flash_cookie: ref;

axiom flash_cookie == $sub.ref(0, 1056);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 2084);

const be_ethtool_ops: ref;

axiom be_ethtool_ops == $sub.ref(0, 3476);

const be_adapter_list: ref;

axiom be_adapter_list == $sub.ref(0, 4516);

const be_adapter_list_lock: ref;

axiom be_adapter_list_lock == $sub.ref(0, 5708);

const {:count 5} et_self_tests: ref;

axiom et_self_tests == $sub.ref(0, 6892);

const {:count 6} et_tx_stats: ref;

axiom et_tx_stats == $sub.ref(0, 8180);

const {:count 7} et_rx_stats: ref;

axiom et_rx_stats == $sub.ref(0, 9512);

const {:count 32} et_stats: ref;

axiom et_stats == $sub.ref(0, 11944);

const {:count 5} cmd_priv_map: ref;

axiom cmd_priv_map == $sub.ref(0, 13008);

const be_netdev_ops: ref;

axiom be_netdev_ops == $sub.ref(0, 14440);

const num_vfs: ref;

axiom num_vfs == $sub.ref(0, 15468);

const be_eeh_handlers: ref;

axiom be_eeh_handlers == $sub.ref(0, 16532);

const {:count 9} be_dev_ids: ref;

axiom be_dev_ids == $sub.ref(0, 17844);

const be_driver: ref;

axiom be_driver == $sub.ref(0, 19180);

const {:count 32} ue_status_hi_desc: ref;

axiom ue_status_hi_desc == $sub.ref(0, 20460);

const {:count 32} ue_status_low_desc: ref;

axiom ue_status_low_desc == $sub.ref(0, 21740);

const rx_frag_size: ref;

axiom rx_frag_size == $sub.ref(0, 22766);

const ldv_mutex_mutex_of_device: ref;

axiom ldv_mutex_mutex_of_device == $sub.ref(0, 23794);

const ldv_mutex_mbox_lock_of_be_adapter: ref;

axiom ldv_mutex_mbox_lock_of_be_adapter == $sub.ref(0, 24822);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 25850);

const ldv_mutex_be_adapter_list_lock: ref;

axiom ldv_mutex_be_adapter_list_lock == $sub.ref(0, 26878);

const ocrdma_drv: ref;

axiom ocrdma_drv == $sub.ref(0, 27910);

const __mod_pci_device_table: ref;

axiom __mod_pci_device_table == $sub.ref(0, 28966);

const {:count 47} .str.6: ref;

axiom .str.6 == $sub.ref(0, 30037);

const {:count 27} .str.7: ref;

axiom .str.7 == $sub.ref(0, 31088);

const {:count 28} .str.88: ref;

axiom .str.88 == $sub.ref(0, 32140);

const {:count 21} .str.89: ref;

axiom .str.89 == $sub.ref(0, 33185);

const {:count 31} .str.87: ref;

axiom .str.87 == $sub.ref(0, 34240);

const {:count 110} .str.168: ref;

axiom .str.168 == $sub.ref(0, 35374);

const pv_irq_ops: ref;

axiom pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 107} .str.169: ref;

axiom .str.169 == $sub.ref(0, 36505);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 33} .str.91: ref;

axiom .str.91 == $sub.ref(0, 37562);

const {:count 12} .str.95: ref;

axiom .str.95 == $sub.ref(0, 38598);

const {:count 34} .str.92: ref;

axiom .str.92 == $sub.ref(0, 39656);

const {:count 35} .str.94: ref;

axiom .str.94 == $sub.ref(0, 40715);

const {:count 114} .str.23: ref;

axiom .str.23 == $sub.ref(0, 41853);

const {:count 52} .str.93: ref;

axiom .str.93 == $sub.ref(0, 42929);

const {:count 19} .str.167: ref;

axiom .str.167 == $sub.ref(0, 43972);

const {:count 44} .str.164: ref;

axiom .str.164 == $sub.ref(0, 45040);

const {:count 34} .str.165: ref;

axiom .str.165 == $sub.ref(0, 46098);

const {:count 21} .str.163: ref;

axiom .str.163 == $sub.ref(0, 47143);

const {:count 21} .str.162: ref;

axiom .str.162 == $sub.ref(0, 48188);

const {:count 51} .str.90: ref;

axiom .str.90 == $sub.ref(0, 49263);

const x86_dma_fallback_dev: ref;

axiom x86_dma_fallback_dev == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 63} .str.82: ref;

axiom .str.82 == $sub.ref(0, 50350);

const {:count 5} .str.83: ref;

axiom .str.83 == $sub.ref(0, 51379);

const {:count 64} .str.84: ref;

axiom .str.84 == $sub.ref(0, 52467);

const {:count 55} .str.85: ref;

axiom .str.85 == $sub.ref(0, 53546);

const {:count 48} .str.86: ref;

axiom .str.86 == $sub.ref(0, 54618);

const {:count 4} .str.25: ref;

axiom .str.25 == $sub.ref(0, 55646);

const {:count 4} .str.26: ref;

axiom .str.26 == $sub.ref(0, 56674);

const {:count 5} .str.27: ref;

axiom .str.27 == $sub.ref(0, 57703);

const {:count 4} .str.28: ref;

axiom .str.28 == $sub.ref(0, 58731);

const {:count 5} .str.29: ref;

axiom .str.29 == $sub.ref(0, 59760);

const {:count 4} .str.30: ref;

axiom .str.30 == $sub.ref(0, 60788);

const {:count 5} .str.31: ref;

axiom .str.31 == $sub.ref(0, 61817);

const {:count 5} .str.32: ref;

axiom .str.32 == $sub.ref(0, 62846);

const {:count 6} .str.33: ref;

axiom .str.33 == $sub.ref(0, 63876);

const {:count 5} .str.34: ref;

axiom .str.34 == $sub.ref(0, 64905);

const {:count 7} .str.35: ref;

axiom .str.35 == $sub.ref(0, 65936);

const {:count 8} .str.36: ref;

axiom .str.36 == $sub.ref(0, 66968);

const {:count 8} .str.37: ref;

axiom .str.37 == $sub.ref(0, 68000);

const {:count 8} .str.38: ref;

axiom .str.38 == $sub.ref(0, 69032);

const {:count 5} .str.39: ref;

axiom .str.39 == $sub.ref(0, 70061);

const {:count 7} .str.40: ref;

axiom .str.40 == $sub.ref(0, 71092);

const {:count 6} .str.41: ref;

axiom .str.41 == $sub.ref(0, 72122);

const {:count 7} .str.42: ref;

axiom .str.42 == $sub.ref(0, 73153);

const {:count 8} .str.43: ref;

axiom .str.43 == $sub.ref(0, 74185);

const {:count 8} .str.44: ref;

axiom .str.44 == $sub.ref(0, 75217);

const {:count 4} .str.45: ref;

axiom .str.45 == $sub.ref(0, 76245);

const {:count 6} .str.46: ref;

axiom .str.46 == $sub.ref(0, 77275);

const {:count 8} .str.47: ref;

axiom .str.47 == $sub.ref(0, 78307);

const {:count 7} .str.48: ref;

axiom .str.48 == $sub.ref(0, 79338);

const {:count 12} .str.49: ref;

axiom .str.49 == $sub.ref(0, 80374);

const {:count 12} .str.50: ref;

axiom .str.50 == $sub.ref(0, 81410);

const {:count 11} .str.51: ref;

axiom .str.51 == $sub.ref(0, 82445);

const {:count 6} .str.52: ref;

axiom .str.52 == $sub.ref(0, 83475);

const {:count 8} .str.53: ref;

axiom .str.53 == $sub.ref(0, 84507);

const {:count 8} .str.54: ref;

axiom .str.54 == $sub.ref(0, 85539);

const {:count 5} .str.55: ref;

axiom .str.55 == $sub.ref(0, 86568);

const {:count 12} .str.56: ref;

axiom .str.56 == $sub.ref(0, 87604);

const {:count 11} .str.57: ref;

axiom .str.57 == $sub.ref(0, 88639);

const {:count 9} .str.58: ref;

axiom .str.58 == $sub.ref(0, 89672);

const {:count 11} .str.59: ref;

axiom .str.59 == $sub.ref(0, 90707);

const {:count 9} .str.60: ref;

axiom .str.60 == $sub.ref(0, 91740);

const {:count 11} .str.61: ref;

axiom .str.61 == $sub.ref(0, 92775);

const {:count 6} .str.62: ref;

axiom .str.62 == $sub.ref(0, 93805);

const {:count 6} .str.63: ref;

axiom .str.63 == $sub.ref(0, 94835);

const {:count 5} .str.64: ref;

axiom .str.64 == $sub.ref(0, 95864);

const {:count 3} .str.65: ref;

axiom .str.65 == $sub.ref(0, 96891);

const {:count 5} .str.66: ref;

axiom .str.66 == $sub.ref(0, 97920);

const {:count 5} .str.67: ref;

axiom .str.67 == $sub.ref(0, 98949);

const {:count 5} .str.68: ref;

axiom .str.68 == $sub.ref(0, 99978);

const {:count 4} .str.69: ref;

axiom .str.69 == $sub.ref(0, 101006);

const {:count 4} .str.70: ref;

axiom .str.70 == $sub.ref(0, 102034);

const {:count 4} .str.71: ref;

axiom .str.71 == $sub.ref(0, 103062);

const {:count 6} .str.72: ref;

axiom .str.72 == $sub.ref(0, 104092);

const {:count 6} .str.73: ref;

axiom .str.73 == $sub.ref(0, 105122);

const {:count 6} .str.74: ref;

axiom .str.74 == $sub.ref(0, 106152);

const {:count 6} .str.75: ref;

axiom .str.75 == $sub.ref(0, 107182);

const {:count 6} .str.76: ref;

axiom .str.76 == $sub.ref(0, 108212);

const {:count 6} .str.77: ref;

axiom .str.77 == $sub.ref(0, 109242);

const {:count 6} .str.78: ref;

axiom .str.78 == $sub.ref(0, 110272);

const {:count 6} .str.79: ref;

axiom .str.79 == $sub.ref(0, 111302);

const {:count 5} .str.80: ref;

axiom .str.80 == $sub.ref(0, 112331);

const {:count 8} .str.81: ref;

axiom .str.81 == $sub.ref(0, 113363);

const {:count 7} .str.97: ref;

axiom .str.97 == $sub.ref(0, 114394);

const {:count 34} .str.17: ref;

axiom .str.17 == $sub.ref(0, 115452);

const {:count 28} .str.166: ref;

axiom .str.166 == $sub.ref(0, 116504);

const {:count 28} .str.1: ref;

axiom .str.1 == $sub.ref(0, 117556);

const {:count 26} .str.2: ref;

axiom .str.2 == $sub.ref(0, 118606);

const {:count 26} .str.3: ref;

axiom .str.3 == $sub.ref(0, 119656);

const {:count 26} .str.4: ref;

axiom .str.4 == $sub.ref(0, 120706);

const {:count 16} .str.5: ref;

axiom .str.5 == $sub.ref(0, 121746);

const {:count 30} .str.161: ref;

axiom .str.161 == $sub.ref(0, 122800);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 29} .str.104: ref;

axiom .str.104 == $sub.ref(0, 123853);

const .str: ref;

axiom .str == $sub.ref(0, 125097);

const {:count 41} .str.22: ref;

axiom .str.22 == $sub.ref(0, 126162);

const cpu_number: ref;

axiom cpu_number == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 26} .str.101: ref;

axiom .str.101 == $sub.ref(0, 127212);

const {:count 63} .str.103: ref;

axiom .str.103 == $sub.ref(0, 128299);

const {:count 22} .str.102: ref;

axiom .str.102 == $sub.ref(0, 129345);

const {:count 34} .str.98: ref;

axiom .str.98 == $sub.ref(0, 130403);

const {:count 7} .str.99: ref;

axiom .str.99 == $sub.ref(0, 131434);

const {:count 34} .str.100: ref;

axiom .str.100 == $sub.ref(0, 132492);

const {:count 19} .str.24: ref;

axiom .str.24 == $sub.ref(0, 133535);

const {:count 30} .str.123: ref;

axiom .str.123 == $sub.ref(0, 134589);

const {:count 220} .str.14: ref;

axiom .str.14 == $sub.ref(0, 135833);

const {:count 44} .str.118: ref;

axiom .str.118 == $sub.ref(0, 136901);

const {:count 22} .str.18: ref;

axiom .str.18 == $sub.ref(0, 137947);

const {:count 28} .str.128: ref;

axiom .str.128 == $sub.ref(0, 138999);

const {:count 29} .str.129: ref;

axiom .str.129 == $sub.ref(0, 140052);

const {:count 35} .str.130: ref;

axiom .str.130 == $sub.ref(0, 141111);

const {:count 21} .str.131: ref;

axiom .str.131 == $sub.ref(0, 142156);

const {:count 17} .str.132: ref;

axiom .str.132 == $sub.ref(0, 143197);

const {:count 41} .str.133: ref;

axiom .str.133 == $sub.ref(0, 144262);

const {:count 47} .str.21: ref;

axiom .str.21 == $sub.ref(0, 145333);

const {:count 33} .str.106: ref;

axiom .str.106 == $sub.ref(0, 146390);

const {:count 35} .str.107: ref;

axiom .str.107 == $sub.ref(0, 147449);

const {:count 28} .str.108: ref;

axiom .str.108 == $sub.ref(0, 148501);

const {:count 30} .str.109: ref;

axiom .str.109 == $sub.ref(0, 149555);

const {:count 24} .str.127: ref;

axiom .str.127 == $sub.ref(0, 150603);

const {:count 101} .str.13: ref;

axiom .str.13 == $sub.ref(0, 151728);

const {:count 48} .str.126: ref;

axiom .str.126 == $sub.ref(0, 152800);

const cpu_online_mask: ref;

axiom cpu_online_mask == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 20} .str.124: ref;

axiom .str.124 == $sub.ref(0, 153844);

const {:count 28} .str.125: ref;

axiom .str.125 == $sub.ref(0, 154896);

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const {:count 30} .str.20: ref;

axiom .str.20 == $sub.ref(0, 155950);

const {:count 30} .str.134: ref;

axiom .str.134 == $sub.ref(0, 157004);

const {:count 28} .str.135: ref;

axiom .str.135 == $sub.ref(0, 158056);

const {:count 36} .str.136: ref;

axiom .str.136 == $sub.ref(0, 159116);

const {:count 26} .str.137: ref;

axiom .str.137 == $sub.ref(0, 160166);

const {:count 27} .str.138: ref;

axiom .str.138 == $sub.ref(0, 161217);

const {:count 40} .str.139: ref;

axiom .str.139 == $sub.ref(0, 162281);

const {:count 41} .str.140: ref;

axiom .str.140 == $sub.ref(0, 163346);

const {:count 19} .str.141: ref;

axiom .str.141 == $sub.ref(0, 164389);

const {:count 26} .str.142: ref;

axiom .str.142 == $sub.ref(0, 165439);

const {:count 18} .str.155: ref;

axiom .str.155 == $sub.ref(0, 166481);

const {:count 23} .str.156: ref;

axiom .str.156 == $sub.ref(0, 167528);

const {:count 26} .str.157: ref;

axiom .str.157 == $sub.ref(0, 168578);

const {:count 20} .str.158: ref;

axiom .str.158 == $sub.ref(0, 169622);

const {:count 27} .str.159: ref;

axiom .str.159 == $sub.ref(0, 170673);

const {:count 20} .str.160: ref;

axiom .str.160 == $sub.ref(0, 171717);

const {:count 3} .str.153: ref;

axiom .str.153 == $sub.ref(0, 172744);

const {:count 3} .str.154: ref;

axiom .str.154 == $sub.ref(0, 173771);

const {:count 7} .str.149: ref;

axiom .str.149 == $sub.ref(0, 174802);

const {:count 5} .str.150: ref;

axiom .str.150 == $sub.ref(0, 175831);

const {:count 4} .str.151: ref;

axiom .str.151 == $sub.ref(0, 176859);

const .str.152: ref;

axiom .str.152 == $sub.ref(0, 177884);

const {:count 36} .str.147: ref;

axiom .str.147 == $sub.ref(0, 178944);

const {:count 33} .str.148: ref;

axiom .str.148 == $sub.ref(0, 180001);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

const {:count 31} .str.8: ref;

axiom .str.8 == $sub.ref(0, 181056);

const {:count 20} .str.9: ref;

axiom .str.9 == $sub.ref(0, 182100);

const {:count 27} .str.19: ref;

axiom .str.19 == $sub.ref(0, 183151);

const {:count 31} .str.10: ref;

axiom .str.10 == $sub.ref(0, 184206);

const {:count 26} .str.11: ref;

axiom .str.11 == $sub.ref(0, 185256);

const {:count 26} .str.12: ref;

axiom .str.12 == $sub.ref(0, 186306);

const {:count 20} .str.143: ref;

axiom .str.143 == $sub.ref(0, 187350);

const {:count 29} .str.144: ref;

axiom .str.144 == $sub.ref(0, 188403);

const {:count 32} .str.145: ref;

axiom .str.145 == $sub.ref(0, 189459);

const {:count 9} .str.146: ref;

axiom .str.146 == $sub.ref(0, 190492);

const {:count 12} .str.121: ref;

axiom .str.121 == $sub.ref(0, 191528);

const {:count 19} .str.122: ref;

axiom .str.122 == $sub.ref(0, 192571);

const {:count 11} .str.119: ref;

axiom .str.119 == $sub.ref(0, 193606);

const {:count 44} .str.120: ref;

axiom .str.120 == $sub.ref(0, 194674);

const {:count 20} .str.117: ref;

axiom .str.117 == $sub.ref(0, 195718);

const {:count 44} .str.115: ref;

axiom .str.115 == $sub.ref(0, 196786);

const {:count 28} .str.116: ref;

axiom .str.116 == $sub.ref(0, 197838);

const {:count 32} .str.114: ref;

axiom .str.114 == $sub.ref(0, 198894);

const {:count 29} .str.113: ref;

axiom .str.113 == $sub.ref(0, 199947);

const {:count 37} .str.111: ref;

axiom .str.111 == $sub.ref(0, 201008);

const {:count 33} .str.112: ref;

axiom .str.112 == $sub.ref(0, 202065);

const {:count 20} .str.110: ref;

axiom .str.110 == $sub.ref(0, 203109);

const {:count 23} .str.105: ref;

axiom .str.105 == $sub.ref(0, 204156);

const {:count 31} .str.187: ref;

axiom .str.187 == $sub.ref(0, 205211);

const {:count 21} .str.188: ref;

axiom .str.188 == $sub.ref(0, 206256);

const {:count 49} .str.186: ref;

axiom .str.186 == $sub.ref(0, 207329);

const {:count 49} .str.185: ref;

axiom .str.185 == $sub.ref(0, 208402);

const {:count 10} .str.183: ref;

axiom .str.183 == $sub.ref(0, 209436);

const {:count 10} .str.184: ref;

axiom .str.184 == $sub.ref(0, 210470);

const {:count 25} .str.182: ref;

axiom .str.182 == $sub.ref(0, 211519);

const {:count 25} .str.181: ref;

axiom .str.181 == $sub.ref(0, 212568);

const {:count 16} .str.179: ref;

axiom .str.179 == $sub.ref(0, 213608);

const {:count 16} .str.180: ref;

axiom .str.180 == $sub.ref(0, 214648);

const {:count 46} .str.173: ref;

axiom .str.173 == $sub.ref(0, 215718);

const {:count 25} .str.175: ref;

axiom .str.175 == $sub.ref(0, 216767);

const {:count 20} .str.176: ref;

axiom .str.176 == $sub.ref(0, 217811);

const {:count 26} .str.177: ref;

axiom .str.177 == $sub.ref(0, 218861);

const {:count 26} .str.178: ref;

axiom .str.178 == $sub.ref(0, 219911);

const {:count 19} .str.174: ref;

axiom .str.174 == $sub.ref(0, 220954);

const {:count 14} .str.172: ref;

axiom .str.172 == $sub.ref(0, 221992);

const {:count 53} .str.15: ref;

axiom .str.15 == $sub.ref(0, 223069);

const {:count 26} .str.16: ref;

axiom .str.16 == $sub.ref(0, 224119);

const {:count 10} .str.170: ref;

axiom .str.170 == $sub.ref(0, 225153);

const {:count 8} .str.171: ref;

axiom .str.171 == $sub.ref(0, 226185);

const {:count 72} .str.96: ref;

axiom .str.96 == $sub.ref(0, 227281);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 228313);

const {:count 3} .str.1.392: ref;

axiom .str.1.392 == $sub.ref(0, 229340);

const {:count 14} .str.393: ref;

axiom .str.393 == $sub.ref(0, 230378);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 231406);

const be_get_settings: ref;

axiom be_get_settings == $sub.ref(0, 232438);

procedure be_get_settings($p0: ref, $p1: ref) returns ($r: i32);



const be_get_drvinfo: ref;

axiom be_get_drvinfo == $sub.ref(0, 233470);

procedure be_get_drvinfo($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_get_drvinfo($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var vslice_dummy_var_378: i32;
  var vslice_dummy_var_379: i64;
  var vslice_dummy_var_380: i64;
  var vslice_dummy_var_381: i64;
  var vslice_dummy_var_382: i32;
  var vslice_dummy_var_383: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p3 := netdev_priv($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    call {:si_unique_call 2} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p5, 0, 32, $zext.i32.i64(16), 0 == 1);
    $M.0 := cmdloc_dummy_var_1;
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(363960, 1));
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} vslice_dummy_var_378 := be_cmd_get_fw_ver($p4, $p7, $p8);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(4, 1));
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} vslice_dummy_var_379 := strlcpy($p11, .str.97, 32);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(36, 1));
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} vslice_dummy_var_380 := strlcpy($p14, .str.170, 32);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(363960, 1));
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p2);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $i19 := memcmp($p17, $p18, 32);
    call {:si_unique_call 7} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(68, 1));
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(363960, 1));
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p2);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} vslice_dummy_var_382 := snprintf.ref.i64.ref.ref.ref($p27, 32, .str.171, $p29, $p30);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p34 := pci_name($p33);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(100, 1));
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} vslice_dummy_var_383 := strlcpy($p36, $p34, 32);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(184, 1));
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 0);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(192, 1));
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 0);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(188, 1));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, 0);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(68, 1));
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(363960, 1));
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} vslice_dummy_var_381 := strlcpy($p22, $p24, 32);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const be_get_reg_len: ref;

axiom be_get_reg_len == $sub.ref(0, 234502);

procedure be_get_reg_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.60, $M.41, $M.0, $M.21, $M.61, $M.62, $CurrAddr;



implementation be_get_reg_len($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i28: i32;
  var $i9: i32;
  var vslice_dummy_var_384: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p2 := netdev_priv($p0);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p1, 0);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $i4 := check_privilege($p3, 1792);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 15} {:cexpr "tmp___0"} boogie_si_record_i8($i5);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.3, $p1);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i9 := $i28;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 57888);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i19 == 1);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 57896);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} vslice_dummy_var_384 := be_cmd_get_reg_len($p3, $p1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $i26 := lancer_cmd_get_file_len($p3, .str.172);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p1, $i26);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb11;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const be_get_regs: ref;

axiom be_get_regs == $sub.ref(0, 235534);

procedure be_get_regs($p0: ref, $p1: ref, $p2: ref);



const be_get_wol: ref;

axiom be_get_wol == $sub.ref(0, 236566);

procedure be_get_wol($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_get_wol($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $p2 := netdev_priv($p0);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $i4 := be_is_wol_supported($p3);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 20} {:cexpr "tmp___0"} boogie_si_record_i8($i5);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 0);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.0;
    call {:si_unique_call 21} cmdloc_dummy_var_3 := $memset.i8(cmdloc_dummy_var_2, $p20, 0, 6, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_3;
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i8, 32);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(364269, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 32);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const be_set_wol: ref;

axiom be_set_wol == $sub.ref(0, 237598);

procedure be_set_wol($p0: ref, $p1: ref) returns ($r: i32);



const be_get_msg_level: ref;

axiom be_get_msg_level == $sub.ref(0, 238630);

procedure be_get_msg_level($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation be_get_msg_level($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p20: ref;
  var $i21: i32;
  var $i19: i32;
  var vslice_dummy_var_385: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $p1 := netdev_priv($p0);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 57888);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 57896);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(364280, 1));
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i19 := $i21;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} vslice_dummy_var_385 := dev_err.ref.ref($p17, .str.175);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 95);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const be_set_msg_level: ref;

axiom be_set_msg_level == $sub.ref(0, 239662);

procedure be_set_msg_level($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.25, $M.21, $CurrAddr, assertsPassed, $M.26;



implementation be_set_msg_level($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $p31: ref;
  var vslice_dummy_var_386: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} {:cexpr "be_set_msg_level:arg:level"} boogie_si_record_i32($i1);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $p2 := netdev_priv($p0);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 57888);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 57896);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(364280, 1));
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, $i1);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(364280, 1));
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i25 := $xor.i32($i24, $i1);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 8192);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(364280, 1));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i1);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i1, 8192);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i30 := (if $i29 == 1 then 48 else 64);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} be_set_fw_log_level($p3, $i30);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} vslice_dummy_var_386 := dev_err.ref.ref($p18, .str.175);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;
}



const ethtool_op_get_link: ref;

axiom ethtool_op_get_link == $sub.ref(0, 240694);

procedure ethtool_op_get_link($p0: ref) returns ($r: i32);



const be_get_eeprom_len: ref;

axiom be_get_eeprom_len == $sub.ref(0, 241726);

procedure be_get_eeprom_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.60, $M.41, $M.0, $M.21, $M.61, $M.62, $CurrAddr;



implementation be_get_eeprom_len($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $p1 := netdev_priv($p0);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $i3 := check_privilege($p2, 1792);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 30} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 57888);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i14 == 1);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 57896);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i8 := 1024;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i24 == 1);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $i26 := lancer_cmd_get_file_len($p2, .str.180);
    call {:si_unique_call 34} {:cexpr "tmp___3"} boogie_si_record_i32($i26);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i8 := $i26;
    goto $bb6;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $i25 := lancer_cmd_get_file_len($p2, .str.179);
    call {:si_unique_call 32} {:cexpr "tmp___2"} boogie_si_record_i32($i25);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i8 := $i25;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb9;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const be_read_eeprom: ref;

axiom be_read_eeprom == $sub.ref(0, 242758);

procedure be_read_eeprom($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const be_get_coalesce: ref;

axiom be_get_coalesce == $sub.ref(0, 243790);

procedure be_get_coalesce($p0: ref, $p1: ref) returns ($r: i32);



const be_set_coalesce: ref;

axiom be_set_coalesce == $sub.ref(0, 244822);

procedure be_set_coalesce($p0: ref, $p1: ref) returns ($r: i32);



const be_get_ringparam: ref;

axiom be_get_ringparam == $sub.ref(0, 245854);

procedure be_get_ringparam($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_get_ringparam($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $p2 := netdev_priv($p0);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(136368, 1)), $mul.ref(0, 24760)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    call {:si_unique_call 36} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i9);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(4136, 1)), $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    call {:si_unique_call 37} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i17);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    return;
}



const be_get_pauseparam: ref;

axiom be_get_pauseparam == $sub.ref(0, 246886);

procedure be_get_pauseparam($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_get_pauseparam($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var vslice_dummy_var_387: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $p2 := netdev_priv($p0);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} vslice_dummy_var_387 := be_cmd_get_flow_control($p3, $p4, $p5);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(2, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    return;
}



const be_set_pauseparam: ref;

axiom be_set_pauseparam == $sub.ref(0, 247918);

procedure be_set_pauseparam($p0: ref, $p1: ref) returns ($r: i32);



const be_self_test: ref;

axiom be_self_test == $sub.ref(0, 248950);

procedure be_self_test($p0: ref, $p1: ref, $p2: ref);



const be_get_stat_strings: ref;

axiom be_get_stat_strings == $sub.ref(0, 249982);

procedure be_get_stat_strings($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_get_stat_strings($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p14: ref;
  var $i15: i32;
  var $p21: ref;
  var $p12: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p26: ref;
  var $i27: i32;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $i41: i64;
  var $p42: ref;
  var $i44: i64;
  var $p45: ref;
  var $i47: i64;
  var $p48: ref;
  var $i50: i64;
  var $p51: ref;
  var $i53: i64;
  var $p54: ref;
  var $i56: i64;
  var $p57: ref;
  var $i59: i64;
  var $p60: ref;
  var $i62: i64;
  var $p63: ref;
  var $i65: i64;
  var $p66: ref;
  var $i68: i64;
  var $p69: ref;
  var $i71: i64;
  var $p22: ref;
  var $i72: i64;
  var $p73: ref;
  var $i74: i64;
  var $p75: ref;
  var $i76: i64;
  var $p77: ref;
  var $i78: i64;
  var $p79: ref;
  var $i80: i64;
  var $p81: ref;
  var $i82: i64;
  var $p83: ref;
  var $i84: i64;
  var $p85: ref;
  var $i86: i64;
  var $p87: ref;
  var $i88: i64;
  var $p89: ref;
  var $i90: i64;
  var $p91: ref;
  var $i92: i64;
  var $p93: ref;
  var $i94: i64;
  var $p95: ref;
  var $i96: i64;
  var $p97: ref;
  var $i98: i64;
  var $p99: ref;
  var $i100: i64;
  var $p101: ref;
  var $i102: i64;
  var $p103: ref;
  var $i104: i64;
  var $p105: ref;
  var $i106: i64;
  var $p107: ref;
  var $i108: i64;
  var $p109: ref;
  var $i110: i64;
  var $p111: ref;
  var $i112: i64;
  var $p113: ref;
  var $i114: i64;
  var $p115: ref;
  var $i116: i64;
  var $p117: ref;
  var $i118: i64;
  var $p119: ref;
  var $i120: i64;
  var $p121: ref;
  var $i122: i64;
  var $p123: ref;
  var $i124: i64;
  var $p125: ref;
  var $i126: i64;
  var $p127: ref;
  var $i128: i64;
  var $p129: ref;
  var $i130: i64;
  var $p131: ref;
  var $i132: i64;
  var $p13: ref;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;
  var cmdloc_dummy_var_73: [ref]i8;
  var cmdloc_dummy_var_74: [ref]i8;
  var cmdloc_dummy_var_75: [ref]i8;
  var cmdloc_dummy_var_76: [ref]i8;
  var cmdloc_dummy_var_77: [ref]i8;
  var cmdloc_dummy_var_78: [ref]i8;
  var cmdloc_dummy_var_79: [ref]i8;
  var cmdloc_dummy_var_80: [ref]i8;
  var cmdloc_dummy_var_81: [ref]i8;
  var cmdloc_dummy_var_82: [ref]i8;
  var cmdloc_dummy_var_83: [ref]i8;
  var cmdloc_dummy_var_84: [ref]i8;
  var cmdloc_dummy_var_85: [ref]i8;
  var cmdloc_dummy_var_86: [ref]i8;
  var cmdloc_dummy_var_87: [ref]i8;
  var cmdloc_dummy_var_88: [ref]i8;
  var cmdloc_dummy_var_89: [ref]i8;
  var cmdloc_dummy_var_90: [ref]i8;
  var cmdloc_dummy_var_91: [ref]i8;
  var cmdloc_dummy_var_92: [ref]i8;
  var cmdloc_dummy_var_93: [ref]i8;
  var cmdloc_dummy_var_94: [ref]i8;
  var cmdloc_dummy_var_95: [ref]i8;
  var cmdloc_dummy_var_96: [ref]i8;
  var cmdloc_dummy_var_97: [ref]i8;
  var cmdloc_dummy_var_98: [ref]i8;
  var cmdloc_dummy_var_99: [ref]i8;
  var cmdloc_dummy_var_100: [ref]i8;
  var cmdloc_dummy_var_101: [ref]i8;
  var cmdloc_dummy_var_102: [ref]i8;
  var cmdloc_dummy_var_103: [ref]i8;
  var cmdloc_dummy_var_104: [ref]i8;
  var cmdloc_dummy_var_105: [ref]i8;
  var cmdloc_dummy_var_106: [ref]i8;
  var cmdloc_dummy_var_107: [ref]i8;
  var cmdloc_dummy_var_108: [ref]i8;
  var cmdloc_dummy_var_109: [ref]i8;
  var cmdloc_dummy_var_110: [ref]i8;
  var cmdloc_dummy_var_111: [ref]i8;
  var cmdloc_dummy_var_112: [ref]i8;
  var cmdloc_dummy_var_113: [ref]i8;
  var cmdloc_dummy_var_114: [ref]i8;
  var cmdloc_dummy_var_115: [ref]i8;
  var cmdloc_dummy_var_116: [ref]i8;
  var cmdloc_dummy_var_117: [ref]i8;
  var cmdloc_dummy_var_118: [ref]i8;
  var cmdloc_dummy_var_119: [ref]i8;
  var cmdloc_dummy_var_120: [ref]i8;
  var cmdloc_dummy_var_121: [ref]i8;
  var cmdloc_dummy_var_122: [ref]i8;
  var cmdloc_dummy_var_123: [ref]i8;
  var cmdloc_dummy_var_124: [ref]i8;
  var cmdloc_dummy_var_125: [ref]i8;
  var cmdloc_dummy_var_126: [ref]i8;
  var cmdloc_dummy_var_127: [ref]i8;
  var cmdloc_dummy_var_128: [ref]i8;
  var cmdloc_dummy_var_129: [ref]i8;
  var cmdloc_dummy_var_130: [ref]i8;
  var cmdloc_dummy_var_131: [ref]i8;
  var cmdloc_dummy_var_132: [ref]i8;
  var cmdloc_dummy_var_133: [ref]i8;
  var cmdloc_dummy_var_134: [ref]i8;
  var cmdloc_dummy_var_135: [ref]i8;
  var cmdloc_dummy_var_136: [ref]i8;
  var cmdloc_dummy_var_137: [ref]i8;
  var cmdloc_dummy_var_138: [ref]i8;
  var cmdloc_dummy_var_139: [ref]i8;
  var cmdloc_dummy_var_140: [ref]i8;
  var cmdloc_dummy_var_141: [ref]i8;
  var cmdloc_dummy_var_142: [ref]i8;
  var cmdloc_dummy_var_143: [ref]i8;
  var cmdloc_dummy_var_144: [ref]i8;
  var cmdloc_dummy_var_145: [ref]i8;
  var cmdloc_dummy_var_146: [ref]i8;
  var cmdloc_dummy_var_147: [ref]i8;
  var cmdloc_dummy_var_148: [ref]i8;
  var cmdloc_dummy_var_149: [ref]i8;
  var cmdloc_dummy_var_150: [ref]i8;
  var cmdloc_dummy_var_151: [ref]i8;
  var cmdloc_dummy_var_152: [ref]i8;
  var cmdloc_dummy_var_153: [ref]i8;
  var cmdloc_dummy_var_154: [ref]i8;
  var cmdloc_dummy_var_155: [ref]i8;
  var cmdloc_dummy_var_156: [ref]i8;
  var cmdloc_dummy_var_157: [ref]i8;
  var cmdloc_dummy_var_158: [ref]i8;
  var cmdloc_dummy_var_159: [ref]i8;
  var cmdloc_dummy_var_160: [ref]i8;
  var cmdloc_dummy_var_161: [ref]i8;
  var cmdloc_dummy_var_162: [ref]i8;
  var cmdloc_dummy_var_163: [ref]i8;
  var cmdloc_dummy_var_164: [ref]i8;
  var cmdloc_dummy_var_165: [ref]i8;
  var cmdloc_dummy_var_166: [ref]i8;
  var cmdloc_dummy_var_167: [ref]i8;
  var cmdloc_dummy_var_168: [ref]i8;
  var cmdloc_dummy_var_169: [ref]i8;
  var cmdloc_dummy_var_170: [ref]i8;
  var cmdloc_dummy_var_171: [ref]i8;
  var cmdloc_dummy_var_172: [ref]i8;
  var cmdloc_dummy_var_173: [ref]i8;
  var cmdloc_dummy_var_174: [ref]i8;
  var cmdloc_dummy_var_175: [ref]i8;
  var cmdloc_dummy_var_176: [ref]i8;
  var cmdloc_dummy_var_177: [ref]i8;
  var cmdloc_dummy_var_178: [ref]i8;
  var cmdloc_dummy_var_179: [ref]i8;
  var cmdloc_dummy_var_180: [ref]i8;
  var cmdloc_dummy_var_181: [ref]i8;
  var cmdloc_dummy_var_182: [ref]i8;
  var cmdloc_dummy_var_183: [ref]i8;
  var cmdloc_dummy_var_184: [ref]i8;
  var cmdloc_dummy_var_185: [ref]i8;
  var cmdloc_dummy_var_186: [ref]i8;
  var cmdloc_dummy_var_187: [ref]i8;
  var cmdloc_dummy_var_188: [ref]i8;
  var cmdloc_dummy_var_189: [ref]i8;
  var cmdloc_dummy_var_190: [ref]i8;
  var cmdloc_dummy_var_191: [ref]i8;
  var cmdloc_dummy_var_192: [ref]i8;
  var cmdloc_dummy_var_193: [ref]i8;
  var cmdloc_dummy_var_194: [ref]i8;
  var cmdloc_dummy_var_195: [ref]i8;
  var cmdloc_dummy_var_196: [ref]i8;
  var cmdloc_dummy_var_197: [ref]i8;
  var cmdloc_dummy_var_198: [ref]i8;
  var cmdloc_dummy_var_199: [ref]i8;
  var cmdloc_dummy_var_200: [ref]i8;
  var cmdloc_dummy_var_201: [ref]i8;
  var cmdloc_dummy_var_202: [ref]i8;
  var cmdloc_dummy_var_203: [ref]i8;
  var cmdloc_dummy_var_204: [ref]i8;
  var cmdloc_dummy_var_205: [ref]i8;
  var cmdloc_dummy_var_206: [ref]i8;
  var cmdloc_dummy_var_207: [ref]i8;
  var cmdloc_dummy_var_208: [ref]i8;
  var cmdloc_dummy_var_209: [ref]i8;
  var cmdloc_dummy_var_210: [ref]i8;
  var cmdloc_dummy_var_211: [ref]i8;
  var cmdloc_dummy_var_212: [ref]i8;
  var cmdloc_dummy_var_213: [ref]i8;
  var cmdloc_dummy_var_214: [ref]i8;
  var cmdloc_dummy_var_215: [ref]i8;
  var cmdloc_dummy_var_216: [ref]i8;
  var cmdloc_dummy_var_217: [ref]i8;
  var cmdloc_dummy_var_218: [ref]i8;
  var cmdloc_dummy_var_219: [ref]i8;
  var cmdloc_dummy_var_220: [ref]i8;
  var cmdloc_dummy_var_221: [ref]i8;
  var cmdloc_dummy_var_222: [ref]i8;
  var cmdloc_dummy_var_223: [ref]i8;
  var cmdloc_dummy_var_224: [ref]i8;
  var cmdloc_dummy_var_225: [ref]i8;
  var vslice_dummy_var_388: i32;
  var vslice_dummy_var_389: i32;
  var vslice_dummy_var_390: i32;
  var vslice_dummy_var_391: i32;
  var vslice_dummy_var_392: i32;
  var vslice_dummy_var_393: i32;
  var vslice_dummy_var_394: i32;
  var vslice_dummy_var_395: i32;
  var vslice_dummy_var_396: i32;
  var vslice_dummy_var_397: i32;
  var vslice_dummy_var_398: i32;
  var vslice_dummy_var_399: i32;
  var vslice_dummy_var_400: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} {:cexpr "be_get_stat_strings:arg:stringset"} boogie_si_record_i32($i1);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $p3 := netdev_priv($p0);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb11, $bb12;

  $bb12:
    assume !(0 == 1);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_7 := $M.0;
    cmdloc_dummy_var_8 := $M.0;
    call {:si_unique_call 43} cmdloc_dummy_var_9 := $memcpy.i8(cmdloc_dummy_var_7, cmdloc_dummy_var_8, $p2, et_stats, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_9;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p2, $mul.ref(32, 1));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb73, $bb74;

  $bb74:
    assume !(0 == 1);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_43 := $M.0;
    cmdloc_dummy_var_44 := $M.0;
    call {:si_unique_call 70} cmdloc_dummy_var_45 := $memcpy.i8(cmdloc_dummy_var_43, cmdloc_dummy_var_44, $p8, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_45;
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    $i72 := $add.i64(32, 32);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p2, $mul.ref($i72, 1));
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb77, $bb78;

  $bb78:
    assume !(0 == 1);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_49 := $M.0;
    cmdloc_dummy_var_50 := $M.0;
    call {:si_unique_call 72} cmdloc_dummy_var_51 := $memcpy.i8(cmdloc_dummy_var_49, cmdloc_dummy_var_50, $p73, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_51;
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    $i74 := $add.i64($i72, 32);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p2, $mul.ref($i74, 1));
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb81, $bb82;

  $bb82:
    assume !(0 == 1);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_55 := $M.0;
    cmdloc_dummy_var_56 := $M.0;
    call {:si_unique_call 74} cmdloc_dummy_var_57 := $memcpy.i8(cmdloc_dummy_var_55, cmdloc_dummy_var_56, $p75, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_57;
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    $i76 := $add.i64($i74, 32);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p2, $mul.ref($i76, 1));
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb85, $bb86;

  $bb86:
    assume !(0 == 1);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_61 := $M.0;
    cmdloc_dummy_var_62 := $M.0;
    call {:si_unique_call 76} cmdloc_dummy_var_63 := $memcpy.i8(cmdloc_dummy_var_61, cmdloc_dummy_var_62, $p77, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_63;
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    $i78 := $add.i64($i76, 32);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p2, $mul.ref($i78, 1));
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb89, $bb90;

  $bb90:
    assume !(0 == 1);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_67 := $M.0;
    cmdloc_dummy_var_68 := $M.0;
    call {:si_unique_call 78} cmdloc_dummy_var_69 := $memcpy.i8(cmdloc_dummy_var_67, cmdloc_dummy_var_68, $p79, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_69;
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    $i80 := $add.i64($i78, 32);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p2, $mul.ref($i80, 1));
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb93, $bb94;

  $bb94:
    assume !(0 == 1);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_73 := $M.0;
    cmdloc_dummy_var_74 := $M.0;
    call {:si_unique_call 80} cmdloc_dummy_var_75 := $memcpy.i8(cmdloc_dummy_var_73, cmdloc_dummy_var_74, $p81, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_75;
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    $i82 := $add.i64($i80, 32);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p2, $mul.ref($i82, 1));
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb97, $bb98;

  $bb98:
    assume !(0 == 1);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_79 := $M.0;
    cmdloc_dummy_var_80 := $M.0;
    call {:si_unique_call 82} cmdloc_dummy_var_81 := $memcpy.i8(cmdloc_dummy_var_79, cmdloc_dummy_var_80, $p83, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_81;
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    $i84 := $add.i64($i82, 32);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p2, $mul.ref($i84, 1));
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb101, $bb102;

  $bb102:
    assume !(0 == 1);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_85 := $M.0;
    cmdloc_dummy_var_86 := $M.0;
    call {:si_unique_call 84} cmdloc_dummy_var_87 := $memcpy.i8(cmdloc_dummy_var_85, cmdloc_dummy_var_86, $p85, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_87;
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    $i86 := $add.i64($i84, 32);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p2, $mul.ref($i86, 1));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb105, $bb106;

  $bb106:
    assume !(0 == 1);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_91 := $M.0;
    cmdloc_dummy_var_92 := $M.0;
    call {:si_unique_call 86} cmdloc_dummy_var_93 := $memcpy.i8(cmdloc_dummy_var_91, cmdloc_dummy_var_92, $p87, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_93;
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    $i88 := $add.i64($i86, 32);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p2, $mul.ref($i88, 1));
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb109, $bb110;

  $bb110:
    assume !(0 == 1);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_97 := $M.0;
    cmdloc_dummy_var_98 := $M.0;
    call {:si_unique_call 88} cmdloc_dummy_var_99 := $memcpy.i8(cmdloc_dummy_var_97, cmdloc_dummy_var_98, $p89, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_99;
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    $i90 := $add.i64($i88, 32);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p2, $mul.ref($i90, 1));
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb113, $bb114;

  $bb114:
    assume !(0 == 1);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_103 := $M.0;
    cmdloc_dummy_var_104 := $M.0;
    call {:si_unique_call 90} cmdloc_dummy_var_105 := $memcpy.i8(cmdloc_dummy_var_103, cmdloc_dummy_var_104, $p91, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_105;
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    $i92 := $add.i64($i90, 32);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p2, $mul.ref($i92, 1));
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb117, $bb118;

  $bb118:
    assume !(0 == 1);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_109 := $M.0;
    cmdloc_dummy_var_110 := $M.0;
    call {:si_unique_call 92} cmdloc_dummy_var_111 := $memcpy.i8(cmdloc_dummy_var_109, cmdloc_dummy_var_110, $p93, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_111;
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    $i94 := $add.i64($i92, 32);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p2, $mul.ref($i94, 1));
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb121, $bb122;

  $bb122:
    assume !(0 == 1);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_115 := $M.0;
    cmdloc_dummy_var_116 := $M.0;
    call {:si_unique_call 94} cmdloc_dummy_var_117 := $memcpy.i8(cmdloc_dummy_var_115, cmdloc_dummy_var_116, $p95, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_117;
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    $i96 := $add.i64($i94, 32);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p2, $mul.ref($i96, 1));
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb125, $bb126;

  $bb126:
    assume !(0 == 1);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_121 := $M.0;
    cmdloc_dummy_var_122 := $M.0;
    call {:si_unique_call 96} cmdloc_dummy_var_123 := $memcpy.i8(cmdloc_dummy_var_121, cmdloc_dummy_var_122, $p97, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_123;
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    $i98 := $add.i64($i96, 32);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p2, $mul.ref($i98, 1));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb129, $bb130;

  $bb130:
    assume !(0 == 1);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_127 := $M.0;
    cmdloc_dummy_var_128 := $M.0;
    call {:si_unique_call 98} cmdloc_dummy_var_129 := $memcpy.i8(cmdloc_dummy_var_127, cmdloc_dummy_var_128, $p99, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_129;
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    $i100 := $add.i64($i98, 32);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p2, $mul.ref($i100, 1));
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb133, $bb134;

  $bb134:
    assume !(0 == 1);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_133 := $M.0;
    cmdloc_dummy_var_134 := $M.0;
    call {:si_unique_call 100} cmdloc_dummy_var_135 := $memcpy.i8(cmdloc_dummy_var_133, cmdloc_dummy_var_134, $p101, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_135;
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    $i102 := $add.i64($i100, 32);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p2, $mul.ref($i102, 1));
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb137, $bb138;

  $bb138:
    assume !(0 == 1);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_139 := $M.0;
    cmdloc_dummy_var_140 := $M.0;
    call {:si_unique_call 102} cmdloc_dummy_var_141 := $memcpy.i8(cmdloc_dummy_var_139, cmdloc_dummy_var_140, $p103, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_141;
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    $i104 := $add.i64($i102, 32);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p2, $mul.ref($i104, 1));
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb141, $bb142;

  $bb142:
    assume !(0 == 1);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_145 := $M.0;
    cmdloc_dummy_var_146 := $M.0;
    call {:si_unique_call 104} cmdloc_dummy_var_147 := $memcpy.i8(cmdloc_dummy_var_145, cmdloc_dummy_var_146, $p105, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_147;
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    $i106 := $add.i64($i104, 32);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p2, $mul.ref($i106, 1));
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb145, $bb146;

  $bb146:
    assume !(0 == 1);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_151 := $M.0;
    cmdloc_dummy_var_152 := $M.0;
    call {:si_unique_call 106} cmdloc_dummy_var_153 := $memcpy.i8(cmdloc_dummy_var_151, cmdloc_dummy_var_152, $p107, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_153;
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    $i108 := $add.i64($i106, 32);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p2, $mul.ref($i108, 1));
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb149, $bb150;

  $bb150:
    assume !(0 == 1);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_157 := $M.0;
    cmdloc_dummy_var_158 := $M.0;
    call {:si_unique_call 108} cmdloc_dummy_var_159 := $memcpy.i8(cmdloc_dummy_var_157, cmdloc_dummy_var_158, $p109, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_159;
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    $i110 := $add.i64($i108, 32);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p2, $mul.ref($i110, 1));
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb153, $bb154;

  $bb154:
    assume !(0 == 1);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_163 := $M.0;
    cmdloc_dummy_var_164 := $M.0;
    call {:si_unique_call 110} cmdloc_dummy_var_165 := $memcpy.i8(cmdloc_dummy_var_163, cmdloc_dummy_var_164, $p111, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_165;
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    $i112 := $add.i64($i110, 32);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p2, $mul.ref($i112, 1));
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb157, $bb158;

  $bb158:
    assume !(0 == 1);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_169 := $M.0;
    cmdloc_dummy_var_170 := $M.0;
    call {:si_unique_call 112} cmdloc_dummy_var_171 := $memcpy.i8(cmdloc_dummy_var_169, cmdloc_dummy_var_170, $p113, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_171;
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    $i114 := $add.i64($i112, 32);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($p2, $mul.ref($i114, 1));
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb161, $bb162;

  $bb162:
    assume !(0 == 1);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_175 := $M.0;
    cmdloc_dummy_var_176 := $M.0;
    call {:si_unique_call 114} cmdloc_dummy_var_177 := $memcpy.i8(cmdloc_dummy_var_175, cmdloc_dummy_var_176, $p115, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_177;
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    $i116 := $add.i64($i114, 32);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p2, $mul.ref($i116, 1));
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb165, $bb166;

  $bb166:
    assume !(0 == 1);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_181 := $M.0;
    cmdloc_dummy_var_182 := $M.0;
    call {:si_unique_call 116} cmdloc_dummy_var_183 := $memcpy.i8(cmdloc_dummy_var_181, cmdloc_dummy_var_182, $p117, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_183;
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    $i118 := $add.i64($i116, 32);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p2, $mul.ref($i118, 1));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb169, $bb170;

  $bb170:
    assume !(0 == 1);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_187 := $M.0;
    cmdloc_dummy_var_188 := $M.0;
    call {:si_unique_call 118} cmdloc_dummy_var_189 := $memcpy.i8(cmdloc_dummy_var_187, cmdloc_dummy_var_188, $p119, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_189;
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    $i120 := $add.i64($i118, 32);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p2, $mul.ref($i120, 1));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb173, $bb174;

  $bb174:
    assume !(0 == 1);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_193 := $M.0;
    cmdloc_dummy_var_194 := $M.0;
    call {:si_unique_call 120} cmdloc_dummy_var_195 := $memcpy.i8(cmdloc_dummy_var_193, cmdloc_dummy_var_194, $p121, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_195;
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    $i122 := $add.i64($i120, 32);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($p2, $mul.ref($i122, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb177, $bb178;

  $bb178:
    assume !(0 == 1);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_199 := $M.0;
    cmdloc_dummy_var_200 := $M.0;
    call {:si_unique_call 122} cmdloc_dummy_var_201 := $memcpy.i8(cmdloc_dummy_var_199, cmdloc_dummy_var_200, $p123, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_201;
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    $i124 := $add.i64($i122, 32);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($p2, $mul.ref($i124, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb181, $bb182;

  $bb182:
    assume !(0 == 1);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_205 := $M.0;
    cmdloc_dummy_var_206 := $M.0;
    call {:si_unique_call 124} cmdloc_dummy_var_207 := $memcpy.i8(cmdloc_dummy_var_205, cmdloc_dummy_var_206, $p125, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_207;
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    $i126 := $add.i64($i124, 32);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p2, $mul.ref($i126, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb185, $bb186;

  $bb186:
    assume !(0 == 1);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_211 := $M.0;
    cmdloc_dummy_var_212 := $M.0;
    call {:si_unique_call 126} cmdloc_dummy_var_213 := $memcpy.i8(cmdloc_dummy_var_211, cmdloc_dummy_var_212, $p127, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_213;
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    $i128 := $add.i64($i126, 32);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($p2, $mul.ref($i128, 1));
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb189, $bb190;

  $bb190:
    assume !(0 == 1);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_217 := $M.0;
    cmdloc_dummy_var_218 := $M.0;
    call {:si_unique_call 128} cmdloc_dummy_var_219 := $memcpy.i8(cmdloc_dummy_var_217, cmdloc_dummy_var_218, $p129, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_219;
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    $i130 := $add.i64($i128, 32);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($p2, $mul.ref($i130, 1));
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb193, $bb194;

  $bb194:
    assume !(0 == 1);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_223 := $M.0;
    cmdloc_dummy_var_224 := $M.0;
    call {:si_unique_call 130} cmdloc_dummy_var_225 := $memcpy.i8(cmdloc_dummy_var_223, cmdloc_dummy_var_224, $p131, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_225;
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    $i132 := $add.i64($i130, 32);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p2, $mul.ref($i132, 1));
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i11 := $ult.i32(0, $i10);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p12 := $p13;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(4132, 1));
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i25 := $ult.i32(0, $i24);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb28:
    assume $i25 == 1;
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p26, $i27 := $p12, 0;
    goto $bb31;

  $bb31:
    call $p29, $i30, $i31, $i32, $p26, $i27, $i41, $p42, $i44, $p45, $i47, $p48, $i50, $p51, $i53, $p54, vslice_dummy_var_390, vslice_dummy_var_391, vslice_dummy_var_392, vslice_dummy_var_393, vslice_dummy_var_394, vslice_dummy_var_395 := be_get_stat_strings_loop_$bb31($p23, $p29, $i30, $i31, $i32, $p26, $i27, $i41, $p42, $i44, $p45, $i47, $p48, $i50, $p51, $i53, $p54, vslice_dummy_var_390, vslice_dummy_var_391, vslice_dummy_var_392, vslice_dummy_var_393, vslice_dummy_var_394, vslice_dummy_var_395);
    goto $bb31_last;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} vslice_dummy_var_390 := sprintf.ref.ref.i32.ref($p26, .str.184, $i27, et_tx_stats);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p26, $mul.ref(32, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} vslice_dummy_var_391 := sprintf.ref.ref.i32.ref($p29, .str.184, $i27, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    $i41 := $add.i64(32, 32);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p26, $mul.ref($i41, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} vslice_dummy_var_392 := sprintf.ref.ref.i32.ref($p42, .str.184, $i27, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    $i44 := $add.i64($i41, 32);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p26, $mul.ref($i44, 1));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} vslice_dummy_var_393 := sprintf.ref.ref.i32.ref($p45, .str.184, $i27, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    $i47 := $add.i64($i44, 32);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p26, $mul.ref($i47, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} vslice_dummy_var_394 := sprintf.ref.ref.i32.ref($p48, .str.184, $i27, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    $i50 := $add.i64($i47, 32);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p26, $mul.ref($i50, 1));
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} vslice_dummy_var_395 := sprintf.ref.ref.i32.ref($p51, .str.184, $i27, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    $i53 := $add.i64($i50, 32);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p26, $mul.ref($i53, 1));
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i27, 1);
    call {:si_unique_call 49} {:cexpr "i"} boogie_si_record_i32($i30);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p23);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i32 := $ult.i32($i30, $i31);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i32 == 1);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb37:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $p26, $i27 := $p54, $i30;
    goto $bb37_dummy;

  $bb16:
    assume $i11 == 1;
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p14, $i15 := $p13, 0;
    goto $bb19;

  $bb19:
    call $p17, $i18, $i19, $i20, $p14, $i15, $p21, $i56, $p57, $i59, $p60, $i62, $p63, $i65, $p66, $i68, $p69, $i71, $p22, vslice_dummy_var_388, vslice_dummy_var_389, vslice_dummy_var_396, vslice_dummy_var_397, vslice_dummy_var_398, vslice_dummy_var_399, vslice_dummy_var_400 := be_get_stat_strings_loop_$bb19($p9, $p17, $i18, $i19, $i20, $p14, $i15, $p21, $i56, $p57, $i59, $p60, $i62, $p63, $i65, $p66, $i68, $p69, $i71, $p22, vslice_dummy_var_388, vslice_dummy_var_389, vslice_dummy_var_396, vslice_dummy_var_397, vslice_dummy_var_398, vslice_dummy_var_399, vslice_dummy_var_400);
    goto $bb19_last;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} vslice_dummy_var_388 := sprintf.ref.ref.i32.ref($p14, .str.183, $i15, et_rx_stats);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p14, $mul.ref(32, 1));
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} vslice_dummy_var_389 := sprintf.ref.ref.i32.ref($p17, .str.183, $i15, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    $i56 := $add.i64(32, 32);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p14, $mul.ref($i56, 1));
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} vslice_dummy_var_396 := sprintf.ref.ref.i32.ref($p57, .str.183, $i15, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    $i59 := $add.i64($i56, 32);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p14, $mul.ref($i59, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} vslice_dummy_var_397 := sprintf.ref.ref.i32.ref($p60, .str.183, $i15, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    $i62 := $add.i64($i59, 32);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p14, $mul.ref($i62, 1));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} vslice_dummy_var_398 := sprintf.ref.ref.i32.ref($p63, .str.183, $i15, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    $i65 := $add.i64($i62, 32);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p14, $mul.ref($i65, 1));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} vslice_dummy_var_399 := sprintf.ref.ref.i32.ref($p66, .str.183, $i15, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    $i68 := $add.i64($i65, 32);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p14, $mul.ref($i68, 1));
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} vslice_dummy_var_400 := sprintf.ref.ref.i32.ref($p69, .str.183, $i15, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    $i71 := $add.i64($i68, 32);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p14, $mul.ref($i71, 1));
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i15, 1);
    call {:si_unique_call 46} {:cexpr "i"} boogie_si_record_i32($i18);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p9);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i20 := $ult.i32($i18, $i19);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p21 := $p22;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p12 := $p21;
    goto $bb18;

  $bb25:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $p14, $i15 := $p22, $i18;
    goto $bb25_dummy;

  $bb193:
    assume 0 == 1;
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_220 := $M.0;
    cmdloc_dummy_var_221 := $M.0;
    call {:si_unique_call 129} cmdloc_dummy_var_222 := $memcpy.i8(cmdloc_dummy_var_220, cmdloc_dummy_var_221, $p131, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_222;
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb189:
    assume 0 == 1;
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_214 := $M.0;
    cmdloc_dummy_var_215 := $M.0;
    call {:si_unique_call 127} cmdloc_dummy_var_216 := $memcpy.i8(cmdloc_dummy_var_214, cmdloc_dummy_var_215, $p129, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_216;
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb185:
    assume 0 == 1;
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_208 := $M.0;
    cmdloc_dummy_var_209 := $M.0;
    call {:si_unique_call 125} cmdloc_dummy_var_210 := $memcpy.i8(cmdloc_dummy_var_208, cmdloc_dummy_var_209, $p127, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_210;
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb181:
    assume 0 == 1;
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_202 := $M.0;
    cmdloc_dummy_var_203 := $M.0;
    call {:si_unique_call 123} cmdloc_dummy_var_204 := $memcpy.i8(cmdloc_dummy_var_202, cmdloc_dummy_var_203, $p125, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_204;
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb177:
    assume 0 == 1;
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_196 := $M.0;
    cmdloc_dummy_var_197 := $M.0;
    call {:si_unique_call 121} cmdloc_dummy_var_198 := $memcpy.i8(cmdloc_dummy_var_196, cmdloc_dummy_var_197, $p123, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_198;
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb173:
    assume 0 == 1;
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_190 := $M.0;
    cmdloc_dummy_var_191 := $M.0;
    call {:si_unique_call 119} cmdloc_dummy_var_192 := $memcpy.i8(cmdloc_dummy_var_190, cmdloc_dummy_var_191, $p121, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_192;
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb169:
    assume 0 == 1;
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_184 := $M.0;
    cmdloc_dummy_var_185 := $M.0;
    call {:si_unique_call 117} cmdloc_dummy_var_186 := $memcpy.i8(cmdloc_dummy_var_184, cmdloc_dummy_var_185, $p119, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_186;
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb165:
    assume 0 == 1;
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_178 := $M.0;
    cmdloc_dummy_var_179 := $M.0;
    call {:si_unique_call 115} cmdloc_dummy_var_180 := $memcpy.i8(cmdloc_dummy_var_178, cmdloc_dummy_var_179, $p117, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_180;
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb161:
    assume 0 == 1;
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_172 := $M.0;
    cmdloc_dummy_var_173 := $M.0;
    call {:si_unique_call 113} cmdloc_dummy_var_174 := $memcpy.i8(cmdloc_dummy_var_172, cmdloc_dummy_var_173, $p115, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_174;
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb157:
    assume 0 == 1;
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_166 := $M.0;
    cmdloc_dummy_var_167 := $M.0;
    call {:si_unique_call 111} cmdloc_dummy_var_168 := $memcpy.i8(cmdloc_dummy_var_166, cmdloc_dummy_var_167, $p113, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_168;
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb153:
    assume 0 == 1;
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_160 := $M.0;
    cmdloc_dummy_var_161 := $M.0;
    call {:si_unique_call 109} cmdloc_dummy_var_162 := $memcpy.i8(cmdloc_dummy_var_160, cmdloc_dummy_var_161, $p111, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_162;
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb149:
    assume 0 == 1;
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_154 := $M.0;
    cmdloc_dummy_var_155 := $M.0;
    call {:si_unique_call 107} cmdloc_dummy_var_156 := $memcpy.i8(cmdloc_dummy_var_154, cmdloc_dummy_var_155, $p109, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_156;
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb145:
    assume 0 == 1;
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_148 := $M.0;
    cmdloc_dummy_var_149 := $M.0;
    call {:si_unique_call 105} cmdloc_dummy_var_150 := $memcpy.i8(cmdloc_dummy_var_148, cmdloc_dummy_var_149, $p107, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_150;
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb141:
    assume 0 == 1;
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_142 := $M.0;
    cmdloc_dummy_var_143 := $M.0;
    call {:si_unique_call 103} cmdloc_dummy_var_144 := $memcpy.i8(cmdloc_dummy_var_142, cmdloc_dummy_var_143, $p105, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_144;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb137:
    assume 0 == 1;
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_136 := $M.0;
    cmdloc_dummy_var_137 := $M.0;
    call {:si_unique_call 101} cmdloc_dummy_var_138 := $memcpy.i8(cmdloc_dummy_var_136, cmdloc_dummy_var_137, $p103, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_138;
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb133:
    assume 0 == 1;
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_130 := $M.0;
    cmdloc_dummy_var_131 := $M.0;
    call {:si_unique_call 99} cmdloc_dummy_var_132 := $memcpy.i8(cmdloc_dummy_var_130, cmdloc_dummy_var_131, $p101, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_132;
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb129:
    assume 0 == 1;
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_124 := $M.0;
    cmdloc_dummy_var_125 := $M.0;
    call {:si_unique_call 97} cmdloc_dummy_var_126 := $memcpy.i8(cmdloc_dummy_var_124, cmdloc_dummy_var_125, $p99, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_126;
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb125:
    assume 0 == 1;
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_118 := $M.0;
    cmdloc_dummy_var_119 := $M.0;
    call {:si_unique_call 95} cmdloc_dummy_var_120 := $memcpy.i8(cmdloc_dummy_var_118, cmdloc_dummy_var_119, $p97, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_120;
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb121:
    assume 0 == 1;
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_112 := $M.0;
    cmdloc_dummy_var_113 := $M.0;
    call {:si_unique_call 93} cmdloc_dummy_var_114 := $memcpy.i8(cmdloc_dummy_var_112, cmdloc_dummy_var_113, $p95, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_114;
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb117:
    assume 0 == 1;
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_106 := $M.0;
    cmdloc_dummy_var_107 := $M.0;
    call {:si_unique_call 91} cmdloc_dummy_var_108 := $memcpy.i8(cmdloc_dummy_var_106, cmdloc_dummy_var_107, $p93, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_108;
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb113:
    assume 0 == 1;
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_100 := $M.0;
    cmdloc_dummy_var_101 := $M.0;
    call {:si_unique_call 89} cmdloc_dummy_var_102 := $memcpy.i8(cmdloc_dummy_var_100, cmdloc_dummy_var_101, $p91, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_102;
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb109:
    assume 0 == 1;
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_94 := $M.0;
    cmdloc_dummy_var_95 := $M.0;
    call {:si_unique_call 87} cmdloc_dummy_var_96 := $memcpy.i8(cmdloc_dummy_var_94, cmdloc_dummy_var_95, $p89, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_96;
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb105:
    assume 0 == 1;
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_88 := $M.0;
    cmdloc_dummy_var_89 := $M.0;
    call {:si_unique_call 85} cmdloc_dummy_var_90 := $memcpy.i8(cmdloc_dummy_var_88, cmdloc_dummy_var_89, $p87, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_90;
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb101:
    assume 0 == 1;
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_82 := $M.0;
    cmdloc_dummy_var_83 := $M.0;
    call {:si_unique_call 83} cmdloc_dummy_var_84 := $memcpy.i8(cmdloc_dummy_var_82, cmdloc_dummy_var_83, $p85, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_84;
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb97:
    assume 0 == 1;
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_76 := $M.0;
    cmdloc_dummy_var_77 := $M.0;
    call {:si_unique_call 81} cmdloc_dummy_var_78 := $memcpy.i8(cmdloc_dummy_var_76, cmdloc_dummy_var_77, $p83, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_78;
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb93:
    assume 0 == 1;
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_70 := $M.0;
    cmdloc_dummy_var_71 := $M.0;
    call {:si_unique_call 79} cmdloc_dummy_var_72 := $memcpy.i8(cmdloc_dummy_var_70, cmdloc_dummy_var_71, $p81, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_72;
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb89:
    assume 0 == 1;
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_64 := $M.0;
    cmdloc_dummy_var_65 := $M.0;
    call {:si_unique_call 77} cmdloc_dummy_var_66 := $memcpy.i8(cmdloc_dummy_var_64, cmdloc_dummy_var_65, $p79, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_66;
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb85:
    assume 0 == 1;
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_58 := $M.0;
    cmdloc_dummy_var_59 := $M.0;
    call {:si_unique_call 75} cmdloc_dummy_var_60 := $memcpy.i8(cmdloc_dummy_var_58, cmdloc_dummy_var_59, $p77, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_60;
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb81:
    assume 0 == 1;
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_52 := $M.0;
    cmdloc_dummy_var_53 := $M.0;
    call {:si_unique_call 73} cmdloc_dummy_var_54 := $memcpy.i8(cmdloc_dummy_var_52, cmdloc_dummy_var_53, $p75, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_54;
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb77:
    assume 0 == 1;
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_46 := $M.0;
    cmdloc_dummy_var_47 := $M.0;
    call {:si_unique_call 71} cmdloc_dummy_var_48 := $memcpy.i8(cmdloc_dummy_var_46, cmdloc_dummy_var_47, $p73, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_48;
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb73:
    assume 0 == 1;
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_40 := $M.0;
    cmdloc_dummy_var_41 := $M.0;
    call {:si_unique_call 69} cmdloc_dummy_var_42 := $memcpy.i8(cmdloc_dummy_var_40, cmdloc_dummy_var_41, $p8, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_42;
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb11:
    assume 0 == 1;
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_4 := $M.0;
    cmdloc_dummy_var_5 := $M.0;
    call {:si_unique_call 42} cmdloc_dummy_var_6 := $memcpy.i8(cmdloc_dummy_var_4, cmdloc_dummy_var_5, $p2, et_stats, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_6;
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb6;

  $bb7:
    assume $i7 == 1;
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb43, $bb44;

  $bb44:
    assume !(0 == 1);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_13 := $M.0;
    cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 51} cmdloc_dummy_var_15 := $memcpy.i8(cmdloc_dummy_var_13, cmdloc_dummy_var_14, $p2, et_self_tests, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_15;
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p2, $mul.ref(32, 1));
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb49, $bb50;

  $bb50:
    assume !(0 == 1);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.0;
    cmdloc_dummy_var_20 := $M.0;
    call {:si_unique_call 53} cmdloc_dummy_var_21 := $memcpy.i8(cmdloc_dummy_var_19, cmdloc_dummy_var_20, $p33, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(1, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_21;
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    $i34 := $add.i64(32, 32);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p2, $mul.ref($i34, 1));
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb53, $bb54;

  $bb54:
    assume !(0 == 1);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_25 := $M.0;
    cmdloc_dummy_var_26 := $M.0;
    call {:si_unique_call 55} cmdloc_dummy_var_27 := $memcpy.i8(cmdloc_dummy_var_25, cmdloc_dummy_var_26, $p35, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(2, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_27;
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    $i36 := $add.i64($i34, 32);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p2, $mul.ref($i36, 1));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb57, $bb58;

  $bb58:
    assume !(0 == 1);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_31 := $M.0;
    cmdloc_dummy_var_32 := $M.0;
    call {:si_unique_call 57} cmdloc_dummy_var_33 := $memcpy.i8(cmdloc_dummy_var_31, cmdloc_dummy_var_32, $p37, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(3, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_33;
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    $i38 := $add.i64($i36, 32);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p2, $mul.ref($i38, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb61, $bb62;

  $bb62:
    assume !(0 == 1);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_37 := $M.0;
    cmdloc_dummy_var_38 := $M.0;
    call {:si_unique_call 59} cmdloc_dummy_var_39 := $memcpy.i8(cmdloc_dummy_var_37, cmdloc_dummy_var_38, $p39, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(4, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_39;
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb61:
    assume 0 == 1;
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_34 := $M.0;
    cmdloc_dummy_var_35 := $M.0;
    call {:si_unique_call 58} cmdloc_dummy_var_36 := $memcpy.i8(cmdloc_dummy_var_34, cmdloc_dummy_var_35, $p39, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(4, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_36;
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb57:
    assume 0 == 1;
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_28 := $M.0;
    cmdloc_dummy_var_29 := $M.0;
    call {:si_unique_call 56} cmdloc_dummy_var_30 := $memcpy.i8(cmdloc_dummy_var_28, cmdloc_dummy_var_29, $p37, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(3, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_30;
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb53:
    assume 0 == 1;
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.0;
    cmdloc_dummy_var_23 := $M.0;
    call {:si_unique_call 54} cmdloc_dummy_var_24 := $memcpy.i8(cmdloc_dummy_var_22, cmdloc_dummy_var_23, $p35, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(2, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_24;
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb49:
    assume 0 == 1;
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.0;
    cmdloc_dummy_var_17 := $M.0;
    call {:si_unique_call 52} cmdloc_dummy_var_18 := $memcpy.i8(cmdloc_dummy_var_16, cmdloc_dummy_var_17, $p33, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(1, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_18;
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb43:
    assume 0 == 1;
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_10 := $M.0;
    cmdloc_dummy_var_11 := $M.0;
    call {:si_unique_call 50} cmdloc_dummy_var_12 := $memcpy.i8(cmdloc_dummy_var_10, cmdloc_dummy_var_11, $p2, et_self_tests, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_12;
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb37_dummy:
    assume false;
    return;

  $bb31_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_311;

  $bb25_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_291;
}



const be_set_phys_id: ref;

axiom be_set_phys_id == $sub.ref(0, 251014);

procedure be_set_phys_id($p0: ref, $i1: i32) returns ($r: i32);



const be_get_ethtool_stats: ref;

axiom be_get_ethtool_stats == $sub.ref(0, 252046);

procedure be_get_ethtool_stats($p0: ref, $p1: ref, $p2: ref);



const be_get_sset_count: ref;

axiom be_get_sset_count == $sub.ref(0, 253078);

procedure be_get_sset_count($p0: ref, $i1: i32) returns ($r: i32);



const be_get_rxnfc: ref;

axiom be_get_rxnfc == $sub.ref(0, 254110);

procedure be_get_rxnfc($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const be_set_rxnfc: ref;

axiom be_set_rxnfc == $sub.ref(0, 255142);

procedure be_set_rxnfc($p0: ref, $p1: ref) returns ($r: i32);



const be_do_flash: ref;

axiom be_do_flash == $sub.ref(0, 256174);

procedure be_do_flash($p0: ref, $p1: ref) returns ($r: i32);



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 257206);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const netdev_priv: ref;

axiom netdev_priv == $sub.ref(0, 258238);

procedure netdev_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(2816, 1));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const be_load_fw: ref;

axiom be_load_fw == $sub.ref(0, 259270);

procedure be_load_fw($p0: ref, $p1: ref) returns ($r: i32);



const netif_running: ref;

axiom netif_running == $sub.ref(0, 260302);

procedure netif_running($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_running($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(72, 1));
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 132} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 261334);

procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 1} true;
    call {:si_unique_call 133} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 134} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 1} true;
    call {:si_unique_call 135} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 136} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 1} true;
    call {:si_unique_call 137} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 138} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 1} true;
    call {:si_unique_call 139} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 140} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 1} true;
    call {:si_unique_call 141} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 142} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 1} true;
    call {:si_unique_call 143} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 144} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const request_firmware: ref;

axiom request_firmware == $sub.ref(0, 262366);

procedure request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 263398);

procedure _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 1} true;
    call {:si_unique_call 145} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 146} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 1} true;
    call {:si_unique_call 147} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 148} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 1} true;
    call {:si_unique_call 149} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 150} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref, p.5: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 1} true;
    call {:si_unique_call 151} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 152} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



const lancer_fw_download: ref;

axiom lancer_fw_download == $sub.ref(0, 264430);

procedure lancer_fw_download($p0: ref, $p1: ref) returns ($r: i32);



const be_fw_download: ref;

axiom be_fw_download == $sub.ref(0, 265462);

procedure be_fw_download($p0: ref, $p1: ref) returns ($r: i32);



const release_firmware: ref;

axiom release_firmware == $sub.ref(0, 266494);

procedure release_firmware($p0: ref);



const dma_alloc_attrs: ref;

axiom dma_alloc_attrs == $sub.ref(0, 267526);

procedure dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} {:cexpr "dma_alloc_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 154} {:cexpr "dma_alloc_attrs:arg:gfp"} boogie_si_record_i32($i3);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $p5 := get_dma_ops($p0);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i3, $sub.i32(0, 8));
    call {:si_unique_call 156} {:cexpr "gfp"} boogie_si_record_i32($i6);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $p9 := $p0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} $i10 := is_device_dma_capable($p9);
    call {:si_unique_call 158} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $i17 := dma_alloc_coherent_gfp_flags($p9, $i6);
    call {:si_unique_call 160} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    call {:si_unique_call 161} $p20 := devirtbounce($p19, $p9, $i1, $p2, $i17, $p4);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p2);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} debug_dma_alloc_coherent($p9, $i1, $i21, $p20);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p12 := $p20;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p9 := x86_dma_fallback_dev;
    goto $bb3;
}



const be_get_ufi_type: ref;

axiom be_get_ufi_type == $sub.ref(0, 268558);

procedure be_get_ufi_type($p0: ref, $p1: ref) returns ($r: i32);



const be_flash_skyhawk: ref;

axiom be_flash_skyhawk == $sub.ref(0, 269590);

procedure be_flash_skyhawk($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);



const be_flash_BEx: ref;

axiom be_flash_BEx == $sub.ref(0, 270622);

procedure be_flash_BEx($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);



const dma_free_attrs: ref;

axiom dma_free_attrs == $sub.ref(0, 271654);

procedure dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_401: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} {:cexpr "dma_free_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 164} {:cexpr "dma_free_attrs:arg:bus"} boogie_si_record_i64($i3);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $p5 := get_dma_ops($p0);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $i6 := arch_local_save_flags();
    call {:si_unique_call 167} {:cexpr "_flags"} boogie_si_record_i64($i6);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $i7 := arch_irqs_disabled_flags($i6);
    call {:si_unique_call 169} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 170} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 172} {:cexpr "tmp___1"} boogie_si_record_i64($i13);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} vslice_dummy_var_401 := ldv__builtin_expect($i17, 0);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} debug_dma_free_coherent($p0, $i1, $p2, $i3);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    call {:si_unique_call 176} devirtbounce.1($p24, $p0, $i1, $p2, $i3, $p4);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} warn_slowpath_null(.str.168, 166);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 272686);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 178} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(952, 1)), $mul.ref(0, 1));
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(952, 1)), $mul.ref(0, 1));
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, dma_ops);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const arch_local_save_flags: ref;

axiom arch_local_save_flags == $sub.ref(0, 273718);

procedure arch_local_save_flags() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_save_flags() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, pv_irq_ops);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 180} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 182} $i7 := devirtbounce.3(0, 44, pv_irq_ops, 1);
    call {:si_unique_call 183} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 181} devirtbounce.2(0, .str.169, 824, 12);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_save_flags_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const arch_irqs_disabled_flags: ref;

axiom arch_irqs_disabled_flags == $sub.ref(0, 274750);

procedure arch_irqs_disabled_flags($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation arch_irqs_disabled_flags($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} {:cexpr "arch_irqs_disabled_flags:arg:flags"} boogie_si_record_i64($i0);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 512);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 275782);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 186} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 276814);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    return;
}



const debug_dma_free_coherent: ref;

axiom debug_dma_free_coherent == $sub.ref(0, 277846);

procedure debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} {:cexpr "debug_dma_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 189} {:cexpr "debug_dma_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    return;
}



const get_fsec_info: ref;

axiom get_fsec_info == $sub.ref(0, 278878);

procedure get_fsec_info($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);



const is_comp_in_ufi: ref;

axiom is_comp_in_ufi == $sub.ref(0, 279910);

procedure is_comp_in_ufi($p0: ref, $p1: ref, $i2: i32) returns ($r: i1);



const memcmp: ref;

axiom memcmp == $sub.ref(0, 280942);

procedure memcmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const phy_flashing_required: ref;

axiom phy_flashing_required == $sub.ref(0, 281974);

procedure phy_flashing_required($p0: ref) returns ($r: i1);



const be_flash_redboot: ref;

axiom be_flash_redboot == $sub.ref(0, 283006);

procedure be_flash_redboot($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i1);



const be_flash: ref;

axiom be_flash == $sub.ref(0, 284038);

procedure be_flash($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32);



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 285070);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const be_cmd_write_flashrom: ref;

axiom be_cmd_write_flashrom == $sub.ref(0, 286102);

procedure be_cmd_write_flashrom($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);



const spin_lock_bh: ref;

axiom spin_lock_bh == $sub.ref(0, 287134);

procedure spin_lock_bh($p0: ref);
  free requires assertsPassed;



implementation spin_lock_bh($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} _raw_spin_lock_bh($p2);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    return;
}



const wrb_from_mccq: ref;

axiom wrb_from_mccq == $sub.ref(0, 288166);

procedure wrb_from_mccq($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation wrb_from_mccq($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p6: ref;
  var cmdloc_dummy_var_226: [ref]i8;
  var cmdloc_dummy_var_227: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1));
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1)), $mul.ref(34, 1));
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1)), $mul.ref(36, 1));
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i8 := atomic_read($p7);
    call {:si_unique_call 192} {:cexpr "tmp"} boogie_si_record_i32($i8);
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i12 := $sge.i32($i8, $i11);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $p13 := queue_head_node($p2);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} queue_head_inc___0($p2);
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1)), $mul.ref(36, 1));
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} atomic_inc($p15);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p14);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_226 := $M.0;
    call {:si_unique_call 196} cmdloc_dummy_var_227 := $memset.i8(cmdloc_dummy_var_226, $p16, 0, 256, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_227;
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p6 := $p13;
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;
}



const be_wrb_cmd_hdr_prepare: ref;

axiom be_wrb_cmd_hdr_prepare == $sub.ref(0, 289198);

procedure be_wrb_cmd_hdr_prepare($p0: ref, $i1: i8, $i2: i8, $i3: i32, $p4: ref, $p5: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_wrb_cmd_hdr_prepare($p0: ref, $i1: i8, $i2: i8, $i3: i32, $p4: ref, $p5: ref)
{
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} {:cexpr "be_wrb_cmd_hdr_prepare:arg:subsystem"} boogie_si_record_i8($i1);
    call {:si_unique_call 198} {:cexpr "be_wrb_cmd_hdr_prepare:arg:opcode"} boogie_si_record_i8($i2);
    call {:si_unique_call 199} {:cexpr "be_wrb_cmd_hdr_prepare:arg:cmd_len"} boogie_si_record_i32($i3);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 200} {:cexpr "addr"} boogie_si_record_i64($i6);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $i2);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, $i1);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i3, 16);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 0);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i32($i6);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 256)), $mul.ref(8, 1));
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i14 := $lshr.i64($i6, 32);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 256)), $mul.ref(12, 1));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 256)), $mul.ref(4, 1));
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i3);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p5);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i38, 1);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i39);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p4);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} swap_dws($p41, 8);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i21, 8);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $p24 := nonembedded_sgl($p4);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i27 := $lshr.i64($i26, 32);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i64.i32($i27);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p24, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i32($i31);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p24, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p24, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const be_mcc_notify: ref;

axiom be_mcc_notify == $sub.ref(0, 290230);

procedure be_mcc_notify($p0: ref);
  free requires assertsPassed;



implementation be_mcc_notify($p0: ref)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $i3 := be_error($p0);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 204} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1)), $mul.ref(28, 1));
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 2047);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, 0);
    call {:si_unique_call 205} {:cexpr "val"} boogie_si_record_i32($i10);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 65536);
    call {:si_unique_call 206} {:cexpr "val"} boogie_si_record_i32($i11);
    call {:si_unique_call 207} devirtbounce.4(0);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(320, 1));
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} iowrite32($i11, $p14);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const spin_unlock_bh: ref;

axiom spin_unlock_bh == $sub.ref(0, 291262);

procedure spin_unlock_bh($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_bh($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} _raw_spin_unlock_bh($p2);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    return;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 292294);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 210} {:cexpr "msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 1} true;
    call {:si_unique_call 211} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 212} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const wait_for_completion_timeout: ref;

axiom wait_for_completion_timeout == $sub.ref(0, 293326);

procedure wait_for_completion_timeout($p0: ref, $i1: i64) returns ($r: i64);



const _raw_spin_unlock_bh: ref;

axiom _raw_spin_unlock_bh == $sub.ref(0, 294358);

procedure _raw_spin_unlock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    return;
}



const be_error: ref;

axiom be_error == $sub.ref(0, 295390);

procedure be_error($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation be_error($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i1;
  var $p5: ref;
  var $i6: i8;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i1;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364012, 1));
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364014, 1));
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364013, 1));
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i4 := $i10;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const iowrite32: ref;

axiom iowrite32 == $sub.ref(0, 296422);

procedure iowrite32($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation iowrite32($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} {:cexpr "iowrite32:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    return;
}



const nonembedded_sgl: ref;

axiom nonembedded_sgl == $sub.ref(0, 297454);

procedure nonembedded_sgl($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation nonembedded_sgl($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(20, 1));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const swap_dws: ref;

axiom swap_dws == $sub.ref(0, 298486);

procedure swap_dws($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation swap_dws($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} {:cexpr "swap_dws:arg:len"} boogie_si_record_i32($i1);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 299518);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const queue_head_node: ref;

axiom queue_head_node == $sub.ref(0, 300550);

procedure queue_head_node($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation queue_head_node($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i10 := $mul.i32($i6, $i9);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p3, $mul.ref($i11, 1));
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;
}



const queue_head_inc___0: ref;

axiom queue_head_inc___0 == $sub.ref(0, 301582);

procedure queue_head_inc___0($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation queue_head_inc___0($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} index_inc___0($p1, $i5);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 302614);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 216} devirtbounce.5(0, $p1, $p1);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 303646);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const index_inc___0: ref;

axiom index_inc___0 == $sub.ref(0, 304678);

procedure index_inc___0($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation index_inc___0($p0: ref, $i1: i16)
{
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $i5: i16;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} {:cexpr "index_inc___0:arg:limit"} boogie_si_record_i16($i1);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p0);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i1);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $i8 := MODULO___0($i5, $i7);
    call {:si_unique_call 219} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p0, $i9);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    return;
}



const MODULO___0: ref;

axiom MODULO___0 == $sub.ref(0, 305710);

procedure MODULO___0($i0: i16, $i1: i16) returns ($r: i32);
  free requires assertsPassed;



implementation MODULO___0($i0: i16, $i1: i16) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} {:cexpr "MODULO___0:arg:val"} boogie_si_record_i16($i0);
    call {:si_unique_call 221} {:cexpr "MODULO___0:arg:limit"} boogie_si_record_i16($i1);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i1);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $sub.i32(0, 1));
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i2, $i4);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 223} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i0);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i1);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, $sub.i32(0, 1));
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i11, $i13);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i10 == 1;
    call {:si_unique_call 224} devirtbounce.2(0, .str.23, 136, 12);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call MODULO___0_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const _raw_spin_lock_bh: ref;

axiom _raw_spin_lock_bh == $sub.ref(0, 306742);

procedure _raw_spin_lock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    return;
}



const be_cmd_get_flash_crc: ref;

axiom be_cmd_get_flash_crc == $sub.ref(0, 307774);

procedure be_cmd_get_flash_crc($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const embedded_payload: ref;

axiom embedded_payload == $sub.ref(0, 308806);

procedure embedded_payload($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation embedded_payload($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(20, 1));
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const be_mcc_notify_wait: ref;

axiom be_mcc_notify_wait == $sub.ref(0, 309838);

procedure be_mcc_notify_wait($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.21, $M.0, $CurrAddr;



implementation be_mcc_notify_wait($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p4: ref;
  var $i5: i16;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i16;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i16;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $M.21 := $store.i16($M.21, $p1, $i5);
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} index_dec($p1, $i10);
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1));
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.21, $p1);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $p15 := queue_index_node($p11, $i14);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 256)), $mul.ref(8, 1));
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p16, $mul.ref(0, 256)), $mul.ref(12, 1));
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $p21 := be_decode_resp_hdr($i18, $i20);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} be_mcc_notify($p0);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $i22 := be_mcc_wait_compl($p0);
    call {:si_unique_call 231} {:cexpr "status"} boogie_si_record_i32($i22);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, $sub.i32(0, 5));
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p21, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    call {:si_unique_call 232} {:cexpr "status"} boogie_si_record_i32($i27);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i24 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    goto $bb3;
}



const index_dec: ref;

axiom index_dec == $sub.ref(0, 310870);

procedure index_dec($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.21;



implementation index_dec($p0: ref, $i1: i16)
{
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $i5: i16;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} {:cexpr "index_dec:arg:limit"} boogie_si_record_i16($i1);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.21, $p0);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 65535);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i1);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} $i8 := MODULO___0($i5, $i7);
    call {:si_unique_call 235} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $M.21 := $store.i16($M.21, $p0, $i9);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    return;
}



const queue_index_node: ref;

axiom queue_index_node == $sub.ref(0, 311902);

procedure queue_index_node($p0: ref, $i1: i16) returns ($r: ref);
  free requires assertsPassed;



implementation queue_index_node($p0: ref, $i1: i16) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} {:cexpr "queue_index_node:arg:index"} boogie_si_record_i16($i1);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i1);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i9 := $mul.i32($i5, $i8);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p4, $mul.ref($i10, 1));
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;
}



const be_decode_resp_hdr: ref;

axiom be_decode_resp_hdr == $sub.ref(0, 312934);

procedure be_decode_resp_hdr($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation be_decode_resp_hdr($i0: i32, $i1: i32) returns ($r: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} {:cexpr "be_decode_resp_hdr:arg:tag0"} boogie_si_record_i32($i0);
    call {:si_unique_call 238} {:cexpr "be_decode_resp_hdr:arg:tag1"} boogie_si_record_i32($i1);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    call {:si_unique_call 239} {:cexpr "addr"} boogie_si_record_i64($i2);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i3 := $shl.i64($i2, 32);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i0);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i5 := $or.i64($i3, $i4);
    call {:si_unique_call 240} {:cexpr "addr"} boogie_si_record_i64($i5);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const be_mcc_wait_compl: ref;

axiom be_mcc_wait_compl == $sub.ref(0, 313966);

procedure be_mcc_wait_compl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_mcc_wait_compl($p0: ref) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i7: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i16: i32;
  var $i17: i1;
  var $i2: i32;
  var $i18: i32;
  var $i19: i32;
  var $i14: i32;
  var $i15: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i6: i32;
  var vslice_dummy_var_402: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb1;

  $bb1:
    call $i3, $i4, $i5, $i7, $p9, $i10, $i11, $i12, $i13, $i16, $i17, $i2, $i18, $i19 := be_mcc_wait_compl_loop_$bb1($p0, $i3, $i4, $i5, $i7, $p9, $i10, $i11, $i12, $i13, $i16, $i17, $i2, $i18, $i19);
    goto $bb1_last;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $i3 := be_error($p0);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 242} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} local_bh_disable();
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $i7 := be_process_mcc($p0);
    call {:si_unique_call 245} {:cexpr "status"} boogie_si_record_i32($i7);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} local_bh_enable();
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1)), $mul.ref(36, 1));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $i10 := atomic_read($p9);
    call {:si_unique_call 248} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i12, $i13 := $i2, $i7;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} __const_udelay(429500);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i2, 1);
    call {:si_unique_call 250} {:cexpr "i"} boogie_si_record_i32($i16);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i17 := $sle.i32($i16, 119999);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i16, $i7;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14, $i15 := $i18, $i19;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i14, 120000);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i6 := $i15;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} vslice_dummy_var_402 := dev_err.ref.ref($p23, .str.167);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364013, 1));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 1);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 5);
    goto $bb5;

  $bb11:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i2 := $i16;
    goto $bb11_dummy;

  $bb7:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i14, $i15 := $i12, $i13;
    goto $bb9;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 5);
    goto $bb5;

  $bb11_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1041;
}



const local_bh_disable: ref;

axiom local_bh_disable == $sub.ref(0, 314998);

procedure local_bh_disable();
  free requires assertsPassed;



implementation local_bh_disable()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    return;
}



const be_process_mcc: ref;

axiom be_process_mcc == $sub.ref(0, 316030);

procedure be_process_mcc($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_process_mcc($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i8;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i8;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i8;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $p42: ref;
  var $i43: i32;
  var $i35: i32;
  var $i44: i32;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i48: i32;
  var $i49: i32;
  var $i6: i32;
  var $i7: i32;
  var $i50: i1;
  var $p52: ref;
  var $i53: i16;
  var $i54: i32;
  var $i55: i16;
  var $p56: ref;
  var $i57: i8;
  var $i58: i1;
  var $i59: i16;
  var $i60: i32;
  var $i61: i16;
  var $p62: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(408, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} spin_lock($p2);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $p3 := be_mcc_compl_get($p0);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i6, $i7 := 0, 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i6, 0);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(408, 1));
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} spin_unlock($p62);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb24:
    assume $i50 == 1;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(40, 1)), $mul.ref(28, 1));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.0, $p52);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i54);
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(80, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i8.i1($i57);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i16($i6);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i60 := $zext.i16.i32($i59);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i16($i60);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} be_cq_notify($p0, $i55, $i58, $i61);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p8, $i9, $i10 := $p3, 0, 0;
    goto $bb4;

  $bb4:
    call $p11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $i19, $p20, $p21, $i22, $i23, $i24, $i25, $p26, $i27, $p28, $i29, $i30, $i31, $i32, $p33, $i34, $p36, $i37, $i38, $i39, $i40, $p42, $i43, $i35, $i44, $p45, $i46, $i47, $p8, $i9, $i10, $i48, $i49 := be_process_mcc_loop_$bb4($p0, $p11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $i19, $p20, $p21, $i22, $i23, $i24, $i25, $p26, $i27, $p28, $i29, $i30, $i31, $i32, $p33, $i34, $p36, $i37, $i38, $i39, $i40, $p42, $i43, $i35, $i44, $p45, $i46, $i47, $p8, $i9, $i10, $i48, $i49);
    goto $bb4_last;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 1073741824);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 268435456);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i43 := $i9;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i35 := $i43;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} be_mcc_compl_use($p8);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i10, 1);
    call {:si_unique_call 264} {:cexpr "num"} boogie_si_record_i32($i44);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $p45 := be_mcc_compl_get($p0);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i48, $i49 := $i44, $i35;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i6, $i7 := $i48, $i49;
    goto $bb3;

  $bb21:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $p8, $i9, $i10 := $p45, $i35, $i44;
    goto $bb21_dummy;

  $bb18:
    assume $i39 == 1;
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $i40 := be_mcc_compl_process($p0, $p8);
    call {:si_unique_call 267} {:cexpr "status"} boogie_si_record_i32($i40);
    $p42 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1)), $mul.ref(36, 1));
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} atomic_dec($p42);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i43 := $i40;
    goto $bb20;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $i17 := is_link_state_evt($i16);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i8($i17);
    call {:si_unique_call 255} {:cexpr "tmp___1"} boogie_si_record_i8($i18);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $i23 := is_grp5_evt($i22);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i8($i23);
    call {:si_unique_call 258} {:cexpr "tmp___0"} boogie_si_record_i8($i24);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $i30 := is_dbg_evt($i29);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i8($i30);
    call {:si_unique_call 261} {:cexpr "tmp"} boogie_si_record_i8($i31);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i31);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i35 := $i9;
    goto $bb17;

  $bb14:
    assume $i32 == 1;
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} be_async_dbg_evt_process($p0, $i34, $p8);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} be_async_grp5_evt_process($p0, $i27, $p8);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p8);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} be_async_link_state_process($p0, $p20);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb21_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1086;
}



const local_bh_enable: ref;

axiom local_bh_enable == $sub.ref(0, 317062);

procedure local_bh_enable();
  free requires assertsPassed;



implementation local_bh_enable()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    return;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 318094);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 319126);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} _raw_spin_lock($p2);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    return;
}



const is_link_state_evt: ref;

axiom is_link_state_evt == $sub.ref(0, 320158);

procedure is_link_state_evt($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation is_link_state_evt($i0: i32) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} {:cexpr "is_link_state_evt:arg:trailer"} boogie_si_record_i32($i0);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i1 := $lshr.i32($i0, 8);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 255);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const be_async_link_state_process: ref;

axiom be_async_link_state_process == $sub.ref(0, 321190);

procedure be_async_link_state_process($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_async_link_state_process($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(16, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $sub.i32(0, 1));
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 57888);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 57896);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363952, 1));
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 1);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} be_link_status_update($p0, $i28);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 2);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb6;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;
}



const is_grp5_evt: ref;

axiom is_grp5_evt == $sub.ref(0, 322222);

procedure is_grp5_evt($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation is_grp5_evt($i0: i32) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} {:cexpr "is_grp5_evt:arg:trailer"} boogie_si_record_i32($i0);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i1 := $lshr.i32($i0, 8);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 255);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 5);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const be_async_grp5_evt_process: ref;

axiom be_async_grp5_evt_process == $sub.ref(0, 323254);

procedure be_async_grp5_evt_process($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_async_grp5_evt_process($p0: ref, $i1: i32, $p2: ref)
{
  var $i3: i32;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var vslice_dummy_var_403: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} {:cexpr "be_async_grp5_evt_process:arg:trailer"} boogie_si_record_i32($i1);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i3 := $lshr.i32($i1, 16);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    call {:si_unique_call 277} {:cexpr "event_type"} boogie_si_record_i8($i4);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} vslice_dummy_var_403 := dev_warn.ref.ref($p15, .str.162);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} be_async_grp5_pvid_state_process($p0, $p12);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} be_async_grp5_cos_priority_process($p0, $p10);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i5, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb9:
    assume $i9 == 1;
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} be_async_grp5_qos_speed_process($p0, $p11);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const is_dbg_evt: ref;

axiom is_dbg_evt == $sub.ref(0, 324286);

procedure is_dbg_evt($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation is_dbg_evt($i0: i32) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} {:cexpr "is_dbg_evt:arg:trailer"} boogie_si_record_i32($i0);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i1 := $lshr.i32($i0, 8);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 255);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 6);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const be_async_dbg_evt_process: ref;

axiom be_async_dbg_evt_process == $sub.ref(0, 325318);

procedure be_async_dbg_evt_process($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_async_dbg_evt_process($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i16;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var vslice_dummy_var_404: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} {:cexpr "be_async_dbg_evt_process:arg:trailer"} boogie_si_record_i32($i1);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i32($i1, 16);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    call {:si_unique_call 284} {:cexpr "event_type"} boogie_si_record_i8($i5);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} vslice_dummy_var_404 := dev_warn.ref.ref($p21, .str.163);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i7 == 1;
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363952, 1));
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i16, 2048);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363952, 1));
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364278, 1));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, $i13);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const be_mcc_compl_process: ref;

axiom be_mcc_compl_process == $sub.ref(0, 326350);

procedure be_mcc_compl_process($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation be_mcc_compl_process($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i16;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $p15: ref;
  var $i16: i8;
  var $i17: i8;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i16;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i74: i32;
  var vslice_dummy_var_405: i32;
  var vslice_dummy_var_406: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} swap_dws($p2, 4);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    call {:si_unique_call 287} {:cexpr "compl_status"} boogie_si_record_i16($i5);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $p10 := be_decode_resp_hdr($i7, $i9);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i17, $i18 := 0, 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i17);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 7);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i20 == 1);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i17);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 172);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i5);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i17);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 121);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i5);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 66);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb34, $bb36;

  $bb36:
    assume !($i51 == 1);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i5);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 2);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i5);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 5);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i55 == 1);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i64 := $lshr.i32($i63, 16);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i16($i64);
    call {:si_unique_call 294} {:cexpr "extd_status"} boogie_si_record_i16($i65);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i17);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i18);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i5);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i65);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} vslice_dummy_var_406 := dev_err.ref.ref.i32.i32.i32.i32($p68, .str.165, $i69, $i70, $i71, $i72);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i5);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $r := $i74;
    return;

  $bb41:
    assume $i55 == 1;
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i17);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i18);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} vslice_dummy_var_405 := dev_warn.ref.ref.i32.i32($p58, .str.164, $i59, $i60);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb35;

  $bb31:
    assume $i48 == 1;
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364284, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 0);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb13:
    assume $i29 == 1;
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i17);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 4);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i31 == 1);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i17);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 18);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i17);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 121);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb24:
    assume $i38 == 1;
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i18);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 1);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb26;

  $bb27:
    assume $i40 == 1;
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p10);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(0, 1));
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i44);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i18);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 3);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb20;

  $bb21:
    assume $i35 == 1;
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} be_parse_stats($p0);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364040, 1));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, 0);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb16;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i18);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 1);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb9;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i5);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364096, 1));
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364104, 1));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} complete_($p27);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb5;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    call {:si_unique_call 289} {:cexpr "opcode"} boogie_si_record_i8($i14);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    call {:si_unique_call 290} {:cexpr "subsystem"} boogie_si_record_i8($i16);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i17, $i18 := $i14, $i16;
    goto $bb3;
}



const atomic_dec: ref;

axiom atomic_dec == $sub.ref(0, 327382);

procedure atomic_dec($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation atomic_dec($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 296} devirtbounce.5(0, $p1, $p1);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    return;
}



const be_mcc_compl_use: ref;

axiom be_mcc_compl_use == $sub.ref(0, 328414);

procedure be_mcc_compl_use($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_mcc_compl_use($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    return;
}



const be_mcc_compl_get: ref;

axiom be_mcc_compl_get == $sub.ref(0, 329446);

procedure be_mcc_compl_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_mcc_compl_get($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(40, 1));
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $p3 := queue_tail_node($p2);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $i5 := be_mcc_compl_is_new($p4);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 299} {:cexpr "tmp___0"} boogie_si_record_i8($i6);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} queue_tail_inc___0($p2);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p8 := $p3;
    goto $bb3;
}



const be_cq_notify: ref;

axiom be_cq_notify == $sub.ref(0, 330478);

procedure be_cq_notify($p0: ref, $i1: i16, $i2: i1, $i3: i16);
  free requires assertsPassed;



implementation be_cq_notify($p0: ref, $i1: i16, $i2: i1, $i3: i16)
{
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i8;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} {:cexpr "be_cq_notify:arg:qid"} boogie_si_record_i16($i1);
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i2);
    call {:si_unique_call 302} {:cexpr "be_cq_notify:arg:arm"} boogie_si_record_i1($i2);
    call {:si_unique_call 303} {:cexpr "be_cq_notify:arg:num_popped"} boogie_si_record_i16($i3);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i1);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1023);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 0);
    call {:si_unique_call 304} {:cexpr "val"} boogie_si_record_i32($i7);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i1);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 31744);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i10 := $shl.i32($i9, 1);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, $i7);
    call {:si_unique_call 305} {:cexpr "val"} boogie_si_record_i32($i11);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364012, 1));
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i4);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i17 := $i11;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i3);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $i19 := $shl.i32($i18, 16);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i19, $i17);
    call {:si_unique_call 307} {:cexpr "val"} boogie_si_record_i32($i20);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref(288, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} iowrite32($i20, $p23);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i11, 536870912);
    call {:si_unique_call 306} {:cexpr "val"} boogie_si_record_i32($i16);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb7;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 331510);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} _raw_spin_unlock($p2);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 332542);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    return;
}



const queue_tail_node: ref;

axiom queue_tail_node == $sub.ref(0, 333574);

procedure queue_tail_node($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation queue_tail_node($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(30, 1));
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i10 := $mul.i32($i6, $i9);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p3, $mul.ref($i11, 1));
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;
}



const be_mcc_compl_is_new: ref;

axiom be_mcc_compl_is_new == $sub.ref(0, 334606);

procedure be_mcc_compl_is_new($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0;



implementation be_mcc_compl_is_new($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 310} {:cexpr "flags"} boogie_si_record_i32($i5);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i5);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb5;
}



const queue_tail_inc___0: ref;

axiom queue_tail_inc___0 == $sub.ref(0, 335638);

procedure queue_tail_inc___0($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation queue_tail_inc___0($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(30, 1));
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} index_inc___0($p1, $i5);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    return;
}



const complete_: ref;

axiom complete_ == $sub.ref(0, 336670);

procedure complete_($p0: ref);
  free requires assertsPassed;



implementation complete_($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    return;
}



const be_parse_stats: ref;

axiom be_parse_stats == $sub.ref(0, 337702);

procedure be_parse_stats($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_parse_stats($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i64;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i34: i32;
  var $p35: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $p1 := be_erx_stats_from_cmd($p0);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 57888);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 57896);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 529);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i20 == 1);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 1792);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} populate_be_v1_stats($p0);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136368, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64(0);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p28, $mul.ref($i29, 24760));
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i33 := $ult.i32(0, $i32);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i34, $p35 := 0, $p30;
    goto $bb16;

  $bb16:
    call $p37, $i38, $i39, $i40, $p42, $i43, $i44, $p45, $i46, $i47, $i34, $p35 := be_parse_stats_loop_$bb16($p0, $p2, $p31, $p37, $i38, $i39, $i40, $p42, $i43, $i44, $p45, $i46, $i47, $i34, $p35);
    goto $bb16_last;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 24760)), $mul.ref(8, 1)), $mul.ref(28, 1));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref($i40, 4));
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    call {:si_unique_call 316} {:cexpr "erx_stat"} boogie_si_record_i32($i43);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} populate_erx_stats($p0, $p35, $i43);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i34, 1);
    call {:si_unique_call 318} {:cexpr "i"} boogie_si_record_i32($i44);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p35, $mul.ref(1, 24760));
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p31);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i47 := $ult.i32($i44, $i46);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i47 == 1);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb18:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i34, $p35 := $i44, $p45;
    goto $bb18_dummy;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} populate_be_v0_stats($p0);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} populate_lancer_stats($p0);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb18_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1531;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 338734);

procedure dev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 1} true;
    call {:si_unique_call 319} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 320} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 1} true;
    call {:si_unique_call 321} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 322} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 1} true;
    call {:si_unique_call 323} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 324} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const be_erx_stats_from_cmd: ref;

axiom be_erx_stats_from_cmd == $sub.ref(0, 339766);

procedure be_erx_stats_from_cmd($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation be_erx_stats_from_cmd($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 529);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 1792);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $p18 := hw_stats_from_cmd($p0);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 1848)), $mul.ref(1464, 1));
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p17 := $p20;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $r := $p17;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $p13 := hw_stats_from_cmd($p0);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1060)), $mul.ref(844, 1));
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $p17 := $p15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const populate_lancer_stats: ref;

axiom populate_lancer_stats == $sub.ref(0, 340798);

procedure populate_lancer_stats($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation populate_lancer_stats($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $p2 := pport_stats_from_cmd($p0);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} swap_dws($p3, 656);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(320, 1));
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(44, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(296, 1));
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(36, 1));
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(376, 1));
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(52, 1));
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(392, 1));
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(56, 1));
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(344, 1));
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(64, 1));
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(424, 1));
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(88, 1));
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(428, 1));
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(92, 1));
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(432, 1));
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(96, 1));
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(436, 1));
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(100, 1));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(420, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(84, 1));
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(408, 1));
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(72, 1));
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(412, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(76, 1));
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(396, 1));
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(60, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(416, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(80, 1));
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(544, 1));
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(120, 1));
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(400, 1));
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(404, 1));
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i50, $i52);
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(68, 1));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(312, 1));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(40, 1));
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(544, 1));
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(116, 1));
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(80, 1));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(104, 1));
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i62);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(112, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(112, 1));
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i65);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(372, 1));
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(128, 1));
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, $i68);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(536, 1));
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(28, 1));
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i71);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(568, 1));
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(32, 1));
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(552, 1));
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(24, 1));
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i77);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    return;
}



const populate_be_v0_stats: ref;

axiom populate_be_v0_stats == $sub.ref(0, 341830);

procedure populate_be_v0_stats($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation populate_be_v0_stats($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $p106: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} $p1 := hw_stats_from_cmd($p0);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1060)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364016, 1));
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} swap_dws($p12, 1060);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(32, 1));
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(44, 1));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(24, 1));
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(36, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(36, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(52, 1));
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(40, 1));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(56, 1));
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(48, 1));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(64, 1));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(76, 1));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(88, 1));
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(120, 1));
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(92, 1));
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(124, 1));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(96, 1));
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(128, 1));
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(100, 1));
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(256, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(116, 1));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(72, 1));
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(84, 1));
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(60, 1));
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(72, 1));
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(64, 1));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(76, 1));
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i50);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(44, 1));
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(60, 1));
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(260, 1));
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(120, 1));
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(68, 1));
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(80, 1));
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(52, 1));
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(56, 1));
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i62, $i64);
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(68, 1));
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i65);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(28, 1));
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(40, 1));
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, $i68);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(208, 1));
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(104, 1));
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i71);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(212, 1));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(112, 1));
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364016, 1));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i78 == 1);
    $p82 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1060)), $mul.ref(0, 1)), $mul.ref(620, 1));
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    $p84 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(128, 1));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, $i83);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p85 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1060)), $mul.ref(0, 1)), $mul.ref(528, 1));
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(8, 1));
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, $i86);
    $p88 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1060)), $mul.ref(0, 1)), $mul.ref(536, 1));
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    $p90 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(16, 1));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p90, $i89);
    $p91 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1060)), $mul.ref(0, 1)), $mul.ref(584, 1));
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    $p93 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(28, 1));
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p93, $i92);
    $p94 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1060)), $mul.ref(0, 1)), $mul.ref(588, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p94);
    $p96 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(32, 1));
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, $i95);
    $p97 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1060)), $mul.ref(0, 1)), $mul.ref(540, 1));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    $p99 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(20, 1));
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, $i98);
    $p100 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1060)), $mul.ref(0, 1)), $mul.ref(576, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    $p102 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(24, 1));
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, $i101);
    $p103 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1060)), $mul.ref(1036, 1)), $mul.ref(0, 1));
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(4, 1));
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, $i104);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i78 == 1;
    $p79 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1060)), $mul.ref(0, 1)), $mul.ref(624, 1));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    $p81 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(128, 1));
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, $i80);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const populate_be_v1_stats: ref;

axiom populate_be_v1_stats == $sub.ref(0, 342862);

procedure populate_be_v1_stats($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation populate_be_v1_stats($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $p106: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $p1 := hw_stats_from_cmd($p0);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364016, 1));
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} swap_dws($p12, 1848);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(268, 1));
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(124, 1));
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(60, 1));
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(48, 1));
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(56, 1));
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(44, 1));
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(48, 1));
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(36, 1));
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(64, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(52, 1));
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(68, 1));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(56, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(76, 1));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(64, 1));
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(100, 1));
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(88, 1));
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(144, 1));
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(92, 1));
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(148, 1));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(96, 1));
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(152, 1));
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(100, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(96, 1));
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(84, 1));
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(84, 1));
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(72, 1));
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i50);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(88, 1));
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(76, 1));
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(72, 1));
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(60, 1));
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(92, 1));
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(80, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(264, 1));
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(120, 1));
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i62);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(80, 1));
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(68, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i65);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(52, 1));
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(40, 1));
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, $i68);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(260, 1));
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(116, 1));
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i71);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(208, 1));
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(104, 1));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(216, 1));
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(112, 1));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i77);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(212, 1));
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    $p81 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(108, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, $i80);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(272, 1));
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    $p84 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(128, 1));
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, $i83);
    $p85 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(0, 1)), $mul.ref(1160, 1));
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(8, 1));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, $i86);
    $p88 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(0, 1)), $mul.ref(1168, 1));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    $p90 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(16, 1));
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p90, $i89);
    $p91 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(0, 1)), $mul.ref(1208, 1));
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    $p93 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(28, 1));
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p93, $i92);
    $p94 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(0, 1)), $mul.ref(1212, 1));
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p94);
    $p96 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(32, 1));
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, $i95);
    $p97 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(0, 1)), $mul.ref(1172, 1));
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    $p99 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(20, 1));
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, $i98);
    $p100 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(0, 1)), $mul.ref(1200, 1));
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    $p102 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(24, 1));
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, $i101);
    $p103 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(1752, 1)), $mul.ref(0, 1));
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(4, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, $i104);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    return;
}



const populate_erx_stats: ref;

axiom populate_erx_stats == $sub.ref(0, 343894);

procedure populate_erx_stats($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation populate_erx_stats($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $i33: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} {:cexpr "populate_erx_stats:arg:erx_stat"} boogie_si_record_i32($i2);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 545);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(36, 1));
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i2);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i16($i32);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} accumulate_16bit_val($p30, $i33);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 1808);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 529);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb3;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 1792);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb3;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(36, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i2);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    goto $bb10;
}



const accumulate_16bit_val: ref;

axiom accumulate_16bit_val == $sub.ref(0, 344926);

procedure accumulate_16bit_val($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation accumulate_16bit_val($p0: ref, $i1: i16)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} {:cexpr "accumulate_16bit_val:arg:val"} boogie_si_record_i16($i1);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p0);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 65535);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i5 := $ult.i32($i2, $i4);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 336} {:cexpr "wrapped"} boogie_si_record_i8($i6);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p0);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, $sub.i32(0, 65536));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i1);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i8, $i9);
    call {:si_unique_call 337} {:cexpr "newacc"} boogie_si_record_i32($i10);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i6);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i13 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p0, $i13);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i10, 65536);
    call {:si_unique_call 338} {:cexpr "newacc"} boogie_si_record_i32($i12);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const hw_stats_from_cmd: ref;

axiom hw_stats_from_cmd == $sub.ref(0, 345958);

procedure hw_stats_from_cmd($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation hw_stats_from_cmd($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 529);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 1792);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363472, 1)), $mul.ref(0, 1));
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 1864)), $mul.ref(16, 1));
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p19 := $p24;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $r := $p19;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363472, 1)), $mul.ref(0, 1));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1076)), $mul.ref(16, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $p19 := $p17;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const pport_stats_from_cmd: ref;

axiom pport_stats_from_cmd == $sub.ref(0, 346990);

procedure pport_stats_from_cmd($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pport_stats_from_cmd($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363472, 1)), $mul.ref(0, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 672)), $mul.ref(16, 1));
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const be_async_grp5_cos_priority_process: ref;

axiom be_async_grp5_cos_priority_process == $sub.ref(0, 348022);

procedure be_async_grp5_cos_priority_process($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_async_grp5_cos_priority_process($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i8;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $i13: i16;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i16;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(3, 1));
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(1, 1));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363442, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, $i7);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363444, 1));
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 8191);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363444, 1));
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, $i13);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(2, 1));
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i16($i16);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i19 := $shl.i32($i18, 13);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363444, 1));
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, $i20);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const be_async_grp5_qos_speed_process: ref;

axiom be_async_grp5_qos_speed_process == $sub.ref(0, 349054);

procedure be_async_grp5_qos_speed_process($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_async_grp5_qos_speed_process($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(16, 1));
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i5 := $sge.i32($i4, 0);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364016, 1));
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i8, $i10);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(6, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32($i14, 10);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(16, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i15);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const be_async_grp5_pvid_state_process: ref;

axiom be_async_grp5_pvid_state_process == $sub.ref(0, 350086);

procedure be_async_grp5_pvid_state_process($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_async_grp5_pvid_state_process($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364234, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, 0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 4095);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364234, 1));
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, $i10);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const be_link_status_update: ref;

axiom be_link_status_update == $sub.ref(0, 351118);

procedure be_link_status_update($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.0;



implementation be_link_status_update($p0: ref, $i1: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} {:cexpr "be_link_status_update:arg:link_status"} boogie_si_record_i8($i1);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363952, 1));
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i1);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 1);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} netif_carrier_off($p3);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} netif_carrier_on($p3);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} netif_carrier_off($p3);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363952, 1));
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, 1);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363952, 1));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const netif_carrier_off: ref;

axiom netif_carrier_off == $sub.ref(0, 352150);

procedure netif_carrier_off($p0: ref);
  free requires assertsPassed;



implementation netif_carrier_off($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    return;
}



const netif_carrier_on: ref;

axiom netif_carrier_on == $sub.ref(0, 353182);

procedure netif_carrier_on($p0: ref);
  free requires assertsPassed;



implementation netif_carrier_on($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 354214);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    return;
}



const is_device_dma_capable: ref;

axiom is_device_dma_capable == $sub.ref(0, 355246);

procedure is_device_dma_capable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_device_dma_capable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i5: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(904, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i5);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(904, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb3;
}



const dma_alloc_coherent_gfp_flags: ref;

axiom dma_alloc_coherent_gfp_flags == $sub.ref(0, 356278);

procedure dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} {:cexpr "dma_alloc_coherent_gfp_flags:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $i2 := dma_alloc_coherent_mask($p0, $i1);
    call {:si_unique_call 345} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i3 := $ule.i64($i2, 16777215);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i5 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i6 := $ule.i64($i2, 4294967295);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i10 := $i5;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i5, 1);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i5, 4);
    call {:si_unique_call 347} {:cexpr "gfp"} boogie_si_record_i32($i9);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i1, 1);
    call {:si_unique_call 346} {:cexpr "gfp"} boogie_si_record_i32($i4);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const debug_dma_alloc_coherent: ref;

axiom debug_dma_alloc_coherent == $sub.ref(0, 357310);

procedure debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref);
  free requires assertsPassed;



implementation debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} {:cexpr "debug_dma_alloc_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 349} {:cexpr "debug_dma_alloc_coherent:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    return;
}



const dma_alloc_coherent_mask: ref;

axiom dma_alloc_coherent_mask == $sub.ref(0, 358342);

procedure dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} {:cexpr "dma_alloc_coherent_mask:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(912, 1));
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    call {:si_unique_call 351} {:cexpr "dma_mask"} boogie_si_record_i64($i3);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i1, 1);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i7 := (if $i6 == 1 then 16777215 else 4294967295);
    call {:si_unique_call 352} {:cexpr "dma_mask"} boogie_si_record_i64($i7);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const lancer_cmd_write_object: ref;

axiom lancer_cmd_write_object == $sub.ref(0, 359374);

procedure lancer_cmd_write_object($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $p5: ref, $p6: ref, $p7: ref) returns ($r: i32);



const lancer_fw_reset: ref;

axiom lancer_fw_reset == $sub.ref(0, 360406);

procedure lancer_fw_reset($p0: ref) returns ($r: i32);



const lancer_wait_idle: ref;

axiom lancer_wait_idle == $sub.ref(0, 361438);

procedure lancer_wait_idle($p0: ref) returns ($r: i32);



const ioread32: ref;

axiom ioread32 == $sub.ref(0, 362470);

procedure ioread32($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ioread32($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 1} true;
    call {:si_unique_call 353} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 354} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ssleep: ref;

axiom ssleep == $sub.ref(0, 363502);

procedure ssleep($i0: i32);
  free requires assertsPassed;



implementation ssleep($i0: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} {:cexpr "ssleep:arg:seconds"} boogie_si_record_i32($i0);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i1 := $mul.i32($i0, 1000);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} msleep($i1);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 364534);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    return;
}



const amap_mask: ref;

axiom amap_mask == $sub.ref(0, 365566);

procedure amap_mask($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation amap_mask($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} {:cexpr "amap_mask:arg:bitsize"} boogie_si_record_i32($i0);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 32);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i2 := $shl.i32(1, $i0);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, $sub.i32(0, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i4 := $i3;
    goto $bb3;
}



const amap_set: ref;

axiom amap_set == $sub.ref(0, 366598);

procedure amap_set($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation amap_set($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32)
{
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} {:cexpr "amap_set:arg:dw_offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 360} {:cexpr "amap_set:arg:mask"} boogie_si_record_i32($i2);
    call {:si_unique_call 361} {:cexpr "amap_set:arg:offset"} boogie_si_record_i32($i3);
    call {:si_unique_call 362} {:cexpr "amap_set:arg:value"} boogie_si_record_i32($i4);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i1);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p5, $mul.ref($i6, 4));
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i9 := $shl.i32($i2, $i3);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i10 := $xor.i32($i9, $sub.i32(0, 1));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i8, $i10);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i11);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p7);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i2, $i4);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i14 := $shl.i32($i13, $i3);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i12, $i14);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i15);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    return;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 367630);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 368662);

procedure constant_test_bit($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i32($i0);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i2 := $udiv.i32($i0, 64);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p1, $mul.ref($i3, 8));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i0, 63);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i5, $i7);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const be_probe: ref;

axiom be_probe == $sub.ref(0, 369694);

procedure be_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.23, $M.21, $CurrAddr, $M.26, $M.25, $M.41, $M.2, $M.1, $M.38, assertsPassed, $M.47, $M.46, $M.48, $M.42, $M.40;



implementation be_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $i58: i1;
  var $i59: i8;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $p71: ref;
  var $p72: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p80: ref;
  var $p83: ref;
  var $p86: ref;
  var $p88: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $p96: ref;
  var $p98: ref;
  var $p99: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p107: ref;
  var $p110: ref;
  var $p113: ref;
  var $p115: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i64;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i1;
  var $i130: i64;
  var $p131: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i8;
  var $i139: i32;
  var $i69: i32;
  var $i57: i32;
  var $i35: i32;
  var $i18: i32;
  var $i14: i32;
  var $i11: i32;
  var $p143: ref;
  var $p144: ref;
  var $i141: i32;
  var cmdloc_dummy_var_228: [ref]i8;
  var cmdloc_dummy_var_229: [ref]i8;
  var cmdloc_dummy_var_230: [ref]i8;
  var cmdloc_dummy_var_231: [ref]i8;
  var cmdloc_dummy_var_232: [ref]i8;
  var cmdloc_dummy_var_233: [ref]i8;
  var vslice_dummy_var_407: i32;
  var vslice_dummy_var_408: i32;
  var vslice_dummy_var_409: i32;
  var vslice_dummy_var_410: i32;
  var vslice_dummy_var_411: i32;
  var vslice_dummy_var_412: i1;
  var vslice_dummy_var_413: i32;
  var vslice_dummy_var_414: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $i9 := pci_enable_device($p0);
    call {:si_unique_call 372} {:cexpr "status"} boogie_si_record_i32($i9);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $i12 := pci_request_regions($p0, .str.97);
    call {:si_unique_call 376} {:cexpr "status"} boogie_si_record_i32($i12);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} pci_set_master($p0);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $p15 := alloc_etherdev_mqs(365504, 8, 9);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $p19 := netdev_priv($p15);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p0);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p20);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} pci_set_drvdata($p0, $p22);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p15);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 2784)), $mul.ref(1192, 1)), $mul.ref(0, 1));
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p24);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $i28 := dma_set_mask($p27, $sub.i64(0, 1));
    call {:si_unique_call 384} {:cexpr "status"} boogie_si_record_i32($i28);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $i41 := dma_set_mask($p40, 4294967295);
    call {:si_unique_call 388} {:cexpr "status"} boogie_si_record_i32($i41);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} $i45 := pci_enable_pcie_error_reporting($p0);
    call {:si_unique_call 393} {:cexpr "status"} boogie_si_record_i32($i45);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $i49 := be_ctrl_init($p20);
    call {:si_unique_call 397} {:cexpr "status"} boogie_si_record_i32($i49);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p20, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 0);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $i58 := be_reset_required($p20);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i59 := $zext.i1.i8($i58);
    call {:si_unique_call 402} {:cexpr "tmp___0"} boogie_si_record_i8($i59);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i8.i1($i59);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} be_intr_set($p20, 1);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $i63 := be_cmd_fw_init($p20);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 408} {:cexpr "status"} boogie_si_record_i32($i63);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} $i65 := be_stats_init($p20);
    call {:si_unique_call 410} {:cexpr "status"} boogie_si_record_i32($i65);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $i67 := be_get_initial_config($p20);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 412} {:cexpr "status"} boogie_si_record_i32($i67);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 364320)), $mul.ref(363496, 1)), $mul.ref(0, 1));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} __init_work($p71, 0);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p72, 137438953408);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($add.ref($p20, $mul.ref(0, 364320)), $mul.ref(363496, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p4);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_228 := $M.0;
    cmdloc_dummy_var_229 := $M.0;
    call {:si_unique_call 415} cmdloc_dummy_var_230 := $memcpy.i8(cmdloc_dummy_var_228, cmdloc_dummy_var_229, $p76, $p77, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_230;
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($add.ref($p20, $mul.ref(0, 364320)), $mul.ref(363496, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} lockdep_init_map($p80, .str.137, $p3, 0);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($add.ref($p20, $mul.ref(0, 364320)), $mul.ref(363496, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} INIT_LIST_HEAD($p83);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($add.ref($p20, $mul.ref(0, 364320)), $mul.ref(363496, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p86, be_worker);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 364320)), $mul.ref(363496, 1)), $mul.ref(80, 1));
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} init_timer_key($p88, 2, .str.138, $p5);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($add.ref($p20, $mul.ref(0, 364320)), $mul.ref(363496, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p91, delayed_work_timer_fn);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p20, $mul.ref(0, 364320)), $mul.ref(363496, 1));
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p92);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($add.ref($p20, $mul.ref(0, 364320)), $mul.ref(363496, 1)), $mul.ref(80, 1)), $mul.ref(40, 1));
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p96, $i93);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 364320)), $mul.ref(363728, 1)), $mul.ref(0, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} __init_work($p98, 0);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p99, 137438953408);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($add.ref($p20, $mul.ref(0, 364320)), $mul.ref(363728, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p7);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_231 := $M.0;
    cmdloc_dummy_var_232 := $M.0;
    call {:si_unique_call 420} cmdloc_dummy_var_233 := $memcpy.i8(cmdloc_dummy_var_231, cmdloc_dummy_var_232, $p103, $p104, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_233;
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($add.ref($p20, $mul.ref(0, 364320)), $mul.ref(363728, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} lockdep_init_map($p107, .str.139, $p6, 0);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($add.ref($p20, $mul.ref(0, 364320)), $mul.ref(363728, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} INIT_LIST_HEAD($p110);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($add.ref($p20, $mul.ref(0, 364320)), $mul.ref(363728, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p113, be_func_recovery_task);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 364320)), $mul.ref(363728, 1)), $mul.ref(80, 1));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} init_timer_key($p115, 2, .str.140, $p8);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($add.ref($p20, $mul.ref(0, 364320)), $mul.ref(363728, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p118, delayed_work_timer_fn);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p20, $mul.ref(0, 364320)), $mul.ref(363728, 1));
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i120 := $p2i.ref.i64($p119);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($add.ref($p20, $mul.ref(0, 364320)), $mul.ref(363728, 1)), $mul.ref(80, 1)), $mul.ref(40, 1));
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p123, $i120);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p20, $mul.ref(0, 364320)), $mul.ref(364036, 1));
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p124, 1);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p20, $mul.ref(0, 364320)), $mul.ref(364032, 1));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p125, 1);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $i126 := be_setup($p20);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 425} {:cexpr "status"} boogie_si_record_i32($i126);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} be_netdev_init($p15);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $i128 := register_netdev($p15);
    call {:si_unique_call 428} {:cexpr "status"} boogie_si_record_i32($i128);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i128, 0);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} be_roce_dev_add($p20);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $i130 := msecs_to_jiffies(1000);
    call {:si_unique_call 432} {:cexpr "tmp___2"} boogie_si_record_i64($i130);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p20, $mul.ref(0, 364320)), $mul.ref(363728, 1));
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} vslice_dummy_var_412 := schedule_delayed_work($p131, $i130);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} vslice_dummy_var_413 := be_cmd_query_port_name($p20, $p2);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $p134 := mc_name($p20);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} $p135 := func_name($p20);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $p136 := nic_name($p0);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.23, $p2);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i139 := $sext.i8.i32($i138);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} vslice_dummy_var_414 := _dev_info.ref.ref.ref.ref.ref.i32($p137, .str.141, $p136, $p135, $p134, $i139);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i141 := 0;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $r := $i141;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i129 == 1;
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} vslice_dummy_var_411 := be_clear($p20);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i69 := $i128;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} be_stats_cleanup($p20);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i57 := $i69;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} be_ctrl_cleanup($p20);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i35 := $i57;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} free_netdev($p15);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} pci_set_drvdata($p0, $0.ref);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i18 := $i35;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} pci_release_regions($p0);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i14 := $i18;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} pci_disable_device($p0);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i11 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} $p143 := nic_name($p0);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} vslice_dummy_var_407 := dev_err.ref.ref.ref($p144, .str.142, $p143);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i141 := $i11;
    goto $bb59;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb52:
    assume $i127 == 1;
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i69 := $i126;
    goto $bb50;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i68 == 1;
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i69 := $i67;
    goto $bb50;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i66 == 1;
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i57 := $i65;
    goto $bb33;

  $bb42:
    assume $i64 == 1;
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i57 := $i63;
    goto $bb33;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i60 == 1;
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i61 := be_cmd_reset_function($p20);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 404} {:cexpr "status"} boogie_si_record_i32($i61);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} msleep(100);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume $i62 == 1;
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i57 := $i61;
    goto $bb33;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i54 == 1;
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $i55 := be_fw_wait_ready($p20);
    call {:si_unique_call 399} {:cexpr "status"} boogie_si_record_i32($i55);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb31:
    assume $i56 == 1;
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i57 := $i55;
    goto $bb33;

  $bb26:
    assume $i50 == 1;
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i35 := $i49;
    goto $bb17;

  $bb23:
    assume $i46 == 1;
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} vslice_dummy_var_410 := dev_err.ref.ref($p47, .str.136);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i42 == 1;
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} vslice_dummy_var_409 := dev_err.ref.ref($p43, .str.135);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i35 := $i41;
    goto $bb17;

  $bb13:
    assume $i29 == 1;
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $i31 := dma_set_coherent_mask($p30, $sub.i64(0, 1));
    call {:si_unique_call 386} {:cexpr "status"} boogie_si_record_i32($i31);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 0);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p15, $mul.ref(0, 2784)), $mul.ref(144, 1));
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i38 := $or.i64($i37, 32);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p15, $mul.ref(0, 2784)), $mul.ref(144, 1));
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p39, $i38);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb15:
    assume $i32 == 1;
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} vslice_dummy_var_408 := dev_err.ref.ref($p33, .str.134);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i35 := $i31;
    goto $bb17;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 12);
    goto $bb11;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb3;
}



const be_remove: ref;

axiom be_remove == $sub.ref(0, 370726);

procedure be_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.38, $M.26, $M.21, $M.25, assertsPassed, $M.29, $M.42, $M.41, $M.2, $M.1, $CurrAddr, $M.47, $M.46, $M.48, $M.40, $M.34, $M.35, $M.3, $M.60, $M.61, $M.62, $M.30, $M.31;



implementation be_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p12: ref;
  var $p13: ref;
  var vslice_dummy_var_415: i1;
  var vslice_dummy_var_416: i32;
  var vslice_dummy_var_417: i32;
  var vslice_dummy_var_418: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} be_roce_dev_remove($p2);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} be_intr_set($p2, 0);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(363728, 1));
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} vslice_dummy_var_415 := cancel_delayed_work_sync($p5);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} unregister_netdev($p8);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} vslice_dummy_var_416 := be_clear($p2);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} vslice_dummy_var_417 := be_cmd_fw_clean($p2);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} be_stats_cleanup($p2);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} be_ctrl_cleanup($p2);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} vslice_dummy_var_418 := pci_disable_pcie_error_reporting($p0);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} pci_set_drvdata($p0, $0.ref);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} pci_release_regions($p0);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} pci_disable_device($p0);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} free_netdev($p13);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const be_suspend: ref;

axiom be_suspend == $sub.ref(0, 371758);

procedure be_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.0, $M.30, $M.31, $M.49, $CurrAddr, $M.21, $M.34, $M.35, $M.3, $M.42, $M.38, $M.29, $M.41, $M.60, $M.61, $M.62, $M.2, $M.1, $M.26, $M.25, assertsPassed, $M.47, $M.46, $M.48, $M.40;



implementation be_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i1;
  var $p12: ref;
  var $i14: i1;
  var $i15: i8;
  var $i16: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var vslice_dummy_var_419: i32;
  var vslice_dummy_var_420: i1;
  var vslice_dummy_var_421: i32;
  var vslice_dummy_var_422: i32;
  var vslice_dummy_var_423: i32;
  var vslice_dummy_var_424: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.24 := $store.i32($M.24, $p3, $i1);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} $p4 := pci_get_drvdata($p0);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364269, 1));
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(363728, 1));
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} vslice_dummy_var_420 := cancel_delayed_work_sync($p12);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} netif_device_detach($p7);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $i14 := netif_running($p7);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i14);
    call {:si_unique_call 459} {:cexpr "tmp___0"} boogie_si_record_i8($i15);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} vslice_dummy_var_422 := be_clear($p5);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} vslice_dummy_var_423 := pci_save_state($p0);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} pci_disable_device($p0);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.24, $p20);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $i22 := pci_choose_state($p0, $i21);
    call {:si_unique_call 467} {:cexpr "tmp___1"} boogie_si_record_i32($i22);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} vslice_dummy_var_424 := pci_set_power_state($p0, $i22);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} rtnl_lock();
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} vslice_dummy_var_421 := be_close($p7);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} rtnl_unlock();
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} vslice_dummy_var_419 := be_setup_wol($p5, 1);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const be_resume: ref;

axiom be_resume == $sub.ref(0, 372790);

procedure be_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.30, $M.31, $M.25, $M.21, $M.2, $M.1, $M.41, assertsPassed, $M.26, $CurrAddr, $M.47, $M.46, $M.48, $M.42, $M.40, $M.34, $M.38, $M.35, $M.3, $M.60, $M.61, $M.62;



implementation be_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i9: i32;
  var $i10: i1;
  var $i12: i1;
  var $i13: i8;
  var $i14: i1;
  var $i16: i64;
  var $p17: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i1;
  var $i7: i32;
  var vslice_dummy_var_425: i32;
  var vslice_dummy_var_426: i32;
  var vslice_dummy_var_427: i32;
  var vslice_dummy_var_428: i1;
  var vslice_dummy_var_429: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} netif_device_detach($p4);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $i5 := pci_enable_device($p0);
    call {:si_unique_call 472} {:cexpr "status"} boogie_si_record_i32($i5);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} vslice_dummy_var_425 := pci_set_power_state($p0, 0);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} pci_restore_state($p0);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $i9 := be_cmd_fw_init($p2);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 476} {:cexpr "status"} boogie_si_record_i32($i9);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} vslice_dummy_var_426 := be_setup($p2);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $i12 := netif_running($p4);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 479} {:cexpr "tmp___0"} boogie_si_record_i8($i13);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $i16 := msecs_to_jiffies(1000);
    call {:si_unique_call 484} {:cexpr "tmp___1"} boogie_si_record_i64($i16);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(363728, 1));
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} vslice_dummy_var_428 := schedule_delayed_work($p17, $i16);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} netif_device_attach($p4);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(364269, 1));
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} vslice_dummy_var_429 := be_setup_wol($p2, 0);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} rtnl_lock();
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} vslice_dummy_var_427 := be_open($p4);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} rtnl_unlock();
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb3;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;
}



const be_shutdown: ref;

axiom be_shutdown == $sub.ref(0, 373822);

procedure be_shutdown($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_shutdown($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var vslice_dummy_var_430: i1;
  var vslice_dummy_var_431: i1;
  var vslice_dummy_var_432: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(363496, 1));
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} vslice_dummy_var_430 := cancel_delayed_work_sync($p5);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(363728, 1));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} vslice_dummy_var_431 := cancel_delayed_work_sync($p7);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} netif_device_detach($p10);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} vslice_dummy_var_432 := be_cmd_reset_function($p2);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} pci_disable_device($p0);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 374854);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const cancel_delayed_work_sync: ref;

axiom cancel_delayed_work_sync == $sub.ref(0, 375886);

procedure cancel_delayed_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_delayed_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 1} true;
    call {:si_unique_call 495} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 496} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const netif_device_detach: ref;

axiom netif_device_detach == $sub.ref(0, 376918);

procedure netif_device_detach($p0: ref);
  free requires assertsPassed;



implementation netif_device_detach($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    return;
}



const be_cmd_reset_function: ref;

axiom be_cmd_reset_function == $sub.ref(0, 377950);

procedure be_cmd_reset_function($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_cmd_reset_function($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i25: i32;
  var vslice_dummy_var_433: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 57888);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 57896);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i27 := ldv_mutex_lock_interruptible_32($p26);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    call {:si_unique_call 504} {:cexpr "tmp"} boogie_si_record_i32($i27);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $p29 := wrb_from_mbox($p0);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $p30 := embedded_payload($p29);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} be_wrb_cmd_hdr_prepare($p31, 1, 61, 16, $p29, $0.ref);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $i32 := be_mbox_notify_wait($p0);
    call {:si_unique_call 509} {:cexpr "status"} boogie_si_record_i32($i32);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} ldv_mutex_unlock_33($p33);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i25 := $i32;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 1);
    goto $bb12;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $i13 := lancer_wait_ready($p0);
    call {:si_unique_call 498} {:cexpr "status"} boogie_si_record_i32($i13);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i19 := $i13;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i25 := $i19;
    goto $bb12;

  $bb9:
    assume $i20 == 1;
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} vslice_dummy_var_433 := dev_err.ref.ref($p23, .str.17);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref(1032, 1));
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} iowrite32(134217728, $p17);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $i18 := lancer_test_and_set_rdy_state($p0);
    call {:si_unique_call 501} {:cexpr "status"} boogie_si_record_i32($i18);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 378982);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    return;
}



const lancer_wait_ready: ref;

axiom lancer_wait_ready == $sub.ref(0, 380014);

procedure lancer_wait_ready($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation lancer_wait_ready($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i32;
  var $i123: i32;
  var $i124: i1;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i32;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i32;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i32;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i32;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i32;
  var $i153: i32;
  var $i154: i1;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $i158: i32;
  var $i159: i32;
  var $i160: i1;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $i164: i32;
  var $i165: i32;
  var $i166: i1;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $i170: i32;
  var $i171: i32;
  var $i172: i1;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $i176: i32;
  var $i177: i32;
  var $i178: i1;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $i182: i32;
  var $i183: i32;
  var $i184: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(1028, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $i4 := ioread32($p3);
    call {:si_unique_call 512} {:cexpr "sliport_status"} boogie_si_record_i32($i4);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 8388608);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} msleep(1000);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(1028, 1));
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $i14 := ioread32($p13);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 8388608);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} msleep(1000);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(1028, 1));
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $i20 := ioread32($p19);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 8388608);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i7 := 2;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} msleep(1000);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(1028, 1));
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $i26 := ioread32($p25);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 8388608);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i7 := 3;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} msleep(1000);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref(1028, 1));
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $i32 := ioread32($p31);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 8388608);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i7 := 4;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} msleep(1000);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p36, $mul.ref(1028, 1));
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $i38 := ioread32($p37);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 8388608);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i7 := 5;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} msleep(1000);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref(1028, 1));
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $i44 := ioread32($p43);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 8388608);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i7 := 6;
    assume {:branchcond $i46} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} msleep(1000);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p48, $mul.ref(1028, 1));
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $i50 := ioread32($p49);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 8388608);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i7 := 7;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} msleep(1000);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p54, $mul.ref(1028, 1));
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $i56 := ioread32($p55);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 8388608);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i7 := 8;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} msleep(1000);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p60, $mul.ref(1028, 1));
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $i62 := ioread32($p61);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, 8388608);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i7 := 9;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} msleep(1000);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref(1028, 1));
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $i68 := ioread32($p67);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 8388608);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i7 := 10;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} msleep(1000);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p72, $mul.ref(1028, 1));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $i74 := ioread32($p73);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i74, 8388608);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i7 := 11;
    assume {:branchcond $i76} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} msleep(1000);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p78, $mul.ref(1028, 1));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $i80 := ioread32($p79);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i80, 8388608);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i7 := 12;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} msleep(1000);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p84, $mul.ref(1028, 1));
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $i86 := ioread32($p85);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i87 := $and.i32($i86, 8388608);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i7 := 13;
    assume {:branchcond $i88} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} msleep(1000);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p90, $mul.ref(1028, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $i92 := ioread32($p91);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i93 := $and.i32($i92, 8388608);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i7 := 14;
    assume {:branchcond $i94} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} msleep(1000);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p96, $mul.ref(1028, 1));
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $i98 := ioread32($p97);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i98, 8388608);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i7 := 15;
    assume {:branchcond $i100} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} msleep(1000);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p102, $mul.ref(1028, 1));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $i104 := ioread32($p103);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i105 := $and.i32($i104, 8388608);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i7 := 16;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} msleep(1000);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p108, $mul.ref(1028, 1));
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $i110 := ioread32($p109);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i111 := $and.i32($i110, 8388608);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i7 := 17;
    assume {:branchcond $i112} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} msleep(1000);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($p114, $mul.ref(1028, 1));
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $i116 := ioread32($p115);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i117 := $and.i32($i116, 8388608);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i7 := 18;
    assume {:branchcond $i118} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} msleep(1000);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p120, $mul.ref(1028, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $i122 := ioread32($p121);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i123 := $and.i32($i122, 8388608);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i124 := $ne.i32($i123, 0);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i7 := 19;
    assume {:branchcond $i124} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} msleep(1000);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p126, $mul.ref(1028, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $i128 := ioread32($p127);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i129 := $and.i32($i128, 8388608);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 0);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i7 := 20;
    assume {:branchcond $i130} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} msleep(1000);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($p132, $mul.ref(1028, 1));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $i134 := ioread32($p133);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i135 := $and.i32($i134, 8388608);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i136 := $ne.i32($i135, 0);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i7 := 21;
    assume {:branchcond $i136} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} msleep(1000);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p138, $mul.ref(1028, 1));
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $i140 := ioread32($p139);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i141 := $and.i32($i140, 8388608);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i142 := $ne.i32($i141, 0);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i7 := 22;
    assume {:branchcond $i142} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} msleep(1000);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.0, $p143);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($p144, $mul.ref(1028, 1));
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $i146 := ioread32($p145);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i147 := $and.i32($i146, 8388608);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i148 := $ne.i32($i147, 0);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i7 := 23;
    assume {:branchcond $i148} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} msleep(1000);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p150, $mul.ref(1028, 1));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $i152 := ioread32($p151);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i153 := $and.i32($i152, 8388608);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i154 := $ne.i32($i153, 0);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i7 := 24;
    assume {:branchcond $i154} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} msleep(1000);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.0, $p155);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($p156, $mul.ref(1028, 1));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} $i158 := ioread32($p157);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i159 := $and.i32($i158, 8388608);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i160 := $ne.i32($i159, 0);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i7 := 25;
    assume {:branchcond $i160} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} msleep(1000);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.0, $p161);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($p162, $mul.ref(1028, 1));
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $i164 := ioread32($p163);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i165 := $and.i32($i164, 8388608);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i166 := $ne.i32($i165, 0);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i7 := 26;
    assume {:branchcond $i166} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} msleep(1000);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.0, $p167);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($p168, $mul.ref(1028, 1));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $i170 := ioread32($p169);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i171 := $and.i32($i170, 8388608);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i172 := $ne.i32($i171, 0);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i7 := 27;
    assume {:branchcond $i172} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} msleep(1000);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.0, $p173);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($p174, $mul.ref(1028, 1));
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $i176 := ioread32($p175);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i177 := $and.i32($i176, 8388608);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i178 := $ne.i32($i177, 0);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i7 := 28;
    assume {:branchcond $i178} true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} msleep(1000);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p180 := $load.ref($M.0, $p179);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($p180, $mul.ref(1028, 1));
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $i182 := ioread32($p181);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i183 := $and.i32($i182, 8388608);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i184 := $ne.i32($i183, 0);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i7 := 29;
    assume {:branchcond $i184} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} msleep(1000);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i8 := 30;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 30);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb10:
    assume $i9 == 1;
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 1);
    goto $bb12;

  $bb125:
    assume {:verifier.code 0} true;
    assume $i184 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb6;

  $bb121:
    assume {:verifier.code 0} true;
    assume $i178 == 1;
    goto $bb4;

  $bb117:
    assume {:verifier.code 0} true;
    assume $i172 == 1;
    goto $bb4;

  $bb113:
    assume {:verifier.code 0} true;
    assume $i166 == 1;
    goto $bb4;

  $bb109:
    assume {:verifier.code 0} true;
    assume $i160 == 1;
    goto $bb4;

  $bb105:
    assume {:verifier.code 0} true;
    assume $i154 == 1;
    goto $bb4;

  $bb101:
    assume {:verifier.code 0} true;
    assume $i148 == 1;
    goto $bb4;

  $bb97:
    assume {:verifier.code 0} true;
    assume $i142 == 1;
    goto $bb4;

  $bb93:
    assume {:verifier.code 0} true;
    assume $i136 == 1;
    goto $bb4;

  $bb89:
    assume {:verifier.code 0} true;
    assume $i130 == 1;
    goto $bb4;

  $bb85:
    assume {:verifier.code 0} true;
    assume $i124 == 1;
    goto $bb4;

  $bb81:
    assume {:verifier.code 0} true;
    assume $i118 == 1;
    goto $bb4;

  $bb77:
    assume {:verifier.code 0} true;
    assume $i112 == 1;
    goto $bb4;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i106 == 1;
    goto $bb4;

  $bb69:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb4;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb4;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb4;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb4;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb4;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb4;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb4;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb4;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb4;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb4;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb4;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb4;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb4;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb4;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb4;
}



const lancer_test_and_set_rdy_state: ref;

axiom lancer_test_and_set_rdy_state == $sub.ref(0, 381046);

procedure lancer_test_and_set_rdy_state($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation lancer_test_and_set_rdy_state($p0: ref) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i32;
  var $i28: i1;
  var $i29: i1;
  var $i30: i32;
  var $i27: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i8;
  var $i34: i1;
  var $i35: i1;
  var $p36: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $i1 := lancer_provisioning_error($p0);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 573} {:cexpr "resource_error"} boogie_si_record_i8($i2);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $i5 := lancer_wait_ready($p0);
    call {:si_unique_call 575} {:cexpr "status"} boogie_si_record_i32($i5);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i31 := $i5;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $i32 := lancer_provisioning_error($p0);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i8($i32);
    call {:si_unique_call 587} {:cexpr "resource_error"} boogie_si_record_i8($i33);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i31, $sub.i32(0, 1));
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i4 := $i31;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb26:
    assume $i34 == 1;
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i33);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i35 == 1);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364012, 1));
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, 1);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb28;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(1028, 1));
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $i10 := ioread32($p9);
    call {:si_unique_call 577} {:cexpr "sliport_status"} boogie_si_record_i32($i10);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, $sub.i32(0, 2147483648));
    call {:si_unique_call 578} {:cexpr "err"} boogie_si_record_i32($i11);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i10, 16777216);
    call {:si_unique_call 579} {:cexpr "reset_needed"} boogie_si_record_i32($i12);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i11, 0);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i11, 0);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i28 == 1);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i12, 0);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $i5;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i27 := $i30;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i31 := $i27;
    goto $bb25;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 1);
    goto $bb24;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb20;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i12, 0);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb9;

  $bb10:
    assume $i14 == 1;
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref(1032, 1));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} iowrite32(134217728, $p17);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $i18 := lancer_wait_ready($p0);
    call {:si_unique_call 582} {:cexpr "status"} boogie_si_record_i32($i18);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref(1028, 1));
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $i22 := ioread32($p21);
    call {:si_unique_call 584} {:cexpr "sliport_status"} boogie_si_record_i32($i22);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, $sub.i32(0, 2130706432));
    call {:si_unique_call 585} {:cexpr "sliport_status"} boogie_si_record_i32($i23);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i18, 0);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i24 == 1);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i23, 0);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $i18;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb18;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 1);
    goto $bb17;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb13;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 1);
    goto $bb3;
}



const ldv_mutex_lock_interruptible_32: ref;

axiom ldv_mutex_lock_interruptible_32 == $sub.ref(0, 382078);

procedure ldv_mutex_lock_interruptible_32($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_interruptible_32($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 589} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} $i2 := ldv_mutex_lock_interruptible_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 591} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const wrb_from_mbox: ref;

axiom wrb_from_mbox == $sub.ref(0, 383110);

procedure wrb_from_mbox($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation wrb_from_mbox($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var cmdloc_dummy_var_234: [ref]i8;
  var cmdloc_dummy_var_235: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_234 := $M.0;
    call {:si_unique_call 592} cmdloc_dummy_var_235 := $memset.i8(cmdloc_dummy_var_234, $p6, 0, 256, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_235;
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const be_mbox_notify_wait: ref;

axiom be_mbox_notify_wait == $sub.ref(0, 384142);

procedure be_mbox_notify_wait($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, $CurrAddr;



implementation be_mbox_notify_wait($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $i30: i8;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i11: i32;
  var vslice_dummy_var_434: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(352, 1));
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 272)), $mul.ref(256, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $i9 := be_mbox_db_ready_wait($p0, $p3);
    call {:si_unique_call 594} {:cexpr "status"} boogie_si_record_i32($i9);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $or.i32(0, 2);
    call {:si_unique_call 595} {:cexpr "val"} boogie_si_record_i32($i12);
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(200, 1)), $mul.ref(8, 1));
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i64($i14, 32);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i15);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, $sub.i32(0, 4));
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i17, $i12);
    call {:si_unique_call 596} {:cexpr "val"} boogie_si_record_i32($i18);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} iowrite32($i18, $p3);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $i19 := be_mbox_db_ready_wait($p0, $p3);
    call {:si_unique_call 599} {:cexpr "status"} boogie_si_record_i32($i19);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(200, 1)), $mul.ref(8, 1));
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i23 := $lshr.i64($i22, 4);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i23);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i25 := $shl.i32($i24, 2);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i25, 0);
    call {:si_unique_call 600} {:cexpr "val"} boogie_si_record_i32($i26);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} iowrite32($i26, $p3);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $i27 := be_mbox_db_ready_wait($p0, $p3);
    call {:si_unique_call 603} {:cexpr "status"} boogie_si_record_i32($i27);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $i29 := be_mcc_compl_is_new($p8);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i8($i29);
    call {:si_unique_call 605} {:cexpr "tmp"} boogie_si_record_i8($i30);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1($i30);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} vslice_dummy_var_434 := dev_err.ref.ref($p37, .str.166);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p7, $mul.ref(0, 272)), $mul.ref(256, 1));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $i33 := be_mcc_compl_process($p0, $p32);
    call {:si_unique_call 607} {:cexpr "status"} boogie_si_record_i32($i33);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} be_mcc_compl_use($p8);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb13:
    assume $i34 == 1;
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i11 := $i33;
    goto $bb3;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i11 := $i27;
    goto $bb3;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i11 := $i19;
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb3;
}



const ldv_mutex_unlock_33: ref;

axiom ldv_mutex_unlock_33 == $sub.ref(0, 385174);

procedure ldv_mutex_unlock_33($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_33($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} ldv_mutex_unlock_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} mutex_unlock($p0);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_mbox_lock_of_be_adapter: ref;

axiom ldv_mutex_unlock_mbox_lock_of_be_adapter == $sub.ref(0, 386206);

procedure ldv_mutex_unlock_mbox_lock_of_be_adapter($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_mbox_lock_of_be_adapter($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i1 := $M.25;
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} ldv_error();
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 613} {:cexpr "ldv_mutex_mbox_lock_of_be_adapter"} boogie_si_record_i32(1);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 387238);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 388270);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 614} __VERIFIER_error();
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const be_mbox_db_ready_wait: ref;

axiom be_mbox_db_ready_wait == $sub.ref(0, 389302);

procedure be_mbox_db_ready_wait($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, $CurrAddr;



implementation be_mbox_db_ready_wait($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i8;
  var $i20: i1;
  var $i6: i32;
  var vslice_dummy_var_435: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $i2 := be_error($p0);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 616} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $i5, $i7, $i8, $i9, $i10, $i11, $i17, $i18, $i19, $i20 := be_mbox_db_ready_wait_loop_$bb4($p0, $p1, $i5, $i7, $i8, $i9, $i10, $i11, $i17, $i18, $i19, $i20);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $i7 := ioread32($p1);
    call {:si_unique_call 618} {:cexpr "ready"} boogie_si_record_i32($i7);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $sub.i32(0, 1));
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i7, 1);
    call {:si_unique_call 619} {:cexpr "ready"} boogie_si_record_i32($i9);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i5, 4000);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} msleep(1);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i5, 1);
    call {:si_unique_call 623} {:cexpr "msecs"} boogie_si_record_i32($i17);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $i18 := be_error($p0);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i8($i18);
    call {:si_unique_call 625} {:cexpr "tmp"} boogie_si_record_i8($i19);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i19);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb18;

  $bb18:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i5 := $i17;
    goto $bb18_dummy;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 5);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb15:
    assume $i11 == 1;
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} vslice_dummy_var_435 := dev_err.ref.ref($p14, .str.167);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364013, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 1);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} be_detect_error($p0);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 1);
    goto $bb6;

  $bb11:
    assume $i10 == 1;
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 1);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb18_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const be_detect_error: ref;

axiom be_detect_error == $sub.ref(0, 390334);

procedure be_detect_error($p0: ref);
  free requires assertsPassed;
  modifies $M.26, $M.0, $CurrAddr;



implementation be_detect_error($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i82: i32;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $i81: i32;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $i102: i32;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i64;
  var $p109: ref;
  var $p110: ref;
  var $i112: i32;
  var $i113: i32;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $i101: i32;
  var vslice_dummy_var_436: i32;
  var vslice_dummy_var_437: i32;
  var vslice_dummy_var_438: i32;
  var vslice_dummy_var_439: i32;
  var vslice_dummy_var_440: i32;
  var vslice_dummy_var_441: i32;
  var vslice_dummy_var_442: i32;
  var vslice_dummy_var_443: i32;
  var vslice_dummy_var_444: i32;
  var vslice_dummy_var_445: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p1, 0);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p2, 0);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p3, 0);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p4, 0);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $i5 := be_hw_error($p0);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 631} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 57888);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 57896);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} vslice_dummy_var_436 := pci_read_config_dword($p39, 160, $p1);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} vslice_dummy_var_437 := pci_read_config_dword($p42, 164, $p2);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} vslice_dummy_var_438 := pci_read_config_dword($p45, 168, $p3);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} vslice_dummy_var_439 := pci_read_config_dword($p48, 172, $p4);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.26, $p3);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i51 := $xor.i32($i50, $sub.i32(0, 1));
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.26, $p1);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i51, $i52);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p1, $i53);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.26, $p4);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i55 := $xor.i32($i54, $sub.i32(0, 1));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.26, $p2);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i55, $i56);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p2, $i57);
    assume {:verifier.code 0} true;
    $i35, $i36, $i37 := 0, 0, 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i37, 0);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i37, 0);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.26, $p1);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.26, $p2);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb34:
    assume $i98 == 1;
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.26, $p2);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb36:
    assume $i100 == 1;
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i101 := 0;
    goto $bb39;

  $bb39:
    call $i102, $i103, $i104, $p105, $p106, $p107, $i108, $p109, $p110, $i112, $i113, $i114, $i115, $i116, $i101, vslice_dummy_var_445 := be_detect_error_loop_$bb39($p0, $p2, $i102, $i103, $i104, $p105, $p106, $p107, $i108, $p109, $p110, $i112, $i113, $i114, $i115, $i116, $i101, vslice_dummy_var_445);
    goto $bb39_last;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.26, $p2);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i102, 1);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 0);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.26, $p2);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i113 := $lshr.i32($i112, 1);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p2, $i113);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i114 := $add.i32($i101, 1);
    call {:si_unique_call 649} {:cexpr "i"} boogie_si_record_i32($i114);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.26, $p2);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i116 == 1);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb44:
    assume $i116 == 1;
    assume {:verifier.code 0} true;
    $i101 := $i114;
    goto $bb44_dummy;

  $bb41:
    assume $i104 == 1;
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i108 := $zext.i32.i64($i101);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref($i108, 8));
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.28, $p109);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} vslice_dummy_var_445 := dev_err.ref.ref.ref($p107, .str.5, $p110);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb20:
    assume $i78 == 1;
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.26, $p1);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb22:
    assume $i80 == 1;
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i81 := 0;
    goto $bb25;

  $bb25:
    call $i82, $i83, $i84, $p85, $p86, $p87, $i88, $p89, $p90, $i92, $i93, $i94, $i95, $i96, $i81, vslice_dummy_var_444 := be_detect_error_loop_$bb25($p0, $p1, $i82, $i83, $i84, $p85, $p86, $p87, $i88, $p89, $p90, $i92, $i93, $i94, $i95, $i96, $i81, vslice_dummy_var_444);
    goto $bb25_last;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.26, $p1);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i82, 1);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.26, $p1);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i93 := $lshr.i32($i92, 1);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p1, $i93);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i81, 1);
    call {:si_unique_call 647} {:cexpr "i"} boogie_si_record_i32($i94);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.26, $p1);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i96 == 1);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb30:
    assume $i96 == 1;
    assume {:verifier.code 0} true;
    $i81 := $i94;
    goto $bb30_dummy;

  $bb27:
    assume $i84 == 1;
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i88 := $zext.i32.i64($i81);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref($i88, 8));
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.27, $p89);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} vslice_dummy_var_444 := dev_err.ref.ref.ref($p87, .str.5, $p90);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb17:
    assume $i64 == 1;
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} vslice_dummy_var_441 := dev_err.ref.ref.i32($p67, .str.2, $i37);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} vslice_dummy_var_442 := dev_err.ref.ref.i32($p71, .str.3, $i36);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} vslice_dummy_var_443 := dev_err.ref.ref.i32($p75, .str.4, $i35);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i58 == 1;
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364014, 1));
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p59, 1);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} vslice_dummy_var_440 := dev_err.ref.ref($p62, .str.1);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(1028, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $i23 := ioread32($p22);
    call {:si_unique_call 633} {:cexpr "sliport_status"} boogie_si_record_i32($i23);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i33, $i34 := 0, 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i35, $i36, $i37 := $i33, $i34, $i23;
    goto $bb13;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(1036, 1));
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $i28 := ioread32($p27);
    call {:si_unique_call 639} {:cexpr "sliport_err1"} boogie_si_record_i32($i28);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref(1040, 1));
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} $i32 := ioread32($p31);
    call {:si_unique_call 641} {:cexpr "sliport_err2"} boogie_si_record_i32($i32);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i32, $i28;
    goto $bb12;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb44_dummy:
    assume false;
    return;

  $bb39_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3145;

  $bb30_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3112;
}



const be_hw_error: ref;

axiom be_hw_error == $sub.ref(0, 391366);

procedure be_hw_error($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation be_hw_error($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i1;
  var $p5: ref;
  var $i6: i8;
  var $i7: i1;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364012, 1));
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364014, 1));
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i4 := $i7;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const pci_read_config_dword: ref;

axiom pci_read_config_dword == $sub.ref(0, 392398);

procedure pci_read_config_dword($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_read_config_dword($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} {:cexpr "pci_read_config_dword:arg:where"} boogie_si_record_i32($i1);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(16, 1));
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(56, 1));
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $i7 := pci_bus_read_config_dword($p4, $i6, $i1, $p2);
    call {:si_unique_call 652} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pci_bus_read_config_dword: ref;

axiom pci_bus_read_config_dword == $sub.ref(0, 393430);

procedure pci_bus_read_config_dword($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_read_config_dword($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 653} {:cexpr "pci_bus_read_config_dword:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 654} {:cexpr "pci_bus_read_config_dword:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 1} true;
    call {:si_unique_call 655} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 656} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const mutex_lock_interruptible: ref;

axiom mutex_lock_interruptible == $sub.ref(0, 394462);

procedure mutex_lock_interruptible($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_lock_interruptible($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 1} true;
    call {:si_unique_call 657} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 658} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_interruptible_mbox_lock_of_be_adapter: ref;

axiom ldv_mutex_lock_interruptible_mbox_lock_of_be_adapter == $sub.ref(0, 395494);

procedure ldv_mutex_lock_interruptible_mbox_lock_of_be_adapter($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_interruptible_mbox_lock_of_be_adapter($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i1 := $M.25;
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} ldv_error();
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    call {:si_unique_call 660} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 661} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 662} {:cexpr "nondetermined"} boogie_si_record_i32($i3);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 4);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 663} {:cexpr "ldv_mutex_mbox_lock_of_be_adapter"} boogie_si_record_i32(2);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb6;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const lancer_provisioning_error: ref;

axiom lancer_provisioning_error == $sub.ref(0, 396526);

procedure lancer_provisioning_error($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation lancer_provisioning_error($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(1028, 1));
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $i4 := ioread32($p3);
    call {:si_unique_call 665} {:cexpr "sliport_status"} boogie_si_record_i32($i4);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(1036, 1));
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $i9 := ioread32($p8);
    call {:si_unique_call 667} {:cexpr "sliport_err1"} boogie_si_record_i32($i9);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(1040, 1));
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $i13 := ioread32($p12);
    call {:si_unique_call 669} {:cexpr "sliport_err2"} boogie_si_record_i32($i13);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i9, 2);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i13, 9);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb5;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb8;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 397558);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $p1 := external_alloc();
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 398590);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 1} true;
    call {:si_unique_call 671} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 672} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 399622);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 1} true;
    call {:si_unique_call 673} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 674} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_set_power_state: ref;

axiom pci_set_power_state == $sub.ref(0, 400654);

procedure pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 675} {:cexpr "pci_set_power_state:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 1} true;
    call {:si_unique_call 676} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 677} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_restore_state: ref;

axiom pci_restore_state == $sub.ref(0, 401686);

procedure pci_restore_state($p0: ref);
  free requires assertsPassed;



implementation pci_restore_state($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    return;
}



const be_cmd_fw_init: ref;

axiom be_cmd_fw_init == $sub.ref(0, 402718);

procedure be_cmd_fw_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_cmd_fw_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 57888);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 57896);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $i15 := ldv_mutex_lock_interruptible_16($p14);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    call {:si_unique_call 679} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $p17 := wrb_from_mbox($p0);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(1, 1));
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $sub.i8(0, 1));
    $i20 := $add.i64(1, 1);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p18, $mul.ref($i20, 1));
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 18);
    $i22 := $add.i64($i20, 1);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p18, $mul.ref($i22, 1));
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, 52);
    $i24 := $add.i64($i22, 1);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p18, $mul.ref($i24, 1));
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $sub.i8(0, 1));
    $i26 := $add.i64($i24, 1);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p18, $mul.ref($i26, 1));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, $sub.i8(0, 1));
    $i28 := $add.i64($i26, 1);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p18, $mul.ref($i28, 1));
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, 86);
    $i30 := $add.i64($i28, 1);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p18, $mul.ref($i30, 1));
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 120);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, $sub.i8(0, 1));
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $i32 := be_mbox_notify_wait($p0);
    call {:si_unique_call 682} {:cexpr "status"} boogie_si_record_i32($i32);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} ldv_mutex_unlock_17($p33);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i13 := $i32;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 1);
    goto $bb6;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const be_setup: ref;

axiom be_setup == $sub.ref(0, 403750);

procedure be_setup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.21, $M.2, $M.1, $M.41, $CurrAddr, $M.25, $M.47, $M.46, $M.48, $M.42, $M.40, assertsPassed, $M.26;



implementation be_setup($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i1;
  var $i21: i32;
  var $i22: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i8;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i1;
  var $i76: i8;
  var $i77: i1;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p105: ref;
  var $i106: i16;
  var $i107: i32;
  var $i108: i1;
  var $p110: ref;
  var $p111: ref;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $i122: i32;
  var $p123: ref;
  var $i124: i32;
  var $p126: ref;
  var $i127: i8;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $i131: i32;
  var $i132: i1;
  var $i135: i32;
  var $i136: i1;
  var $i137: i1;
  var $i138: i8;
  var $i139: i1;
  var $p141: ref;
  var $i142: i64;
  var $p143: ref;
  var $p145: ref;
  var $i146: i32;
  var $i147: i32;
  var $p148: ref;
  var $i23: i32;
  var $i149: i32;
  var cmdloc_dummy_var_236: [ref]i8;
  var cmdloc_dummy_var_237: [ref]i8;
  var cmdloc_dummy_var_238: [ref]i8;
  var cmdloc_dummy_var_239: [ref]i8;
  var cmdloc_dummy_var_240: [ref]i8;
  var cmdloc_dummy_var_241: [ref]i8;
  var cmdloc_dummy_var_242: [ref]i8;
  var cmdloc_dummy_var_243: [ref]i8;
  var cmdloc_dummy_var_244: [ref]i8;
  var cmdloc_dummy_var_245: [ref]i8;
  var cmdloc_dummy_var_246: [ref]i8;
  var cmdloc_dummy_var_247: [ref]i8;
  var cmdloc_dummy_var_248: [ref]i8;
  var cmdloc_dummy_var_249: [ref]i8;
  var vslice_dummy_var_446: i32;
  var vslice_dummy_var_447: i32;
  var vslice_dummy_var_448: i32;
  var vslice_dummy_var_449: i32;
  var vslice_dummy_var_450: i32;
  var vslice_dummy_var_451: i32;
  var vslice_dummy_var_452: i32;
  var vslice_dummy_var_453: i32;
  var vslice_dummy_var_454: i32;
  var vslice_dummy_var_455: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $p3 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} be_setup_init($p0);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 57888);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $i21 := be_get_config($p0);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    call {:si_unique_call 691} {:cexpr "status"} boogie_si_record_i32($i21);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $i24 := be_msix_enable($p0);
    call {:si_unique_call 694} {:cexpr "status"} boogie_si_record_i32($i24);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $i26 := be_evt_queues_create($p0);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    call {:si_unique_call 696} {:cexpr "status"} boogie_si_record_i32($i26);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $i28 := be_tx_cqs_create($p0);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    call {:si_unique_call 698} {:cexpr "status"} boogie_si_record_i32($i28);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $i30 := be_rx_cqs_create($p0);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 700} {:cexpr "status"} boogie_si_record_i32($i30);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $i32 := be_mcc_queues_create($p0);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 702} {:cexpr "status"} boogie_si_record_i32($i32);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363956, 1));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} vslice_dummy_var_448 := be_cmd_get_fn_privileges($p0, $p34, 0);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} $i36 := be_is_mc($p0);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i8($i36);
    call {:si_unique_call 705} {:cexpr "tmp"} boogie_si_record_i8($i37);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364028, 1));
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 2);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i45 := 6192;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364304, 1));
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, $i45);
    call {:si_unique_call 707} {:cexpr "en_flags"} boogie_si_record_i32($i48);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364304, 1));
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363992, 1));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $i52 := be_cmd_if_create($p0, $i50, $i48, $p51, 0);
    call {:si_unique_call 709} {:cexpr "status"} boogie_si_record_i32($i52);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p3);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_236 := $M.0;
    call {:si_unique_call 710} cmdloc_dummy_var_237 := $memset.i8(cmdloc_dummy_var_236, $p54, 0, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_237;
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p4, 0);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p3);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363992, 1));
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364000, 1));
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $i60 := be_get_mac_addr($p0, $p55, $i57, $p4, $p59);
    call {:si_unique_call 712} {:cexpr "status"} boogie_si_record_i32($i60);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.29, $p4);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i8.i1($i62);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i63 == 1);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p3);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363992, 1));
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364000, 1));
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} $i69 := be_cmd_pmac_add($p0, $p64, $i66, $p68, 0);
    call {:si_unique_call 714} {:cexpr "status"} boogie_si_record_i32($i69);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 2784)), $mul.ref(736, 1));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $i75 := is_zero_ether_addr($p74);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i76 := $zext.i1.i8($i75);
    call {:si_unique_call 716} {:cexpr "tmp___0"} boogie_si_record_i8($i76);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i8.i1($i76);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $i100 := be_tx_qs_create($p0);
    call {:si_unique_call 722} {:cexpr "status"} boogie_si_record_i32($i100);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363960, 1));
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} vslice_dummy_var_449 := be_cmd_get_fw_ver($p0, $p103, $0.ref);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359344, 1));
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i106 := $load.i16($M.0, $p105);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i107 := $zext.i16.i32($i106);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} be_set_rx_mode($p111);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} vslice_dummy_var_451 := be_cmd_get_flow_control($p0, $p1, $p2);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364032, 1));
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p2);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i114, $i115);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb61;

  $bb61:
    assume !($i116 == 1);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364036, 1));
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p1);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i118, $i119);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.0, $p126);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i127);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 0);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $i135 := be_cmd_get_phy_info($p0);
    call {:si_unique_call 731} {:cexpr "status"} boogie_si_record_i32($i135);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 0);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} $i142 := msecs_to_jiffies(1000);
    call {:si_unique_call 735} {:cexpr "tmp___2"} boogie_si_record_i64($i142);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363496, 1));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} vslice_dummy_var_455 := schedule_delayed_work($p143, $i142);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363952, 1));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p145);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i147 := $or.i32($i146, 8);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363952, 1));
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p148, $i147);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i149 := 0;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $r := $i149;
    return;

  $bb71:
    assume $i136 == 1;
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $i137 := be_pause_supported($p0);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i138 := $zext.i1.i8($i137);
    call {:si_unique_call 733} {:cexpr "tmp___1"} boogie_si_record_i8($i138);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i8.i1($i138);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb73:
    assume $i139 == 1;
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(2, 1));
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p141, 1);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb65:
    assume $i129 == 1;
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364204, 1));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i132 := $ne.i32($i131, 0);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i132 == 1);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} vslice_dummy_var_454 := dev_warn.ref.ref($p7, .str.123);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb67:
    assume $i132 == 1;
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} vslice_dummy_var_453 := be_vf_setup($p0);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i120 == 1;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364036, 1));
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.0, $p121);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364032, 1));
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p123);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} vslice_dummy_var_452 := be_cmd_set_flow_control($p0, $i122, $i124);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i116 == 1;
    goto $bb60;

  $bb56:
    assume $i108 == 1;
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} vslice_dummy_var_450 := be_vid_config($p0);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb53:
    assume $i101 == 1;
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i23 := $i100;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} vslice_dummy_var_447 := be_clear($p0);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i149 := $i23;
    goto $bb77;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i77 == 1;
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i78 := $ugt.i64(6, 63);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i78 == 1);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 2784)), $mul.ref(736, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p3);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_241 := $M.0;
    cmdloc_dummy_var_242 := $M.0;
    call {:si_unique_call 718} cmdloc_dummy_var_243 := $memcpy.i8(cmdloc_dummy_var_241, cmdloc_dummy_var_242, $p87, $p88, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_243;
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i89 := $ugt.i64(6, 63);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i89 == 1);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p96, $mul.ref(0, 2784)), $mul.ref(452, 1));
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p3);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_247 := $M.0;
    cmdloc_dummy_var_248 := $M.0;
    call {:si_unique_call 720} cmdloc_dummy_var_249 := $memcpy.i8(cmdloc_dummy_var_247, cmdloc_dummy_var_248, $p98, $p99, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_249;
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb49:
    assume $i89 == 1;
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 2784)), $mul.ref(452, 1));
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p3);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_244 := $M.0;
    cmdloc_dummy_var_245 := $M.0;
    call {:si_unique_call 719} cmdloc_dummy_var_246 := $memcpy.i8(cmdloc_dummy_var_244, cmdloc_dummy_var_245, $p93, $p94, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_246;
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i78 == 1;
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 2784)), $mul.ref(736, 1));
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p3);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_238 := $M.0;
    cmdloc_dummy_var_239 := $M.0;
    call {:si_unique_call 717} cmdloc_dummy_var_240 := $memcpy.i8(cmdloc_dummy_var_238, cmdloc_dummy_var_239, $p82, $p83, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_240;
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb40:
    assume $i70 == 1;
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i23 := $i69;
    goto $bb9;

  $bb38:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb35:
    assume $i61 == 1;
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i23 := $i60;
    goto $bb9;

  $bb32:
    assume $i53 == 1;
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i23 := $i52;
    goto $bb9;

  $bb29:
    assume $i43 == 1;
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i44 := $or.i32(6192, 4);
    call {:si_unique_call 706} {:cexpr "en_flags"} boogie_si_record_i32($i44);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb31;

  $bb26:
    assume $i38 == 1;
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363956, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 1792);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i23 := $i32;
    goto $bb9;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i31 == 1;
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i23 := $i30;
    goto $bb9;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i29 == 1;
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i23 := $i28;
    goto $bb9;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i27 == 1;
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i23 := $i26;
    goto $bb9;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i23 := $i24;
    goto $bb9;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i23 := $i21;
    goto $bb9;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 57896);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} vslice_dummy_var_446 := be_cmd_req_native_mode($p0);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_82:
    assume !assertsPassed;
    return;
}



const rtnl_lock: ref;

axiom rtnl_lock == $sub.ref(0, 404782);

procedure rtnl_lock();
  free requires assertsPassed;



implementation rtnl_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    return;
}



const be_open: ref;

axiom be_open == $sub.ref(0, 405814);

procedure be_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.21, $M.1, $CurrAddr, $M.34, $M.38, $M.25, $M.35, $M.3, assertsPassed, $M.26, $M.29, $M.41, $M.42, $M.60, $M.61, $M.62, $M.30, $M.31, $M.47, $M.46, $M.48, $M.40;



implementation be_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i16;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i15: i32;
  var $p16: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $i39: i16;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i33: i32;
  var $p34: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p53: ref;
  var $p55: ref;
  var $i56: i16;
  var $i57: i32;
  var $i58: i16;
  var $i59: i32;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $i51: i32;
  var $p52: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $i69: i8;
  var $i70: i32;
  var $i71: i8;
  var $p73: ref;
  var $p74: ref;
  var $i72: i32;
  var vslice_dummy_var_456: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $p2 := netdev_priv($p0);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $i4 := be_rx_qs_create($p3);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    call {:si_unique_call 740} {:cexpr "status"} boogie_si_record_i32($i4);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $i6 := be_irq_register($p3);
    call {:si_unique_call 743} {:cexpr "status"} boogie_si_record_i32($i6);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(136368, 1));
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64(0);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p9, $mul.ref($i10, 24760));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i14 := $ult.i32(0, $i13);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(4136, 1));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64(0);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p27, $mul.ref($i28, 16528));
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(4132, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i32 := $ult.i32(0, $i31);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} be_async_mcc_enable($p3);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(488, 1));
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64(0);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p45, $mul.ref($i46, 272));
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(484, 1));
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i50 := $ult.i32(0, $i49);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(363952, 1));
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i65 := $or.i32($i64, 512);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(363952, 1));
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i65);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $i67 := be_cmd_link_status_query($p3, $0.ref, $p1, 0);
    call {:si_unique_call 753} {:cexpr "status"} boogie_si_record_i32($i67);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 0);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} netif_tx_start_all_queues($p0);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} be_roce_dev_open($p3);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i72 := 0;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $r := $i72;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i68 == 1;
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.2, $p1);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i8($i70);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} be_link_status_update($p3, $i71);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb24:
    assume $i50 == 1;
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i51, $p52 := 0, $p47;
    goto $bb27;

  $bb27:
    call $p53, $p55, $i56, $i57, $i58, $i59, $p60, $i61, $i62, $i51, $p52 := be_open_loop_$bb27($p3, $p48, $p53, $p55, $i56, $i57, $i58, $i59, $p60, $i61, $i62, $i51, $p52);
    goto $bb27_last;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} napi_enable($p53);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p52, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(28, 1));
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i56 := $load.i16($M.0, $p55);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i16($i57);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} be_eq_notify($p3, $i58, 1, 0, 0);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i51, 1);
    call {:si_unique_call 751} {:cexpr "i"} boogie_si_record_i32($i59);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p52, $mul.ref(1, 272));
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p48);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i62 := $ult.i32($i59, $i61);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i62 == 1);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb29:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i51, $p52 := $i59, $p60;
    goto $bb29_dummy;

  $bb16:
    assume $i32 == 1;
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i33, $p34 := 0, $p29;
    goto $bb19;

  $bb19:
    call $p36, $i37, $i38, $i39, $i40, $p41, $i42, $i43, $i33, $p34 := be_open_loop_$bb19($p3, $p30, $p36, $i37, $i38, $i39, $i40, $p41, $i42, $i43, $i33, $p34);
    goto $bb19_last;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 16528)), $mul.ref(48, 1)), $mul.ref(28, 1));
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i38);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} be_cq_notify($p3, $i39, 1, 0);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i33, 1);
    call {:si_unique_call 747} {:cexpr "i"} boogie_si_record_i32($i40);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p34, $mul.ref(1, 16528));
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p30);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i43 := $ult.i32($i40, $i42);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i43 == 1);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb21:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i33, $p34 := $i40, $p41;
    goto $bb21_dummy;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i15, $p16 := 0, $p11;
    goto $bb11;

  $bb11:
    call $p18, $i19, $i20, $i21, $i22, $p23, $i24, $i25, $i15, $p16 := be_open_loop_$bb11($p3, $p12, $p18, $i19, $i20, $i21, $i22, $p23, $i24, $i25, $i15, $p16);
    goto $bb11_last;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 24760)), $mul.ref(48, 1)), $mul.ref(28, 1));
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i16($i20);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} be_cq_notify($p3, $i21, 1, 0);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i15, 1);
    call {:si_unique_call 745} {:cexpr "i"} boogie_si_record_i32($i22);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p16, $mul.ref(1, 24760));
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p12);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i25 := $ult.i32($i22, $i24);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i15, $p16 := $i22, $p23;
    goto $bb13_dummy;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} vslice_dummy_var_456 := be_close($p74);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i72 := $sub.i32(0, 5);
    goto $bb35;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb29_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3605;

  $bb21_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3580;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3556;
}



const rtnl_unlock: ref;

axiom rtnl_unlock == $sub.ref(0, 406846);

procedure rtnl_unlock();
  free requires assertsPassed;



implementation rtnl_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    return;
}



const schedule_delayed_work: ref;

axiom schedule_delayed_work == $sub.ref(0, 407878);

procedure schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i1);
  free requires assertsPassed;



implementation schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} {:cexpr "schedule_delayed_work:arg:delay"} boogie_si_record_i64($i1);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, system_wq);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i3 := queue_delayed_work($p2, $p0, $i1);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 759} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const netif_device_attach: ref;

axiom netif_device_attach == $sub.ref(0, 408910);

procedure netif_device_attach($p0: ref);
  free requires assertsPassed;



implementation netif_device_attach($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    return;
}



const be_setup_wol: ref;

axiom be_setup_wol == $sub.ref(0, 409942);

procedure be_setup_wol($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.31, $M.21, $CurrAddr;



implementation be_setup_wol($p0: ref, $i1: i1) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var $i51: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i20: i32;
  var cmdloc_dummy_var_250: [ref]i8;
  var cmdloc_dummy_var_251: [ref]i8;
  var vslice_dummy_var_457: i32;
  var vslice_dummy_var_458: i32;
  var vslice_dummy_var_459: i32;
  var vslice_dummy_var_460: i32;
  var vslice_dummy_var_461: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $p3 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i1);
    call {:si_unique_call 762} {:cexpr "be_setup_wol:arg:enable"} boogie_si_record_i1($i1);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_250 := $M.0;
    call {:si_unique_call 763} cmdloc_dummy_var_251 := $memset.i8(cmdloc_dummy_var_250, $p5, 0, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_251;
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $M.30 := $store.i32($M.30, $p6, 604);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.30, $p10);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $p14 := dma_alloc_attrs($p9, $i12, $p13, 32976, $0.ref);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $M.31 := $store.ref($M.31, $p15, $p14);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.31, $p16);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i4);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p3);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} $i53 := be_cmd_enable_magic_wol($p0, $p52, $p2);
    call {:si_unique_call 768} {:cexpr "status"} boogie_si_record_i32($i53);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} vslice_dummy_var_457 := pci_enable_wake($p55, 3, 0);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} vslice_dummy_var_458 := pci_enable_wake($p58, 4, 0);
    assume {:verifier.code 0} true;
    $i51 := $i53;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.30, $p63);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i65 := $zext.i32.i64($i64);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.31, $p66);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.32, $p68);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} dma_free_attrs($p62, $i65, $p67, $i69, $0.ref);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i20 := $i51;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} $i24 := pci_write_config_dword($p23, 68, 264);
    call {:si_unique_call 766} {:cexpr "status"} boogie_si_record_i32($i24);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 2784)), $mul.ref(736, 1));
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $i44 := be_cmd_enable_magic_wol($p0, $p43, $p2);
    call {:si_unique_call 774} {:cexpr "status"} boogie_si_record_i32($i44);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} vslice_dummy_var_460 := pci_enable_wake($p46, 3, 1);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} vslice_dummy_var_461 := pci_enable_wake($p49, 4, 1);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i51 := $i44;
    goto $bb10;

  $bb7:
    assume $i25 == 1;
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} vslice_dummy_var_459 := dev_err.ref.ref($p28, .str.161);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.30, $p33);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i34);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.31, $p36);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.32, $p38);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} dma_free_attrs($p32, $i35, $p37, $i39, $0.ref);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i20 := $i24;
    goto $bb3;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 1);
    goto $bb3;
}



const pci_write_config_dword: ref;

axiom pci_write_config_dword == $sub.ref(0, 410974);

procedure pci_write_config_dword($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_write_config_dword($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} {:cexpr "pci_write_config_dword:arg:where"} boogie_si_record_i32($i1);
    call {:si_unique_call 779} {:cexpr "pci_write_config_dword:arg:val"} boogie_si_record_i32($i2);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(16, 1));
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(56, 1));
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $i7 := pci_bus_write_config_dword($p4, $i6, $i1, $i2);
    call {:si_unique_call 781} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const be_cmd_enable_magic_wol: ref;

axiom be_cmd_enable_magic_wol == $sub.ref(0, 412006);

procedure be_cmd_enable_magic_wol($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_enable_magic_wol($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i7: i32;
  var $p18: ref;
  var cmdloc_dummy_var_252: [ref]i8;
  var cmdloc_dummy_var_253: [ref]i8;
  var cmdloc_dummy_var_254: [ref]i8;
  var cmdloc_dummy_var_255: [ref]i8;
  var cmdloc_dummy_var_256: [ref]i8;
  var cmdloc_dummy_var_257: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} spin_lock_bh($p3);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $p4 := wrb_from_mccq($p0);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.31, $p8);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 604)), $mul.ref(0, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} be_wrb_cmd_hdr_prepare($p11, 3, 12, 604, $p4, $p2);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i64(6, 63);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p10, $mul.ref(0, 604)), $mul.ref(596, 1));
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_255 := $M.0;
    cmdloc_dummy_var_256 := $M.0;
    call {:si_unique_call 787} cmdloc_dummy_var_257 := $memcpy.i8(cmdloc_dummy_var_255, cmdloc_dummy_var_256, $p16, $p1, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_257;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} $i17 := be_mcc_notify_wait($p0);
    call {:si_unique_call 789} {:cexpr "status"} boogie_si_record_i32($i17);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i7 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} spin_unlock_bh($p18);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref(0, 604)), $mul.ref(596, 1));
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_252 := $M.0;
    cmdloc_dummy_var_253 := $M.0;
    call {:si_unique_call 786} cmdloc_dummy_var_254 := $memcpy.i8(cmdloc_dummy_var_252, cmdloc_dummy_var_253, $p14, $p1, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_254;
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 16);
    goto $bb3;
}



const pci_enable_wake: ref;

axiom pci_enable_wake == $sub.ref(0, 413038);

procedure pci_enable_wake($p0: ref, $i1: i32, $i2: i1) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_wake($p0: ref, $i1: i32, $i2: i1) returns ($r: i32)
{
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} {:cexpr "pci_enable_wake:arg:state"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 791} {:cexpr "pci_enable_wake:arg:enable"} boogie_si_record_i1($i2);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $i5 := __pci_enable_wake($p0, $i1, 0, $i4);
    call {:si_unique_call 793} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __pci_enable_wake: ref;

axiom __pci_enable_wake == $sub.ref(0, 414070);

procedure __pci_enable_wake($p0: ref, $i1: i32, $i2: i1, $i3: i1) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_enable_wake($p0: ref, $i1: i32, $i2: i1, $i3: i1) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 794} {:cexpr "__pci_enable_wake:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 795} {:cexpr "__pci_enable_wake:arg:arg2"} boogie_si_record_i1($i2);
    call {:si_unique_call 796} {:cexpr "__pci_enable_wake:arg:arg3"} boogie_si_record_i1($i3);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 1} true;
    call {:si_unique_call 797} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 798} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pci_bus_write_config_dword: ref;

axiom pci_bus_write_config_dword == $sub.ref(0, 415102);

procedure pci_bus_write_config_dword($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_write_config_dword($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 799} {:cexpr "pci_bus_write_config_dword:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 800} {:cexpr "pci_bus_write_config_dword:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 801} {:cexpr "pci_bus_write_config_dword:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 1} true;
    call {:si_unique_call 802} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 803} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_delayed_work: ref;

axiom queue_delayed_work == $sub.ref(0, 416134);

procedure queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1);
  free requires assertsPassed;



implementation queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} {:cexpr "queue_delayed_work:arg:delay"} boogie_si_record_i64($i2);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $i3 := queue_delayed_work_on(4096, $p0, $p1, $i2);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 806} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const queue_delayed_work_on: ref;

axiom queue_delayed_work_on == $sub.ref(0, 417166);

procedure queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;



implementation queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 807} {:cexpr "queue_delayed_work_on:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 808} {:cexpr "queue_delayed_work_on:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 1} true;
    call {:si_unique_call 809} $i4 := __VERIFIER_nondet_bool();
    call {:si_unique_call 810} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i4);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const be_rx_qs_create: ref;

axiom be_rx_qs_create == $sub.ref(0, 418198);

procedure be_rx_qs_create($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr, $M.25, assertsPassed, $M.26;



implementation be_rx_qs_create($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p9: ref;
  var $i10: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i64;
  var $p27: ref;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $i32: i16;
  var $i33: i16;
  var $i34: i32;
  var $i35: i16;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $p51: ref;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i16;
  var $i57: i16;
  var $i58: i32;
  var $i59: i16;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i32;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $p49: ref;
  var $i50: i32;
  var $i71: i1;
  var $i72: i8;
  var $i73: i1;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $i86: i32;
  var $i87: i1;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $i92: i64;
  var $p93: ref;
  var $i94: i32;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $p84: ref;
  var $i85: i32;
  var $i83: i32;
  var $i88: i32;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $i74: i32;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i16;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i16;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i16;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i16;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $i130: i64;
  var $i131: i64;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i64;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i64;
  var $p143: ref;
  var $p144: ref;
  var $i145: i32;
  var $i146: i1;
  var $i149: i32;
  var $p150: ref;
  var $i151: i32;
  var $i152: i1;
  var $p147: ref;
  var $i148: i32;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $p1 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136368, 1));
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64(0);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 24760));
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i8 := $ult.i32(0, $i7);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136368, 1));
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i23, 1);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p21, $mul.ref($i25, 24760)), $mul.ref(8, 1));
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p21, $mul.ref($i25, 24760)), $mul.ref(48, 1)), $mul.ref(28, 1));
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.0, $p29);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i31);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i33 := $M.33;
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i34);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363992, 1));
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p21, $mul.ref($i25, 24760)), $mul.ref(24752, 1));
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} $i39 := be_cmd_rxq_create($p0, $p27, $i32, $i35, $i37, 0, $p38);
    call {:si_unique_call 816} {:cexpr "rc"} boogie_si_record_i32($i39);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136368, 1));
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64(0);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p42, $mul.ref($i43, 24760));
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32($i46, 1);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i48 := $ult.i32(0, $i47);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $i71 := be_multi_rxq($p0);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i72 := $zext.i1.i8($i71);
    call {:si_unique_call 821} {:cexpr "tmp"} boogie_si_record_i8($i72);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i8.i1($i72);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136368, 1));
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p140);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i142 := $sext.i32.i64(0);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($p141, $mul.ref($i142, 24760));
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, $p144);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i146 := $ult.i32(0, $i145);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    assume {:branchcond $i146} true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i146 == 1);
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb60:
    assume $i146 == 1;
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p147, $i148 := $p143, 0;
    goto $bb63;

  $bb63:
    call $i149, $p150, $i151, $i152, $p147, $i148 := be_rx_qs_create_loop_$bb63($p144, $i149, $p150, $i151, $i152, $p147, $i148);
    goto $bb63_last;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} be_post_rx_frags($p147, 208);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i149 := $add.i32($i148, 1);
    call {:si_unique_call 827} {:cexpr "i"} boogie_si_record_i32($i149);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($p147, $mul.ref(1, 24760));
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.0, $p144);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i152 := $ult.i32($i149, $i151);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i152 == 1);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb65:
    assume $i152 == 1;
    assume {:verifier.code 0} true;
    $p147, $i148 := $p150, $i149;
    goto $bb65_dummy;

  $bb27:
    assume $i73 == 1;
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i74 := 0;
    goto $bb29;

  $bb29:
    call $p75, $p76, $i77, $p78, $p79, $i80, $i81, $i82, $i86, $i87, $p89, $i90, $i91, $i92, $p93, $i94, $p95, $i96, $i97, $i98, $p84, $i85, $i83, $i88, $p99, $i100, $i101, $i102, $i103, $i74 := be_rx_qs_create_loop_$bb29($p0, $p1, $p75, $p76, $i77, $p78, $p79, $i80, $i81, $i82, $i86, $i87, $p89, $i90, $i91, $i92, $p93, $i94, $p95, $i96, $i97, $i98, $p84, $i85, $i83, $i88, $p99, $i100, $i101, $i102, $i103, $i74);
    goto $bb29_last;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136368, 1));
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64(0);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p76, $mul.ref($i77, 24760));
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i81 := $sub.i32($i80, 1);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i82 := $ult.i32(0, $i81);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $i83 := $i74;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i88 := $i83;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p99);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i101 := $add.i32($i100, $i88);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i102 := $sub.i32($i101, 1);
    call {:si_unique_call 822} {:cexpr "j"} boogie_si_record_i32($i102);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i103 := $sle.i32($i102, 127);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364312, 1));
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p104, 15);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i108 := $load.i16($M.0, $p107);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i109 := $zext.i16.i32($i108);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 545);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i110 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p1);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364312, 1));
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $i135 := $load.i64($M.0, $p134);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i136 := $trunc.i64.i32($i135);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $i137 := be_cmd_rss_config($p0, $p133, $i136, 128);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    call {:si_unique_call 825} {:cexpr "rc"} boogie_si_record_i32($i137);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb56:
    assume $i138 == 1;
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364312, 1));
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p139, 0);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i15 := $i137;
    goto $bb8;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i110 == 1;
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p112, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i114 := $load.i16($M.0, $p113);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i115 := $zext.i16.i32($i114);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 1808);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i116 == 1);
    goto $bb48;

  $bb49:
    assume $i116 == 1;
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p118, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i120 := $load.i16($M.0, $p119);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i121 := $zext.i16.i32($i120);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i121, 529);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i122 == 1);
    goto $bb48;

  $bb51:
    assume $i122 == 1;
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.0, $p123);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p124, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i126 := $load.i16($M.0, $p125);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i127 := $zext.i16.i32($i126);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i128 := $ne.i32($i127, 1792);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i128 == 1);
    goto $bb48;

  $bb53:
    assume $i128 == 1;
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364312, 1));
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i130 := $load.i64($M.0, $p129);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i131 := $or.i64($i130, 48);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364312, 1));
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p132, $i131);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb43:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $i74 := $i102;
    goto $bb43_dummy;

  $bb31:
    assume $i82 == 1;
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p84, $i85 := $p78, 0;
    goto $bb34;

  $bb34:
    call $i86, $i87, $p89, $i90, $i91, $i92, $p93, $i94, $p95, $i96, $i97, $i98, $p84, $i85 := be_rx_qs_create_loop_$bb34($p1, $p79, $i86, $i87, $p89, $i90, $i91, $i92, $p93, $i94, $p95, $i96, $i97, $i98, $p84, $i85, $i74);
    goto $bb34_last;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i86 := $add.i32($i74, $i85);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i87 := $sgt.i32($i86, 127);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p84, $mul.ref(0, 24760)), $mul.ref(24752, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.0, $p89);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i74, $i85);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64($i91);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref($i92, 1));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p93, $i90);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i85, 1);
    call {:si_unique_call 823} {:cexpr "i"} boogie_si_record_i32($i94);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p84, $mul.ref(1, 24760));
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p79);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i97 := $sub.i32($i96, 1);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i98 := $ult.i32($i94, $i97);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i98 == 1);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i83 := $i74;
    goto $bb33;

  $bb40:
    assume $i98 == 1;
    assume {:verifier.code 0} true;
    $p84, $i85 := $p95, $i94;
    goto $bb40_dummy;

  $bb36:
    assume $i87 == 1;
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i88 := $i74;
    goto $bb38;

  $bb16:
    assume $i48 == 1;
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $p49, $i50 := $p44, 0;
    goto $bb19;

  $bb19:
    call $p51, $p53, $i54, $i55, $i56, $i57, $i58, $i59, $p60, $i61, $p62, $i63, $i64, $i65, $i66, $p67, $i68, $i69, $i70, $p49, $i50 := be_rx_qs_create_loop_$bb19($p0, $p45, $p51, $p53, $i54, $i55, $i56, $i57, $i58, $i59, $p60, $i61, $p62, $i63, $i64, $i65, $i66, $p67, $i68, $i69, $i70, $p49, $i50);
    goto $bb19_last;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p49, $mul.ref(0, 24760)), $mul.ref(8, 1));
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p49, $mul.ref(0, 24760)), $mul.ref(48, 1)), $mul.ref(28, 1));
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.0, $p53);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i16($i55);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i57 := $M.33;
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i16($i58);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363992, 1));
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p49, $mul.ref(0, 24760)), $mul.ref(24752, 1));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $i63 := be_cmd_rxq_create($p0, $p51, $i56, $i59, $i61, 1, $p62);
    call {:si_unique_call 818} {:cexpr "rc"} boogie_si_record_i32($i63);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i65 := $i63;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i50, 1);
    call {:si_unique_call 819} {:cexpr "i"} boogie_si_record_i32($i66);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p49, $mul.ref(1, 24760));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p45);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i69 := $sub.i32($i68, 1);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i70 := $ult.i32($i66, $i69);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i70 == 1);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb24:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $p49, $i50 := $p67, $i66;
    goto $bb24_dummy;

  $bb21:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i15 := $i65;
    goto $bb8;

  $bb13:
    assume $i40 == 1;
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i15 := $i39;
    goto $bb8;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $p9, $i10 := $p5, 0;
    goto $bb4;

  $bb4:
    call $p11, $i12, $i13, $i14, $i16, $p17, $i18, $i19, $p9, $i10 := be_rx_qs_create_loop_$bb4($p0, $p6, $p11, $i12, $i13, $i14, $i16, $p17, $i18, $i19, $p9, $i10);
    goto $bb4_last;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref(0, 24760)), $mul.ref(8, 1));
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $i12 := be_queue_alloc($p0, $p11, 1024, 8);
    call {:si_unique_call 813} {:cexpr "rc"} boogie_si_record_i32($i12);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i10, 1);
    call {:si_unique_call 814} {:cexpr "i"} boogie_si_record_i32($i16);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p9, $mul.ref(1, 24760));
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p6);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i19 := $ult.i32($i16, $i18);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $p9, $i10 := $p17, $i16;
    goto $bb10_dummy;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb8;

  $bb65_dummy:
    assume false;
    return;

  $bb63_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3985;

  $bb40_dummy:
    assume false;
    return;

  $bb34_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3896;

  $bb43_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3883;

  $bb24_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3851;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3800;
}



const be_irq_register: ref;

axiom be_irq_register == $sub.ref(0, 419230);

procedure be_irq_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation be_irq_register($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $i12: i32;
  var vslice_dummy_var_462: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(480, 1));
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 2696)), $mul.ref(1300, 1));
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 2784)), $mul.ref(64, 1));
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 2784)), $mul.ref(64, 1));
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 2784)), $mul.ref(0, 1));
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(488, 1));
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} $i24 := request_irq($i19, be_intx, 128, $p21, $p23);
    call {:si_unique_call 831} {:cexpr "status"} boogie_si_record_i32($i24);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(4128, 1));
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, 1);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} vslice_dummy_var_462 := dev_err.ref.ref.i32($p28, .str.98, $i24);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i12 := $i24;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $i6 := be_msix_register($p0);
    call {:si_unique_call 829} {:cexpr "status"} boogie_si_record_i32($i6);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i12 := $i6;
    goto $bb9;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const be_async_mcc_enable: ref;

axiom be_async_mcc_enable == $sub.ref(0, 420262);

procedure be_async_mcc_enable($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_async_mcc_enable($p0: ref)
{
  var $p1: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i16;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(408, 1));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} spin_lock_bh($p1);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(40, 1)), $mul.ref(28, 1));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} be_cq_notify($p0, $i7, 1, 0);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(80, 1));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 1);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(408, 1));
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} spin_unlock_bh($p10);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    return;
}



const napi_enable: ref;

axiom napi_enable == $sub.ref(0, 421294);

procedure napi_enable($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation napi_enable($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 837} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 839} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 841} devirtbounce.4(0);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} clear_bit(0, $p8);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 840} devirtbounce.2(0, .str.101, 472, 12);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call napi_enable_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const be_eq_notify: ref;

axiom be_eq_notify == $sub.ref(0, 422326);

procedure be_eq_notify($p0: ref, $i1: i16, $i2: i1, $i3: i1, $i4: i16);
  free requires assertsPassed;



implementation be_eq_notify($p0: ref, $i1: i16, $i2: i1, $i3: i1, $i4: i16)
{
  var $i5: i8;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i8;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} {:cexpr "be_eq_notify:arg:qid"} boogie_si_record_i16($i1);
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i2);
    call {:si_unique_call 844} {:cexpr "be_eq_notify:arg:arm"} boogie_si_record_i1($i2);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i3);
    call {:si_unique_call 845} {:cexpr "be_eq_notify:arg:clear_int"} boogie_si_record_i1($i3);
    call {:si_unique_call 846} {:cexpr "be_eq_notify:arg:num_popped"} boogie_si_record_i16($i4);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i1);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 511);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i8, 0);
    call {:si_unique_call 847} {:cexpr "val"} boogie_si_record_i32($i9);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i1);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 15872);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i12 := $shl.i32($i11, 2);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i12, $i9);
    call {:si_unique_call 848} {:cexpr "val"} boogie_si_record_i32($i13);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364012, 1));
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i5);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i19 := $i13;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i6);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i19;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i22, 1024);
    call {:si_unique_call 851} {:cexpr "val"} boogie_si_record_i32($i23);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i4);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i25 := $shl.i32($i24, 16);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i25, $i23);
    call {:si_unique_call 852} {:cexpr "val"} boogie_si_record_i32($i26);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref(288, 1));
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} iowrite32($i26, $p29);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i19, 512);
    call {:si_unique_call 850} {:cexpr "val"} boogie_si_record_i32($i21);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb10;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i13, 536870912);
    call {:si_unique_call 849} {:cexpr "val"} boogie_si_record_i32($i18);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb7;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const be_cmd_link_status_query: ref;

axiom be_cmd_link_status_query == $sub.ref(0, 423358);

procedure be_cmd_link_status_query($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.21, $M.1, $CurrAddr;



implementation be_cmd_link_status_query($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $i28: i8;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $i44: i32;
  var $i45: i16;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i32;
  var $i50: i16;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i1;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $i58: i8;
  var $i10: i32;
  var $p59: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} {:cexpr "be_cmd_link_status_query:arg:dom"} boogie_si_record_i32($i3);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} spin_lock_bh($p4);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p2);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} $p7 := wrb_from_mccq($p0);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $p11 := embedded_payload($p7);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} be_wrb_cmd_hdr_prepare($p13, 1, 5, 20, $p7, $0.ref);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 529);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i3);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, $i28);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} $i31 := be_mcc_notify_wait($p0);
    call {:si_unique_call 861} {:cexpr "status"} boogie_si_record_i32($i31);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i10 := $i31;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} spin_unlock_bh($p59);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb14:
    assume $i32 == 1;
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $p33 := embedded_payload($p7);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p1);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p2);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i56 == 1;
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p34, $mul.ref(0, 28)), $mul.ref(24, 1));
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p2, $i58);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb16:
    assume $i36 == 1;
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p34, $mul.ref(0, 28)), $mul.ref(22, 1));
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i40 == 1);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p34, $mul.ref(0, 28)), $mul.ref(18, 1));
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $i49 := be_mac_to_link_speed($i48);
    call {:si_unique_call 864} {:cexpr "tmp___1"} boogie_si_record_i32($i49);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i49);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p1, $i50);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p34, $mul.ref(0, 28)), $mul.ref(24, 1));
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 0);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i54 == 1;
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p1, 0);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i40 == 1;
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p34, $mul.ref(0, 28)), $mul.ref(22, 1));
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p41);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i44 := $mul.i32($i43, 10);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i44);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p1, $i45);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 1792);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb10;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, 1);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 16);
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p2, 0);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const netif_tx_start_all_queues: ref;

axiom netif_tx_start_all_queues == $sub.ref(0, 424390);

procedure netif_tx_start_all_queues($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation netif_tx_start_all_queues($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(824, 1));
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i2, 0);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $p5, $i6, $i7, $i8, $i4 := netif_tx_start_all_queues_loop_$bb4($p0, $p1, $p5, $i6, $i7, $i8, $i4);
    goto $bb4_last;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $p5 := netdev_get_tx_queue($p0, $i4);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} netif_tx_start_queue($p5);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i4, 1);
    call {:si_unique_call 867} {:cexpr "i"} boogie_si_record_i32($i6);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p1);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i32($i7, $i6);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4202;
}



const be_roce_dev_open: ref;

axiom be_roce_dev_open == $sub.ref(0, 425422);

procedure be_roce_dev_open($p0: ref);
  free requires assertsPassed;
  modifies $M.38, assertsPassed, $M.0, $M.41, $M.25, $M.21, $CurrAddr, $M.26;



implementation be_roce_dev_open($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 1824);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 1832);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364024, 1));
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 4);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb6;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} ldv_mutex_lock_108(be_adapter_list_lock);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} _be_roce_dev_open($p0);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} ldv_mutex_unlock_109(be_adapter_list_lock);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const be_close: ref;

axiom be_close == $sub.ref(0, 426454);

procedure be_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.34, $M.35, $M.3, $M.21, $M.38, $M.29, $M.41, $M.42, $CurrAddr, $M.60, $M.61, $M.62, $M.30, $M.31, $M.2, $M.1, $M.26, assertsPassed, $M.25, $M.47, $M.46, $M.48, $M.40;



implementation be_close($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i14: i32;
  var $p15: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i32: i32;
  var $p33: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} $p1 := netdev_priv($p0);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} be_roce_dev_close($p2);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(363952, 1));
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 512);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} be_async_mcc_disable($p2);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} be_tx_compl_clean($p2);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} netif_tx_disable($p0);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} be_rx_qs_destroy($p2);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(488, 1));
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64(0);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p26, $mul.ref($i27, 272));
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(484, 1));
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i31 := $ult.i32(0, $i30);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} be_irq_unregister($p2);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb12:
    assume $i31 == 1;
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i32, $p33 := 0, $p28;
    goto $bb15;

  $bb15:
    call $p34, $i35, $i36, $i37, $p38, $i39, $i40, $p41, $i42, $i43, $i32, $p33 := be_close_loop_$bb15($p0, $p2, $p29, $p34, $i35, $i36, $i37, $p38, $i39, $i40, $p41, $i42, $i43, $i32, $p33);
    goto $bb15_last;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(480, 1));
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i36 == 1);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(64, 1));
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} synchronize_irq($i39);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} be_eq_clean($p33);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i32, 1);
    call {:si_unique_call 884} {:cexpr "i"} boogie_si_record_i32($i40);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p33, $mul.ref(1, 272));
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p29);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i43 := $ult.i32($i40, $i42);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i43 == 1);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb20:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i32, $p33 := $i40, $p41;
    goto $bb20_dummy;

  $bb17:
    assume $i36 == 1;
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} $i37 := be_msix_vec_get($p2, $p33);
    call {:si_unique_call 880} {:cexpr "tmp___0"} boogie_si_record_i32($i37);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} synchronize_irq($i37);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(488, 1));
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64(0);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p8, $mul.ref($i9, 272));
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(484, 1));
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i13 := $ult.i32(0, $i12);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(363952, 1));
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, $sub.i32(0, 513));
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(363952, 1));
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i14, $p15 := 0, $p10;
    goto $bb6;

  $bb6:
    call $p16, $i17, $p18, $i19, $i20, $i14, $p15 := be_close_loop_$bb6($p11, $p16, $i17, $p18, $i19, $i20, $i14, $p15);
    goto $bb6_last;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} napi_disable($p16);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i14, 1);
    call {:si_unique_call 874} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p15, $mul.ref(1, 272));
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p11);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i20 := $ult.i32($i17, $i19);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i14, $p15 := $i17, $p18;
    goto $bb8_dummy;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb20_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4289;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4258;
}



const be_roce_dev_close: ref;

axiom be_roce_dev_close == $sub.ref(0, 427486);

procedure be_roce_dev_close($p0: ref);
  free requires assertsPassed;
  modifies $M.38, $M.0, assertsPassed, $M.41, $M.25, $M.21, $CurrAddr, $M.26;



implementation be_roce_dev_close($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 1824);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 1832);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364024, 1));
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 4);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb6;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} ldv_mutex_lock_110(be_adapter_list_lock);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} _be_roce_dev_close($p0);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} ldv_mutex_unlock_111(be_adapter_list_lock);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const napi_disable: ref;

axiom napi_disable == $sub.ref(0, 428518);

procedure napi_disable($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.41, $M.21, $M.42, $CurrAddr;



implementation napi_disable($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} set_bit(1, $p1);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} $i3 := test_and_set_bit(0, $p2);
    call {:si_unique_call 891} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} clear_bit(1, $p7);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i5, $i6 := napi_disable_loop_$bb4($p2, $i5, $i6);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} msleep(1);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $i5 := test_and_set_bit(0, $p2);
    call {:si_unique_call 894} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const be_async_mcc_disable: ref;

axiom be_async_mcc_disable == $sub.ref(0, 429550);

procedure be_async_mcc_disable($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_async_mcc_disable($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i16;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(408, 1));
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} spin_lock_bh($p1);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(80, 1));
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 0);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(40, 1)), $mul.ref(28, 1));
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} be_cq_notify($p0, $i9, 0, 0);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(408, 1));
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} spin_unlock_bh($p10);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    return;
}



const be_tx_compl_clean: ref;

axiom be_tx_compl_clean == $sub.ref(0, 430582);

procedure be_tx_compl_clean($p0: ref);
  free requires assertsPassed;
  modifies $M.34, $M.0, $M.35, $CurrAddr;



implementation be_tx_compl_clean($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i16;
  var $i4: i16;
  var $i5: i16;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i16;
  var $i37: i16;
  var $i38: i32;
  var $i39: i16;
  var $i40: i16;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i16;
  var $i45: i32;
  var $i46: i32;
  var $i47: i16;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p30: ref;
  var $i31: i16;
  var $i32: i16;
  var $i51: i16;
  var $i52: i16;
  var $i28: i16;
  var $i29: i16;
  var $i53: i32;
  var $i54: i1;
  var $p56: ref;
  var $i57: i16;
  var $i58: i32;
  var $i59: i16;
  var $i60: i32;
  var $i61: i16;
  var $i62: i32;
  var $p63: ref;
  var $i64: i16;
  var $i65: i16;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i16;
  var $i21: i16;
  var $i22: i32;
  var $i75: i16;
  var $i76: i16;
  var $i77: i32;
  var $i15: i16;
  var $i16: i16;
  var $i17: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i32;
  var $i81: i16;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $p94: ref;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p103: ref;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i107: i16;
  var $i108: i32;
  var $i109: i64;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i16;
  var $i115: i32;
  var $i116: i16;
  var $i117: i32;
  var $i118: i32;
  var $i119: i16;
  var $p120: ref;
  var $i121: i16;
  var $i122: i32;
  var $i123: i16;
  var $i124: i16;
  var $i125: i32;
  var $i126: i16;
  var $i127: i16;
  var $i128: i32;
  var $p129: ref;
  var $i130: i32;
  var $i131: i1;
  var $i132: i32;
  var $p133: ref;
  var $i134: i32;
  var $i135: i1;
  var $p91: ref;
  var $i92: i32;
  var vslice_dummy_var_463: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i3, $i4, $i5 := 0, 0, 0;
    goto $bb1;

  $bb1:
    call $i3, $i4, $i5, $p6, $i7, $p8, $p9, $i10, $p11, $p12, $i13, $i14, $p24, $p25, $i26, $i27, $i33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $p30, $i31, $i32, $i51, $i52, $i28, $i29, $i53, $i54, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $i64, $i65, $p66, $i67, $i68, $i69, $i70, $i71, $p72, $i73, $i74, $p18, $i19, $i20, $i21, $i22, $i75, $i76, $i77, $i15, $i16, $i17, $i78, $i79, $i80, $i81, $i82, $i83 := be_tx_compl_clean_loop_$bb1($p0, $p1, $i3, $i4, $i5, $p6, $i7, $p8, $p9, $i10, $p11, $p12, $i13, $i14, $p24, $p25, $i26, $i27, $i33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $p30, $i31, $i32, $i51, $i52, $i28, $i29, $i53, $i54, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $i64, $i65, $p66, $i67, $i68, $i69, $i70, $i71, $p72, $i73, $i74, $p18, $i19, $i20, $i21, $i22, $i75, $i76, $i77, $i15, $i16, $i17, $i78, $i79, $i80, $i81, $i82, $i83);
    goto $bb1_last;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(4132, 1));
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    call {:si_unique_call 901} {:cexpr "pending_txqs"} boogie_si_record_i32($i7);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(4136, 1));
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64(0);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p9, $mul.ref($i10, 16528));
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(4132, 1));
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i14 := $ult.i32(0, $i13);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i15, $i16, $i17 := $i3, $i5, $i7;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i17, 0);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i78 == 1);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i79 := $zext.i16.i32($i4);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i80 := $add.i32($i79, 1);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i16($i80);
    call {:si_unique_call 918} {:cexpr "timeo"} boogie_si_record_i16($i81);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i81);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i83 := $ugt.i32($i82, 200);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb31, $bb32;

  $bb32:
    assume !(1 == 1);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i3, $i4, $i5 := $i15, $i81, $i16;
    goto $bb33_dummy;

  $bb31:
    assume 1 == 1;
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} __const_udelay(4295000);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb27:
    assume $i83 == 1;
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(4136, 1));
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64(0);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p85, $mul.ref($i86, 16528));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(4132, 1));
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i90 := $ult.i32(0, $i89);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    return;

  $bb37:
    assume $i90 == 1;
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $p91, $i92 := $p87, 0;
    goto $bb40;

  $bb40:
    call $p94, $i95, $i96, $p97, $i98, $p99, $p100, $p101, $p103, $i104, $i105, $p106, $i107, $i108, $i109, $p111, $p112, $p113, $i114, $i115, $i116, $i117, $i118, $i119, $p120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $p129, $i130, $i131, $i132, $p133, $i134, $i135, $p91, $i92, vslice_dummy_var_463 := be_tx_compl_clean_loop_$bb40($p0, $p1, $p2, $p88, $p94, $i95, $i96, $p97, $i98, $p99, $p100, $p101, $p103, $i104, $i105, $p106, $i107, $i108, $i109, $p111, $p112, $p113, $i114, $i115, $i116, $i117, $i118, $i119, $p120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $p129, $i130, $i131, $i132, $p133, $i134, $i135, $p91, $i92, vslice_dummy_var_463);
    goto $bb40_last;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p91, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(36, 1));
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $i95 := atomic_read($p94);
    call {:si_unique_call 922} {:cexpr "tmp___5"} boogie_si_record_i32($i95);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    $p103 := $add.ref($add.ref($add.ref($p91, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(36, 1));
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $i104 := atomic_read($p103);
    call {:si_unique_call 927} {:cexpr "tmp___7"} boogie_si_record_i32($i104);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 0);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i105 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i132 := $add.i32($i92, 1);
    call {:si_unique_call 937} {:cexpr "i"} boogie_si_record_i32($i132);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($p91, $mul.ref(1, 16528));
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p88);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i135 := $ult.i32($i132, $i134);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i135 == 1);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb53:
    assume $i135 == 1;
    assume {:verifier.code 0} true;
    $p91, $i92 := $p133, $i132;
    goto $bb53_dummy;

  $bb45:
    assume $i105 == 1;
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    call $p106, $i107, $i108, $i109, $p111, $p112, $p113, $i114, $i115, $i116, $i117, $i118, $i119, $p120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $p129, $i130, $i131 := be_tx_compl_clean_loop_$bb48($p0, $p1, $p2, $p103, $p106, $i107, $i108, $i109, $p111, $p112, $p113, $i114, $i115, $i116, $i117, $i118, $i119, $p120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $p129, $i130, $i131, $p91);
    goto $bb48_last;

  $bb49:
    $p106 := $add.ref($add.ref($add.ref($p91, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(30, 1));
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i107 := $load.i16($M.0, $p106);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i108 := $zext.i16.i32($i107);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i109 := $sext.i32.i64($i108);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p91, $mul.ref(0, 16528)), $mul.ref(88, 1)), $mul.ref($i109, 8));
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    $p113 := $add.ref($add.ref($add.ref($p91, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(30, 1));
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i114 := $load.i16($M.0, $p113);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $M.34 := $store.i16($M.34, $p1, $i114);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} $i115 := wrb_cnt_for_skb($p0, $p112, $p2);
    call {:si_unique_call 929} {:cexpr "tmp___6"} boogie_si_record_i32($i115);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i32.i16($i115);
    call {:si_unique_call 930} {:cexpr "num_wrbs"} boogie_si_record_i16($i116);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i117 := $zext.i16.i32($i116);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i118 := $add.i32($i117, 65535);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i32.i16($i118);
    $p120 := $add.ref($add.ref($add.ref($p91, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i121 := $load.i16($M.0, $p120);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i122 := $zext.i16.i32($i121);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i32.i16($i122);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} index_adv($p1, $i119, $i123);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i124 := $load.i16($M.34, $p1);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i125 := $zext.i16.i32($i124);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i126 := $trunc.i32.i16($i125);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} $i127 := be_tx_compl_process($p0, $p91, $i126);
    call {:si_unique_call 933} {:cexpr "num_wrbs"} boogie_si_record_i16($i127);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i128 := $zext.i16.i32($i127);
    $p129 := $add.ref($add.ref($add.ref($p91, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(36, 1));
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} atomic_sub($i128, $p129);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $i130 := atomic_read($p103);
    call {:si_unique_call 936} {:cexpr "tmp___7"} boogie_si_record_i32($i130);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i130, 0);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i131 == 1);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i131 == 1;
    goto $bb50_dummy;

  $bb42:
    assume $i96 == 1;
    $p97 := $add.ref($add.ref($add.ref($p91, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(36, 1));
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $i98 := atomic_read($p97);
    call {:si_unique_call 924} {:cexpr "tmp___4"} boogie_si_record_i32($i98);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} vslice_dummy_var_463 := dev_err.ref.ref.i32($p101, .str.102, $i98);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb24:
    assume $i78 == 1;
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb2:
    assume $i14 == 1;
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $p18, $i19, $i20, $i21, $i22 := $p11, $i7, $i5, $i3, 0;
    goto $bb5;

  $bb5:
    call $p24, $p25, $i26, $i27, $i33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $p30, $i31, $i32, $i51, $i52, $i28, $i29, $i53, $i54, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $i64, $i65, $p66, $i67, $i68, $i69, $i70, $i71, $p72, $i73, $i74, $p18, $i19, $i20, $i21, $i22, $i75, $i76, $i77 := be_tx_compl_clean_loop_$bb5($p0, $p1, $p12, $p24, $p25, $i26, $i27, $i33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $p30, $i31, $i32, $i51, $i52, $i28, $i29, $i53, $i54, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $i64, $i65, $p66, $i67, $i68, $i69, $i70, $i71, $p72, $i73, $i74, $p18, $i19, $i20, $i21, $i22, $i75, $i76, $i77);
    goto $bb5_last;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p18, $mul.ref(0, 16528)), $mul.ref(48, 1));
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $p25 := be_tx_compl_get($p24);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i28, $i29 := $i21, $i20;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i29);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i64, $i65 := $i28, $i29;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(36, 1));
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $i67 := atomic_read($p66);
    call {:si_unique_call 915} {:cexpr "tmp___2"} boogie_si_record_i32($i67);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 0);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i70 := $i19;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i22, 1);
    call {:si_unique_call 917} {:cexpr "i"} boogie_si_record_i32($i71);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p18, $mul.ref(1, 16528));
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p12);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i74 := $ult.i32($i71, $i73);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i75, $i76, $i77 := $i64, $i65, $i70;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i15, $i16, $i17 := $i75, $i76, $i77;
    goto $bb4;

  $bb21:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $p18, $i19, $i20, $i21, $i22 := $p72, $i70, $i65, $i64, $i71;
    goto $bb21_dummy;

  $bb18:
    assume $i68 == 1;
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i69 := $sub.i32($i19, 1);
    call {:si_unique_call 916} {:cexpr "pending_txqs"} boogie_si_record_i32($i69);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $i70 := $i69;
    goto $bb20;

  $bb15:
    assume $i54 == 1;
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 16528)), $mul.ref(48, 1)), $mul.ref(28, 1));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.0, $p56);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i16($i58);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i60 := $zext.i16.i32($i29);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i16($i60);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} be_cq_notify($p0, $i59, 0, $i61);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i28);
    $p63 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(36, 1));
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} atomic_sub($i62, $p63);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i64, $i65 := 0, 0;
    goto $bb17;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p30, $i31, $i32 := $p25, $i20, $i21;
    goto $bb10;

  $bb10:
    call $i33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $p30, $i31, $i32, $i51, $i52 := be_tx_compl_clean_loop_$bb10($p0, $p1, $p24, $i33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $p30, $i31, $i32, $i51, $i52, $p18);
    goto $bb10_last;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} $i33 := amap_mask(16);
    call {:si_unique_call 904} {:cexpr "tmp"} boogie_si_record_i32($i33);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p30);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} $i35 := amap_get($p34, 0, $i33, 0);
    call {:si_unique_call 906} {:cexpr "tmp___0"} boogie_si_record_i32($i35);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $M.34 := $store.i16($M.34, $p1, $i36);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.34, $p1);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i38);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $i40 := be_tx_compl_process($p0, $p18, $i39);
    call {:si_unique_call 908} {:cexpr "tmp___1"} boogie_si_record_i16($i40);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i32);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i41, $i42);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    call {:si_unique_call 909} {:cexpr "num_wrbs"} boogie_si_record_i16($i44);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i31);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i45, 1);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i16($i46);
    call {:si_unique_call 910} {:cexpr "cmpl"} boogie_si_record_i16($i47);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} $p48 := be_tx_compl_get($p24);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i51, $i52 := $i44, $i47;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i28, $i29 := $i51, $i52;
    goto $bb9;

  $bb12:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $p30, $i31, $i32 := $p48, $i47, $i44;
    goto $bb12_dummy;

  $bb50_dummy:
    assume false;
    return;

  $bb48_last:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb53_dummy:
    assume false;
    return;

  $bb40_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4476;

  $bb12_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4395;

  $bb21_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4385;

  $bb33_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4372;
}



const netif_tx_disable: ref;

axiom netif_tx_disable == $sub.ref(0, 431614);

procedure netif_tx_disable($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.60, $M.41, $M.21, $M.61, $M.62, $M.29, $M.30, $M.31, $M.2, $M.1, $M.34, $M.26, $CurrAddr, $M.25, $M.38, $M.35, assertsPassed, $M.47, $M.46, $M.48, $M.42, $M.40;



implementation netif_tx_disable($p0: ref)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i9: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} local_bh_disable();
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} __bad_size_call_parameter();
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $i9 := $u0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(824, 1));
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i32($i14, 0);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} local_bh_enable();
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume $i15 == 1;
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb26;

  $bb26:
    call $p17, $i18, $i19, $i20, $i16 := netif_tx_disable_loop_$bb26($p0, $i9, $p13, $p17, $i18, $i19, $i20, $i16);
    goto $bb26_last;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} $p17 := netdev_get_tx_queue($p0, $i16);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} __netif_tx_lock($p17, $i9);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} netif_tx_stop_queue($p17);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} __netif_tx_unlock($p17);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i16, 1);
    call {:si_unique_call 952} {:cexpr "i"} boogie_si_record_i32($i18);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p13);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i20 := $ugt.i32($i19, $i18);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i20 == 1);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb28:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i16 := $i18;
    goto $bb28_dummy;

  $bb6:
    assume $i3 == 1;
    call {:si_unique_call 939} $i12 := devirtbounce.6(0, cpu_number);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    call {:si_unique_call 940} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i12);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i9 := $i12;
    goto $bb18;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i4 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb8;

  $bb9:
    assume $i4 == 1;
    call {:si_unique_call 941} $i11 := devirtbounce.6(0, cpu_number);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    call {:si_unique_call 942} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i11);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb18;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb13:
    assume $i6 == 1;
    call {:si_unique_call 943} $i10 := devirtbounce.6(0, cpu_number);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    call {:si_unique_call 944} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i10);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb18;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb15:
    assume $i7 == 1;
    call {:si_unique_call 945} $i8 := devirtbounce.6(0, cpu_number);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    call {:si_unique_call 946} {:cexpr "pfo_ret__"} boogie_si_record_i32($i8);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb18;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb28_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4549;
}



const be_rx_qs_destroy: ref;

axiom be_rx_qs_destroy == $sub.ref(0, 432646);

procedure be_rx_qs_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_rx_qs_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i1;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i8: i32;
  var $p9: ref;
  var vslice_dummy_var_464: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136368, 1));
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64(0);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p2, $mul.ref($i3, 24760));
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i7 := $ult.i32(0, $i6);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i8, $p9 := 0, $p4;
    goto $bb4;

  $bb4:
    call $p10, $p11, $i12, $i13, $i15, $p16, $i17, $i18, $i8, $p9, vslice_dummy_var_464 := be_rx_qs_destroy_loop_$bb4($p0, $p5, $p10, $p11, $i12, $i13, $i15, $p16, $i17, $i18, $i8, $p9, vslice_dummy_var_464);
    goto $bb4_last;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 24760)), $mul.ref(8, 1));
    $p11 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 24760)), $mul.ref(8, 1)), $mul.ref(34, 1));
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} be_queue_free($p0, $p10);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i8, 1);
    call {:si_unique_call 957} {:cexpr "i"} boogie_si_record_i32($i15);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p9, $mul.ref(1, 24760));
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p5);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $i18 := $ult.i32($i15, $i17);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i8, $p9 := $i15, $p16;
    goto $bb9_dummy;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} vslice_dummy_var_464 := be_cmd_rxq_destroy($p0, $p10);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} be_rx_cq_clean($p9);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4574;
}



const be_msix_vec_get: ref;

axiom be_msix_vec_get == $sub.ref(0, 433678);

procedure be_msix_vec_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation be_msix_vec_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i64;
  var $p8: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 272)), $mul.ref(92, 1));
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(4024, 1)), $mul.ref($i5, 8)), $mul.ref(0, 1));
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const synchronize_irq: ref;

axiom synchronize_irq == $sub.ref(0, 434710);

procedure synchronize_irq($i0: i32);
  free requires assertsPassed;



implementation synchronize_irq($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} {:cexpr "synchronize_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    return;
}



const be_eq_clean: ref;

axiom be_eq_clean == $sub.ref(0, 435742);

procedure be_eq_clean($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_eq_clean($p0: ref)
{
  var $i1: i32;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i16;
  var $i9: i16;
  var $i10: i32;
  var $i11: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $i1 := events_get($p0);
    call {:si_unique_call 960} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(264, 1));
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(28, 1));
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i1);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} be_eq_notify($p3, $i8, 0, 1, $i11);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    return;
}



const be_irq_unregister: ref;

axiom be_irq_unregister == $sub.ref(0, 436774);

procedure be_irq_unregister($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_irq_unregister($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i20: i32;
  var $p21: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(4128, 1));
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(480, 1));
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(488, 1));
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64(0);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p14, $mul.ref($i15, 272));
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(484, 1));
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i19 := $ult.i32(0, $i18);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(4128, 1));
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, 0);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i19 == 1;
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i20, $p21 := 0, $p16;
    goto $bb12;

  $bb12:
    call $i22, $p23, $i24, $p25, $i26, $i27, $i20, $p21 := be_irq_unregister_loop_$bb12($p0, $p17, $i22, $p23, $i24, $p25, $i26, $i27, $i20, $p21);
    goto $bb12_last;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} $i22 := be_msix_vec_get($p0, $p21);
    call {:si_unique_call 964} {:cexpr "tmp"} boogie_si_record_i32($i22);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p21);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} free_irq($i22, $p23);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i20, 1);
    call {:si_unique_call 966} {:cexpr "i"} boogie_si_record_i32($i24);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p21, $mul.ref(1, 272));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p17);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $i27 := $ult.i32($i24, $i26);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i27 == 1);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i20, $p21 := $i24, $p25;
    goto $bb14_dummy;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 2784)), $mul.ref(64, 1));
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(488, 1));
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} free_irq($i10, $p12);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb14_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4648;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 437806);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    return;
}



const events_get: ref;

axiom events_get == $sub.ref(0, 438838);

procedure events_get($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation events_get($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i10: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} $p2 := queue_tail_node($p1);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $p8, $i9 := $p2, 0;
    goto $bb4;

  $bb4:
    call $i10, $p8, $i9, $p11, $i12, $p13, $p14, $p15, $p16, $i17, $i18 := events_get_loop_$bb4($p0, $p1, $i10, $p8, $i9, $p11, $i12, $p13, $p14, $p15, $p16, $i17, $i18);
    goto $bb4_last;

  $bb7:
    call {:si_unique_call 969} devirtbounce.4(0);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 0);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i9, 1);
    call {:si_unique_call 970} {:cexpr "num"} boogie_si_record_i32($i12);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} queue_tail_inc($p13);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $p14 := queue_tail_node($p1);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i10 := $i12;
    assume true;
    goto $bb5, $bb8;

  $bb8:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $p8, $i9 := $p14, $i12;
    goto $bb8_dummy;

  $bb5:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i7 := $i10;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const queue_tail_inc: ref;

axiom queue_tail_inc == $sub.ref(0, 439870);

procedure queue_tail_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation queue_tail_inc($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(30, 1));
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} index_inc($p1, $i5);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    return;
}



const index_inc: ref;

axiom index_inc == $sub.ref(0, 440902);

procedure index_inc($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation index_inc($p0: ref, $i1: i16)
{
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $i5: i16;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} {:cexpr "index_inc:arg:limit"} boogie_si_record_i16($i1);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p0);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i1);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} $i8 := MODULO($i5, $i7);
    call {:si_unique_call 976} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p0, $i9);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    return;
}



const MODULO: ref;

axiom MODULO == $sub.ref(0, 441934);

procedure MODULO($i0: i16, $i1: i16) returns ($r: i32);
  free requires assertsPassed;



implementation MODULO($i0: i16, $i1: i16) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} {:cexpr "MODULO:arg:val"} boogie_si_record_i16($i0);
    call {:si_unique_call 978} {:cexpr "MODULO:arg:limit"} boogie_si_record_i16($i1);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i1);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $sub.i32(0, 1));
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i2, $i4);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 980} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i0);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i1);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, $sub.i32(0, 1));
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i11, $i13);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i10 == 1;
    call {:si_unique_call 981} devirtbounce.2(0, .str.23, 136, 12);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call MODULO_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const be_cmd_rxq_destroy: ref;

axiom be_cmd_rxq_destroy == $sub.ref(0, 442966);

procedure be_cmd_rxq_destroy($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_rxq_destroy($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i16;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i6: i32;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} spin_lock_bh($p2);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $p3 := wrb_from_mccq($p0);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} $p7 := embedded_payload($p3);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} be_wrb_cmd_hdr_prepare($p9, 3, 10, 20, $p3, $0.ref);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, $i11);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} $i13 := be_mcc_notify_wait($p0);
    call {:si_unique_call 988} {:cexpr "status"} boogie_si_record_i32($i13);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(34, 1));
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, 0);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i6 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} spin_unlock_bh($p15);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 16);
    goto $bb3;
}



const be_rx_cq_clean: ref;

axiom be_rx_cq_clean == $sub.ref(0, 443998);

procedure be_rx_cq_clean($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.21;



implementation be_rx_cq_clean($p0: ref)
{
  var $p1: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i28: i1;
  var $i29: i8;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i16;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $i43: i16;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $i39: i32;
  var $p48: ref;
  var $i49: i16;
  var $i50: i32;
  var $i51: i16;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $i55: i16;
  var $i56: i32;
  var $p57: ref;
  var $i58: i16;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $i63: i16;
  var $i64: i32;
  var $i65: i32;
  var $i66: i16;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $i70: i16;
  var $i71: i32;
  var $i72: i16;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i16;
  var $i79: i32;
  var $i80: i16;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i64;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var cmdloc_dummy_var_258: [ref]i8;
  var cmdloc_dummy_var_259: [ref]i8;
  var vslice_dummy_var_465: i32;
  var vslice_dummy_var_466: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(0, 1));
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb1;

  $bb1:
    call $i6, $p7, $i8, $i9, $p10, $p11, $p12, $i13, $i14, $i15, $p16, $p17, $p18, $i19, $i20, $i21, $i22, $i23, $i28, $i29, $i30, $p35, $i36, $i37, $i38, $p40, $i41, $i42, $i43, $p44, $i45, $i46, $i47, $i39 := be_rx_cq_clean_loop_$bb1($p0, $p5, $i6, $p7, $i8, $i9, $p10, $p11, $p12, $i13, $i14, $i15, $p16, $p17, $p18, $i19, $i20, $i21, $i22, $i23, $i28, $i29, $i30, $p35, $i36, $i37, $i38, $p40, $i41, $i42, $i43, $p44, $i45, $i46, $i47, $i39);
    goto $bb1_last;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $p7 := be_rx_compl_get($p0);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} be_rx_compl_discard($p0, $p7);
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(48, 1)), $mul.ref(28, 1));
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i16($i42);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} be_cq_notify($p5, $i43, 0, 1);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(13, 1));
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i39 := $i6;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i6 := $i39;
    goto corral_source_split_4839_dummy;

  $bb24:
    assume $i47 == 1;
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(48, 1)), $mul.ref(28, 1));
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.0, $p48);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i49);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i16($i50);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} be_cq_notify($p5, $i51, 0, 0);
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(8, 1)), $mul.ref(36, 1));
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $i53 := atomic_read($p52);
    call {:si_unique_call 995} {:cexpr "tmp___2"} boogie_si_record_i32($i53);
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(8, 1)), $mul.ref(32, 1));
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.0, $p54);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i55);
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $i58 := $load.i16($M.0, $p57);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i58);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i56, $i59);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32($i60, $i53);
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $i63 := $load.i16($M.0, $p62);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i63);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $i65 := $srem.i32($i61, $i64);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i16($i65);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p1, $i66);
    $p67 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(8, 1)), $mul.ref(36, 1));
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} $i68 := atomic_read($p67);
    call {:si_unique_call 997} {:cexpr "tmp___3"} boogie_si_record_i32($i68);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i69 := $sgt.i32($i68, 0);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    $p83 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(8, 1)), $mul.ref(36, 1));
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} $i84 := atomic_read($p83);
    call {:si_unique_call 1013} {:cexpr "tmp___4"} boogie_si_record_i32($i84);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i86 := $zext.i1.i32($i85);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i86);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} $i88 := ldv__builtin_expect($i87, 0);
    call {:si_unique_call 1015} {:cexpr "tmp___5"} boogie_si_record_i64($i88);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    $p90 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(8, 1)), $mul.ref(32, 1));
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p90, 0);
    $p91 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(8, 1)), $mul.ref(30, 1));
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p91, 0);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    return;

  $bb35:
    assume $i89 == 1;
    call {:si_unique_call 1016} devirtbounce.2(0, .str, 1886, 12);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    call be_rx_cq_clean_loop_$bb37();
    goto $bb37_last;

  $bb27:
    assume $i69 == 1;
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    call $i70, $i71, $i72, $p73, $p74, $p75, $p76, $p77, $i78, $i79, $i80, $i81, $i82, cmdloc_dummy_var_258, cmdloc_dummy_var_259 := be_rx_cq_clean_loop_$bb30($p0, $p1, $p67, $i70, $i71, $i72, $p73, $p74, $p75, $p76, $p77, $i78, $i79, $i80, $i81, $i82, cmdloc_dummy_var_258, cmdloc_dummy_var_259);
    goto $bb30_last;

  $bb31:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.0, $p1);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i16($i71);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} $p73 := get_rx_page_info($p0, $i72);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} put_page($p75);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p73);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_258 := $M.0;
    call {:si_unique_call 1008} cmdloc_dummy_var_259 := $memset.i8(cmdloc_dummy_var_258, $p76, 0, 24, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_259;
    $p77 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i78 := $load.i16($M.0, $p77);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i79 := $zext.i16.i32($i78);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i32.i16($i79);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} index_inc($p1, $i80);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} $i81 := atomic_read($p67);
    call {:si_unique_call 1011} {:cexpr "tmp___3"} boogie_si_record_i32($i81);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $i82 := $sgt.i32($i81, 0);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i82 == 1);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb32_dummy;

  $bb2:
    assume $i9 == 1;
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 57888);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 57896);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i6, 1);
    call {:si_unique_call 998} {:cexpr "flush_wait"} boogie_si_record_i32($i22);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i23 := $sgt.i32($i6, 10);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} $i28 := be_hw_error($p5);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i8($i28);
    call {:si_unique_call 1001} {:cexpr "tmp___0"} boogie_si_record_i8($i29);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1($i29);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(48, 1)), $mul.ref(28, 1));
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.0, $p35);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} be_cq_notify($p5, $i38, 1, 0);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb17, $bb18;

  $bb18:
    assume !(1 == 1);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i39 := $i22;
    goto $bb23;

  $bb17:
    assume 1 == 1;
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} __const_udelay(4295000);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} vslice_dummy_var_466 := dev_warn.ref.ref($p33, .str.104);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} vslice_dummy_var_465 := dev_warn.ref.ref($p26, .str.104);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb5;

  $bb37_dummy:
    assume false;
    return;

  $bb37_last:
    assume {:verifier.code 0} true;
    goto $bb37_dummy;

  $bb32_dummy:
    assume false;
    return;

  $bb30_last:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_4839_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4756;
}



const be_queue_free: ref;

axiom be_queue_free == $sub.ref(0, 445030);

procedure be_queue_free($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_queue_free($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2696)), $mul.ref(152, 1));
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} dma_free_attrs($p9, $i12, $p14, $i16, $0.ref);
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $0.ref);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const be_rx_compl_get: ref;

axiom be_rx_compl_get == $sub.ref(0, 446062);

procedure be_rx_compl_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_rx_compl_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i16;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $i44: i16;
  var $i45: i16;
  var $p46: ref;
  var $p47: ref;
  var $i48: i16;
  var $i49: i32;
  var $p50: ref;
  var $i51: i16;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i16;
  var $i57: i32;
  var $i58: i64;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(48, 1));
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} $p2 := queue_tail_node($p1);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(88, 1));
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(0, 1));
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(2, 4));
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 1019} devirtbounce.4(0);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} swap_dws($p12, 16);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 364320)), $mul.ref(364224, 1));
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} be_parse_rx_compl_v0($p3, $p4);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(88, 1)), $mul.ref(12, 1));
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(2, 4));
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, 0);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(48, 1));
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} queue_tail_inc($p67);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $p11 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 364320)), $mul.ref(364024, 1));
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 1024);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.0, $p31);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 57888);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p6, $mul.ref(0, 364320)), $mul.ref(364234, 1));
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.0, $p47);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(88, 1)), $mul.ref(4, 1));
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.0, $p50);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 4095);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i49, $i53);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb22:
    assume $i54 == 1;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(88, 1)), $mul.ref(4, 1));
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i56 := $load.i16($M.0, $p55);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i57);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 364320)), $mul.ref(359346, 1)), $mul.ref($i58, 1));
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 0);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb24;

  $bb25:
    assume $i63 == 1;
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(88, 1)), $mul.ref(12, 1));
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, 0);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb16:
    assume $i34 == 1;
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 57896);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb18;

  $bb19:
    assume $i40 == 1;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(88, 1)), $mul.ref(4, 1));
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p41);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} $i45 := __fswab16($i44);
    call {:si_unique_call 1024} {:cexpr "tmp___0"} boogie_si_record_i16($i45);
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(88, 1)), $mul.ref(4, 1));
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p46, $i45);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb10:
    assume $i23 == 1;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(88, 1)), $mul.ref(21, 1));
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb12;

  $bb13:
    assume $i27 == 1;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(88, 1)), $mul.ref(12, 1));
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, 0);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} be_parse_rx_compl_v1($p3, $p4);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb3;
}



const be_rx_compl_discard: ref;

axiom be_rx_compl_discard == $sub.ref(0, 447094);

procedure be_rx_compl_discard($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_rx_compl_discard($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i16;
  var $i22: i32;
  var $i23: i32;
  var $i24: i16;
  var $i25: i32;
  var $i26: i1;
  var $i8: i16;
  var cmdloc_dummy_var_260: [ref]i8;
  var cmdloc_dummy_var_261: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(13, 1));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i16($i4);
    call {:si_unique_call 1026} {:cexpr "num_rcvd"} boogie_si_record_i16($i5);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32(0, $i6);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb4;

  $bb4:
    call $p9, $i10, $i11, $i12, $p13, $p14, $p15, $p16, $p17, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i8, cmdloc_dummy_var_260, cmdloc_dummy_var_261 := be_rx_compl_discard_loop_$bb4($p0, $p1, $i6, $p9, $i10, $i11, $i12, $p13, $p14, $p15, $p16, $p17, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i8, cmdloc_dummy_var_260, cmdloc_dummy_var_261);
    goto $bb4_last;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} $p13 := get_rx_page_info($p0, $i12);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} put_page($p15);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p13);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_260 := $M.0;
    call {:si_unique_call 1029} cmdloc_dummy_var_261 := $memset.i8(cmdloc_dummy_var_260, $p16, 0, 24, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_261;
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i16($i20);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} index_inc($p17, $i21);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i8);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, 1);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    call {:si_unique_call 1031} {:cexpr "i"} boogie_si_record_i16($i24);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, $i6);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i24;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4997;
}



const get_rx_page_info: ref;

axiom get_rx_page_info == $sub.ref(0, 448126);

procedure get_rx_page_info($p0: ref, $i1: i16) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation get_rx_page_info($p0: ref, $i1: i16) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} {:cexpr "get_rx_page_info:arg:frag_idx"} boogie_si_record_i16($i1);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(0, 1));
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(112, 1));
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i64($i1);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p6, $mul.ref($i7, 24));
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref($i7, 24)), $mul.ref(0, 1));
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 1034} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref($i7, 24)), $mul.ref(18, 1));
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(8, 1)), $mul.ref(36, 1));
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} atomic_dec($p29);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref($i7, 24)), $mul.ref(8, 1));
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(359208, 1));
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} dma_unmap_page($p22, $i24, $i27, 2);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref($i7, 24)), $mul.ref(18, 1));
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, 0);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i16 == 1;
    call {:si_unique_call 1035} devirtbounce.2(0, .str, 1392, 12);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call get_rx_page_info_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const put_page: ref;

axiom put_page == $sub.ref(0, 449158);

procedure put_page($p0: ref);
  free requires assertsPassed;



implementation put_page($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    return;
}



const dma_unmap_page: ref;

axiom dma_unmap_page == $sub.ref(0, 450190);

procedure dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} {:cexpr "dma_unmap_page:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 1039} {:cexpr "dma_unmap_page:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 1040} {:cexpr "dma_unmap_page:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $p4 := get_dma_ops($p0);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $i5 := valid_dma_direction($i3);
    call {:si_unique_call 1043} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1045} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} debug_dma_unmap_page($p0, $i1, $i2, $i3, 0);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 1047} devirtbounce.7($p16, $p0, $i1, $i2, $i3, $0.ref);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    call {:si_unique_call 1046} devirtbounce.2(0, .str.22, 91, 12);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_unmap_page_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 451222);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 1);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 2);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const debug_dma_unmap_page: ref;

axiom debug_dma_unmap_page == $sub.ref(0, 452254);

procedure debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1);
  free requires assertsPassed;



implementation debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} {:cexpr "debug_dma_unmap_page:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1051} {:cexpr "debug_dma_unmap_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1052} {:cexpr "debug_dma_unmap_page:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1053} {:cexpr "debug_dma_unmap_page:arg:arg4"} boogie_si_record_i1($i4);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    return;
}



const be_parse_rx_compl_v1: ref;

axiom be_parse_rx_compl_v1 == $sub.ref(0, 453286);

procedure be_parse_rx_compl_v1($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_parse_rx_compl_v1($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i16;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i8;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i8;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i8;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i8;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i8;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i16;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $i49: i32;
  var $i50: i8;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i8;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $p66: ref;
  var $i67: i32;
  var $i68: i8;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $i72: i32;
  var $i73: i16;
  var $p74: ref;
  var $i75: i32;
  var $p76: ref;
  var $i77: i32;
  var $i78: i16;
  var $p79: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} $i2 := amap_mask(14);
    call {:si_unique_call 1055} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $i4 := amap_get($p3, 0, $i2, 16);
    call {:si_unique_call 1057} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(6, 1));
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, $i5);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $i7 := amap_mask(1);
    call {:si_unique_call 1059} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} $i9 := amap_get($p8, 0, $i7, 30);
    call {:si_unique_call 1061} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i10);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $i12 := amap_mask(1);
    call {:si_unique_call 1063} {:cexpr "tmp___3"} boogie_si_record_i32($i12);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p0);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} $i14 := amap_get($p13, 1, $i12, 0);
    call {:si_unique_call 1065} {:cexpr "tmp___4"} boogie_si_record_i32($i14);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i15);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $i17 := amap_mask(1);
    call {:si_unique_call 1067} {:cexpr "tmp___5"} boogie_si_record_i32($i17);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p0);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} $i19 := amap_get($p18, 1, $i17, 3);
    call {:si_unique_call 1069} {:cexpr "tmp___6"} boogie_si_record_i32($i19);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, $i20);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} $i22 := amap_mask(1);
    call {:si_unique_call 1071} {:cexpr "tmp___7"} boogie_si_record_i32($i22);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p0);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} $i24 := amap_get($p23, 1, $i22, 4);
    call {:si_unique_call 1073} {:cexpr "tmp___8"} boogie_si_record_i32($i24);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(17, 1));
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, $i25);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $i27 := amap_mask(1);
    call {:si_unique_call 1075} {:cexpr "tmp___9"} boogie_si_record_i32($i27);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p0);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} $i29 := amap_get($p28, 1, $i27, 5);
    call {:si_unique_call 1077} {:cexpr "tmp___10"} boogie_si_record_i32($i29);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, $i30);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $i32 := amap_mask(1);
    call {:si_unique_call 1079} {:cexpr "tmp___11"} boogie_si_record_i32($i32);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p0);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} $i34 := amap_get($p33, 1, $i32, 6);
    call {:si_unique_call 1081} {:cexpr "tmp___12"} boogie_si_record_i32($i34);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(19, 1));
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i35);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} $i37 := amap_mask(1);
    call {:si_unique_call 1083} {:cexpr "tmp___13"} boogie_si_record_i32($i37);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p0);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $i39 := amap_get($p38, 1, $i37, 7);
    call {:si_unique_call 1085} {:cexpr "tmp___14"} boogie_si_record_i32($i39);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, $i40);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $i42 := amap_mask(10);
    call {:si_unique_call 1087} {:cexpr "tmp___15"} boogie_si_record_i32($i42);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p0);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} $i44 := amap_get($p43, 1, $i42, 16);
    call {:si_unique_call 1089} {:cexpr "tmp___16"} boogie_si_record_i32($i44);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i44);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p46, $i45);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} $i47 := amap_mask(3);
    call {:si_unique_call 1091} {:cexpr "tmp___17"} boogie_si_record_i32($i47);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p0);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} $i49 := amap_get($p48, 1, $i47, 29);
    call {:si_unique_call 1093} {:cexpr "tmp___18"} boogie_si_record_i32($i49);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(13, 1));
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, $i50);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} $i52 := amap_mask(2);
    call {:si_unique_call 1095} {:cexpr "tmp___19"} boogie_si_record_i32($i52);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p0);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} $i54 := amap_get($p53, 2, $i52, 1);
    call {:si_unique_call 1097} {:cexpr "tmp___20"} boogie_si_record_i32($i54);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i8($i54);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(22, 1));
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, $i55);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} $i57 := amap_mask(32);
    call {:si_unique_call 1099} {:cexpr "tmp___21"} boogie_si_record_i32($i57);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p0);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} $i59 := amap_get($p58, 3, $i57, 0);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} $i75 := amap_mask(2);
    call {:si_unique_call 1110} {:cexpr "tmp___26"} boogie_si_record_i32($i75);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p0);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} $i77 := amap_get($p76, 2, $i75, 5);
    call {:si_unique_call 1112} {:cexpr "tmp___27"} boogie_si_record_i32($i77);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i16($i77);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(10, 1));
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p79, $i78);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i64 == 1;
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} $i65 := amap_mask(1);
    call {:si_unique_call 1102} {:cexpr "tmp___22"} boogie_si_record_i32($i65);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p0);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} $i67 := amap_get($p66, 2, $i65, 3);
    call {:si_unique_call 1104} {:cexpr "tmp___23"} boogie_si_record_i32($i67);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i67);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(21, 1));
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p69, $i68);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} $i70 := amap_mask(16);
    call {:si_unique_call 1106} {:cexpr "tmp___24"} boogie_si_record_i32($i70);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p0);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} $i72 := amap_get($p71, 0, $i70, 0);
    call {:si_unique_call 1108} {:cexpr "tmp___25"} boogie_si_record_i32($i72);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i32.i16($i72);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p74, $i73);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const be_parse_rx_compl_v0: ref;

axiom be_parse_rx_compl_v0 == $sub.ref(0, 454318);

procedure be_parse_rx_compl_v0($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_parse_rx_compl_v0($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i16;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i8;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i8;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i8;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i8;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i8;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i16;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $i49: i32;
  var $i50: i8;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i8;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $p66: ref;
  var $i67: i32;
  var $i68: i8;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $i72: i32;
  var $i73: i16;
  var $p74: ref;
  var $i75: i32;
  var $p76: ref;
  var $i77: i32;
  var $i78: i16;
  var $p79: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} $i2 := amap_mask(14);
    call {:si_unique_call 1114} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} $i4 := amap_get($p3, 0, $i2, 16);
    call {:si_unique_call 1116} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(6, 1));
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, $i5);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} $i7 := amap_mask(1);
    call {:si_unique_call 1118} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $i9 := amap_get($p8, 1, $i7, 14);
    call {:si_unique_call 1120} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i10);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} $i12 := amap_mask(1);
    call {:si_unique_call 1122} {:cexpr "tmp___3"} boogie_si_record_i32($i12);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p0);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} $i14 := amap_get($p13, 1, $i12, 0);
    call {:si_unique_call 1124} {:cexpr "tmp___4"} boogie_si_record_i32($i14);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i15);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} $i17 := amap_mask(1);
    call {:si_unique_call 1126} {:cexpr "tmp___5"} boogie_si_record_i32($i17);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p0);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} $i19 := amap_get($p18, 1, $i17, 3);
    call {:si_unique_call 1128} {:cexpr "tmp___6"} boogie_si_record_i32($i19);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, $i20);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} $i22 := amap_mask(1);
    call {:si_unique_call 1130} {:cexpr "tmp___7"} boogie_si_record_i32($i22);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p0);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $i24 := amap_get($p23, 1, $i22, 4);
    call {:si_unique_call 1132} {:cexpr "tmp___8"} boogie_si_record_i32($i24);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(17, 1));
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, $i25);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} $i27 := amap_mask(1);
    call {:si_unique_call 1134} {:cexpr "tmp___9"} boogie_si_record_i32($i27);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p0);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $i29 := amap_get($p28, 1, $i27, 5);
    call {:si_unique_call 1136} {:cexpr "tmp___10"} boogie_si_record_i32($i29);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, $i30);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $i32 := amap_mask(1);
    call {:si_unique_call 1138} {:cexpr "tmp___11"} boogie_si_record_i32($i32);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p0);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} $i34 := amap_get($p33, 1, $i32, 6);
    call {:si_unique_call 1140} {:cexpr "tmp___12"} boogie_si_record_i32($i34);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(19, 1));
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i35);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} $i37 := amap_mask(1);
    call {:si_unique_call 1142} {:cexpr "tmp___13"} boogie_si_record_i32($i37);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p0);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} $i39 := amap_get($p38, 1, $i37, 7);
    call {:si_unique_call 1144} {:cexpr "tmp___14"} boogie_si_record_i32($i39);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, $i40);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} $i42 := amap_mask(10);
    call {:si_unique_call 1146} {:cexpr "tmp___15"} boogie_si_record_i32($i42);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p0);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} $i44 := amap_get($p43, 1, $i42, 16);
    call {:si_unique_call 1148} {:cexpr "tmp___16"} boogie_si_record_i32($i44);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i44);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p46, $i45);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} $i47 := amap_mask(3);
    call {:si_unique_call 1150} {:cexpr "tmp___17"} boogie_si_record_i32($i47);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p0);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} $i49 := amap_get($p48, 1, $i47, 29);
    call {:si_unique_call 1152} {:cexpr "tmp___18"} boogie_si_record_i32($i49);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(13, 1));
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, $i50);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} $i52 := amap_mask(2);
    call {:si_unique_call 1154} {:cexpr "tmp___19"} boogie_si_record_i32($i52);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p0);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} $i54 := amap_get($p53, 2, $i52, 1);
    call {:si_unique_call 1156} {:cexpr "tmp___20"} boogie_si_record_i32($i54);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i8($i54);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(22, 1));
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, $i55);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} $i57 := amap_mask(32);
    call {:si_unique_call 1158} {:cexpr "tmp___21"} boogie_si_record_i32($i57);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p0);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} $i59 := amap_get($p58, 3, $i57, 0);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} $i75 := amap_mask(1);
    call {:si_unique_call 1169} {:cexpr "tmp___26"} boogie_si_record_i32($i75);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p0);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} $i77 := amap_get($p76, 0, $i75, 30);
    call {:si_unique_call 1171} {:cexpr "tmp___27"} boogie_si_record_i32($i77);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i16($i77);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(10, 1));
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p79, $i78);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i64 == 1;
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} $i65 := amap_mask(1);
    call {:si_unique_call 1161} {:cexpr "tmp___22"} boogie_si_record_i32($i65);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p0);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} $i67 := amap_get($p66, 2, $i65, 3);
    call {:si_unique_call 1163} {:cexpr "tmp___23"} boogie_si_record_i32($i67);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i67);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(21, 1));
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p69, $i68);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} $i70 := amap_mask(16);
    call {:si_unique_call 1165} {:cexpr "tmp___24"} boogie_si_record_i32($i70);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p0);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} $i72 := amap_get($p71, 0, $i70, 0);
    call {:si_unique_call 1167} {:cexpr "tmp___25"} boogie_si_record_i32($i72);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i32.i16($i72);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p74, $i73);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __fswab16: ref;

axiom __fswab16 == $sub.ref(0, 455350);

procedure __fswab16($i0: i16) returns ($r: i16);
  free requires assertsPassed;



implementation __fswab16($i0: i16) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} {:cexpr "__fswab16:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $i2 := $shl.i32($i1, 8);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i4 := $sext.i16.i32($i3);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i0);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i6 := $ashr.i32($i5, 8);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i32($i7);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i4, $i8);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const amap_get: ref;

axiom amap_get == $sub.ref(0, 456382);

procedure amap_get($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation amap_get($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} {:cexpr "amap_get:arg:dw_offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 1174} {:cexpr "amap_get:arg:mask"} boogie_si_record_i32($i2);
    call {:si_unique_call 1175} {:cexpr "amap_get:arg:offset"} boogie_si_record_i32($i3);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i1);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 4));
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i32($i7, $i3);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, $i2);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const __bad_size_call_parameter: ref;

axiom __bad_size_call_parameter == $sub.ref(0, 457414);

procedure __bad_size_call_parameter();



const netdev_get_tx_queue: ref;

axiom netdev_get_tx_queue == $sub.ref(0, 458446);

procedure netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} {:cexpr "netdev_get_tx_queue:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(816, 1));
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 264));
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const __netif_tx_lock: ref;

axiom __netif_tx_lock == $sub.ref(0, 459478);

procedure __netif_tx_lock($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __netif_tx_lock($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} {:cexpr "__netif_tx_lock:arg:cpu"} boogie_si_record_i32($i1);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(96, 1));
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} spin_lock($p2);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(168, 1));
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i1);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_stop_queue: ref;

axiom netif_tx_stop_queue == $sub.ref(0, 460510);

procedure netif_tx_stop_queue($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation netif_tx_stop_queue($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var vslice_dummy_var_467: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 1179} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i3);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 1181} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i3, 0);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 1184} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(192, 1));
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} set_bit(0, $p15);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} vslice_dummy_var_467 := printk.ref(.str.103);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} warn_slowpath_null(.str.101, 1907);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __netif_tx_unlock: ref;

axiom __netif_tx_unlock == $sub.ref(0, 461542);

procedure __netif_tx_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __netif_tx_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(168, 1));
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $sub.i32(0, 1));
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(96, 1));
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} spin_unlock($p2);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 462574);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1188} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1189} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 463606);

procedure set_bit($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation set_bit($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} {:cexpr "set_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 1191} devirtbounce.8(0, $p1, $i0, $p1);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    return;
}



const be_tx_compl_process: ref;

axiom be_tx_compl_process == $sub.ref(0, 464638);

procedure be_tx_compl_process($p0: ref, $p1: ref, $i2: i16) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation be_tx_compl_process($p0: ref, $p1: ref, $i2: i16) returns ($r: i16)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i16;
  var $i19: i64;
  var $p20: ref;
  var $i21: i16;
  var $i22: i8;
  var $p23: ref;
  var $i24: i16;
  var $p25: ref;
  var $p26: ref;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i16;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} {:cexpr "be_tx_compl_process:arg:last_index"} boogie_si_record_i16($i2);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16528)), $mul.ref(8, 1));
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16528)), $mul.ref(88, 1));
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(30, 1));
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i64($i7);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p5, $mul.ref($i8, 8));
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 1194} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(30, 1));
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i64($i18);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p5, $mul.ref($i19, 8));
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $0.ref);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} queue_tail_inc($p3);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $i21, $i22 := 1, 1;
    goto $bb5;

  $bb5:
    call $i21, $i22, $p23, $i24, $p25, $p26, $i27, $i28, $i29, $i30, $i31, $p32, $p33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42 := be_tx_compl_process_loop_$bb5($p0, $p1, $i2, $p3, $p10, $i21, $i22, $p23, $i24, $p25, $p26, $i27, $i28, $i29, $i30, $i31, $p32, $p33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42);
    goto $bb5_last;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    call {:si_unique_call 1197} {:cexpr "cur_index"} boogie_si_record_i16($i24);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} $p25 := queue_tail_node($p3);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i22);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i31, 0);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} unmap_tx_frag($p34, $p26, $i35);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i21);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i36, 1);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    call {:si_unique_call 1202} {:cexpr "num_wrbs"} boogie_si_record_i16($i38);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} queue_tail_inc($p3);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i24);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i2);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i39, $i40);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $i42 := $i38;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} kfree_skb($p10);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  $bb12:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i21, $i22 := $i38, 0;
    goto $bb12_dummy;

  $bb6:
    assume $i27 == 1;
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} $i28 := skb_headlen($p10);
    call {:si_unique_call 1200} {:cexpr "tmp___1"} boogie_si_record_i32($i28);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb11;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i30 := 1;
    goto $bb10;

  $bb1:
    assume $i16 == 1;
    call {:si_unique_call 1195} devirtbounce.2(0, .str, 1790, 12);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call be_tx_compl_process_loop_$bb3();
    goto $bb3_last;

  $bb12_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(30, 1));
    goto corral_source_split_5387;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const be_tx_compl_get: ref;

axiom be_tx_compl_get == $sub.ref(0, 465670);

procedure be_tx_compl_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_tx_compl_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p10: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} $p1 := queue_tail_node($p0);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(3, 4));
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 1206} devirtbounce.4(0);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} swap_dws($p8, 16);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(3, 4));
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} queue_tail_inc($p0);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $p7 := $p1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;
}



const atomic_sub: ref;

axiom atomic_sub == $sub.ref(0, 466702);

procedure atomic_sub($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_sub($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} {:cexpr "atomic_sub:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 1210} devirtbounce.9(0, $p2, $i0, $p2);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    return;
}



const wrb_cnt_for_skb: ref;

axiom wrb_cnt_for_skb == $sub.ref(0, 467734);

procedure wrb_cnt_for_skb($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.35;



implementation wrb_cnt_for_skb($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i31: i32;
  var $i30: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(104, 1));
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(108, 1));
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i32($i4, $i6);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 1211} {:cexpr "cnt"} boogie_si_record_i32($i8);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} $p9 := skb_end_pointer($p1);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, $i8);
    call {:si_unique_call 1213} {:cexpr "cnt"} boogie_si_record_i32($i14);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 1);
    call {:si_unique_call 1214} {:cexpr "cnt"} boogie_si_record_i32($i15);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 57888);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i21 == 1);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 57896);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i15, 1);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i29 == 1);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i15, 1);
    call {:si_unique_call 1215} {:cexpr "cnt"} boogie_si_record_i32($i31);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $M.35 := $store.i8($M.35, $p2, 1);
    assume {:verifier.code 0} true;
    $i30 := $i31;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i32 := $sgt.i32($i30, 30);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 1217} {:cexpr "tmp___0"} boogie_si_record_i64($i35);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb9:
    assume $i36 == 1;
    call {:si_unique_call 1218} devirtbounce.2(0, .str, 666, 12);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call wrb_cnt_for_skb_loop_$bb11();
    goto $bb11_last;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $M.35 := $store.i8($M.35, $p2, 0);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i30 := $i15;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb2;

  $bb11_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;
}



const index_adv: ref;

axiom index_adv == $sub.ref(0, 468766);

procedure index_adv($p0: ref, $i1: i16, $i2: i16);
  free requires assertsPassed;
  modifies $M.34;



implementation index_adv($p0: ref, $i1: i16, $i2: i16)
{
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i16;
  var $i10: i32;
  var $i11: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} {:cexpr "index_adv:arg:val"} boogie_si_record_i16($i1);
    call {:si_unique_call 1220} {:cexpr "index_adv:arg:limit"} boogie_si_record_i16($i2);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.34, $p0);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i1);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i4, $i5);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i2);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} $i10 := MODULO($i7, $i9);
    call {:si_unique_call 1222} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $M.34 := $store.i16($M.34, $p0, $i11);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    return;
}



const skb_end_pointer: ref;

axiom skb_end_pointer == $sub.ref(0, 469798);

procedure skb_end_pointer($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_end_pointer($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(224, 1));
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(220, 1));
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const skb_headlen: ref;

axiom skb_headlen == $sub.ref(0, 470830);

procedure skb_headlen($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_headlen($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(104, 1));
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(108, 1));
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i2, $i4);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const unmap_tx_frag: ref;

axiom unmap_tx_frag == $sub.ref(0, 471862);

procedure unmap_tx_frag($p0: ref, $p1: ref, $i2: i1);
  free requires assertsPassed;



implementation unmap_tx_frag($p0: ref, $p1: ref, $i2: i1)
{
  var $i3: i8;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1223} {:cexpr "unmap_tx_frag:arg:unmap_single"} boogie_si_record_i1($i2);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} swap_dws($p4, 16);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i8 := $shl.i64($i7, 32);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i10);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $i12 := $or.i64($i8, $i11);
    call {:si_unique_call 1225} {:cexpr "dma"} boogie_si_record_i64($i12);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i3);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} dma_unmap_page($p0, $i12, $i22, 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i18);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} dma_unmap_single_attrs($p0, $i12, $i19, 1, $0.ref);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const kfree_skb: ref;

axiom kfree_skb == $sub.ref(0, 472894);

procedure kfree_skb($p0: ref);
  free requires assertsPassed;



implementation kfree_skb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    return;
}



const dma_unmap_single_attrs: ref;

axiom dma_unmap_single_attrs == $sub.ref(0, 473926);

procedure dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} {:cexpr "dma_unmap_single_attrs:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 1229} {:cexpr "dma_unmap_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 1230} {:cexpr "dma_unmap_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} $p5 := get_dma_ops($p0);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} $i6 := valid_dma_direction($i3);
    call {:si_unique_call 1233} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 1235} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} debug_dma_unmap_page($p0, $i1, $i2, $i3, 1);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 1237} devirtbounce.7($p17, $p0, $i1, $i2, $i3, $p4);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 1236} devirtbounce.2(0, .str.22, 36, 12);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_unmap_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 474958);

procedure test_and_set_bit($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.41, $M.0, $M.21, $M.42, $CurrAddr;



implementation test_and_set_bit($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 1240} $i2 := devirtbounce.10(0, $p1, $i0, $p1);
    call {:si_unique_call 1241} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 475990);

procedure clear_bit($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation clear_bit($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 1243} devirtbounce.8(0, $p1, $i0, $p1);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_110: ref;

axiom ldv_mutex_lock_110 == $sub.ref(0, 477022);

procedure ldv_mutex_lock_110($p0: ref);
  free requires assertsPassed;
  modifies $M.38, assertsPassed;



implementation ldv_mutex_lock_110($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} ldv_mutex_lock_be_adapter_list_lock($p0);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} mutex_lock($p0);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;
}



const _be_roce_dev_close: ref;

axiom _be_roce_dev_close == $sub.ref(0, 478054);

procedure _be_roce_dev_close($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.25, $M.21, $CurrAddr, assertsPassed, $M.26;



implementation _be_roce_dev_close($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $p1 := $M.36;
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364072, 1));
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p8 := $M.36;
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.37, $p9);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $p13 := $M.36;
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.37, $p14);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364072, 1));
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 1246} devirtbounce.11($p15, $p17, 1);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_157:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_111: ref;

axiom ldv_mutex_unlock_111 == $sub.ref(0, 479086);

procedure ldv_mutex_unlock_111($p0: ref);
  free requires assertsPassed;
  modifies $M.38, assertsPassed;



implementation ldv_mutex_unlock_111($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} ldv_mutex_unlock_be_adapter_list_lock($p0);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} mutex_unlock($p0);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_be_adapter_list_lock: ref;

axiom ldv_mutex_unlock_be_adapter_list_lock == $sub.ref(0, 480118);

procedure ldv_mutex_unlock_be_adapter_list_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.38, assertsPassed;



implementation ldv_mutex_unlock_be_adapter_list_lock($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i1 := $M.38;
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} ldv_error();
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1250} {:cexpr "ldv_mutex_be_adapter_list_lock"} boogie_si_record_i32(1);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_be_adapter_list_lock: ref;

axiom ldv_mutex_lock_be_adapter_list_lock == $sub.ref(0, 481150);

procedure ldv_mutex_lock_be_adapter_list_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.38, assertsPassed;



implementation ldv_mutex_lock_be_adapter_list_lock($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $i1 := $M.38;
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} ldv_error();
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 1252} {:cexpr "ldv_mutex_be_adapter_list_lock"} boogie_si_record_i32(2);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 482182);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_108: ref;

axiom ldv_mutex_lock_108 == $sub.ref(0, 483214);

procedure ldv_mutex_lock_108($p0: ref);
  free requires assertsPassed;
  modifies $M.38, assertsPassed;



implementation ldv_mutex_lock_108($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} ldv_mutex_lock_be_adapter_list_lock($p0);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} mutex_lock($p0);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;
}



const _be_roce_dev_open: ref;

axiom _be_roce_dev_open == $sub.ref(0, 484246);

procedure _be_roce_dev_open($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.25, $M.21, $CurrAddr, assertsPassed, $M.26;



implementation _be_roce_dev_open($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $p1 := $M.36;
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364072, 1));
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p8 := $M.36;
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.37, $p9);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $p13 := $M.36;
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.37, $p14);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364072, 1));
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 1255} devirtbounce.11($p15, $p17, 0);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_172:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_109: ref;

axiom ldv_mutex_unlock_109 == $sub.ref(0, 485278);

procedure ldv_mutex_unlock_109($p0: ref);
  free requires assertsPassed;
  modifies $M.38, assertsPassed;



implementation ldv_mutex_unlock_109($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} ldv_mutex_unlock_be_adapter_list_lock($p0);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} mutex_unlock($p0);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;
}



const netif_tx_start_queue: ref;

axiom netif_tx_start_queue == $sub.ref(0, 486310);

procedure netif_tx_start_queue($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation netif_tx_start_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(192, 1));
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} clear_bit(0, $p1);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    return;
}



const be_mac_to_link_speed: ref;

axiom be_mac_to_link_speed == $sub.ref(0, 487342);

procedure be_mac_to_link_speed($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation be_mac_to_link_speed($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    call {:si_unique_call 1259} {:cexpr "be_mac_to_link_speed:arg:mac_speed"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i4 == 1;
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i7 := 10000;
    goto $bb15;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i7 := 1000;
    goto $bb15;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $i7 := 100;
    goto $bb15;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i5 == 1);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $i7 := 10;
    goto $bb15;

  $bb11:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb10;

  $bb13:
    assume $i6 == 1;
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb15;
}



const be_msix_register: ref;

axiom be_msix_register == $sub.ref(0, 488374);

procedure be_msix_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation be_msix_register($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i10: i32;
  var $p11: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i1;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $i42: i1;
  var $i36: i32;
  var $p37: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i29: i32;
  var vslice_dummy_var_468: i32;
  var vslice_dummy_var_469: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(488, 1));
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64(0);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 272));
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(484, 1));
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $i9 := $ult.i32(0, $i8);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $i10, $p11 := 0, $p6;
    goto $bb4;

  $bb4:
    call $p12, $p13, $p14, $p15, $i17, $p18, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $p26, $i27, $i28, $i10, $p11, vslice_dummy_var_468 := be_msix_register_loop_$bb4($p0, $p2, $p7, $p12, $p13, $p14, $p15, $i17, $p18, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $p26, $i27, $i28, $i10, $p11, vslice_dummy_var_468);
    goto $bb4_last;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 272)), $mul.ref(40, 1));
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 2784)), $mul.ref(0, 1));
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} vslice_dummy_var_468 := sprintf.ref.ref.ref.i32($p13, .str.99, $p15, $i10);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} $i17 := be_msix_vec_get($p0, $p11);
    call {:si_unique_call 1262} {:cexpr "vec"} boogie_si_record_i32($i17);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 272)), $mul.ref(40, 1));
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p11);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} $i21 := request_irq($i17, be_msix, 0, $p19, $p20);
    call {:si_unique_call 1264} {:cexpr "status"} boogie_si_record_i32($i21);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i23, $i24 := $i10, $i21;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i10, 1);
    call {:si_unique_call 1266} {:cexpr "i"} boogie_si_record_i32($i25);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p11, $mul.ref(1, 272));
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p7);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i28 := $ult.i32($i25, $i27);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i10, $p11 := $i25, $p26;
    goto $bb10_dummy;

  $bb6:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32($i23, 1);
    call {:si_unique_call 1265} {:cexpr "i"} boogie_si_record_i32($i30);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(488, 1));
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i30);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p32, $mul.ref($i33, 272));
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i35 := $sge.i32($i30, 0);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} vslice_dummy_var_469 := dev_warn.ref.ref.i32($p45, .str.100, $i24);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} be_msix_disable($p0);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $i29 := $i24;
    goto $bb13;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $i36, $p37 := $i30, $p34;
    goto $bb17;

  $bb17:
    call $i38, $p39, $i40, $p41, $i42, $i36, $p37 := be_msix_register_loop_$bb17($p0, $i38, $p39, $i40, $p41, $i42, $i36, $p37);
    goto $bb17_last;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} $i38 := be_msix_vec_get($p0, $p37);
    call {:si_unique_call 1268} {:cexpr "tmp"} boogie_si_record_i32($i38);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p37);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} free_irq($i38, $p39);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i36, 1);
    call {:si_unique_call 1270} {:cexpr "i"} boogie_si_record_i32($i40);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p37, $mul.ref($sub.ref(0, 1), 272));
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $i42 := $sge.i32($i40, 0);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i42 == 1);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb19:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i36, $p37 := $i40, $p41;
    goto $bb19_dummy;

  $bb19_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5720;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5686;
}



const be_intx: ref;

axiom be_intx == $sub.ref(0, 489406);

procedure be_intx($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.41, $M.21, $M.42, $CurrAddr;



implementation be_intx($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $p10: ref;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i16;
  var $i19: i16;
  var $i20: i32;
  var $i21: i16;
  var $i22: i1;
  var $p24: ref;
  var $i25: i16;
  var $p26: ref;
  var $i27: i16;
  var $i28: i32;
  var $i29: i32;
  var $i30: i16;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} {:cexpr "be_intx:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(264, 1));
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} $i6 := napi_schedule_prep($p5);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 1275} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(28, 1));
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i13);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i16($i20);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} be_eq_notify($p4, $i18, 0, 1, $i21);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i13, 0);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(96, 1));
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    call {:si_unique_call 1280} {:cexpr "tmp___0"} boogie_si_record_i16($i25);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(96, 1));
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $i27 := $load.i16($M.0, $p26);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i28, 1);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(96, 1));
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p31, $i30);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i25);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i33 == 1);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb10:
    assume $i33 == 1;
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i23 := 1;
    goto $bb9;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i23 := 1;
    goto $bb9;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} $i9 := events_get($p2);
    call {:si_unique_call 1277} {:cexpr "num_evts"} boogie_si_record_i32($i9);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} __napi_schedule($p10);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i9, 0);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i13 := $i9;
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(96, 1));
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, 0);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 490438);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 1282} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 1284} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 491470);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1285} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1286} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1287} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1288} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const napi_schedule_prep: ref;

axiom napi_schedule_prep == $sub.ref(0, 492502);

procedure napi_schedule_prep($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.29, $M.41, $M.0, $M.21, $M.42, $CurrAddr;



implementation napi_schedule_prep($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} $i1 := napi_disable_pending($p0);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1290} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} $i7 := test_and_set_bit(0, $p6);
    call {:si_unique_call 1292} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb9;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const __napi_schedule: ref;

axiom __napi_schedule == $sub.ref(0, 493534);

procedure __napi_schedule($p0: ref);
  free requires assertsPassed;



implementation __napi_schedule($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    return;
}



const napi_disable_pending: ref;

axiom napi_disable_pending == $sub.ref(0, 494566);

procedure napi_disable_pending($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation napi_disable_pending($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} $i2 := constant_test_bit(1, $p1);
    call {:si_unique_call 1294} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 495598);

procedure sprintf.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref) returns ($r: i32);



procedure sprintf.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);



const be_msix: ref;

axiom be_msix == $sub.ref(0, 496630);

procedure be_msix($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.41, $M.0, $M.21, $M.42, $CurrAddr;



implementation be_msix($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i16;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} {:cexpr "be_msix:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(264, 1));
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(28, 1));
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} be_eq_notify($p4, $i9, 0, 1, 0);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} napi_schedule($p10);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const be_msix_disable: ref;

axiom be_msix_disable == $sub.ref(0, 497662);

procedure be_msix_disable($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_msix_disable($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(480, 1));
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} pci_disable_msix($p5);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(480, 1));
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pci_disable_msix: ref;

axiom pci_disable_msix == $sub.ref(0, 498694);

procedure pci_disable_msix($p0: ref);
  free requires assertsPassed;



implementation pci_disable_msix($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    return;
}



const napi_schedule: ref;

axiom napi_schedule == $sub.ref(0, 499726);

procedure napi_schedule($p0: ref);
  free requires assertsPassed;
  modifies $M.29, $M.41, $M.0, $M.21, $M.42, $CurrAddr;



implementation napi_schedule($p0: ref)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} $i1 := napi_schedule_prep($p0);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1300} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} __napi_schedule($p0);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const be_queue_alloc: ref;

axiom be_queue_alloc == $sub.ref(0, 500758);

procedure be_queue_alloc($p0: ref, $p1: ref, $i2: i16, $i3: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation be_queue_alloc($p0: ref, $p1: ref, $i2: i16, $i3: i16) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var cmdloc_dummy_var_262: [ref]i8;
  var cmdloc_dummy_var_263: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} {:cexpr "be_queue_alloc:arg:len"} boogie_si_record_i16($i2);
    call {:si_unique_call 1303} {:cexpr "be_queue_alloc:arg:entry_size"} boogie_si_record_i16($i3);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_262 := $M.0;
    call {:si_unique_call 1304} cmdloc_dummy_var_263 := $memset.i8(cmdloc_dummy_var_262, $p5, 0, 40, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_263;
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, $i2);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, $i3);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i2);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i3);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i10 := $mul.i32($i8, $i9);
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 2696)), $mul.ref(152, 1));
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} $p19 := dma_alloc_attrs($p14, $i17, $p18, 32976, $0.ref);
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p19);
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 12);
    goto $bb3;
}



const be_cmd_rxq_create: ref;

axiom be_cmd_rxq_create == $sub.ref(0, 501790);

procedure be_cmd_rxq_create($p0: ref, $p1: ref, $i2: i16, $i3: i16, $i4: i32, $i5: i32, $p6: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_rxq_create($p0: ref, $p1: ref, $i2: i16, $i3: i16, $i4: i32, $i5: i32, $p6: ref) returns ($r: i32)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i8;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i16;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i12: i32;
  var $p40: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} {:cexpr "be_cmd_rxq_create:arg:cq_id"} boogie_si_record_i16($i2);
    call {:si_unique_call 1307} {:cexpr "be_cmd_rxq_create:arg:frag_size"} boogie_si_record_i16($i3);
    call {:si_unique_call 1308} {:cexpr "be_cmd_rxq_create:arg:if_id"} boogie_si_record_i32($i4);
    call {:si_unique_call 1309} {:cexpr "be_cmd_rxq_create:arg:rss"} boogie_si_record_i32($i5);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} spin_lock_bh($p8);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} $p9 := wrb_from_mccq($p0);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $p13 := embedded_payload($p9);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} be_wrb_cmd_hdr_prepare($p15, 3, 8, 48, $p9, $0.ref);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p14, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, $i2);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i3);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} $i18 := fls($i17);
    call {:si_unique_call 1316} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, 255);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p14, $mul.ref(0, 48)), $mul.ref(18, 1));
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i22);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p14, $mul.ref(0, 48)), $mul.ref(19, 1));
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 2);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p14, $mul.ref(0, 48)), $mul.ref(20, 1));
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} be_cmd_page_addrs_prepare($p26, 2, $p7);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p14, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i4);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p14, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, 9018);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p14, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i5);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} $i30 := be_mcc_notify_wait($p0);
    call {:si_unique_call 1319} {:cexpr "status"} boogie_si_record_i32($i30);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i12 := $i30;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} spin_unlock_bh($p40);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb5:
    assume $i31 == 1;
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} $p32 := embedded_payload($p9);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p36, $i35);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(34, 1));
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, 1);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p33, $mul.ref(0, 20)), $mul.ref(18, 1));
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, $i39);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 16);
    goto $bb3;
}



const be_multi_rxq: ref;

axiom be_multi_rxq == $sub.ref(0, 502822);

procedure be_multi_rxq($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation be_multi_rxq($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i2, 1);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const be_cmd_rss_config: ref;

axiom be_cmd_rss_config == $sub.ref(0, 503854);

procedure be_cmd_rss_config($p0: ref, $p1: ref, $i2: i32, $i3: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, $CurrAddr, assertsPassed, $M.26;



implementation be_cmd_rss_config($p0: ref, $p1: ref, $i2: i32, $i3: i16) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i16;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i16;
  var $i31: i32;
  var $i32: i32;
  var $i33: i16;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i16;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i16;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i16;
  var $i57: i32;
  var $i58: i1;
  var $p60: ref;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $i18: i32;
  var cmdloc_dummy_var_264: [ref]i8;
  var cmdloc_dummy_var_265: [ref]i8;
  var cmdloc_dummy_var_266: [ref]i8;
  var cmdloc_dummy_var_267: [ref]i8;
  var cmdloc_dummy_var_268: [ref]i8;
  var cmdloc_dummy_var_269: [ref]i8;
  var cmdloc_dummy_var_270: [ref]i8;
  var cmdloc_dummy_var_271: [ref]i8;
  var cmdloc_dummy_var_272: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1322} {:cexpr "be_cmd_rss_config:arg:rss_hash_opts"} boogie_si_record_i32($i2);
    call {:si_unique_call 1323} {:cexpr "be_cmd_rss_config:arg:table_size"} boogie_si_record_i16($i3);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 4));
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 366231461);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(1, 4));
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 624191578);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(2, 4));
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 1602709818);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(3, 4));
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 1449675086);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(4, 4));
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 869231187);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(5, 4));
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 942879942);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(6, 4));
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 1991000663);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(7, 4));
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 1504854706);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 4));
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 1051212802);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(9, 4));
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 1242628868);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} $i16 := ldv_mutex_lock_interruptible_34($p15);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    call {:si_unique_call 1325} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} $p19 := wrb_from_mbox($p0);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} $p20 := embedded_payload($p19);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 196)), $mul.ref(0, 1));
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} be_wrb_cmd_hdr_prepare($p22, 3, 1, 196, $p19, $0.ref);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363992, 1));
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p21, $mul.ref(0, 196)), $mul.ref(16, 1));
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i2);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p21, $mul.ref(0, 196)), $mul.ref(20, 1));
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p27, $i26);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i3);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} $i29 := fls($i28);
    call {:si_unique_call 1330} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i31, 1);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i16($i32);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p21, $mul.ref(0, 196)), $mul.ref(22, 1));
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p34, $i33);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 57888);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i40 == 1);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.0, $p43);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 57896);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i46 == 1);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.0, $p49);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 1824);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i52 == 1);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $i56 := $load.i16($M.0, $p55);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 1832);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i64($i3);
    call {:si_unique_call 1331} {:cexpr "__len"} boogie_si_record_i64($i61);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p21, $mul.ref(0, 196)), $mul.ref(64, 1));
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_264 := $M.0;
    cmdloc_dummy_var_265 := $M.0;
    call {:si_unique_call 1332} cmdloc_dummy_var_266 := $memcpy.i8(cmdloc_dummy_var_264, cmdloc_dummy_var_265, $p63, $p1, $i61, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_266;
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $i64 := $ugt.i64(40, 63);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i64 == 1);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p21, $mul.ref(0, 196)), $mul.ref(24, 1));
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p4);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_270 := $M.0;
    cmdloc_dummy_var_271 := $M.0;
    call {:si_unique_call 1334} cmdloc_dummy_var_272 := $memcpy.i8(cmdloc_dummy_var_270, cmdloc_dummy_var_271, $p69, $p70, 40, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_272;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p21, $mul.ref(0, 196)), $mul.ref(24, 1));
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} swap_dws($p72, 40);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} $i73 := be_mbox_notify_wait($p0);
    call {:si_unique_call 1337} {:cexpr "status"} boogie_si_record_i32($i73);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} ldv_mutex_unlock_35($p74);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i18 := $i73;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i64 == 1;
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p21, $mul.ref(0, 196)), $mul.ref(24, 1));
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p4);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_267 := $M.0;
    cmdloc_dummy_var_268 := $M.0;
    call {:si_unique_call 1333} cmdloc_dummy_var_269 := $memcpy.i8(cmdloc_dummy_var_267, cmdloc_dummy_var_268, $p66, $p67, 40, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_269;
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 196)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, 1);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 1);
    goto $bb3;

  SeqInstr_178:
    assume !assertsPassed;
    return;
}



const be_post_rx_frags: ref;

axiom be_post_rx_frags == $sub.ref(0, 504886);

procedure be_post_rx_frags($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_post_rx_frags($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i64;
  var $p10: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p36: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $i50: i16;
  var $i51: i32;
  var $i52: i16;
  var $i53: i32;
  var $i54: i32;
  var $i55: i16;
  var $p56: ref;
  var $p48: ref;
  var $i49: i64;
  var $p57: ref;
  var $i58: i16;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i16;
  var $i64: i64;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $i70: i64;
  var $i71: i32;
  var $p72: ref;
  var $i73: i16;
  var $i74: i32;
  var $i75: i32;
  var $i76: i16;
  var $i77: i32;
  var $i78: i32;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i16;
  var $i88: i64;
  var $p89: ref;
  var $i90: i32;
  var $i91: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $i98: i1;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i99: i64;
  var $i100: i1;
  var $p101: ref;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $i105: i16;
  var $i106: i32;
  var $i107: i16;
  var $i108: i16;
  var $i109: i32;
  var $i110: i16;
  var $p111: ref;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} {:cexpr "be_post_rx_frags:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(0, 1));
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(8, 1));
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(112, 1));
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(8, 1)), $mul.ref(32, 1));
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i64($i8);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p6, $mul.ref($i9, 24));
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i11, $i12, $i13, $p14, $p15, $p16 := 0, 0, 0, $p10, $0.ref, $0.ref;
    goto $bb1;

  $bb1:
    call $i17, $i18, $p19, $i20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $p28, $i29, $p30, $p40, $p41, $p42, $p43, $i44, $i45, $i46, $p47, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $p48, $i49, $p57, $i58, $i59, $p60, $p61, $p62, $i63, $i64, $i65, $p66, $p67, $i68, $p69, $i70, $i71, $p72, $i73, $i74, $i75, $i76, $i77, $i78, $p79, $i80, $i81, $p82, $p83, $p84, $p85, $p86, $i87, $i88, $p89, $i90, $i91, $i11, $i12, $i13, $p14, $p15, $p16, $p95, $p96, $i97, $i98, $p92, $p93, $i94 := be_post_rx_frags_loop_$bb1($p0, $i1, $p3, $p4, $i17, $i18, $p19, $i20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $p28, $i29, $p30, $p40, $p41, $p42, $p43, $i44, $i45, $i46, $p47, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $p48, $i49, $p57, $i58, $i59, $p60, $p61, $p62, $i63, $i64, $i65, $p66, $p67, $i68, $p69, $i70, $i71, $p72, $i73, $i74, $i75, $i76, $i77, $i78, $p79, $i80, $i81, $p82, $p83, $p84, $p85, $p86, $i87, $i88, $p89, $i90, $i91, $i11, $i12, $i13, $p14, $p15, $p16, $p95, $p96, $i97, $i98, $p92, $p93, $i94);
    goto $bb1_last;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $i97 := $p2i.ref.i64($p96);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $i98 := $eq.i64($i97, 0);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $p92, $p93, $i94 := $p16, $p15, $i12;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i98 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p37, $i38, $p39 := $p93, $i94, $p92;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p39);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $i100 := $ne.i64($i99, 0);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i38, 0);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i102 == 1);
    $p111 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(8, 1)), $mul.ref(36, 1));
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} $i112 := atomic_read($p111);
    call {:si_unique_call 1354} {:cexpr "tmp___1"} boogie_si_record_i32($i112);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 0);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    return;

  $bb25:
    assume $i113 == 1;
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(24753, 1));
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p114, 1);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i102 == 1;
    $p103 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(8, 1)), $mul.ref(36, 1));
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} atomic_add($i38, $p103);
    $p104 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(8, 1)), $mul.ref(28, 1));
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $i105 := $load.i16($M.0, $p104);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $i106 := $zext.i16.i32($i105);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i16($i106);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i16($i38);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i109 := $zext.i16.i32($i108);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i32.i16($i109);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} be_rxq_notify($p3, $i107, $i110);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i100 == 1;
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p37, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p101, 1);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i98 == 1;
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i18 == 1);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} get_page($p16);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i11);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $i52 := $M.33;
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i51, $i53);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i54);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p56, $i55);
    assume {:verifier.code 0} true;
    $p48, $i49 := $p16, $i13;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $i58 := $load.i16($M.0, $p57);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i58);
    call {:si_unique_call 1346} {:cexpr "page_offset"} boogie_si_record_i32($i59);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, $p48);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p61, $i49);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $i63 := $load.i16($M.0, $p62);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i64($i63);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i65 := $add.i64($i64, $i49);
    call {:si_unique_call 1347} {:cexpr "frag_dmaaddr"} boogie_si_record_i64($i65);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} $p66 := queue_head_node($p4);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i64.i32($i65);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p67, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, $i68);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i70 := $lshr.i64($i65, 32);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i64.i32($i70);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p67, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i71);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $i73 := $M.33;
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i73);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i74, $i59);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i76 := $M.33;
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i76);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i75, $i77);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(359208, 1));
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $i81 := $ugt.i32($i78, $i80);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $p83 := $p48;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} queue_head_inc($p4);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(112, 1));
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    $p86 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(8, 1)), $mul.ref(32, 1));
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $i87 := $load.i16($M.0, $p86);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i88 := $zext.i16.i64($i87);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p85, $mul.ref($i88, 24));
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i12, 1);
    call {:si_unique_call 1350} {:cexpr "posted"} boogie_si_record_i32($i90);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $i91 := $ule.i32($i90, 63);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $p92, $p93, $i94 := $p83, $p14, $i90;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb15;

  $bb13:
    assume $i91 == 1;
    assume {:verifier.code 0} true;
    $i11, $i12, $i13, $p14, $p15, $p16 := $i59, $i90, $i49, $p89, $p14, $p83;
    goto $bb13_dummy;

  $bb10:
    assume $i81 == 1;
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p82, 1);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $p83 := $0.ref;
    goto $bb12;

  $bb3:
    assume $i18 == 1;
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(359208, 1));
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} $p21 := be_alloc_pages($i20, $i1);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 1342} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $p28, $i29, $p30 := $p15, $i12, $p21;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(359208, 1));
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i44);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} $i46 := dma_map_page($p42, $p21, 0, $i45, 2);
    call {:si_unique_call 1345} {:cexpr "page_dmaaddr"} boogie_si_record_i64($i46);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p47, 0);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $p48, $i49 := $p21, $i46;
    goto $bb9;

  $bb5:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(40, 1));
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i33, 1);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(40, 1));
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i34);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $p37, $i38, $p39 := $p28, $i29, $p30;
    goto $bb7;

  $bb13_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6061;
}



const be_alloc_pages: ref;

axiom be_alloc_pages == $sub.ref(0, 505918);

procedure be_alloc_pages($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation be_alloc_pages($i0: i32, $i1: i32) returns ($r: ref)
{
  var $i2: i64;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} {:cexpr "be_alloc_pages:arg:size"} boogie_si_record_i32($i0);
    call {:si_unique_call 1356} {:cexpr "be_alloc_pages:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i0);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} $i3 := __get_order($i2);
    call {:si_unique_call 1358} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i6 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} $p7 := alloc_pages($i6, $i3);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i1, 16384);
    call {:si_unique_call 1359} {:cexpr "gfp"} boogie_si_record_i32($i5);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;
}



const dma_map_page: ref;

axiom dma_map_page == $sub.ref(0, 506950);

procedure dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} {:cexpr "dma_map_page:arg:offset"} boogie_si_record_i64($i2);
    call {:si_unique_call 1362} {:cexpr "dma_map_page:arg:size"} boogie_si_record_i64($i3);
    call {:si_unique_call 1363} {:cexpr "dma_map_page:arg:dir"} boogie_si_record_i32($i4);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} $p5 := get_dma_ops($p0);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} $p6 := lowmem_page_address($p1);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref($i2, 1));
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i3);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} kmemcheck_mark_initialized($p7, $i8);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} $i9 := valid_dma_direction($i4);
    call {:si_unique_call 1368} {:cexpr "tmp___1"} boogie_si_record_i32($i9);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 1370} {:cexpr "tmp___2"} boogie_si_record_i64($i13);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 1372} $i17 := devirtbounce.12($p16, $p0, $p1, $i2, $i3, $i4, $0.ref);
    call {:si_unique_call 1373} {:cexpr "addr"} boogie_si_record_i64($i17);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} debug_dma_map_page($p0, $p1, $i2, $i3, $i4, $i17, 0);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i14 == 1;
    call {:si_unique_call 1371} devirtbounce.2(0, .str.22, 79, 12);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_map_page_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const get_page: ref;

axiom get_page == $sub.ref(0, 507982);

procedure get_page($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation get_page($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} $i1 := PageTail($p0);
    call {:si_unique_call 1376} {:cexpr "tmp___1"} boogie_si_record_i32($i1);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1378} {:cexpr "tmp___2"} boogie_si_record_i64($i5);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} $i17 := atomic_read($p16);
    call {:si_unique_call 1384} {:cexpr "tmp___3"} boogie_si_record_i32($i17);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i18 := $sle.i32($i17, 0);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 1386} {:cexpr "tmp___4"} boogie_si_record_i64($i21);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} atomic_inc($p26);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i22 == 1;
    call {:si_unique_call 1387} devirtbounce.2(0, .str.24, 411, 12);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call get_page_loop_$bb10();
    goto $bb10_last;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} $i7 := __get_page_tail($p0);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 1380} {:cexpr "tmp"} boogie_si_record_i8($i8);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i64($i9);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} $i11 := ldv__builtin_expect($i10, 1);
    call {:si_unique_call 1382} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;
}



const queue_head_inc: ref;

axiom queue_head_inc == $sub.ref(0, 509014);

procedure queue_head_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation queue_head_inc($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} index_inc($p1, $i5);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    return;
}



const atomic_add: ref;

axiom atomic_add == $sub.ref(0, 510046);

procedure atomic_add($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_add($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} {:cexpr "atomic_add:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 1391} devirtbounce.9(0, $p2, $i0, $p2);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    return;
}



const be_rxq_notify: ref;

axiom be_rxq_notify == $sub.ref(0, 511078);

procedure be_rxq_notify($p0: ref, $i1: i16, $i2: i16);
  free requires assertsPassed;



implementation be_rxq_notify($p0: ref, $i1: i16, $i2: i16)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} {:cexpr "be_rxq_notify:arg:qid"} boogie_si_record_i16($i1);
    call {:si_unique_call 1393} {:cexpr "be_rxq_notify:arg:posted"} boogie_si_record_i16($i2);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i1);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 1023);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 0);
    call {:si_unique_call 1394} {:cexpr "val"} boogie_si_record_i32($i5);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i2);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $i7 := $shl.i32($i6, 24);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, $i5);
    call {:si_unique_call 1395} {:cexpr "val"} boogie_si_record_i32($i8);
    call {:si_unique_call 1396} devirtbounce.4(0);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(256, 1));
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} iowrite32($i8, $p11);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    return;
}



const PageTail: ref;

axiom PageTail == $sub.ref(0, 512110);

procedure PageTail($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation PageTail($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} $i2 := constant_test_bit(15, $p1);
    call {:si_unique_call 1399} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __get_page_tail: ref;

axiom __get_page_tail == $sub.ref(0, 513142);

procedure __get_page_tail($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation __get_page_tail($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1400} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1401} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 514174);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 64);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 515206);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation kmemcheck_mark_initialized($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} {:cexpr "kmemcheck_mark_initialized:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    return;
}



const debug_dma_map_page: ref;

axiom debug_dma_map_page == $sub.ref(0, 516238);

procedure debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1);
  free requires assertsPassed;



implementation debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} {:cexpr "debug_dma_map_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1404} {:cexpr "debug_dma_map_page:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 1405} {:cexpr "debug_dma_map_page:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1406} {:cexpr "debug_dma_map_page:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 1407} {:cexpr "debug_dma_map_page:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    return;
}



const __get_order: ref;

axiom __get_order == $sub.ref(0, 517270);

procedure __get_order($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __get_order($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} {:cexpr "__get_order:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64($i0, 1);
    call {:si_unique_call 1409} {:cexpr "size"} boogie_si_record_i64($i1);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i2 := $lshr.i64($i1, 12);
    call {:si_unique_call 1410} {:cexpr "size"} boogie_si_record_i64($i2);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} $i3 := fls64($i2);
    call {:si_unique_call 1412} {:cexpr "order"} boogie_si_record_i32($i3);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const alloc_pages: ref;

axiom alloc_pages == $sub.ref(0, 518302);

procedure alloc_pages($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_pages($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} {:cexpr "alloc_pages:arg:gfp_mask"} boogie_si_record_i32($i0);
    call {:si_unique_call 1414} {:cexpr "alloc_pages:arg:order"} boogie_si_record_i32($i1);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} $p2 := alloc_pages_current($i0, $i1);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const alloc_pages_current: ref;

axiom alloc_pages_current == $sub.ref(0, 519334);

procedure alloc_pages_current($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_pages_current($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} {:cexpr "alloc_pages_current:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1417} {:cexpr "alloc_pages_current:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} $p2 := external_alloc();
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const fls64: ref;

axiom fls64 == $sub.ref(0, 520366);

procedure fls64($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation fls64($i0: i64) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} {:cexpr "fls64:arg:x"} boogie_si_record_i64($i0);
    call {:si_unique_call 1420} $i1 := devirtbounce.13(0, $i0, $sub.i32(0, 1));
    call {:si_unique_call 1421} {:cexpr "bitpos"} boogie_si_record_i32($i1);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mutex_lock_interruptible_34: ref;

axiom ldv_mutex_lock_interruptible_34 == $sub.ref(0, 521398);

procedure ldv_mutex_lock_interruptible_34($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_interruptible_34($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 1423} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} $i2 := ldv_mutex_lock_interruptible_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    call {:si_unique_call 1425} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;
}



const fls: ref;

axiom fls == $sub.ref(0, 522430);

procedure fls($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fls($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} {:cexpr "fls:arg:x"} boogie_si_record_i32($i0);
    call {:si_unique_call 1427} $i1 := devirtbounce.14(0, $i0, $sub.i32(0, 1));
    call {:si_unique_call 1428} {:cexpr "r"} boogie_si_record_i32($i1);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mutex_unlock_35: ref;

axiom ldv_mutex_unlock_35 == $sub.ref(0, 523462);

procedure ldv_mutex_unlock_35($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_35($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} ldv_mutex_unlock_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} mutex_unlock($p0);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;
}



const be_cmd_page_addrs_prepare: ref;

axiom be_cmd_page_addrs_prepare == $sub.ref(0, 524494);

procedure be_cmd_page_addrs_prepare($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_cmd_page_addrs_prepare($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i21: i32;
  var $i22: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i32;
  var $i27: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i32;
  var $i32: i1;
  var $i19: i64;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} {:cexpr "be_cmd_page_addrs_prepare:arg:max_pages"} boogie_si_record_i32($i1);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, 4095);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i6, $i9);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 4095);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i12 := $lshr.i64($i11, 12);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    call {:si_unique_call 1432} {:cexpr "_min1"} boogie_si_record_i32($i13);
    call {:si_unique_call 1433} {:cexpr "be_cmd_page_addrs_prepare:arg:_min2"} boogie_si_record_i32($i1);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $i14 := $ult.i32($i13, $i1);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $i15 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    call {:si_unique_call 1434} {:cexpr "dma"} boogie_si_record_i64($i17);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32(0, $i15);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $i19, $i20 := $i17, 0;
    goto $bb7;

  $bb7:
    call $i21, $i22, $p24, $i25, $i26, $i27, $p29, $i30, $i31, $i32, $i19, $i20 := be_cmd_page_addrs_prepare_loop_$bb7($p0, $i15, $i21, $i22, $p24, $i25, $i26, $i27, $p29, $i30, $i31, $i32, $i19, $i20);
    goto $bb7_last;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32($i19);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i20);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref($i22, 8)), $mul.ref(0, 1));
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i21);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $i25 := $lshr.i64($i19, 32);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i64.i32($i25);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i20);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref($i27, 8)), $mul.ref(4, 1));
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i26);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i19, 4096);
    call {:si_unique_call 1435} {:cexpr "dma"} boogie_si_record_i64($i30);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i20, 1);
    call {:si_unique_call 1436} {:cexpr "i"} boogie_si_record_i32($i31);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, $i15);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb9:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i19, $i20 := $i30, $i31;
    goto $bb9_dummy;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    goto $bb3;

  $bb9_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6341;
}



const be_setup_init: ref;

axiom be_setup_init == $sub.ref(0, 525526);

procedure be_setup_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_setup_init($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363442, 1));
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $sub.i8(0, 1));
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(16, 1));
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $sub.i32(0, 1));
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363992, 1));
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $sub.i32(0, 1));
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364224, 1));
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 0);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364020, 1));
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 0);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363956, 1));
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363956, 1));
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 1792);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const be_cmd_req_native_mode: ref;

axiom be_cmd_req_native_mode == $sub.ref(0, 526558);

procedure be_cmd_req_native_mode($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_cmd_req_native_mode($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i8;
  var $p24: ref;
  var $i25: i8;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i8: i32;
  var $p31: ref;
  var $i4: i32;
  var vslice_dummy_var_470: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} $i2 := ldv_mutex_lock_interruptible_38($p1);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    call {:si_unique_call 1438} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} $p5 := wrb_from_mbox($p0);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} $p9 := embedded_payload($p5);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 236)), $mul.ref(0, 1));
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} be_wrb_cmd_hdr_prepare($p11, 1, 103, 236, $p5, $0.ref);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref(0, 236)), $mul.ref(16, 1));
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 6);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref(0, 236)), $mul.ref(20, 1));
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 4);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} $i14 := be_mbox_notify_wait($p0);
    call {:si_unique_call 1444} {:cexpr "status"} boogie_si_record_i32($i14);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i8 := $i14;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} ldv_mutex_unlock_39($p31);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $i4 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i15 == 1;
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} $p16 := embedded_payload($p5);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 236)), $mul.ref(20, 1));
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 4);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364224, 1));
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i8($i21);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, $i23);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364224, 1));
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} vslice_dummy_var_470 := dev_warn.ref.ref($p29, .str.20);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 16);
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 1);
    goto $bb3;

  SeqInstr_190:
    assume !assertsPassed;
    return;
}



const be_get_config: ref;

axiom be_get_config == $sub.ref(0, 527590);

procedure be_get_config($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.47, $M.41, $M.46, $M.48, $M.25, $M.21, assertsPassed, $M.26, $CurrAddr;



implementation be_get_config($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364016, 1));
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364024, 1));
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364028, 1));
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364276, 1));
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} $i5 := be_cmd_query_fw_cfg($p0, $p1, $p2, $p3, $p4);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    call {:si_unique_call 1448} {:cexpr "status"} boogie_si_record_i32($i5);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} be_get_resources($p0);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364296, 1));
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} $p13 := kcalloc($i12, 4, 208);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364000, 1));
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p13);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364000, 1));
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;

  SeqInstr_196:
    assume !assertsPassed;
    return;
}



const be_msix_enable: ref;

axiom be_msix_enable == $sub.ref(0, 528622);

procedure be_msix_enable($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation be_msix_enable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i41: i16;
  var $i42: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i40: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i1;
  var $i54: i32;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i16;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i16;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $i84: i1;
  var $i85: i1;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $i68: i32;
  var vslice_dummy_var_471: i32;
  var vslice_dummy_var_472: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} $i4 := be_num_rss_want($p0);
    call {:si_unique_call 1452} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} $i6 := cpumask_weight($p5);
    call {:si_unique_call 1454} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $i7 := $ult.i32($i4, $i6);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 1824);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i14 == 1);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 1832);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i35, $i36 := $i8, 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $i37 := $sgt.i32($i35, 1);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i37 == 1);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $i38 := 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32(0, $i38);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(4024, 1));
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} $i52 := pci_enable_msix($p49, $p51, $i38);
    call {:si_unique_call 1461} {:cexpr "status"} boogie_si_record_i32($i52);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 0);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i53 == 1);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i55 := $sgt.i32($i52, 0);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i62 := $i52;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} vslice_dummy_var_471 := dev_warn.ref.ref($p3, .str.124);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i68 := 0;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $r := $i68;
    return;

  $bb43:
    assume $i67 == 1;
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $i68 := $i62;
    goto $bb45;

  $bb36:
    assume $i55 == 1;
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(4024, 1));
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} $i60 := pci_enable_msix($p57, $p59, $i52);
    call {:si_unique_call 1463} {:cexpr "status"} boogie_si_record_i32($i60);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 0);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i62 := $i60;
    goto $bb41;

  $bb38:
    assume $i61 == 1;
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $i54 := $i52;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $i72 := $load.i16($M.0, $p71);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $i73 := $zext.i16.i32($i72);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 1824);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb49;

  $bb49:
    assume !($i74 == 1);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i78 := $load.i16($M.0, $p77);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i79 := $zext.i16.i32($i78);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 1832);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(480, 1));
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, $i54);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(480, 1));
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} vslice_dummy_var_472 := _dev_info.ref.ref.i32($p3, .str.125, $i96);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $i68 := 0;
    goto $bb45;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364024, 1));
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i82, 4);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb52;

  $bb53:
    assume $i84 == 1;
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $i85 := $sgt.i32($i54, $i36);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i85 == 1);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(480, 1));
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p92, $i54);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364064, 1));
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p93, 0);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb55:
    assume $i85 == 1;
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i86 := $sub.i32($i54, $i36);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(480, 1));
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, $i86);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(480, 1));
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $i90 := $sub.i32($i54, $i89);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364064, 1));
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p91, $i90);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb48;

  $bb33:
    assume $i53 == 1;
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $i54 := $i38;
    goto $bb35;

  $bb25:
    assume $i39 == 1;
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb28;

  $bb28:
    call $i41, $i42, $p45, $i46, $i47, $i40 := be_msix_enable_loop_$bb28($p0, $i38, $i41, $i42, $p45, $i46, $i47, $i40);
    goto $bb28_last;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i40);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(4024, 1)), $mul.ref($i42, 8)), $mul.ref(4, 1));
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p45, $i41);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i40, 1);
    call {:si_unique_call 1459} {:cexpr "i"} boogie_si_record_i32($i46);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i46, $i38);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i47 == 1);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb30:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i40 := $i46;
    goto $bb30_dummy;

  $bb22:
    assume $i37 == 1;
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $i38 := $i35;
    goto $bb24;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364024, 1));
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 4);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb9;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} $i26 := cpumask_weight($p25);
    call {:si_unique_call 1456} {:cexpr "tmp___1"} boogie_si_record_i32($i26);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 1);
    call {:si_unique_call 1457} {:cexpr "__min2"} boogie_si_record_i32($i27);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $i28 := $ult.i32(16, $i27);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i28 == 1);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $i29 := $i27;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i29, 5);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i30 == 1);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $i31 := 5;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i8, $i31);
    call {:si_unique_call 1458} {:cexpr "num_vec"} boogie_si_record_i32($i32);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 13);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i33 == 1);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $i34 := 13;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $i35, $i36 := $i34, $i31;
    goto $bb21;

  $bb18:
    assume $i33 == 1;
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $i34 := $i32;
    goto $bb20;

  $bb15:
    assume $i30 == 1;
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i31 := $i29;
    goto $bb17;

  $bb12:
    assume $i28 == 1;
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $i29 := 16;
    goto $bb14;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb5;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $i8 := $i4;
    goto $bb3;

  $bb30_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6535;
}



const be_evt_queues_create: ref;

axiom be_evt_queues_create == $sub.ref(0, 529654);

procedure be_evt_queues_create($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_evt_queues_create($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i15: i32;
  var $p16: ref;
  var $i27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(480, 1));
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(484, 1));
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(488, 1));
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64(0);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p9, $mul.ref($i10, 272));
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(484, 1));
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $i14 := $ult.i32(0, $i13);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $i15, $p16 := 0, $p11;
    goto $bb7;

  $bb7:
    call $p17, $p18, $i19, $p20, $p21, $p22, $p23, $i24, $i25, $i26, $p28, $i29, $i30, $i31, $i32, $i33, $p34, $i35, $i36, $i15, $p16 := be_evt_queues_create_loop_$bb7($p0, $p12, $p17, $p18, $i19, $p20, $p21, $p22, $p23, $i24, $i25, $i26, $p28, $i29, $i30, $i31, $i32, $i33, $p34, $i35, $i36, $i15, $p16);
    goto $bb7_last;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 272)), $mul.ref(264, 1));
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p0);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p16, $mul.ref(0, 272)), $mul.ref(94, 1));
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p18, 256);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i15);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p16, $mul.ref(0, 272)), $mul.ref(92, 1));
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $i19);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p16, $mul.ref(0, 272)), $mul.ref(80, 1));
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 96);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p16, $mul.ref(0, 272)), $mul.ref(72, 1));
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 1);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p16, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} $i24 := be_queue_alloc($p0, $p23, 1024, 4);
    call {:si_unique_call 1467} {:cexpr "rc"} boogie_si_record_i32($i24);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $i26 := $i24;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p16, $mul.ref(0, 272)), $mul.ref(88, 1));
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} $i30 := be_cmd_eq_create($p0, $p23, $i29);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    call {:si_unique_call 1469} {:cexpr "rc"} boogie_si_record_i32($i30);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $i32 := $i30;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i15, 1);
    call {:si_unique_call 1470} {:cexpr "i"} boogie_si_record_i32($i33);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p16, $mul.ref(1, 272));
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p12);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $i36 := $ult.i32($i33, $i35);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i36 == 1);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb16:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i15, $p16 := $i33, $p34;
    goto $bb16_dummy;

  $bb13:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $i27 := $i32;
    goto $bb11;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb11;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(480, 1));
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6647;
}



const be_tx_cqs_create: ref;

axiom be_tx_cqs_create == $sub.ref(0, 530686);

procedure be_tx_cqs_create($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_tx_cqs_create($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i8;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i18: i8;
  var $p19: ref;
  var $i24: i32;
  var vslice_dummy_var_473: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} $i1 := be_num_txqs_want($p0);
    call {:si_unique_call 1472} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(4132, 1));
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(4132, 1));
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 8);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(4136, 1));
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i64(0);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p12, $mul.ref($i13, 16528));
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(4132, 1));
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $i17 := $ult.i32(0, $i16);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $i18, $p19 := 0, $p14;
    goto $bb7;

  $bb7:
    call $p20, $i21, $i22, $i23, $i25, $p26, $i27, $i28, $i29, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $p39, $i40, $i41, $i42, $i18, $p19 := be_tx_cqs_create_loop_$bb7($p0, $p15, $p20, $i21, $i22, $i23, $i25, $p26, $i27, $i28, $i29, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $p39, $i40, $i41, $i42, $i18, $p19);
    goto $bb7_last;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 16528)), $mul.ref(48, 1));
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} $i21 := be_queue_alloc($p0, $p20, 1024, 16);
    call {:si_unique_call 1477} {:cexpr "status"} boogie_si_record_i32($i21);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $i23 := $i21;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i18);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(484, 1));
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $i28 := $urem.i32($i25, $i27);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i28);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(488, 1)), $mul.ref($i29, 272)), $mul.ref(0, 1));
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} $i33 := be_cmd_cq_create($p0, $p20, $p32, 0, 3);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    call {:si_unique_call 1479} {:cexpr "status"} boogie_si_record_i32($i33);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $i35 := $i33;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i18);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i36, 1);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    call {:si_unique_call 1480} {:cexpr "i"} boogie_si_record_i8($i38);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p19, $mul.ref(1, 16528));
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i38);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p15);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i42 := $ult.i32($i40, $i41);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i42 == 1);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb16:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i18, $p19 := $i38, $p39;
    goto $bb16_dummy;

  $bb13:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $i24 := $i35;
    goto $bb11;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb11;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} rtnl_lock();
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(4132, 1));
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} vslice_dummy_var_473 := netif_set_real_num_tx_queues($p7, $i9);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} rtnl_unlock();
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6709;
}



const be_rx_cqs_create: ref;

axiom be_rx_cqs_create == $sub.ref(0, 531718);

procedure be_rx_cqs_create($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_rx_cqs_create($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i24: i16;
  var $i25: i64;
  var $i26: i32;
  var $i27: i32;
  var $i28: i64;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $i50: i64;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i39: i32;
  var $p40: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i46: i32;
  var vslice_dummy_var_474: i32;
  var vslice_dummy_var_475: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(480, 1));
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 9);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i24 := $M.33;
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i64($i24);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} $i26 := __get_order($i25);
    call {:si_unique_call 1485} {:cexpr "tmp"} boogie_si_record_i32($i26);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $i27 := $shl.i32(1, $i26);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i64.i32($i28);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $i30 := $mul.i32($i29, 4096);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359208, 1));
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i30);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136368, 1));
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64(0);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p33, $mul.ref($i34, 24760));
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $i38 := $ult.i32(0, $i37);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $i66 := $sub.i32($i65, 1);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} vslice_dummy_var_475 := _dev_info.ref.ref.i32($p63, .str.126, $i66);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $i46 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $r := $i46;
    return;

  $bb13:
    assume $i38 == 1;
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $i39, $p40 := 0, $p35;
    goto $bb16;

  $bb16:
    call $p41, $p42, $i43, $i44, $i45, $p47, $i48, $i49, $i50, $p53, $i54, $i55, $i56, $i57, $p58, $i59, $i60, $i39, $p40 := be_rx_cqs_create_loop_$bb16($p0, $p36, $p41, $p42, $i43, $i44, $i45, $p47, $i48, $i49, $i50, $p53, $i54, $i55, $i56, $i57, $p58, $i59, $i60, $i39, $p40);
    goto $bb16_last;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 24760)), $mul.ref(0, 1));
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, $p0);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p40, $mul.ref(0, 24760)), $mul.ref(48, 1));
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} $i43 := be_queue_alloc($p0, $p42, 1024, 16);
    call {:si_unique_call 1487} {:cexpr "rc"} boogie_si_record_i32($i43);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $i45 := $i43;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(484, 1));
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $i49 := $urem.i32($i39, $i48);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $i50 := $zext.i32.i64($i49);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(488, 1)), $mul.ref($i50, 272)), $mul.ref(0, 1));
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} $i54 := be_cmd_cq_create($p0, $p42, $p53, 0, 3);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    call {:si_unique_call 1489} {:cexpr "rc"} boogie_si_record_i32($i54);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $i56 := $i54;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i39, 1);
    call {:si_unique_call 1490} {:cexpr "i"} boogie_si_record_i32($i57);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p40, $mul.ref(1, 24760));
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p36);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $i60 := $ult.i32($i57, $i59);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i60 == 1);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb25:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i39, $p40 := $i57, $p58;
    goto $bb25_dummy;

  $bb22:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $i46 := $i56;
    goto $bb20;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $i46 := $i45;
    goto $bb20;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} rtnl_lock();
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} vslice_dummy_var_474 := netif_set_real_num_rx_queues($p20, $i22);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} rtnl_unlock();
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(480, 1));
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i32($i5, 1);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(480, 1));
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i13 := 2;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb9;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(480, 1));
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 1);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb8;

  $bb25_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6799;
}



const be_mcc_queues_create: ref;

axiom be_mcc_queues_create == $sub.ref(0, 532750);

procedure be_mcc_queues_create($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_mcc_queues_create($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var vslice_dummy_var_476: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(40, 1));
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} $i3 := be_queue_alloc($p0, $p2, 256, 16);
    call {:si_unique_call 1493} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(488, 1));
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} $i8 := be_cmd_cq_create($p0, $p2, $p7, 1, 0);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    call {:si_unique_call 1495} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1));
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} $i12 := be_queue_alloc($p0, $p11, 128, 256);
    call {:si_unique_call 1498} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} $i14 := be_cmd_mccq_create($p0, $p11, $p2);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    call {:si_unique_call 1501} {:cexpr "tmp___2"} boogie_si_record_i32($i14);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} be_queue_free($p0, $p11);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} vslice_dummy_var_476 := be_cmd_q_destroy($p0, $p2, 2);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} be_queue_free($p0, $p2);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 1);
    goto $bb17;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i13 == 1;
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const be_cmd_get_fn_privileges: ref;

axiom be_cmd_get_fn_privileges == $sub.ref(0, 533782);

procedure be_cmd_get_fn_privileges($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_get_fn_privileges($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i7: i32;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} {:cexpr "be_cmd_get_fn_privileges:arg:domain"} boogie_si_record_i32($i2);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} spin_lock_bh($p3);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} $p4 := wrb_from_mccq($p0);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} $p8 := embedded_payload($p4);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} be_wrb_cmd_hdr_prepare($p10, 1, $sub.i8(0, 86), 20, $p4, $0.ref);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i2);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i11);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} $i14 := be_mcc_notify_wait($p0);
    call {:si_unique_call 1510} {:cexpr "status"} boogie_si_record_i32($i14);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} spin_unlock_bh($p20);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} $p16 := embedded_payload($p4);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i19);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 16);
    goto $bb3;
}



const be_is_mc: ref;

axiom be_is_mc == $sub.ref(0, 534814);

procedure be_is_mc($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation be_is_mc($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364024, 1));
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1024);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i5 := 1;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364024, 1));
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 131072);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $i5 := 1;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364024, 1));
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 16777216);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $i5 := $i13;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const be_cmd_if_create: ref;

axiom be_cmd_if_create == $sub.ref(0, 535846);

procedure be_cmd_if_create($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_if_create($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i9: i32;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} {:cexpr "be_cmd_if_create:arg:cap_flags"} boogie_si_record_i32($i1);
    call {:si_unique_call 1513} {:cexpr "be_cmd_if_create:arg:en_flags"} boogie_si_record_i32($i2);
    call {:si_unique_call 1514} {:cexpr "be_cmd_if_create:arg:domain"} boogie_si_record_i32($i4);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} spin_lock_bh($p5);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} $p6 := wrb_from_mccq($p0);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} $p10 := embedded_payload($p6);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} be_wrb_cmd_hdr_prepare($p12, 1, 50, 40, $p6, $0.ref);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i4);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i13);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i1);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i2);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 1);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} $i19 := be_mcc_notify_wait($p0);
    call {:si_unique_call 1521} {:cexpr "status"} boogie_si_record_i32($i19);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i9 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} spin_unlock_bh($p25);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} $p21 := embedded_payload($p6);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i24);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 16);
    goto $bb3;
}



const be_get_mac_addr: ref;

axiom be_get_mac_addr == $sub.ref(0, 536878);

procedure be_get_mac_addr($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.41, $M.21, $CurrAddr;



implementation be_get_mac_addr($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i16;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i16;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i8;
  var $i54: i1;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i65: i32;
  var $i64: i32;
  var $i58: i32;
  var $i39: i32;
  var cmdloc_dummy_var_273: [ref]i8;
  var cmdloc_dummy_var_274: [ref]i8;
  var cmdloc_dummy_var_275: [ref]i8;
  var cmdloc_dummy_var_276: [ref]i8;
  var cmdloc_dummy_var_277: [ref]i8;
  var cmdloc_dummy_var_278: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} {:cexpr "be_get_mac_addr:arg:if_handle"} boogie_si_record_i32($i2);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2784)), $mul.ref(452, 1));
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} $i9 := is_zero_ether_addr($p8);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 1525} {:cexpr "tmp"} boogie_si_record_i8($i10);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.0, $p42);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 57888);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i45 == 1);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.0, $p48);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i49);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 57896);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i51 == 1);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 0);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i62 == 1);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} $i65 := be_cmd_mac_addr_query($p0, $p1, 0, $i2, 0);
    call {:si_unique_call 1535} {:cexpr "status"} boogie_si_record_i32($i65);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p3, 1);
    assume {:verifier.code 0} true;
    $i64 := $i65;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i58 := $i64;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $i39 := $i58;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb28:
    assume $i62 == 1;
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} $i63 := be_cmd_mac_addr_query($p0, $p1, 1, 0, 0);
    call {:si_unique_call 1533} {:cexpr "status"} boogie_si_record_i32($i63);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p3, 0);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $i64 := $i63;
    goto $bb30;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} $i52 := be_cmd_get_mac_from_list($p0, $p1, $p3, $p4, 0);
    call {:si_unique_call 1529} {:cexpr "status"} boogie_si_record_i32($i52);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.29, $p3);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i8.i1($i53);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i57 := $i52;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $i58 := $i57;
    goto $bb27;

  $bb24:
    assume $i54 == 1;
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p4);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} $i56 := be_cmd_mac_addr_query($p0, $p1, 0, $i2, $i55);
    call {:si_unique_call 1531} {:cexpr "status"} boogie_si_record_i32($i56);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $i57 := $i56;
    goto $bb26;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb20;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $i14 := $ugt.i64(6, 63);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 2784)), $mul.ref(736, 1));
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_276 := $M.0;
    cmdloc_dummy_var_277 := $M.0;
    call {:si_unique_call 1527} cmdloc_dummy_var_278 := $memcpy.i8(cmdloc_dummy_var_276, cmdloc_dummy_var_277, $p1, $p22, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_278;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, $p25);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 57888);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p3, 0);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb17;

  $bb9:
    assume $i28 == 1;
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.0, $p31);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 57896);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb11;

  $bb12:
    assume $i34 == 1;
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb11;

  $bb14:
    assume $i38 == 1;
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p3, 1);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2784)), $mul.ref(736, 1));
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_273 := $M.0;
    cmdloc_dummy_var_274 := $M.0;
    call {:si_unique_call 1526} cmdloc_dummy_var_275 := $memcpy.i8(cmdloc_dummy_var_273, cmdloc_dummy_var_274, $p1, $p18, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_275;
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;
}



const be_cmd_pmac_add: ref;

axiom be_cmd_pmac_add == $sub.ref(0, 537910);

procedure be_cmd_pmac_add($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_pmac_add($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $p15: ref;
  var $p16: ref;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i9: i32;
  var $p28: ref;
  var $i29: i1;
  var $i30: i32;
  var cmdloc_dummy_var_279: [ref]i8;
  var cmdloc_dummy_var_280: [ref]i8;
  var cmdloc_dummy_var_281: [ref]i8;
  var cmdloc_dummy_var_282: [ref]i8;
  var cmdloc_dummy_var_283: [ref]i8;
  var cmdloc_dummy_var_284: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} {:cexpr "be_cmd_pmac_add:arg:if_id"} boogie_si_record_i32($i2);
    call {:si_unique_call 1537} {:cexpr "be_cmd_pmac_add:arg:domain"} boogie_si_record_i32($i4);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} spin_lock_bh($p5);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} $p6 := wrb_from_mccq($p0);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} $p10 := embedded_payload($p6);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 28)), $mul.ref(0, 1));
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} be_wrb_cmd_hdr_prepare($p12, 1, 59, 28, $p6, $0.ref);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i4);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 28)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i13);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p11, $mul.ref(0, 28)), $mul.ref(16, 1));
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i2);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i64(6, 63);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p11, $mul.ref(0, 28)), $mul.ref(20, 1));
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_282 := $M.0;
    cmdloc_dummy_var_283 := $M.0;
    call {:si_unique_call 1544} cmdloc_dummy_var_284 := $memcpy.i8(cmdloc_dummy_var_282, cmdloc_dummy_var_283, $p21, $p1, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_284;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} $i22 := be_mcc_notify_wait($p0);
    call {:si_unique_call 1546} {:cexpr "status"} boogie_si_record_i32($i22);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i9 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} spin_unlock_bh($p28);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i9, 5);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $i9;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 1);
    goto $bb13;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} $p24 := embedded_payload($p6);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i27);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 28)), $mul.ref(20, 1));
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_279 := $M.0;
    cmdloc_dummy_var_280 := $M.0;
    call {:si_unique_call 1543} cmdloc_dummy_var_281 := $memcpy.i8(cmdloc_dummy_var_279, cmdloc_dummy_var_280, $p19, $p1, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_281;
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 16);
    goto $bb3;
}



const is_zero_ether_addr: ref;

axiom is_zero_ether_addr == $sub.ref(0, 538942);

procedure is_zero_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_zero_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i8;
  var $i2: i32;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i2, $i5);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i6, $i9);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p0, $mul.ref(3, 1));
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i10, $i13);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i14, $i17);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p0, $mul.ref(5, 1));
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i18, $i21);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;
}



const be_tx_qs_create: ref;

axiom be_tx_qs_create == $sub.ref(0, 539974);

procedure be_tx_qs_create($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_tx_qs_create($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p8: ref;
  var $i9: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i14: i32;
  var vslice_dummy_var_477: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(4136, 1));
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64(0);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p2, $mul.ref($i3, 16528));
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(4132, 1));
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $i7 := $ult.i32(0, $i6);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(4132, 1));
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} vslice_dummy_var_477 := _dev_info.ref.ref.i32($p24, .str.127, $i26);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $p8, $i9 := $p4, 0;
    goto $bb4;

  $bb4:
    call $p10, $i11, $i12, $i13, $i15, $i16, $i17, $i18, $p19, $i20, $i21, $p8, $i9 := be_tx_qs_create_loop_$bb4($p0, $p5, $p10, $i11, $i12, $i13, $i15, $i16, $i17, $i18, $p19, $i20, $i21, $p8, $i9);
    goto $bb4_last;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 16528)), $mul.ref(8, 1));
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} $i11 := be_queue_alloc($p0, $p10, 2048, 16);
    call {:si_unique_call 1549} {:cexpr "status"} boogie_si_record_i32($i11);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} $i15 := be_cmd_txq_create($p0, $p8);
    call {:si_unique_call 1551} {:cexpr "status"} boogie_si_record_i32($i15);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $i17 := $i15;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i9, 1);
    call {:si_unique_call 1552} {:cexpr "i"} boogie_si_record_i32($i18);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p8, $mul.ref(1, 16528));
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p5);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $i21 := $ult.i32($i18, $i20);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $p8, $i9 := $p19, $i18;
    goto $bb13_dummy;

  $bb10:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $i14 := $i17;
    goto $bb8;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb8;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7136;
}



const be_cmd_get_fw_ver: ref;

axiom be_cmd_get_fw_ver == $sub.ref(0, 541006);

procedure be_cmd_get_fw_ver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_get_fw_ver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i7: i32;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} spin_lock_bh($p3);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} $p4 := wrb_from_mccq($p0);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} $p8 := embedded_payload($p4);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} be_wrb_cmd_hdr_prepare($p10, 1, 35, 80, $p4, $0.ref);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} $i11 := be_mcc_notify_wait($p0);
    call {:si_unique_call 1560} {:cexpr "status"} boogie_si_record_i32($i11);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} spin_unlock_bh($p23);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} $p13 := embedded_payload($p4);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} $p17 := strcpy($p1, $p16);
    assume $isExternal($p17);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p2);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p14, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} $p22 := strcpy($p2, $p21);
    assume $isExternal($p22);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 16);
    goto $bb3;
}



const be_vid_config: ref;

axiom be_vid_config == $sub.ref(0, 542038);

procedure be_vid_config($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_vid_config($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $i15: i32;
  var $i16: i64;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $i24: i16;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i32;
  var $i31: i16;
  var $i32: i32;
  var $i33: i1;
  var $i13: i16;
  var $i14: i16;
  var $i34: i16;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i5: i32;
  var vslice_dummy_var_478: i32;
  var vslice_dummy_var_479: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} $p1 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364020, 1));
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359344, 1));
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364298, 1));
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i8, $i11);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i13, $i14 := 0, 0;
    goto $bb9;

  $bb9:
    call $i15, $i16, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $p27, $i28, $i29, $i30, $i31, $i32, $i33, $i13, $i14, $i34 := be_vid_config_loop_$bb9($p0, $p1, $i15, $i16, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $p27, $i28, $i29, $i30, $i31, $i32, $i33, $i13, $i14, $i34);
    goto $bb9_last;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359346, 1)), $mul.ref($i16, 1));
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i28 := $i13;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i14);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, 1);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    call {:si_unique_call 1568} {:cexpr "i"} boogie_si_record_i16($i31);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $i33 := $ule.i32($i32, 4095);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $i34 := $i28;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363992, 1));
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p1);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i34);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} $i39 := be_cmd_vlan_config($p0, $i36, $p37, $i38, 1, 0);
    call {:si_unique_call 1570} {:cexpr "status"} boogie_si_record_i32($i39);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i5 := $i39;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb17:
    assume $i40 == 1;
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} vslice_dummy_var_478 := _dev_info.ref.ref($p43, .str.108);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} vslice_dummy_var_479 := _dev_info.ref.ref($p47, .str.109);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363992, 1));
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} $i51 := be_cmd_vlan_config($p0, $i50, $0.ref, 0, 1, 1);
    call {:si_unique_call 1566} {:cexpr "status"} boogie_si_record_i32($i51);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $i5 := $i51;
    goto $bb3;

  $bb14:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i13, $i14 := $i28, $i31;
    goto $bb14_dummy;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i13);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, 1);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    call {:si_unique_call 1567} {:cexpr "num"} boogie_si_record_i16($i24);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i13);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref($i26, 2));
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p27, $i14);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $i28 := $i24;
    goto $bb13;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7222;
}



const be_set_rx_mode: ref;

axiom be_set_rx_mode == $sub.ref(0, 543070);

procedure be_set_rx_mode($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_set_rx_mode($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i1;
  var $p12: ref;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i16;
  var $i28: i32;
  var $i29: i1;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $i47: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i40: i32;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $i60: i16;
  var $i61: i32;
  var $i62: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $p74: ref;
  var $p75: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i64;
  var $p94: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $p102: ref;
  var $p104: ref;
  var $i105: i64;
  var $i106: i1;
  var $p80: ref;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var vslice_dummy_var_480: i32;
  var vslice_dummy_var_481: i32;
  var vslice_dummy_var_482: i32;
  var vslice_dummy_var_483: i32;
  var vslice_dummy_var_484: i32;
  var vslice_dummy_var_485: i32;
  var vslice_dummy_var_486: i32;
  var vslice_dummy_var_487: i32;
  var vslice_dummy_var_488: i32;
  var vslice_dummy_var_489: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} $p1 := netdev_priv($p0);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(424, 1));
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 256);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(364020, 1));
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(424, 1));
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 512);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i22 == 1);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(592, 1)), $mul.ref(16, 1));
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(364288, 1));
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $i27 := $load.i16($M.0, $p26);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i29 := $sgt.i32($i25, $i28);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(568, 1)), $mul.ref(16, 1));
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(364272, 1));
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i33, $i35);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} $i107 := be_cmd_rx_filter($p2, 4096, 1);
    call {:si_unique_call 1583} {:cexpr "status"} boogie_si_record_i32($i107);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb39:
    assume $i108 == 1;
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p110, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} vslice_dummy_var_487 := _dev_info.ref.ref($p111, .str.106);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p114, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} vslice_dummy_var_488 := _dev_info.ref.ref($p115, .str.107);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} vslice_dummy_var_489 := be_cmd_rx_filter($p2, 512, 1);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb17:
    assume $i36 == 1;
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(364272, 1));
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(568, 1)), $mul.ref(16, 1));
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(364296, 1));
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.0, $p59);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i62 := $sgt.i32($i58, $i61);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($add.ref($p66, $mul.ref(0, 2784)), $mul.ref(568, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p75, $mul.ref(0, 2784)), $mul.ref(568, 1)), $mul.ref(0, 1));
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i73, $i78);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb30:
    assume $i79 == 1;
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $p80 := $p70;
    goto $bb33;

  $bb33:
    call $p81, $i82, $i83, $p84, $p85, $p86, $p87, $i88, $p89, $p90, $p91, $i92, $i93, $p94, $p97, $p98, $p99, $p100, $i101, $p102, $p104, $i105, $i106, $p80, vslice_dummy_var_486 := be_set_rx_mode_loop_$bb33($p2, $p74, $p81, $i82, $i83, $p84, $p85, $p86, $p87, $i88, $p89, $p90, $p91, $i92, $i93, $p94, $p97, $p98, $p99, $p100, $i101, $p102, $p104, $i105, $i106, $p80, vslice_dummy_var_486);
    goto $bb33_last;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(364272, 1));
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $i83 := $add.i32($i82, 1);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(364272, 1));
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, $i83);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p80, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(363992, 1));
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(364000, 1));
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(364272, 1));
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $i93 := $zext.i32.i64($i92);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p90, $mul.ref($i93, 4));
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} vslice_dummy_var_486 := be_cmd_pmac_add($p2, $p86, $i88, $p94, 0);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p80, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p100);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p74);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p102, $mul.ref(0, 2784)), $mul.ref(568, 1)), $mul.ref(0, 1));
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p104);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i101, $i105);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i106 == 1);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb35:
    assume $i106 == 1;
    assume {:verifier.code 0} true;
    $p80 := $p98;
    goto $bb35_dummy;

  $bb27:
    assume $i62 == 1;
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} vslice_dummy_var_485 := be_cmd_rx_filter($p2, 256, 1);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(364020, 1));
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, 1);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19:
    assume $i39 == 1;
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i40 := 1;
    goto $bb22;

  $bb22:
    call $p41, $i42, $p43, $p44, $i45, $p46, $i47, $p49, $i50, $i51, $p52, $i53, $i54, $i55, $i40, vslice_dummy_var_484 := be_set_rx_mode_loop_$bb22($p2, $p37, $p41, $i42, $p43, $p44, $i45, $p46, $i47, $p49, $i50, $i51, $p52, $i53, $i54, $i55, $i40, vslice_dummy_var_484);
    goto $bb22_last;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(363992, 1));
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(364000, 1));
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i40);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p44, $mul.ref($i45, 4));
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} vslice_dummy_var_484 := be_cmd_pmac_del($p2, $i42, $i47, 0);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(364272, 1));
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32($i50, 1);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(364272, 1));
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $i51);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i40, 1);
    call {:si_unique_call 1579} {:cexpr "i"} boogie_si_record_i32($i53);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p37);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i55 == 1);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb24:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i40 := $i53;
    goto $bb24_dummy;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} vslice_dummy_var_483 := be_cmd_rx_filter($p2, 512, 1);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb12;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(364020, 1));
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 0);
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} vslice_dummy_var_481 := be_cmd_rx_filter($p2, 256, 0);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(359344, 1));
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} vslice_dummy_var_482 := be_vid_config($p2);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} vslice_dummy_var_480 := be_cmd_rx_filter($p2, 256, 1);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(364020, 1));
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 1);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb35_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7369;

  $bb24_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7321;
}



const be_cmd_get_flow_control: ref;

axiom be_cmd_get_flow_control == $sub.ref(0, 544102);

procedure be_cmd_get_flow_control($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_get_flow_control($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i13: i32;
  var $p27: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} $i3 := be_cmd_allowed($p0, 37, 1);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1588} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} spin_lock_bh($p9);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} $p10 := wrb_from_mccq($p0);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} $p14 := embedded_payload($p10);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} be_wrb_cmd_hdr_prepare($p16, 1, 37, 20, $p10, $0.ref);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} $i17 := be_mcc_notify_wait($p0);
    call {:si_unique_call 1595} {:cexpr "status"} boogie_si_record_i32($i17);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i13 := $i17;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} spin_unlock_bh($p27);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb12:
    assume $i18 == 1;
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} $p19 := embedded_payload($p10);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i23);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p20, $mul.ref(0, 20)), $mul.ref(18, 1));
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i26);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 16);
    goto $bb10;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const be_cmd_set_flow_control: ref;

axiom be_cmd_set_flow_control == $sub.ref(0, 545134);

procedure be_cmd_set_flow_control($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_set_flow_control($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $p18: ref;
  var $i19: i16;
  var $p20: ref;
  var $i21: i32;
  var $i13: i32;
  var $p22: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} {:cexpr "be_cmd_set_flow_control:arg:tx_fc"} boogie_si_record_i32($i1);
    call {:si_unique_call 1598} {:cexpr "be_cmd_set_flow_control:arg:rx_fc"} boogie_si_record_i32($i2);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} $i3 := be_cmd_allowed($p0, 36, 1);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1600} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} spin_lock_bh($p9);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} $p10 := wrb_from_mccq($p0);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} $p14 := embedded_payload($p10);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} be_wrb_cmd_hdr_prepare($p16, 1, 36, 20, $p10, $0.ref);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i1);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p18, $i17);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i2);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p15, $mul.ref(0, 20)), $mul.ref(18, 1));
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, $i19);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} $i21 := be_mcc_notify_wait($p0);
    call {:si_unique_call 1607} {:cexpr "status"} boogie_si_record_i32($i21);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $i13 := $i21;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} spin_unlock_bh($p22);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 16);
    goto $bb10;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const be_vf_setup: ref;

axiom be_vf_setup == $sub.ref(0, 546166);

procedure be_vf_setup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.21, $M.1, $M.46, $M.42, $M.40, $CurrAddr, $M.41, $M.47, $M.29, $M.25, assertsPassed, $M.26;



implementation be_vf_setup($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i22: i32;
  var $i23: i16;
  var $p24: ref;
  var $i25: i32;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i32: i32;
  var $i31: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i38: i32;
  var $i39: i1;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $i49: i32;
  var $p50: ref;
  var $i58: i32;
  var $i59: i1;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i16;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i16;
  var $i84: i32;
  var $i85: i1;
  var $i86: i1;
  var $i87: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i92: i16;
  var $i93: i32;
  var $p94: ref;
  var $i95: i32;
  var $p96: ref;
  var $i97: i32;
  var $i98: i16;
  var $i99: i32;
  var $i100: i16;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $i104: i16;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i32;
  var $i109: i8;
  var $i111: i32;
  var $p112: ref;
  var $i113: i32;
  var $i114: i1;
  var $i72: i32;
  var $p73: ref;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i32;
  var $i120: i32;
  var $i121: i1;
  var $p123: ref;
  var $i40: i32;
  var $i37: i32;
  var vslice_dummy_var_490: i32;
  var vslice_dummy_var_491: i32;
  var vslice_dummy_var_492: i32;
  var vslice_dummy_var_493: i32;
  var vslice_dummy_var_494: i32;
  var vslice_dummy_var_495: i32;
  var vslice_dummy_var_496: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} $i6 := be_find_vfs($p0, 0);
    call {:si_unique_call 1611} {:cexpr "old_vfs"} boogie_si_record_i32($i6);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364204, 1));
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $i16 := $M.39;
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $i17 := $ult.i32($i15, $i16);
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i22 := $M.39;
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    call {:si_unique_call 1617} {:cexpr "__min1"} boogie_si_record_i16($i23);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364204, 1));
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    call {:si_unique_call 1618} {:cexpr "__min2"} boogie_si_record_i16($i26);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i23);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i26);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i27, $i28);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i26);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $i31 := $i32;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364200, 1));
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i31);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364200, 1));
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} $i38 := be_vf_setup_init($p0);
    call {:si_unique_call 1615} {:cexpr "status"} boogie_si_record_i32($i38);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i6, 0);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i41 == 1);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} $i58 := be_vfs_if_create($p0);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    call {:si_unique_call 1622} {:cexpr "status"} boogie_si_record_i32($i58);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i6, 0);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i60 == 1);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} $i63 := be_vf_eth_addr_config($p0);
    call {:si_unique_call 1629} {:cexpr "status"} boogie_si_record_i32($i63);
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364216, 1));
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64(0);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p66, $mul.ref($i67, 24));
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364200, 1));
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $i71 := $ult.i32(0, $i70);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i6, 0);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  $bb70:
    assume $i115 == 1;
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364200, 1));
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p118);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} $i120 := pci_enable_sriov($p117, $i119);
    call {:si_unique_call 1638} {:cexpr "status"} boogie_si_record_i32($i120);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb72:
    assume $i121 == 1;
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} vslice_dummy_var_496 := dev_err.ref.ref($p5, .str.131);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364200, 1));
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p123, 0);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $i40 := $i120;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} vslice_dummy_var_493 := dev_err.ref.ref($p5, .str.132);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} be_vf_clear($p0);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $i37 := $i40;
    goto $bb15;

  $bb47:
    assume $i71 == 1;
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $i72, $p73 := 0, $p68;
    goto $bb50;

  $bb50:
    call $p74, $p75, $p76, $i77, $i78, $i79, $p80, $p81, $p82, $i83, $i84, $i85, $i86, $i87, $i89, $i90, $i91, $i92, $i93, $p94, $i95, $p96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $p105, $i106, $i107, $i108, $i109, $i111, $p112, $i113, $i114, $i72, $p73, vslice_dummy_var_494, vslice_dummy_var_495 := be_vf_setup_loop_$bb50($p0, $p1, $p2, $i6, $p69, $p74, $p75, $p76, $i77, $i78, $i79, $p80, $p81, $p82, $i83, $i84, $i85, $i86, $i87, $i89, $i90, $i91, $i92, $i93, $p94, $i95, $p96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $p105, $i106, $i107, $i108, $i109, $i111, $p112, $i113, $i114, $i72, $p73, vslice_dummy_var_494, vslice_dummy_var_495);
    goto $bb50_last;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $i77 := $load.i16($M.0, $p76);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i77);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 545);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb54;

  $bb54:
    assume !($i79 == 1);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $i83 := $load.i16($M.0, $p82);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $i84 := $zext.i16.i32($i83);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 1808);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i72, 1);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} $i90 := be_cmd_link_status_query($p0, $p2, $0.ref, $i89);
    call {:si_unique_call 1632} {:cexpr "status"} boogie_si_record_i32($i90);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 0);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i95 := $add.i32($i72, 1);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p73, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i16($i97);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $i99 := $zext.i16.i32($i98);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i32.i16($i99);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} $i101 := be_cmd_get_hsw_config($p0, $p1, $i95, $i100);
    call {:si_unique_call 1634} {:cexpr "status"} boogie_si_record_i32($i101);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $i103 := $i101;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i104 := $load.i16($M.40, $p1);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p73, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p105, $i104);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i32.i8($i72);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $i108 := $add.i32($i107, 1);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i8($i108);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} vslice_dummy_var_495 := be_cmd_enable_vf($p0, $i109);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i72, 1);
    call {:si_unique_call 1636} {:cexpr "vf"} boogie_si_record_i32($i111);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($p73, $mul.ref(1, 24));
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p69);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $i114 := $ult.i32($i111, $i113);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i114 == 1);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb67:
    assume $i114 == 1;
    assume {:verifier.code 0} true;
    $i72, $p73 := $i111, $p112;
    goto $bb67_dummy;

  $bb64:
    assume $i102 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $i40 := $i103;
    goto $bb19;

  $bb61:
    assume $i91 == 1;
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $i92 := $load.i16($M.1, $p2);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $i93 := $zext.i16.i32($i92);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p73, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, $i93);
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i6, 0);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb57;

  $bb58:
    assume $i86 == 1;
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $i87 := $add.i32($i72, 1);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} vslice_dummy_var_494 := be_cmd_set_qos($p0, 1000, $i87);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb53;

  $bb44:
    assume $i64 == 1;
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $i40 := $i63;
    goto $bb19;

  $bb38:
    assume $i60 == 1;
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} $i61 := be_vfs_mac_query($p0);
    call {:si_unique_call 1627} {:cexpr "status"} boogie_si_record_i32($i61);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb40:
    assume $i62 == 1;
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $i40 := $i61;
    goto $bb19;

  $bb35:
    assume $i59 == 1;
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $i40 := $i58;
    goto $bb19;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i41 == 1;
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364216, 1));
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64(0);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p43, $mul.ref($i44, 24));
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364200, 1));
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $i48 := $ult.i32(0, $i47);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb23:
    assume $i48 == 1;
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $i49, $p50 := 0, $p45;
    goto $bb26;

  $bb26:
    call $i51, $i52, $i53, $i54, $p55, $i56, $i57, $i49, $p50 := be_vf_setup_loop_$bb26($p0, $p46, $i51, $i52, $i53, $i54, $p55, $i56, $i57, $i49, $p50);
    goto $bb26_last;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} $i51 := be_cmd_get_if_id($p0, $p50, $i49);
    call {:si_unique_call 1624} {:cexpr "status"} boogie_si_record_i32($i51);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $i53 := $i51;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i49, 1);
    call {:si_unique_call 1625} {:cexpr "vf"} boogie_si_record_i32($i54);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p50, $mul.ref(1, 24));
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p46);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $i57 := $ult.i32($i54, $i56);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i57 == 1);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb31:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i49, $p50 := $i54, $p55;
    goto $bb31_dummy;

  $bb28:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $i40 := $i53;
    goto $bb19;

  $bb17:
    assume $i39 == 1;
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $i40 := $i38;
    goto $bb19;

  $bb13:
    assume $i36 == 1;
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb15;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i23);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb12;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364204, 1));
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $i20 := $M.39;
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} vslice_dummy_var_492 := _dev_info.ref.ref.i32.i32($p5, .str.130, $i19, $i20);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} vslice_dummy_var_490 := _dev_info.ref.ref.i32($p5, .str.128, $i6);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $i9 := $M.39;
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i6, $i9);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364200, 1));
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i6);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $i11 := $M.39;
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} vslice_dummy_var_491 := dev_warn.ref.ref.i32($p5, .str.129, $i11);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb67_dummy:
    assume false;
    return;

  $bb50_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7619;

  $bb31_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7579;
}



const be_cmd_get_phy_info: ref;

axiom be_cmd_get_phy_info == $sub.ref(0, 547198);

procedure be_cmd_get_phy_info($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.21, $CurrAddr;



implementation be_cmd_get_phy_info($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $i41: i16;
  var $p43: ref;
  var $p44: ref;
  var $i45: i16;
  var $p47: ref;
  var $p48: ref;
  var $i49: i16;
  var $p51: ref;
  var $p52: ref;
  var $i53: i16;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i12: i32;
  var $p69: ref;
  var $i7: i32;
  var vslice_dummy_var_497: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} $p1 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} $i2 := be_cmd_allowed($p0, 102, 1);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1642} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} spin_lock_bh($p8);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} $p9 := wrb_from_mccq($p0);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p13, 40);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.41, $p16);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} $p20 := pci_alloc_consistent($p15, $i18, $p19);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p21, $p20);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.41, $p22);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.41, $p30);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} be_wrb_cmd_hdr_prepare($p33, 1, 102, 40, $p9, $p1);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} $i34 := be_mcc_notify_wait($p0);
    call {:si_unique_call 1650} {:cexpr "status"} boogie_si_record_i32($i34);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.41, $p62);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $i64 := $zext.i32.i64($i63);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.41, $p65);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $i68 := $load.i64($M.41, $p67);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} pci_free_consistent($p61, $i64, $p66, $i68);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $i12 := $i34;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} spin_unlock_bh($p69);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb15:
    assume $i35 == 1;
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.41, $p36);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p38, $mul.ref(16, 24)), $mul.ref(0, 1));
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(4, 1));
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p43, $i41);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p38, $mul.ref(16, 24)), $mul.ref(2, 1));
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.0, $p44);
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(6, 1));
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p47, $i45);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p38, $mul.ref(16, 24)), $mul.ref(12, 1));
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.0, $p48);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(12, 1));
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p51, $i49);
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p38, $mul.ref(16, 24)), $mul.ref(14, 1));
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.0, $p52);
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(14, 1));
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p55, $i53);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p38, $mul.ref(16, 24)), $mul.ref(4, 1));
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(8, 1));
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $i57);
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} vslice_dummy_var_497 := dev_err.ref.ref($p28, .str.18);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb10;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 16);
    goto $bb10;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 1);
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const be_pause_supported: ref;

axiom be_pause_supported == $sub.ref(0, 548230);

procedure be_pause_supported($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation be_pause_supported($p0: ref) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(6, 1));
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 3);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $i6 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(6, 1));
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 1);
    assume {:verifier.code 0} true;
    $i6 := $i11;
    goto $bb3;
}



const be_clear: ref;

axiom be_clear == $sub.ref(0, 549262);

procedure be_clear($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $M.42, $CurrAddr, $M.25, assertsPassed, $M.26;



implementation be_clear($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i17: i32;
  var $p33: ref;
  var $i34: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var vslice_dummy_var_498: i1;
  var vslice_dummy_var_499: i32;
  var vslice_dummy_var_500: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363952, 1));
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 8);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364200, 1));
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364272, 1));
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363992, 1));
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} vslice_dummy_var_500 := be_cmd_if_destroy($p0, $i34, 0);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} be_mcc_queues_destroy($p0);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} be_rx_cqs_destroy($p0);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} be_tx_queues_destroy($p0);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} be_evt_queues_destroy($p0);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364000, 1));
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} kfree($p38);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364000, 1));
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $0.ref);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} be_msix_disable($p0);
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb10;

  $bb10:
    call $p18, $i19, $p20, $p21, $i22, $p23, $i24, $p26, $i27, $i28, $p29, $i30, $i31, $i32, $i17, vslice_dummy_var_499 := be_clear_loop_$bb10($p0, $p14, $p18, $i19, $p20, $p21, $i22, $p23, $i24, $p26, $i27, $i28, $p29, $i30, $i31, $i32, $i17, vslice_dummy_var_499);
    goto $bb10_last;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363992, 1));
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364000, 1));
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i17);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p21, $mul.ref($i22, 4));
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} vslice_dummy_var_499 := be_cmd_pmac_del($p0, $i19, $i24, 0);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364272, 1));
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32($i27, 1);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364272, 1));
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i17, 1);
    call {:si_unique_call 1655} {:cexpr "i"} boogie_si_record_i32($i30);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p14);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i32 == 1);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb12:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i17 := $i30;
    goto $bb12_dummy;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} be_vf_clear($p0);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363496, 1));
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} vslice_dummy_var_498 := cancel_delayed_work_sync($p5);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363952, 1));
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, $sub.i32(0, 9));
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363952, 1));
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7827;
}



const be_vf_clear: ref;

axiom be_vf_clear == $sub.ref(0, 550294);

procedure be_vf_clear($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.42, $M.21, $CurrAddr;



implementation be_vf_clear($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i16;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i16: i32;
  var $p17: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var vslice_dummy_var_501: i32;
  var vslice_dummy_var_502: i32;
  var vslice_dummy_var_503: i32;
  var vslice_dummy_var_504: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} $i1 := be_find_vfs($p0, 1);
    call {:si_unique_call 1664} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} pci_disable_sriov($p8);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364216, 1));
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64(0);
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p10, $mul.ref($i11, 24));
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364200, 1));
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i32($i14, 0);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364216, 1));
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} kfree($p48);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364200, 1));
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 0);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $i16, $p17 := 0, $p12;
    goto $bb8;

  $bb8:
    call $p18, $p19, $p20, $i21, $i22, $i23, $p24, $p25, $p26, $i27, $i28, $i29, $i30, $p32, $i33, $p34, $i35, $i36, $p38, $i39, $i40, $i42, $p43, $i44, $i45, $i16, $p17, vslice_dummy_var_502, vslice_dummy_var_503, vslice_dummy_var_504 := be_vf_clear_loop_$bb8($p0, $p13, $p18, $p19, $p20, $i21, $i22, $i23, $p24, $p25, $p26, $i27, $i28, $i29, $i30, $p32, $i33, $p34, $i35, $i36, $p38, $i39, $i40, $i42, $p43, $i44, $i45, $i16, $p17, vslice_dummy_var_502, vslice_dummy_var_503, vslice_dummy_var_504);
    goto $bb8_last;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 57888);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i23 == 1);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $i27 := $load.i16($M.0, $p26);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 57896);
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p17, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p17, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i16, 1);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} vslice_dummy_var_503 := be_cmd_pmac_del($p0, $i33, $i35, $i36);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p17, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i16, 1);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} vslice_dummy_var_504 := be_cmd_if_destroy($p0, $i39, $i40);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i16, 1);
    call {:si_unique_call 1671} {:cexpr "vf"} boogie_si_record_i32($i42);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p17, $mul.ref(1, 24));
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p13);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $i45 := $ugt.i32($i44, $i42);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i45 == 1);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb16:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i16, $p17 := $i42, $p43;
    goto $bb16_dummy;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i16, 1);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} vslice_dummy_var_502 := be_cmd_set_mac_list($p0, $0.ref, 0, $i30);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb11;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} vslice_dummy_var_501 := dev_warn.ref.ref($p5, .str.118);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7893;
}



const be_cmd_pmac_del: ref;

axiom be_cmd_pmac_del == $sub.ref(0, 551326);

procedure be_cmd_pmac_del($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_pmac_del($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i10: i32;
  var $p20: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} {:cexpr "be_cmd_pmac_del:arg:if_id"} boogie_si_record_i32($i1);
    call {:si_unique_call 1673} {:cexpr "be_cmd_pmac_del:arg:pmac_id"} boogie_si_record_i32($i2);
    call {:si_unique_call 1674} {:cexpr "be_cmd_pmac_del:arg:dom"} boogie_si_record_i32($i3);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i2, $sub.i32(0, 1));
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} spin_lock_bh($p6);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} $p7 := wrb_from_mccq($p0);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} $p11 := embedded_payload($p7);
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} be_wrb_cmd_hdr_prepare($p13, 1, 60, 24, $p7, $0.ref);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i3);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i14);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i1);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i2);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} $i19 := be_mcc_notify_wait($p0);
    call {:si_unique_call 1681} {:cexpr "status"} boogie_si_record_i32($i19);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $i10 := $i19;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} spin_unlock_bh($p20);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 16);
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const be_cmd_if_destroy: ref;

axiom be_cmd_if_destroy == $sub.ref(0, 552358);

procedure be_cmd_if_destroy($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_if_destroy($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i9: i32;
  var $p18: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} {:cexpr "be_cmd_if_destroy:arg:interface_id"} boogie_si_record_i32($i1);
    call {:si_unique_call 1683} {:cexpr "be_cmd_if_destroy:arg:domain"} boogie_si_record_i32($i2);
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} spin_lock_bh($p5);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} $p6 := wrb_from_mccq($p0);
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} $p10 := embedded_payload($p6);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} be_wrb_cmd_hdr_prepare($p12, 1, 51, 20, $p6, $0.ref);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i2);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i13);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p11, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i1);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} $i17 := be_mcc_notify_wait($p0);
    call {:si_unique_call 1690} {:cexpr "status"} boogie_si_record_i32($i17);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $i9 := $i17;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} spin_unlock_bh($p18);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $i4 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 16);
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const be_mcc_queues_destroy: ref;

axiom be_mcc_queues_destroy == $sub.ref(0, 553390);

procedure be_mcc_queues_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_mcc_queues_destroy($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i1;
  var vslice_dummy_var_505: i32;
  var vslice_dummy_var_506: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1));
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1)), $mul.ref(34, 1));
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} be_queue_free($p0, $p2);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(40, 1));
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(40, 1)), $mul.ref(34, 1));
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} be_queue_free($p0, $p8);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} vslice_dummy_var_506 := be_cmd_q_destroy($p0, $p8, 2);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} vslice_dummy_var_505 := be_cmd_q_destroy($p0, $p2, 5);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_235:
    assume !assertsPassed;
    return;
}



const be_rx_cqs_destroy: ref;

axiom be_rx_cqs_destroy == $sub.ref(0, 554422);

procedure be_rx_cqs_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_rx_cqs_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i1;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i8: i32;
  var $p9: ref;
  var vslice_dummy_var_507: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136368, 1));
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64(0);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p2, $mul.ref($i3, 24760));
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $i7 := $ult.i32(0, $i6);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $i8, $p9 := 0, $p4;
    goto $bb4;

  $bb4:
    call $p10, $p11, $i12, $i13, $i15, $p16, $i17, $i18, $i8, $p9, vslice_dummy_var_507 := be_rx_cqs_destroy_loop_$bb4($p0, $p5, $p10, $p11, $i12, $i13, $i15, $p16, $i17, $i18, $i8, $p9, vslice_dummy_var_507);
    goto $bb4_last;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 24760)), $mul.ref(48, 1));
    $p11 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 24760)), $mul.ref(48, 1)), $mul.ref(34, 1));
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} be_queue_free($p0, $p10);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i8, 1);
    call {:si_unique_call 1697} {:cexpr "i"} boogie_si_record_i32($i15);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p9, $mul.ref(1, 24760));
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p5);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $i18 := $ult.i32($i15, $i17);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i8, $p9 := $i15, $p16;
    goto $bb9_dummy;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} vslice_dummy_var_507 := be_cmd_q_destroy($p0, $p10, 2);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8022;
}



const be_tx_queues_destroy: ref;

axiom be_tx_queues_destroy == $sub.ref(0, 555454);

procedure be_tx_queues_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_tx_queues_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i8;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i8: i8;
  var $p9: ref;
  var vslice_dummy_var_508: i32;
  var vslice_dummy_var_509: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(4136, 1));
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i64(0);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p2, $mul.ref($i3, 16528));
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(4132, 1));
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $i7 := $ult.i32(0, $i6);
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $i8, $p9 := 0, $p4;
    goto $bb4;

  $bb4:
    call $p10, $p11, $i12, $i13, $p15, $p16, $i17, $i18, $i20, $i21, $i22, $p23, $i24, $i25, $i26, $i8, $p9, vslice_dummy_var_508, vslice_dummy_var_509 := be_tx_queues_destroy_loop_$bb4($p0, $p5, $p10, $p11, $i12, $i13, $p15, $p16, $i17, $i18, $i20, $i21, $i22, $p23, $i24, $i25, $i26, $i8, $p9, vslice_dummy_var_508, vslice_dummy_var_509);
    goto $bb4_last;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 16528)), $mul.ref(8, 1));
    $p11 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(34, 1));
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} be_queue_free($p0, $p10);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p9, $mul.ref(0, 16528)), $mul.ref(48, 1));
    $p16 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 16528)), $mul.ref(48, 1)), $mul.ref(34, 1));
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} be_queue_free($p0, $p15);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i8);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, 1);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    call {:si_unique_call 1702} {:cexpr "i"} boogie_si_record_i8($i22);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p9, $mul.ref(1, 16528));
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i22);
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p5);
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $i26 := $ult.i32($i24, $i25);
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i26 == 1);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i8, $p9 := $i22, $p23;
    goto $bb12_dummy;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} vslice_dummy_var_509 := be_cmd_q_destroy($p0, $p15, 2);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} vslice_dummy_var_508 := be_cmd_q_destroy($p0, $p10, 3);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8050;
}



const be_evt_queues_destroy: ref;

axiom be_evt_queues_destroy == $sub.ref(0, 556486);

procedure be_evt_queues_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_evt_queues_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i1;
  var $p14: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i8: i32;
  var $p9: ref;
  var vslice_dummy_var_510: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(488, 1));
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64(0);
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p2, $mul.ref($i3, 272));
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(484, 1));
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $i7 := $ult.i32(0, $i6);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $i8, $p9 := 0, $p4;
    goto $bb4;

  $bb4:
    call $p11, $i12, $i13, $p14, $p16, $i17, $p18, $i19, $i20, $i8, $p9, vslice_dummy_var_510 := be_evt_queues_destroy_loop_$bb4($p0, $p5, $p11, $i12, $i13, $p14, $p16, $i17, $p18, $i19, $i20, $i8, $p9, vslice_dummy_var_510);
    goto $bb4_last;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(34, 1));
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p9, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} be_queue_free($p0, $p16);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i8, 1);
    call {:si_unique_call 1706} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p9, $mul.ref(1, 272));
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p5);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $i20 := $ult.i32($i17, $i19);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i8, $p9 := $i17, $p18;
    goto $bb9_dummy;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} be_eq_clean($p9);
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p9, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} vslice_dummy_var_510 := be_cmd_q_destroy($p0, $p14, 1);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8089;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 557518);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} free_($p0);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 558550);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 1708} $free($p0);
    return;
}



const be_cmd_q_destroy: ref;

axiom be_cmd_q_destroy == $sub.ref(0, 559582);

procedure be_cmd_q_destroy($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_cmd_q_destroy($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i8;
  var $i17: i8;
  var $p18: ref;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i8;
  var $p23: ref;
  var $i24: i16;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} {:cexpr "be_cmd_q_destroy:arg:queue_type"} boogie_si_record_i32($i2);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} $i4 := ldv_mutex_lock_interruptible_28($p3);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    call {:si_unique_call 1711} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} $p7 := wrb_from_mbox($p0);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} $p8 := embedded_payload($p7);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i2, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i2, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    call {:si_unique_call 1718} devirtbounce.2(0, .str.14, 1308, 12);
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    call be_cmd_q_destroy_loop_$bb21();
    goto $bb21_last;

  $bb12:
    assume $i13 == 1;
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $i16, $i17 := 1, 53;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p9, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i16);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i17);
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} be_wrb_cmd_hdr_prepare($p18, $i20, $i22, 20, $p7, $0.ref);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p9, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, $i24);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} $i26 := be_mbox_notify_wait($p0);
    call {:si_unique_call 1716} {:cexpr "status"} boogie_si_record_i32($i26);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(34, 1));
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, 0);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} ldv_mutex_unlock_29($p28);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $i6 := $i26;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i12 == 1;
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i16, $i17 := 3, 10;
    goto $bb19;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $i16, $i17 := 3, 9;
    goto $bb19;

  $bb6:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i14 == 1);
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $i16, $i17 := 1, 54;
    goto $bb19;

  $bb15:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb14;

  $bb17:
    assume $i15 == 1;
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $i16, $i17 := 1, 55;
    goto $bb19;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 1);
    goto $bb3;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb21_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto $bb21_dummy;
}



const ldv_mutex_lock_interruptible_28: ref;

axiom ldv_mutex_lock_interruptible_28 == $sub.ref(0, 560614);

procedure ldv_mutex_lock_interruptible_28($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_interruptible_28($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 1720} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} $i2 := ldv_mutex_lock_interruptible_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    call {:si_unique_call 1722} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_29: ref;

axiom ldv_mutex_unlock_29 == $sub.ref(0, 561646);

procedure ldv_mutex_unlock_29($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_29($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} ldv_mutex_unlock_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} mutex_unlock($p0);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;
}



const be_find_vfs: ref;

axiom be_find_vfs == $sub.ref(0, 562678);

procedure be_find_vfs($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation be_find_vfs($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i11: i32;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $i33: i32;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $i46: i16;
  var $i47: i32;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i51: i32;
  var $i52: i32;
  var $i19: i32;
  var $i20: i32;
  var $i53: i1;
  var $i54: i32;
  var $i8: i32;
  var vslice_dummy_var_511: i32;
  var vslice_dummy_var_512: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 1727} {:cexpr "be_find_vfs:arg:vf_state"} boogie_si_record_i32($i1);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} $i6 := pci_find_ext_capability($p5, 16);
    call {:si_unique_call 1729} {:cexpr "pos"} boogie_si_record_i32($i6);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i6, 20);
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} vslice_dummy_var_511 := pci_read_config_word($p5, $i9, $p2);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i6, 22);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} vslice_dummy_var_512 := pci_read_config_word($p5, $i11, $p3);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 2696)), $mul.ref(60, 1));
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} $p16 := pci_get_device($i15, $sub.i32(0, 1), $0.ref);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $i19, $i20 := 0, 0;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i1, 1);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i53 == 1);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $i54 := $i19;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $i8 := $i54;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb22:
    assume $i53 == 1;
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $i54 := $i20;
    goto $bb24;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $i21, $i22, $p23 := 0, 0, $p16;
    goto $bb8;

  $bb8:
    call $p24, $p25, $i26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i46, $i47, $p48, $i49, $i50, $i21, $i22, $p23, $i51, $i52 := be_find_vfs_loop_$bb8($p5, $p24, $p25, $i26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i46, $i47, $p48, $i49, $i50, $i21, $i22, $p23, $i51, $i52);
    goto $bb8_last;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(2251, 1));
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i43, $i44 := $i22, $i21;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 2696)), $mul.ref(60, 1));
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.0, $p45);
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} $p48 := pci_get_device($i47, $sub.i32(0, 1), $p23);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $i51, $i52 := $i43, $i44;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $i19, $i20 := $i51, $i52;
    goto $bb7;

  $bb19:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i21, $i22, $p23 := $i44, $i43, $p48;
    goto $bb19_dummy;

  $bb10:
    assume $i28 == 1;
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} $p29 := pci_physfn($p23);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p5);
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i30, $i31);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i41, $i42 := $i22, $i21;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $i43, $i44 := $i41, $i42;
    goto $bb18;

  $bb12:
    assume $i32 == 1;
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i22, 1);
    call {:si_unique_call 1734} {:cexpr "vfs"} boogie_si_record_i32($i33);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p23, $mul.ref(0, 2696)), $mul.ref(2262, 1));
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 4);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i40 := $i21;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $i41, $i42 := $i33, $i40;
    goto $bb17;

  $bb14:
    assume $i38 == 1;
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i21, 1);
    call {:si_unique_call 1735} {:cexpr "assigned_vfs"} boogie_si_record_i32($i39);
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb16;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8184;
}



const pci_disable_sriov: ref;

axiom pci_disable_sriov == $sub.ref(0, 563710);

procedure pci_disable_sriov($p0: ref);
  free requires assertsPassed;



implementation pci_disable_sriov($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    return;
}



const be_cmd_set_mac_list: ref;

axiom be_cmd_set_mac_list == $sub.ref(0, 564742);

procedure be_cmd_set_mac_list($p0: ref, $p1: ref, $i2: i8, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.0, $M.21, $CurrAddr;



implementation be_cmd_set_mac_list($p0: ref, $p1: ref, $i2: i8, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i25: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $p52: ref;
  var $i20: i32;
  var cmdloc_dummy_var_285: [ref]i8;
  var cmdloc_dummy_var_286: [ref]i8;
  var cmdloc_dummy_var_287: [ref]i8;
  var cmdloc_dummy_var_288: [ref]i8;
  var cmdloc_dummy_var_289: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} $p4 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    call {:si_unique_call 1738} {:cexpr "be_cmd_set_mac_list:arg:mac_count"} boogie_si_record_i8($i2);
    call {:si_unique_call 1739} {:cexpr "be_cmd_set_mac_list:arg:domain"} boogie_si_record_i32($i3);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_285 := $M.42;
    call {:si_unique_call 1740} cmdloc_dummy_var_286 := $memset.i8(cmdloc_dummy_var_285, $p5, 0, 24, $zext.i32.i64(8), 0 == 1);
    $M.42 := cmdloc_dummy_var_286;
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $M.42 := $store.i32($M.42, $p6, 404);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.42, $p10);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} $p14 := dma_alloc_attrs($p9, $i12, $p13, 208, $0.ref);
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p15, $p14);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.42, $p16);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} spin_lock_bh($p21);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} $p22 := wrb_from_mccq($p0);
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.42, $p26);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 404)), $mul.ref(0, 1));
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} be_wrb_cmd_hdr_prepare($p29, 1, $sub.i8(0, 108), 404, $p22, $p4);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i3);
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 404)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, $i30);
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p28, $mul.ref(0, 404)), $mul.ref(16, 1));
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, $i2);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i2);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} $i41 := be_mcc_notify_wait($p0);
    call {:si_unique_call 1750} {:cexpr "status"} boogie_si_record_i32($i41);
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $i25 := $i41;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.42, $p45);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $i47 := $zext.i32.i64($i46);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.42, $p48);
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.42, $p50);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} dma_free_attrs($p44, $i47, $p49, $i51, $0.ref);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} spin_unlock_bh($p52);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    $i20 := $i25;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb9:
    assume $i35 == 1;
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i2);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $i37 := $mul.i32($i36, 6);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    call {:si_unique_call 1747} {:cexpr "__len"} boogie_si_record_i64($i38);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p28, $mul.ref(0, 404)), $mul.ref(20, 1));
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_287 := $M.0;
    cmdloc_dummy_var_288 := $M.0;
    call {:si_unique_call 1748} cmdloc_dummy_var_289 := $memcpy.i8(cmdloc_dummy_var_287, cmdloc_dummy_var_288, $p40, $p1, $i38, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_289;
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 16);
    goto $bb7;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 12);
    goto $bb3;
}



const pci_find_ext_capability: ref;

axiom pci_find_ext_capability == $sub.ref(0, 565774);

procedure pci_find_ext_capability($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_find_ext_capability($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1751} {:cexpr "pci_find_ext_capability:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1752} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1753} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_read_config_word: ref;

axiom pci_read_config_word == $sub.ref(0, 566806);

procedure pci_read_config_word($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_read_config_word($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} {:cexpr "pci_read_config_word:arg:where"} boogie_si_record_i32($i1);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(16, 1));
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(56, 1));
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} $i7 := pci_bus_read_config_word($p4, $i6, $i1, $p2);
    call {:si_unique_call 1756} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pci_get_device: ref;

axiom pci_get_device == $sub.ref(0, 567838);

procedure pci_get_device($i0: i32, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_device($i0: i32, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} {:cexpr "pci_get_device:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1758} {:cexpr "pci_get_device:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} $p3 := external_alloc();
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const pci_physfn: ref;

axiom pci_physfn == $sub.ref(0, 568870);

procedure pci_physfn($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_physfn($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(2251, 1));
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $p9 := $p0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(2664, 1));
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $p9 := $p8;
    goto $bb3;
}



const pci_bus_read_config_word: ref;

axiom pci_bus_read_config_word == $sub.ref(0, 569902);

procedure pci_bus_read_config_word($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_read_config_word($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1760} {:cexpr "pci_bus_read_config_word:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1761} {:cexpr "pci_bus_read_config_word:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1762} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1763} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const be_cmd_allowed: ref;

axiom be_cmd_allowed == $sub.ref(0, 570934);

procedure be_cmd_allowed($p0: ref, $i1: i8, $i2: i8) returns ($r: i1);
  free requires assertsPassed;



implementation be_cmd_allowed($p0: ref, $i1: i8, $i2: i8) returns ($r: i1)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i8;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i8;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} {:cexpr "be_cmd_allowed:arg:opcode"} boogie_si_record_i8($i1);
    call {:si_unique_call 1765} {:cexpr "be_cmd_allowed:arg:subsystem"} boogie_si_record_i8($i2);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363956, 1));
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 1766} {:cexpr "cmd_privileges"} boogie_si_record_i32($i4);
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.43, cmd_priv_map);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i6, $i7);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.43, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(1, 8)), $mul.ref(0, 1)));
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i1);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i18, $i19);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.43, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(2, 8)), $mul.ref(0, 1)));
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i1);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i29, $i30);
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.43, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(3, 8)), $mul.ref(0, 1)));
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i1);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i40, $i41);
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.43, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(4, 8)), $mul.ref(0, 1)));
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i1);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i51, $i52);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb46:
    assume $i53 == 1;
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.44, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(4, 8)), $mul.ref(1, 1)));
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i2);
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i55, $i56);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb48;

  $bb49:
    assume $i57 == 1;
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.45, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(4, 8)), $mul.ref(4, 1)));
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, $i4);
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb11;

  $bb36:
    assume $i42 == 1;
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.44, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(3, 8)), $mul.ref(1, 1)));
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i2);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i44, $i45);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb38;

  $bb39:
    assume $i46 == 1;
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.45, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(3, 8)), $mul.ref(4, 1)));
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, $i4);
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb9;

  $bb26:
    assume $i31 == 1;
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.44, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(2, 8)), $mul.ref(1, 1)));
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i2);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i33, $i34);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb28;

  $bb29:
    assume $i35 == 1;
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.45, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(2, 8)), $mul.ref(4, 1)));
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, $i4);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb9;

  $bb16:
    assume $i20 == 1;
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.44, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(1, 8)), $mul.ref(1, 1)));
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i2);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i22, $i23);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb18;

  $bb19:
    assume $i24 == 1;
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.45, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(1, 8)), $mul.ref(4, 1)));
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, $i4);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb9;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.44, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(0, 8)), $mul.ref(1, 1)));
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i2);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i10, $i11);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb5;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.45, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(0, 8)), $mul.ref(4, 1)));
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, $i4);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb9;
}



const pci_alloc_consistent: ref;

axiom pci_alloc_consistent == $sub.ref(0, 571966);

procedure pci_alloc_consistent($p0: ref, $i1: i64, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_alloc_consistent($p0: ref, $i1: i64, $p2: ref) returns ($r: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} {:cexpr "pci_alloc_consistent:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} $p7 := dma_alloc_attrs($p6, $i1, $p2, 32, $0.ref);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $p6 := $p5;
    goto $bb3;
}



const pci_free_consistent: ref;

axiom pci_free_consistent == $sub.ref(0, 572998);

procedure pci_free_consistent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation pci_free_consistent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} {:cexpr "pci_free_consistent:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1770} {:cexpr "pci_free_consistent:arg:dma_handle"} boogie_si_record_i64($i3);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} dma_free_attrs($p7, $i1, $p2, $i3, $0.ref);
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const be_vf_setup_init: ref;

axiom be_vf_setup_init == $sub.ref(0, 574030);

procedure be_vf_setup_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation be_vf_setup_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i64;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i19: i32;
  var $p20: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364200, 1));
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} $p4 := kcalloc($i3, 24, 208);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364216, 1));
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p4);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364216, 1));
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364216, 1));
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64(0);
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p13, $mul.ref($i14, 24));
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364200, 1));
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $i18 := $ult.i32(0, $i17);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $i19, $p20 := 0, $p15;
    goto $bb8;

  $bb8:
    call $p21, $p22, $i23, $p24, $i25, $i26, $i19, $p20 := be_vf_setup_init_loop_$bb8($p16, $p21, $p22, $i23, $p24, $i25, $i26, $i19, $p20);
    goto $bb8_last;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $sub.i32(0, 1));
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p20, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $sub.i32(0, 1));
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i19, 1);
    call {:si_unique_call 1773} {:cexpr "vf"} boogie_si_record_i32($i23);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p20, $mul.ref(1, 24));
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p16);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $i26 := $ult.i32($i23, $i25);
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i19, $p20 := $i23, $p24;
    goto $bb10_dummy;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8471;
}



const be_cmd_get_if_id: ref;

axiom be_cmd_get_if_id == $sub.ref(0, 575062);

procedure be_cmd_get_if_id($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_get_if_id($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i7: i32;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} {:cexpr "be_cmd_get_if_id:arg:vf_num"} boogie_si_record_i32($i2);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} spin_lock_bh($p3);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} $p4 := wrb_from_mccq($p0);
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} $p8 := embedded_payload($p4);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} be_wrb_cmd_hdr_prepare($p10, 1, $sub.i8(0, 62), 32, $p4, $0.ref);
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i2);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 1);
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i14);
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} $i17 := be_mcc_notify_wait($p0);
    call {:si_unique_call 1781} {:cexpr "status"} boogie_si_record_i32($i17);
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} spin_unlock_bh($p24);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p9);
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 32)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 16);
    goto $bb3;
}



const be_vfs_if_create: ref;

axiom be_vfs_if_create == $sub.ref(0, 576094);

procedure be_vfs_if_create($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.46, $M.0, $M.21, $M.41, $M.47, $CurrAddr, $M.25, assertsPassed, $M.26;



implementation be_vfs_if_create($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i1;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p10: ref;
  var $i11: i32;
  var $i42: i32;
  var $i9: i32;
  var $i37: i32;
  var vslice_dummy_var_513: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $M.46 := $store.i32($M.46, $p1, 4144);
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364216, 1));
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64(0);
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 24));
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364200, 1));
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i32($i7, 0);
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $i9 := $u0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i37 := $i9;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $p10, $i11 := $p5, 0;
    goto $bb4;

  $bb4:
    call $p12, $p13, $p14, $i15, $i16, $i17, $p18, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $i38, $p39, $i40, $i41, $p10, $i11, $i42, vslice_dummy_var_513 := be_vfs_if_create_loop_$bb4($p0, $p1, $p6, $p12, $p13, $p14, $i15, $i16, $i17, $p18, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $i38, $p39, $i40, $i41, $p10, $i11, $i42, vslice_dummy_var_513);
    goto $bb4_last;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 545);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.46, $p1);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 4144);
    call {:si_unique_call 1784} {:cexpr "en_flags"} boogie_si_record_i32($i30);
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.46, $p1);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p10, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i11, 1);
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} $i34 := be_cmd_if_create($p0, $i31, $i30, $p32, $i33);
    call {:si_unique_call 1786} {:cexpr "status"} boogie_si_record_i32($i34);
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $i36 := $i34;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i11, 1);
    call {:si_unique_call 1787} {:cexpr "vf"} boogie_si_record_i32($i38);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p10, $mul.ref(1, 24));
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p6);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $i41 := $ugt.i32($i40, $i38);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $i42 := $i34;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $i9 := $i42;
    goto $bb3;

  $bb16:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $p10, $i11 := $p39, $i38;
    goto $bb16_dummy;

  $bb12:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb14;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 1808);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb8;

  $bb9:
    assume $i23 == 1;
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i11);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} vslice_dummy_var_513 := be_cmd_get_profile_config($p0, $p1, $0.ref, $i27);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb16_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8529;
}



const be_vfs_mac_query: ref;

axiom be_vfs_mac_query == $sub.ref(0, 577126);

procedure be_vfs_mac_query($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.21, $M.29, $CurrAddr;



implementation be_vfs_mac_query($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p10: ref;
  var $i11: i32;
  var $i21: i32;
  var cmdloc_dummy_var_290: [ref]i8;
  var cmdloc_dummy_var_291: [ref]i8;
  var cmdloc_dummy_var_292: [ref]i8;
  var cmdloc_dummy_var_293: [ref]i8;
  var cmdloc_dummy_var_294: [ref]i8;
  var cmdloc_dummy_var_295: [ref]i8;
  var vslice_dummy_var_514: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} $p1 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364216, 1));
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64(0);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 24));
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364200, 1));
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $i9 := $ult.i32(0, $i8);
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $p10, $i11 := $p6, 0;
    goto $bb4;

  $bb4:
    call $p12, $p13, $p15, $p16, $i17, $i18, $i19, $i20, $i22, $p23, $p24, $p25, $p26, $p27, $p28, $i29, $p30, $i31, $i32, $p10, $i11, cmdloc_dummy_var_290, cmdloc_dummy_var_291, cmdloc_dummy_var_292, cmdloc_dummy_var_293, cmdloc_dummy_var_294, cmdloc_dummy_var_295, vslice_dummy_var_514 := be_vfs_mac_query_loop_$bb4($p0, $p1, $p2, $p7, $p12, $p13, $p15, $p16, $i17, $i18, $i19, $i20, $i22, $p23, $p24, $p25, $p26, $p27, $p28, $i29, $p30, $i31, $i32, $p10, $i11, cmdloc_dummy_var_290, cmdloc_dummy_var_291, cmdloc_dummy_var_292, cmdloc_dummy_var_293, cmdloc_dummy_var_294, cmdloc_dummy_var_295, vslice_dummy_var_514);
    goto $bb4_last;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} vslice_dummy_var_514 := be_cmd_get_mac_from_list($p0, $p12, $p2, $p13, 0);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p1);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p10, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} $i18 := be_cmd_mac_addr_query($p0, $p15, 0, $i17, 0);
    call {:si_unique_call 1792} {:cexpr "status"} boogie_si_record_i32($i18);
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i64(6, 63);
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p10, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p1);
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_293 := $M.0;
    cmdloc_dummy_var_294 := $M.0;
    call {:si_unique_call 1794} cmdloc_dummy_var_295 := $memcpy.i8(cmdloc_dummy_var_293, cmdloc_dummy_var_294, $p27, $p28, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_295;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i11, 1);
    call {:si_unique_call 1795} {:cexpr "vf"} boogie_si_record_i32($i29);
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p10, $mul.ref(1, 24));
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p7);
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $i32 := $ult.i32($i29, $i31);
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $p10, $i11 := $p30, $i29;
    goto $bb13_dummy;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p10, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p1);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_290 := $M.0;
    cmdloc_dummy_var_291 := $M.0;
    call {:si_unique_call 1793} cmdloc_dummy_var_292 := $memcpy.i8(cmdloc_dummy_var_290, cmdloc_dummy_var_291, $p24, $p25, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_292;
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb8;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8583;
}



const be_vf_eth_addr_config: ref;

axiom be_vf_eth_addr_config == $sub.ref(0, 578158);

procedure be_vf_eth_addr_config($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.0, $M.21, $CurrAddr;



implementation be_vf_eth_addr_config($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i28: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i8;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i11: i32;
  var $p12: ref;
  var $i57: i32;
  var $i10: i32;
  var cmdloc_dummy_var_296: [ref]i8;
  var cmdloc_dummy_var_297: [ref]i8;
  var cmdloc_dummy_var_298: [ref]i8;
  var cmdloc_dummy_var_299: [ref]i8;
  var cmdloc_dummy_var_300: [ref]i8;
  var cmdloc_dummy_var_301: [ref]i8;
  var vslice_dummy_var_515: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} $p1 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} be_vf_eth_addr_generate($p0, $p2);
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364216, 1));
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64(0);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 24));
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364200, 1));
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $i9 := $ugt.i32($i8, 0);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $i10 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    $i11, $p12 := 0, $p6;
    goto $bb4;

  $bb4:
    call $p13, $p14, $p15, $i16, $i17, $i18, $p19, $p20, $p21, $i22, $i23, $i24, $p25, $i26, $i27, $p29, $p30, $i31, $p32, $i33, $i34, $i28, $i35, $p36, $p37, $p38, $i40, $p41, $p42, $p43, $p44, $p45, $p46, $p47, $i48, $i49, $i50, $i51, $p52, $i53, $p54, $i55, $i56, $i11, $p12, $i57, cmdloc_dummy_var_296, cmdloc_dummy_var_297, cmdloc_dummy_var_298, cmdloc_dummy_var_299, cmdloc_dummy_var_300, cmdloc_dummy_var_301, vslice_dummy_var_515 := be_vf_eth_addr_config_loop_$bb4($p0, $p1, $p7, $p13, $p14, $p15, $i16, $i17, $i18, $p19, $p20, $p21, $i22, $i23, $i24, $p25, $i26, $i27, $p29, $p30, $i31, $p32, $i33, $i34, $i28, $i35, $p36, $p37, $p38, $i40, $p41, $p42, $p43, $p44, $p45, $p46, $p47, $i48, $i49, $i50, $i51, $p52, $i53, $p54, $i55, $i56, $i11, $p12, $i57, cmdloc_dummy_var_296, cmdloc_dummy_var_297, cmdloc_dummy_var_298, cmdloc_dummy_var_299, cmdloc_dummy_var_300, cmdloc_dummy_var_301, vslice_dummy_var_515);
    goto $bb4_last;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 57888);
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i18 == 1);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 57896);
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p1);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i11, 1);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} $i34 := be_cmd_pmac_add($p0, $p29, $i31, $p32, $i33);
    call {:si_unique_call 1801} {:cexpr "status"} boogie_si_record_i32($i34);
    assume {:verifier.code 0} true;
    $i28 := $i34;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i28, 0);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i35 == 1);
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $i40 := $ugt.i64(6, 63);
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i40 == 1);
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p1);
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_299 := $M.0;
    cmdloc_dummy_var_300 := $M.0;
    call {:si_unique_call 1805} cmdloc_dummy_var_301 := $memcpy.i8(cmdloc_dummy_var_299, cmdloc_dummy_var_300, $p45, $p46, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_301;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, 1);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, $i51);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i11, 1);
    call {:si_unique_call 1803} {:cexpr "vf"} boogie_si_record_i32($i53);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p12, $mul.ref(1, 24));
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p7);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $i56 := $ugt.i32($i55, $i53);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $i57 := $i28;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $i10 := $i57;
    goto $bb3;

  $bb18:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i11, $p12 := $i53, $p54;
    goto $bb18_dummy;

  $bb15:
    assume $i40 == 1;
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p1);
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_296 := $M.0;
    cmdloc_dummy_var_297 := $M.0;
    call {:si_unique_call 1804} cmdloc_dummy_var_298 := $memcpy.i8(cmdloc_dummy_var_296, cmdloc_dummy_var_297, $p42, $p43, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_298;
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i35 == 1;
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} vslice_dummy_var_515 := dev_err.ref.ref.i32($p38, .str.133, $i11);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p1);
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i11, 1);
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} $i27 := be_cmd_set_mac_list($p0, $p25, 1, $i26);
    call {:si_unique_call 1799} {:cexpr "status"} boogie_si_record_i32($i27);
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb11;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb7;

  $bb18_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8631;
}



const be_cmd_set_qos: ref;

axiom be_cmd_set_qos == $sub.ref(0, 579190);

procedure be_cmd_set_qos($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_set_qos($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i7: i32;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} {:cexpr "be_cmd_set_qos:arg:bps"} boogie_si_record_i32($i1);
    call {:si_unique_call 1807} {:cexpr "be_cmd_set_qos:arg:domain"} boogie_si_record_i32($i2);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} spin_lock_bh($p3);
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} $p4 := wrb_from_mccq($p0);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} $p8 := embedded_payload($p4);
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} be_wrb_cmd_hdr_prepare($p10, 1, 28, 52, $p4, $0.ref);
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i2);
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 52)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i11);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p9, $mul.ref(0, 52)), $mul.ref(16, 1));
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 1);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p9, $mul.ref(0, 52)), $mul.ref(20, 1));
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i1);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} $i16 := be_mcc_notify_wait($p0);
    call {:si_unique_call 1814} {:cexpr "status"} boogie_si_record_i32($i16);
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $i7 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} spin_unlock_bh($p17);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 16);
    goto $bb3;
}



const be_cmd_get_hsw_config: ref;

axiom be_cmd_get_hsw_config == $sub.ref(0, 580222);

procedure be_cmd_get_hsw_config($p0: ref, $p1: ref, $i2: i32, $i3: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $M.40, $CurrAddr;



implementation be_cmd_get_hsw_config($p0: ref, $p1: ref, $i2: i32, $i3: i16) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i16;
  var $i8: i32;
  var $p33: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} {:cexpr "be_cmd_get_hsw_config:arg:domain"} boogie_si_record_i32($i2);
    call {:si_unique_call 1816} {:cexpr "be_cmd_get_hsw_config:arg:intf_id"} boogie_si_record_i16($i3);
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} spin_lock_bh($p4);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} $p5 := wrb_from_mccq($p0);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} $p9 := embedded_payload($p5);
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} be_wrb_cmd_hdr_prepare($p13, 1, $sub.i8(0, 104), 20, $p5, $0.ref);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i2);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i14);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} $i17 := amap_mask(16);
    call {:si_unique_call 1823} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i3);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} amap_set($p12, 0, $i17, 0, $i18);
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} $i19 := amap_mask(1);
    call {:si_unique_call 1826} {:cexpr "tmp___1"} boogie_si_record_i32($i19);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} amap_set($p12, 0, $i19, 30, 1);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p10, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} swap_dws($p21, 4);
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} $i22 := be_mcc_notify_wait($p0);
    call {:si_unique_call 1830} {:cexpr "status"} boogie_si_record_i32($i22);
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} spin_unlock_bh($p33);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} $p24 := embedded_payload($p5);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} swap_dws($p27, 16);
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} $i28 := amap_mask(16);
    call {:si_unique_call 1834} {:cexpr "tmp___3"} boogie_si_record_i32($i28);
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p25, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} $i31 := amap_get($p30, 0, $i28, 16);
    call {:si_unique_call 1836} {:cexpr "tmp___4"} boogie_si_record_i32($i31);
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i31);
    call {:si_unique_call 1837} {:cexpr "vid"} boogie_si_record_i16($i32);
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $M.40 := $store.i16($M.40, $p1, $i32);
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 16);
    goto $bb3;
}



const be_cmd_enable_vf: ref;

axiom be_cmd_enable_vf == $sub.ref(0, 581254);

procedure be_cmd_enable_vf($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_enable_vf($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i19: i32;
  var $p27: ref;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} {:cexpr "be_cmd_enable_vf:arg:domain"} boogie_si_record_i8($i1);
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 57888);
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} spin_lock_bh($p15);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} $p16 := wrb_from_mccq($p0);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} $p20 := embedded_payload($p16);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} be_wrb_cmd_hdr_prepare($p22, 1, $sub.i8(0, 60), 20, $p16, $0.ref);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, $i1);
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p21, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 1);
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} $i26 := be_mcc_notify_wait($p0);
    call {:si_unique_call 1845} {:cexpr "status"} boogie_si_record_i32($i26);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $i19 := $i26;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} spin_unlock_bh($p27);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $i14 := $i19;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 16);
    goto $bb10;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 57896);
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;
}



const pci_enable_sriov: ref;

axiom pci_enable_sriov == $sub.ref(0, 582286);

procedure pci_enable_sriov($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_sriov($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1846} {:cexpr "pci_enable_sriov:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1847} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1848} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const be_vf_eth_addr_generate: ref;

axiom be_vf_eth_addr_generate == $sub.ref(0, 583318);

procedure be_vf_eth_addr_generate($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_vf_eth_addr_generate($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i8;
  var $p8: ref;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var cmdloc_dummy_var_302: [ref]i8;
  var cmdloc_dummy_var_303: [ref]i8;
  var cmdloc_dummy_var_304: [ref]i8;
  var cmdloc_dummy_var_305: [ref]i8;
  var cmdloc_dummy_var_306: [ref]i8;
  var cmdloc_dummy_var_307: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2784)), $mul.ref(736, 1));
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} $i6 := jhash($p5, 6, 0);
    call {:si_unique_call 1850} {:cexpr "addr"} boogie_si_record_i32($i6);
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p1, $mul.ref(5, 1));
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, $i7);
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i32($i6, 8);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i10);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $i12 := $lshr.i32($i6, 16);
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p1, $mul.ref(3, 1));
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i13);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i64(3, 63);
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 2784)), $mul.ref(736, 1));
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_305 := $M.0;
    cmdloc_dummy_var_306 := $M.0;
    call {:si_unique_call 1852} cmdloc_dummy_var_307 := $memcpy.i8(cmdloc_dummy_var_305, cmdloc_dummy_var_306, $p1, $p23, 3, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_307;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 2784)), $mul.ref(736, 1));
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_302 := $M.0;
    cmdloc_dummy_var_303 := $M.0;
    call {:si_unique_call 1851} cmdloc_dummy_var_304 := $memcpy.i8(cmdloc_dummy_var_302, cmdloc_dummy_var_303, $p1, $p19, 3, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_304;
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const jhash: ref;

axiom jhash == $sub.ref(0, 584350);

procedure jhash($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation jhash($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $i50: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i61: i1;
  var $i62: i1;
  var $i67: i1;
  var $i71: i1;
  var $i77: i1;
  var $i78: i1;
  var $i83: i1;
  var $i90: i1;
  var $i91: i1;
  var $i100: i1;
  var $p102: ref;
  var $i103: i8;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $i60: i32;
  var $p107: ref;
  var $i108: i8;
  var $i109: i32;
  var $i110: i32;
  var $i111: i32;
  var $p65: ref;
  var $i66: i32;
  var $p112: ref;
  var $i113: i8;
  var $i114: i32;
  var $i115: i32;
  var $i116: i32;
  var $p63: ref;
  var $i64: i32;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;
  var $i120: i32;
  var $p75: ref;
  var $i76: i32;
  var $p121: ref;
  var $i122: i8;
  var $i123: i32;
  var $i124: i32;
  var $i125: i32;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $p126: ref;
  var $i127: i8;
  var $i128: i32;
  var $i129: i32;
  var $i130: i32;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $p131: ref;
  var $i132: i8;
  var $i133: i32;
  var $i134: i32;
  var $i135: i32;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $p136: ref;
  var $i137: i8;
  var $i138: i32;
  var $i139: i32;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $p140: ref;
  var $i141: i8;
  var $i142: i32;
  var $i143: i32;
  var $i144: i32;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $p145: ref;
  var $i146: i8;
  var $i147: i32;
  var $i148: i32;
  var $i149: i32;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $p150: ref;
  var $i151: i8;
  var $i152: i32;
  var $i153: i32;
  var $i154: i32;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i155: i8;
  var $i156: i32;
  var $i157: i32;
  var $i158: i32;
  var $i159: i32;
  var $i160: i32;
  var $i161: i32;
  var $i162: i32;
  var $i163: i32;
  var $i164: i32;
  var $i165: i32;
  var $i166: i32;
  var $i167: i32;
  var $i168: i32;
  var $i169: i32;
  var $i170: i32;
  var $i171: i32;
  var $i172: i32;
  var $i173: i32;
  var $i174: i32;
  var $i175: i32;
  var $i176: i32;
  var $i177: i32;
  var $i178: i32;
  var $i101: i32;
  var $i179: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} {:cexpr "jhash:arg:length"} boogie_si_record_i32($i1);
    call {:si_unique_call 1854} {:cexpr "jhash:arg:initval"} boogie_si_record_i32($i2);
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i1, $i2);
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $sub.i32(0, 559038737));
    call {:si_unique_call 1855} {:cexpr "c"} boogie_si_record_i32($i4);
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i1, 12);
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $i6, $i7, $i8, $i9, $p10 := $i4, $i4, $i4, $i1, $p0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i9, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i9, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i9, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i9, 12);
    assume {:verifier.code 0} true;
    $i60 := $i8;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i9, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i179 := $i8;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    $r := $i179;
    return;

  $bb19:
    assume $i61 == 1;
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($p10, $mul.ref(11, 1));
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.0, $p102);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $i105 := $shl.i32($i104, 24);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i105, $i8);
    call {:si_unique_call 1897} {:cexpr "c"} boogie_si_record_i32($i106);
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    $i60 := $i106;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p10, $mul.ref(10, 1));
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.0, $p107);
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i108);
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $i110 := $shl.i32($i109, 16);
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i110, $i60);
    call {:si_unique_call 1896} {:cexpr "c"} boogie_si_record_i32($i111);
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $p65, $i66 := $p10, $i111;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($p65, $mul.ref(9, 1));
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.0, $p112);
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $i114 := $zext.i8.i32($i113);
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    $i115 := $shl.i32($i114, 8);
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    $i116 := $add.i32($i115, $i66);
    call {:si_unique_call 1899} {:cexpr "c"} boogie_si_record_i32($i116);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $p63, $i64 := $p65, $i116;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p63, $mul.ref(8, 1));
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.0, $p117);
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $i120 := $add.i32($i119, $i64);
    call {:si_unique_call 1898} {:cexpr "c"} boogie_si_record_i32($i120);
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $p75, $i76 := $p63, $i120;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p75, $mul.ref(7, 1));
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.0, $p121);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i32($i122);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $i124 := $shl.i32($i123, 24);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $i125 := $add.i32($i124, $i6);
    call {:si_unique_call 1902} {:cexpr "b"} boogie_si_record_i32($i125);
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $p72, $i73, $i74 := $p75, $i125, $i76;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($p72, $mul.ref(6, 1));
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.0, $p126);
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i127);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $i129 := $shl.i32($i128, 16);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $i130 := $add.i32($i129, $i73);
    call {:si_unique_call 1901} {:cexpr "b"} boogie_si_record_i32($i130);
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $p68, $i69, $i70 := $p72, $i130, $i74;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($p68, $mul.ref(5, 1));
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $i132 := $load.i8($M.0, $p131);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $i133 := $zext.i8.i32($i132);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    $i134 := $shl.i32($i133, 8);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    $i135 := $add.i32($i134, $i69);
    call {:si_unique_call 1900} {:cexpr "b"} boogie_si_record_i32($i135);
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $p87, $i88, $i89 := $p68, $i135, $i70;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p87, $mul.ref(4, 1));
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $i137 := $load.i8($M.0, $p136);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i137);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $i139 := $add.i32($i138, $i88);
    call {:si_unique_call 1905} {:cexpr "b"} boogie_si_record_i32($i139);
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $p84, $i85, $i86 := $p87, $i139, $i89;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($p84, $mul.ref(3, 1));
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $i141 := $load.i8($M.0, $p140);
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $i142 := $zext.i8.i32($i141);
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $i143 := $shl.i32($i142, 24);
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $i144 := $add.i32($i143, $i7);
    call {:si_unique_call 1904} {:cexpr "a"} boogie_si_record_i32($i144);
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $p79, $i80, $i81, $i82 := $p84, $i85, $i144, $i86;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($p79, $mul.ref(2, 1));
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $i146 := $load.i8($M.0, $p145);
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $i147 := $zext.i8.i32($i146);
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    $i148 := $shl.i32($i147, 16);
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    $i149 := $add.i32($i148, $i81);
    call {:si_unique_call 1903} {:cexpr "a"} boogie_si_record_i32($i149);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $p96, $i97, $i98, $i99 := $p79, $i80, $i149, $i82;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($p96, $mul.ref(1, 1));
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $i151 := $load.i8($M.0, $p150);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $i152 := $zext.i8.i32($i151);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $i153 := $shl.i32($i152, 8);
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    $i154 := $add.i32($i153, $i98);
    call {:si_unique_call 1935} {:cexpr "a"} boogie_si_record_i32($i154);
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $p92, $i93, $i94, $i95 := $p96, $i97, $i154, $i99;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $i155 := $load.i8($M.0, $p92);
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $i156 := $zext.i8.i32($i155);
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $i157 := $add.i32($i156, $i94);
    call {:si_unique_call 1906} {:cexpr "a"} boogie_si_record_i32($i157);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $i158 := $xor.i32($i95, $i93);
    call {:si_unique_call 1907} {:cexpr "c"} boogie_si_record_i32($i158);
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} $i159 := rol32($i93, 14);
    call {:si_unique_call 1909} {:cexpr "tmp___8"} boogie_si_record_i32($i159);
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $i160 := $sub.i32($i158, $i159);
    call {:si_unique_call 1910} {:cexpr "c"} boogie_si_record_i32($i160);
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $i161 := $xor.i32($i157, $i160);
    call {:si_unique_call 1911} {:cexpr "a"} boogie_si_record_i32($i161);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} $i162 := rol32($i160, 11);
    call {:si_unique_call 1913} {:cexpr "tmp___9"} boogie_si_record_i32($i162);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $i163 := $sub.i32($i161, $i162);
    call {:si_unique_call 1914} {:cexpr "a"} boogie_si_record_i32($i163);
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $i164 := $xor.i32($i93, $i163);
    call {:si_unique_call 1915} {:cexpr "b"} boogie_si_record_i32($i164);
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} $i165 := rol32($i163, 25);
    call {:si_unique_call 1917} {:cexpr "tmp___10"} boogie_si_record_i32($i165);
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $i166 := $sub.i32($i164, $i165);
    call {:si_unique_call 1918} {:cexpr "b"} boogie_si_record_i32($i166);
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $i167 := $xor.i32($i160, $i166);
    call {:si_unique_call 1919} {:cexpr "c"} boogie_si_record_i32($i167);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} $i168 := rol32($i166, 16);
    call {:si_unique_call 1921} {:cexpr "tmp___11"} boogie_si_record_i32($i168);
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $i169 := $sub.i32($i167, $i168);
    call {:si_unique_call 1922} {:cexpr "c"} boogie_si_record_i32($i169);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $i170 := $xor.i32($i163, $i169);
    call {:si_unique_call 1923} {:cexpr "a"} boogie_si_record_i32($i170);
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} $i171 := rol32($i169, 4);
    call {:si_unique_call 1925} {:cexpr "tmp___12"} boogie_si_record_i32($i171);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $i172 := $sub.i32($i170, $i171);
    call {:si_unique_call 1926} {:cexpr "a"} boogie_si_record_i32($i172);
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $i173 := $xor.i32($i166, $i172);
    call {:si_unique_call 1927} {:cexpr "b"} boogie_si_record_i32($i173);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} $i174 := rol32($i172, 14);
    call {:si_unique_call 1929} {:cexpr "tmp___13"} boogie_si_record_i32($i174);
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    $i175 := $sub.i32($i173, $i174);
    call {:si_unique_call 1930} {:cexpr "b"} boogie_si_record_i32($i175);
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    $i176 := $xor.i32($i169, $i175);
    call {:si_unique_call 1931} {:cexpr "c"} boogie_si_record_i32($i176);
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} $i177 := rol32($i175, 24);
    call {:si_unique_call 1933} {:cexpr "tmp___14"} boogie_si_record_i32($i177);
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $i178 := $sub.i32($i176, $i177);
    call {:si_unique_call 1934} {:cexpr "c"} boogie_si_record_i32($i178);
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $i101 := $i178;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    $i179 := $i101;
    goto $bb51;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb17;

  $bb14:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i9, 10);
    assume {:verifier.code 0} true;
    $p63, $i64, $p65, $i66 := $p10, $i8, $p10, $i8;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb25;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb23;

  $bb12:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i9, 7);
    assume {:verifier.code 0} true;
    $p68, $i69, $i70 := $p10, $i6, $i8;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i9, 8);
    assume {:verifier.code 0} true;
    $p72, $i73, $i74, $p75, $i76 := $p10, $i6, $i8, $p10, $i8;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb32;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i71 == 1;
    goto $bb30;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i67 == 1;
    goto $bb27;

  $bb10:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i9, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i9, 4);
    assume {:verifier.code 0} true;
    $p79, $i80, $i81, $i82 := $p10, $i6, $i7, $i8;
    assume true;
    goto $bb35, $bb37;

  $bb37:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i9, 5);
    assume {:verifier.code 0} true;
    $p84, $i85, $i86, $p87, $i88, $i89 := $p10, $i6, $i8, $p10, $i6, $i8;
    assume true;
    goto $bb38, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb41;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i83 == 1;
    goto $bb39;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb36;

  $bb33:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    $i90 := $slt.i32($i9, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    $i91 := $slt.i32($i9, 2);
    assume {:verifier.code 0} true;
    $p92, $i93, $i94, $i95, $p96, $i97, $i98, $i99 := $p10, $i6, $i7, $i8, $p10, $i6, $i7, $i8;
    assume true;
    goto $bb44, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb47;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb45;

  $bb42:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i9, 0);
    assume {:verifier.code 0} true;
    $i101 := $i8;
    assume {:branchcond $i100} true;
    goto $bb48, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb21;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb49;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $p11, $i12, $i13, $i14, $i15 := $p0, $i1, $i4, $i4, $i4;
    goto $bb4;

  $bb4:
    call $i16, $i17, $p18, $i19, $i20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $p49, $i50, $p11, $i12, $i13, $i14, $i15, $i51, $i52, $i53, $i54, $p55 := jhash_loop_$bb4($i16, $i17, $p18, $i19, $i20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $p49, $i50, $p11, $i12, $i13, $i14, $i15, $i51, $i52, $i53, $i54, $p55);
    goto $bb4_last;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} $i16 := __get_unaligned_cpu32($p11);
    call {:si_unique_call 1857} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, $i14);
    call {:si_unique_call 1858} {:cexpr "a"} boogie_si_record_i32($i17);
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p11, $mul.ref(4, 1));
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} $i19 := __get_unaligned_cpu32($p18);
    call {:si_unique_call 1860} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, $i15);
    call {:si_unique_call 1861} {:cexpr "b"} boogie_si_record_i32($i20);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} $i22 := __get_unaligned_cpu32($p21);
    call {:si_unique_call 1863} {:cexpr "tmp___1"} boogie_si_record_i32($i22);
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, $i13);
    call {:si_unique_call 1864} {:cexpr "c"} boogie_si_record_i32($i23);
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i17, $i23);
    call {:si_unique_call 1865} {:cexpr "a"} boogie_si_record_i32($i24);
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} $i25 := rol32($i23, 4);
    call {:si_unique_call 1867} {:cexpr "tmp___2"} boogie_si_record_i32($i25);
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    $i26 := $xor.i32($i25, $i24);
    call {:si_unique_call 1868} {:cexpr "a"} boogie_si_record_i32($i26);
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i23, $i20);
    call {:si_unique_call 1869} {:cexpr "c"} boogie_si_record_i32($i27);
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32($i20, $i26);
    call {:si_unique_call 1870} {:cexpr "b"} boogie_si_record_i32($i28);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} $i29 := rol32($i26, 6);
    call {:si_unique_call 1872} {:cexpr "tmp___3"} boogie_si_record_i32($i29);
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    $i30 := $xor.i32($i29, $i28);
    call {:si_unique_call 1873} {:cexpr "b"} boogie_si_record_i32($i30);
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i26, $i27);
    call {:si_unique_call 1874} {:cexpr "a"} boogie_si_record_i32($i31);
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i27, $i30);
    call {:si_unique_call 1875} {:cexpr "c"} boogie_si_record_i32($i32);
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} $i33 := rol32($i30, 8);
    call {:si_unique_call 1877} {:cexpr "tmp___4"} boogie_si_record_i32($i33);
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    $i34 := $xor.i32($i33, $i32);
    call {:si_unique_call 1878} {:cexpr "c"} boogie_si_record_i32($i34);
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i30, $i31);
    call {:si_unique_call 1879} {:cexpr "b"} boogie_si_record_i32($i35);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32($i31, $i34);
    call {:si_unique_call 1880} {:cexpr "a"} boogie_si_record_i32($i36);
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} $i37 := rol32($i34, 16);
    call {:si_unique_call 1882} {:cexpr "tmp___5"} boogie_si_record_i32($i37);
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    $i38 := $xor.i32($i37, $i36);
    call {:si_unique_call 1883} {:cexpr "a"} boogie_si_record_i32($i38);
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i34, $i35);
    call {:si_unique_call 1884} {:cexpr "c"} boogie_si_record_i32($i39);
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i35, $i38);
    call {:si_unique_call 1885} {:cexpr "b"} boogie_si_record_i32($i40);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} $i41 := rol32($i38, 19);
    call {:si_unique_call 1887} {:cexpr "tmp___6"} boogie_si_record_i32($i41);
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    $i42 := $xor.i32($i41, $i40);
    call {:si_unique_call 1888} {:cexpr "b"} boogie_si_record_i32($i42);
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i38, $i39);
    call {:si_unique_call 1889} {:cexpr "a"} boogie_si_record_i32($i43);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32($i39, $i42);
    call {:si_unique_call 1890} {:cexpr "c"} boogie_si_record_i32($i44);
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} $i45 := rol32($i42, 4);
    call {:si_unique_call 1892} {:cexpr "tmp___7"} boogie_si_record_i32($i45);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    $i46 := $xor.i32($i45, $i44);
    call {:si_unique_call 1893} {:cexpr "c"} boogie_si_record_i32($i46);
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i42, $i43);
    call {:si_unique_call 1894} {:cexpr "b"} boogie_si_record_i32($i47);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32($i12, 12);
    call {:si_unique_call 1895} {:cexpr "length"} boogie_si_record_i32($i48);
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p11, $mul.ref(12, 1));
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $i50 := $ugt.i32($i48, 12);
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $i51, $i52, $i53, $i54, $p55 := $i47, $i43, $i46, $i48, $p49;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $i6, $i7, $i8, $i9, $p10 := $i51, $i52, $i53, $i54, $p55;
    goto $bb3;

  $bb6:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $p11, $i12, $i13, $i14, $i15 := $p49, $i48, $i46, $i43, $i47;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8852;
}



const __get_unaligned_cpu32: ref;

axiom __get_unaligned_cpu32 == $sub.ref(0, 585382);

procedure __get_unaligned_cpu32($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __get_unaligned_cpu32($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const rol32: ref;

axiom rol32 == $sub.ref(0, 586414);

procedure rol32($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation rol32($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} {:cexpr "rol32:arg:word"} boogie_si_record_i32($i0);
    call {:si_unique_call 1937} {:cexpr "rol32:arg:shift"} boogie_si_record_i32($i1);
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $i2 := $shl.i32($i0, $i1);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i1);
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $i4 := $sub.i64(32, $i3);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    $i6 := $lshr.i32($i0, $i5);
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i2, $i6);
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const be_cmd_get_mac_from_list: ref;

axiom be_cmd_get_mac_from_list == $sub.ref(0, 587446);

procedure be_cmd_get_mac_from_list($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.0, $M.21, $M.29, $CurrAddr;



implementation be_cmd_get_mac_from_list($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i8) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $i59: i16;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i53: i32;
  var $i69: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i29: i32;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i64;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i24: i32;
  var cmdloc_dummy_var_308: [ref]i8;
  var cmdloc_dummy_var_309: [ref]i8;
  var cmdloc_dummy_var_310: [ref]i8;
  var cmdloc_dummy_var_311: [ref]i8;
  var cmdloc_dummy_var_312: [ref]i8;
  var cmdloc_dummy_var_313: [ref]i8;
  var cmdloc_dummy_var_314: [ref]i8;
  var cmdloc_dummy_var_315: [ref]i8;
  var vslice_dummy_var_516: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1938} $p5 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    call {:si_unique_call 1939} {:cexpr "be_cmd_get_mac_from_list:arg:domain"} boogie_si_record_i8($i4);
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_308 := $M.41;
    call {:si_unique_call 1940} cmdloc_dummy_var_309 := $memset.i8(cmdloc_dummy_var_308, $p6, 0, 24, $zext.i32.i64(8), 0 == 1);
    $M.41 := cmdloc_dummy_var_309;
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p7, 548);
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.41, $p10);
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1941} $p14 := pci_alloc_consistent($p9, $i12, $p13);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p15, $p14);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.41, $p16);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} spin_lock_bh($p25);
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1944} $p26 := wrb_from_mccq($p0);
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.41, $p30);
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.41, $p34);
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} be_wrb_cmd_hdr_prepare($p33, 1, $sub.i8(0, 109), $i35, $p26, $p5);
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, $i4);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p32, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, 1);
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p32, $mul.ref(0, 36)), $mul.ref(17, 1));
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, 1);
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1948} $i40 := be_mcc_notify_wait($p0);
    call {:si_unique_call 1949} {:cexpr "status"} boogie_si_record_i32($i40);
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i29 := $i40;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} spin_unlock_bh($p80);
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.41, $p83);
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $i85 := $zext.i32.i64($i84);
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.41, $p86);
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.41, $p88);
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} pci_free_consistent($p82, $i85, $p87, $i89);
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    $i24 := $i29;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb9:
    assume $i41 == 1;
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.41, $p42);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 812)), $mul.ref(40, 1));
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p44, $mul.ref(0, 812)), $mul.ref(41, 1));
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i47, $i50);
    call {:si_unique_call 1950} {:cexpr "mac_count"} boogie_si_record_i32($i51);
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32(0, $i51);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p2, 0);
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $i69 := $ugt.i64(6, 63);
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i69 == 1);
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($add.ref($p44, $mul.ref(0, 812)), $mul.ref(44, 1)), $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_313 := $M.0;
    cmdloc_dummy_var_314 := $M.0;
    call {:si_unique_call 1955} cmdloc_dummy_var_315 := $memcpy.i8(cmdloc_dummy_var_313, cmdloc_dummy_var_314, $p1, $p79, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_315;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i69 == 1;
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($add.ref($p44, $mul.ref(0, 812)), $mul.ref(44, 1)), $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_310 := $M.0;
    cmdloc_dummy_var_311 := $M.0;
    call {:si_unique_call 1954} cmdloc_dummy_var_312 := $memcpy.i8(cmdloc_dummy_var_310, cmdloc_dummy_var_311, $p1, $p74, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_312;
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb11:
    assume $i52 == 1;
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb14;

  $bb14:
    call $p54, $p55, $i56, $p57, $p58, $i59, $i60, $i61, $p62, $i67, $i68, $i53 := be_cmd_get_mac_from_list_loop_$bb14($p44, $i51, $p54, $p55, $i56, $p57, $p58, $i59, $i60, $i61, $p62, $i67, $i68, $i53);
    goto $bb14_last;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p44, $mul.ref(0, 812)), $mul.ref(44, 1));
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i53);
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p55, $mul.ref($i56, 12));
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p55, $mul.ref($i56, 12)), $mul.ref(0, 1));
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    $i59 := $load.i16($M.0, $p58);
    call {:si_unique_call 1951} {:cexpr "mac_addr_size"} boogie_si_record_i16($i59);
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $i60 := $zext.i16.i32($i59);
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 4);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    $p62 := $p57;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i53, 1);
    call {:si_unique_call 1953} {:cexpr "i"} boogie_si_record_i32($i67);
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i67, $i51);
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i68 == 1);
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb19:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i53 := $i67;
    goto $bb19_dummy;

  $bb16:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p2, 1);
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    call {:si_unique_call 1952} {:cexpr "mac_id"} boogie_si_record_i32($i66);
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i66);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $i29 := $i40;
    goto $bb7;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 16);
    goto $bb7;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1942} vslice_dummy_var_516 := dev_err.ref.ref($p22, .str.21);
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 12);
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9090;
}



const be_cmd_mac_addr_query: ref;

axiom be_cmd_mac_addr_query == $sub.ref(0, 588478);

procedure be_cmd_mac_addr_query($p0: ref, $p1: ref, $i2: i1, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_mac_addr_query($p0: ref, $p1: ref, $i2: i1, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i8;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $p16: ref;
  var $i17: i16;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $i10: i32;
  var $p32: ref;
  var cmdloc_dummy_var_316: [ref]i8;
  var cmdloc_dummy_var_317: [ref]i8;
  var cmdloc_dummy_var_318: [ref]i8;
  var cmdloc_dummy_var_319: [ref]i8;
  var cmdloc_dummy_var_320: [ref]i8;
  var cmdloc_dummy_var_321: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i2);
    call {:si_unique_call 1956} {:cexpr "be_cmd_mac_addr_query:arg:permanent"} boogie_si_record_i1($i2);
    call {:si_unique_call 1957} {:cexpr "be_cmd_mac_addr_query:arg:if_handle"} boogie_si_record_i32($i3);
    call {:si_unique_call 1958} {:cexpr "be_cmd_mac_addr_query:arg:pmac_id"} boogie_si_record_i32($i4);
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} spin_lock_bh($p6);
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1960} $p7 := wrb_from_mccq($p0);
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1962} $p11 := embedded_payload($p7);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1963} be_wrb_cmd_hdr_prepare($p13, 1, 1, 24, $p7, $0.ref);
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, 1);
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i5);
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i3);
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p18, $i17);
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i4);
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(17, 1));
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, 0);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} $i21 := be_mcc_notify_wait($p0);
    call {:si_unique_call 1965} {:cexpr "status"} boogie_si_record_i32($i21);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $i21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} spin_unlock_bh($p32);
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} $p23 := embedded_payload($p7);
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    $i25 := $ugt.i64(6, 63);
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 24)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_319 := $M.0;
    cmdloc_dummy_var_320 := $M.0;
    call {:si_unique_call 1968} cmdloc_dummy_var_321 := $memcpy.i8(cmdloc_dummy_var_319, cmdloc_dummy_var_320, $p1, $p31, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_321;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 24)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_316 := $M.0;
    cmdloc_dummy_var_317 := $M.0;
    call {:si_unique_call 1967} cmdloc_dummy_var_318 := $memcpy.i8(cmdloc_dummy_var_316, cmdloc_dummy_var_317, $p1, $p28, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_318;
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(17, 1));
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 1);
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 16);
    goto $bb3;
}



const be_cmd_get_profile_config: ref;

axiom be_cmd_get_profile_config == $sub.ref(0, 589510);

procedure be_cmd_get_profile_config($p0: ref, $p1: ref, $p2: ref, $i3: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.46, $M.47, $M.0, $M.21, $CurrAddr, $M.25, assertsPassed, $M.26;



implementation be_cmd_get_profile_config($p0: ref, $p1: ref, $p2: ref, $i3: i8) returns ($r: i32)
{
  var $p4: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i1;
  var $i42: i32;
  var $i43: i8;
  var $i44: i32;
  var $i46: i32;
  var $i47: i8;
  var $i48: i32;
  var $i45: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $i68: i16;
  var $i60: i32;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i64;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i38: i32;
  var cmdloc_dummy_var_322: [ref]i8;
  var cmdloc_dummy_var_323: [ref]i8;
  var vslice_dummy_var_517: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} $p4 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    call {:si_unique_call 1970} {:cexpr "be_cmd_get_profile_config:arg:domain"} boogie_si_record_i8($i3);
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p4);
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_322 := $M.41;
    call {:si_unique_call 1971} cmdloc_dummy_var_323 := $memset.i8(cmdloc_dummy_var_322, $p7, 0, 24, $zext.i32.i64(8), 0 == 1);
    $M.41 := cmdloc_dummy_var_323;
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 57888);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p21, 372);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.41, $p24);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i25);
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1972} $p28 := pci_alloc_consistent($p23, $i26, $p27);
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p29, $p28);
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.41, $p30);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    $p39 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1)), $mul.ref(34, 1));
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1($i40);
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i41 == 1);
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i3);
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i42);
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1976} $i44 := be_cmd_get_profile_config_mbox($p0, $i43, $p4);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    call {:si_unique_call 1977} {:cexpr "status"} boogie_si_record_i32($i44);
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i45, 0);
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i60 := $i45;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.41, $p69);
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i38 := $i60;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  $bb27:
    assume $i72 == 1;
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.41, $p75);
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $i77 := $zext.i32.i64($i76);
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.41, $p78);
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $i81 := $load.i64($M.41, $p80);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} pci_free_consistent($p74, $i77, $p79, $i81);
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb14:
    assume $i49 == 1;
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.41, $p50);
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 372)), $mul.ref(16, 1));
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    call {:si_unique_call 1978} {:cexpr "desc_count"} boogie_si_record_i32($i54);
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p52, $mul.ref(0, 372)), $mul.ref(20, 1));
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} $p57 := be_get_nic_desc($p56, $i54, 352);
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $i59 := $eq.i64($i58, 0);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p1);
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p2);
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i66 == 1;
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p57, $mul.ref(0, 72)), $mul.ref(22, 1));
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $i68 := $load.i16($M.0, $p67);
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $M.47 := $store.i16($M.47, $p2, $i68);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i62 == 1;
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p57, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    $M.46 := $store.i32($M.46, $p1, $i64);
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume $i59 == 1;
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32(0, 22);
    goto $bb18;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i41 == 1;
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i3);
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1974} $i48 := be_cmd_get_profile_config_mccq($p0, $i47, $p4);
    call {:si_unique_call 1975} {:cexpr "status"} boogie_si_record_i32($i48);
    assume {:verifier.code 0} true;
    $i45 := $i48;
    goto $bb13;

  $bb7:
    assume $i33 == 1;
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} vslice_dummy_var_517 := dev_err.ref.ref($p36, .str.18);
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 12);
    goto $bb9;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 57896);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p20, 2836);
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const be_cmd_get_profile_config_mbox: ref;

axiom be_cmd_get_profile_config_mbox == $sub.ref(0, 590542);

procedure be_cmd_get_profile_config_mbox($p0: ref, $i1: i8, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_cmd_get_profile_config_mbox($p0: ref, $i1: i8, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1981} {:cexpr "be_cmd_get_profile_config_mbox:arg:domain"} boogie_si_record_i8($i1);
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} $i4 := ldv_mutex_lock_interruptible_46($p3);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    call {:si_unique_call 1983} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1984} $p7 := wrb_from_mbox($p0);
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.41, $p8);
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.41, $p12);
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1985} be_wrb_cmd_hdr_prepare($p11, 1, $sub.i8(0, 92), $i13, $p7, $p2);
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p10, $mul.ref(0, 20)), $mul.ref(17, 1));
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, 2);
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i1);
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 57888);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} $i31 := be_mbox_notify_wait($p0);
    call {:si_unique_call 1987} {:cexpr "status"} boogie_si_record_i32($i31);
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} ldv_mutex_unlock_47($p32);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    $i6 := $i31;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, $p25);
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 57896);
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb7;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, 1);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 1);
    goto $bb3;

  SeqInstr_271:
    assume !assertsPassed;
    return;
}



const be_cmd_get_profile_config_mccq: ref;

axiom be_cmd_get_profile_config_mccq == $sub.ref(0, 591574);

procedure be_cmd_get_profile_config_mccq($p0: ref, $i1: i8, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_get_profile_config_mccq($p0: ref, $i1: i8, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $i31: i32;
  var $i7: i32;
  var $p32: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1989} {:cexpr "be_cmd_get_profile_config_mccq:arg:domain"} boogie_si_record_i8($i1);
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} spin_lock_bh($p3);
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1991} $p4 := wrb_from_mccq($p0);
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.41, $p8);
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.41, $p12);
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} be_wrb_cmd_hdr_prepare($p11, 1, $sub.i8(0, 92), $i13, $p4, $p2);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p10, $mul.ref(0, 20)), $mul.ref(17, 1));
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, 2);
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i1);
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 57888);
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1994} $i31 := be_mcc_notify_wait($p0);
    call {:si_unique_call 1995} {:cexpr "status"} boogie_si_record_i32($i31);
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $i7 := $i31;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1992} spin_unlock_bh($p32);
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, $p25);
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 57896);
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb7;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, 1);
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 16);
    goto $bb3;
}



const be_get_nic_desc: ref;

axiom be_get_nic_desc == $sub.ref(0, 592606);

procedure be_get_nic_desc($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_get_nic_desc($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $i4: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $i31: i32;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $p38: ref;
  var $i39: i32;
  var $p44: ref;
  var $i45: i8;
  var $i46: i64;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i7: i32;
  var $p8: ref;
  var $p50: ref;
  var $i51: i32;
  var $p5: ref;
  var $i6: i32;
  var $i32: i32;
  var $p33: ref;
  var $i52: i64;
  var $i53: i1;
  var $i54: i1;
  var $p55: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1996} {:cexpr "be_get_nic_desc:arg:desc_count"} boogie_si_record_i32($i1);
    call {:si_unique_call 1997} {:cexpr "be_get_nic_desc:arg:max_buf_size"} boogie_si_record_i32($i2);
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    $i4 := $ult.i32(0, $i1);
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    $p5, $i6 := $p0, 0;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i32, $p33 := $i6, $p5;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p33);
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i53 == 1);
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i32, 4);
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p55 := $p33;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    $r := $p55;
    return;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p55 := $0.ref;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb23;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $i7, $p8 := 0, $p0;
    goto $bb4;

  $bb4:
    call $p9, $i10, $i11, $i12, $p13, $i14, $i15, $i16, $i17, $i18, $i19, $p20, $p21, $p22, $i23, $i24, $p25, $i26, $i27, $p28, $i29, $i30, $i31, $p34, $i35, $i36, $i37, $p40, $i41, $i42, $i43, $p38, $i39, $p44, $i45, $i46, $p47, $i48, $i49, $i7, $p8, $p50, $i51 := be_get_nic_desc_loop_$bb4($p0, $i1, $i2, $p9, $i10, $i11, $i12, $p13, $i14, $i15, $i16, $i17, $i18, $i19, $p20, $p21, $p22, $i23, $i24, $p25, $i26, $i27, $p28, $i29, $i30, $i31, $p34, $i35, $i36, $i37, $p40, $i41, $i42, $i43, $p38, $i39, $p44, $i45, $i46, $p47, $i48, $i49, $i7, $p8, $p50, $i51);
    goto $bb4_last;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 72)), $mul.ref(1, 1));
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    $i18 := 88;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p8, $mul.ref(0, 72)), $mul.ref(1, 1));
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $i19);
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p8);
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p8, $mul.ref(0, 72)), $mul.ref(1, 1));
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p21, $mul.ref($i24, 1));
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i2);
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p0, $mul.ref($i27, 1));
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    $i30 := $ugt.i64($i26, $i29);
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    $i31 := $i7;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p8, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 65);
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    $p38, $i39 := $p8, $i7;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i37 == 1);
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p8, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 81);
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    $p38, $i39 := $p8, $i7;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p8, $mul.ref(0, 72)), $mul.ref(1, 1));
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i64($i45);
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p8, $mul.ref($i46, 72));
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i7, 1);
    call {:si_unique_call 1998} {:cexpr "i"} boogie_si_record_i32($i48);
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    $i49 := $ult.i32($i48, $i1);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    $p50, $i51 := $p47, $i48;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $p5, $i6 := $p50, $i51;
    goto $bb3;

  $bb19:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i7, $p8 := $i48, $p47;
    goto $bb19_dummy;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    $i32, $p33 := $i39, $p38;
    goto $bb11;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb14;

  $bb9:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    $i32, $p33 := $i31, $0.ref;
    goto $bb11;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref(0, 72)), $mul.ref(1, 1));
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb8;

  $bb19_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9384;
}



const ldv_mutex_lock_interruptible_46: ref;

axiom ldv_mutex_lock_interruptible_46 == $sub.ref(0, 593638);

procedure ldv_mutex_lock_interruptible_46($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_interruptible_46($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1999} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 2000} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2001} $i2 := ldv_mutex_lock_interruptible_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    call {:si_unique_call 2002} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_47: ref;

axiom ldv_mutex_unlock_47 == $sub.ref(0, 594670);

procedure ldv_mutex_unlock_47($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_47($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2003} ldv_mutex_unlock_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2004} mutex_unlock($p0);
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;
}



const kcalloc: ref;

axiom kcalloc == $sub.ref(0, 595702);

procedure kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2005} {:cexpr "kcalloc:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 2006} {:cexpr "kcalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 2007} {:cexpr "kcalloc:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 32768);
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2008} $p4 := kmalloc_array($i0, $i1, $i3);
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const kmalloc_array: ref;

axiom kmalloc_array == $sub.ref(0, 596734);

procedure kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $p8: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2009} {:cexpr "kmalloc_array:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 2010} {:cexpr "kmalloc_array:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 2011} {:cexpr "kmalloc_array:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i1, 0);
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2012} $p8 := __kmalloc($i7, $i2);
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    $p6 := $p8;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    $i4 := $udiv.i64($sub.i64(0, 1), $i1);
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    $i5 := $ult.i64($i4, $i0);
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb6;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 597766);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2013} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 2014} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2015} $p2 := ldv_malloc($i0);
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 598798);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2016} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2017} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2018} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2019} $p3 := malloc($i0);
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2020} $i4 := ldv_is_err($p3);
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 1} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 1} true;
    $i6 := $xor.i1($i5, 1);
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2021} __VERIFIER_assume($i7);
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    $p8 := $p3;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 599830);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 2022} $r := $malloc($i0);
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 600862);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547521);
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const be_cmd_rx_filter: ref;

axiom be_cmd_rx_filter == $sub.ref(0, 601894);

procedure be_cmd_rx_filter($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_rx_filter($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $i58: i1;
  var $i59: i32;
  var $i60: i64;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i68: i32;
  var $i69: i64;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i67: i32;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $p82: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i1;
  var $i56: i32;
  var $p57: ref;
  var $i87: i32;
  var $i11: i32;
  var $p88: ref;
  var cmdloc_dummy_var_324: [ref]i8;
  var cmdloc_dummy_var_325: [ref]i8;
  var cmdloc_dummy_var_326: [ref]i8;
  var cmdloc_dummy_var_327: [ref]i8;
  var cmdloc_dummy_var_328: [ref]i8;
  var cmdloc_dummy_var_329: [ref]i8;
  var cmdloc_dummy_var_330: [ref]i8;
  var cmdloc_dummy_var_331: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} {:cexpr "be_cmd_rx_filter:arg:flags"} boogie_si_record_i32($i1);
    call {:si_unique_call 2024} {:cexpr "be_cmd_rx_filter:arg:value"} boogie_si_record_i32($i2);
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363448, 1));
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363448, 1)), $mul.ref(0, 1));
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2025} spin_lock_bh($p7);
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2026} $p8 := wrb_from_mccq($p0);
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p6);
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_324 := $M.0;
    call {:si_unique_call 2028} cmdloc_dummy_var_325 := $memset.i8(cmdloc_dummy_var_324, $p12, 0, 424, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_325;
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 424)), $mul.ref(0, 1));
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} be_wrb_cmd_hdr_prepare($p13, 1, 34, 424, $p8, $p3);
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363992, 1));
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 424)), $mul.ref(32, 1));
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i1, 256);
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i1, 512);
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 424)), $mul.ref(28, 1));
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 4096);
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 4096);
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364304, 1));
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 512);
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i29, $i32);
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i33);
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 2784)), $mul.ref(592, 1)), $mul.ref(16, 1));
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 424)), $mul.ref(36, 1));
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i39);
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p42, $mul.ref(0, 2784)), $mul.ref(592, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p51, $mul.ref(0, 2784)), $mul.ref(592, 1)), $mul.ref(0, 1));
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i49, $i54);
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2030} $i87 := be_mcc_notify_wait($p0);
    call {:si_unique_call 2031} {:cexpr "status"} boogie_si_record_i32($i87);
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    $i11 := $i87;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2027} spin_unlock_bh($p88);
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb14:
    assume $i55 == 1;
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    $i56, $p57 := 0, $p46;
    goto $bb17;

  $bb17:
    call $i58, $i59, $i60, $p63, $p64, $p65, $p66, $i68, $i69, $p72, $p73, $p74, $p75, $i67, $p77, $p78, $p79, $p80, $i81, $p82, $p84, $i85, $i86, $i56, $p57, cmdloc_dummy_var_326, cmdloc_dummy_var_327, cmdloc_dummy_var_328, cmdloc_dummy_var_329, cmdloc_dummy_var_330, cmdloc_dummy_var_331 := be_cmd_rx_filter_loop_$bb17($p6, $p50, $i58, $i59, $i60, $p63, $p64, $p65, $p66, $i68, $i69, $p72, $p73, $p74, $p75, $i67, $p77, $p78, $p79, $p80, $i81, $p82, $p84, $i85, $i86, $i56, $p57, cmdloc_dummy_var_326, cmdloc_dummy_var_327, cmdloc_dummy_var_328, cmdloc_dummy_var_329, cmdloc_dummy_var_330, cmdloc_dummy_var_331);
    goto $bb17_last;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i58 := $ugt.i64(6, 63);
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i58 == 1);
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i56, 1);
    call {:si_unique_call 2034} {:cexpr "i"} boogie_si_record_i32($i68);
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i56);
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 424)), $mul.ref(40, 1)), $mul.ref($i69, 6)), $mul.ref(0, 1));
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p57, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_329 := $M.0;
    cmdloc_dummy_var_330 := $M.0;
    call {:si_unique_call 2035} cmdloc_dummy_var_331 := $memcpy.i8(cmdloc_dummy_var_329, cmdloc_dummy_var_330, $p73, $p75, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_331;
    assume {:verifier.code 0} true;
    $i67 := $i68;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p57, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p50);
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 2784)), $mul.ref(592, 1)), $mul.ref(0, 1));
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p84);
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    $i86 := $ne.i64($i81, $i85);
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i86 == 1);
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb22:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    $i56, $p57 := $i67, $p78;
    goto $bb22_dummy;

  $bb19:
    assume $i58 == 1;
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i56, 1);
    call {:si_unique_call 2032} {:cexpr "i"} boogie_si_record_i32($i59);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i56);
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 424)), $mul.ref(40, 1)), $mul.ref($i60, 6)), $mul.ref(0, 1));
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p57, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_326 := $M.0;
    cmdloc_dummy_var_327 := $M.0;
    call {:si_unique_call 2033} cmdloc_dummy_var_328 := $memcpy.i8(cmdloc_dummy_var_326, cmdloc_dummy_var_327, $p64, $p66, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_328;
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    $i67 := $i59;
    goto $bb21;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 424)), $mul.ref(28, 1));
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 512);
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 512);
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 648);
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i2, 1);
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 424)), $mul.ref(28, 1));
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 648);
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 16);
    goto $bb3;

  $bb22_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9581;
}



const be_cmd_vlan_config: ref;

axiom be_cmd_vlan_config == $sub.ref(0, 602926);

procedure be_cmd_vlan_config($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i1, $i5: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_vlan_config($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i1, $i5: i1) returns ($r: i32)
{
  var $i6: i8;
  var $i7: i8;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $p17: ref;
  var $i18: i1;
  var $i19: i8;
  var $p20: ref;
  var $i21: i1;
  var $i22: i8;
  var $p23: ref;
  var $i24: i8;
  var $p25: ref;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i12: i32;
  var $p35: ref;
  var cmdloc_dummy_var_332: [ref]i8;
  var cmdloc_dummy_var_333: [ref]i8;
  var cmdloc_dummy_var_334: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} {:cexpr "be_cmd_vlan_config:arg:if_id"} boogie_si_record_i32($i1);
    call {:si_unique_call 2037} {:cexpr "be_cmd_vlan_config:arg:num"} boogie_si_record_i32($i3);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i4);
    call {:si_unique_call 2038} {:cexpr "be_cmd_vlan_config:arg:untagged"} boogie_si_record_i1($i4);
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i5);
    call {:si_unique_call 2039} {:cexpr "be_cmd_vlan_config:arg:promiscuous"} boogie_si_record_i1($i5);
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2040} spin_lock_bh($p8);
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} $p9 := wrb_from_mccq($p0);
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} $p13 := embedded_payload($p9);
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 148)), $mul.ref(0, 1));
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2044} be_wrb_cmd_hdr_prepare($p15, 1, 4, 148, $p9, $0.ref);
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i1);
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref(0, 148)), $mul.ref(16, 1));
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, $i16);
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i7);
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i8($i18);
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p14, $mul.ref(0, 148)), $mul.ref(17, 1));
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $i19);
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i6);
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i8($i21);
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p14, $mul.ref(0, 148)), $mul.ref(18, 1));
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i22);
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i3);
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p14, $mul.ref(0, 148)), $mul.ref(19, 1));
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, $i24);
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i7);
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p14, $mul.ref(0, 148)), $mul.ref(19, 1));
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i64($i28);
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    $i30 := $mul.i64($i29, 2);
    call {:si_unique_call 2045} {:cexpr "__len"} boogie_si_record_i64($i30);
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p14, $mul.ref(0, 148)), $mul.ref(20, 1));
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p2);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_332 := $M.0;
    cmdloc_dummy_var_333 := $M.0;
    call {:si_unique_call 2046} cmdloc_dummy_var_334 := $memcpy.i8(cmdloc_dummy_var_332, cmdloc_dummy_var_333, $p32, $p33, $i30, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_334;
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2047} $i34 := be_mcc_notify_wait($p0);
    call {:si_unique_call 2048} {:cexpr "status"} boogie_si_record_i32($i34);
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    $i12 := $i34;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} spin_unlock_bh($p35);
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb5:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 16);
    goto $bb3;
}



const be_cmd_txq_create: ref;

axiom be_cmd_txq_create == $sub.ref(0, 603958);

procedure be_cmd_txq_create($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_txq_create($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i16;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i16;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $p60: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i64;
  var $p67: ref;
  var $i68: i32;
  var $i69: i64;
  var $i70: i64;
  var $i71: i64;
  var $i72: i64;
  var $i73: i8;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i16;
  var $p79: ref;
  var $p80: ref;
  var $i81: i16;
  var $i82: i32;
  var $i83: i32;
  var $i84: i8;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i16;
  var $p98: ref;
  var $i99: i1;
  var $p100: ref;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i9: i32;
  var $p105: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2049} spin_lock_bh($p5);
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2050} $p6 := wrb_from_mccq($p0);
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} $p10 := embedded_payload($p6);
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 148)), $mul.ref(0, 1));
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} be_wrb_cmd_hdr_prepare($p12, 3, 7, 148, $p6, $0.ref);
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 57888);
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i18 == 1);
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_9696;

  corral_source_split_9696:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 57896);
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.0, $p33);
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 545);
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i36 == 1);
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 1808);
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i42 == 1);
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.0, $p45);
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 529);
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i48 == 1);
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p51);
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 1792);
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i54 == 1);
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 148)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, 2);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    $p63 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    $i66 := $and.i64($i65, 4095);
    $p67 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    $i69 := $zext.i32.i64($i68);
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    $i70 := $add.i64($i66, $i69);
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    $i71 := $add.i64($i70, 4095);
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    $i72 := $lshr.i64($i71, 12);
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i64.i8($i72);
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p11, $mul.ref(0, 148)), $mul.ref(16, 1));
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p74, $i73);
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p11, $mul.ref(0, 148)), $mul.ref(17, 1));
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p75, 1);
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p11, $mul.ref(0, 148)), $mul.ref(18, 1));
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p76, 2);
    $p77 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16528)), $mul.ref(48, 1)), $mul.ref(28, 1));
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    $i78 := $load.i16($M.0, $p77);
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p11, $mul.ref(0, 148)), $mul.ref(28, 1));
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p79, $i78);
    $p80 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    $i81 := $load.i16($M.0, $p80);
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i81);
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} $i83 := be_encoded_q_len($i82);
    call {:si_unique_call 2055} {:cexpr "tmp___0"} boogie_si_record_i32($i83);
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i8($i83);
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p11, $mul.ref(0, 148)), $mul.ref(22, 1));
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p85, $i84);
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p11, $mul.ref(0, 148)), $mul.ref(84, 1));
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} be_cmd_page_addrs_prepare($p87, 8, $p4);
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 148)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.0, $p89);
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    call {:si_unique_call 2057} {:cexpr "ver"} boogie_si_record_i32($i91);
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2058} $i92 := be_mcc_notify_wait($p0);
    call {:si_unique_call 2059} {:cexpr "status"} boogie_si_record_i32($i92);
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 0);
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i9 := $i92;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} spin_unlock_bh($p105);
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb24:
    assume $i93 == 1;
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2060} $p94 := embedded_payload($p6);
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    $i97 := $load.i16($M.0, $p96);
    $p98 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(28, 1));
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p98, $i97);
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i91, 2);
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i99 == 1);
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p1, $mul.ref(0, 16528)), $mul.ref(0, 1));
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p103, 96);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    $p104 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(34, 1));
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p104, 1);
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i99 == 1;
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p95, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p1, $mul.ref(0, 16528)), $mul.ref(0, 1));
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, $i101);
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364028, 1));
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 64);
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i58 == 1;
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 148)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, 2);
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb12;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb12;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb12;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 148)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 1);
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363992, 1));
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i16($i28);
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p11, $mul.ref(0, 148)), $mul.ref(20, 1));
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p30, $i29);
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 16);
    goto $bb3;
}



const be_encoded_q_len: ref;

axiom be_encoded_q_len == $sub.ref(0, 604990);

procedure be_encoded_q_len($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation be_encoded_q_len($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} {:cexpr "be_encoded_q_len:arg:q_len"} boogie_si_record_i32($i0);
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2062} $i1 := fls($i0);
    call {:si_unique_call 2063} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 16);
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;
}



const be_cmd_cq_create: ref;

axiom be_cmd_cq_create == $sub.ref(0, 606022);

procedure be_cmd_cq_create($p0: ref, $p1: ref, $p2: ref, $i3: i1, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_cmd_cq_create($p0: ref, $p1: ref, $p2: ref, $i3: i1, $i4: i32) returns ($r: i32)
{
  var $i5: i8;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i16;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i16;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i16;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i16;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $p57: ref;
  var $i58: i16;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $i67: i16;
  var $i68: i32;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $p75: ref;
  var $i76: i16;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $i85: i16;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i16;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i3);
    call {:si_unique_call 2064} {:cexpr "be_cmd_cq_create:arg:no_delay"} boogie_si_record_i1($i3);
    call {:si_unique_call 2065} {:cexpr "be_cmd_cq_create:arg:coalesce_wm"} boogie_si_record_i32($i4);
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2066} $i8 := ldv_mutex_lock_interruptible_22($p7);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    call {:si_unique_call 2067} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2068} $p11 := wrb_from_mbox($p0);
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} $p12 := embedded_payload($p11);
    goto corral_source_split_9819;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 100)), $mul.ref(20, 1));
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p13, $mul.ref(0, 100)), $mul.ref(0, 1));
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2070} be_wrb_cmd_hdr_prepare($p16, 1, 12, 100, $p11, $0.ref);
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 4095);
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i22);
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i20, $i23);
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 4095);
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    $i26 := $lshr.i64($i25, 12);
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i64.i16($i26);
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p13, $mul.ref(0, 100)), $mul.ref(16, 1));
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, $i27);
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.0, $p31);
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 545);
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i34 == 1);
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 1808);
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i40 == 1);
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.0, $p43);
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 529);
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i46 == 1);
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.0, $p49);
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 1792);
    goto corral_source_split_9888;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i52 == 1);
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 100)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p70, 2);
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p13, $mul.ref(0, 100)), $mul.ref(18, 1));
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, 1);
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2091} $i72 := amap_mask(1);
    call {:si_unique_call 2092} {:cexpr "tmp___8"} boogie_si_record_i32($i72);
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i8.i1($i5);
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    $i74 := $zext.i1.i32($i73);
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2093} amap_set($p15, 0, $i72, 14, $i74);
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    $i76 := $load.i16($M.0, $p75);
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i76);
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    $i78 := $udiv.i32($i77, 256);
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2094} $i79 := __ilog2_u32($i78);
    call {:si_unique_call 2095} {:cexpr "tmp___9"} boogie_si_record_i32($i79);
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2096} $i80 := amap_mask(2);
    call {:si_unique_call 2097} {:cexpr "tmp___10"} boogie_si_record_i32($i80);
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2098} amap_set($p15, 0, $i80, 27, $i79);
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} $i81 := amap_mask(1);
    call {:si_unique_call 2100} {:cexpr "tmp___11"} boogie_si_record_i32($i81);
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} amap_set($p15, 0, $i81, 29, 1);
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2102} $i82 := amap_mask(1);
    call {:si_unique_call 2103} {:cexpr "tmp___12"} boogie_si_record_i32($i82);
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2104} amap_set($p15, 0, $i82, 31, 1);
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} $i83 := amap_mask(16);
    call {:si_unique_call 2106} {:cexpr "tmp___13"} boogie_si_record_i32($i83);
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    $i85 := $load.i16($M.0, $p84);
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    $i86 := $zext.i16.i32($i85);
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2107} amap_set($p15, 1, $i83, 0, $i86);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2108} swap_dws($p15, 16);
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p13, $mul.ref(0, 100)), $mul.ref(36, 1));
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} be_cmd_page_addrs_prepare($p88, 8, $p6);
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2110} $i89 := be_mbox_notify_wait($p0);
    call {:si_unique_call 2111} {:cexpr "status"} boogie_si_record_i32($i89);
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 0);
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2113} ldv_mutex_unlock_23($p97);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    $i10 := $i89;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i90 == 1;
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2112} $p91 := embedded_payload($p11);
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    $i94 := $load.i16($M.0, $p93);
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p95, $i94);
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(34, 1));
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p96, 1);
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} $i53 := amap_mask(2);
    call {:si_unique_call 2072} {:cexpr "tmp___1"} boogie_si_record_i32($i53);
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} amap_set($p15, 0, $i53, 12, $i4);
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2074} $i54 := amap_mask(1);
    call {:si_unique_call 2075} {:cexpr "tmp___2"} boogie_si_record_i32($i54);
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i8.i1($i5);
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    $i56 := $zext.i1.i32($i55);
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2076} amap_set($p15, 0, $i54, 14, $i56);
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    $i58 := $load.i16($M.0, $p57);
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i58);
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    $i60 := $udiv.i32($i59, 256);
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} $i61 := __ilog2_u32($i60);
    call {:si_unique_call 2078} {:cexpr "tmp___3"} boogie_si_record_i32($i61);
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} $i62 := amap_mask(2);
    call {:si_unique_call 2080} {:cexpr "tmp___4"} boogie_si_record_i32($i62);
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} amap_set($p15, 0, $i62, 27, $i61);
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2082} $i63 := amap_mask(1);
    call {:si_unique_call 2083} {:cexpr "tmp___5"} boogie_si_record_i32($i63);
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2084} amap_set($p15, 0, $i63, 29, 1);
    goto corral_source_split_9857;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2085} $i64 := amap_mask(1);
    call {:si_unique_call 2086} {:cexpr "tmp___6"} boogie_si_record_i32($i64);
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} amap_set($p15, 0, $i64, 31, 1);
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2088} $i65 := amap_mask(8);
    call {:si_unique_call 2089} {:cexpr "tmp___7"} boogie_si_record_i32($i65);
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    $i67 := $load.i16($M.0, $p66);
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    $i68 := $zext.i16.i32($i67);
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2090} amap_set($p15, 1, $i65, 22, $i68);
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 1);
    goto $bb3;

  SeqInstr_283:
    assume !assertsPassed;
    return;
}



const be_cmd_mccq_create: ref;

axiom be_cmd_mccq_create == $sub.ref(0, 607054);

procedure be_cmd_mccq_create($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_cmd_mccq_create($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i21: i32;
  var $i22: i32;
  var vslice_dummy_var_518: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2114} $i3 := be_cmd_mccq_ext_create($p0, $p1, $p2);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    call {:si_unique_call 2115} {:cexpr "status"} boogie_si_record_i32($i3);
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_9937;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i22 := $i3;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 57888);
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 57896);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2116} vslice_dummy_var_518 := dev_warn.ref.ref($p19, .str.13);
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} $i21 := be_cmd_mccq_org_create($p0, $p1, $p2);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    call {:si_unique_call 2118} {:cexpr "status"} boogie_si_record_i32($i21);
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb8;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;
}



const be_cmd_mccq_ext_create: ref;

axiom be_cmd_mccq_ext_create == $sub.ref(0, 608086);

procedure be_cmd_mccq_ext_create($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_cmd_mccq_ext_create($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i16;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i16;
  var $p42: ref;
  var $p43: ref;
  var $i44: i16;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $i51: i16;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $i56: i16;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $i62: i16;
  var $i63: i32;
  var $p65: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i16;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} $i5 := ldv_mutex_lock_interruptible_24($p4);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    call {:si_unique_call 2120} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_9968;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} $p8 := wrb_from_mbox($p0);
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2122} $p9 := embedded_payload($p8);
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} be_wrb_cmd_hdr_prepare($p13, 1, 90, 104, $p8, $0.ref);
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 4095);
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i19);
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i17, $i20);
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 4095);
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    $i23 := $lshr.i64($i22, 12);
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i16($i23);
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p10, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, $i24);
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_9992;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p28);
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 57888);
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i31 == 1);
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_10023;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 57896);
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i37 == 1);
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2138} $i54 := amap_mask(1);
    call {:si_unique_call 2139} {:cexpr "tmp___6"} boogie_si_record_i32($i54);
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2140} amap_set($p12, 1, $i54, 31, 1);
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    $i56 := $load.i16($M.0, $p55);
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2141} $i58 := be_encoded_q_len($i57);
    call {:si_unique_call 2142} {:cexpr "tmp___7"} boogie_si_record_i32($i58);
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} $i59 := amap_mask(4);
    call {:si_unique_call 2144} {:cexpr "tmp___8"} boogie_si_record_i32($i59);
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} amap_set($p12, 0, $i59, 16, $i58);
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2146} $i60 := amap_mask(10);
    call {:si_unique_call 2147} {:cexpr "tmp___9"} boogie_si_record_i32($i60);
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.0, $p61);
    goto corral_source_split_10040;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2148} amap_set($p12, 0, $i60, 22, $i63);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 104)), $mul.ref(20, 1)), $mul.ref(0, 4));
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, 34);
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 104)), $mul.ref(20, 1)), $mul.ref(0, 4));
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    $i69 := $or.i32($i68, 64);
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 104)), $mul.ref(20, 1)), $mul.ref(0, 4));
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, $i69);
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2149} swap_dws($p12, 16);
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p10, $mul.ref(0, 104)), $mul.ref(40, 1));
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2150} be_cmd_page_addrs_prepare($p73, 8, $p3);
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2151} $i74 := be_mbox_notify_wait($p0);
    call {:si_unique_call 2152} {:cexpr "status"} boogie_si_record_i32($i74);
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 0);
    goto corral_source_split_10055;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_10067;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2154} ldv_mutex_unlock_25($p82);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    $i7 := $i74;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i75 == 1;
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2153} $p76 := embedded_payload($p8);
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    $i79 := $load.i16($M.0, $p78);
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p80, $i79);
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(34, 1));
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p81, 1);
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_9999;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, 1);
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p10, $mul.ref(0, 104)), $mul.ref(18, 1));
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p42, $i41);
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.0, $p43);
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} $i46 := be_encoded_q_len($i45);
    call {:si_unique_call 2125} {:cexpr "tmp___1"} boogie_si_record_i32($i46);
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2126} $i47 := amap_mask(4);
    call {:si_unique_call 2127} {:cexpr "tmp___2"} boogie_si_record_i32($i47);
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2128} amap_set($p12, 0, $i47, 16, $i46);
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} $i48 := amap_mask(1);
    call {:si_unique_call 2130} {:cexpr "tmp___3"} boogie_si_record_i32($i48);
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} amap_set($p12, 1, $i48, 31, 1);
    goto corral_source_split_10012;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2132} $i49 := amap_mask(16);
    call {:si_unique_call 2133} {:cexpr "tmp___4"} boogie_si_record_i32($i49);
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.0, $p50);
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2134} amap_set($p12, 0, $i49, 0, $i52);
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2135} $i53 := amap_mask(1);
    call {:si_unique_call 2136} {:cexpr "tmp___5"} boogie_si_record_i32($i53);
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} amap_set($p12, 2, $i53, 0, 1);
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 1);
    goto $bb3;

  SeqInstr_295:
    assume !assertsPassed;
    return;
}



const be_cmd_mccq_org_create: ref;

axiom be_cmd_mccq_org_create == $sub.ref(0, 609118);

procedure be_cmd_mccq_org_create($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_cmd_mccq_org_create($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i16;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i16;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2155} $i5 := ldv_mutex_lock_interruptible_26($p4);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    call {:si_unique_call 2156} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_10073;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2157} $p8 := wrb_from_mbox($p0);
    goto corral_source_split_10080;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2158} $p9 := embedded_payload($p8);
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_10082;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 100)), $mul.ref(20, 1));
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_10084;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref(0, 100)), $mul.ref(0, 1));
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2159} be_wrb_cmd_hdr_prepare($p13, 1, 21, 100, $p8, $0.ref);
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 4095);
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i19);
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i17, $i20);
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 4095);
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    $i23 := $lshr.i64($i22, 12);
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i16($i23);
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p10, $mul.ref(0, 100)), $mul.ref(16, 1));
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, $i24);
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2160} $i26 := amap_mask(1);
    call {:si_unique_call 2161} {:cexpr "tmp___1"} boogie_si_record_i32($i26);
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2162} amap_set($p12, 1, $i26, 31, 1);
    goto corral_source_split_10099;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p27);
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2163} $i30 := be_encoded_q_len($i29);
    call {:si_unique_call 2164} {:cexpr "tmp___2"} boogie_si_record_i32($i30);
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2165} $i31 := amap_mask(4);
    call {:si_unique_call 2166} {:cexpr "tmp___3"} boogie_si_record_i32($i31);
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2167} amap_set($p12, 0, $i31, 16, $i30);
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2168} $i32 := amap_mask(10);
    call {:si_unique_call 2169} {:cexpr "tmp___4"} boogie_si_record_i32($i32);
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.0, $p33);
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2170} amap_set($p12, 0, $i32, 22, $i35);
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2171} swap_dws($p12, 16);
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p10, $mul.ref(0, 100)), $mul.ref(36, 1));
    goto corral_source_split_10112;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2172} be_cmd_page_addrs_prepare($p37, 8, $p3);
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2173} $i38 := be_mbox_notify_wait($p0);
    call {:si_unique_call 2174} {:cexpr "status"} boogie_si_record_i32($i38);
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} ldv_mutex_unlock_27($p46);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    $i7 := $i38;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i39 == 1;
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} $p40 := embedded_payload($p8);
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.0, $p42);
    goto corral_source_split_10122;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p44, $i43);
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(34, 1));
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, 1);
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 1);
    goto $bb3;

  SeqInstr_301:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_26: ref;

axiom ldv_mutex_lock_interruptible_26 == $sub.ref(0, 610150);

procedure ldv_mutex_lock_interruptible_26($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_interruptible_26($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2177} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 2178} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2179} $i2 := ldv_mutex_lock_interruptible_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    call {:si_unique_call 2180} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_27: ref;

axiom ldv_mutex_unlock_27 == $sub.ref(0, 611182);

procedure ldv_mutex_unlock_27($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_27($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2181} ldv_mutex_unlock_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2182} mutex_unlock($p0);
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_24: ref;

axiom ldv_mutex_lock_interruptible_24 == $sub.ref(0, 612214);

procedure ldv_mutex_lock_interruptible_24($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_interruptible_24($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2183} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 2184} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2185} $i2 := ldv_mutex_lock_interruptible_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    call {:si_unique_call 2186} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_25: ref;

axiom ldv_mutex_unlock_25 == $sub.ref(0, 613246);

procedure ldv_mutex_unlock_25($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_25($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2187} ldv_mutex_unlock_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2188} mutex_unlock($p0);
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_22: ref;

axiom ldv_mutex_lock_interruptible_22 == $sub.ref(0, 614278);

procedure ldv_mutex_lock_interruptible_22($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_interruptible_22($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2189} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 2190} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2191} $i2 := ldv_mutex_lock_interruptible_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    call {:si_unique_call 2192} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;
}



const __ilog2_u32: ref;

axiom __ilog2_u32 == $sub.ref(0, 615310);

procedure __ilog2_u32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __ilog2_u32($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2193} {:cexpr "__ilog2_u32:arg:n"} boogie_si_record_i32($i0);
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2194} $i1 := fls($i0);
    call {:si_unique_call 2195} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mutex_unlock_23: ref;

axiom ldv_mutex_unlock_23 == $sub.ref(0, 616342);

procedure ldv_mutex_unlock_23($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_23($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2196} ldv_mutex_unlock_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2197} mutex_unlock($p0);
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;
}



const netif_set_real_num_rx_queues: ref;

axiom netif_set_real_num_rx_queues == $sub.ref(0, 617374);

procedure netif_set_real_num_rx_queues($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netif_set_real_num_rx_queues($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2198} {:cexpr "netif_set_real_num_rx_queues:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2199} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2200} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const be_num_txqs_want: ref;

axiom be_num_txqs_want == $sub.ref(0, 618406);

procedure be_num_txqs_want($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation be_num_txqs_want($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i23: i1;
  var $i24: i8;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i16;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i16;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i16;
  var $i56: i32;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_10166;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 57888);
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2201} $i23 := be_is_mc($p0);
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i8($i23);
    call {:si_unique_call 2202} {:cexpr "tmp"} boogie_si_record_i8($i24);
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    goto corral_source_split_10203;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p28);
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 57888);
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_10221;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.0, $p44);
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_10223;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 529);
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i47 == 1);
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_10235;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.0, $p50);
    goto corral_source_split_10238;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 1792);
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i53 == 1);
    goto corral_source_split_10242;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364290, 1));
    goto corral_source_split_10243;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.0, $p54);
    goto corral_source_split_10244;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i55);
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    $i22 := $i56;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i22 := 1;
    goto $bb12;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb23;

  $bb15:
    assume $i31 == 1;
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 57896);
    goto corral_source_split_10217;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb17;

  $bb18:
    assume $i37 == 1;
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb17;

  $bb20:
    assume $i41 == 1;
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    $i22 := 1;
    goto $bb12;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_10201;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    $i22 := 1;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_10173;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 57896);
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_10182;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364204, 1));
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    $i16 := $M.39;
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb3;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_10192;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb3;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_10197;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    $i22 := 1;
    goto $bb12;
}



const netif_set_real_num_tx_queues: ref;

axiom netif_set_real_num_tx_queues == $sub.ref(0, 619438);

procedure netif_set_real_num_tx_queues($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netif_set_real_num_tx_queues($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2203} {:cexpr "netif_set_real_num_tx_queues:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2204} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2205} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const be_cmd_eq_create: ref;

axiom be_cmd_eq_create == $sub.ref(0, 620470);

procedure be_cmd_eq_create($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_cmd_eq_create($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i16;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i16;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2206} {:cexpr "be_cmd_eq_create:arg:eq_delay"} boogie_si_record_i32($i2);
    goto corral_source_split_10250;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2207} $i5 := ldv_mutex_lock_interruptible_20($p4);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    call {:si_unique_call 2208} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2209} $p8 := wrb_from_mbox($p0);
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2210} $p9 := embedded_payload($p8);
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 100)), $mul.ref(0, 1));
    goto corral_source_split_10263;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2211} be_wrb_cmd_hdr_prepare($p11, 1, 13, 100, $p8, $0.ref);
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 4095);
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_10267;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i15, $i18);
    goto corral_source_split_10270;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 4095);
    goto corral_source_split_10271;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    $i21 := $lshr.i64($i20, 12);
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i16($i21);
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p10, $mul.ref(0, 100)), $mul.ref(16, 1));
    goto corral_source_split_10274;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p23, $i22);
    goto corral_source_split_10275;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2212} $i24 := amap_mask(1);
    call {:si_unique_call 2213} {:cexpr "tmp___1"} boogie_si_record_i32($i24);
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p10, $mul.ref(0, 100)), $mul.ref(20, 1));
    goto corral_source_split_10277;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2214} amap_set($p26, 0, $i24, 29, 1);
    goto corral_source_split_10279;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2215} $i27 := amap_mask(1);
    call {:si_unique_call 2216} {:cexpr "tmp___2"} boogie_si_record_i32($i27);
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p10, $mul.ref(0, 100)), $mul.ref(20, 1));
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2217} amap_set($p29, 0, $i27, 31, 0);
    goto corral_source_split_10283;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.0, $p30);
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    $i33 := $udiv.i32($i32, 256);
    goto corral_source_split_10287;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2218} $i34 := __ilog2_u32($i33);
    call {:si_unique_call 2219} {:cexpr "tmp___3"} boogie_si_record_i32($i34);
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2220} $i35 := amap_mask(3);
    call {:si_unique_call 2221} {:cexpr "tmp___4"} boogie_si_record_i32($i35);
    goto corral_source_split_10289;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p10, $mul.ref(0, 100)), $mul.ref(20, 1));
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2222} amap_set($p37, 1, $i35, 26, $i34);
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2223} $i38 := eq_delay_to_mult($i2);
    call {:si_unique_call 2224} {:cexpr "tmp___5"} boogie_si_record_i32($i38);
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2225} $i39 := amap_mask(10);
    call {:si_unique_call 2226} {:cexpr "tmp___6"} boogie_si_record_i32($i39);
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p10, $mul.ref(0, 100)), $mul.ref(20, 1));
    goto corral_source_split_10295;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2227} amap_set($p41, 2, $i39, 13, $i38);
    goto corral_source_split_10297;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p10, $mul.ref(0, 100)), $mul.ref(20, 1));
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2228} swap_dws($p43, 16);
    goto corral_source_split_10300;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p10, $mul.ref(0, 100)), $mul.ref(36, 1));
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_10302;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2229} be_cmd_page_addrs_prepare($p45, 8, $p3);
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2230} $i46 := be_mbox_notify_wait($p0);
    call {:si_unique_call 2231} {:cexpr "status"} boogie_si_record_i32($i46);
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2233} ldv_mutex_unlock_21($p54);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    $i7 := $i46;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i47 == 1;
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2232} $p48 := embedded_payload($p8);
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.0, $p50);
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p52, $i51);
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(34, 1));
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, 1);
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 1);
    goto $bb3;

  SeqInstr_325:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_20: ref;

axiom ldv_mutex_lock_interruptible_20 == $sub.ref(0, 621502);

procedure ldv_mutex_lock_interruptible_20($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_interruptible_20($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2234} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 2235} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10321;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2236} $i2 := ldv_mutex_lock_interruptible_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    call {:si_unique_call 2237} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;
}



const eq_delay_to_mult: ref;

axiom eq_delay_to_mult == $sub.ref(0, 622534);

procedure eq_delay_to_mult($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation eq_delay_to_mult($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i5: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2238} {:cexpr "eq_delay_to_mult:arg:usec_delay"} boogie_si_record_i32($i0);
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    $i3 := $udiv.i32(1000000, $i0);
    call {:si_unique_call 2239} {:cexpr "interrupt_rate"} boogie_si_record_i32($i3);
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(651042, $i3);
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    $i7 := $mul.i32($i6, 10);
    call {:si_unique_call 2240} {:cexpr "multiplier"} boogie_si_record_i32($i7);
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    $i8 := $udiv.i32($i7, $i3);
    call {:si_unique_call 2241} {:cexpr "multiplier"} boogie_si_record_i32($i8);
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    $i9 := $udiv.i32(10, 2);
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, $i8);
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    $i11 := $udiv.i32($i10, 10);
    call {:si_unique_call 2242} {:cexpr "multiplier"} boogie_si_record_i32($i11);
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    $i12 := $ult.i32($i11, 1023);
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    goto corral_source_split_10348;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    $i13 := 1023;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i5 := $i13;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $i5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10333;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_10346;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb9;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    $i5 := 1023;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;
}



const ldv_mutex_unlock_21: ref;

axiom ldv_mutex_unlock_21 == $sub.ref(0, 623566);

procedure ldv_mutex_unlock_21($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_21($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2243} ldv_mutex_unlock_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2244} mutex_unlock($p0);
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;
}



const be_num_rss_want: ref;

axiom be_num_rss_want == $sub.ref(0, 624598);

procedure be_num_rss_want($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation be_num_rss_want($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364028, 1));
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_10356;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 2);
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_10365;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 57888);
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i10 == 1);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_10375;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 57896);
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364204, 1));
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_10385;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  $bb11:
    assume !($i19 == 1);
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    $i20 := $M.39;
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i21 == 1);
    goto corral_source_split_10396;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb3;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb3;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364292, 1));
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.0, $p30);
    goto corral_source_split_10369;

  corral_source_split_10369:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    call {:si_unique_call 2245} {:cexpr "num"} boogie_si_record_i32($i32);
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2246} $i33 := netif_get_num_default_rss_queues();
    call {:si_unique_call 2247} {:cexpr "tmp"} boogie_si_record_i32($i33);
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    $i34 := $ult.i32($i32, $i33);
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i34 == 1);
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    $i35 := $i33;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_10406;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb21;

  $bb18:
    assume $i34 == 1;
    goto corral_source_split_10402;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    $i35 := $i32;
    goto $bb20;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb10;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb5;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb5;
}



const cpumask_weight: ref;

axiom cpumask_weight == $sub.ref(0, 625630);

procedure cpumask_weight($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_weight($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_10411;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2248} $i4 := bitmap_weight($p2, $i3);
    call {:si_unique_call 2249} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_10414;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pci_enable_msix: ref;

axiom pci_enable_msix == $sub.ref(0, 626662);

procedure pci_enable_msix($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_msix($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2250} {:cexpr "pci_enable_msix:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2251} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2252} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const bitmap_weight: ref;

axiom bitmap_weight == $sub.ref(0, 627694);

procedure bitmap_weight($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation bitmap_weight($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2253} {:cexpr "bitmap_weight:arg:nbits"} boogie_si_record_i32($i1);
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2254} $i2 := __bitmap_weight($p0, $i1);
    call {:si_unique_call 2255} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_10420;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __bitmap_weight: ref;

axiom __bitmap_weight == $sub.ref(0, 628726);

procedure __bitmap_weight($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __bitmap_weight($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2256} {:cexpr "__bitmap_weight:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2257} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2258} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const netif_get_num_default_rss_queues: ref;

axiom netif_get_num_default_rss_queues == $sub.ref(0, 629758);

procedure netif_get_num_default_rss_queues() returns ($r: i32);
  free requires assertsPassed;



implementation netif_get_num_default_rss_queues() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2259} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2260} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const be_cmd_query_fw_cfg: ref;

axiom be_cmd_query_fw_cfg == $sub.ref(0, 630790);

procedure be_cmd_query_fw_cfg($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_cmd_query_fw_cfg($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i16;
  var $i26: i32;
  var $i27: i32;
  var $i28: i16;
  var $p29: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2261} $i6 := ldv_mutex_lock_interruptible_30($p5);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    call {:si_unique_call 2262} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2263} $p9 := wrb_from_mbox($p0);
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2264} $p10 := embedded_payload($p9);
    goto corral_source_split_10438;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 140)), $mul.ref(0, 1));
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2265} be_wrb_cmd_hdr_prepare($p12, 1, 58, 140, $p9, $0.ref);
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2266} $i13 := be_mbox_notify_wait($p0);
    call {:si_unique_call 2267} {:cexpr "status"} boogie_si_record_i32($i13);
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_10465;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2269} ldv_mutex_unlock_31($p29);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2268} $p15 := embedded_payload($p9);
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 140)), $mul.ref(24, 1));
    goto corral_source_split_10448;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i18);
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p16, $mul.ref(0, 140)), $mul.ref(28, 1));
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_10452;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i20);
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p16, $mul.ref(0, 140)), $mul.ref(136, 1));
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i22);
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p16, $mul.ref(0, 140)), $mul.ref(20, 1));
    goto corral_source_split_10457;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_10460;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 255);
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_10462;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $i28);
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb3;

  SeqInstr_337:
    assume !assertsPassed;
    return;
}



const be_get_resources: ref;

axiom be_get_resources == $sub.ref(0, 631822);

procedure be_get_resources($p0: ref);
  free requires assertsPassed;
  modifies $M.47, $M.41, $M.46, $M.0, $M.48, $M.21, $CurrAddr, $M.25, assertsPassed, $M.26;



implementation be_get_resources($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i8;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $i30: i8;
  var $i48: i1;
  var $p49: ref;
  var $i50: i16;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i56: i32;
  var $i55: i32;
  var $i57: i16;
  var $p58: ref;
  var $p59: ref;
  var $i60: i16;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i66: i32;
  var $i65: i32;
  var $i67: i16;
  var $p68: ref;
  var $p69: ref;
  var $i70: i16;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i76: i32;
  var $i75: i32;
  var $i77: i16;
  var $p78: ref;
  var $p79: ref;
  var $i80: i16;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i86: i32;
  var $i85: i32;
  var $i87: i16;
  var $p88: ref;
  var $p89: ref;
  var $i90: i16;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i96: i32;
  var $i95: i32;
  var $i97: i16;
  var $p98: ref;
  var $p99: ref;
  var $i100: i16;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $i104: i32;
  var $i106: i32;
  var $i105: i32;
  var $i107: i16;
  var $p108: ref;
  var $p109: ref;
  var $i110: i16;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $i114: i16;
  var $i115: i32;
  var $p116: ref;
  var $i117: i16;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $i121: i16;
  var $i122: i32;
  var $i123: i32;
  var $i124: i16;
  var $p125: ref;
  var $p126: ref;
  var $i127: i16;
  var $i128: i32;
  var $p129: ref;
  var $i130: i16;
  var $i131: i32;
  var $i132: i1;
  var $p133: ref;
  var $i134: i16;
  var $p135: ref;
  var $p136: ref;
  var $i137: i8;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i32;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $i149: i16;
  var $i150: i32;
  var $i151: i1;
  var $i152: i16;
  var $i153: i32;
  var $i154: i32;
  var $i155: i16;
  var $p156: ref;
  var $p157: ref;
  var $i158: i16;
  var $i159: i32;
  var $i160: i32;
  var $i161: i1;
  var $i162: i32;
  var $i164: i32;
  var $i163: i32;
  var $i165: i16;
  var $p166: ref;
  var $p167: ref;
  var $i168: i8;
  var $i169: i1;
  var $i170: i32;
  var $i171: i16;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $i176: i32;
  var $i177: i32;
  var $i178: i1;
  var $p179: ref;
  var $i180: i32;
  var $i181: i32;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $i185: i32;
  var $i186: i1;
  var $p187: ref;
  var $p188: ref;
  var $i189: i32;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $i194: i16;
  var $i195: i32;
  var $i196: i1;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $i200: i16;
  var $i201: i32;
  var $i202: i1;
  var $i203: i16;
  var $i204: i32;
  var $i205: i32;
  var $i206: i1;
  var $i207: i32;
  var $i209: i32;
  var $i208: i32;
  var $i210: i16;
  var $i211: i16;
  var $i212: i32;
  var $p213: ref;
  var vslice_dummy_var_519: i32;
  var vslice_dummy_var_520: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2270} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2271} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    $M.47 := $store.i16($M.47, $p2, 0);
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_10474;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 545);
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.0, $p33);
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 545);
    goto corral_source_split_10490;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i36 == 1);
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 1808);
    goto corral_source_split_10530;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i8.i1($i30);
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i48 == 1);
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_10543;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    $i137 := $load.i8($M.0, $p136);
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i137);
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i138, 0);
    goto corral_source_split_10546;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i139 == 1);
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364296, 1));
    goto corral_source_split_10685;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p141, 2);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364024, 1));
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.0, $p142);
    goto corral_source_split_10688;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    $i144 := $and.i32($i143, 1024);
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    $i145 := $ne.i32($i144, 0);
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i145 == 1);
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364298, 1));
    goto corral_source_split_10697;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p147, 64);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364288, 1));
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p148, 64);
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    $i149 := $load.i16($M.47, $p2);
    goto corral_source_split_10701;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    $i150 := $zext.i16.i32($i149);
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    $i151 := $ne.i32($i150, 0);
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i151 == 1);
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    $i154 := 8;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_10711;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    $i155 := $trunc.i32.i16($i154);
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364290, 1));
    goto corral_source_split_10713;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p156, $i155);
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364290, 1));
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    $i158 := $load.i16($M.0, $p157);
    call {:si_unique_call 2283} {:cexpr "__min1___5"} boogie_si_record_i16($i158);
    goto corral_source_split_10716;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    $i159 := $zext.i16.i32($i158);
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    $i160 := $zext.i16.i32(8);
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    $i161 := $slt.i32($i159, $i160);
    goto corral_source_split_10719;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i161 == 1);
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    $i164 := $zext.i16.i32(8);
    goto corral_source_split_10725;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    $i163 := $i164;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    $i165 := $trunc.i32.i16($i163);
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364290, 1));
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p166, $i165);
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364224, 1));
    goto corral_source_split_10731;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    $i168 := $load.i8($M.0, $p167);
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    $i169 := $trunc.i8.i1($i168);
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    $i170 := (if $i169 == 1 then 8 else 4);
    goto corral_source_split_10734;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    $i171 := $trunc.i32.i16($i170);
    goto corral_source_split_10735;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364292, 1));
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p172, $i171);
    goto corral_source_split_10737;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364300, 1));
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p173, 8);
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364304, 1));
    goto corral_source_split_10740;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p174, 6840);
    goto corral_source_split_10741;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364028, 1));
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    $i176 := $load.i32($M.0, $p175);
    goto corral_source_split_10743;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    $i177 := $and.i32($i176, 2);
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    $i178 := $ne.i32($i177, 0);
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i178} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_10676;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2281} $i185 := pci_find_ext_capability($p184, 16);
    call {:si_unique_call 2282} {:cexpr "pos"} boogie_si_record_i32($i185);
    goto corral_source_split_10677;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    $i186 := $ne.i32($i185, 0);
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i186} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    return;

  $bb68:
    assume $i186 == 1;
    goto corral_source_split_10754;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_10755;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.0, $p187);
    goto corral_source_split_10756;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    $i189 := $add.i32($i185, 14);
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2284} vslice_dummy_var_520 := pci_read_config_word($p188, $i189, $p1);
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.0, $p191);
    goto corral_source_split_10760;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p192, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    $i194 := $load.i16($M.0, $p193);
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    $i195 := $zext.i16.i32($i194);
    goto corral_source_split_10763;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i195, 545);
    goto corral_source_split_10764;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    assume {:branchcond $i196} true;
    goto $bb70, $bb72;

  $bb72:
    assume !($i196 == 1);
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_10772;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.0, $p197);
    goto corral_source_split_10773;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p198, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    $i200 := $load.i16($M.0, $p199);
    goto corral_source_split_10775;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    $i201 := $zext.i16.i32($i200);
    goto corral_source_split_10776;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    $i202 := $eq.i32($i201, 1808);
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i202} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i211 := $load.i16($M.48, $p1);
    goto corral_source_split_10789;

  corral_source_split_10789:
    assume {:verifier.code 0} true;
    $i212 := $zext.i16.i32($i211);
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364204, 1));
    goto corral_source_split_10791;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p213, $i212);
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i202 == 1;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i203 := $load.i16($M.48, $p1);
    call {:si_unique_call 2285} {:cexpr "__min1___6"} boogie_si_record_i16($i203);
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    $i204 := $zext.i16.i32($i203);
    goto corral_source_split_10767;

  corral_source_split_10767:
    assume {:verifier.code 0} true;
    $i205 := $zext.i16.i32(30);
    goto corral_source_split_10768;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    $i206 := $slt.i32($i204, $i205);
    goto corral_source_split_10769;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    assume {:branchcond $i206} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i206 == 1);
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    $i209 := $zext.i16.i32(30);
    goto corral_source_split_10783;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    $i208 := $i209;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_10785;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    $i210 := $trunc.i32.i16($i208);
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    $M.48 := $store.i16($M.48, $p1, $i210);
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb75:
    assume $i206 == 1;
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    $i207 := $zext.i16.i32($i203);
    goto corral_source_split_10780;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    $i208 := $i207;
    goto $bb77;

  $bb70:
    assume {:verifier.code 0} true;
    assume $i196 == 1;
    goto $bb71;

  $bb65:
    assume $i178 == 1;
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364304, 1));
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    $i180 := $load.i32($M.0, $p179);
    goto corral_source_split_10749;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    $i181 := $or.i32($i180, 4);
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364304, 1));
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p182, $i181);
    goto corral_source_split_10752;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb62:
    assume $i161 == 1;
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    $i162 := $zext.i16.i32($i158);
    goto corral_source_split_10722;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    $i163 := $i162;
    goto $bb64;

  $bb59:
    assume $i151 == 1;
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    $i152 := $load.i16($M.47, $p2);
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    $i153 := $zext.i16.i32($i152);
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    $i154 := $i153;
    goto $bb61;

  $bb56:
    assume $i145 == 1;
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364298, 1));
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p146, 8);
    goto corral_source_split_10694;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb53:
    assume $i139 == 1;
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364296, 1));
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p140, 30);
    goto corral_source_split_10682;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb23:
    assume $i48 == 1;
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364296, 1));
    goto corral_source_split_10536;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.0, $p49);
    call {:si_unique_call 2275} {:cexpr "__min1"} boogie_si_record_i16($i50);
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32(30);
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i51, $i52);
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i53 == 1);
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32(30);
    goto corral_source_split_10552;

  corral_source_split_10552:
    assume {:verifier.code 0} true;
    $i55 := $i56;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i16($i55);
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364296, 1));
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p58, $i57);
    goto corral_source_split_10557;

  corral_source_split_10557:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364298, 1));
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.0, $p59);
    call {:si_unique_call 2276} {:cexpr "__min1___0"} boogie_si_record_i16($i60);
    goto corral_source_split_10559;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32(64);
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i61, $i62);
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i63 == 1);
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32(64);
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    $i65 := $i66;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i16($i65);
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364298, 1));
    goto corral_source_split_10572;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p68, $i67);
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364288, 1));
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.0, $p69);
    call {:si_unique_call 2277} {:cexpr "__min1___1"} boogie_si_record_i16($i70);
    goto corral_source_split_10575;

  corral_source_split_10575:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32(64);
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i71, $i72);
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i73 == 1);
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32(64);
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    $i75 := $i76;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i16($i75);
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364288, 1));
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p78, $i77);
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364290, 1));
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    $i80 := $load.i16($M.0, $p79);
    call {:si_unique_call 2278} {:cexpr "__min1___2"} boogie_si_record_i16($i80);
    goto corral_source_split_10591;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i80);
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32(8);
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i81, $i82);
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i83 == 1);
    goto corral_source_split_10599;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    $i86 := $zext.i16.i32(8);
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    $i85 := $i86;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i16($i85);
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364290, 1));
    goto corral_source_split_10604;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p88, $i87);
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364292, 1));
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    $i90 := $load.i16($M.0, $p89);
    call {:si_unique_call 2279} {:cexpr "__min1___3"} boogie_si_record_i16($i90);
    goto corral_source_split_10607;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    $i91 := $zext.i16.i32($i90);
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    $i92 := $zext.i16.i32(8);
    goto corral_source_split_10609;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i91, $i92);
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i93 == 1);
    goto corral_source_split_10615;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i32(8);
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    $i95 := $i96;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i16($i95);
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364292, 1));
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p98, $i97);
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364300, 1));
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    $i100 := $load.i16($M.0, $p99);
    call {:si_unique_call 2280} {:cexpr "__min1___4"} boogie_si_record_i16($i100);
    goto corral_source_split_10623;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    $i101 := $zext.i16.i32($i100);
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    $i102 := $zext.i16.i32(8);
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i101, $i102);
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i103 == 1);
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    $i106 := $zext.i16.i32(8);
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    $i105 := $i106;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i16($i105);
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364300, 1));
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p108, $i107);
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364292, 1));
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    $i110 := $load.i16($M.0, $p109);
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    $i111 := $zext.i16.i32($i110);
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i112 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364300, 1));
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    $i127 := $load.i16($M.0, $p126);
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    $i128 := $zext.i16.i32($i127);
    goto corral_source_split_10663;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364292, 1));
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    $i130 := $load.i16($M.0, $p129);
    goto corral_source_split_10665;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    $i131 := $zext.i16.i32($i130);
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    $i132 := $slt.i32($i128, $i131);
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb49:
    assume $i132 == 1;
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364300, 1));
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    $i134 := $load.i16($M.0, $p133);
    goto corral_source_split_10671;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364292, 1));
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p135, $i134);
    goto corral_source_split_10673;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb43:
    assume $i112 == 1;
    goto corral_source_split_10643;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364292, 1));
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    $i114 := $load.i16($M.0, $p113);
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    $i115 := $zext.i16.i32($i114);
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364294, 1));
    goto corral_source_split_10647;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    $i117 := $load.i16($M.0, $p116);
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    $i118 := $zext.i16.i32($i117);
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i115, $i118);
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i119 == 1);
    goto $bb45;

  $bb46:
    assume $i119 == 1;
    goto corral_source_split_10652;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364292, 1));
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    $i121 := $load.i16($M.0, $p120);
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    $i122 := $zext.i16.i32($i121);
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    $i123 := $add.i32($i122, 65535);
    goto corral_source_split_10656;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i32.i16($i123);
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364292, 1));
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p125, $i124);
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb40:
    assume $i103 == 1;
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    $i104 := $zext.i16.i32($i100);
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    $i105 := $i104;
    goto $bb42;

  $bb37:
    assume $i93 == 1;
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i90);
    goto corral_source_split_10613;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    $i95 := $i94;
    goto $bb39;

  $bb34:
    assume $i83 == 1;
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    $i84 := $zext.i16.i32($i80);
    goto corral_source_split_10597;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    $i85 := $i84;
    goto $bb36;

  $bb31:
    assume $i73 == 1;
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i70);
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    $i75 := $i74;
    goto $bb33;

  $bb28:
    assume $i63 == 1;
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i60);
    goto corral_source_split_10565;

  corral_source_split_10565:
    assume {:verifier.code 0} true;
    $i65 := $i64;
    goto $bb30;

  $bb25:
    assume $i53 == 1;
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i50);
    goto corral_source_split_10549;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    $i55 := $i54;
    goto $bb27;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb19;

  $bb20:
    assume $i46 == 1;
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} vslice_dummy_var_519 := be_cmd_get_profile_config($p0, $0.ref, $p2, 0);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb15;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_10477;

  corral_source_split_10477:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 1808);
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_10496;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 529);
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb3;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_10501;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 1792);
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb3;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2272} $i27 := be_cmd_get_func_config($p0);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    call {:si_unique_call 2273} {:cexpr "status"} boogie_si_record_i32($i27);
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb13;

  $bb10:
    assume $i28 == 1;
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    $i29 := 1;
    goto $bb12;

  SeqInstr_343:
    assume !assertsPassed;
    return;
}



const be_cmd_get_func_config: ref;

axiom be_cmd_get_func_config == $sub.ref(0, 632854);

procedure be_cmd_get_func_config($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.0, $M.25, $CurrAddr, assertsPassed, $M.26;



implementation be_cmd_get_func_config($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $i45: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $i61: i8;
  var $p62: ref;
  var $p63: ref;
  var $i64: i16;
  var $p65: ref;
  var $p66: ref;
  var $i67: i16;
  var $p68: ref;
  var $p69: ref;
  var $i70: i16;
  var $p71: ref;
  var $p72: ref;
  var $i73: i16;
  var $p74: ref;
  var $p75: ref;
  var $i76: i16;
  var $p77: ref;
  var $p78: ref;
  var $i79: i16;
  var $p80: ref;
  var $p81: ref;
  var $i82: i16;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $p86: ref;
  var $i24: i32;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $i96: i64;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i64;
  var $i5: i32;
  var cmdloc_dummy_var_335: [ref]i8;
  var cmdloc_dummy_var_336: [ref]i8;
  var vslice_dummy_var_521: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2286} $p1 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_10794;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2287} $i3 := ldv_mutex_lock_interruptible_44($p2);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    call {:si_unique_call 2288} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_10797;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_335 := $M.41;
    call {:si_unique_call 2289} cmdloc_dummy_var_336 := $memset.i8(cmdloc_dummy_var_335, $p6, 0, 24, $zext.i32.i64(8), 0 == 1);
    $M.41 := cmdloc_dummy_var_336;
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p7, 372);
    goto corral_source_split_10806;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_10807;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_10809;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.41, $p10);
    goto corral_source_split_10810;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_10811;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_10812;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2290} $p14 := pci_alloc_consistent($p9, $i12, $p13);
    goto corral_source_split_10813;

  corral_source_split_10813:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p15, $p14);
    goto corral_source_split_10815;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.41, $p16);
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_10819;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2293} $p25 := wrb_from_mbox($p0);
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_10837;

  corral_source_split_10837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_10841;

  corral_source_split_10841:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.41, $p28);
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_10843;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10844;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_10845;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.41, $p32);
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2294} be_wrb_cmd_hdr_prepare($p31, 1, $sub.i8(0, 96), $i33, $p25, $p1);
    goto corral_source_split_10847;

  corral_source_split_10847:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_10849;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    goto corral_source_split_10851;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 1824);
    goto corral_source_split_10853;

  corral_source_split_10853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i39 == 1);
    goto corral_source_split_10858;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_10859;

  corral_source_split_10859:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_10861;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.0, $p42);
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_10863;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 1832);
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2295} $i48 := be_mbox_notify_wait($p0);
    call {:si_unique_call 2296} {:cexpr "status"} boogie_si_record_i32($i48);
    goto corral_source_split_10866;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_10867;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i24 := $i48;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_10827;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_10828;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2292} ldv_mutex_unlock_45($p87);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_10829;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_10830;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.41, $p88);
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p89);
    goto corral_source_split_10832;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i5 := $i24;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb24:
    assume $i91 == 1;
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_10921;

  corral_source_split_10921:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_10923;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.41, $p94);
    goto corral_source_split_10924;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    $i96 := $zext.i32.i64($i95);
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_10926;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.41, $p97);
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_10928;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    $i100 := $load.i64($M.41, $p99);
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2299} pci_free_consistent($p93, $i96, $p98, $i100);
    goto corral_source_split_10930;

  corral_source_split_10930:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i49 == 1;
    goto corral_source_split_10869;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_10870;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.41, $p50);
    goto corral_source_split_10871;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_10872;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 372)), $mul.ref(16, 1));
    goto corral_source_split_10873;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    call {:si_unique_call 2297} {:cexpr "desc_count"} boogie_si_record_i32($i54);
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p52, $mul.ref(0, 372)), $mul.ref(20, 1));
    goto corral_source_split_10875;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_10876;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2298} $p57 := be_get_nic_desc($p56, $i54, 352);
    goto corral_source_split_10877;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_10878;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    $i59 := $eq.i64($i58, 0);
    goto corral_source_split_10879;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p57, $mul.ref(0, 72)), $mul.ref(6, 1));
    goto corral_source_split_10883;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_10884;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364308, 1));
    goto corral_source_split_10885;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, $i61);
    goto corral_source_split_10886;

  corral_source_split_10886:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p57, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_10887;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    $i64 := $load.i16($M.0, $p63);
    goto corral_source_split_10888;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364296, 1));
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p65, $i64);
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p57, $mul.ref(0, 72)), $mul.ref(18, 1));
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    $i67 := $load.i16($M.0, $p66);
    goto corral_source_split_10892;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364298, 1));
    goto corral_source_split_10893;

  corral_source_split_10893:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p68, $i67);
    goto corral_source_split_10894;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p57, $mul.ref(0, 72)), $mul.ref(20, 1));
    goto corral_source_split_10895;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.0, $p69);
    goto corral_source_split_10896;

  corral_source_split_10896:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364288, 1));
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p71, $i70);
    goto corral_source_split_10898;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p57, $mul.ref(0, 72)), $mul.ref(22, 1));
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.0, $p72);
    goto corral_source_split_10900;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364290, 1));
    goto corral_source_split_10901;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p74, $i73);
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p57, $mul.ref(0, 72)), $mul.ref(26, 1));
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    $i76 := $load.i16($M.0, $p75);
    goto corral_source_split_10904;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364292, 1));
    goto corral_source_split_10905;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p77, $i76);
    goto corral_source_split_10906;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p57, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_10907;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    $i79 := $load.i16($M.0, $p78);
    goto corral_source_split_10908;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364294, 1));
    goto corral_source_split_10909;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p80, $i79);
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p57, $mul.ref(0, 72)), $mul.ref(34, 1));
    goto corral_source_split_10911;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    $i82 := $load.i16($M.0, $p81);
    goto corral_source_split_10912;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364300, 1));
    goto corral_source_split_10913;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p83, $i82);
    goto corral_source_split_10914;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p57, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_10915;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_10916;

  corral_source_split_10916:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364304, 1));
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p86, $i85);
    goto corral_source_split_10918;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i59 == 1;
    goto corral_source_split_10881;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 22);
    goto $bb7;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_10855;

  corral_source_split_10855:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, 1);
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb13;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_10839;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 16);
    goto $bb7;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_10822;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_10823;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2291} vslice_dummy_var_521 := dev_err.ref.ref($p22, .str.18);
    goto corral_source_split_10825;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 12);
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb3;

  SeqInstr_349:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_44: ref;

axiom ldv_mutex_lock_interruptible_44 == $sub.ref(0, 633886);

procedure ldv_mutex_lock_interruptible_44($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_interruptible_44($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10932;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2300} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 2301} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2302} $i2 := ldv_mutex_lock_interruptible_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    call {:si_unique_call 2303} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_45: ref;

axiom ldv_mutex_unlock_45 == $sub.ref(0, 634918);

procedure ldv_mutex_unlock_45($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_45($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10936;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2304} ldv_mutex_unlock_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2305} mutex_unlock($p0);
    goto corral_source_split_10938;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_30: ref;

axiom ldv_mutex_lock_interruptible_30 == $sub.ref(0, 635950);

procedure ldv_mutex_lock_interruptible_30($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_interruptible_30($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10940;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2306} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 2307} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10941;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2308} $i2 := ldv_mutex_lock_interruptible_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    call {:si_unique_call 2309} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_10942;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_31: ref;

axiom ldv_mutex_unlock_31 == $sub.ref(0, 636982);

procedure ldv_mutex_unlock_31($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_31($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10944;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2310} ldv_mutex_unlock_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2311} mutex_unlock($p0);
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_364:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_38: ref;

axiom ldv_mutex_lock_interruptible_38 == $sub.ref(0, 638014);

procedure ldv_mutex_lock_interruptible_38($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_interruptible_38($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10948;

  corral_source_split_10948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2312} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 2313} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2314} $i2 := ldv_mutex_lock_interruptible_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    call {:si_unique_call 2315} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_39: ref;

axiom ldv_mutex_unlock_39 == $sub.ref(0, 639046);

procedure ldv_mutex_unlock_39($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_39($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10952;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2316} ldv_mutex_unlock_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_10953;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2317} mutex_unlock($p0);
    goto corral_source_split_10954;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_16: ref;

axiom ldv_mutex_lock_interruptible_16 == $sub.ref(0, 640078);

procedure ldv_mutex_lock_interruptible_16($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_interruptible_16($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10956;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2318} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 2319} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10957;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2320} $i2 := ldv_mutex_lock_interruptible_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    call {:si_unique_call 2321} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_373:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_17: ref;

axiom ldv_mutex_unlock_17 == $sub.ref(0, 641110);

procedure ldv_mutex_unlock_17($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_17($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10960;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2322} ldv_mutex_unlock_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2323} mutex_unlock($p0);
    goto corral_source_split_10962;

  corral_source_split_10962:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_376:
    assume !assertsPassed;
    return;
}



const pci_save_state: ref;

axiom pci_save_state == $sub.ref(0, 642142);

procedure pci_save_state($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_save_state($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10964;

  corral_source_split_10964:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2324} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2325} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_choose_state: ref;

axiom pci_choose_state == $sub.ref(0, 643174);

procedure pci_choose_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.49, $CurrAddr;



implementation pci_choose_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2326} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.49 := $store.i32($M.49, $p3, $i1);
    goto corral_source_split_10967;

  corral_source_split_10967:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2327} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 2328} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_10968;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const be_roce_dev_remove: ref;

axiom be_roce_dev_remove == $sub.ref(0, 644206);

procedure be_roce_dev_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.38, $M.0, assertsPassed, $M.21, $M.29, $M.26, $M.41, $M.42, $M.25, $M.2, $M.1, $CurrAddr, $M.47, $M.46, $M.48, $M.40, $M.34, $M.35, $M.3, $M.60, $M.61, $M.62, $M.30, $M.31;



implementation be_roce_dev_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10970;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_10971;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_10972;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_10973;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_10974;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_10975;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 1824);
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_10983;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_10985;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_10986;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_10987;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_10988;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 1832);
    goto corral_source_split_10989;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364024, 1));
    goto corral_source_split_10978;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_10979;

  corral_source_split_10979:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 4);
    goto corral_source_split_10980;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb6;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_10991;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2329} ldv_mutex_lock_106(be_adapter_list_lock);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_10992;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2330} _be_roce_dev_remove($p0);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_10993;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364080, 1));
    goto corral_source_split_10994;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2331} list_del($p17);
    goto corral_source_split_10995;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2332} ldv_mutex_unlock_107(be_adapter_list_lock);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_10996;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const be_intr_set: ref;

axiom be_intr_set == $sub.ref(0, 645238);

procedure be_intr_set($p0: ref, $i1: i1);
  free requires assertsPassed;
  modifies $M.0, $M.26, $M.25, assertsPassed, $CurrAddr;



implementation be_intr_set($p0: ref, $i1: i1)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i8;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2333} {:cexpr "be_intr_set:arg:enable"} boogie_si_record_i1($i1);
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_10999;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_11002;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 57888);
    goto corral_source_split_11004;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_11006;

  corral_source_split_11006:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11007;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_11008;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_11009;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_11010;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 57896);
    goto corral_source_split_11012;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364012, 1));
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_11015;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_11016;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i2);
    goto corral_source_split_11020;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2334} $i19 := be_cmd_intr_set($p0, $i18);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    call {:si_unique_call 2335} {:cexpr "status"} boogie_si_record_i32($i19);
    goto corral_source_split_11021;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_11024;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i2);
    goto corral_source_split_11025;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2336} be_reg_intr_set($p0, $i21);
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const unregister_netdev: ref;

axiom unregister_netdev == $sub.ref(0, 646270);

procedure unregister_netdev($p0: ref);
  free requires assertsPassed;



implementation unregister_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11028;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    return;
}



const be_cmd_fw_clean: ref;

axiom be_cmd_fw_clean == $sub.ref(0, 647302);

procedure be_cmd_fw_clean($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_cmd_fw_clean($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_11032;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_11034;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_11035;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 57888);
    goto corral_source_split_11036;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11039;

  corral_source_split_11039:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_11040;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_11042;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 57896);
    goto corral_source_split_11044;

  corral_source_split_11044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_11048;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2337} $i15 := ldv_mutex_lock_interruptible_18($p14);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    call {:si_unique_call 2338} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_11049;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_11050;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2339} $p17 := wrb_from_mbox($p0);
    goto corral_source_split_11054;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_11055;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(1, 1));
    goto corral_source_split_11056;

  corral_source_split_11056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $sub.i8(0, 1));
    $i20 := $add.i64(1, 1);
    goto corral_source_split_11057;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p18, $mul.ref($i20, 1));
    goto corral_source_split_11058;

  corral_source_split_11058:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $sub.i8(0, 86));
    $i22 := $add.i64($i20, 1);
    goto corral_source_split_11059;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p18, $mul.ref($i22, 1));
    goto corral_source_split_11060;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, $sub.i8(0, 69));
    $i24 := $add.i64($i22, 1);
    goto corral_source_split_11061;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p18, $mul.ref($i24, 1));
    goto corral_source_split_11062;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $sub.i8(0, 1));
    $i26 := $add.i64($i24, 1);
    goto corral_source_split_11063;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p18, $mul.ref($i26, 1));
    goto corral_source_split_11064;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, $sub.i8(0, 1));
    $i28 := $add.i64($i26, 1);
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p18, $mul.ref($i28, 1));
    goto corral_source_split_11066;

  corral_source_split_11066:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, $sub.i8(0, 52));
    $i30 := $add.i64($i28, 1);
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p18, $mul.ref($i30, 1));
    goto corral_source_split_11068;

  corral_source_split_11068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $sub.i8(0, 35));
    goto corral_source_split_11069;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, $sub.i8(0, 1));
    goto corral_source_split_11070;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2340} $i32 := be_mbox_notify_wait($p0);
    call {:si_unique_call 2341} {:cexpr "status"} boogie_si_record_i32($i32);
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_11072;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2342} ldv_mutex_unlock_19($p33);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_11073;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    $i13 := $i32;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_11052;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 1);
    goto $bb6;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const be_stats_cleanup: ref;

axiom be_stats_cleanup == $sub.ref(0, 648334);

procedure be_stats_cleanup($p0: ref);
  free requires assertsPassed;



implementation be_stats_cleanup($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11075;

  corral_source_split_11075:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363472, 1)), $mul.ref(0, 1));
    goto corral_source_split_11076;

  corral_source_split_11076:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_11077;

  corral_source_split_11077:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_11079;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11082;

  corral_source_split_11082:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_11083;

  corral_source_split_11083:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2696)), $mul.ref(152, 1));
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363472, 1)), $mul.ref(16, 1));
    goto corral_source_split_11084;

  corral_source_split_11084:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_11085;

  corral_source_split_11085:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i10);
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363472, 1)), $mul.ref(0, 1));
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363472, 1)), $mul.ref(8, 1));
    goto corral_source_split_11087;

  corral_source_split_11087:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_11088;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2343} dma_free_attrs($p8, $i11, $p13, $i15, $0.ref);
    goto corral_source_split_11089;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const be_ctrl_cleanup: ref;

axiom be_ctrl_cleanup == $sub.ref(0, 649366);

procedure be_ctrl_cleanup($p0: ref);
  free requires assertsPassed;



implementation be_ctrl_cleanup($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11091;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    goto corral_source_split_11092;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2344} be_unmap_pci_bars($p0);
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(224, 1)), $mul.ref(0, 1));
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_11095;

  corral_source_split_11095:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_11096;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363448, 1)), $mul.ref(0, 1));
    goto corral_source_split_11108;

  corral_source_split_11108:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_11111;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_11113;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11114;

  corral_source_split_11114:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_11115;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 2696)), $mul.ref(152, 1));
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363448, 1)), $mul.ref(16, 1));
    goto corral_source_split_11116;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i25);
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363448, 1)), $mul.ref(0, 1));
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363448, 1)), $mul.ref(8, 1));
    goto corral_source_split_11119;

  corral_source_split_11119:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    goto corral_source_split_11120;

  corral_source_split_11120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2346} dma_free_attrs($p23, $i26, $p28, $i30, $0.ref);
    goto corral_source_split_11121;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_11098;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11099;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_11100;

  corral_source_split_11100:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2696)), $mul.ref(152, 1));
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(224, 1)), $mul.ref(16, 1));
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i10);
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(224, 1)), $mul.ref(0, 1));
    goto corral_source_split_11103;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(224, 1)), $mul.ref(8, 1));
    goto corral_source_split_11104;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2345} dma_free_attrs($p8, $i11, $p13, $i15, $0.ref);
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pci_disable_pcie_error_reporting: ref;

axiom pci_disable_pcie_error_reporting == $sub.ref(0, 650398);

procedure pci_disable_pcie_error_reporting($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_disable_pcie_error_reporting($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11123;

  corral_source_split_11123:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2347} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2348} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_11124;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_set_drvdata: ref;

axiom pci_set_drvdata == $sub.ref(0, 651430);

procedure pci_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation pci_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;
  var vslice_dummy_var_522: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_11127;

  corral_source_split_11127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2349} vslice_dummy_var_522 := dev_set_drvdata($p2, $p1);
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    return;
}



const pci_release_regions: ref;

axiom pci_release_regions == $sub.ref(0, 652462);

procedure pci_release_regions($p0: ref);
  free requires assertsPassed;



implementation pci_release_regions($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    return;
}



const free_netdev: ref;

axiom free_netdev == $sub.ref(0, 653494);

procedure free_netdev($p0: ref);
  free requires assertsPassed;



implementation free_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11132;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 654526);

procedure dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11134;

  corral_source_split_11134:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2350} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2351} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_11135;

  corral_source_split_11135:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const be_unmap_pci_bars: ref;

axiom be_unmap_pci_bars == $sub.ref(0, 655558);

procedure be_unmap_pci_bars($p0: ref);
  free requires assertsPassed;



implementation be_unmap_pci_bars($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11137;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(16, 1));
    goto corral_source_split_11138;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_11139;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_11140;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_11150;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_11151;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_11152;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_11155;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11156;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_11157;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_11158;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_11159;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2353} pci_iounmap($p14, $p16);
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_11143;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11144;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_11145;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(16, 1));
    goto corral_source_split_11146;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_11147;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2352} pci_iounmap($p6, $p8);
    goto corral_source_split_11148;

  corral_source_split_11148:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pci_iounmap: ref;

axiom pci_iounmap == $sub.ref(0, 656590);

procedure pci_iounmap($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation pci_iounmap($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11162;

  corral_source_split_11162:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_interruptible_18: ref;

axiom ldv_mutex_lock_interruptible_18 == $sub.ref(0, 657622);

procedure ldv_mutex_lock_interruptible_18($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_interruptible_18($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11164;

  corral_source_split_11164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2354} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 2355} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2356} $i2 := ldv_mutex_lock_interruptible_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    call {:si_unique_call 2357} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_11166;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_19: ref;

axiom ldv_mutex_unlock_19 == $sub.ref(0, 658654);

procedure ldv_mutex_unlock_19($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_19($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11168;

  corral_source_split_11168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2358} ldv_mutex_unlock_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2359} mutex_unlock($p0);
    goto corral_source_split_11170;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;
}



const be_cmd_intr_set: ref;

axiom be_cmd_intr_set == $sub.ref(0, 659686);

procedure be_cmd_intr_set($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_cmd_intr_set($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i8;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2360} {:cexpr "be_cmd_intr_set:arg:intr_enable"} boogie_si_record_i1($i1);
    goto corral_source_split_11172;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_11173;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2361} $i4 := ldv_mutex_lock_interruptible_48($p3);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    call {:si_unique_call 2362} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_11174;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11175;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2363} $p7 := wrb_from_mbox($p0);
    goto corral_source_split_11181;

  corral_source_split_11181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2364} $p8 := embedded_payload($p7);
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_11183;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_11184;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2365} be_wrb_cmd_hdr_prepare($p10, 1, 89, 20, $p7, $0.ref);
    goto corral_source_split_11185;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_11186;

  corral_source_split_11186:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    goto corral_source_split_11187;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p9, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_11188;

  corral_source_split_11188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i12);
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2366} $i14 := be_mbox_notify_wait($p0);
    call {:si_unique_call 2367} {:cexpr "status"} boogie_si_record_i32($i14);
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_11191;

  corral_source_split_11191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2368} ldv_mutex_unlock_49($p15);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_11192;

  corral_source_split_11192:
    assume {:verifier.code 0} true;
    $i6 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11179;

  corral_source_split_11179:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 1);
    goto $bb3;

  SeqInstr_403:
    assume !assertsPassed;
    return;
}



const be_reg_intr_set: ref;

axiom be_reg_intr_set == $sub.ref(0, 660718);

procedure be_reg_intr_set($p0: ref, $i1: i1);
  free requires assertsPassed;
  modifies $M.26, $CurrAddr;



implementation be_reg_intr_set($p0: ref, $i1: i1)
{
  var $p2: ref;
  var $i3: i8;
  var $p4: ref;
  var $p5: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var vslice_dummy_var_523: i32;
  var vslice_dummy_var_524: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2369} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i1);
    call {:si_unique_call 2370} {:cexpr "be_reg_intr_set:arg:enable"} boogie_si_record_i1($i1);
    goto corral_source_split_11194;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_11196;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2371} vslice_dummy_var_523 := pci_read_config_dword($p5, 252, $p2);
    goto corral_source_split_11197;

  corral_source_split_11197:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.26, $p2);
    goto corral_source_split_11198;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 536870912);
    call {:si_unique_call 2372} {:cexpr "enabled"} boogie_si_record_i32($i8);
    goto corral_source_split_11199;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_11200;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i8, 0);
    goto corral_source_split_11205;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_11217;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i3);
    goto corral_source_split_11218;

  corral_source_split_11218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    goto corral_source_split_11220;

  corral_source_split_11220:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.26, $p2);
    goto corral_source_split_11221;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, $sub.i32(0, 536870913));
    goto corral_source_split_11222;

  corral_source_split_11222:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p2, $i16);
    goto corral_source_split_11223;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11212;

  corral_source_split_11212:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_11213;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.26, $p2);
    goto corral_source_split_11214;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2373} vslice_dummy_var_524 := pci_write_config_dword($p18, 252, $i19);
    goto corral_source_split_11215;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_11202;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i3);
    goto corral_source_split_11203;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_11207;

  corral_source_split_11207:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.26, $p2);
    goto corral_source_split_11208;

  corral_source_split_11208:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, 536870912);
    goto corral_source_split_11209;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p2, $i12);
    goto corral_source_split_11210;

  corral_source_split_11210:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_mutex_lock_interruptible_48: ref;

axiom ldv_mutex_lock_interruptible_48 == $sub.ref(0, 661750);

procedure ldv_mutex_lock_interruptible_48($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_interruptible_48($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11225;

  corral_source_split_11225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2374} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 2375} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11226;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2376} $i2 := ldv_mutex_lock_interruptible_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    call {:si_unique_call 2377} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_11227;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_409:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_49: ref;

axiom ldv_mutex_unlock_49 == $sub.ref(0, 662782);

procedure ldv_mutex_unlock_49($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_49($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11229;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2378} ldv_mutex_unlock_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto corral_source_split_11230;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2379} mutex_unlock($p0);
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_412:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_106: ref;

axiom ldv_mutex_lock_106 == $sub.ref(0, 663814);

procedure ldv_mutex_lock_106($p0: ref);
  free requires assertsPassed;
  modifies $M.38, assertsPassed;



implementation ldv_mutex_lock_106($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11233;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2380} ldv_mutex_lock_be_adapter_list_lock($p0);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_11234;

  corral_source_split_11234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2381} mutex_lock($p0);
    goto corral_source_split_11235;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;
}



const _be_roce_dev_remove: ref;

axiom _be_roce_dev_remove == $sub.ref(0, 664846);

procedure _be_roce_dev_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, $M.29, $M.26, $M.41, $M.42, $M.25, $M.2, $M.1, $CurrAddr, $M.38, assertsPassed, $M.47, $M.46, $M.48, $M.40, $M.34, $M.35, $M.3, $M.60, $M.61, $M.62, $M.30, $M.31;



implementation _be_roce_dev_remove($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11237;

  corral_source_split_11237:
    assume {:verifier.code 0} true;
    $p1 := $M.36;
    goto corral_source_split_11238;

  corral_source_split_11238:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_11239;

  corral_source_split_11239:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_11240;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364072, 1));
    goto corral_source_split_11262;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $0.ref);
    goto corral_source_split_11263;

  corral_source_split_11263:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11242;

  corral_source_split_11242:
    assume {:verifier.code 0} true;
    $p4 := $M.36;
    goto corral_source_split_11243;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_11244;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.50, $p5);
    goto corral_source_split_11245;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_11247;

  corral_source_split_11247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_11249;

  corral_source_split_11249:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364072, 1));
    goto corral_source_split_11250;

  corral_source_split_11250:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_11251;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_11252;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_11253;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_11255;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    $p13 := $M.36;
    goto corral_source_split_11256;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_11257;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.50, $p14);
    goto corral_source_split_11258;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364072, 1));
    goto corral_source_split_11259;

  corral_source_split_11259:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 2382} devirtbounce.15($p15, $p17);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_11260;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_418:
    assume !assertsPassed;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 665878);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11265;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_107: ref;

axiom ldv_mutex_unlock_107 == $sub.ref(0, 666910);

procedure ldv_mutex_unlock_107($p0: ref);
  free requires assertsPassed;
  modifies $M.38, assertsPassed;



implementation ldv_mutex_unlock_107($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11267;

  corral_source_split_11267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2383} ldv_mutex_unlock_be_adapter_list_lock($p0);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_11268;

  corral_source_split_11268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2384} mutex_unlock($p0);
    goto corral_source_split_11269;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_421:
    assume !assertsPassed;
    return;
}



const pci_request_regions: ref;

axiom pci_request_regions == $sub.ref(0, 667942);

procedure pci_request_regions($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_request_regions($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11271;

  corral_source_split_11271:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2385} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2386} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_11272;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_set_master: ref;

axiom pci_set_master == $sub.ref(0, 668974);

procedure pci_set_master($p0: ref);
  free requires assertsPassed;



implementation pci_set_master($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11274;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    return;
}



const alloc_etherdev_mqs: ref;

axiom alloc_etherdev_mqs == $sub.ref(0, 670006);

procedure alloc_etherdev_mqs($i0: i32, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_etherdev_mqs($i0: i32, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2387} {:cexpr "alloc_etherdev_mqs:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2388} {:cexpr "alloc_etherdev_mqs:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2389} {:cexpr "alloc_etherdev_mqs:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11276;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2390} $p3 := external_alloc();
    goto corral_source_split_11277;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_11278;

  corral_source_split_11278:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const dma_set_mask: ref;

axiom dma_set_mask == $sub.ref(0, 671038);

procedure dma_set_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_set_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2391} {:cexpr "dma_set_mask:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_11280;

  corral_source_split_11280:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2392} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2393} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_11281;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dma_set_coherent_mask: ref;

axiom dma_set_coherent_mask == $sub.ref(0, 672070);

procedure dma_set_coherent_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation dma_set_coherent_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2394} {:cexpr "dma_set_coherent_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_11283;

  corral_source_split_11283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2395} $i2 := dma_supported($p0, $i1);
    call {:si_unique_call 2396} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_11284;

  corral_source_split_11284:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_11285;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(912, 1));
    goto corral_source_split_11291;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p5, $i1);
    goto corral_source_split_11292;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11289;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11287;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 5);
    goto $bb3;
}



const pci_enable_pcie_error_reporting: ref;

axiom pci_enable_pcie_error_reporting == $sub.ref(0, 673102);

procedure pci_enable_pcie_error_reporting($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_pcie_error_reporting($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11294;

  corral_source_split_11294:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2397} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2398} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_11295;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const be_ctrl_init: ref;

axiom be_ctrl_init == $sub.ref(0, 674134);

procedure be_ctrl_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation be_ctrl_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p8: ref;
  var $p9: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $i23: i32;
  var $i82: i32;
  var cmdloc_dummy_var_337: [ref]i8;
  var cmdloc_dummy_var_338: [ref]i8;
  var vslice_dummy_var_525: i32;
  var vslice_dummy_var_526: ref;
  var vslice_dummy_var_527: ref;
  var vslice_dummy_var_528: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2399} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2400} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2401} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2402} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11297;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    goto corral_source_split_11298;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    goto corral_source_split_11299;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    goto corral_source_split_11300;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11301;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_11302;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2403} vslice_dummy_var_525 := pci_read_config_dword($p9, 88, $p1);
    goto corral_source_split_11303;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.26, $p1);
    goto corral_source_split_11304;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 3840);
    goto corral_source_split_11305;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    $i13 := $lshr.i32($i12, 8);
    goto corral_source_split_11306;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364228, 1));
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_11308;

  corral_source_split_11308:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.26, $p1);
    goto corral_source_split_11309;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_11310;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_11311;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 1);
    goto corral_source_split_11312;

  corral_source_split_11312:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_11313;

  corral_source_split_11313:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_11314;

  corral_source_split_11314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $i19);
    goto corral_source_split_11315;

  corral_source_split_11315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2404} $i21 := be_map_pci_bars($p0);
    call {:si_unique_call 2405} {:cexpr "status"} boogie_si_record_i32($i21);
    goto corral_source_split_11316;

  corral_source_split_11316:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_11317;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(224, 1)), $mul.ref(16, 1));
    goto corral_source_split_11323;

  corral_source_split_11323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 288);
    goto corral_source_split_11324;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11325;

  corral_source_split_11325:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_11326;

  corral_source_split_11326:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 2696)), $mul.ref(152, 1));
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(224, 1)), $mul.ref(16, 1));
    goto corral_source_split_11327;

  corral_source_split_11327:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_11328;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i29);
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(224, 1)), $mul.ref(8, 1));
    goto corral_source_split_11329;

  corral_source_split_11329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2406} $p32 := dma_alloc_attrs($p27, $i30, $p31, 208, $0.ref);
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(224, 1)), $mul.ref(0, 1));
    goto corral_source_split_11330;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p32);
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(224, 1)), $mul.ref(0, 1));
    goto corral_source_split_11331;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_11332;

  corral_source_split_11332:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_11333;

  corral_source_split_11333:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(200, 1)), $mul.ref(16, 1));
    goto corral_source_split_11340;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 272);
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(224, 1)), $mul.ref(0, 1));
    goto corral_source_split_11341;

  corral_source_split_11341:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_11342;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_11343;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, 15);
    goto corral_source_split_11344;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    $i43 := $and.i64($i42, $sub.i64(0, 16));
    goto corral_source_split_11345;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    $p44 := $i2p.i64.ref($i43);
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_11346;

  corral_source_split_11346:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $p44);
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(224, 1)), $mul.ref(8, 1));
    goto corral_source_split_11347;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_11348;

  corral_source_split_11348:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 15);
    goto corral_source_split_11349;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    $i49 := $and.i64($i48, $sub.i64(0, 16));
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(200, 1)), $mul.ref(8, 1));
    goto corral_source_split_11350;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p50, $i49);
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_11351;

  corral_source_split_11351:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_11352;

  corral_source_split_11352:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_337 := $M.0;
    call {:si_unique_call 2408} cmdloc_dummy_var_338 := $memset.i8(cmdloc_dummy_var_337, $p52, 0, 272, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_338;
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363448, 1)), $mul.ref(16, 1));
    goto corral_source_split_11353;

  corral_source_split_11353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, 424);
    goto corral_source_split_11354;

  corral_source_split_11354:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11355;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_11356;

  corral_source_split_11356:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 2696)), $mul.ref(152, 1));
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363448, 1)), $mul.ref(16, 1));
    goto corral_source_split_11357;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_11358;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    $i59 := $zext.i32.i64($i58);
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363448, 1)), $mul.ref(8, 1));
    goto corral_source_split_11359;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2409} $p61 := dma_alloc_attrs($p56, $i59, $p60, 32976, $0.ref);
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363448, 1)), $mul.ref(0, 1));
    goto corral_source_split_11360;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p62, $p61);
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363448, 1)), $mul.ref(0, 1));
    goto corral_source_split_11361;

  corral_source_split_11361:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_11362;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_11363;

  corral_source_split_11363:
    assume {:verifier.code 0} true;
    $i66 := $eq.i64($i65, 0);
    goto corral_source_split_11364;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_11377;

  corral_source_split_11377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2411} __mutex_init($p67, .str.143, $p2);
    goto corral_source_split_11378;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_11379;

  corral_source_split_11379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2412} vslice_dummy_var_526 := spinlock_check($p68);
    goto corral_source_split_11380;

  corral_source_split_11380:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1)), $mul.ref(0, 1));
    goto corral_source_split_11381;

  corral_source_split_11381:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_11382;

  corral_source_split_11382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2413} __raw_spin_lock_init($p72, .str.144, $p3);
    goto corral_source_split_11383;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(408, 1));
    goto corral_source_split_11384;

  corral_source_split_11384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2414} vslice_dummy_var_527 := spinlock_check($p73);
    goto corral_source_split_11385;

  corral_source_split_11385:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(408, 1)), $mul.ref(0, 1));
    goto corral_source_split_11386;

  corral_source_split_11386:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_11387;

  corral_source_split_11387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2415} __raw_spin_lock_init($p77, .str.145, $p4);
    goto corral_source_split_11388;

  corral_source_split_11388:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364104, 1));
    goto corral_source_split_11389;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2416} init_completion($p78);
    goto corral_source_split_11390;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11391;

  corral_source_split_11391:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_11392;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2417} vslice_dummy_var_528 := pci_save_state($p80);
    goto corral_source_split_11393;

  corral_source_split_11393:
    assume {:verifier.code 0} true;
    $i82 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_11395;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    $r := $i82;
    return;

  $bb9:
    assume $i66 == 1;
    goto corral_source_split_11366;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11368;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_11369;

  corral_source_split_11369:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 2696)), $mul.ref(152, 1));
    $p86 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(224, 1)), $mul.ref(16, 1));
    goto corral_source_split_11370;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_11371;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    $i88 := $zext.i32.i64($i87);
    $p89 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(224, 1)), $mul.ref(0, 1));
    goto corral_source_split_11372;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    $p91 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(224, 1)), $mul.ref(8, 1));
    goto corral_source_split_11373;

  corral_source_split_11373:
    assume {:verifier.code 0} true;
    $i92 := $load.i64($M.0, $p91);
    goto corral_source_split_11374;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2410} dma_free_attrs($p85, $i88, $p90, $i92, $0.ref);
    goto corral_source_split_11375;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2407} be_unmap_pci_bars($p0);
    goto corral_source_split_11338;

  corral_source_split_11338:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 12);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11321;

  corral_source_split_11321:
    assume {:verifier.code 0} true;
    $i82 := $i23;
    goto $bb13;

  $bb5:
    assume $i37 == 1;
    goto corral_source_split_11336;

  corral_source_split_11336:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_11319;

  corral_source_split_11319:
    assume {:verifier.code 0} true;
    $i23 := $i21;
    goto $bb3;
}



const be_fw_wait_ready: ref;

axiom be_fw_wait_ready == $sub.ref(0, 675166);

procedure be_fw_wait_ready($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $CurrAddr;



implementation be_fw_wait_ready($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i18: i16;
  var $i19: i32;
  var $i20: i1;
  var $i23: i32;
  var $i24: i16;
  var $i25: i32;
  var $i26: i1;
  var $i21: i16;
  var $i22: i32;
  var $i28: i64;
  var $i29: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i16;
  var $i34: i32;
  var $i17: i32;
  var vslice_dummy_var_529: i32;
  var vslice_dummy_var_530: i32;
  var vslice_dummy_var_531: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11397;

  corral_source_split_11397:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11398;

  corral_source_split_11398:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_11399;

  corral_source_split_11399:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_11400;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11401;

  corral_source_split_11401:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_11402;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_11403;

  corral_source_split_11403:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_11404;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_11405;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 57888);
    goto corral_source_split_11406;

  corral_source_split_11406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_11410;

  corral_source_split_11410:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11411;

  corral_source_split_11411:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_11412;

  corral_source_split_11412:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_11413;

  corral_source_split_11413:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_11414;

  corral_source_split_11414:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_11415;

  corral_source_split_11415:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 57896);
    goto corral_source_split_11416;

  corral_source_split_11416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2420} $i18 := be_POST_stage_get($p0);
    call {:si_unique_call 2421} {:cexpr "stage"} boogie_si_record_i16($i18);
    goto corral_source_split_11420;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_11421;

  corral_source_split_11421:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 49152);
    goto corral_source_split_11422;

  corral_source_split_11422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i20 == 1);
    goto corral_source_split_11424;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    $i21, $i22 := $i18, 0;
    goto $bb11;

  $bb11:
    call $i23, $i24, $i25, $i26, $i21, $i22, $i28, $i29, $i31, $i32, $i33, vslice_dummy_var_529 := be_fw_wait_ready_loop_$bb11($p0, $p3, $i23, $i24, $i25, $i26, $i21, $i22, $i28, $i29, $i31, $i32, $i33, vslice_dummy_var_529);
    goto $bb11_last;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2424} vslice_dummy_var_529 := _dev_info.ref.ref.i32($p3, .str.10, $i22);
    goto corral_source_split_11433;

  corral_source_split_11433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2425} $i28 := msleep_interruptible(2000);
    call {:si_unique_call 2426} {:cexpr "tmp"} boogie_si_record_i64($i28);
    goto corral_source_split_11434;

  corral_source_split_11434:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_11435;

  corral_source_split_11435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i22, 2);
    call {:si_unique_call 2428} {:cexpr "timeout"} boogie_si_record_i32($i31);
    goto corral_source_split_11440;

  corral_source_split_11440:
    assume {:verifier.code 0} true;
    $i32 := $sle.i32($i31, 59);
    goto corral_source_split_11441;

  corral_source_split_11441:
    assume {:verifier.code 0} true;
    $i23, $i33 := $i31, $i21;
    assume true;
    goto $bb12, $bb19;

  $bb19:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_11443;

  corral_source_split_11443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2429} vslice_dummy_var_531 := dev_err.ref.ref.i32($p3, .str.12, $i34);
    goto corral_source_split_11444;

  corral_source_split_11444:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_11418;

  corral_source_split_11418:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb12:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_11426;

  corral_source_split_11426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2422} $i24 := be_POST_stage_get($p0);
    call {:si_unique_call 2423} {:cexpr "stage"} boogie_si_record_i16($i24);
    goto corral_source_split_11427;

  corral_source_split_11427:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_11428;

  corral_source_split_11428:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 49152);
    goto corral_source_split_11429;

  corral_source_split_11429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i21, $i22 := $i24, $i23;
    goto $bb14_dummy;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_11431;

  corral_source_split_11431:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb6;

  $bb16:
    assume $i29 == 1;
    goto corral_source_split_11437;

  corral_source_split_11437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2427} vslice_dummy_var_530 := dev_err.ref.ref($p3, .str.11);
    goto corral_source_split_11438;

  corral_source_split_11438:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 4);
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2418} $i16 := lancer_wait_ready($p0);
    call {:si_unique_call 2419} {:cexpr "status"} boogie_si_record_i32($i16);
    goto corral_source_split_11408;

  corral_source_split_11408:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb14_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;
}



const be_reset_required: ref;

axiom be_reset_required == $sub.ref(0, 676198);

procedure be_reset_required($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation be_reset_required($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11446;

  corral_source_split_11446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2430} $i1 := be_find_vfs($p0, 0);
    call {:si_unique_call 2431} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11447;

  corral_source_split_11447:
    assume {:verifier.code 0} true;
    $i2 := $sle.i32($i1, 0);
    goto corral_source_split_11448;

  corral_source_split_11448:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const be_stats_init: ref;

axiom be_stats_init == $sub.ref(0, 677230);

procedure be_stats_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation be_stats_init($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $i42: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11450;

  corral_source_split_11450:
    assume {:verifier.code 0} true;
    goto corral_source_split_11451;

  corral_source_split_11451:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11452;

  corral_source_split_11452:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_11453;

  corral_source_split_11453:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_11454;

  corral_source_split_11454:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_11455;

  corral_source_split_11455:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_11456;

  corral_source_split_11456:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 57888);
    goto corral_source_split_11457;

  corral_source_split_11457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_11462;

  corral_source_split_11462:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11463;

  corral_source_split_11463:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_11464;

  corral_source_split_11464:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_11465;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_11466;

  corral_source_split_11466:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_11467;

  corral_source_split_11467:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 57896);
    goto corral_source_split_11468;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_11470;

  corral_source_split_11470:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11471;

  corral_source_split_11471:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_11472;

  corral_source_split_11472:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_11473;

  corral_source_split_11473:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_11474;

  corral_source_split_11474:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_11475;

  corral_source_split_11475:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 529);
    goto corral_source_split_11476;

  corral_source_split_11476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i20 == 1);
    goto corral_source_split_11492;

  corral_source_split_11492:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11493;

  corral_source_split_11493:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_11494;

  corral_source_split_11494:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_11495;

  corral_source_split_11495:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_11496;

  corral_source_split_11496:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_11497;

  corral_source_split_11497:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 1792);
    goto corral_source_split_11498;

  corral_source_split_11498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363472, 1)), $mul.ref(16, 1));
    goto corral_source_split_11500;

  corral_source_split_11500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 1864);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11478;

  corral_source_split_11478:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_11479;

  corral_source_split_11479:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 2696)), $mul.ref(152, 1));
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363472, 1)), $mul.ref(16, 1));
    goto corral_source_split_11480;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_11481;

  corral_source_split_11481:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i33);
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363472, 1)), $mul.ref(8, 1));
    goto corral_source_split_11482;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2432} $p36 := dma_alloc_attrs($p31, $i34, $p35, 32976, $0.ref);
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363472, 1)), $mul.ref(0, 1));
    goto corral_source_split_11483;

  corral_source_split_11483:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p36);
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363472, 1)), $mul.ref(0, 1));
    goto corral_source_split_11484;

  corral_source_split_11484:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_11485;

  corral_source_split_11485:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_11486;

  corral_source_split_11486:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_11487;

  corral_source_split_11487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_11504;

  corral_source_split_11504:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  $bb13:
    assume $i41 == 1;
    goto corral_source_split_11502;

  corral_source_split_11502:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 1);
    goto $bb15;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb8;

  $bb8:
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363472, 1)), $mul.ref(16, 1));
    goto corral_source_split_11489;

  corral_source_split_11489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 1076);
    goto corral_source_split_11490;

  corral_source_split_11490:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb2:
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363472, 1)), $mul.ref(16, 1));
    goto corral_source_split_11459;

  corral_source_split_11459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 672);
    goto corral_source_split_11460;

  corral_source_split_11460:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const be_get_initial_config: ref;

axiom be_get_initial_config == $sub.ref(0, 678262);

procedure be_get_initial_config($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.25, $CurrAddr, assertsPassed, $M.26;



implementation be_get_initial_config($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var $i17: i1;
  var $i18: i8;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $p25: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11506;

  corral_source_split_11506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2433} $i1 := be_cmd_get_cntl_attributes($p0);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    call {:si_unique_call 2434} {:cexpr "status"} boogie_si_record_i32($i1);
    goto corral_source_split_11507;

  corral_source_split_11507:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11508;

  corral_source_split_11508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2435} $i4 := be_cmd_get_acpi_wol_cap($p0);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    call {:si_unique_call 2436} {:cexpr "status"} boogie_si_record_i32($i4);
    goto corral_source_split_11514;

  corral_source_split_11514:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11515;

  corral_source_split_11515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2439} $i17 := be_is_wol_supported($p0);
    goto corral_source_split_11536;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i8($i17);
    call {:si_unique_call 2440} {:cexpr "tmp___1"} boogie_si_record_i8($i18);
    goto corral_source_split_11537;

  corral_source_split_11537:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_11538;

  corral_source_split_11538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364284, 1));
    goto corral_source_split_11544;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 64);
    goto corral_source_split_11545;

  corral_source_split_11545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2441} $i22 := be_get_fw_log_level($p0);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    call {:si_unique_call 2442} {:cexpr "level"} boogie_si_record_i32($i22);
    goto corral_source_split_11546;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    $i23 := $ule.i32($i22, 48);
    goto corral_source_split_11547;

  corral_source_split_11547:
    assume {:verifier.code 0} true;
    $i24 := (if $i23 == 1 then 8192 else 0);
    goto corral_source_split_11548;

  corral_source_split_11548:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364280, 1));
    goto corral_source_split_11549;

  corral_source_split_11549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    goto corral_source_split_11550;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11512;

  corral_source_split_11512:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_11540;

  corral_source_split_11540:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364269, 1));
    goto corral_source_split_11541;

  corral_source_split_11541:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, 1);
    goto corral_source_split_11542;

  corral_source_split_11542:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_11517;

  corral_source_split_11517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2437} $i6 := be_is_wol_excluded($p0);
    goto corral_source_split_11518;

  corral_source_split_11518:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 2438} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_11519;

  corral_source_split_11519:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_11520;

  corral_source_split_11520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_11524;

  corral_source_split_11524:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_11525;

  corral_source_split_11525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i10 == 1;
    goto corral_source_split_11527;

  corral_source_split_11527:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364268, 1));
    goto corral_source_split_11528;

  corral_source_split_11528:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_11529;

  corral_source_split_11529:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_11530;

  corral_source_split_11530:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i13, 1);
    goto corral_source_split_11531;

  corral_source_split_11531:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_11532;

  corral_source_split_11532:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364268, 1));
    goto corral_source_split_11533;

  corral_source_split_11533:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i15);
    goto corral_source_split_11534;

  corral_source_split_11534:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_11522;

  corral_source_split_11522:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb9;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11510;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;

  SeqInstr_424:
    assume !assertsPassed;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 679294);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2443} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_11552;

  corral_source_split_11552:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 680326);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2444} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_11554;

  corral_source_split_11554:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 681358);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11556;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11557;

  corral_source_split_11557:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_11558;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_11559;

  corral_source_split_11559:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_11560;

  corral_source_split_11560:
    assume {:verifier.code 0} true;
    return;
}



const be_worker: ref;

axiom be_worker == $sub.ref(0, 682390);

procedure be_worker($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_worker($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $i33: i16;
  var $p34: ref;
  var $i35: i32;
  var $i36: i16;
  var $i37: i32;
  var $i38: i16;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p51: ref;
  var $i52: i8;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $i49: i32;
  var $p50: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $i68: i32;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $i66: i32;
  var $p67: ref;
  var $p72: ref;
  var $i73: i16;
  var $i74: i32;
  var $i75: i32;
  var $i76: i16;
  var $p77: ref;
  var $i78: i64;
  var $p79: ref;
  var vslice_dummy_var_532: i32;
  var vslice_dummy_var_533: i1;
  var vslice_dummy_var_534: i32;
  var vslice_dummy_var_535: i32;
  var vslice_dummy_var_536: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11562;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_11563;

  corral_source_split_11563:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 364672), 364320));
    goto corral_source_split_11564;

  corral_source_split_11564:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 364672), 364320)), $mul.ref(8, 1));
    goto corral_source_split_11565;

  corral_source_split_11565:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_11566;

  corral_source_split_11566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2445} $i5 := netif_running($p4);
    goto corral_source_split_11567;

  corral_source_split_11567:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 2446} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_11568;

  corral_source_split_11568:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_11569;

  corral_source_split_11569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11573;

  corral_source_split_11573:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_11574;

  corral_source_split_11574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 364672), 364320)), $mul.ref(364040, 1));
    goto corral_source_split_11592;

  corral_source_split_11592:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_11593;

  corral_source_split_11593:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_11594;

  corral_source_split_11594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    goto corral_source_split_11596;

  corral_source_split_11596:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 364672), 364320)), $mul.ref(0, 1));
    goto corral_source_split_11597;

  corral_source_split_11597:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_11598;

  corral_source_split_11598:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_11599;

  corral_source_split_11599:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_11600;

  corral_source_split_11600:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_11601;

  corral_source_split_11601:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 57888);
    goto corral_source_split_11602;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i19 == 1);
    goto corral_source_split_11607;

  corral_source_split_11607:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 364672), 364320)), $mul.ref(0, 1));
    goto corral_source_split_11608;

  corral_source_split_11608:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_11609;

  corral_source_split_11609:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_11610;

  corral_source_split_11610:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    goto corral_source_split_11611;

  corral_source_split_11611:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_11612;

  corral_source_split_11612:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 57896);
    goto corral_source_split_11613;

  corral_source_split_11613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    goto corral_source_split_11615;

  corral_source_split_11615:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 364672), 364320)), $mul.ref(363472, 1));
    goto corral_source_split_11616;

  corral_source_split_11616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2454} vslice_dummy_var_535 := be_cmd_get_stats($p2, $p28);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 364672), 364320)), $mul.ref(363720, 1));
    goto corral_source_split_11618;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.0, $p30);
    goto corral_source_split_11619;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_11620;

  corral_source_split_11620:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i16($i32);
    goto corral_source_split_11621;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 364672), 364320)), $mul.ref(364284, 1));
    goto corral_source_split_11622;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_11623;

  corral_source_split_11623:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_11624;

  corral_source_split_11624:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_11625;

  corral_source_split_11625:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    goto corral_source_split_11626;

  corral_source_split_11626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2455} $i39 := MODULO($i33, $i38);
    call {:si_unique_call 2456} {:cexpr "tmp___1"} boogie_si_record_i32($i39);
    goto corral_source_split_11627;

  corral_source_split_11627:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_11628;

  corral_source_split_11628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 364672), 364320)), $mul.ref(136368, 1));
    goto corral_source_split_11633;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_11634;

  corral_source_split_11634:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64(0);
    goto corral_source_split_11635;

  corral_source_split_11635:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p43, $mul.ref($i44, 24760));
    goto corral_source_split_11636;

  corral_source_split_11636:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 364672), 364320)), $mul.ref(136360, 1));
    goto corral_source_split_11637;

  corral_source_split_11637:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_11638;

  corral_source_split_11638:
    assume {:verifier.code 0} true;
    $i48 := $ult.i32(0, $i47);
    goto corral_source_split_11639;

  corral_source_split_11639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 364672), 364320)), $mul.ref(488, 1));
    goto corral_source_split_11661;

  corral_source_split_11661:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_11662;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64(0);
    goto corral_source_split_11663;

  corral_source_split_11663:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p60, $mul.ref($i61, 272));
    goto corral_source_split_11664;

  corral_source_split_11664:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 364672), 364320)), $mul.ref(484, 1));
    goto corral_source_split_11665;

  corral_source_split_11665:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_11666;

  corral_source_split_11666:
    assume {:verifier.code 0} true;
    $i65 := $ult.i32(0, $i64);
    goto corral_source_split_11667;

  corral_source_split_11667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 364672), 364320)), $mul.ref(363720, 1));
    goto corral_source_split_11581;

  corral_source_split_11581:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.0, $p72);
    goto corral_source_split_11582;

  corral_source_split_11582:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i73);
    goto corral_source_split_11583;

  corral_source_split_11583:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i74, 1);
    goto corral_source_split_11584;

  corral_source_split_11584:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i16($i75);
    goto corral_source_split_11585;

  corral_source_split_11585:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 364672), 364320)), $mul.ref(363720, 1));
    goto corral_source_split_11586;

  corral_source_split_11586:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p77, $i76);
    goto corral_source_split_11587;

  corral_source_split_11587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2450} $i78 := msecs_to_jiffies(1000);
    call {:si_unique_call 2451} {:cexpr "tmp___2"} boogie_si_record_i64($i78);
    goto corral_source_split_11588;

  corral_source_split_11588:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 364672), 364320)), $mul.ref(363496, 1));
    goto corral_source_split_11589;

  corral_source_split_11589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2452} vslice_dummy_var_533 := schedule_delayed_work($p79, $i78);
    goto corral_source_split_11590;

  corral_source_split_11590:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume $i65 == 1;
    goto corral_source_split_11669;

  corral_source_split_11669:
    assume {:verifier.code 0} true;
    $i66, $p67 := 0, $p62;
    goto $bb34;

  $bb34:
    call $i68, $p69, $i70, $i71, $i66, $p67 := be_worker_loop_$bb34($p2, $p63, $i68, $p69, $i70, $i71, $i66, $p67);
    goto $bb34_last;

  corral_source_split_11671:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2460} be_eqd_update($p2, $p67);
    goto corral_source_split_11673;

  corral_source_split_11673:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i66, 1);
    call {:si_unique_call 2461} {:cexpr "i"} boogie_si_record_i32($i68);
    goto corral_source_split_11674;

  corral_source_split_11674:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p67, $mul.ref(1, 272));
    goto corral_source_split_11675;

  corral_source_split_11675:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p63);
    goto corral_source_split_11676;

  corral_source_split_11676:
    assume {:verifier.code 0} true;
    $i71 := $ult.i32($i68, $i70);
    goto corral_source_split_11677;

  corral_source_split_11677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i71 == 1);
    goto corral_source_split_11679;

  corral_source_split_11679:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb36:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i66, $p67 := $i68, $p69;
    goto $bb36_dummy;

  $bb20:
    assume $i48 == 1;
    goto corral_source_split_11641;

  corral_source_split_11641:
    assume {:verifier.code 0} true;
    $i49, $p50 := 0, $p45;
    goto $bb23;

  $bb23:
    call $p51, $i52, $i53, $p54, $i55, $p56, $i57, $i58, $i49, $p50 := be_worker_loop_$bb23($p46, $p51, $i52, $i53, $p54, $i55, $p56, $i57, $i58, $i49, $p50);
    goto $bb23_last;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 24760)), $mul.ref(24753, 1));
    goto corral_source_split_11645;

  corral_source_split_11645:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_11646;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i8.i1($i52);
    goto corral_source_split_11647;

  corral_source_split_11647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i49, 1);
    call {:si_unique_call 2459} {:cexpr "i"} boogie_si_record_i32($i55);
    goto corral_source_split_11654;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p50, $mul.ref(1, 24760));
    goto corral_source_split_11655;

  corral_source_split_11655:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p46);
    goto corral_source_split_11656;

  corral_source_split_11656:
    assume {:verifier.code 0} true;
    $i58 := $ult.i32($i55, $i57);
    goto corral_source_split_11657;

  corral_source_split_11657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i58 == 1);
    goto corral_source_split_11659;

  corral_source_split_11659:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb28:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $i49, $p50 := $i55, $p56;
    goto $bb28_dummy;

  $bb25:
    assume $i53 == 1;
    goto corral_source_split_11649;

  corral_source_split_11649:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p50, $mul.ref(0, 24760)), $mul.ref(24753, 1));
    goto corral_source_split_11650;

  corral_source_split_11650:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p54, 0);
    goto corral_source_split_11651;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2458} be_post_rx_frags($p50, 208);
    goto corral_source_split_11652;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb17:
    assume $i40 == 1;
    goto corral_source_split_11630;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2457} vslice_dummy_var_536 := be_cmd_get_die_temperature($p2);
    goto corral_source_split_11631;

  corral_source_split_11631:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 364672), 364320)), $mul.ref(363472, 1));
    goto corral_source_split_11604;

  corral_source_split_11604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2453} vslice_dummy_var_534 := lancer_cmd_get_pport_stats($p2, $p26);
    goto corral_source_split_11605;

  corral_source_split_11605:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb11;

  $bb8:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_11576;

  corral_source_split_11576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2447} local_bh_disable();
    goto corral_source_split_11577;

  corral_source_split_11577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2448} vslice_dummy_var_532 := be_process_mcc($p2);
    goto corral_source_split_11578;

  corral_source_split_11578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2449} local_bh_enable();
    goto corral_source_split_11579;

  corral_source_split_11579:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_11571;

  corral_source_split_11571:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb36_dummy:
    assume false;
    return;

  $bb34_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11671;

  $bb28_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11643;
}



const init_timer_key: ref;

axiom init_timer_key == $sub.ref(0, 683422);

procedure init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2462} {:cexpr "init_timer_key:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_11681;

  corral_source_split_11681:
    assume {:verifier.code 0} true;
    return;
}



const delayed_work_timer_fn: ref;

axiom delayed_work_timer_fn == $sub.ref(0, 684454);

procedure delayed_work_timer_fn($i0: i64);



const be_func_recovery_task: ref;

axiom be_func_recovery_task == $sub.ref(0, 685486);

procedure be_func_recovery_task($p0: ref);
  free requires assertsPassed;
  modifies $M.26, $M.0, $M.29, $CurrAddr, $M.34, $M.21, $M.2, $M.1, $M.41, $M.35, $M.3, $M.42, $M.25, $M.47, $M.46, $M.48, $M.40, $M.38, $M.60, $M.61, $M.62, $M.30, $M.31, assertsPassed;



implementation be_func_recovery_task($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var vslice_dummy_var_537: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11683;

  corral_source_split_11683:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_11684;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 364904), 364320));
    goto corral_source_split_11685;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2463} be_detect_error($p2);
    goto corral_source_split_11686;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 364904), 364320)), $mul.ref(364014, 1));
    goto corral_source_split_11687;

  corral_source_split_11687:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_11688;

  corral_source_split_11688:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_11689;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2464} $i27 := msecs_to_jiffies(1000);
    call {:si_unique_call 2465} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_11713;

  corral_source_split_11713:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 364904), 364320)), $mul.ref(363728, 1));
    goto corral_source_split_11714;

  corral_source_split_11714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2466} vslice_dummy_var_537 := schedule_delayed_work($p28, $i27);
    goto corral_source_split_11715;

  corral_source_split_11715:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_11691;

  corral_source_split_11691:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 364904), 364320)), $mul.ref(0, 1));
    goto corral_source_split_11692;

  corral_source_split_11692:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_11693;

  corral_source_split_11693:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_11694;

  corral_source_split_11694:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_11695;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_11696;

  corral_source_split_11696:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 57888);
    goto corral_source_split_11697;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i11 == 1);
    goto corral_source_split_11703;

  corral_source_split_11703:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 364904), 364320)), $mul.ref(0, 1));
    goto corral_source_split_11704;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_11705;

  corral_source_split_11705:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_11706;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_11707;

  corral_source_split_11707:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_11708;

  corral_source_split_11708:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 57896);
    goto corral_source_split_11709;

  corral_source_split_11709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb3;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 364904), 364320)), $mul.ref(364012, 1));
    goto corral_source_split_11699;

  corral_source_split_11699:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_11700;

  corral_source_split_11700:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i19);
    goto corral_source_split_11701;

  corral_source_split_11701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2467} rtnl_lock();
    goto corral_source_split_11717;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 364904), 364320)), $mul.ref(8, 1));
    goto corral_source_split_11718;

  corral_source_split_11718:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_11719;

  corral_source_split_11719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2468} netif_device_detach($p22);
    goto corral_source_split_11720;

  corral_source_split_11720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2469} rtnl_unlock();
    goto corral_source_split_11721;

  corral_source_split_11721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2470} $i23 := lancer_recover_func($p2);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    call {:si_unique_call 2471} {:cexpr "status"} boogie_si_record_i32($i23);
    goto corral_source_split_11722;

  corral_source_split_11722:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_11723;

  corral_source_split_11723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_11725;

  corral_source_split_11725:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 364904), 364320)), $mul.ref(8, 1));
    goto corral_source_split_11726;

  corral_source_split_11726:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_11727;

  corral_source_split_11727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2472} netif_device_attach($p26);
    goto corral_source_split_11728;

  corral_source_split_11728:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i20 == 1;
    goto corral_source_split_11711;

  corral_source_split_11711:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb5;
}



const be_netdev_init: ref;

axiom be_netdev_init == $sub.ref(0, 686518);

procedure be_netdev_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_netdev_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i42: i32;
  var $p43: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11730;

  corral_source_split_11730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2473} $p1 := netdev_priv($p0);
    goto corral_source_split_11731;

  corral_source_split_11731:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_11732;

  corral_source_split_11732:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(152, 1));
    goto corral_source_split_11733;

  corral_source_split_11733:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_11734;

  corral_source_split_11734:
    assume {:verifier.code 0} true;
    $i5 := $or.i64($i4, 537985171);
    goto corral_source_split_11735;

  corral_source_split_11735:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(152, 1));
    goto corral_source_split_11736;

  corral_source_split_11736:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p6, $i5);
    goto corral_source_split_11737;

  corral_source_split_11737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2474} $i7 := be_multi_rxq($p2);
    goto corral_source_split_11738;

  corral_source_split_11738:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 2475} {:cexpr "tmp___0"} boogie_si_record_i8($i8);
    goto corral_source_split_11739;

  corral_source_split_11739:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_11740;

  corral_source_split_11740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(144, 1));
    goto corral_source_split_11749;

  corral_source_split_11749:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_11750;

  corral_source_split_11750:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(152, 1));
    goto corral_source_split_11751;

  corral_source_split_11751:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_11752;

  corral_source_split_11752:
    assume {:verifier.code 0} true;
    $i18 := $or.i64($i15, $i17);
    goto corral_source_split_11753;

  corral_source_split_11753:
    assume {:verifier.code 0} true;
    $i19 := $or.i64($i18, 768);
    goto corral_source_split_11754;

  corral_source_split_11754:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(144, 1));
    goto corral_source_split_11755;

  corral_source_split_11755:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i19);
    goto corral_source_split_11756;

  corral_source_split_11756:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(168, 1));
    goto corral_source_split_11757;

  corral_source_split_11757:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_11758;

  corral_source_split_11758:
    assume {:verifier.code 0} true;
    $i23 := $or.i64($i22, 1114131);
    goto corral_source_split_11759;

  corral_source_split_11759:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(168, 1));
    goto corral_source_split_11760;

  corral_source_split_11760:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, $i23);
    goto corral_source_split_11761;

  corral_source_split_11761:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(428, 1));
    goto corral_source_split_11762;

  corral_source_split_11762:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_11763;

  corral_source_split_11763:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, 131072);
    goto corral_source_split_11764;

  corral_source_split_11764:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(428, 1));
    goto corral_source_split_11765;

  corral_source_split_11765:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_11766;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(424, 1));
    goto corral_source_split_11767;

  corral_source_split_11767:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_11768;

  corral_source_split_11768:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i30, 4096);
    goto corral_source_split_11769;

  corral_source_split_11769:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(424, 1));
    goto corral_source_split_11770;

  corral_source_split_11770:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_11771;

  corral_source_split_11771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2476} netif_set_gso_max_size($p0, 65521);
    goto corral_source_split_11772;

  corral_source_split_11772:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(400, 1));
    goto corral_source_split_11773;

  corral_source_split_11773:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, be_netdev_ops);
    goto corral_source_split_11774;

  corral_source_split_11774:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(408, 1));
    goto corral_source_split_11775;

  corral_source_split_11775:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, be_ethtool_ops);
    goto corral_source_split_11776;

  corral_source_split_11776:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(488, 1));
    goto corral_source_split_11777;

  corral_source_split_11777:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_11778;

  corral_source_split_11778:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64(0);
    goto corral_source_split_11779;

  corral_source_split_11779:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p36, $mul.ref($i37, 272));
    goto corral_source_split_11780;

  corral_source_split_11780:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(484, 1));
    goto corral_source_split_11781;

  corral_source_split_11781:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_11782;

  corral_source_split_11782:
    assume {:verifier.code 0} true;
    $i41 := $ult.i32(0, $i40);
    goto corral_source_split_11783;

  corral_source_split_11783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i41 == 1;
    goto corral_source_split_11785;

  corral_source_split_11785:
    assume {:verifier.code 0} true;
    $i42, $p43 := 0, $p38;
    goto $bb7;

  $bb7:
    call $p44, $i45, $p46, $i47, $i48, $i42, $p43 := be_netdev_init_loop_$bb7($p0, $p39, $p44, $i45, $p46, $i47, $i48, $i42, $p43);
    goto $bb7_last;

  corral_source_split_11787:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_11789;

  corral_source_split_11789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2477} netif_napi_add($p0, $p44, be_poll, 64);
    goto corral_source_split_11790;

  corral_source_split_11790:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i42, 1);
    call {:si_unique_call 2478} {:cexpr "i"} boogie_si_record_i32($i45);
    goto corral_source_split_11791;

  corral_source_split_11791:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p43, $mul.ref(1, 272));
    goto corral_source_split_11792;

  corral_source_split_11792:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p39);
    goto corral_source_split_11793;

  corral_source_split_11793:
    assume {:verifier.code 0} true;
    $i48 := $ult.i32($i45, $i47);
    goto corral_source_split_11794;

  corral_source_split_11794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i48 == 1);
    goto corral_source_split_11796;

  corral_source_split_11796:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb9:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i42, $p43 := $i45, $p46;
    goto $bb9_dummy;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_11742;

  corral_source_split_11742:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(152, 1));
    goto corral_source_split_11743;

  corral_source_split_11743:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_11744;

  corral_source_split_11744:
    assume {:verifier.code 0} true;
    $i12 := $or.i64($i11, 268435456);
    goto corral_source_split_11745;

  corral_source_split_11745:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(152, 1));
    goto corral_source_split_11746;

  corral_source_split_11746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i12);
    goto corral_source_split_11747;

  corral_source_split_11747:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11787;
}



const register_netdev: ref;

axiom register_netdev == $sub.ref(0, 687550);

procedure register_netdev($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_netdev($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11798;

  corral_source_split_11798:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2479} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2480} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_11799;

  corral_source_split_11799:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const be_roce_dev_add: ref;

axiom be_roce_dev_add == $sub.ref(0, 688582);

procedure be_roce_dev_add($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.38, assertsPassed, $CurrAddr;



implementation be_roce_dev_add($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11801;

  corral_source_split_11801:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11802;

  corral_source_split_11802:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_11803;

  corral_source_split_11803:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_11804;

  corral_source_split_11804:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_11805;

  corral_source_split_11805:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_11806;

  corral_source_split_11806:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 1824);
    goto corral_source_split_11807;

  corral_source_split_11807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_11814;

  corral_source_split_11814:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11815;

  corral_source_split_11815:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_11816;

  corral_source_split_11816:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_11817;

  corral_source_split_11817:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_11818;

  corral_source_split_11818:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_11819;

  corral_source_split_11819:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 1832);
    goto corral_source_split_11820;

  corral_source_split_11820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364024, 1));
    goto corral_source_split_11809;

  corral_source_split_11809:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_11810;

  corral_source_split_11810:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 4);
    goto corral_source_split_11811;

  corral_source_split_11811:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_11812;

  corral_source_split_11812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb6;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_11822;

  corral_source_split_11822:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364080, 1));
    goto corral_source_split_11823;

  corral_source_split_11823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2481} INIT_LIST_HEAD($p17);
    goto corral_source_split_11824;

  corral_source_split_11824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2482} ldv_mutex_lock_104(be_adapter_list_lock);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_11825;

  corral_source_split_11825:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364080, 1));
    goto corral_source_split_11826;

  corral_source_split_11826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2483} list_add_tail($p18, be_adapter_list);
    goto corral_source_split_11827;

  corral_source_split_11827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2484} _be_roce_dev_add($p0);
    goto corral_source_split_11828;

  corral_source_split_11828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2485} ldv_mutex_unlock_105(be_adapter_list_lock);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_11829;

  corral_source_split_11829:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const be_cmd_query_port_name: ref;

axiom be_cmd_query_port_name == $sub.ref(0, 689614);

procedure be_cmd_query_port_name($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.0, $M.21, $CurrAddr;



implementation be_cmd_query_port_name($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i64;
  var $p39: ref;
  var $i40: i8;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i32;
  var $i45: i8;
  var $i24: i32;
  var $p46: ref;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11831;

  corral_source_split_11831:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11832;

  corral_source_split_11832:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_11833;

  corral_source_split_11833:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_11834;

  corral_source_split_11834:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_11835;

  corral_source_split_11835:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_11836;

  corral_source_split_11836:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 57888);
    goto corral_source_split_11837;

  corral_source_split_11837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_11857;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2486} spin_lock_bh($p20);
    goto corral_source_split_11858;

  corral_source_split_11858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2487} $p21 := wrb_from_mccq($p0);
    goto corral_source_split_11859;

  corral_source_split_11859:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_11860;

  corral_source_split_11860:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_11861;

  corral_source_split_11861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2489} $p25 := embedded_payload($p21);
    goto corral_source_split_11869;

  corral_source_split_11869:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_11870;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_11871;

  corral_source_split_11871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2490} be_wrb_cmd_hdr_prepare($p27, 1, 77, 20, $p21, $0.ref);
    goto corral_source_split_11872;

  corral_source_split_11872:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_11873;

  corral_source_split_11873:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 1);
    goto corral_source_split_11874;

  corral_source_split_11874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2491} $i30 := be_mcc_notify_wait($p0);
    call {:si_unique_call 2492} {:cexpr "status"} boogie_si_record_i32($i30);
    goto corral_source_split_11875;

  corral_source_split_11875:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_11876;

  corral_source_split_11876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i31 == 1);
    goto corral_source_split_11889;

  corral_source_split_11889:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364232, 1));
    goto corral_source_split_11890;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_11891;

  corral_source_split_11891:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_11892;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 48);
    goto corral_source_split_11893;

  corral_source_split_11893:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_11894;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p1, $i45);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i24 := $i30;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_11865;

  corral_source_split_11865:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_11866;

  corral_source_split_11866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2488} spin_unlock_bh($p46);
    goto corral_source_split_11867;

  corral_source_split_11867:
    assume {:verifier.code 0} true;
    $i19 := $i24;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_11855;

  corral_source_split_11855:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb12:
    assume $i31 == 1;
    goto corral_source_split_11878;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2493} $p32 := embedded_payload($p21);
    goto corral_source_split_11879;

  corral_source_split_11879:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_11880;

  corral_source_split_11880:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364232, 1));
    goto corral_source_split_11881;

  corral_source_split_11881:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_11882;

  corral_source_split_11882:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_11883;

  corral_source_split_11883:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_11884;

  corral_source_split_11884:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 20)), $mul.ref(16, 1)), $mul.ref($i37, 1));
    goto corral_source_split_11885;

  corral_source_split_11885:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_11886;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p1, $i40);
    goto corral_source_split_11887;

  corral_source_split_11887:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_11863;

  corral_source_split_11863:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 16);
    goto $bb10;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_11839;

  corral_source_split_11839:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11840;

  corral_source_split_11840:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_11841;

  corral_source_split_11841:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_11842;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_11843;

  corral_source_split_11843:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_11844;

  corral_source_split_11844:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 57896);
    goto corral_source_split_11845;

  corral_source_split_11845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_11847;

  corral_source_split_11847:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364232, 1));
    goto corral_source_split_11848;

  corral_source_split_11848:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_11849;

  corral_source_split_11849:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_11850;

  corral_source_split_11850:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 48);
    goto corral_source_split_11851;

  corral_source_split_11851:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_11852;

  corral_source_split_11852:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p1, $i18);
    goto corral_source_split_11853;

  corral_source_split_11853:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb6;
}



const mc_name: ref;

axiom mc_name == $sub.ref(0, 690646);

procedure mc_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation mc_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11896;

  corral_source_split_11896:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364024, 1));
    goto corral_source_split_11897;

  corral_source_split_11897:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_11898;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1024);
    goto corral_source_split_11899;

  corral_source_split_11899:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_11900;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_11904;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364024, 1));
    goto corral_source_split_11905;

  corral_source_split_11905:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_11906;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 131072);
    goto corral_source_split_11907;

  corral_source_split_11907:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_11908;

  corral_source_split_11908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    goto corral_source_split_11914;

  corral_source_split_11914:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364024, 1));
    goto corral_source_split_11915;

  corral_source_split_11915:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_11916;

  corral_source_split_11916:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 16777216);
    goto corral_source_split_11917;

  corral_source_split_11917:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_11918;

  corral_source_split_11918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_11922;

  corral_source_split_11922:
    assume {:verifier.code 0} true;
    $p5 := .str.152;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11910;

  corral_source_split_11910:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_11920;

  corral_source_split_11920:
    assume {:verifier.code 0} true;
    $p5 := .str.151;
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_11912;

  corral_source_split_11912:
    assume {:verifier.code 0} true;
    $p5 := .str.150;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_11902;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    $p5 := .str.149;
    goto $bb3;
}



const func_name: ref;

axiom func_name == $sub.ref(0, 691678);

procedure func_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation func_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11924;

  corral_source_split_11924:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_11925;

  corral_source_split_11925:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_11926;

  corral_source_split_11926:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_11927;

  corral_source_split_11927:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_11928;

  corral_source_split_11928:
    assume {:verifier.code 0} true;
    $p5 := (if $i4 == 1 then .str.153 else .str.154);
    goto corral_source_split_11929;

  corral_source_split_11929:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const nic_name: ref;

axiom nic_name == $sub.ref(0, 692710);

procedure nic_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation nic_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11931;

  corral_source_split_11931:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_11932;

  corral_source_split_11932:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_11933;

  corral_source_split_11933:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 1824);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i3, 57888);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i3, 57896);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i3, 57896);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p17 := .str.160;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_11945;

  corral_source_split_11945:
    assume {:verifier.code 0} true;
    $r := $p17;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p17 := .str.157;
    goto $bb31;

  $bb6:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i3, 57888);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb11;

  $bb12:
    assume $i8 == 1;
    goto corral_source_split_11935;

  corral_source_split_11935:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i3, 1832);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i3, 1832);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb11;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p17 := .str.159;
    goto $bb31;

  $bb14:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i3, 1824);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb11;

  $bb19:
    assume $i11 == 1;
    goto corral_source_split_11937;

  corral_source_split_11937:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i3, 1792);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i3, 1808);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i3, 1808);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb11;

  $bb25:
    assume $i14 == 1;
    goto corral_source_split_11939;

  corral_source_split_11939:
    assume {:verifier.code 0} true;
    $p17 := .str.156;
    goto $bb31;

  $bb23:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i3, 1792);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb11;

  $bb27:
    assume $i15 == 1;
    goto corral_source_split_11941;

  corral_source_split_11941:
    assume {:verifier.code 0} true;
    $p17 := .str.155;
    goto $bb31;

  $bb21:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i3, 545);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb11;

  $bb29:
    assume $i16 == 1;
    goto corral_source_split_11943;

  corral_source_split_11943:
    assume {:verifier.code 0} true;
    $p17 := .str.158;
    goto $bb31;
}



const ldv_mutex_lock_104: ref;

axiom ldv_mutex_lock_104 == $sub.ref(0, 693742);

procedure ldv_mutex_lock_104($p0: ref);
  free requires assertsPassed;
  modifies $M.38, assertsPassed;



implementation ldv_mutex_lock_104($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11947;

  corral_source_split_11947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2494} ldv_mutex_lock_be_adapter_list_lock($p0);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    goto corral_source_split_11948;

  corral_source_split_11948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2495} mutex_lock($p0);
    goto corral_source_split_11949;

  corral_source_split_11949:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_442:
    assume !assertsPassed;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 694774);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11951;

  corral_source_split_11951:
    assume {:verifier.code 0} true;
    goto corral_source_split_11952;

  corral_source_split_11952:
    assume {:verifier.code 0} true;
    $p3 := $M.51;
    goto corral_source_split_11953;

  corral_source_split_11953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2496} __list_add($p0, $p3, $p1);
    goto corral_source_split_11954;

  corral_source_split_11954:
    assume {:verifier.code 0} true;
    return;
}



const _be_roce_dev_add: ref;

axiom _be_roce_dev_add == $sub.ref(0, 695806);

procedure _be_roce_dev_add($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation _be_roce_dev_add($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p26: ref;
  var $i27: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p35: ref;
  var $i36: i64;
  var $i37: i32;
  var $p40: ref;
  var $i41: i64;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $i57: i64;
  var $p58: ref;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $i90: i32;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $p94: ref;
  var $i95: i1;
  var $i96: i32;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $p102: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i1;
  var $i108: i64;
  var $p111: ref;
  var $i112: i32;
  var $i113: i64;
  var $p116: ref;
  var $i117: i32;
  var $i118: i32;
  var $i119: i1;
  var $i107: i32;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var cmdloc_dummy_var_339: [ref]i8;
  var cmdloc_dummy_var_340: [ref]i8;
  var cmdloc_dummy_var_341: [ref]i8;
  var cmdloc_dummy_var_342: [ref]i8;
  var cmdloc_dummy_var_343: [ref]i8;
  var cmdloc_dummy_var_344: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2497} $p1 := $alloc($mul.ref(144, $zext.i32.i64(1)));
    goto corral_source_split_11956;

  corral_source_split_11956:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_11957;

  corral_source_split_11957:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_11958;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    $p4 := $M.36;
    goto corral_source_split_11959;

  corral_source_split_11959:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_11960;

  corral_source_split_11960:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_11961;

  corral_source_split_11961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_11965;

  corral_source_split_11965:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_11966;

  corral_source_split_11966:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_11967;

  corral_source_split_11967:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 1824);
    goto corral_source_split_11968;

  corral_source_split_11968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    goto corral_source_split_11975;

  corral_source_split_11975:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(24, 1));
    goto corral_source_split_11976;

  corral_source_split_11976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p47, 0);
    goto corral_source_split_11977;

  corral_source_split_11977:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(32, 1));
    goto corral_source_split_11978;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, 0);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12012;

  corral_source_split_12012:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_12013;

  corral_source_split_12013:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(40, 1));
    goto corral_source_split_12014;

  corral_source_split_12014:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, $p50);
    goto corral_source_split_12015;

  corral_source_split_12015:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_12016;

  corral_source_split_12016:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_12017;

  corral_source_split_12017:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_12018;

  corral_source_split_12018:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p54, $p53);
    goto corral_source_split_12019;

  corral_source_split_12019:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364048, 1)), $mul.ref(8, 1));
    goto corral_source_split_12020;

  corral_source_split_12020:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.0, $p56);
    goto corral_source_split_12021;

  corral_source_split_12021:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(8, 1));
    goto corral_source_split_12022;

  corral_source_split_12022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p58, $i57);
    goto corral_source_split_12023;

  corral_source_split_12023:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364048, 1)), $mul.ref(0, 1));
    goto corral_source_split_12024;

  corral_source_split_12024:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_12025;

  corral_source_split_12025:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_12026;

  corral_source_split_12026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $i61);
    goto corral_source_split_12027;

  corral_source_split_12027:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364048, 1)), $mul.ref(4, 1));
    goto corral_source_split_12028;

  corral_source_split_12028:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_12029;

  corral_source_split_12029:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(20, 1));
    goto corral_source_split_12030;

  corral_source_split_12030:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i65);
    goto corral_source_split_12031;

  corral_source_split_12031:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_12032;

  corral_source_split_12032:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_12033;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(48, 1));
    goto corral_source_split_12034;

  corral_source_split_12034:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p69, $p68);
    goto corral_source_split_12035;

  corral_source_split_12035:
    assume {:verifier.code 0} true;
    $i70 := $ugt.i64(6, 63);
    goto corral_source_split_12036;

  corral_source_split_12036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i70 == 1);
    goto corral_source_split_12047;

  corral_source_split_12047:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_12048;

  corral_source_split_12048:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_12049;

  corral_source_split_12049:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_12050;

  corral_source_split_12050:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_12051;

  corral_source_split_12051:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 2784)), $mul.ref(736, 1));
    goto corral_source_split_12052;

  corral_source_split_12052:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_12053;

  corral_source_split_12053:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_342 := $M.0;
    cmdloc_dummy_var_343 := $M.0;
    call {:si_unique_call 2499} cmdloc_dummy_var_344 := $memcpy.i8(cmdloc_dummy_var_342, cmdloc_dummy_var_343, $p78, $p82, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_344;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364228, 1));
    goto corral_source_split_12055;

  corral_source_split_12055:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_12056;

  corral_source_split_12056:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(64, 1));
    goto corral_source_split_12057;

  corral_source_split_12057:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, $i84);
    goto corral_source_split_12058;

  corral_source_split_12058:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(480, 1));
    goto corral_source_split_12059;

  corral_source_split_12059:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_12060;

  corral_source_split_12060:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_12061;

  corral_source_split_12061:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i88 == 1);
    goto corral_source_split_12073;

  corral_source_split_12073:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_12074;

  corral_source_split_12074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p121, 0);
    goto corral_source_split_12075;

  corral_source_split_12075:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(68, 1));
    goto corral_source_split_12076;

  corral_source_split_12076:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p122, 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p123 := $M.36;
    goto corral_source_split_12109;

  corral_source_split_12109:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_12110;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.52, $p124);
    call {:si_unique_call 2502} $p126 := devirtbounce.16($p125, $p1);
    goto corral_source_split_12111;

  corral_source_split_12111:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364072, 1));
    goto corral_source_split_12112;

  corral_source_split_12112:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p127, $p126);
    goto corral_source_split_12113;

  corral_source_split_12113:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i88 == 1;
    goto corral_source_split_12063;

  corral_source_split_12063:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(480, 1));
    goto corral_source_split_12064;

  corral_source_split_12064:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_12065;

  corral_source_split_12065:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364064, 1));
    goto corral_source_split_12066;

  corral_source_split_12066:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_12067;

  corral_source_split_12067:
    assume {:verifier.code 0} true;
    $i93 := $add.i32($i90, $i92);
    call {:si_unique_call 2500} {:cexpr "num_vec"} boogie_si_record_i32($i93);
    goto corral_source_split_12068;

  corral_source_split_12068:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(68, 1));
    goto corral_source_split_12069;

  corral_source_split_12069:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, 0);
    goto corral_source_split_12070;

  corral_source_split_12070:
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i93, 16);
    goto corral_source_split_12071;

  corral_source_split_12071:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i95 == 1);
    goto corral_source_split_12080;

  corral_source_split_12080:
    assume {:verifier.code 0} true;
    $i96 := 16;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_12082;

  corral_source_split_12082:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_12083;

  corral_source_split_12083:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p98, $i96);
    goto corral_source_split_12084;

  corral_source_split_12084:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(484, 1));
    goto corral_source_split_12085;

  corral_source_split_12085:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p99);
    goto corral_source_split_12086;

  corral_source_split_12086:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(72, 1)), $mul.ref(4, 1));
    goto corral_source_split_12087;

  corral_source_split_12087:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, $i100);
    goto corral_source_split_12088;

  corral_source_split_12088:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_12089;

  corral_source_split_12089:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_12090;

  corral_source_split_12090:
    assume {:verifier.code 0} true;
    $i106 := $sgt.i32($i105, 0);
    goto corral_source_split_12091;

  corral_source_split_12091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb25:
    assume $i106 == 1;
    goto corral_source_split_12093;

  corral_source_split_12093:
    assume {:verifier.code 0} true;
    $i107 := 0;
    goto $bb28;

  $bb28:
    call $i108, $p111, $i112, $i113, $p116, $i117, $i118, $i119, $i107 := _be_roce_dev_add_loop_$bb28($p0, $p1, $p104, $i108, $p111, $i112, $i113, $p116, $i117, $i118, $i119, $i107);
    goto $bb28_last;

  corral_source_split_12095:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i108 := $sext.i32.i64($i107);
    goto corral_source_split_12097;

  corral_source_split_12097:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(4024, 1)), $mul.ref($i108, 8)), $mul.ref(0, 1));
    goto corral_source_split_12098;

  corral_source_split_12098:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    goto corral_source_split_12099;

  corral_source_split_12099:
    assume {:verifier.code 0} true;
    $i113 := $sext.i32.i64($i107);
    goto corral_source_split_12100;

  corral_source_split_12100:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(72, 1)), $mul.ref(8, 1)), $mul.ref($i113, 4));
    goto corral_source_split_12101;

  corral_source_split_12101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p116, $i112);
    goto corral_source_split_12102;

  corral_source_split_12102:
    assume {:verifier.code 0} true;
    $i117 := $add.i32($i107, 1);
    call {:si_unique_call 2501} {:cexpr "i"} boogie_si_record_i32($i117);
    goto corral_source_split_12103;

  corral_source_split_12103:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p104);
    goto corral_source_split_12104;

  corral_source_split_12104:
    assume {:verifier.code 0} true;
    $i119 := $sgt.i32($i118, $i117);
    goto corral_source_split_12105;

  corral_source_split_12105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i119 == 1);
    goto corral_source_split_12107;

  corral_source_split_12107:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb30:
    assume $i119 == 1;
    assume {:verifier.code 0} true;
    $i107 := $i117;
    goto $bb30_dummy;

  $bb22:
    assume $i95 == 1;
    goto corral_source_split_12078;

  corral_source_split_12078:
    assume {:verifier.code 0} true;
    $i96 := $i93;
    goto $bb24;

  $bb17:
    assume $i70 == 1;
    goto corral_source_split_12038;

  corral_source_split_12038:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_12039;

  corral_source_split_12039:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_12040;

  corral_source_split_12040:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_12041;

  corral_source_split_12041:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_12042;

  corral_source_split_12042:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 2784)), $mul.ref(736, 1));
    goto corral_source_split_12043;

  corral_source_split_12043:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_12044;

  corral_source_split_12044:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_339 := $M.0;
    cmdloc_dummy_var_340 := $M.0;
    call {:si_unique_call 2498} cmdloc_dummy_var_341 := $memcpy.i8(cmdloc_dummy_var_339, cmdloc_dummy_var_340, $p72, $p76, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_341;
    goto corral_source_split_12045;

  corral_source_split_12045:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_11970;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(480, 1));
    goto corral_source_split_11971;

  corral_source_split_11971:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_11972;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_11973;

  corral_source_split_11973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(2, 56)), $mul.ref(0, 1));
    goto corral_source_split_11982;

  corral_source_split_11982:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_11983;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(24, 1));
    goto corral_source_split_11984;

  corral_source_split_11984:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p18, $i17);
    goto corral_source_split_11985;

  corral_source_split_11985:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(2, 56)), $mul.ref(0, 1));
    goto corral_source_split_11986;

  corral_source_split_11986:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_11987;

  corral_source_split_11987:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_11988;

  corral_source_split_11988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i23 == 1);
    goto corral_source_split_11999;

  corral_source_split_11999:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(2, 56)), $mul.ref(8, 1));
    goto corral_source_split_12000;

  corral_source_split_12000:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_12001;

  corral_source_split_12001:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(2, 56)), $mul.ref(0, 1));
    goto corral_source_split_12002;

  corral_source_split_12002:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_12003;

  corral_source_split_12003:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i27, $i31);
    goto corral_source_split_12004;

  corral_source_split_12004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    goto corral_source_split_12006;

  corral_source_split_12006:
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_12008;

  corral_source_split_12008:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(32, 1));
    goto corral_source_split_12009;

  corral_source_split_12009:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i45);
    goto corral_source_split_12010;

  corral_source_split_12010:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(2, 56)), $mul.ref(8, 1));
    goto corral_source_split_11990;

  corral_source_split_11990:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, $p35);
    goto corral_source_split_11991;

  corral_source_split_11991:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i64.i32($i36);
    goto corral_source_split_11992;

  corral_source_split_11992:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(2, 56)), $mul.ref(0, 1));
    goto corral_source_split_11993;

  corral_source_split_11993:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    goto corral_source_split_11994;

  corral_source_split_11994:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i64.i32($i41);
    goto corral_source_split_11995;

  corral_source_split_11995:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32($i37, $i42);
    goto corral_source_split_11996;

  corral_source_split_11996:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 1);
    goto corral_source_split_11997;

  corral_source_split_11997:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb15;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb11;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_11980;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_11963;

  corral_source_split_11963:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb30_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_12095;
}



const ldv_mutex_unlock_105: ref;

axiom ldv_mutex_unlock_105 == $sub.ref(0, 696838);

procedure ldv_mutex_unlock_105($p0: ref);
  free requires assertsPassed;
  modifies $M.38, assertsPassed;



implementation ldv_mutex_unlock_105($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12115;

  corral_source_split_12115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2503} ldv_mutex_unlock_be_adapter_list_lock($p0);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    goto corral_source_split_12116;

  corral_source_split_12116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2504} mutex_unlock($p0);
    goto corral_source_split_12117;

  corral_source_split_12117:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_445:
    assume !assertsPassed;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 697870);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12119;

  corral_source_split_12119:
    assume {:verifier.code 0} true;
    return;
}



const netif_set_gso_max_size: ref;

axiom netif_set_gso_max_size == $sub.ref(0, 698902);

procedure netif_set_gso_max_size($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation netif_set_gso_max_size($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2505} {:cexpr "netif_set_gso_max_size:arg:size"} boogie_si_record_i32($i1);
    goto corral_source_split_12121;

  corral_source_split_12121:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(2376, 1));
    goto corral_source_split_12122;

  corral_source_split_12122:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_12123;

  corral_source_split_12123:
    assume {:verifier.code 0} true;
    return;
}



const be_poll: ref;

axiom be_poll == $sub.ref(0, 699934);

procedure be_poll($p0: ref, $i1: i32) returns ($r: i32);



const netif_napi_add: ref;

axiom netif_napi_add == $sub.ref(0, 700966);

procedure netif_napi_add($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation netif_napi_add($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2506} {:cexpr "netif_napi_add:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_12125;

  corral_source_split_12125:
    assume {:verifier.code 0} true;
    return;
}



const be_process_tx: ref;

axiom be_process_tx == $sub.ref(0, 701998);

procedure be_process_tx($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i1);



const be_process_rx: ref;

axiom be_process_rx == $sub.ref(0, 703030);

procedure be_process_rx($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const napi_complete: ref;

axiom napi_complete == $sub.ref(0, 704062);

procedure napi_complete($p0: ref);



const do_gro: ref;

axiom do_gro == $sub.ref(0, 705094);

procedure do_gro($p0: ref) returns ($r: i1);



const be_rx_compl_process_gro: ref;

axiom be_rx_compl_process_gro == $sub.ref(0, 706126);

procedure be_rx_compl_process_gro($p0: ref, $p1: ref, $p2: ref);



const be_rx_compl_process: ref;

axiom be_rx_compl_process == $sub.ref(0, 707158);

procedure be_rx_compl_process($p0: ref, $p1: ref);



const be_rx_stats_update: ref;

axiom be_rx_stats_update == $sub.ref(0, 708190);

procedure be_rx_stats_update($p0: ref, $p1: ref);



const u64_stats_update_begin: ref;

axiom u64_stats_update_begin == $sub.ref(0, 709222);

procedure u64_stats_update_begin($p0: ref);
  free requires assertsPassed;



implementation u64_stats_update_begin($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12127;

  corral_source_split_12127:
    assume {:verifier.code 0} true;
    return;
}



const netdev_alloc_skb_ip_align: ref;

axiom netdev_alloc_skb_ip_align == $sub.ref(0, 710254);

procedure netdev_alloc_skb_ip_align($p0: ref, $i1: i32) returns ($r: ref);



const skb_fill_rx_data: ref;

axiom skb_fill_rx_data == $sub.ref(0, 711286);

procedure skb_fill_rx_data($p0: ref, $p1: ref, $p2: ref);



const csum_passed: ref;

axiom csum_passed == $sub.ref(0, 712318);

procedure csum_passed($p0: ref) returns ($r: i1);



const skb_checksum_none_assert: ref;

axiom skb_checksum_none_assert == $sub.ref(0, 713350);

procedure skb_checksum_none_assert($p0: ref);



const eth_type_trans: ref;

axiom eth_type_trans == $sub.ref(0, 714382);

procedure eth_type_trans($p0: ref, $p1: ref) returns ($r: i16);



const skb_record_rx_queue: ref;

axiom skb_record_rx_queue == $sub.ref(0, 715414);

procedure skb_record_rx_queue($p0: ref, $i1: i16);



const __vlan_hwaccel_put_tag: ref;

axiom __vlan_hwaccel_put_tag == $sub.ref(0, 716446);

procedure __vlan_hwaccel_put_tag($p0: ref, $i1: i16, $i2: i16) returns ($r: ref);



const netif_receive_skb: ref;

axiom netif_receive_skb == $sub.ref(0, 717478);

procedure netif_receive_skb($p0: ref) returns ($r: i32);



const llvm.prefetch: ref;

axiom llvm.prefetch == $sub.ref(0, 718510);

procedure llvm.prefetch($p0: ref, $i1: i32, $i2: i32, $i3: i32);



const skb_frag_set_page: ref;

axiom skb_frag_set_page == $sub.ref(0, 719542);

procedure skb_frag_set_page($p0: ref, $i1: i32, $p2: ref);



const skb_frag_size_set: ref;

axiom skb_frag_size_set == $sub.ref(0, 720574);

procedure skb_frag_size_set($p0: ref, $i1: i32);



const skb_frag_size_add: ref;

axiom skb_frag_size_add == $sub.ref(0, 721606);

procedure skb_frag_size_add($p0: ref, $i1: i32);



const __skb_frag_set_page: ref;

axiom __skb_frag_set_page == $sub.ref(0, 722638);

procedure __skb_frag_set_page($p0: ref, $p1: ref);



const __netdev_alloc_skb_ip_align: ref;

axiom __netdev_alloc_skb_ip_align == $sub.ref(0, 723670);

procedure __netdev_alloc_skb_ip_align($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);



const __netdev_alloc_skb: ref;

axiom __netdev_alloc_skb == $sub.ref(0, 724702);

procedure __netdev_alloc_skb($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);



const napi_get_frags: ref;

axiom napi_get_frags == $sub.ref(0, 725734);

procedure napi_get_frags($p0: ref) returns ($r: ref);



const napi_gro_frags: ref;

axiom napi_gro_frags == $sub.ref(0, 726766);

procedure napi_gro_frags($p0: ref) returns ($r: i32);



const __netif_subqueue_stopped: ref;

axiom __netif_subqueue_stopped == $sub.ref(0, 727798);

procedure __netif_subqueue_stopped($p0: ref, $i1: i16) returns ($r: i1);



const netif_wake_subqueue: ref;

axiom netif_wake_subqueue == $sub.ref(0, 728830);

procedure netif_wake_subqueue($p0: ref, $i1: i16);



const netpoll_trap: ref;

axiom netpoll_trap == $sub.ref(0, 729862);

procedure netpoll_trap() returns ($r: i32);
  free requires assertsPassed;



implementation netpoll_trap() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12129;

  corral_source_split_12129:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2507} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2508} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12130;

  corral_source_split_12130:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const test_and_clear_bit: ref;

axiom test_and_clear_bit == $sub.ref(0, 730894);

procedure test_and_clear_bit($i0: i32, $p1: ref) returns ($r: i32);



const __netif_schedule: ref;

axiom __netif_schedule == $sub.ref(0, 731926);

procedure __netif_schedule($p0: ref);



const netif_tx_queue_stopped: ref;

axiom netif_tx_queue_stopped == $sub.ref(0, 732958);

procedure netif_tx_queue_stopped($p0: ref) returns ($r: i1);



const lancer_recover_func: ref;

axiom lancer_recover_func == $sub.ref(0, 733990);

procedure lancer_recover_func($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.34, $M.21, $M.2, $M.1, $M.41, $M.35, $M.3, $M.42, $CurrAddr, $M.25, $M.47, $M.46, $M.48, $M.40, $M.38, $M.60, $M.61, $M.62, $M.30, $M.31, $M.26, assertsPassed;



implementation lancer_recover_func($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i3: i32;
  var $p31: ref;
  var $i32: i8;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i30: i32;
  var vslice_dummy_var_538: i32;
  var vslice_dummy_var_539: i32;
  var vslice_dummy_var_540: i32;
  var vslice_dummy_var_541: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12132;

  corral_source_split_12132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2509} $i1 := lancer_test_and_set_rdy_state($p0);
    call {:si_unique_call 2510} {:cexpr "status"} boogie_si_record_i32($i1);
    goto corral_source_split_12133;

  corral_source_split_12133:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_12134;

  corral_source_split_12134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_12143;

  corral_source_split_12143:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_12144;

  corral_source_split_12144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2511} $i6 := netif_running($p5);
    goto corral_source_split_12145;

  corral_source_split_12145:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 2512} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_12146;

  corral_source_split_12146:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_12147;

  corral_source_split_12147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2514} vslice_dummy_var_539 := be_clear($p0);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_12154;

  corral_source_split_12154:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364014, 1));
    goto corral_source_split_12155;

  corral_source_split_12155:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 0);
    goto corral_source_split_12156;

  corral_source_split_12156:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364013, 1));
    goto corral_source_split_12157;

  corral_source_split_12157:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, 0);
    goto corral_source_split_12158;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2515} $i15 := be_setup($p0);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    call {:si_unique_call 2516} {:cexpr "status"} boogie_si_record_i32($i15);
    goto corral_source_split_12159;

  corral_source_split_12159:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_12160;

  corral_source_split_12160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_12164;

  corral_source_split_12164:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_12165;

  corral_source_split_12165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2517} $i19 := netif_running($p18);
    goto corral_source_split_12166;

  corral_source_split_12166:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i8($i19);
    call {:si_unique_call 2518} {:cexpr "tmp___0"} boogie_si_record_i8($i20);
    goto corral_source_split_12167;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_12168;

  corral_source_split_12168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12178;

  corral_source_split_12178:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_12179;

  corral_source_split_12179:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_12180;

  corral_source_split_12180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2521} vslice_dummy_var_540 := dev_err.ref.ref($p28, .str.147);
    goto corral_source_split_12181;

  corral_source_split_12181:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_12183;

  corral_source_split_12183:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_12170;

  corral_source_split_12170:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_12171;

  corral_source_split_12171:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_12172;

  corral_source_split_12172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2519} $i24 := be_open($p23);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    call {:si_unique_call 2520} {:cexpr "status"} boogie_si_record_i32($i24);
    goto corral_source_split_12173;

  corral_source_split_12173:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_12174;

  corral_source_split_12174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_12176;

  corral_source_split_12176:
    assume {:verifier.code 0} true;
    $i3 := $i24;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12138;

  corral_source_split_12138:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364012, 1));
    goto corral_source_split_12139;

  corral_source_split_12139:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_12140;

  corral_source_split_12140:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i32);
    goto corral_source_split_12141;

  corral_source_split_12141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i30 := $i3;
    goto $bb17;

  $bb18:
    assume $i33 == 1;
    goto corral_source_split_12185;

  corral_source_split_12185:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12186;

  corral_source_split_12186:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_12187;

  corral_source_split_12187:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_12188;

  corral_source_split_12188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2522} vslice_dummy_var_541 := dev_err.ref.ref($p36, .str.148);
    goto corral_source_split_12189;

  corral_source_split_12189:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_12162;

  corral_source_split_12162:
    assume {:verifier.code 0} true;
    $i3 := $i15;
    goto $bb3;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_12149;

  corral_source_split_12149:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_12150;

  corral_source_split_12150:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_12151;

  corral_source_split_12151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2513} vslice_dummy_var_538 := be_close($p10);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_12152;

  corral_source_split_12152:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_448:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_12136;

  corral_source_split_12136:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;
}



const lancer_cmd_get_pport_stats: ref;

axiom lancer_cmd_get_pport_stats == $sub.ref(0, 735022);

procedure lancer_cmd_get_pport_stats($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation lancer_cmd_get_pport_stats($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i8;
  var $i21: i16;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i12: i32;
  var $p29: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12191;

  corral_source_split_12191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2523} $i2 := be_cmd_allowed($p0, 18, 3);
    goto corral_source_split_12192;

  corral_source_split_12192:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 2524} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_12193;

  corral_source_split_12193:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_12194;

  corral_source_split_12194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12198;

  corral_source_split_12198:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_12199;

  corral_source_split_12199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_12205;

  corral_source_split_12205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2525} spin_lock_bh($p8);
    goto corral_source_split_12206;

  corral_source_split_12206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2526} $p9 := wrb_from_mccq($p0);
    goto corral_source_split_12207;

  corral_source_split_12207:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_12208;

  corral_source_split_12208:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_12209;

  corral_source_split_12209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12217;

  corral_source_split_12217:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_12218;

  corral_source_split_12218:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_12219;

  corral_source_split_12219:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 672)), $mul.ref(0, 1));
    goto corral_source_split_12220;

  corral_source_split_12220:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12221;

  corral_source_split_12221:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_12222;

  corral_source_split_12222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2528} be_wrb_cmd_hdr_prepare($p16, 3, 18, $i18, $p9, $p1);
    goto corral_source_split_12223;

  corral_source_split_12223:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364232, 1));
    goto corral_source_split_12224;

  corral_source_split_12224:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_12225;

  corral_source_split_12225:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i16($i20);
    goto corral_source_split_12226;

  corral_source_split_12226:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p15, $mul.ref(0, 672)), $mul.ref(16, 1));
    goto corral_source_split_12227;

  corral_source_split_12227:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_12228;

  corral_source_split_12228:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_12229;

  corral_source_split_12229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p24, $i21);
    goto corral_source_split_12230;

  corral_source_split_12230:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p15, $mul.ref(0, 672)), $mul.ref(16, 1));
    goto corral_source_split_12231;

  corral_source_split_12231:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_12232;

  corral_source_split_12232:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_12233;

  corral_source_split_12233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, 0);
    goto corral_source_split_12234;

  corral_source_split_12234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2529} be_mcc_notify($p0);
    goto corral_source_split_12235;

  corral_source_split_12235:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364040, 1));
    goto corral_source_split_12236;

  corral_source_split_12236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, 1);
    goto corral_source_split_12237;

  corral_source_split_12237:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_12213;

  corral_source_split_12213:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_12214;

  corral_source_split_12214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2527} spin_unlock_bh($p29);
    goto corral_source_split_12215;

  corral_source_split_12215:
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_12203;

  corral_source_split_12203:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_12211;

  corral_source_split_12211:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 16);
    goto $bb10;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_12201;

  corral_source_split_12201:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 1);
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_12196;

  corral_source_split_12196:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const be_cmd_get_stats: ref;

axiom be_cmd_get_stats == $sub.ref(0, 736054);

procedure be_cmd_get_stats($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_get_stats($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i6: i32;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12239;

  corral_source_split_12239:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_12240;

  corral_source_split_12240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2530} spin_lock_bh($p2);
    goto corral_source_split_12241;

  corral_source_split_12241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2531} $p3 := wrb_from_mccq($p0);
    goto corral_source_split_12242;

  corral_source_split_12242:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_12243;

  corral_source_split_12243:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_12244;

  corral_source_split_12244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12252;

  corral_source_split_12252:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_12253;

  corral_source_split_12253:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_12254;

  corral_source_split_12254:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12255;

  corral_source_split_12255:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_12256;

  corral_source_split_12256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2533} be_wrb_cmd_hdr_prepare($p9, 3, 4, $i11, $p3, $p1);
    goto corral_source_split_12257;

  corral_source_split_12257:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12258;

  corral_source_split_12258:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_12259;

  corral_source_split_12259:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_12260;

  corral_source_split_12260:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_12261;

  corral_source_split_12261:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_12262;

  corral_source_split_12262:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 529);
    goto corral_source_split_12263;

  corral_source_split_12263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2534} be_mcc_notify($p0);
    goto corral_source_split_12277;

  corral_source_split_12277:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364040, 1));
    goto corral_source_split_12278;

  corral_source_split_12278:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 1);
    goto corral_source_split_12279;

  corral_source_split_12279:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12248;

  corral_source_split_12248:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_12249;

  corral_source_split_12249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2532} spin_unlock_bh($p26);
    goto corral_source_split_12250;

  corral_source_split_12250:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_12265;

  corral_source_split_12265:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12266;

  corral_source_split_12266:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_12267;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_12268;

  corral_source_split_12268:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_12269;

  corral_source_split_12269:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_12270;

  corral_source_split_12270:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 1792);
    goto corral_source_split_12271;

  corral_source_split_12271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb7;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_12273;

  corral_source_split_12273:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_12274;

  corral_source_split_12274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 1);
    goto corral_source_split_12275;

  corral_source_split_12275:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_12246;

  corral_source_split_12246:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 16);
    goto $bb3;
}



const be_cmd_get_die_temperature: ref;

axiom be_cmd_get_die_temperature == $sub.ref(0, 737086);

procedure be_cmd_get_die_temperature($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_get_die_temperature($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12281;

  corral_source_split_12281:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_12282;

  corral_source_split_12282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2535} spin_lock_bh($p1);
    goto corral_source_split_12283;

  corral_source_split_12283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2536} $p2 := wrb_from_mccq($p0);
    goto corral_source_split_12284;

  corral_source_split_12284:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_12285;

  corral_source_split_12285:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_12286;

  corral_source_split_12286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2538} $p5 := embedded_payload($p2);
    goto corral_source_split_12293;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_12294;

  corral_source_split_12294:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12295;

  corral_source_split_12295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2539} be_wrb_cmd_hdr_prepare($p7, 1, 121, 24, $p2, $0.ref);
    goto corral_source_split_12296;

  corral_source_split_12296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2540} be_mcc_notify($p0);
    goto corral_source_split_12297;

  corral_source_split_12297:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_12290;

  corral_source_split_12290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2537} spin_unlock_bh($p8);
    goto corral_source_split_12291;

  corral_source_split_12291:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 16);
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_12288;

  corral_source_split_12288:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const be_eqd_update: ref;

axiom be_eqd_update == $sub.ref(0, 738118);

procedure be_eqd_update($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_eqd_update($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i8;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $i43: i1;
  var $i44: i8;
  var $i45: i1;
  var $i46: i64;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i18: i32;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $p74: ref;
  var $i75: i16;
  var $i76: i32;
  var $p78: ref;
  var vslice_dummy_var_542: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12299;

  corral_source_split_12299:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136368, 1));
    goto corral_source_split_12300;

  corral_source_split_12300:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_12301;

  corral_source_split_12301:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 272)), $mul.ref(92, 1));
    goto corral_source_split_12302;

  corral_source_split_12302:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_12303;

  corral_source_split_12303:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i64($i5);
    goto corral_source_split_12304;

  corral_source_split_12304:
    assume {:verifier.code 0} true;
    goto corral_source_split_12305;

  corral_source_split_12305:
    assume {:verifier.code 0} true;
    goto corral_source_split_12306;

  corral_source_split_12306:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, jiffies);
    call {:si_unique_call 2541} {:cexpr "now"} boogie_si_record_i64($i9);
    $p10 := $add.ref($add.ref($add.ref($p3, $mul.ref($i6, 24760)), $mul.ref(24688, 1)), $mul.ref(24, 1));
    goto corral_source_split_12307;

  corral_source_split_12307:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_12308;

  corral_source_split_12308:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64($i9, $i11);
    call {:si_unique_call 2542} {:cexpr "delta"} boogie_si_record_i64($i12);
    goto corral_source_split_12309;

  corral_source_split_12309:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 272)), $mul.ref(72, 1));
    goto corral_source_split_12310;

  corral_source_split_12310:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_12311;

  corral_source_split_12311:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_12312;

  corral_source_split_12312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    goto corral_source_split_12314;

  corral_source_split_12314:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 272)), $mul.ref(84, 1));
    goto corral_source_split_12315;

  corral_source_split_12315:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    call {:si_unique_call 2543} {:cexpr "eqd"} boogie_si_record_i32($i17);
    goto corral_source_split_12316;

  corral_source_split_12316:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12318;

  corral_source_split_12318:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 272)), $mul.ref(88, 1));
    goto corral_source_split_12319;

  corral_source_split_12319:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_12320;

  corral_source_split_12320:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, $i18);
    goto corral_source_split_12321;

  corral_source_split_12321:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb28:
    assume $i72 == 1;
    goto corral_source_split_12393;

  corral_source_split_12393:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(28, 1));
    goto corral_source_split_12394;

  corral_source_split_12394:
    assume {:verifier.code 0} true;
    $i75 := $load.i16($M.0, $p74);
    goto corral_source_split_12395;

  corral_source_split_12395:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i75);
    goto corral_source_split_12396;

  corral_source_split_12396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2552} vslice_dummy_var_542 := be_cmd_modify_eqd($p0, $i76, $i18);
    goto corral_source_split_12397;

  corral_source_split_12397:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 272)), $mul.ref(88, 1));
    goto corral_source_split_12398;

  corral_source_split_12398:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i18);
    goto corral_source_split_12399;

  corral_source_split_12399:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb1:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 272)), $mul.ref(92, 1));
    goto corral_source_split_12323;

  corral_source_split_12323:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_12324;

  corral_source_split_12324:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_12325;

  corral_source_split_12325:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_12326;

  corral_source_split_12326:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_12327;

  corral_source_split_12327:
    assume {:verifier.code 0} true;
    $i24 := $uge.i32($i21, $i23);
    goto corral_source_split_12328;

  corral_source_split_12328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136368, 1));
    goto corral_source_split_12332;

  corral_source_split_12332:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_12333;

  corral_source_split_12333:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 272)), $mul.ref(92, 1));
    goto corral_source_split_12334;

  corral_source_split_12334:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_12335;

  corral_source_split_12335:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i64($i28);
    goto corral_source_split_12336;

  corral_source_split_12336:
    assume {:verifier.code 0} true;
    goto corral_source_split_12337;

  corral_source_split_12337:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p26, $mul.ref($i29, 24760)), $mul.ref(24688, 1)), $mul.ref(24, 1));
    goto corral_source_split_12338;

  corral_source_split_12338:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_12339;

  corral_source_split_12339:
    assume {:verifier.code 0} true;
    $i34 := $sub.i64($i9, $i33);
    goto corral_source_split_12340;

  corral_source_split_12340:
    assume {:verifier.code 0} true;
    $i35 := $slt.i64($i34, 0);
    goto corral_source_split_12341;

  corral_source_split_12341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i37 := $ule.i64($i12, 249);
    goto corral_source_split_12346;

  corral_source_split_12346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    call $p38, $i39, $p40, $i41, $p42, $i43, $i44, $i45, $i46 := be_eqd_update_loop_$bb15($p26, $i29, $p38, $i39, $p40, $i41, $p42, $i43, $i44, $i45, $i46);
    goto $bb15_last;

  corral_source_split_12350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2544} $i39 := u64_stats_fetch_begin_bh($p38);
    call {:si_unique_call 2545} {:cexpr "start"} boogie_si_record_i32($i39);
    $p40 := $add.ref($add.ref($add.ref($p26, $mul.ref($i29, 24760)), $mul.ref(24688, 1)), $mul.ref(8, 1));
    goto corral_source_split_12351;

  corral_source_split_12351:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    call {:si_unique_call 2546} {:cexpr "pkts"} boogie_si_record_i64($i41);
    $p42 := $add.ref($add.ref($add.ref($p26, $mul.ref($i29, 24760)), $mul.ref(24688, 1)), $mul.ref(60, 1));
    goto corral_source_split_12352;

  corral_source_split_12352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2547} $i43 := u64_stats_fetch_retry_bh($p42, $i39);
    goto corral_source_split_12353;

  corral_source_split_12353:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i8($i43);
    call {:si_unique_call 2548} {:cexpr "tmp"} boogie_si_record_i8($i44);
    goto corral_source_split_12354;

  corral_source_split_12354:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i8.i1($i44);
    goto corral_source_split_12355;

  corral_source_split_12355:
    assume {:verifier.code 0} true;
    $i46 := $i41;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    $p47 := $add.ref($add.ref($add.ref($p26, $mul.ref($i29, 24760)), $mul.ref(24688, 1)), $mul.ref(16, 1));
    goto corral_source_split_12357;

  corral_source_split_12357:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.0, $p47);
    goto corral_source_split_12358;

  corral_source_split_12358:
    assume {:verifier.code 0} true;
    $i49 := $sub.i64($i46, $i48);
    goto corral_source_split_12359;

  corral_source_split_12359:
    assume {:verifier.code 0} true;
    $i50 := $udiv.i64($i12, 250);
    goto corral_source_split_12360;

  corral_source_split_12360:
    assume {:verifier.code 0} true;
    $i51 := $udiv.i64($i49, $i50);
    goto corral_source_split_12361;

  corral_source_split_12361:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i64.i32($i51);
    $p53 := $add.ref($add.ref($add.ref($p26, $mul.ref($i29, 24760)), $mul.ref(24688, 1)), $mul.ref(56, 1));
    goto corral_source_split_12362;

  corral_source_split_12362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    $p54 := $add.ref($add.ref($add.ref($p26, $mul.ref($i29, 24760)), $mul.ref(24688, 1)), $mul.ref(16, 1));
    goto corral_source_split_12363;

  corral_source_split_12363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p54, $i46);
    $p55 := $add.ref($add.ref($add.ref($p26, $mul.ref($i29, 24760)), $mul.ref(24688, 1)), $mul.ref(24, 1));
    goto corral_source_split_12364;

  corral_source_split_12364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p55, $i9);
    $p56 := $add.ref($add.ref($add.ref($p26, $mul.ref($i29, 24760)), $mul.ref(24688, 1)), $mul.ref(56, 1));
    goto corral_source_split_12365;

  corral_source_split_12365:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_12366;

  corral_source_split_12366:
    assume {:verifier.code 0} true;
    $i58 := $udiv.i32($i57, 110000);
    goto corral_source_split_12367;

  corral_source_split_12367:
    assume {:verifier.code 0} true;
    $i59 := $shl.i32($i58, 3);
    call {:si_unique_call 2549} {:cexpr "eqd"} boogie_si_record_i32($i59);
    goto corral_source_split_12368;

  corral_source_split_12368:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 272)), $mul.ref(80, 1));
    goto corral_source_split_12369;

  corral_source_split_12369:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    call {:si_unique_call 2550} {:cexpr "_min2"} boogie_si_record_i32($i61);
    goto corral_source_split_12370;

  corral_source_split_12370:
    assume {:verifier.code 0} true;
    $i62 := $ult.i32($i59, $i61);
    goto corral_source_split_12371;

  corral_source_split_12371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i62 == 1);
    goto corral_source_split_12375;

  corral_source_split_12375:
    assume {:verifier.code 0} true;
    $i63 := $i61;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_12377;

  corral_source_split_12377:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 272)), $mul.ref(76, 1));
    goto corral_source_split_12378;

  corral_source_split_12378:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    call {:si_unique_call 2551} {:cexpr "_max2"} boogie_si_record_i32($i65);
    goto corral_source_split_12379;

  corral_source_split_12379:
    assume {:verifier.code 0} true;
    $i66 := $ugt.i32($i63, $i65);
    goto corral_source_split_12380;

  corral_source_split_12380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i66 == 1);
    goto corral_source_split_12384;

  corral_source_split_12384:
    assume {:verifier.code 0} true;
    $i67 := $i65;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_12386;

  corral_source_split_12386:
    assume {:verifier.code 0} true;
    $i68 := $ule.i32($i67, 9);
    goto corral_source_split_12387;

  corral_source_split_12387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i69 := $i67;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_12391;

  corral_source_split_12391:
    assume {:verifier.code 0} true;
    $i18 := $i69;
    goto $bb3;

  $bb25:
    assume $i68 == 1;
    goto corral_source_split_12389;

  corral_source_split_12389:
    assume {:verifier.code 0} true;
    $i69 := 0;
    goto $bb27;

  $bb22:
    assume $i66 == 1;
    goto corral_source_split_12382;

  corral_source_split_12382:
    assume {:verifier.code 0} true;
    $i67 := $i63;
    goto $bb24;

  $bb19:
    assume $i62 == 1;
    goto corral_source_split_12373;

  corral_source_split_12373:
    assume {:verifier.code 0} true;
    $i63 := $i59;
    goto $bb21;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb16_dummy;

  $bb12:
    assume $i37 == 1;
    goto corral_source_split_12348;

  corral_source_split_12348:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb9:
    assume $i35 == 1;
    $p36 := $add.ref($add.ref($add.ref($p26, $mul.ref($i29, 24760)), $mul.ref(24688, 1)), $mul.ref(24, 1));
    goto corral_source_split_12343;

  corral_source_split_12343:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p36, $i9);
    goto corral_source_split_12344;

  corral_source_split_12344:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_12330;

  corral_source_split_12330:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb16_dummy:
    assume false;
    return;

  $bb15_last:
    $p38 := $add.ref($add.ref($add.ref($p26, $mul.ref($i29, 24760)), $mul.ref(24688, 1)), $mul.ref(60, 1));
    goto corral_source_split_12350;
}



const u64_stats_fetch_begin_bh: ref;

axiom u64_stats_fetch_begin_bh == $sub.ref(0, 739150);

procedure u64_stats_fetch_begin_bh($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation u64_stats_fetch_begin_bh($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12401;

  corral_source_split_12401:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const u64_stats_fetch_retry_bh: ref;

axiom u64_stats_fetch_retry_bh == $sub.ref(0, 740182);

procedure u64_stats_fetch_retry_bh($p0: ref, $i1: i32) returns ($r: i1);
  free requires assertsPassed;



implementation u64_stats_fetch_retry_bh($p0: ref, $i1: i32) returns ($r: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2553} {:cexpr "u64_stats_fetch_retry_bh:arg:start"} boogie_si_record_i32($i1);
    goto corral_source_split_12403;

  corral_source_split_12403:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const be_cmd_modify_eqd: ref;

axiom be_cmd_modify_eqd == $sub.ref(0, 741214);

procedure be_cmd_modify_eqd($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_modify_eqd($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p14: ref;
  var $p17: ref;
  var $p20: ref;
  var $i7: i32;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2554} {:cexpr "be_cmd_modify_eqd:arg:eq_id"} boogie_si_record_i32($i1);
    call {:si_unique_call 2555} {:cexpr "be_cmd_modify_eqd:arg:eqd"} boogie_si_record_i32($i2);
    goto corral_source_split_12405;

  corral_source_split_12405:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_12406;

  corral_source_split_12406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2556} spin_lock_bh($p3);
    goto corral_source_split_12407;

  corral_source_split_12407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2557} $p4 := wrb_from_mccq($p0);
    goto corral_source_split_12408;

  corral_source_split_12408:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_12409;

  corral_source_split_12409:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_12410;

  corral_source_split_12410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2559} $p8 := embedded_payload($p4);
    goto corral_source_split_12418;

  corral_source_split_12418:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_12419;

  corral_source_split_12419:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 116)), $mul.ref(0, 1));
    goto corral_source_split_12420;

  corral_source_split_12420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2560} be_wrb_cmd_hdr_prepare($p10, 1, 41, 116, $p4, $0.ref);
    goto corral_source_split_12421;

  corral_source_split_12421:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref(0, 116)), $mul.ref(16, 1));
    goto corral_source_split_12422;

  corral_source_split_12422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 1);
    goto corral_source_split_12423;

  corral_source_split_12423:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p9, $mul.ref(0, 116)), $mul.ref(20, 1)), $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_12424;

  corral_source_split_12424:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i1);
    goto corral_source_split_12425;

  corral_source_split_12425:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p9, $mul.ref(0, 116)), $mul.ref(20, 1)), $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_12426;

  corral_source_split_12426:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 0);
    goto corral_source_split_12427;

  corral_source_split_12427:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p9, $mul.ref(0, 116)), $mul.ref(20, 1)), $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_12428;

  corral_source_split_12428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i2);
    goto corral_source_split_12429;

  corral_source_split_12429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2561} be_mcc_notify($p0);
    goto corral_source_split_12430;

  corral_source_split_12430:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12414;

  corral_source_split_12414:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_12415;

  corral_source_split_12415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2558} spin_unlock_bh($p21);
    goto corral_source_split_12416;

  corral_source_split_12416:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_12412;

  corral_source_split_12412:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 16);
    goto $bb3;
}



const be_cmd_get_cntl_attributes: ref;

axiom be_cmd_get_cntl_attributes == $sub.ref(0, 742246);

procedure be_cmd_get_cntl_attributes($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.0, $M.25, $CurrAddr, assertsPassed, $M.26;



implementation be_cmd_get_cntl_attributes($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i64;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p42: ref;
  var $i43: i8;
  var $p44: ref;
  var $i27: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i64;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i8: i32;
  var cmdloc_dummy_var_345: [ref]i8;
  var cmdloc_dummy_var_346: [ref]i8;
  var vslice_dummy_var_543: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2562} $p1 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_12432;

  corral_source_split_12432:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64(16, 560);
    goto corral_source_split_12433;

  corral_source_split_12433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_12437;

  corral_source_split_12437:
    assume {:verifier.code 0} true;
    $i3 := 560;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12439;

  corral_source_split_12439:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    call {:si_unique_call 2563} {:cexpr "payload_len"} boogie_si_record_i32($i4);
    goto corral_source_split_12440;

  corral_source_split_12440:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_12441;

  corral_source_split_12441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2564} $i6 := ldv_mutex_lock_interruptible_36($p5);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    call {:si_unique_call 2565} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_12442;

  corral_source_split_12442:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_12443;

  corral_source_split_12443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_12449;

  corral_source_split_12449:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_345 := $M.41;
    call {:si_unique_call 2566} cmdloc_dummy_var_346 := $memset.i8(cmdloc_dummy_var_345, $p9, 0, 24, $zext.i32.i64(8), 0 == 1);
    $M.41 := cmdloc_dummy_var_346;
    goto corral_source_split_12450;

  corral_source_split_12450:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12451;

  corral_source_split_12451:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p10, 560);
    goto corral_source_split_12452;

  corral_source_split_12452:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12453;

  corral_source_split_12453:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_12454;

  corral_source_split_12454:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12455;

  corral_source_split_12455:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.41, $p13);
    goto corral_source_split_12456;

  corral_source_split_12456:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i14);
    goto corral_source_split_12457;

  corral_source_split_12457:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_12458;

  corral_source_split_12458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2567} $p17 := pci_alloc_consistent($p12, $i15, $p16);
    goto corral_source_split_12459;

  corral_source_split_12459:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12460;

  corral_source_split_12460:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p18, $p17);
    goto corral_source_split_12461;

  corral_source_split_12461:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12462;

  corral_source_split_12462:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.41, $p19);
    goto corral_source_split_12463;

  corral_source_split_12463:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_12464;

  corral_source_split_12464:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_12465;

  corral_source_split_12465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2570} $p28 := wrb_from_mbox($p0);
    goto corral_source_split_12481;

  corral_source_split_12481:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_12482;

  corral_source_split_12482:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_12483;

  corral_source_split_12483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12487;

  corral_source_split_12487:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.41, $p31);
    goto corral_source_split_12488;

  corral_source_split_12488:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_12489;

  corral_source_split_12489:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12490;

  corral_source_split_12490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2571} be_wrb_cmd_hdr_prepare($p34, 1, 32, $i4, $p28, $p1);
    goto corral_source_split_12491;

  corral_source_split_12491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2572} $i35 := be_mbox_notify_wait($p0);
    call {:si_unique_call 2573} {:cexpr "status"} boogie_si_record_i32($i35);
    goto corral_source_split_12492;

  corral_source_split_12492:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_12493;

  corral_source_split_12493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i27 := $i35;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_12473;

  corral_source_split_12473:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_12474;

  corral_source_split_12474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2569} ldv_mutex_unlock_37($p45);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_12475;

  corral_source_split_12475:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12476;

  corral_source_split_12476:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.41, $p46);
    goto corral_source_split_12477;

  corral_source_split_12477:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_12478;

  corral_source_split_12478:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_12479;

  corral_source_split_12479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i8 := $i27;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_12447;

  corral_source_split_12447:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb18:
    assume $i49 == 1;
    goto corral_source_split_12505;

  corral_source_split_12505:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12506;

  corral_source_split_12506:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_12507;

  corral_source_split_12507:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12508;

  corral_source_split_12508:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.41, $p52);
    goto corral_source_split_12509;

  corral_source_split_12509:
    assume {:verifier.code 0} true;
    $i54 := $zext.i32.i64($i53);
    goto corral_source_split_12510;

  corral_source_split_12510:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12511;

  corral_source_split_12511:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.41, $p55);
    goto corral_source_split_12512;

  corral_source_split_12512:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_12513;

  corral_source_split_12513:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.41, $p57);
    goto corral_source_split_12514;

  corral_source_split_12514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2574} pci_free_consistent($p51, $i54, $p56, $i58);
    goto corral_source_split_12515;

  corral_source_split_12515:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_463:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i36 == 1;
    goto corral_source_split_12495;

  corral_source_split_12495:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12496;

  corral_source_split_12496:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.41, $p37);
    goto corral_source_split_12497;

  corral_source_split_12497:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_12498;

  corral_source_split_12498:
    assume {:verifier.code 0} true;
    goto corral_source_split_12499;

  corral_source_split_12499:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p39, $mul.ref(16, 544)), $mul.ref(0, 1)), $mul.ref(447, 1));
    goto corral_source_split_12500;

  corral_source_split_12500:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_12501;

  corral_source_split_12501:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364232, 1));
    goto corral_source_split_12502;

  corral_source_split_12502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, $i43);
    goto corral_source_split_12503;

  corral_source_split_12503:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i30 == 1;
    goto corral_source_split_12485;

  corral_source_split_12485:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 16);
    goto $bb10;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_12467;

  corral_source_split_12467:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12468;

  corral_source_split_12468:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_12469;

  corral_source_split_12469:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_12470;

  corral_source_split_12470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2568} vslice_dummy_var_543 := dev_err.ref.ref($p25, .str.19);
    goto corral_source_split_12471;

  corral_source_split_12471:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 12);
    goto $bb10;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_12445;

  corral_source_split_12445:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb6;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_12435;

  corral_source_split_12435:
    assume {:verifier.code 0} true;
    $i3 := 16;
    goto $bb3;
}



const be_cmd_get_acpi_wol_cap: ref;

axiom be_cmd_get_acpi_wol_cap == $sub.ref(0, 743278);

procedure be_cmd_get_acpi_wol_cap($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.0, $M.25, $CurrAddr, assertsPassed, $M.26;



implementation be_cmd_get_acpi_wol_cap($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i8;
  var $p51: ref;
  var $i29: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i7: i32;
  var cmdloc_dummy_var_347: [ref]i8;
  var cmdloc_dummy_var_348: [ref]i8;
  var vslice_dummy_var_544: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2575} $p1 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_12517;

  corral_source_split_12517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2576} $i2 := be_cmd_allowed($p0, 12, 3);
    goto corral_source_split_12518;

  corral_source_split_12518:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 2577} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_12519;

  corral_source_split_12519:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_12520;

  corral_source_split_12520:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12524;

  corral_source_split_12524:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_12525;

  corral_source_split_12525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_12531;

  corral_source_split_12531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2578} $i9 := ldv_mutex_lock_interruptible_40($p8);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    call {:si_unique_call 2579} {:cexpr "tmp___1"} boogie_si_record_i32($i9);
    goto corral_source_split_12532;

  corral_source_split_12532:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_12533;

  corral_source_split_12533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_12537;

  corral_source_split_12537:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_347 := $M.41;
    call {:si_unique_call 2580} cmdloc_dummy_var_348 := $memset.i8(cmdloc_dummy_var_347, $p11, 0, 24, $zext.i32.i64(8), 0 == 1);
    $M.41 := cmdloc_dummy_var_348;
    goto corral_source_split_12538;

  corral_source_split_12538:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12539;

  corral_source_split_12539:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p12, 1204);
    goto corral_source_split_12540;

  corral_source_split_12540:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12541;

  corral_source_split_12541:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_12542;

  corral_source_split_12542:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12543;

  corral_source_split_12543:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.41, $p15);
    goto corral_source_split_12544;

  corral_source_split_12544:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_12545;

  corral_source_split_12545:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_12546;

  corral_source_split_12546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2581} $p19 := pci_alloc_consistent($p14, $i17, $p18);
    goto corral_source_split_12547;

  corral_source_split_12547:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12548;

  corral_source_split_12548:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p20, $p19);
    goto corral_source_split_12549;

  corral_source_split_12549:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12550;

  corral_source_split_12550:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.41, $p21);
    goto corral_source_split_12551;

  corral_source_split_12551:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_12552;

  corral_source_split_12552:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_12553;

  corral_source_split_12553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2584} $p30 := wrb_from_mbox($p0);
    goto corral_source_split_12569;

  corral_source_split_12569:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_12570;

  corral_source_split_12570:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_12571;

  corral_source_split_12571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12575;

  corral_source_split_12575:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.41, $p33);
    goto corral_source_split_12576;

  corral_source_split_12576:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_12577;

  corral_source_split_12577:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 1204)), $mul.ref(0, 1));
    goto corral_source_split_12578;

  corral_source_split_12578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2585} be_wrb_cmd_hdr_prepare($p36, 3, 12, 1204, $p30, $p1);
    goto corral_source_split_12579;

  corral_source_split_12579:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 1204)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_12580;

  corral_source_split_12580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, 1);
    goto corral_source_split_12581;

  corral_source_split_12581:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p35, $mul.ref(0, 1204)), $mul.ref(18, 1));
    goto corral_source_split_12582;

  corral_source_split_12582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, 2);
    goto corral_source_split_12583;

  corral_source_split_12583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2586} $i40 := be_mbox_notify_wait($p0);
    call {:si_unique_call 2587} {:cexpr "status"} boogie_si_record_i32($i40);
    goto corral_source_split_12584;

  corral_source_split_12584:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_12585;

  corral_source_split_12585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i29 := $i40;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_12561;

  corral_source_split_12561:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_12562;

  corral_source_split_12562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2583} ldv_mutex_unlock_41($p52);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_12563;

  corral_source_split_12563:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12564;

  corral_source_split_12564:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.41, $p53);
    goto corral_source_split_12565;

  corral_source_split_12565:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_12566;

  corral_source_split_12566:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_12567;

  corral_source_split_12567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i7 := $i29;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_12529;

  corral_source_split_12529:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb24:
    assume $i56 == 1;
    goto corral_source_split_12602;

  corral_source_split_12602:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12603;

  corral_source_split_12603:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_12604;

  corral_source_split_12604:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12605;

  corral_source_split_12605:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.41, $p59);
    goto corral_source_split_12606;

  corral_source_split_12606:
    assume {:verifier.code 0} true;
    $i61 := $zext.i32.i64($i60);
    goto corral_source_split_12607;

  corral_source_split_12607:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12608;

  corral_source_split_12608:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.41, $p62);
    goto corral_source_split_12609;

  corral_source_split_12609:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_12610;

  corral_source_split_12610:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.41, $p64);
    goto corral_source_split_12611;

  corral_source_split_12611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2588} pci_free_consistent($p58, $i61, $p63, $i65);
    goto corral_source_split_12612;

  corral_source_split_12612:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i41 == 1;
    goto corral_source_split_12587;

  corral_source_split_12587:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12588;

  corral_source_split_12588:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.41, $p42);
    goto corral_source_split_12589;

  corral_source_split_12589:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_12590;

  corral_source_split_12590:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p44, $mul.ref(0, 1204)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_12591;

  corral_source_split_12591:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_12592;

  corral_source_split_12592:
    assume {:verifier.code 0} true;
    $i48 := $ult.i32($i47, 1204);
    goto corral_source_split_12593;

  corral_source_split_12593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p44, $mul.ref(0, 1204)), $mul.ref(18, 1));
    goto corral_source_split_12597;

  corral_source_split_12597:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_12598;

  corral_source_split_12598:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364268, 1));
    goto corral_source_split_12599;

  corral_source_split_12599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, $i50);
    goto corral_source_split_12600;

  corral_source_split_12600:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i48 == 1;
    goto corral_source_split_12595;

  corral_source_split_12595:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 1);
    goto $bb13;

  $bb15:
    assume $i32 == 1;
    goto corral_source_split_12573;

  corral_source_split_12573:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 16);
    goto $bb13;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_12555;

  corral_source_split_12555:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12556;

  corral_source_split_12556:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_12557;

  corral_source_split_12557:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_12558;

  corral_source_split_12558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2582} vslice_dummy_var_544 := dev_err.ref.ref($p27, .str.19);
    goto corral_source_split_12559;

  corral_source_split_12559:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 12);
    goto $bb13;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_12535;

  corral_source_split_12535:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 1);
    goto $bb6;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_12527;

  corral_source_split_12527:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 1);
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_12522;

  corral_source_split_12522:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const be_is_wol_excluded: ref;

axiom be_is_wol_excluded == $sub.ref(0, 744310);

procedure be_is_wol_excluded($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation be_is_wol_excluded($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12614;

  corral_source_split_12614:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12615;

  corral_source_split_12615:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_12616;

  corral_source_split_12616:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_12617;

  corral_source_split_12617:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_12618;

  corral_source_split_12618:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_12619;

  corral_source_split_12619:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_12620;

  corral_source_split_12620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(66, 1));
    goto corral_source_split_12626;

  corral_source_split_12626:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_12627;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 58946);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 58962);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, 58962);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12624;

  corral_source_split_12624:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb8:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 58946);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb13;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i10, 58898);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i10, 58898);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb13;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb20;

  $bb17:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i10, 58882);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb13;

  $bb22:
    assume $i17 == 1;
    goto corral_source_split_12629;

  corral_source_split_12629:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_12622;

  corral_source_split_12622:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;
}



const be_is_wol_supported: ref;

axiom be_is_wol_supported == $sub.ref(0, 745342);

procedure be_is_wol_supported($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation be_is_wol_supported($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12631;

  corral_source_split_12631:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364268, 1));
    goto corral_source_split_12632;

  corral_source_split_12632:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_12633;

  corral_source_split_12633:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_12634;

  corral_source_split_12634:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 1);
    goto corral_source_split_12635;

  corral_source_split_12635:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_12636;

  corral_source_split_12636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_12652;

  corral_source_split_12652:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_12653;

  corral_source_split_12653:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_12638;

  corral_source_split_12638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2589} $i6 := be_is_wol_excluded($p0);
    goto corral_source_split_12639;

  corral_source_split_12639:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 2590} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_12640;

  corral_source_split_12640:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_12641;

  corral_source_split_12641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_12645;

  corral_source_split_12645:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_12646;

  corral_source_split_12646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_12650;

  corral_source_split_12650:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb9;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_12648;

  corral_source_split_12648:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb8;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_12643;

  corral_source_split_12643:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb5;
}



const be_get_fw_log_level: ref;

axiom be_get_fw_log_level == $sub.ref(0, 746374);

procedure be_get_fw_log_level($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.0, $CurrAddr, $M.25, assertsPassed, $M.26;



implementation be_get_fw_log_level($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i48: i64;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i1;
  var $i57: i64;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $i46: i32;
  var $i47: i32;
  var $i68: i32;
  var $i45: i32;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i64;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i33: i32;
  var $i14: i32;
  var cmdloc_dummy_var_349: [ref]i8;
  var cmdloc_dummy_var_350: [ref]i8;
  var vslice_dummy_var_545: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2591} $p1 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_12655;

  corral_source_split_12655:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12656;

  corral_source_split_12656:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_12657;

  corral_source_split_12657:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_12658;

  corral_source_split_12658:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_12659;

  corral_source_split_12659:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_12660;

  corral_source_split_12660:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 57888);
    goto corral_source_split_12661;

  corral_source_split_12661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_12663;

  corral_source_split_12663:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12664;

  corral_source_split_12664:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_12665;

  corral_source_split_12665:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_12666;

  corral_source_split_12666:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_12667;

  corral_source_split_12667:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_12668;

  corral_source_split_12668:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 57896);
    goto corral_source_split_12669;

  corral_source_split_12669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p1);
    goto corral_source_split_12673;

  corral_source_split_12673:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_349 := $M.41;
    call {:si_unique_call 2592} cmdloc_dummy_var_350 := $memset.i8(cmdloc_dummy_var_349, $p15, 0, 24, $zext.i32.i64(8), 0 == 1);
    $M.41 := cmdloc_dummy_var_350;
    goto corral_source_split_12674;

  corral_source_split_12674:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12675;

  corral_source_split_12675:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p16, 2844);
    goto corral_source_split_12676;

  corral_source_split_12676:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12677;

  corral_source_split_12677:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_12678;

  corral_source_split_12678:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12679;

  corral_source_split_12679:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.41, $p19);
    goto corral_source_split_12680;

  corral_source_split_12680:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i20);
    goto corral_source_split_12681;

  corral_source_split_12681:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_12682;

  corral_source_split_12682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2593} $p23 := pci_alloc_consistent($p18, $i21, $p22);
    goto corral_source_split_12683;

  corral_source_split_12683:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12684;

  corral_source_split_12684:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p24, $p23);
    goto corral_source_split_12685;

  corral_source_split_12685:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12686;

  corral_source_split_12686:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.41, $p25);
    goto corral_source_split_12687;

  corral_source_split_12687:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_12688;

  corral_source_split_12688:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_12689;

  corral_source_split_12689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2595} $i34 := be_cmd_get_ext_fat_capabilites($p0, $p1);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    call {:si_unique_call 2596} {:cexpr "status"} boogie_si_record_i32($i34);
    goto corral_source_split_12699;

  corral_source_split_12699:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_12700;

  corral_source_split_12700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i69 := 0;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_12733;

  corral_source_split_12733:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12734;

  corral_source_split_12734:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_12735;

  corral_source_split_12735:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12736;

  corral_source_split_12736:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.41, $p72);
    goto corral_source_split_12737;

  corral_source_split_12737:
    assume {:verifier.code 0} true;
    $i74 := $zext.i32.i64($i73);
    goto corral_source_split_12738;

  corral_source_split_12738:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12739;

  corral_source_split_12739:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.41, $p75);
    goto corral_source_split_12740;

  corral_source_split_12740:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_12741;

  corral_source_split_12741:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.41, $p77);
    goto corral_source_split_12742;

  corral_source_split_12742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2599} pci_free_consistent($p71, $i74, $p76, $i78);
    goto corral_source_split_12743;

  corral_source_split_12743:
    assume {:verifier.code 0} true;
    $i33 := $i69;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_12697;

  corral_source_split_12697:
    assume {:verifier.code 0} true;
    $i14 := $i33;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_12671;

  corral_source_split_12671:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb12:
    assume $i35 == 1;
    goto corral_source_split_12702;

  corral_source_split_12702:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12703;

  corral_source_split_12703:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.41, $p36);
    goto corral_source_split_12704;

  corral_source_split_12704:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_12705;

  corral_source_split_12705:
    assume {:verifier.code 0} true;
    goto corral_source_split_12706;

  corral_source_split_12706:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p38, $mul.ref(16, 2832)), $mul.ref(24, 1)), $mul.ref(0, 104)), $mul.ref(36, 1));
    goto corral_source_split_12707;

  corral_source_split_12707:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_12708;

  corral_source_split_12708:
    assume {:verifier.code 0} true;
    $i44 := $ult.i32(0, $i43);
    goto corral_source_split_12709;

  corral_source_split_12709:
    assume {:verifier.code 0} true;
    $i45 := 0;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i69 := $i45;
    goto $bb25;

  $bb14:
    assume $i44 == 1;
    goto corral_source_split_12711;

  corral_source_split_12711:
    assume {:verifier.code 0} true;
    $i46, $i47 := 0, 0;
    goto $bb17;

  $bb17:
    call $i48, $p53, $i54, $i55, $i56, $i57, $p62, $i63, $i64, $i65, $i66, $i67, $i46, $i47, $i68 := be_get_fw_log_level_loop_$bb17($p38, $p42, $i48, $p53, $i54, $i55, $i56, $i57, $p62, $i63, $i64, $i65, $i66, $i67, $i46, $i47, $i68);
    goto $bb17_last;

  corral_source_split_12713:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i46);
    goto corral_source_split_12715;

  corral_source_split_12715:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p38, $mul.ref(16, 2832)), $mul.ref(24, 1)), $mul.ref(0, 104)), $mul.ref(40, 1)), $mul.ref($i48, 16)), $mul.ref(0, 1));
    goto corral_source_split_12716;

  corral_source_split_12716:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_12717;

  corral_source_split_12717:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_12718;

  corral_source_split_12718:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 0);
    goto corral_source_split_12719;

  corral_source_split_12719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i64 := $i47;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_12726;

  corral_source_split_12726:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i46, 1);
    call {:si_unique_call 2598} {:cexpr "j"} boogie_si_record_i32($i65);
    goto corral_source_split_12727;

  corral_source_split_12727:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p42);
    goto corral_source_split_12728;

  corral_source_split_12728:
    assume {:verifier.code 0} true;
    $i67 := $ult.i32($i65, $i66);
    goto corral_source_split_12729;

  corral_source_split_12729:
    assume {:verifier.code 0} true;
    $i68 := $i64;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_12731;

  corral_source_split_12731:
    assume {:verifier.code 0} true;
    $i45 := $i68;
    goto $bb16;

  $bb22:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    $i46, $i47 := $i65, $i64;
    goto $bb22_dummy;

  $bb19:
    assume $i56 == 1;
    goto corral_source_split_12721;

  corral_source_split_12721:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i46);
    goto corral_source_split_12722;

  corral_source_split_12722:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p38, $mul.ref(16, 2832)), $mul.ref(24, 1)), $mul.ref(0, 104)), $mul.ref(40, 1)), $mul.ref($i57, 16)), $mul.ref(4, 1));
    goto corral_source_split_12723;

  corral_source_split_12723:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    call {:si_unique_call 2597} {:cexpr "level"} boogie_si_record_i32($i63);
    goto corral_source_split_12724;

  corral_source_split_12724:
    assume {:verifier.code 0} true;
    $i64 := $i63;
    goto $bb21;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_12691;

  corral_source_split_12691:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12692;

  corral_source_split_12692:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_12693;

  corral_source_split_12693:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_12694;

  corral_source_split_12694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2594} vslice_dummy_var_545 := dev_err.ref.ref.ref($p31, .str.8, .str.9);
    goto corral_source_split_12695;

  corral_source_split_12695:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb22_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12713;
}



const be_cmd_get_ext_fat_capabilites: ref;

axiom be_cmd_get_ext_fat_capabilites == $sub.ref(0, 747406);

procedure be_cmd_get_ext_fat_capabilites($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_cmd_get_ext_fat_capabilites($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i9: i32;
  var $p18: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12745;

  corral_source_split_12745:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_12746;

  corral_source_split_12746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2600} $i3 := ldv_mutex_lock_interruptible_42($p2);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    call {:si_unique_call 2601} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_12747;

  corral_source_split_12747:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_12748;

  corral_source_split_12748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2602} $p6 := wrb_from_mbox($p0);
    goto corral_source_split_12754;

  corral_source_split_12754:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_12755;

  corral_source_split_12755:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_12756;

  corral_source_split_12756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12764;

  corral_source_split_12764:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.41, $p10);
    goto corral_source_split_12765;

  corral_source_split_12765:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_12766;

  corral_source_split_12766:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_12767;

  corral_source_split_12767:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12768;

  corral_source_split_12768:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.41, $p14);
    goto corral_source_split_12769;

  corral_source_split_12769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2604} be_wrb_cmd_hdr_prepare($p13, 1, 125, $i15, $p6, $p1);
    goto corral_source_split_12770;

  corral_source_split_12770:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p12, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_12771;

  corral_source_split_12771:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 1);
    goto corral_source_split_12772;

  corral_source_split_12772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2605} $i17 := be_mbox_notify_wait($p0);
    call {:si_unique_call 2606} {:cexpr "status"} boogie_si_record_i32($i17);
    goto corral_source_split_12773;

  corral_source_split_12773:
    assume {:verifier.code 0} true;
    $i9 := $i17;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_12760;

  corral_source_split_12760:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_12761;

  corral_source_split_12761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2603} ldv_mutex_unlock_43($p18);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_12762;

  corral_source_split_12762:
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12752;

  corral_source_split_12752:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_12758;

  corral_source_split_12758:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 16);
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_12750;

  corral_source_split_12750:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb3;

  SeqInstr_475:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_42: ref;

axiom ldv_mutex_lock_interruptible_42 == $sub.ref(0, 748438);

procedure ldv_mutex_lock_interruptible_42($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_interruptible_42($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12775;

  corral_source_split_12775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2607} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 2608} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_12776;

  corral_source_split_12776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2609} $i2 := ldv_mutex_lock_interruptible_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    call {:si_unique_call 2610} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_12777;

  corral_source_split_12777:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_481:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_43: ref;

axiom ldv_mutex_unlock_43 == $sub.ref(0, 749470);

procedure ldv_mutex_unlock_43($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_43($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12779;

  corral_source_split_12779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2611} ldv_mutex_unlock_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_12780;

  corral_source_split_12780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2612} mutex_unlock($p0);
    goto corral_source_split_12781;

  corral_source_split_12781:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_484:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_40: ref;

axiom ldv_mutex_lock_interruptible_40 == $sub.ref(0, 750502);

procedure ldv_mutex_lock_interruptible_40($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_interruptible_40($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12783;

  corral_source_split_12783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2613} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 2614} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_12784;

  corral_source_split_12784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2615} $i2 := ldv_mutex_lock_interruptible_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    call {:si_unique_call 2616} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_12785;

  corral_source_split_12785:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_487:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_41: ref;

axiom ldv_mutex_unlock_41 == $sub.ref(0, 751534);

procedure ldv_mutex_unlock_41($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_41($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12787;

  corral_source_split_12787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2617} ldv_mutex_unlock_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_12788;

  corral_source_split_12788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2618} mutex_unlock($p0);
    goto corral_source_split_12789;

  corral_source_split_12789:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_490:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_36: ref;

axiom ldv_mutex_lock_interruptible_36 == $sub.ref(0, 752566);

procedure ldv_mutex_lock_interruptible_36($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_interruptible_36($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12791;

  corral_source_split_12791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2619} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 2620} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_12792;

  corral_source_split_12792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2621} $i2 := ldv_mutex_lock_interruptible_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    call {:si_unique_call 2622} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_12793;

  corral_source_split_12793:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_493:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_37: ref;

axiom ldv_mutex_unlock_37 == $sub.ref(0, 753598);

procedure ldv_mutex_unlock_37($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_37($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12795;

  corral_source_split_12795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2623} ldv_mutex_unlock_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_12796;

  corral_source_split_12796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2624} mutex_unlock($p0);
    goto corral_source_split_12797;

  corral_source_split_12797:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_496:
    assume !assertsPassed;
    return;
}



const be_POST_stage_get: ref;

axiom be_POST_stage_get == $sub.ref(0, 754630);

procedure be_POST_stage_get($p0: ref) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.26, $CurrAddr;



implementation be_POST_stage_get($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i33: i32;
  var $i34: i16;
  var vslice_dummy_var_546: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2625} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_12799;

  corral_source_split_12799:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12800;

  corral_source_split_12800:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_12801;

  corral_source_split_12801:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_12802;

  corral_source_split_12802:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_12803;

  corral_source_split_12803:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_12804;

  corral_source_split_12804:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 545);
    goto corral_source_split_12805;

  corral_source_split_12805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_12813;

  corral_source_split_12813:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12814;

  corral_source_split_12814:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_12815;

  corral_source_split_12815:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_12816;

  corral_source_split_12816:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_12817;

  corral_source_split_12817:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_12818;

  corral_source_split_12818:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 1808);
    goto corral_source_split_12819;

  corral_source_split_12819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_12821;

  corral_source_split_12821:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12822;

  corral_source_split_12822:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_12823;

  corral_source_split_12823:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_12824;

  corral_source_split_12824:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_12825;

  corral_source_split_12825:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_12826;

  corral_source_split_12826:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 529);
    goto corral_source_split_12827;

  corral_source_split_12827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    goto corral_source_split_12829;

  corral_source_split_12829:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12830;

  corral_source_split_12830:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_12831;

  corral_source_split_12831:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_12832;

  corral_source_split_12832:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    goto corral_source_split_12833;

  corral_source_split_12833:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_12834;

  corral_source_split_12834:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 1792);
    goto corral_source_split_12835;

  corral_source_split_12835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    goto corral_source_split_12837;

  corral_source_split_12837:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12838;

  corral_source_split_12838:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_12839;

  corral_source_split_12839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2627} vslice_dummy_var_546 := pci_read_config_dword($p31, 148, $p1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.26, $p1);
    goto corral_source_split_12841;

  corral_source_split_12841:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i33);
    goto corral_source_split_12842;

  corral_source_split_12842:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(16, 1));
    goto corral_source_split_12807;

  corral_source_split_12807:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_12808;

  corral_source_split_12808:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref(172, 1));
    goto corral_source_split_12809;

  corral_source_split_12809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2626} $i29 := ioread32($p28);
    goto corral_source_split_12810;

  corral_source_split_12810:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p1, $i29);
    goto corral_source_split_12811;

  corral_source_split_12811:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const msleep_interruptible: ref;

axiom msleep_interruptible == $sub.ref(0, 755662);

procedure msleep_interruptible($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msleep_interruptible($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2628} {:cexpr "msleep_interruptible:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_12844;

  corral_source_split_12844:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2629} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 2630} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_12845;

  corral_source_split_12845:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const be_map_pci_bars: ref;

axiom be_map_pci_bars == $sub.ref(0, 756694);

procedure be_map_pci_bars($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation be_map_pci_bars($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $i45: i32;
  var vslice_dummy_var_547: i32;
  var vslice_dummy_var_548: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2631} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_12847;

  corral_source_split_12847:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12848;

  corral_source_split_12848:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_12849;

  corral_source_split_12849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2632} vslice_dummy_var_547 := pci_read_config_dword($p3, 88, $p1);
    goto corral_source_split_12850;

  corral_source_split_12850:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.26, $p1);
    goto corral_source_split_12851;

  corral_source_split_12851:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 61440);
    goto corral_source_split_12852;

  corral_source_split_12852:
    assume {:verifier.code 0} true;
    $i7 := $lshr.i32($i6, 12);
    goto corral_source_split_12853;

  corral_source_split_12853:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364044, 1));
    goto corral_source_split_12854;

  corral_source_split_12854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_12855;

  corral_source_split_12855:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12856;

  corral_source_split_12856:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_12857;

  corral_source_split_12857:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_12858;

  corral_source_split_12858:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_12859;

  corral_source_split_12859:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_12860;

  corral_source_split_12860:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 545);
    goto corral_source_split_12861;

  corral_source_split_12861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i14 == 1);
    goto corral_source_split_12868;

  corral_source_split_12868:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12869;

  corral_source_split_12869:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_12870;

  corral_source_split_12870:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_12871;

  corral_source_split_12871:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_12872;

  corral_source_split_12872:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_12873;

  corral_source_split_12873:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 1808);
    goto corral_source_split_12874;

  corral_source_split_12874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    goto corral_source_split_12876;

  corral_source_split_12876:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12877;

  corral_source_split_12877:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_12878;

  corral_source_split_12878:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_12879;

  corral_source_split_12879:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_12880;

  corral_source_split_12880:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_12881;

  corral_source_split_12881:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 529);
    goto corral_source_split_12882;

  corral_source_split_12882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    goto corral_source_split_12884;

  corral_source_split_12884:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12885;

  corral_source_split_12885:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_12886;

  corral_source_split_12886:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_12887;

  corral_source_split_12887:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.0, $p29);
    goto corral_source_split_12888;

  corral_source_split_12888:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_12889;

  corral_source_split_12889:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 1792);
    goto corral_source_split_12890;

  corral_source_split_12890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2634} $i46 := db_bar($p0);
    call {:si_unique_call 2635} {:cexpr "tmp___0"} boogie_si_record_i32($i46);
    goto corral_source_split_12907;

  corral_source_split_12907:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12908;

  corral_source_split_12908:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_12909;

  corral_source_split_12909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2636} $p49 := pci_iomap($p48, $i46, 0);
    goto corral_source_split_12910;

  corral_source_split_12910:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_12911;

  corral_source_split_12911:
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i50, 0);
    goto corral_source_split_12912;

  corral_source_split_12912:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_12918;

  corral_source_split_12918:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, $p49);
    goto corral_source_split_12919;

  corral_source_split_12919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2638} vslice_dummy_var_548 := be_roce_map_pci_bars($p0);
    goto corral_source_split_12920;

  corral_source_split_12920:
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_12905;

  corral_source_split_12905:
    assume {:verifier.code 0} true;
    $r := $i45;
    return;

  $bb18:
    assume $i51 == 1;
    goto corral_source_split_12914;

  corral_source_split_12914:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2637} be_unmap_pci_bars($p0);
    goto corral_source_split_12916;

  corral_source_split_12916:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32(0, 12);
    goto $bb15;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_12863;

  corral_source_split_12863:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_12864;

  corral_source_split_12864:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_12865;

  corral_source_split_12865:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_12866;

  corral_source_split_12866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb10;

  $bb11:
    assume $i36 == 1;
    goto corral_source_split_12892;

  corral_source_split_12892:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12893;

  corral_source_split_12893:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_12894;

  corral_source_split_12894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2633} $p39 := pci_iomap($p38, 2, 0);
    goto corral_source_split_12895;

  corral_source_split_12895:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(16, 1));
    goto corral_source_split_12896;

  corral_source_split_12896:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $p39);
    goto corral_source_split_12897;

  corral_source_split_12897:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(16, 1));
    goto corral_source_split_12898;

  corral_source_split_12898:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_12899;

  corral_source_split_12899:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_12900;

  corral_source_split_12900:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i43, 0);
    goto corral_source_split_12901;

  corral_source_split_12901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb13:
    assume $i44 == 1;
    goto corral_source_split_12903;

  corral_source_split_12903:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32(0, 12);
    goto $bb15;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 757726);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12922;

  corral_source_split_12922:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 758758);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12924;

  corral_source_split_12924:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_12925;

  corral_source_split_12925:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_12926;

  corral_source_split_12926:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 759790);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12928;

  corral_source_split_12928:
    assume {:verifier.code 0} true;
    return;
}



const init_completion: ref;

axiom init_completion == $sub.ref(0, 760822);

procedure init_completion($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_completion($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2639} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_12930;

  corral_source_split_12930:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_12931;

  corral_source_split_12931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_12932;

  corral_source_split_12932:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_12933;

  corral_source_split_12933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2640} __init_waitqueue_head($p3, .str.146, $p1);
    goto corral_source_split_12934;

  corral_source_split_12934:
    assume {:verifier.code 0} true;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 761854);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12936;

  corral_source_split_12936:
    assume {:verifier.code 0} true;
    return;
}



const pci_iomap: ref;

axiom pci_iomap == $sub.ref(0, 762886);

procedure pci_iomap($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation pci_iomap($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2641} {:cexpr "pci_iomap:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2642} {:cexpr "pci_iomap:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_12938;

  corral_source_split_12938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2643} $p3 := external_alloc();
    goto corral_source_split_12939;

  corral_source_split_12939:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const db_bar: ref;

axiom db_bar == $sub.ref(0, 763918);

procedure db_bar($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation db_bar($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12941;

  corral_source_split_12941:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12942;

  corral_source_split_12942:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_12943;

  corral_source_split_12943:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_12944;

  corral_source_split_12944:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_12945;

  corral_source_split_12945:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_12946;

  corral_source_split_12946:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 57888);
    goto corral_source_split_12947;

  corral_source_split_12947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_12949;

  corral_source_split_12949:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12950;

  corral_source_split_12950:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_12951;

  corral_source_split_12951:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_12952;

  corral_source_split_12952:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_12953;

  corral_source_split_12953:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_12954;

  corral_source_split_12954:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 57896);
    goto corral_source_split_12955;

  corral_source_split_12955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    goto corral_source_split_12957;

  corral_source_split_12957:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_12958;

  corral_source_split_12958:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_12959;

  corral_source_split_12959:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_12960;

  corral_source_split_12960:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_12961;

  corral_source_split_12961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    goto corral_source_split_12963;

  corral_source_split_12963:
    assume {:verifier.code 0} true;
    $i17 := 4;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_12965;

  corral_source_split_12965:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const be_roce_map_pci_bars: ref;

axiom be_roce_map_pci_bars == $sub.ref(0, 764950);

procedure be_roce_map_pci_bars($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation be_roce_map_pci_bars($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p21: ref;
  var $i22: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i32;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i64;
  var $p59: ref;
  var $p60: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $i73: i32;
  var $i74: i32;
  var $i75: i64;
  var $p76: ref;
  var $p77: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i32;
  var $i83: i64;
  var $p84: ref;
  var $p85: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $p94: ref;
  var $p96: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12967;

  corral_source_split_12967:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12968;

  corral_source_split_12968:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_12969;

  corral_source_split_12969:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_12970;

  corral_source_split_12970:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_12971;

  corral_source_split_12971:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_12972;

  corral_source_split_12972:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 1824);
    goto corral_source_split_12973;

  corral_source_split_12973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_12993;

  corral_source_split_12993:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12994;

  corral_source_split_12994:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_12995;

  corral_source_split_12995:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_12996;

  corral_source_split_12996:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_12997;

  corral_source_split_12997:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_12998;

  corral_source_split_12998:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 1832);
    goto corral_source_split_12999;

  corral_source_split_12999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364048, 1)), $mul.ref(0, 1));
    goto corral_source_split_12975;

  corral_source_split_12975:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 4096);
    goto corral_source_split_12976;

  corral_source_split_12976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2644} $i15 := db_bar($p0);
    call {:si_unique_call 2645} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_12977;

  corral_source_split_12977:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_12978;

  corral_source_split_12978:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12979;

  corral_source_split_12979:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_12980;

  corral_source_split_12980:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p18, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i16, 56)), $mul.ref(0, 1));
    goto corral_source_split_12981;

  corral_source_split_12981:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_12982;

  corral_source_split_12982:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364048, 1)), $mul.ref(8, 1));
    goto corral_source_split_12983;

  corral_source_split_12983:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, $i22);
    goto corral_source_split_12984;

  corral_source_split_12984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2646} $i25 := db_bar($p0);
    call {:si_unique_call 2647} {:cexpr "tmp___5"} boogie_si_record_i32($i25);
    goto corral_source_split_12985;

  corral_source_split_12985:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_12986;

  corral_source_split_12986:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_12987;

  corral_source_split_12987:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_12988;

  corral_source_split_12988:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p28, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i26, 56)), $mul.ref(0, 1));
    goto corral_source_split_12989;

  corral_source_split_12989:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_12990;

  corral_source_split_12990:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_12991;

  corral_source_split_12991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i33 == 1);
    goto corral_source_split_13021;

  corral_source_split_13021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2652} $i56 := db_bar($p0);
    call {:si_unique_call 2653} {:cexpr "tmp___6"} boogie_si_record_i32($i56);
    goto corral_source_split_13022;

  corral_source_split_13022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2654} $i57 := db_bar($p0);
    call {:si_unique_call 2655} {:cexpr "tmp___7"} boogie_si_record_i32($i57);
    goto corral_source_split_13023;

  corral_source_split_13023:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i56);
    goto corral_source_split_13024;

  corral_source_split_13024:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13025;

  corral_source_split_13025:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_13026;

  corral_source_split_13026:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($add.ref($p60, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i58, 56)), $mul.ref(8, 1));
    goto corral_source_split_13027;

  corral_source_split_13027:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.0, $p63);
    goto corral_source_split_13028;

  corral_source_split_13028:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i57);
    goto corral_source_split_13029;

  corral_source_split_13029:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13030;

  corral_source_split_13030:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_13031;

  corral_source_split_13031:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($add.ref($p67, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i65, 56)), $mul.ref(0, 1));
    goto corral_source_split_13032;

  corral_source_split_13032:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.0, $p70);
    goto corral_source_split_13033;

  corral_source_split_13033:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i64, $i71);
    goto corral_source_split_13034;

  corral_source_split_13034:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i72 == 1);
    goto corral_source_split_13056;

  corral_source_split_13056:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364048, 1)), $mul.ref(4, 1));
    goto corral_source_split_13057;

  corral_source_split_13057:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, 0);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i72 == 1;
    goto corral_source_split_13036;

  corral_source_split_13036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2656} $i73 := db_bar($p0);
    call {:si_unique_call 2657} {:cexpr "tmp___3"} boogie_si_record_i32($i73);
    goto corral_source_split_13037;

  corral_source_split_13037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2658} $i74 := db_bar($p0);
    call {:si_unique_call 2659} {:cexpr "tmp___4"} boogie_si_record_i32($i74);
    goto corral_source_split_13038;

  corral_source_split_13038:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i73);
    goto corral_source_split_13039;

  corral_source_split_13039:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13040;

  corral_source_split_13040:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_13041;

  corral_source_split_13041:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($add.ref($p77, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i75, 56)), $mul.ref(8, 1));
    goto corral_source_split_13042;

  corral_source_split_13042:
    assume {:verifier.code 0} true;
    $i81 := $load.i64($M.0, $p80);
    goto corral_source_split_13043;

  corral_source_split_13043:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i64.i32($i81);
    goto corral_source_split_13044;

  corral_source_split_13044:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i74);
    goto corral_source_split_13045;

  corral_source_split_13045:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13046;

  corral_source_split_13046:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_13047;

  corral_source_split_13047:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($add.ref($p85, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i83, 56)), $mul.ref(0, 1));
    goto corral_source_split_13048;

  corral_source_split_13048:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.0, $p88);
    goto corral_source_split_13049;

  corral_source_split_13049:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i64.i32($i89);
    goto corral_source_split_13050;

  corral_source_split_13050:
    assume {:verifier.code 0} true;
    $i91 := $sub.i32($i82, $i90);
    goto corral_source_split_13051;

  corral_source_split_13051:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i91, 1);
    goto corral_source_split_13052;

  corral_source_split_13052:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364048, 1)), $mul.ref(4, 1));
    goto corral_source_split_13053;

  corral_source_split_13053:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, $i92);
    goto corral_source_split_13054;

  corral_source_split_13054:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i33 == 1;
    goto corral_source_split_13001;

  corral_source_split_13001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2648} $i34 := db_bar($p0);
    call {:si_unique_call 2649} {:cexpr "tmp___3"} boogie_si_record_i32($i34);
    goto corral_source_split_13002;

  corral_source_split_13002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2650} $i35 := db_bar($p0);
    call {:si_unique_call 2651} {:cexpr "tmp___4"} boogie_si_record_i32($i35);
    goto corral_source_split_13003;

  corral_source_split_13003:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i34);
    goto corral_source_split_13004;

  corral_source_split_13004:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13005;

  corral_source_split_13005:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_13006;

  corral_source_split_13006:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref($p38, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i36, 56)), $mul.ref(8, 1));
    goto corral_source_split_13007;

  corral_source_split_13007:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.0, $p41);
    goto corral_source_split_13008;

  corral_source_split_13008:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i64.i32($i42);
    goto corral_source_split_13009;

  corral_source_split_13009:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i35);
    goto corral_source_split_13010;

  corral_source_split_13010:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13011;

  corral_source_split_13011:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_13012;

  corral_source_split_13012:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($add.ref($p46, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i44, 56)), $mul.ref(0, 1));
    goto corral_source_split_13013;

  corral_source_split_13013:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.0, $p49);
    goto corral_source_split_13014;

  corral_source_split_13014:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i64.i32($i50);
    goto corral_source_split_13015;

  corral_source_split_13015:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32($i43, $i51);
    goto corral_source_split_13016;

  corral_source_split_13016:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i52, 1);
    goto corral_source_split_13017;

  corral_source_split_13017:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364048, 1)), $mul.ref(4, 1));
    goto corral_source_split_13018;

  corral_source_split_13018:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i53);
    goto corral_source_split_13019;

  corral_source_split_13019:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const dma_supported: ref;

axiom dma_supported == $sub.ref(0, 765982);

procedure dma_supported($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_supported($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2660} {:cexpr "dma_supported:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_13059;

  corral_source_split_13059:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2661} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2662} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_13060;

  corral_source_split_13060:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const be_eeh_err_detected: ref;

axiom be_eeh_err_detected == $sub.ref(0, 767014);

procedure be_eeh_err_detected($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.34, $M.21, $M.35, $M.3, $M.42, $M.38, $M.29, $M.41, $CurrAddr, $M.60, $M.61, $M.62, $M.30, $M.31, $M.2, $M.1, $M.26, $M.25, assertsPassed, $M.47, $M.46, $M.48, $M.40;



implementation be_eeh_err_detected($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $i18: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i19: i32;
  var vslice_dummy_var_549: i32;
  var vslice_dummy_var_550: i1;
  var vslice_dummy_var_551: i32;
  var vslice_dummy_var_552: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2663} {:cexpr "be_eeh_err_detected:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_13062;

  corral_source_split_13062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2664} $p2 := pci_get_drvdata($p0);
    goto corral_source_split_13063;

  corral_source_split_13063:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_13064;

  corral_source_split_13064:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_13065;

  corral_source_split_13065:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_13066;

  corral_source_split_13066:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13067;

  corral_source_split_13067:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_13068;

  corral_source_split_13068:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_13069;

  corral_source_split_13069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2665} vslice_dummy_var_549 := dev_err.ref.ref($p8, .str.117);
    goto corral_source_split_13070;

  corral_source_split_13070:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(364012, 1));
    goto corral_source_split_13071;

  corral_source_split_13071:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 1);
    goto corral_source_split_13072;

  corral_source_split_13072:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(363728, 1));
    goto corral_source_split_13073;

  corral_source_split_13073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2666} vslice_dummy_var_550 := cancel_delayed_work_sync($p11);
    goto corral_source_split_13074;

  corral_source_split_13074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2667} rtnl_lock();
    goto corral_source_split_13075;

  corral_source_split_13075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2668} netif_device_detach($p5);
    goto corral_source_split_13076;

  corral_source_split_13076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2669} rtnl_unlock();
    goto corral_source_split_13077;

  corral_source_split_13077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2670} $i13 := netif_running($p5);
    goto corral_source_split_13078;

  corral_source_split_13078:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 2671} {:cexpr "tmp___0"} boogie_si_record_i8($i14);
    goto corral_source_split_13079;

  corral_source_split_13079:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_13080;

  corral_source_split_13080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2675} vslice_dummy_var_552 := be_clear($p3);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_13087;

  corral_source_split_13087:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i1, 3);
    goto corral_source_split_13088;

  corral_source_split_13088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2676} pci_disable_device($p0);
    goto corral_source_split_13094;

  corral_source_split_13094:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(56, 1));
    goto corral_source_split_13095;

  corral_source_split_13095:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_13096;

  corral_source_split_13096:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_13097;

  corral_source_split_13097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i19 := 3;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_13092;

  corral_source_split_13092:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_13099;

  corral_source_split_13099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2677} ssleep(30);
    goto corral_source_split_13100;

  corral_source_split_13100:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_13090;

  corral_source_split_13090:
    assume {:verifier.code 0} true;
    $i19 := 4;
    goto $bb6;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_13082;

  corral_source_split_13082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2672} rtnl_lock();
    goto corral_source_split_13083;

  corral_source_split_13083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2673} vslice_dummy_var_551 := be_close($p5);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_13084;

  corral_source_split_13084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2674} rtnl_unlock();
    goto corral_source_split_13085;

  corral_source_split_13085:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_499:
    assume !assertsPassed;
    return;
}



const be_eeh_reset: ref;

axiom be_eeh_reset == $sub.ref(0, 768046);

procedure be_eeh_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, $CurrAddr;



implementation be_eeh_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i7: i32;
  var $i8: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i15: i32;
  var $i16: i1;
  var $i9: i32;
  var vslice_dummy_var_553: i32;
  var vslice_dummy_var_554: i32;
  var vslice_dummy_var_555: i32;
  var vslice_dummy_var_556: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13102;

  corral_source_split_13102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2678} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_13103;

  corral_source_split_13103:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13104;

  corral_source_split_13104:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13105;

  corral_source_split_13105:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_13106;

  corral_source_split_13106:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_13107;

  corral_source_split_13107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2679} vslice_dummy_var_553 := _dev_info.ref.ref($p5, .str.119);
    goto corral_source_split_13108;

  corral_source_split_13108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2680} be_clear_all_error($p2);
    goto corral_source_split_13109;

  corral_source_split_13109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2681} $i7 := pci_enable_device($p0);
    call {:si_unique_call 2682} {:cexpr "status"} boogie_si_record_i32($i7);
    goto corral_source_split_13110;

  corral_source_split_13110:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_13111;

  corral_source_split_13111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2683} pci_set_master($p0);
    goto corral_source_split_13117;

  corral_source_split_13117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2684} vslice_dummy_var_554 := pci_set_power_state($p0, 0);
    goto corral_source_split_13118;

  corral_source_split_13118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2685} pci_restore_state($p0);
    goto corral_source_split_13119;

  corral_source_split_13119:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13120;

  corral_source_split_13120:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_13121;

  corral_source_split_13121:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_13122;

  corral_source_split_13122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2686} vslice_dummy_var_555 := _dev_info.ref.ref($p13, .str.120);
    goto corral_source_split_13123;

  corral_source_split_13123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2687} $i15 := be_fw_wait_ready($p2);
    call {:si_unique_call 2688} {:cexpr "status"} boogie_si_record_i32($i15);
    goto corral_source_split_13124;

  corral_source_split_13124:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_13125;

  corral_source_split_13125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2689} vslice_dummy_var_556 := pci_cleanup_aer_uncorrect_error_status($p0);
    goto corral_source_split_13129;

  corral_source_split_13129:
    assume {:verifier.code 0} true;
    $i9 := 5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13115;

  corral_source_split_13115:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_13127;

  corral_source_split_13127:
    assume {:verifier.code 0} true;
    $i9 := 4;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_13113;

  corral_source_split_13113:
    assume {:verifier.code 0} true;
    $i9 := 4;
    goto $bb3;
}



const be_eeh_resume: ref;

axiom be_eeh_resume == $sub.ref(0, 769078);

procedure be_eeh_resume($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.25, $M.21, $M.2, $M.1, $M.41, assertsPassed, $M.26, $CurrAddr, $M.47, $M.46, $M.48, $M.42, $M.40, $M.34, $M.38, $M.35, $M.3, $M.60, $M.61, $M.62, $M.30, $M.31;



implementation be_eeh_resume($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i8;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var vslice_dummy_var_557: i32;
  var vslice_dummy_var_558: i32;
  var vslice_dummy_var_559: i32;
  var vslice_dummy_var_560: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13131;

  corral_source_split_13131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2690} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_13132;

  corral_source_split_13132:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13133;

  corral_source_split_13133:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_13134;

  corral_source_split_13134:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_13135;

  corral_source_split_13135:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13136;

  corral_source_split_13136:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_13137;

  corral_source_split_13137:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_13138;

  corral_source_split_13138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2691} vslice_dummy_var_557 := _dev_info.ref.ref($p7, .str.121);
    goto corral_source_split_13139;

  corral_source_split_13139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2692} vslice_dummy_var_558 := pci_save_state($p0);
    goto corral_source_split_13140;

  corral_source_split_13140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2693} $i10 := be_cmd_reset_function($p2);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    call {:si_unique_call 2694} {:cexpr "status"} boogie_si_record_i32($i10);
    goto corral_source_split_13141;

  corral_source_split_13141:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_13142;

  corral_source_split_13142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2696} $i12 := be_cmd_fw_init($p2);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    call {:si_unique_call 2697} {:cexpr "status"} boogie_si_record_i32($i12);
    goto corral_source_split_13151;

  corral_source_split_13151:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_13152;

  corral_source_split_13152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2698} $i14 := be_setup($p2);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    call {:si_unique_call 2699} {:cexpr "status"} boogie_si_record_i32($i14);
    goto corral_source_split_13156;

  corral_source_split_13156:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_13157;

  corral_source_split_13157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2700} $i16 := netif_running($p4);
    goto corral_source_split_13161;

  corral_source_split_13161:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i8($i16);
    call {:si_unique_call 2701} {:cexpr "tmp___0"} boogie_si_record_i8($i17);
    goto corral_source_split_13162;

  corral_source_split_13162:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_13163;

  corral_source_split_13163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2704} $i21 := msecs_to_jiffies(1000);
    call {:si_unique_call 2705} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_13171;

  corral_source_split_13171:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(363728, 1));
    goto corral_source_split_13172;

  corral_source_split_13172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2706} vslice_dummy_var_560 := schedule_delayed_work($p22, $i21);
    goto corral_source_split_13173;

  corral_source_split_13173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2707} netif_device_attach($p4);
    goto corral_source_split_13174;

  corral_source_split_13174:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_13165;

  corral_source_split_13165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2702} $i19 := be_open($p4);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    call {:si_unique_call 2703} {:cexpr "status"} boogie_si_record_i32($i19);
    goto corral_source_split_13166;

  corral_source_split_13166:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_13167;

  corral_source_split_13167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i20 == 1;
    goto corral_source_split_13169;

  corral_source_split_13169:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13146;

  corral_source_split_13146:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_13147;

  corral_source_split_13147:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_13148;

  corral_source_split_13148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2695} vslice_dummy_var_559 := dev_err.ref.ref($p26, .str.122);
    goto corral_source_split_13149;

  corral_source_split_13149:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_514:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_13159;

  corral_source_split_13159:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_511:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_13154;

  corral_source_split_13154:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_508:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_13144;

  corral_source_split_13144:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_505:
    assume !assertsPassed;
    return;
}



const be_clear_all_error: ref;

axiom be_clear_all_error == $sub.ref(0, 770110);

procedure be_clear_all_error($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_clear_all_error($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13176;

  corral_source_split_13176:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364012, 1));
    goto corral_source_split_13177;

  corral_source_split_13177:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 0);
    goto corral_source_split_13178;

  corral_source_split_13178:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364014, 1));
    goto corral_source_split_13179;

  corral_source_split_13179:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 0);
    goto corral_source_split_13180;

  corral_source_split_13180:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364013, 1));
    goto corral_source_split_13181;

  corral_source_split_13181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 0);
    goto corral_source_split_13182;

  corral_source_split_13182:
    assume {:verifier.code 0} true;
    return;
}



const pci_cleanup_aer_uncorrect_error_status: ref;

axiom pci_cleanup_aer_uncorrect_error_status == $sub.ref(0, 771142);

procedure pci_cleanup_aer_uncorrect_error_status($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_cleanup_aer_uncorrect_error_status($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13184;

  corral_source_split_13184:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2708} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2709} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_13185;

  corral_source_split_13185:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const be_xmit: ref;

axiom be_xmit == $sub.ref(0, 772174);

procedure be_xmit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.53, $M.35, $M.0, $CurrAddr;



implementation be_xmit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i16;
  var $i22: i16;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i8;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $i41: i16;
  var $i42: i16;
  var $i43: i32;
  var $i44: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i16;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i16;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $i67: i32;
  var $i68: i64;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i64;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $i79: i16;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i64;
  var $i84: i64;
  var $i85: i1;
  var $p87: ref;
  var $i88: i16;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i92: i64;
  var $i93: i64;
  var $i94: i1;
  var $i95: i32;
  var $i86: i32;
  var $i96: i1;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $i101: i1;
  var $i102: i32;
  var $i103: i64;
  var $i104: i64;
  var $i105: i1;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $i111: i64;
  var $i112: i1;
  var $i113: i32;
  var $i114: i64;
  var $i115: i64;
  var $i116: i1;
  var $p117: ref;
  var $p118: ref;
  var $i119: i32;
  var $i120: i8;
  var $i121: i1;
  var $i122: i8;
  var $i123: i1;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i16;
  var $i130: i32;
  var $i131: i64;
  var $p133: ref;
  var $p134: ref;
  var $i135: i64;
  var $i136: i1;
  var $i137: i32;
  var $i138: i64;
  var $i139: i64;
  var $i140: i1;
  var $i141: i64;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i32;
  var $i147: i32;
  var $p148: ref;
  var $i149: i16;
  var $i150: i32;
  var $i151: i1;
  var $i152: i16;
  var $i153: i32;
  var $i154: i16;
  var $i155: i8;
  var $i156: i16;
  var $i157: i32;
  var $i158: i16;
  var $i159: i1;
  var $i160: i16;
  var $p161: ref;
  var vslice_dummy_var_561: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2710} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2711} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_13187;

  corral_source_split_13187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2712} $p4 := netdev_priv($p1);
    goto corral_source_split_13188;

  corral_source_split_13188:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_13189;

  corral_source_split_13189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2713} $i6 := skb_get_queue_mapping($p0);
    call {:si_unique_call 2714} {:cexpr "tmp___0"} boogie_si_record_i16($i6);
    goto corral_source_split_13190;

  corral_source_split_13190:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(4136, 1));
    goto corral_source_split_13191;

  corral_source_split_13191:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_13192;

  corral_source_split_13192:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i64($i6);
    goto corral_source_split_13193;

  corral_source_split_13193:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p8, $mul.ref($i9, 16528));
    goto corral_source_split_13194;

  corral_source_split_13194:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref($i9, 16528)), $mul.ref(8, 1));
    $p12 := $add.ref($add.ref($add.ref($p8, $mul.ref($i9, 16528)), $mul.ref(8, 1)), $mul.ref(32, 1));
    goto corral_source_split_13195;

  corral_source_split_13195:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_13196;

  corral_source_split_13196:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    call {:si_unique_call 2715} {:cexpr "start"} boogie_si_record_i32($i14);
    goto corral_source_split_13197;

  corral_source_split_13197:
    assume {:verifier.code 0} true;
    $M.53 := $store.i8($M.53, $p3, 0);
    goto corral_source_split_13198;

  corral_source_split_13198:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(232, 1));
    goto corral_source_split_13199;

  corral_source_split_13199:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_13200;

  corral_source_split_13200:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_13201;

  corral_source_split_13201:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(126, 1));
    goto corral_source_split_13202;

  corral_source_split_13202:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_13203;

  corral_source_split_13203:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_13204;

  corral_source_split_13204:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i16($i20);
    goto corral_source_split_13205;

  corral_source_split_13205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2716} $i22 := __fswab16($i21);
    call {:si_unique_call 2717} {:cexpr "tmp___1"} boogie_si_record_i16($i22);
    goto corral_source_split_13206;

  corral_source_split_13206:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_13207;

  corral_source_split_13207:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 33024);
    goto corral_source_split_13208;

  corral_source_split_13208:
    assume {:verifier.code 0} true;
    $i25 := (if $i24 == 1 then 18 else 14);
    call {:si_unique_call 2718} {:cexpr "eth_hdr_len"} boogie_si_record_i32($i25);
    goto corral_source_split_13209;

  corral_source_split_13209:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(104, 1));
    goto corral_source_split_13210;

  corral_source_split_13210:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_13211;

  corral_source_split_13211:
    assume {:verifier.code 0} true;
    $i28 := $ule.i32($i27, 60);
    goto corral_source_split_13212;

  corral_source_split_13212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364024, 1));
    goto corral_source_split_13237;

  corral_source_split_13237:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_13238;

  corral_source_split_13238:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 16777216);
    goto corral_source_split_13239;

  corral_source_split_13239:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_13240;

  corral_source_split_13240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p0);
    goto corral_source_split_13251;

  corral_source_split_13251:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p54, $mul.ref(124, 1));
    goto corral_source_split_13252;

  corral_source_split_13252:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_13253;

  corral_source_split_13253:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_13254;

  corral_source_split_13254:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 12);
    goto corral_source_split_13255;

  corral_source_split_13255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p71 := $p0;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_13275;

  corral_source_split_13275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2728} $i72 := be_ipv6_tx_stall_chk($p5, $p71);
    call {:si_unique_call 2729} {:cexpr "tmp___5"} boogie_si_record_i32($i72);
    goto corral_source_split_13276;

  corral_source_split_13276:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_13277;

  corral_source_split_13277:
    assume {:verifier.code 0} true;
    $i74 := $zext.i1.i32($i73);
    goto corral_source_split_13278;

  corral_source_split_13278:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i74);
    goto corral_source_split_13279;

  corral_source_split_13279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2730} $i76 := ldv__builtin_expect($i75, 0);
    call {:si_unique_call 2731} {:cexpr "tmp___6"} boogie_si_record_i64($i76);
    goto corral_source_split_13280;

  corral_source_split_13280:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, 0);
    goto corral_source_split_13281;

  corral_source_split_13281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i98 := 0;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_13314;

  corral_source_split_13314:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_13315;

  corral_source_split_13315:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2740} $i106 := be_ipv6_tx_stall_chk($p5, $p71);
    call {:si_unique_call 2741} {:cexpr "tmp___14"} boogie_si_record_i32($i106);
    goto corral_source_split_13327;

  corral_source_split_13327:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_13328;

  corral_source_split_13328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    $p118 := $p71;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_13347;

  corral_source_split_13347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2747} $i119 := wrb_cnt_for_skb($p5, $p118, $p2);
    call {:si_unique_call 2748} {:cexpr "wrb_cnt"} boogie_si_record_i32($i119);
    goto corral_source_split_13348;

  corral_source_split_13348:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.35, $p2);
    goto corral_source_split_13349;

  corral_source_split_13349:
    assume {:verifier.code 0} true;
    $i121 := $trunc.i8.i1($i120);
    goto corral_source_split_13350;

  corral_source_split_13350:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.53, $p3);
    goto corral_source_split_13351;

  corral_source_split_13351:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i8.i1($i122);
    goto corral_source_split_13352;

  corral_source_split_13352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2749} $i124 := make_tx_wrbs($p5, $p11, $p118, $i119, $i121, $i123);
    call {:si_unique_call 2750} {:cexpr "tmp___16"} boogie_si_record_i32($i124);
    goto corral_source_split_13353;

  corral_source_split_13353:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_13354;

  corral_source_split_13354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i125 == 1);
    goto corral_source_split_13372;

  corral_source_split_13372:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i32.i16($i14);
    $p161 := $add.ref($add.ref($add.ref($p8, $mul.ref($i9, 16528)), $mul.ref(8, 1)), $mul.ref(32, 1));
    goto corral_source_split_13373;

  corral_source_split_13373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p161, $i160);
    goto corral_source_split_13374;

  corral_source_split_13374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2755} dev_kfree_skb_any($p118);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb53:
    assume $i125 == 1;
    goto corral_source_split_13356;

  corral_source_split_13356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2751} $p126 := skb_end_pointer($p118);
    goto corral_source_split_13357;

  corral_source_split_13357:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p126);
    goto corral_source_split_13358;

  corral_source_split_13358:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p127, $mul.ref(0, 320)), $mul.ref(4, 1));
    goto corral_source_split_13359;

  corral_source_split_13359:
    assume {:verifier.code 0} true;
    $i129 := $load.i16($M.0, $p128);
    goto corral_source_split_13360;

  corral_source_split_13360:
    assume {:verifier.code 0} true;
    $i130 := $zext.i16.i32($i129);
    call {:si_unique_call 2752} {:cexpr "gso_segs"} boogie_si_record_i32($i130);
    goto corral_source_split_13361;

  corral_source_split_13361:
    assume {:verifier.code 0} true;
    $i131 := $zext.i32.i64($i14);
    goto corral_source_split_13362;

  corral_source_split_13362:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p8, $mul.ref($i9, 16528)), $mul.ref(88, 1)), $mul.ref($i131, 8));
    goto corral_source_split_13363;

  corral_source_split_13363:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_13364;

  corral_source_split_13364:
    assume {:verifier.code 0} true;
    $i135 := $p2i.ref.i64($p134);
    goto corral_source_split_13365;

  corral_source_split_13365:
    assume {:verifier.code 0} true;
    $i136 := $ne.i64($i135, 0);
    goto corral_source_split_13366;

  corral_source_split_13366:
    assume {:verifier.code 0} true;
    $i137 := $zext.i1.i32($i136);
    goto corral_source_split_13367;

  corral_source_split_13367:
    assume {:verifier.code 0} true;
    $i138 := $sext.i32.i64($i137);
    goto corral_source_split_13368;

  corral_source_split_13368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2753} $i139 := ldv__builtin_expect($i138, 0);
    call {:si_unique_call 2754} {:cexpr "tmp___18"} boogie_si_record_i64($i139);
    goto corral_source_split_13369;

  corral_source_split_13369:
    assume {:verifier.code 0} true;
    $i140 := $ne.i64($i139, 0);
    goto corral_source_split_13370;

  corral_source_split_13370:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i141 := $zext.i32.i64($i14);
    goto corral_source_split_13378;

  corral_source_split_13378:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p8, $mul.ref($i9, 16528)), $mul.ref(88, 1)), $mul.ref($i141, 8));
    goto corral_source_split_13379;

  corral_source_split_13379:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p143, $p118);
    $p144 := $add.ref($add.ref($add.ref($p8, $mul.ref($i9, 16528)), $mul.ref(8, 1)), $mul.ref(36, 1));
    goto corral_source_split_13380;

  corral_source_split_13380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2757} atomic_add($i119, $p144);
    $p145 := $add.ref($add.ref($add.ref($p8, $mul.ref($i9, 16528)), $mul.ref(8, 1)), $mul.ref(36, 1));
    goto corral_source_split_13381;

  corral_source_split_13381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2758} $i146 := atomic_read($p145);
    call {:si_unique_call 2759} {:cexpr "tmp___20"} boogie_si_record_i32($i146);
    goto corral_source_split_13382;

  corral_source_split_13382:
    assume {:verifier.code 0} true;
    $i147 := $add.i32($i146, 30);
    $p148 := $add.ref($add.ref($add.ref($p8, $mul.ref($i9, 16528)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_13383;

  corral_source_split_13383:
    assume {:verifier.code 0} true;
    $i149 := $load.i16($M.0, $p148);
    goto corral_source_split_13384;

  corral_source_split_13384:
    assume {:verifier.code 0} true;
    $i150 := $zext.i16.i32($i149);
    goto corral_source_split_13385;

  corral_source_split_13385:
    assume {:verifier.code 0} true;
    $i151 := $sge.i32($i147, $i150);
    goto corral_source_split_13386;

  corral_source_split_13386:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    $i155 := 0;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_13394;

  corral_source_split_13394:
    assume {:verifier.code 0} true;
    $i156 := $trunc.i32.i16($i119);
    goto corral_source_split_13395;

  corral_source_split_13395:
    assume {:verifier.code 0} true;
    $i157 := $zext.i16.i32($i156);
    goto corral_source_split_13396;

  corral_source_split_13396:
    assume {:verifier.code 0} true;
    $i158 := $trunc.i32.i16($i157);
    goto corral_source_split_13397;

  corral_source_split_13397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2763} be_txq_notify($p5, $p10, $i158);
    goto corral_source_split_13398;

  corral_source_split_13398:
    assume {:verifier.code 0} true;
    $i159 := $trunc.i8.i1($i155);
    goto corral_source_split_13399;

  corral_source_split_13399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2764} be_tx_stats_update($p10, $i119, $i124, $i130, $i159);
    goto corral_source_split_13400;

  corral_source_split_13400:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb59:
    assume $i151 == 1;
    goto corral_source_split_13388;

  corral_source_split_13388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2760} $i152 := skb_get_queue_mapping($p118);
    call {:si_unique_call 2761} {:cexpr "tmp___19"} boogie_si_record_i16($i152);
    goto corral_source_split_13389;

  corral_source_split_13389:
    assume {:verifier.code 0} true;
    $i153 := $zext.i16.i32($i152);
    goto corral_source_split_13390;

  corral_source_split_13390:
    assume {:verifier.code 0} true;
    $i154 := $trunc.i32.i16($i153);
    goto corral_source_split_13391;

  corral_source_split_13391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2762} netif_stop_subqueue($p1, $i154);
    goto corral_source_split_13392;

  corral_source_split_13392:
    assume {:verifier.code 0} true;
    $i155 := 1;
    goto $bb61;

  $bb55:
    assume $i140 == 1;
    call {:si_unique_call 2756} devirtbounce.2(0, .str, 963, 12);
    goto corral_source_split_13376;

  corral_source_split_13376:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    call be_xmit_loop_$bb57();
    goto $bb57_last;

  $bb44:
    assume $i107 == 1;
    goto corral_source_split_13330;

  corral_source_split_13330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2742} $i108 := be_vlan_tag_tx_chk($p5, $p71);
    call {:si_unique_call 2743} {:cexpr "tmp___15"} boogie_si_record_i32($i108);
    goto corral_source_split_13331;

  corral_source_split_13331:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_13332;

  corral_source_split_13332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    $p117 := $p71;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_13345;

  corral_source_split_13345:
    assume {:verifier.code 0} true;
    $p118 := $p117;
    goto $bb52;

  $bb46:
    assume $i109 == 1;
    goto corral_source_split_13334;

  corral_source_split_13334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2744} $p110 := be_insert_vlan_in_pkt($p5, $p71, $p3);
    goto corral_source_split_13335;

  corral_source_split_13335:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p110);
    goto corral_source_split_13336;

  corral_source_split_13336:
    assume {:verifier.code 0} true;
    $i112 := $eq.i64($i111, 0);
    goto corral_source_split_13337;

  corral_source_split_13337:
    assume {:verifier.code 0} true;
    $i113 := $zext.i1.i32($i112);
    goto corral_source_split_13338;

  corral_source_split_13338:
    assume {:verifier.code 0} true;
    $i114 := $sext.i32.i64($i113);
    goto corral_source_split_13339;

  corral_source_split_13339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2745} $i115 := ldv__builtin_expect($i114, 0);
    call {:si_unique_call 2746} {:cexpr "tmp___13"} boogie_si_record_i64($i115);
    goto corral_source_split_13340;

  corral_source_split_13340:
    assume {:verifier.code 0} true;
    $i116 := $ne.i64($i115, 0);
    goto corral_source_split_13341;

  corral_source_split_13341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p117 := $p110;
    goto $bb51;

  $bb48:
    assume $i116 == 1;
    goto corral_source_split_13343;

  corral_source_split_13343:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb38:
    assume $i99 == 1;
    goto corral_source_split_13317;

  corral_source_split_13317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2736} $i100 := qnq_async_evt_rcvd($p5);
    call {:si_unique_call 2737} {:cexpr "tmp___11"} boogie_si_record_i32($i100);
    goto corral_source_split_13318;

  corral_source_split_13318:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 0);
    goto corral_source_split_13319;

  corral_source_split_13319:
    assume {:verifier.code 0} true;
    $i102 := $zext.i1.i32($i101);
    goto corral_source_split_13320;

  corral_source_split_13320:
    assume {:verifier.code 0} true;
    $i103 := $sext.i32.i64($i102);
    goto corral_source_split_13321;

  corral_source_split_13321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2738} $i104 := ldv__builtin_expect($i103, 0);
    call {:si_unique_call 2739} {:cexpr "tmp___12"} boogie_si_record_i64($i104);
    goto corral_source_split_13322;

  corral_source_split_13322:
    assume {:verifier.code 0} true;
    $i105 := $ne.i64($i104, 0);
    goto corral_source_split_13323;

  corral_source_split_13323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb40:
    assume $i105 == 1;
    goto corral_source_split_13325;

  corral_source_split_13325:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb26:
    assume $i77 == 1;
    goto corral_source_split_13283;

  corral_source_split_13283:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364234, 1));
    goto corral_source_split_13284;

  corral_source_split_13284:
    assume {:verifier.code 0} true;
    $i79 := $load.i16($M.0, $p78);
    goto corral_source_split_13285;

  corral_source_split_13285:
    assume {:verifier.code 0} true;
    $i80 := $zext.i16.i32($i79);
    goto corral_source_split_13286;

  corral_source_split_13286:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_13287;

  corral_source_split_13287:
    assume {:verifier.code 0} true;
    $i82 := $zext.i1.i32($i81);
    goto corral_source_split_13288;

  corral_source_split_13288:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i82);
    goto corral_source_split_13289;

  corral_source_split_13289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2732} $i84 := ldv__builtin_expect($i83, 0);
    call {:si_unique_call 2733} {:cexpr "tmp___7"} boogie_si_record_i64($i84);
    goto corral_source_split_13290;

  corral_source_split_13290:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, 0);
    goto corral_source_split_13291;

  corral_source_split_13291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i85 == 1);
    goto corral_source_split_13295;

  corral_source_split_13295:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364278, 1));
    goto corral_source_split_13296;

  corral_source_split_13296:
    assume {:verifier.code 0} true;
    $i88 := $load.i16($M.0, $p87);
    goto corral_source_split_13297;

  corral_source_split_13297:
    assume {:verifier.code 0} true;
    $i89 := $zext.i16.i32($i88);
    goto corral_source_split_13298;

  corral_source_split_13298:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_13299;

  corral_source_split_13299:
    assume {:verifier.code 0} true;
    $i91 := $zext.i1.i32($i90);
    goto corral_source_split_13300;

  corral_source_split_13300:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64($i91);
    goto corral_source_split_13301;

  corral_source_split_13301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2734} $i93 := ldv__builtin_expect($i92, 0);
    call {:si_unique_call 2735} {:cexpr "tmp___8"} boogie_si_record_i64($i93);
    goto corral_source_split_13302;

  corral_source_split_13302:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, 0);
    goto corral_source_split_13303;

  corral_source_split_13303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    $i95 := 0;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i86 := $i95;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_13305;

  corral_source_split_13305:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i86, 0);
    goto corral_source_split_13306;

  corral_source_split_13306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $i97 := 0;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_13312;

  corral_source_split_13312:
    assume {:verifier.code 0} true;
    $i98 := $i97;
    goto $bb37;

  $bb34:
    assume $i96 == 1;
    goto corral_source_split_13310;

  corral_source_split_13310:
    assume {:verifier.code 0} true;
    $i97 := 1;
    goto $bb36;

  $bb31:
    assume $i94 == 1;
    goto corral_source_split_13308;

  corral_source_split_13308:
    assume {:verifier.code 0} true;
    $i95 := 1;
    goto $bb33;

  $bb28:
    assume $i85 == 1;
    goto corral_source_split_13293;

  corral_source_split_13293:
    assume {:verifier.code 0} true;
    $i86 := 1;
    goto $bb30;

  $bb16:
    assume $i58 == 1;
    goto corral_source_split_13257;

  corral_source_split_13257:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(170, 1));
    goto corral_source_split_13258;

  corral_source_split_13258:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.0, $p59);
    goto corral_source_split_13259;

  corral_source_split_13259:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_13260;

  corral_source_split_13260:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i61, 4096);
    goto corral_source_split_13261;

  corral_source_split_13261:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_13262;

  corral_source_split_13262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb18;

  $bb19:
    assume $i63 == 1;
    goto corral_source_split_13264;

  corral_source_split_13264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2725} $p64 := be_insert_vlan_in_pkt($p5, $p0, $p3);
    goto corral_source_split_13265;

  corral_source_split_13265:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_13266;

  corral_source_split_13266:
    assume {:verifier.code 0} true;
    $i66 := $eq.i64($i65, 0);
    goto corral_source_split_13267;

  corral_source_split_13267:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i32($i66);
    goto corral_source_split_13268;

  corral_source_split_13268:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i67);
    goto corral_source_split_13269;

  corral_source_split_13269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2726} $i69 := ldv__builtin_expect($i68, 0);
    call {:si_unique_call 2727} {:cexpr "tmp___4"} boogie_si_record_i64($i69);
    goto corral_source_split_13270;

  corral_source_split_13270:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_13271;

  corral_source_split_13271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p71 := $p64;
    goto $bb25;

  $bb21:
    assume $i70 == 1;
    goto corral_source_split_13273;

  corral_source_split_13273:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb10:
    assume $i49 == 1;
    goto corral_source_split_13242;

  corral_source_split_13242:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p17, $mul.ref(0, 18)), $mul.ref(12, 1));
    goto corral_source_split_13243;

  corral_source_split_13243:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.0, $p50);
    goto corral_source_split_13244;

  corral_source_split_13244:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_13245;

  corral_source_split_13245:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 129);
    goto corral_source_split_13246;

  corral_source_split_13246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb12;

  $bb13:
    assume $i53 == 1;
    goto corral_source_split_13248;

  corral_source_split_13248:
    assume {:verifier.code 0} true;
    $M.53 := $store.i8($M.53, $p3, 1);
    goto corral_source_split_13249;

  corral_source_split_13249:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_13214;

  corral_source_split_13214:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(170, 1));
    goto corral_source_split_13215;

  corral_source_split_13215:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.0, $p29);
    goto corral_source_split_13216;

  corral_source_split_13216:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_13217;

  corral_source_split_13217:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 4096);
    goto corral_source_split_13218;

  corral_source_split_13218:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_13219;

  corral_source_split_13219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb3;

  $bb4:
    assume $i33 == 1;
    goto corral_source_split_13221;

  corral_source_split_13221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2719} $i34 := is_ipv4_pkt($p0);
    goto corral_source_split_13222;

  corral_source_split_13222:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i8($i34);
    call {:si_unique_call 2720} {:cexpr "tmp___3"} boogie_si_record_i8($i35);
    goto corral_source_split_13223;

  corral_source_split_13223:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i35);
    goto corral_source_split_13224;

  corral_source_split_13224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i36 == 1;
    goto corral_source_split_13226;

  corral_source_split_13226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2721} $p37 := ip_hdr($p0);
    goto corral_source_split_13227;

  corral_source_split_13227:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 20)), $mul.ref(2, 1));
    goto corral_source_split_13228;

  corral_source_split_13228:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.0, $p38);
    goto corral_source_split_13229;

  corral_source_split_13229:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_13230;

  corral_source_split_13230:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    goto corral_source_split_13231;

  corral_source_split_13231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2722} $i42 := __fswab16($i41);
    call {:si_unique_call 2723} {:cexpr "tmp___2"} boogie_si_record_i16($i42);
    goto corral_source_split_13232;

  corral_source_split_13232:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_13233;

  corral_source_split_13233:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, $i25);
    goto corral_source_split_13234;

  corral_source_split_13234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2724} vslice_dummy_var_561 := pskb_trim($p0, $i44);
    goto corral_source_split_13235;

  corral_source_split_13235:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb57_dummy:
    assume false;
    return;

  $bb57_last:
    assume {:verifier.code 0} true;
    goto $bb57_dummy;
}



const be_mac_addr_set: ref;

axiom be_mac_addr_set == $sub.ref(0, 773206);

procedure be_mac_addr_set($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.54, $M.29, $M.0, $M.21, $M.41, $CurrAddr;



implementation be_mac_addr_set($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i16;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $i78: i8;
  var $i79: i1;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $p84: ref;
  var $i85: i8;
  var $i86: i64;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i45: i32;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i18: i32;
  var cmdloc_dummy_var_351: [ref]i8;
  var cmdloc_dummy_var_352: [ref]i8;
  var cmdloc_dummy_var_353: [ref]i8;
  var vslice_dummy_var_562: i32;
  var vslice_dummy_var_563: i32;
  var vslice_dummy_var_564: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2765} $p2 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2766} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2767} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_13402;

  corral_source_split_13402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2768} $p5 := netdev_priv($p0);
    goto corral_source_split_13403;

  corral_source_split_13403:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_13404;

  corral_source_split_13404:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_13405;

  corral_source_split_13405:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 364320)), $mul.ref(364000, 1));
    goto corral_source_split_13406;

  corral_source_split_13406:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_13407;

  corral_source_split_13407:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_13408;

  corral_source_split_13408:
    assume {:verifier.code 0} true;
    $M.54 := $store.i32($M.54, $p3, $i10);
    goto corral_source_split_13409;

  corral_source_split_13409:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p4, 1);
    goto corral_source_split_13410;

  corral_source_split_13410:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_13411;

  corral_source_split_13411:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_13412;

  corral_source_split_13412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2769} $i13 := is_valid_ether_addr($p12);
    goto corral_source_split_13413;

  corral_source_split_13413:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 2770} {:cexpr "tmp___0"} boogie_si_record_i8($i14);
    goto corral_source_split_13414;

  corral_source_split_13414:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_13415;

  corral_source_split_13415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13419;

  corral_source_split_13419:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_13420;

  corral_source_split_13420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13426;

  corral_source_split_13426:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_13427;

  corral_source_split_13427:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_13428;

  corral_source_split_13428:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_13429;

  corral_source_split_13429:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_13430;

  corral_source_split_13430:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 57888);
    goto corral_source_split_13431;

  corral_source_split_13431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_13484;

  corral_source_split_13484:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_13485;

  corral_source_split_13485:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(736, 1));
    goto corral_source_split_13486;

  corral_source_split_13486:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_13487;

  corral_source_split_13487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2778} $i50 := memcmp($p47, $p49, 6);
    call {:si_unique_call 2779} {:cexpr "tmp___3"} boogie_si_record_i32($i50);
    goto corral_source_split_13488;

  corral_source_split_13488:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 0);
    goto corral_source_split_13489;

  corral_source_split_13489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p6, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13493;

  corral_source_split_13493:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_13494;

  corral_source_split_13494:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_13495;

  corral_source_split_13495:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.0, $p54);
    goto corral_source_split_13496;

  corral_source_split_13496:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i55);
    goto corral_source_split_13497;

  corral_source_split_13497:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 57888);
    goto corral_source_split_13498;

  corral_source_split_13498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb27;

  $bb27:
    assume !($i57 == 1);
    goto corral_source_split_13505;

  corral_source_split_13505:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13506;

  corral_source_split_13506:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_13507;

  corral_source_split_13507:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_13508;

  corral_source_split_13508:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.0, $p60);
    goto corral_source_split_13509;

  corral_source_split_13509:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    goto corral_source_split_13510;

  corral_source_split_13510:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 57896);
    goto corral_source_split_13511;

  corral_source_split_13511:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_13517;

  corral_source_split_13517:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_13518;

  corral_source_split_13518:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p6, $mul.ref(0, 364320)), $mul.ref(363992, 1));
    goto corral_source_split_13519;

  corral_source_split_13519:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_13520;

  corral_source_split_13520:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p6, $mul.ref(0, 364320)), $mul.ref(364000, 1));
    goto corral_source_split_13521;

  corral_source_split_13521:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_13522;

  corral_source_split_13522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2781} $i76 := be_cmd_pmac_add($p6, $p71, $i73, $p75, 0);
    call {:si_unique_call 2782} {:cexpr "status"} boogie_si_record_i32($i76);
    goto corral_source_split_13523;

  corral_source_split_13523:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_13524;

  corral_source_split_13524:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.29, $p4);
    goto corral_source_split_13528;

  corral_source_split_13528:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i8.i1($i78);
    goto corral_source_split_13529;

  corral_source_split_13529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(485, 1));
    goto corral_source_split_13467;

  corral_source_split_13467:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.0, $p84);
    goto corral_source_split_13468;

  corral_source_split_13468:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i64($i85);
    call {:si_unique_call 2775} {:cexpr "__len"} boogie_si_record_i64($i86);
    goto corral_source_split_13469;

  corral_source_split_13469:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(736, 1));
    goto corral_source_split_13470;

  corral_source_split_13470:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_13471;

  corral_source_split_13471:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_13472;

  corral_source_split_13472:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_13473;

  corral_source_split_13473:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_351 := $M.0;
    cmdloc_dummy_var_352 := $M.0;
    call {:si_unique_call 2776} cmdloc_dummy_var_353 := $memcpy.i8(cmdloc_dummy_var_351, cmdloc_dummy_var_352, $p88, $p90, $i86, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_353;
    goto corral_source_split_13474;

  corral_source_split_13474:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_13424;

  corral_source_split_13424:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb37:
    assume $i79 == 1;
    goto corral_source_split_13531;

  corral_source_split_13531:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p6, $mul.ref(0, 364320)), $mul.ref(363992, 1));
    goto corral_source_split_13532;

  corral_source_split_13532:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_13533;

  corral_source_split_13533:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.54, $p3);
    goto corral_source_split_13534;

  corral_source_split_13534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2783} vslice_dummy_var_564 := be_cmd_pmac_del($p6, $i81, $i82, 0);
    goto corral_source_split_13535;

  corral_source_split_13535:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i77 == 1;
    goto corral_source_split_13526;

  corral_source_split_13526:
    assume {:verifier.code 0} true;
    $i45 := $i76;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_13476;

  corral_source_split_13476:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p6, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13477;

  corral_source_split_13477:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_13478;

  corral_source_split_13478:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_13479;

  corral_source_split_13479:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_13480;

  corral_source_split_13480:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_13481;

  corral_source_split_13481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2777} vslice_dummy_var_562 := dev_err.ref.ref.ref($p93, .str.110, $p95);
    goto corral_source_split_13482;

  corral_source_split_13482:
    assume {:verifier.code 0} true;
    $i18 := $i45;
    goto $bb6;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p6, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_13500;

  corral_source_split_13500:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_13501;

  corral_source_split_13501:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_13502;

  corral_source_split_13502:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_13503;

  corral_source_split_13503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb30;

  $bb31:
    assume $i67 == 1;
    goto corral_source_split_13513;

  corral_source_split_13513:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p2);
    goto corral_source_split_13514;

  corral_source_split_13514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2780} vslice_dummy_var_563 := be_cmd_get_mac_from_list($p6, $p68, $p4, $p3, 0);
    goto corral_source_split_13515;

  corral_source_split_13515:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb26;

  $bb22:
    assume $i51 == 1;
    goto corral_source_split_13491;

  corral_source_split_13491:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_13433;

  corral_source_split_13433:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13434;

  corral_source_split_13434:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_13435;

  corral_source_split_13435:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_13436;

  corral_source_split_13436:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p27);
    goto corral_source_split_13437;

  corral_source_split_13437:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_13438;

  corral_source_split_13438:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 57896);
    goto corral_source_split_13439;

  corral_source_split_13439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb10;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_13441;

  corral_source_split_13441:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_13442;

  corral_source_split_13442:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_13443;

  corral_source_split_13443:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_13444;

  corral_source_split_13444:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_13445;

  corral_source_split_13445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb10;

  $bb13:
    assume $i34 == 1;
    goto corral_source_split_13447;

  corral_source_split_13447:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p2);
    goto corral_source_split_13448;

  corral_source_split_13448:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 364320)), $mul.ref(363992, 1));
    goto corral_source_split_13449;

  corral_source_split_13449:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_13450;

  corral_source_split_13450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2771} $i38 := be_cmd_mac_addr_query($p6, $p35, 0, $i37, 0);
    call {:si_unique_call 2772} {:cexpr "status"} boogie_si_record_i32($i38);
    goto corral_source_split_13451;

  corral_source_split_13451:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_13452;

  corral_source_split_13452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i39 == 1);
    goto corral_source_split_13461;

  corral_source_split_13461:
    assume {:verifier.code 0} true;
    $i45 := $i38;
    goto $bb20;

  $bb15:
    assume $i39 == 1;
    goto corral_source_split_13454;

  corral_source_split_13454:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p2);
    goto corral_source_split_13455;

  corral_source_split_13455:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_13456;

  corral_source_split_13456:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_13457;

  corral_source_split_13457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2773} $i43 := memcmp($p40, $p42, 6);
    call {:si_unique_call 2774} {:cexpr "tmp___2"} boogie_si_record_i32($i43);
    goto corral_source_split_13458;

  corral_source_split_13458:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_13459;

  corral_source_split_13459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i44 == 1);
    goto corral_source_split_13465;

  corral_source_split_13465:
    assume {:verifier.code 0} true;
    $i45 := $i38;
    goto $bb20;

  $bb17:
    assume $i44 == 1;
    goto corral_source_split_13463;

  corral_source_split_13463:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_13422;

  corral_source_split_13422:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 99);
    goto $bb6;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_13417;

  corral_source_split_13417:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;
}



const eth_validate_addr: ref;

axiom eth_validate_addr == $sub.ref(0, 774238);

procedure eth_validate_addr($p0: ref) returns ($r: i32);



const be_change_mtu: ref;

axiom be_change_mtu == $sub.ref(0, 775270);

procedure be_change_mtu($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation be_change_mtu($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $i10: i32;
  var vslice_dummy_var_565: i32;
  var vslice_dummy_var_566: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2784} {:cexpr "be_change_mtu:arg:new_mtu"} boogie_si_record_i32($i1);
    goto corral_source_split_13537;

  corral_source_split_13537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2785} $p2 := netdev_priv($p0);
    goto corral_source_split_13538;

  corral_source_split_13538:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_13539;

  corral_source_split_13539:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i1, 255);
    goto corral_source_split_13540;

  corral_source_split_13540:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_13547;

  corral_source_split_13547:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i1, 9000);
    goto corral_source_split_13548;

  corral_source_split_13548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13552;

  corral_source_split_13552:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_13553;

  corral_source_split_13553:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_13554;

  corral_source_split_13554:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(440, 1));
    goto corral_source_split_13555;

  corral_source_split_13555:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_13556;

  corral_source_split_13556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2787} vslice_dummy_var_566 := _dev_info.ref.ref.i32.i32($p13, .str.112, $i15, $i1);
    goto corral_source_split_13557;

  corral_source_split_13557:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(440, 1));
    goto corral_source_split_13558;

  corral_source_split_13558:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i1);
    goto corral_source_split_13559;

  corral_source_split_13559:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_13550;

  corral_source_split_13550:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13542;

  corral_source_split_13542:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_13543;

  corral_source_split_13543:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_13544;

  corral_source_split_13544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2786} vslice_dummy_var_565 := _dev_info.ref.ref.i32.i32($p8, .str.111, 256, 9000);
    goto corral_source_split_13545;

  corral_source_split_13545:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const be_get_stats64: ref;

axiom be_get_stats64 == $sub.ref(0, 776302);

procedure be_get_stats64($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_get_stats64($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $i19: i64;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i1;
  var $i25: i8;
  var $i26: i1;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $p40: ref;
  var $i41: i32;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p48: ref;
  var $i49: i32;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i12: i32;
  var $p13: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p71: ref;
  var $i72: i32;
  var $p74: ref;
  var $i75: i64;
  var $p77: ref;
  var $i78: i64;
  var $p79: ref;
  var $i80: i1;
  var $i81: i8;
  var $i82: i1;
  var $i83: i64;
  var $i84: i64;
  var $p85: ref;
  var $i86: i64;
  var $i87: i64;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i64;
  var $p92: ref;
  var $i93: i32;
  var $p94: ref;
  var $i95: i32;
  var $i96: i1;
  var $i68: i32;
  var $p69: ref;
  var $p97: ref;
  var $i98: i32;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $p102: ref;
  var $i103: i32;
  var $i104: i32;
  var $p105: ref;
  var $i106: i32;
  var $i107: i32;
  var $p108: ref;
  var $i109: i32;
  var $i110: i32;
  var $p111: ref;
  var $i112: i32;
  var $i113: i32;
  var $p114: ref;
  var $i115: i32;
  var $i116: i32;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $p120: ref;
  var $i121: i32;
  var $i122: i32;
  var $p123: ref;
  var $i124: i32;
  var $i125: i32;
  var $i126: i64;
  var $p127: ref;
  var $p128: ref;
  var $i129: i32;
  var $p130: ref;
  var $i131: i32;
  var $i132: i32;
  var $p133: ref;
  var $i134: i32;
  var $i135: i32;
  var $i136: i64;
  var $p137: ref;
  var $p138: ref;
  var $i139: i32;
  var $i140: i64;
  var $p141: ref;
  var $p142: ref;
  var $i143: i32;
  var $i144: i64;
  var $p145: ref;
  var $p146: ref;
  var $i147: i32;
  var $p148: ref;
  var $i149: i32;
  var $i150: i32;
  var $p151: ref;
  var $i152: i32;
  var $i153: i32;
  var $i154: i64;
  var $p155: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13561;

  corral_source_split_13561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2788} $p2 := netdev_priv($p0);
    goto corral_source_split_13562;

  corral_source_split_13562:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_13563;

  corral_source_split_13563:
    assume {:verifier.code 0} true;
    goto corral_source_split_13564;

  corral_source_split_13564:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(136368, 1));
    goto corral_source_split_13565;

  corral_source_split_13565:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_13566;

  corral_source_split_13566:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64(0);
    goto corral_source_split_13567;

  corral_source_split_13567:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p6, $mul.ref($i7, 24760));
    goto corral_source_split_13568;

  corral_source_split_13568:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_13569;

  corral_source_split_13569:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_13570;

  corral_source_split_13570:
    assume {:verifier.code 0} true;
    $i11 := $ult.i32(0, $i10);
    goto corral_source_split_13571;

  corral_source_split_13571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(4136, 1));
    goto corral_source_split_13625;

  corral_source_split_13625:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_13626;

  corral_source_split_13626:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64(0);
    goto corral_source_split_13627;

  corral_source_split_13627:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p62, $mul.ref($i63, 16528));
    goto corral_source_split_13628;

  corral_source_split_13628:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(4132, 1));
    goto corral_source_split_13629;

  corral_source_split_13629:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_13630;

  corral_source_split_13630:
    assume {:verifier.code 0} true;
    $i67 := $ult.i32(0, $i66);
    goto corral_source_split_13631;

  corral_source_split_13631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    $p97 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(36, 1));
    goto corral_source_split_13666;

  corral_source_split_13666:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    $p99 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(40, 1));
    goto corral_source_split_13667;

  corral_source_split_13667:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p99);
    goto corral_source_split_13668;

  corral_source_split_13668:
    assume {:verifier.code 0} true;
    $i101 := $add.i32($i98, $i100);
    $p102 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(56, 1));
    goto corral_source_split_13669;

  corral_source_split_13669:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_13670;

  corral_source_split_13670:
    assume {:verifier.code 0} true;
    $i104 := $add.i32($i101, $i103);
    $p105 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(60, 1));
    goto corral_source_split_13671;

  corral_source_split_13671:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.0, $p105);
    goto corral_source_split_13672;

  corral_source_split_13672:
    assume {:verifier.code 0} true;
    $i107 := $add.i32($i104, $i106);
    $p108 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(64, 1));
    goto corral_source_split_13673;

  corral_source_split_13673:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.0, $p108);
    goto corral_source_split_13674;

  corral_source_split_13674:
    assume {:verifier.code 0} true;
    $i110 := $add.i32($i107, $i109);
    $p111 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(72, 1));
    goto corral_source_split_13675;

  corral_source_split_13675:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    goto corral_source_split_13676;

  corral_source_split_13676:
    assume {:verifier.code 0} true;
    $i113 := $add.i32($i110, $i112);
    $p114 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(76, 1));
    goto corral_source_split_13677;

  corral_source_split_13677:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    goto corral_source_split_13678;

  corral_source_split_13678:
    assume {:verifier.code 0} true;
    $i116 := $add.i32($i113, $i115);
    $p117 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(80, 1));
    goto corral_source_split_13679;

  corral_source_split_13679:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_13680;

  corral_source_split_13680:
    assume {:verifier.code 0} true;
    $i119 := $add.i32($i116, $i118);
    $p120 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(84, 1));
    goto corral_source_split_13681;

  corral_source_split_13681:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    goto corral_source_split_13682;

  corral_source_split_13682:
    assume {:verifier.code 0} true;
    $i122 := $add.i32($i119, $i121);
    $p123 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(88, 1));
    goto corral_source_split_13683;

  corral_source_split_13683:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p123);
    goto corral_source_split_13684;

  corral_source_split_13684:
    assume {:verifier.code 0} true;
    $i125 := $add.i32($i122, $i124);
    goto corral_source_split_13685;

  corral_source_split_13685:
    assume {:verifier.code 0} true;
    $i126 := $zext.i32.i64($i125);
    goto corral_source_split_13686;

  corral_source_split_13686:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_13687;

  corral_source_split_13687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p127, $i126);
    $p128 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(56, 1));
    goto corral_source_split_13688;

  corral_source_split_13688:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p128);
    $p130 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(60, 1));
    goto corral_source_split_13689;

  corral_source_split_13689:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_13690;

  corral_source_split_13690:
    assume {:verifier.code 0} true;
    $i132 := $add.i32($i129, $i131);
    $p133 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(64, 1));
    goto corral_source_split_13691;

  corral_source_split_13691:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    goto corral_source_split_13692;

  corral_source_split_13692:
    assume {:verifier.code 0} true;
    $i135 := $add.i32($i132, $i134);
    goto corral_source_split_13693;

  corral_source_split_13693:
    assume {:verifier.code 0} true;
    $i136 := $zext.i32.i64($i135);
    goto corral_source_split_13694;

  corral_source_split_13694:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_13695;

  corral_source_split_13695:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p137, $i136);
    $p138 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(36, 1));
    goto corral_source_split_13696;

  corral_source_split_13696:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.0, $p138);
    goto corral_source_split_13697;

  corral_source_split_13697:
    assume {:verifier.code 0} true;
    $i140 := $zext.i32.i64($i139);
    goto corral_source_split_13698;

  corral_source_split_13698:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_13699;

  corral_source_split_13699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p141, $i140);
    $p142 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(40, 1));
    goto corral_source_split_13700;

  corral_source_split_13700:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.0, $p142);
    goto corral_source_split_13701;

  corral_source_split_13701:
    assume {:verifier.code 0} true;
    $i144 := $zext.i32.i64($i143);
    goto corral_source_split_13702;

  corral_source_split_13702:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_13703;

  corral_source_split_13703:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p145, $i144);
    $p146 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(116, 1));
    goto corral_source_split_13704;

  corral_source_split_13704:
    assume {:verifier.code 0} true;
    $i147 := $load.i32($M.0, $p146);
    $p148 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(120, 1));
    goto corral_source_split_13705;

  corral_source_split_13705:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.0, $p148);
    goto corral_source_split_13706;

  corral_source_split_13706:
    assume {:verifier.code 0} true;
    $i150 := $add.i32($i147, $i149);
    $p151 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(8, 1));
    goto corral_source_split_13707;

  corral_source_split_13707:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.0, $p151);
    goto corral_source_split_13708;

  corral_source_split_13708:
    assume {:verifier.code 0} true;
    $i153 := $add.i32($i150, $i152);
    goto corral_source_split_13709;

  corral_source_split_13709:
    assume {:verifier.code 0} true;
    $i154 := $zext.i32.i64($i153);
    goto corral_source_split_13710;

  corral_source_split_13710:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_13711;

  corral_source_split_13711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p155, $i154);
    goto corral_source_split_13712;

  corral_source_split_13712:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  $bb13:
    assume $i67 == 1;
    goto corral_source_split_13633;

  corral_source_split_13633:
    assume {:verifier.code 0} true;
    $i68, $p69 := 0, $p64;
    goto $bb16;

  $bb16:
    call $p71, $i72, $p74, $i75, $p77, $i78, $p79, $i80, $i81, $i82, $i83, $i84, $p85, $i86, $i87, $p88, $p89, $i90, $i91, $p92, $i93, $p94, $i95, $i96, $i68, $p69 := be_get_stats64_loop_$bb16($p1, $p65, $p71, $i72, $p74, $i75, $p77, $i78, $p79, $i80, $i81, $i82, $i83, $i84, $p85, $i86, $i87, $p88, $p89, $i90, $i91, $p92, $i93, $p94, $i95, $i96, $i68, $p69);
    goto $bb16_last;

  corral_source_split_13635:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_13637;

  corral_source_split_13637:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call $p71, $i72, $p74, $i75, $p77, $i78, $p79, $i80, $i81, $i82, $i83, $i84 := be_get_stats64_loop_$bb18($p71, $i72, $p74, $i75, $p77, $i78, $p79, $i80, $i81, $i82, $i83, $i84, $p69);
    goto $bb18_last;

  corral_source_split_13639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2796} $i72 := u64_stats_fetch_begin_bh($p71);
    call {:si_unique_call 2797} {:cexpr "start"} boogie_si_record_i32($i72);
    goto corral_source_split_13640;

  corral_source_split_13640:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p69, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(8, 1));
    goto corral_source_split_13641;

  corral_source_split_13641:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.0, $p74);
    call {:si_unique_call 2798} {:cexpr "pkts"} boogie_si_record_i64($i75);
    goto corral_source_split_13642;

  corral_source_split_13642:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p69, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(0, 1));
    goto corral_source_split_13643;

  corral_source_split_13643:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.0, $p77);
    call {:si_unique_call 2799} {:cexpr "bytes"} boogie_si_record_i64($i78);
    $p79 := $add.ref($add.ref($add.ref($p69, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(52, 1));
    goto corral_source_split_13644;

  corral_source_split_13644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2800} $i80 := u64_stats_fetch_retry_bh($p79, $i72);
    goto corral_source_split_13645;

  corral_source_split_13645:
    assume {:verifier.code 0} true;
    $i81 := $zext.i1.i8($i80);
    call {:si_unique_call 2801} {:cexpr "tmp___1"} boogie_si_record_i8($i81);
    goto corral_source_split_13646;

  corral_source_split_13646:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i8.i1($i81);
    goto corral_source_split_13647;

  corral_source_split_13647:
    assume {:verifier.code 0} true;
    $i83, $i84 := $i75, $i78;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_13649;

  corral_source_split_13649:
    assume {:verifier.code 0} true;
    $i86 := $load.i64($M.0, $p85);
    goto corral_source_split_13650;

  corral_source_split_13650:
    assume {:verifier.code 0} true;
    $i87 := $add.i64($i86, $i83);
    goto corral_source_split_13651;

  corral_source_split_13651:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_13652;

  corral_source_split_13652:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p88, $i87);
    goto corral_source_split_13653;

  corral_source_split_13653:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_13654;

  corral_source_split_13654:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.0, $p89);
    goto corral_source_split_13655;

  corral_source_split_13655:
    assume {:verifier.code 0} true;
    $i91 := $add.i64($i90, $i84);
    goto corral_source_split_13656;

  corral_source_split_13656:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_13657;

  corral_source_split_13657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p92, $i91);
    goto corral_source_split_13658;

  corral_source_split_13658:
    assume {:verifier.code 0} true;
    $i93 := $add.i32($i68, 1);
    call {:si_unique_call 2802} {:cexpr "i"} boogie_si_record_i32($i93);
    goto corral_source_split_13659;

  corral_source_split_13659:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p69, $mul.ref(1, 16528));
    goto corral_source_split_13660;

  corral_source_split_13660:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p65);
    goto corral_source_split_13661;

  corral_source_split_13661:
    assume {:verifier.code 0} true;
    $i96 := $ult.i32($i93, $i95);
    goto corral_source_split_13662;

  corral_source_split_13662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i96 == 1);
    goto corral_source_split_13664;

  corral_source_split_13664:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb22:
    assume $i96 == 1;
    assume {:verifier.code 0} true;
    $i68, $p69 := $i93, $p94;
    goto $bb22_dummy;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb19_dummy;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_13573;

  corral_source_split_13573:
    assume {:verifier.code 0} true;
    $i12, $p13 := 0, $p8;
    goto $bb4;

  $bb4:
    call $p15, $i16, $p18, $i19, $p21, $i22, $p23, $i24, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $p32, $p33, $i34, $i35, $p36, $p37, $i38, $p40, $i41, $i42, $i43, $p44, $p45, $i46, $p48, $i49, $p51, $i52, $i53, $i54, $i55, $p56, $i57, $p58, $i59, $i60, $i12, $p13 := be_get_stats64_loop_$bb4($p1, $p9, $p15, $i16, $p18, $i19, $p21, $i22, $p23, $i24, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $p32, $p33, $i34, $i35, $p36, $p37, $i38, $p40, $i41, $i42, $i43, $p44, $p45, $i46, $p48, $i49, $p51, $i52, $i53, $i54, $i55, $p56, $i57, $p58, $i59, $i60, $i12, $p13);
    goto $bb4_last;

  corral_source_split_13575:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_13577;

  corral_source_split_13577:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call $p15, $i16, $p18, $i19, $p21, $i22, $p23, $i24, $i25, $i26, $i27, $i28 := be_get_stats64_loop_$bb6($p15, $i16, $p18, $i19, $p21, $i22, $p23, $i24, $i25, $i26, $i27, $i28, $p13);
    goto $bb6_last;

  corral_source_split_13579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2789} $i16 := u64_stats_fetch_begin_bh($p15);
    call {:si_unique_call 2790} {:cexpr "start"} boogie_si_record_i32($i16);
    goto corral_source_split_13580;

  corral_source_split_13580:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(8, 1));
    goto corral_source_split_13581;

  corral_source_split_13581:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    call {:si_unique_call 2791} {:cexpr "pkts"} boogie_si_record_i64($i19);
    goto corral_source_split_13582;

  corral_source_split_13582:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(0, 1));
    goto corral_source_split_13583;

  corral_source_split_13583:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    call {:si_unique_call 2792} {:cexpr "bytes"} boogie_si_record_i64($i22);
    $p23 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(60, 1));
    goto corral_source_split_13584;

  corral_source_split_13584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2793} $i24 := u64_stats_fetch_retry_bh($p23, $i16);
    goto corral_source_split_13585;

  corral_source_split_13585:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i8($i24);
    call {:si_unique_call 2794} {:cexpr "tmp___0"} boogie_si_record_i8($i25);
    goto corral_source_split_13586;

  corral_source_split_13586:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_13587;

  corral_source_split_13587:
    assume {:verifier.code 0} true;
    $i27, $i28 := $i19, $i22;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_13589;

  corral_source_split_13589:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    goto corral_source_split_13590;

  corral_source_split_13590:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, $i27);
    goto corral_source_split_13591;

  corral_source_split_13591:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_13592;

  corral_source_split_13592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p32, $i31);
    goto corral_source_split_13593;

  corral_source_split_13593:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_13594;

  corral_source_split_13594:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_13595;

  corral_source_split_13595:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, $i28);
    goto corral_source_split_13596;

  corral_source_split_13596:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_13597;

  corral_source_split_13597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p36, $i35);
    goto corral_source_split_13598;

  corral_source_split_13598:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_13599;

  corral_source_split_13599:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_13600;

  corral_source_split_13600:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(48, 1));
    goto corral_source_split_13601;

  corral_source_split_13601:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_13602;

  corral_source_split_13602:
    assume {:verifier.code 0} true;
    $i42 := $zext.i32.i64($i41);
    goto corral_source_split_13603;

  corral_source_split_13603:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i38, $i42);
    goto corral_source_split_13604;

  corral_source_split_13604:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_13605;

  corral_source_split_13605:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p44, $i43);
    goto corral_source_split_13606;

  corral_source_split_13606:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_13607;

  corral_source_split_13607:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_13608;

  corral_source_split_13608:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(32, 1));
    goto corral_source_split_13609;

  corral_source_split_13609:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_13610;

  corral_source_split_13610:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(36, 1));
    goto corral_source_split_13611;

  corral_source_split_13611:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_13612;

  corral_source_split_13612:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i49, $i52);
    goto corral_source_split_13613;

  corral_source_split_13613:
    assume {:verifier.code 0} true;
    $i54 := $zext.i32.i64($i53);
    goto corral_source_split_13614;

  corral_source_split_13614:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i46, $i54);
    goto corral_source_split_13615;

  corral_source_split_13615:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_13616;

  corral_source_split_13616:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p56, $i55);
    goto corral_source_split_13617;

  corral_source_split_13617:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i12, 1);
    call {:si_unique_call 2795} {:cexpr "i"} boogie_si_record_i32($i57);
    goto corral_source_split_13618;

  corral_source_split_13618:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p13, $mul.ref(1, 24760));
    goto corral_source_split_13619;

  corral_source_split_13619:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p9);
    goto corral_source_split_13620;

  corral_source_split_13620:
    assume {:verifier.code 0} true;
    $i60 := $ult.i32($i57, $i59);
    goto corral_source_split_13621;

  corral_source_split_13621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i60 == 1);
    goto corral_source_split_13623;

  corral_source_split_13623:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i12, $p13 := $i57, $p58;
    goto $bb10_dummy;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb7_dummy;

  $bb19_dummy:
    assume false;
    return;

  $bb18_last:
    $p71 := $add.ref($add.ref($add.ref($p69, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(52, 1));
    goto corral_source_split_13639;

  $bb22_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_13635;

  $bb7_dummy:
    assume false;
    return;

  $bb6_last:
    $p15 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(60, 1));
    goto corral_source_split_13579;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_13575;
}



const be_vlan_add_vid: ref;

axiom be_vlan_add_vid == $sub.ref(0, 777334);

procedure be_vlan_add_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_vlan_add_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $p43: ref;
  var $i44: i16;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i54: i32;
  var $i55: i16;
  var $p56: ref;
  var $i57: i32;
  var $i58: i64;
  var $p60: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2803} {:cexpr "be_vlan_add_vid:arg:proto"} boogie_si_record_i16($i1);
    call {:si_unique_call 2804} {:cexpr "be_vlan_add_vid:arg:vid"} boogie_si_record_i16($i2);
    goto corral_source_split_13714;

  corral_source_split_13714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2805} $p3 := netdev_priv($p0);
    goto corral_source_split_13715;

  corral_source_split_13715:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_13716;

  corral_source_split_13716:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13717;

  corral_source_split_13717:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_13718;

  corral_source_split_13718:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_13719;

  corral_source_split_13719:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_13720;

  corral_source_split_13720:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_13721;

  corral_source_split_13721:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 57888);
    goto corral_source_split_13722;

  corral_source_split_13722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13742;

  corral_source_split_13742:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_13743;

  corral_source_split_13743:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_13744;

  corral_source_split_13744:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    goto corral_source_split_13745;

  corral_source_split_13745:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_13746;

  corral_source_split_13746:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 57888);
    goto corral_source_split_13747;

  corral_source_split_13747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i27 == 1);
    goto corral_source_split_13752;

  corral_source_split_13752:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13753;

  corral_source_split_13753:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_13754;

  corral_source_split_13754:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_13755;

  corral_source_split_13755:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.0, $p30);
    goto corral_source_split_13756;

  corral_source_split_13756:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_13757;

  corral_source_split_13757:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 57896);
    goto corral_source_split_13758;

  corral_source_split_13758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i2);
    goto corral_source_split_13762;

  corral_source_split_13762:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_13763;

  corral_source_split_13763:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359346, 1)), $mul.ref($i37, 1));
    goto corral_source_split_13764;

  corral_source_split_13764:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, 1);
    goto corral_source_split_13765;

  corral_source_split_13765:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359344, 1));
    goto corral_source_split_13766;

  corral_source_split_13766:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_13767;

  corral_source_split_13767:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_13768;

  corral_source_split_13768:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(364298, 1));
    goto corral_source_split_13769;

  corral_source_split_13769:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.0, $p43);
    goto corral_source_split_13770;

  corral_source_split_13770:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_13771;

  corral_source_split_13771:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i45, 1);
    goto corral_source_split_13772;

  corral_source_split_13772:
    assume {:verifier.code 0} true;
    $i47 := $sle.i32($i42, $i46);
    goto corral_source_split_13773;

  corral_source_split_13773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i49 := 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_13778;

  corral_source_split_13778:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 0);
    goto corral_source_split_13779;

  corral_source_split_13779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i50 == 1);
    goto corral_source_split_13790;

  corral_source_split_13790:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i2);
    goto corral_source_split_13791;

  corral_source_split_13791:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i57);
    goto corral_source_split_13792;

  corral_source_split_13792:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359346, 1)), $mul.ref($i58, 1));
    goto corral_source_split_13793;

  corral_source_split_13793:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, 0);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i21 := $i49;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_13740;

  corral_source_split_13740:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb22:
    assume $i50 == 1;
    goto corral_source_split_13781;

  corral_source_split_13781:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359344, 1));
    goto corral_source_split_13782;

  corral_source_split_13782:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p51);
    goto corral_source_split_13783;

  corral_source_split_13783:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_13784;

  corral_source_split_13784:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i53, 1);
    goto corral_source_split_13785;

  corral_source_split_13785:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i54);
    goto corral_source_split_13786;

  corral_source_split_13786:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359344, 1));
    goto corral_source_split_13787;

  corral_source_split_13787:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p56, $i55);
    goto corral_source_split_13788;

  corral_source_split_13788:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i47 == 1;
    goto corral_source_split_13775;

  corral_source_split_13775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2806} $i48 := be_vid_config($p4);
    call {:si_unique_call 2807} {:cexpr "status"} boogie_si_record_i32($i48);
    goto corral_source_split_13776;

  corral_source_split_13776:
    assume {:verifier.code 0} true;
    $i49 := $i48;
    goto $bb21;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i2);
    goto corral_source_split_13749;

  corral_source_split_13749:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_13750;

  corral_source_split_13750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb15;

  $bb16:
    assume $i35 == 1;
    goto corral_source_split_13760;

  corral_source_split_13760:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb11;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_13724;

  corral_source_split_13724:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13725;

  corral_source_split_13725:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_13726;

  corral_source_split_13726:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_13727;

  corral_source_split_13727:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    goto corral_source_split_13728;

  corral_source_split_13728:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_13729;

  corral_source_split_13729:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 57896);
    goto corral_source_split_13730;

  corral_source_split_13730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_13732;

  corral_source_split_13732:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_13733;

  corral_source_split_13733:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_13734;

  corral_source_split_13734:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_13735;

  corral_source_split_13735:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_13736;

  corral_source_split_13736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb3;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_13738;

  corral_source_split_13738:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 22);
    goto $bb8;
}



const be_vlan_rem_vid: ref;

axiom be_vlan_rem_vid == $sub.ref(0, 778366);

procedure be_vlan_rem_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_vlan_rem_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $p43: ref;
  var $i44: i16;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i16;
  var $i52: i32;
  var $i53: i32;
  var $i54: i16;
  var $p55: ref;
  var $i56: i32;
  var $i57: i64;
  var $p59: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2808} {:cexpr "be_vlan_rem_vid:arg:proto"} boogie_si_record_i16($i1);
    call {:si_unique_call 2809} {:cexpr "be_vlan_rem_vid:arg:vid"} boogie_si_record_i16($i2);
    goto corral_source_split_13795;

  corral_source_split_13795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2810} $p3 := netdev_priv($p0);
    goto corral_source_split_13796;

  corral_source_split_13796:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_13797;

  corral_source_split_13797:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13798;

  corral_source_split_13798:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_13799;

  corral_source_split_13799:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_13800;

  corral_source_split_13800:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_13801;

  corral_source_split_13801:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_13802;

  corral_source_split_13802:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 57888);
    goto corral_source_split_13803;

  corral_source_split_13803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13823;

  corral_source_split_13823:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_13824;

  corral_source_split_13824:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_13825;

  corral_source_split_13825:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    goto corral_source_split_13826;

  corral_source_split_13826:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_13827;

  corral_source_split_13827:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 57888);
    goto corral_source_split_13828;

  corral_source_split_13828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i27 == 1);
    goto corral_source_split_13833;

  corral_source_split_13833:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13834;

  corral_source_split_13834:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_13835;

  corral_source_split_13835:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_13836;

  corral_source_split_13836:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.0, $p30);
    goto corral_source_split_13837;

  corral_source_split_13837:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_13838;

  corral_source_split_13838:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 57896);
    goto corral_source_split_13839;

  corral_source_split_13839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i2);
    goto corral_source_split_13843;

  corral_source_split_13843:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_13844;

  corral_source_split_13844:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359346, 1)), $mul.ref($i37, 1));
    goto corral_source_split_13845;

  corral_source_split_13845:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, 0);
    goto corral_source_split_13846;

  corral_source_split_13846:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359344, 1));
    goto corral_source_split_13847;

  corral_source_split_13847:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_13848;

  corral_source_split_13848:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_13849;

  corral_source_split_13849:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(364298, 1));
    goto corral_source_split_13850;

  corral_source_split_13850:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.0, $p43);
    goto corral_source_split_13851;

  corral_source_split_13851:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_13852;

  corral_source_split_13852:
    assume {:verifier.code 0} true;
    $i46 := $sle.i32($i42, $i45);
    goto corral_source_split_13853;

  corral_source_split_13853:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i48 := 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_13858;

  corral_source_split_13858:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_13859;

  corral_source_split_13859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i49 == 1);
    goto corral_source_split_13870;

  corral_source_split_13870:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i2);
    goto corral_source_split_13871;

  corral_source_split_13871:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i56);
    goto corral_source_split_13872;

  corral_source_split_13872:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359346, 1)), $mul.ref($i57, 1));
    goto corral_source_split_13873;

  corral_source_split_13873:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p59, 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i21 := $i48;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_13821;

  corral_source_split_13821:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb22:
    assume $i49 == 1;
    goto corral_source_split_13861;

  corral_source_split_13861:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359344, 1));
    goto corral_source_split_13862;

  corral_source_split_13862:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.0, $p50);
    goto corral_source_split_13863;

  corral_source_split_13863:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_13864;

  corral_source_split_13864:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32($i52, 1);
    goto corral_source_split_13865;

  corral_source_split_13865:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i53);
    goto corral_source_split_13866;

  corral_source_split_13866:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359344, 1));
    goto corral_source_split_13867;

  corral_source_split_13867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p55, $i54);
    goto corral_source_split_13868;

  corral_source_split_13868:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i46 == 1;
    goto corral_source_split_13855;

  corral_source_split_13855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2811} $i47 := be_vid_config($p4);
    call {:si_unique_call 2812} {:cexpr "status"} boogie_si_record_i32($i47);
    goto corral_source_split_13856;

  corral_source_split_13856:
    assume {:verifier.code 0} true;
    $i48 := $i47;
    goto $bb21;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i2);
    goto corral_source_split_13830;

  corral_source_split_13830:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_13831;

  corral_source_split_13831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb15;

  $bb16:
    assume $i35 == 1;
    goto corral_source_split_13841;

  corral_source_split_13841:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb11;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_13805;

  corral_source_split_13805:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13806;

  corral_source_split_13806:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_13807;

  corral_source_split_13807:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_13808;

  corral_source_split_13808:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    goto corral_source_split_13809;

  corral_source_split_13809:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_13810;

  corral_source_split_13810:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 57896);
    goto corral_source_split_13811;

  corral_source_split_13811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_13813;

  corral_source_split_13813:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_13814;

  corral_source_split_13814:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_13815;

  corral_source_split_13815:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_13816;

  corral_source_split_13816:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_13817;

  corral_source_split_13817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb3;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_13819;

  corral_source_split_13819:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 22);
    goto $bb8;
}



const be_netpoll: ref;

axiom be_netpoll == $sub.ref(0, 779398);

procedure be_netpoll($p0: ref);
  free requires assertsPassed;
  modifies $M.29, $M.41, $M.0, $M.21, $M.42, $CurrAddr;



implementation be_netpoll($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i16;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i10: i32;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13875;

  corral_source_split_13875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2813} $p1 := netdev_priv($p0);
    goto corral_source_split_13876;

  corral_source_split_13876:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13877;

  corral_source_split_13877:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(488, 1));
    goto corral_source_split_13878;

  corral_source_split_13878:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_13879;

  corral_source_split_13879:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64(0);
    goto corral_source_split_13880;

  corral_source_split_13880:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 272));
    goto corral_source_split_13881;

  corral_source_split_13881:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(484, 1));
    goto corral_source_split_13882;

  corral_source_split_13882:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_13883;

  corral_source_split_13883:
    assume {:verifier.code 0} true;
    $i9 := $ult.i32(0, $i8);
    goto corral_source_split_13884;

  corral_source_split_13884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_13886;

  corral_source_split_13886:
    assume {:verifier.code 0} true;
    $i10, $p11 := 0, $p6;
    goto $bb4;

  $bb4:
    call $p12, $p13, $p15, $i16, $i17, $i18, $p19, $i20, $p21, $i22, $i23, $i10, $p11 := be_netpoll_loop_$bb4($p7, $p12, $p13, $p15, $i16, $i17, $i18, $p19, $i20, $p21, $i22, $i23, $i10, $p11);
    goto $bb4_last;

  corral_source_split_13888:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 272)), $mul.ref(264, 1));
    goto corral_source_split_13890;

  corral_source_split_13890:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_13891;

  corral_source_split_13891:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(28, 1));
    goto corral_source_split_13892;

  corral_source_split_13892:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_13893;

  corral_source_split_13893:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_13894;

  corral_source_split_13894:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_13895;

  corral_source_split_13895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2814} be_eq_notify($p13, $i18, 0, 1, 0);
    goto corral_source_split_13896;

  corral_source_split_13896:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p11, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_13897;

  corral_source_split_13897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2815} napi_schedule($p19);
    goto corral_source_split_13898;

  corral_source_split_13898:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i10, 1);
    call {:si_unique_call 2816} {:cexpr "i"} boogie_si_record_i32($i20);
    goto corral_source_split_13899;

  corral_source_split_13899:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p11, $mul.ref(1, 272));
    goto corral_source_split_13900;

  corral_source_split_13900:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p7);
    goto corral_source_split_13901;

  corral_source_split_13901:
    assume {:verifier.code 0} true;
    $i23 := $ult.i32($i20, $i22);
    goto corral_source_split_13902;

  corral_source_split_13902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    goto corral_source_split_13904;

  corral_source_split_13904:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i10, $p11 := $i20, $p21;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_13888;
}



const be_set_vf_mac: ref;

axiom be_set_vf_mac == $sub.ref(0, 780430);

procedure be_set_vf_mac($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.41, $M.0, $M.21, $M.42, $CurrAddr;



implementation be_set_vf_mac($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i16: i1;
  var $i17: i8;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i16;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i32;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $i43: i8;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i50: i32;
  var $i51: i32;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i52: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i15: i32;
  var cmdloc_dummy_var_354: [ref]i8;
  var cmdloc_dummy_var_355: [ref]i8;
  var cmdloc_dummy_var_356: [ref]i8;
  var cmdloc_dummy_var_357: [ref]i8;
  var cmdloc_dummy_var_358: [ref]i8;
  var cmdloc_dummy_var_359: [ref]i8;
  var vslice_dummy_var_567: i32;
  var vslice_dummy_var_568: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2817} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2818} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2819} $p5 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    call {:si_unique_call 2820} {:cexpr "be_set_vf_mac:arg:vf"} boogie_si_record_i32($i1);
    goto corral_source_split_13906;

  corral_source_split_13906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2821} $p6 := netdev_priv($p0);
    goto corral_source_split_13907;

  corral_source_split_13907:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_13908;

  corral_source_split_13908:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 364320)), $mul.ref(364216, 1));
    goto corral_source_split_13909;

  corral_source_split_13909:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_13910;

  corral_source_split_13910:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i1);
    goto corral_source_split_13911;

  corral_source_split_13911:
    assume {:verifier.code 0} true;
    goto corral_source_split_13912;

  corral_source_split_13912:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p3, 0);
    goto corral_source_split_13913;

  corral_source_split_13913:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 364320)), $mul.ref(364200, 1));
    goto corral_source_split_13914;

  corral_source_split_13914:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_13915;

  corral_source_split_13915:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_13916;

  corral_source_split_13916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2822} $i16 := is_valid_ether_addr($p2);
    goto corral_source_split_13922;

  corral_source_split_13922:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i8($i16);
    call {:si_unique_call 2823} {:cexpr "tmp___0"} boogie_si_record_i8($i17);
    goto corral_source_split_13923;

  corral_source_split_13923:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_13924;

  corral_source_split_13924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_13928;

  corral_source_split_13928:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_13929;

  corral_source_split_13929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i20 == 1);
    goto corral_source_split_13931;

  corral_source_split_13931:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p7, $mul.ref(0, 364320)), $mul.ref(364200, 1));
    goto corral_source_split_13932;

  corral_source_split_13932:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_13933;

  corral_source_split_13933:
    assume {:verifier.code 0} true;
    $i23 := $uge.i32($i1, $i22);
    goto corral_source_split_13934;

  corral_source_split_13934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p7, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13936;

  corral_source_split_13936:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_13937;

  corral_source_split_13937:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_13938;

  corral_source_split_13938:
    assume {:verifier.code 0} true;
    $i27 := $load.i16($M.0, $p26);
    goto corral_source_split_13939;

  corral_source_split_13939:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_13940;

  corral_source_split_13940:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 57888);
    goto corral_source_split_13941;

  corral_source_split_13941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i29 == 1);
    goto corral_source_split_13951;

  corral_source_split_13951:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p7, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13952;

  corral_source_split_13952:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_13953;

  corral_source_split_13953:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_13954;

  corral_source_split_13954:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_13955;

  corral_source_split_13955:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_13956;

  corral_source_split_13956:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 57896);
    goto corral_source_split_13957;

  corral_source_split_13957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    goto corral_source_split_13959;

  corral_source_split_13959:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p9, $mul.ref($i10, 24)), $mul.ref(8, 1));
    goto corral_source_split_13960;

  corral_source_split_13960:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_13961;

  corral_source_split_13961:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p9, $mul.ref($i10, 24)), $mul.ref(12, 1));
    goto corral_source_split_13962;

  corral_source_split_13962:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_13963;

  corral_source_split_13963:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i1, 1);
    goto corral_source_split_13964;

  corral_source_split_13964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2826} $i58 := be_cmd_pmac_del($p7, $i54, $i56, $i57);
    call {:si_unique_call 2827} {:cexpr "status"} boogie_si_record_i32($i58);
    goto corral_source_split_13965;

  corral_source_split_13965:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p9, $mul.ref($i10, 24)), $mul.ref(8, 1));
    goto corral_source_split_13966;

  corral_source_split_13966:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_13967;

  corral_source_split_13967:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p9, $mul.ref($i10, 24)), $mul.ref(12, 1));
    goto corral_source_split_13968;

  corral_source_split_13968:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i1, 1);
    goto corral_source_split_13969;

  corral_source_split_13969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2828} $i63 := be_cmd_pmac_add($p7, $p2, $i60, $p61, $i62);
    call {:si_unique_call 2829} {:cexpr "status"} boogie_si_record_i32($i63);
    assume {:verifier.code 0} true;
    $i52 := $i63;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_13985;

  corral_source_split_13985:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i52, 0);
    goto corral_source_split_13986;

  corral_source_split_13986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i64 == 1);
    goto corral_source_split_13994;

  corral_source_split_13994:
    assume {:verifier.code 0} true;
    $i69 := $ugt.i64(6, 63);
    goto corral_source_split_13995;

  corral_source_split_13995:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i69 == 1);
    goto corral_source_split_14002;

  corral_source_split_14002:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p9, $mul.ref($i10, 24)), $mul.ref(0, 1));
    goto corral_source_split_14003;

  corral_source_split_14003:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_14004;

  corral_source_split_14004:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_357 := $M.0;
    cmdloc_dummy_var_358 := $M.0;
    call {:si_unique_call 2835} cmdloc_dummy_var_359 := $memcpy.i8(cmdloc_dummy_var_357, cmdloc_dummy_var_358, $p73, $p2, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_359;
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i15 := $i52;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13920;

  corral_source_split_13920:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb29:
    assume $i69 == 1;
    goto corral_source_split_13997;

  corral_source_split_13997:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p9, $mul.ref($i10, 24)), $mul.ref(0, 1));
    goto corral_source_split_13998;

  corral_source_split_13998:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_13999;

  corral_source_split_13999:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_354 := $M.0;
    cmdloc_dummy_var_355 := $M.0;
    call {:si_unique_call 2834} cmdloc_dummy_var_356 := $memcpy.i8(cmdloc_dummy_var_354, cmdloc_dummy_var_355, $p71, $p2, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_356;
    goto corral_source_split_14000;

  corral_source_split_14000:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i64 == 1;
    goto corral_source_split_13988;

  corral_source_split_13988:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p7, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_13989;

  corral_source_split_13989:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_13990;

  corral_source_split_13990:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_13991;

  corral_source_split_13991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2833} vslice_dummy_var_568 := dev_err.ref.ref.ref.i32($p67, .str.113, $p2, $i1);
    goto corral_source_split_13992;

  corral_source_split_13992:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p5);
    goto corral_source_split_13943;

  corral_source_split_13943:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i1);
    goto corral_source_split_13944;

  corral_source_split_13944:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_13945;

  corral_source_split_13945:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i38, 1);
    goto corral_source_split_13946;

  corral_source_split_13946:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    goto corral_source_split_13947;

  corral_source_split_13947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2824} $i41 := be_cmd_get_mac_from_list($p7, $p36, $p3, $p4, $i40);
    call {:si_unique_call 2825} {:cexpr "status"} boogie_si_record_i32($i41);
    goto corral_source_split_13948;

  corral_source_split_13948:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_13949;

  corral_source_split_13949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i1, 1);
    goto corral_source_split_13982;

  corral_source_split_13982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2831} $i51 := be_cmd_set_mac_list($p7, $p2, 1, $i50);
    call {:si_unique_call 2832} {:cexpr "status"} boogie_si_record_i32($i51);
    goto corral_source_split_13983;

  corral_source_split_13983:
    assume {:verifier.code 0} true;
    $i52 := $i51;
    goto $bb25;

  $bb19:
    assume $i42 == 1;
    goto corral_source_split_13971;

  corral_source_split_13971:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.29, $p3);
    goto corral_source_split_13972;

  corral_source_split_13972:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i8.i1($i43);
    goto corral_source_split_13973;

  corral_source_split_13973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb21;

  $bb22:
    assume $i44 == 1;
    goto corral_source_split_13975;

  corral_source_split_13975:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p9, $mul.ref($i10, 24)), $mul.ref(8, 1));
    goto corral_source_split_13976;

  corral_source_split_13976:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_13977;

  corral_source_split_13977:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.55, $p4);
    goto corral_source_split_13978;

  corral_source_split_13978:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i1, 1);
    goto corral_source_split_13979;

  corral_source_split_13979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2830} vslice_dummy_var_567 := be_cmd_pmac_del($p7, $i46, $i47, $i48);
    goto corral_source_split_13980;

  corral_source_split_13980:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb9;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_13926;

  corral_source_split_13926:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb7;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_13918;

  corral_source_split_13918:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 1);
    goto $bb3;
}



const be_set_vf_vlan: ref;

axiom be_set_vf_vlan == $sub.ref(0, 781462);

procedure be_set_vf_vlan($p0: ref, $i1: i32, $i2: i16, $i3: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_set_vf_vlan($p0: ref, $i1: i32, $i2: i16, $i3: i8) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $p30: ref;
  var $i31: i32;
  var $i32: i16;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p38: ref;
  var $i39: i32;
  var $i40: i16;
  var $i41: i32;
  var $i42: i16;
  var $i43: i32;
  var $i44: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $p56: ref;
  var $i57: i16;
  var $i58: i32;
  var $i59: i16;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $p65: ref;
  var $i66: i32;
  var $i67: i16;
  var $i68: i32;
  var $i69: i16;
  var $i70: i32;
  var $i45: i16;
  var $i46: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i9: i32;
  var vslice_dummy_var_569: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2836} {:cexpr "be_set_vf_vlan:arg:vf"} boogie_si_record_i32($i1);
    call {:si_unique_call 2837} {:cexpr "be_set_vf_vlan:arg:vlan"} boogie_si_record_i16($i2);
    call {:si_unique_call 2838} {:cexpr "be_set_vf_vlan:arg:qos"} boogie_si_record_i8($i3);
    goto corral_source_split_14006;

  corral_source_split_14006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2839} $p4 := netdev_priv($p0);
    goto corral_source_split_14007;

  corral_source_split_14007:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_14008;

  corral_source_split_14008:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364200, 1));
    goto corral_source_split_14009;

  corral_source_split_14009:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_14010;

  corral_source_split_14010:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_14011;

  corral_source_split_14011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364200, 1));
    goto corral_source_split_14017;

  corral_source_split_14017:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_14018;

  corral_source_split_14018:
    assume {:verifier.code 0} true;
    $i12 := $uge.i32($i1, $i11);
    goto corral_source_split_14019;

  corral_source_split_14019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_14021;

  corral_source_split_14021:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i2);
    goto corral_source_split_14022;

  corral_source_split_14022:
    assume {:verifier.code 0} true;
    $i14 := $ugt.i32($i13, 4095);
    goto corral_source_split_14023;

  corral_source_split_14023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i2);
    goto corral_source_split_14025;

  corral_source_split_14025:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_14026;

  corral_source_split_14026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i16 == 1);
    goto corral_source_split_14039;

  corral_source_split_14039:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364216, 1));
    goto corral_source_split_14040;

  corral_source_split_14040:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_14041;

  corral_source_split_14041:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i1);
    goto corral_source_split_14042;

  corral_source_split_14042:
    assume {:verifier.code 0} true;
    goto corral_source_split_14043;

  corral_source_split_14043:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p48, $mul.ref($i49, 24)), $mul.ref(18, 1));
    goto corral_source_split_14044;

  corral_source_split_14044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p51, 0);
    goto corral_source_split_14045;

  corral_source_split_14045:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364216, 1));
    goto corral_source_split_14046;

  corral_source_split_14046:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_14047;

  corral_source_split_14047:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i1);
    goto corral_source_split_14048;

  corral_source_split_14048:
    assume {:verifier.code 0} true;
    goto corral_source_split_14049;

  corral_source_split_14049:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p53, $mul.ref($i54, 24)), $mul.ref(16, 1));
    goto corral_source_split_14050;

  corral_source_split_14050:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.0, $p56);
    call {:si_unique_call 2840} {:cexpr "vlan"} boogie_si_record_i16($i57);
    goto corral_source_split_14051;

  corral_source_split_14051:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_14052;

  corral_source_split_14052:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i16($i58);
    goto corral_source_split_14053;

  corral_source_split_14053:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i1, 1);
    goto corral_source_split_14054;

  corral_source_split_14054:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364216, 1));
    goto corral_source_split_14055;

  corral_source_split_14055:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_14056;

  corral_source_split_14056:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i1);
    goto corral_source_split_14057;

  corral_source_split_14057:
    assume {:verifier.code 0} true;
    goto corral_source_split_14058;

  corral_source_split_14058:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p62, $mul.ref($i63, 24)), $mul.ref(8, 1));
    goto corral_source_split_14059;

  corral_source_split_14059:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_14060;

  corral_source_split_14060:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i16($i66);
    goto corral_source_split_14061;

  corral_source_split_14061:
    assume {:verifier.code 0} true;
    $i68 := $zext.i16.i32($i67);
    goto corral_source_split_14062;

  corral_source_split_14062:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i16($i68);
    goto corral_source_split_14063;

  corral_source_split_14063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2841} $i70 := be_cmd_set_hsw_config($p5, $i59, $i60, $i69);
    call {:si_unique_call 2842} {:cexpr "status"} boogie_si_record_i32($i70);
    assume {:verifier.code 0} true;
    $i45, $i46 := $i57, $i70;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14088;

  corral_source_split_14088:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i46, 0);
    goto corral_source_split_14089;

  corral_source_split_14089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i9 := $i46;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14015;

  corral_source_split_14015:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb17:
    assume $i71 == 1;
    goto corral_source_split_14091;

  corral_source_split_14091:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_14092;

  corral_source_split_14092:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_14093;

  corral_source_split_14093:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_14094;

  corral_source_split_14094:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i45);
    goto corral_source_split_14095;

  corral_source_split_14095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2845} vslice_dummy_var_569 := _dev_info.ref.ref.i32.i32($p74, .str.114, $i75, $i1);
    goto corral_source_split_14096;

  corral_source_split_14096:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_14028;

  corral_source_split_14028:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364216, 1));
    goto corral_source_split_14029;

  corral_source_split_14029:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_14030;

  corral_source_split_14030:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i1);
    goto corral_source_split_14031;

  corral_source_split_14031:
    assume {:verifier.code 0} true;
    goto corral_source_split_14032;

  corral_source_split_14032:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref($i19, 24)), $mul.ref(18, 1));
    goto corral_source_split_14033;

  corral_source_split_14033:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_14034;

  corral_source_split_14034:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_14035;

  corral_source_split_14035:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i2);
    goto corral_source_split_14036;

  corral_source_split_14036:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i23, $i24);
    goto corral_source_split_14037;

  corral_source_split_14037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_14086;

  corral_source_split_14086:
    assume {:verifier.code 0} true;
    $i45, $i46 := $i2, $i44;
    goto $bb16;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_14065;

  corral_source_split_14065:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364216, 1));
    goto corral_source_split_14066;

  corral_source_split_14066:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_14067;

  corral_source_split_14067:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i1);
    goto corral_source_split_14068;

  corral_source_split_14068:
    assume {:verifier.code 0} true;
    goto corral_source_split_14069;

  corral_source_split_14069:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p27, $mul.ref($i28, 24)), $mul.ref(18, 1));
    goto corral_source_split_14070;

  corral_source_split_14070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p30, $i2);
    goto corral_source_split_14071;

  corral_source_split_14071:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i2);
    goto corral_source_split_14072;

  corral_source_split_14072:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i31);
    goto corral_source_split_14073;

  corral_source_split_14073:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i1, 1);
    goto corral_source_split_14074;

  corral_source_split_14074:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364216, 1));
    goto corral_source_split_14075;

  corral_source_split_14075:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_14076;

  corral_source_split_14076:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i1);
    goto corral_source_split_14077;

  corral_source_split_14077:
    assume {:verifier.code 0} true;
    goto corral_source_split_14078;

  corral_source_split_14078:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p35, $mul.ref($i36, 24)), $mul.ref(8, 1));
    goto corral_source_split_14079;

  corral_source_split_14079:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_14080;

  corral_source_split_14080:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i39);
    goto corral_source_split_14081;

  corral_source_split_14081:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_14082;

  corral_source_split_14082:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_14083;

  corral_source_split_14083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2843} $i43 := be_cmd_set_hsw_config($p5, $i32, $i33, $i42);
    call {:si_unique_call 2844} {:cexpr "status"} boogie_si_record_i32($i43);
    goto corral_source_split_14084;

  corral_source_split_14084:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb15;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_14013;

  corral_source_split_14013:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 1);
    goto $bb3;
}



const be_set_vf_tx_rate: ref;

axiom be_set_vf_tx_rate == $sub.ref(0, 782494);

procedure be_set_vf_tx_rate($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_set_vf_tx_rate($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i16;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i8;
  var $i35: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i36: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p49: ref;
  var $i8: i32;
  var vslice_dummy_var_570: i32;
  var vslice_dummy_var_571: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2846} {:cexpr "be_set_vf_tx_rate:arg:vf"} boogie_si_record_i32($i1);
    call {:si_unique_call 2847} {:cexpr "be_set_vf_tx_rate:arg:rate"} boogie_si_record_i32($i2);
    goto corral_source_split_14098;

  corral_source_split_14098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2848} $p3 := netdev_priv($p0);
    goto corral_source_split_14099;

  corral_source_split_14099:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_14100;

  corral_source_split_14100:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(364200, 1));
    goto corral_source_split_14101;

  corral_source_split_14101:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_14102;

  corral_source_split_14102:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_14103;

  corral_source_split_14103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(364200, 1));
    goto corral_source_split_14109;

  corral_source_split_14109:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_14110;

  corral_source_split_14110:
    assume {:verifier.code 0} true;
    $i11 := $uge.i32($i1, $i10);
    goto corral_source_split_14111;

  corral_source_split_14111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i12 := $sle.i32($i2, 99);
    goto corral_source_split_14115;

  corral_source_split_14115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i12 == 1);
    goto corral_source_split_14122;

  corral_source_split_14122:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i2, 10000);
    goto corral_source_split_14123;

  corral_source_split_14123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_14125;

  corral_source_split_14125:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_14126;

  corral_source_split_14126:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_14127;

  corral_source_split_14127:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_14128;

  corral_source_split_14128:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_14129;

  corral_source_split_14129:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 57888);
    goto corral_source_split_14130;

  corral_source_split_14130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i23 == 1);
    goto corral_source_split_14139;

  corral_source_split_14139:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_14140;

  corral_source_split_14140:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_14141;

  corral_source_split_14141:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_14142;

  corral_source_split_14142:
    assume {:verifier.code 0} true;
    $i27 := $load.i16($M.0, $p26);
    goto corral_source_split_14143;

  corral_source_split_14143:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_14144;

  corral_source_split_14144:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 57896);
    goto corral_source_split_14145;

  corral_source_split_14145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i29 == 1);
    goto corral_source_split_14147;

  corral_source_split_14147:
    assume {:verifier.code 0} true;
    $i37 := $sdiv.i32($i2, 10);
    goto corral_source_split_14148;

  corral_source_split_14148:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i1, 1);
    goto corral_source_split_14149;

  corral_source_split_14149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2852} $i39 := be_cmd_set_qos($p4, $i37, $i38);
    call {:si_unique_call 2853} {:cexpr "status"} boogie_si_record_i32($i39);
    assume {:verifier.code 0} true;
    $i36 := $i39;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_14151;

  corral_source_split_14151:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i36, 0);
    goto corral_source_split_14152;

  corral_source_split_14152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i40 == 1);
    goto corral_source_split_14160;

  corral_source_split_14160:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(364216, 1));
    goto corral_source_split_14161;

  corral_source_split_14161:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_14162;

  corral_source_split_14162:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i1);
    goto corral_source_split_14163;

  corral_source_split_14163:
    assume {:verifier.code 0} true;
    goto corral_source_split_14164;

  corral_source_split_14164:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p46, $mul.ref($i47, 24)), $mul.ref(20, 1));
    goto corral_source_split_14165;

  corral_source_split_14165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i2);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i8 := $i36;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14107;

  corral_source_split_14107:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb20:
    assume $i40 == 1;
    goto corral_source_split_14154;

  corral_source_split_14154:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_14155;

  corral_source_split_14155:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_14156;

  corral_source_split_14156:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_14157;

  corral_source_split_14157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2854} vslice_dummy_var_571 := dev_err.ref.ref.i32.i32($p43, .str.116, $i2, $i1);
    goto corral_source_split_14158;

  corral_source_split_14158:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i30 := $sdiv.i32($i2, 10);
    goto corral_source_split_14132;

  corral_source_split_14132:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i1);
    goto corral_source_split_14133;

  corral_source_split_14133:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_14134;

  corral_source_split_14134:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i32, 1);
    goto corral_source_split_14135;

  corral_source_split_14135:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_14136;

  corral_source_split_14136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2850} $i35 := be_cmd_set_profile_config($p4, $i30, $i34);
    call {:si_unique_call 2851} {:cexpr "status"} boogie_si_record_i32($i35);
    goto corral_source_split_14137;

  corral_source_split_14137:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb19;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_14117;

  corral_source_split_14117:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_14118;

  corral_source_split_14118:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_14119;

  corral_source_split_14119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2849} vslice_dummy_var_570 := dev_err.ref.ref($p16, .str.115);
    goto corral_source_split_14120;

  corral_source_split_14120:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb9;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_14113;

  corral_source_split_14113:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_14105;

  corral_source_split_14105:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb3;
}



const be_get_vf_config: ref;

axiom be_get_vf_config == $sub.ref(0, 783526);

procedure be_get_vf_config($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation be_get_vf_config($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i12: i32;
  var cmdloc_dummy_var_360: [ref]i8;
  var cmdloc_dummy_var_361: [ref]i8;
  var cmdloc_dummy_var_362: [ref]i8;
  var cmdloc_dummy_var_363: [ref]i8;
  var cmdloc_dummy_var_364: [ref]i8;
  var cmdloc_dummy_var_365: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2855} {:cexpr "be_get_vf_config:arg:vf"} boogie_si_record_i32($i1);
    goto corral_source_split_14167;

  corral_source_split_14167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2856} $p3 := netdev_priv($p0);
    goto corral_source_split_14168;

  corral_source_split_14168:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_14169;

  corral_source_split_14169:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(364216, 1));
    goto corral_source_split_14170;

  corral_source_split_14170:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_14171;

  corral_source_split_14171:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i1);
    goto corral_source_split_14172;

  corral_source_split_14172:
    assume {:verifier.code 0} true;
    goto corral_source_split_14173;

  corral_source_split_14173:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(364200, 1));
    goto corral_source_split_14174;

  corral_source_split_14174:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_14175;

  corral_source_split_14175:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_14176;

  corral_source_split_14176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(364200, 1));
    goto corral_source_split_14182;

  corral_source_split_14182:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_14183;

  corral_source_split_14183:
    assume {:verifier.code 0} true;
    $i15 := $uge.i32($i1, $i14);
    goto corral_source_split_14184;

  corral_source_split_14184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_14188;

  corral_source_split_14188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i1);
    goto corral_source_split_14189;

  corral_source_split_14189:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref($i7, 24)), $mul.ref(20, 1));
    goto corral_source_split_14190;

  corral_source_split_14190:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_14191;

  corral_source_split_14191:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(44, 1));
    goto corral_source_split_14192;

  corral_source_split_14192:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_14193;

  corral_source_split_14193:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref($i7, 24)), $mul.ref(18, 1));
    goto corral_source_split_14194;

  corral_source_split_14194:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_14195;

  corral_source_split_14195:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_14196;

  corral_source_split_14196:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(36, 1));
    goto corral_source_split_14197;

  corral_source_split_14197:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    goto corral_source_split_14198;

  corral_source_split_14198:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(40, 1));
    goto corral_source_split_14199;

  corral_source_split_14199:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 0);
    goto corral_source_split_14200;

  corral_source_split_14200:
    assume {:verifier.code 0} true;
    $i25 := $ugt.i64(6, 63);
    goto corral_source_split_14201;

  corral_source_split_14201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    goto corral_source_split_14210;

  corral_source_split_14210:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(4, 1));
    goto corral_source_split_14211;

  corral_source_split_14211:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_14212;

  corral_source_split_14212:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref($i7, 24)), $mul.ref(0, 1));
    goto corral_source_split_14213;

  corral_source_split_14213:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_14214;

  corral_source_split_14214:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_363 := $M.0;
    cmdloc_dummy_var_364 := $M.0;
    call {:si_unique_call 2858} cmdloc_dummy_var_365 := $memcpy.i8(cmdloc_dummy_var_363, cmdloc_dummy_var_364, $p31, $p33, 6, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_365;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14180;

  corral_source_split_14180:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_14203;

  corral_source_split_14203:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(4, 1));
    goto corral_source_split_14204;

  corral_source_split_14204:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_14205;

  corral_source_split_14205:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref($i7, 24)), $mul.ref(0, 1));
    goto corral_source_split_14206;

  corral_source_split_14206:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_14207;

  corral_source_split_14207:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_360 := $M.0;
    cmdloc_dummy_var_361 := $M.0;
    call {:si_unique_call 2857} cmdloc_dummy_var_362 := $memcpy.i8(cmdloc_dummy_var_360, cmdloc_dummy_var_361, $p27, $p29, 6, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_362;
    goto corral_source_split_14208;

  corral_source_split_14208:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_14186;

  corral_source_split_14186:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_14178;

  corral_source_split_14178:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;
}



const be_cmd_set_profile_config: ref;

axiom be_cmd_set_profile_config == $sub.ref(0, 784558);

procedure be_cmd_set_profile_config($p0: ref, $i1: i32, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_set_profile_config($p0: ref, $i1: i32, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $i60: i32;
  var $i7: i32;
  var $p61: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2859} {:cexpr "be_cmd_set_profile_config:arg:bps"} boogie_si_record_i32($i1);
    call {:si_unique_call 2860} {:cexpr "be_cmd_set_profile_config:arg:domain"} boogie_si_record_i8($i2);
    goto corral_source_split_14216;

  corral_source_split_14216:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_14217;

  corral_source_split_14217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2861} spin_lock_bh($p3);
    goto corral_source_split_14218;

  corral_source_split_14218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2862} $p4 := wrb_from_mccq($p0);
    goto corral_source_split_14219;

  corral_source_split_14219:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_14220;

  corral_source_split_14220:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_14221;

  corral_source_split_14221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2864} $p8 := embedded_payload($p4);
    goto corral_source_split_14229;

  corral_source_split_14229:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_14230;

  corral_source_split_14230:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_14231;

  corral_source_split_14231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2865} be_wrb_cmd_hdr_prepare($p10, 1, $sub.i8(0, 91), 96, $p4, $0.ref);
    goto corral_source_split_14232;

  corral_source_split_14232:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_14233;

  corral_source_split_14233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, $i2);
    goto corral_source_split_14234;

  corral_source_split_14234:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p9, $mul.ref(0, 96)), $mul.ref(20, 1));
    goto corral_source_split_14235;

  corral_source_split_14235:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 1);
    goto corral_source_split_14236;

  corral_source_split_14236:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_14237;

  corral_source_split_14237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 65);
    goto corral_source_split_14238;

  corral_source_split_14238:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(1, 1));
    goto corral_source_split_14239;

  corral_source_split_14239:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, 88);
    goto corral_source_split_14240;

  corral_source_split_14240:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(3, 1));
    goto corral_source_split_14241;

  corral_source_split_14241:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $sub.i8(0, 48));
    goto corral_source_split_14242;

  corral_source_split_14242:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364308, 1));
    goto corral_source_split_14243;

  corral_source_split_14243:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_14244;

  corral_source_split_14244:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(6, 1));
    goto corral_source_split_14245;

  corral_source_split_14245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i21);
    goto corral_source_split_14246;

  corral_source_split_14246:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(4, 1));
    goto corral_source_split_14247;

  corral_source_split_14247:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, $i2);
    goto corral_source_split_14248;

  corral_source_split_14248:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_14249;

  corral_source_split_14249:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p27, $sub.i16(0, 1));
    goto corral_source_split_14250;

  corral_source_split_14250:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(16, 1));
    goto corral_source_split_14251;

  corral_source_split_14251:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, $sub.i16(0, 1));
    goto corral_source_split_14252;

  corral_source_split_14252:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(18, 1));
    goto corral_source_split_14253;

  corral_source_split_14253:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p31, $sub.i16(0, 1));
    goto corral_source_split_14254;

  corral_source_split_14254:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(20, 1));
    goto corral_source_split_14255;

  corral_source_split_14255:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p33, $sub.i16(0, 1));
    goto corral_source_split_14256;

  corral_source_split_14256:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(22, 1));
    goto corral_source_split_14257;

  corral_source_split_14257:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p35, $sub.i16(0, 1));
    goto corral_source_split_14258;

  corral_source_split_14258:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(24, 1));
    goto corral_source_split_14259;

  corral_source_split_14259:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p37, $sub.i16(0, 1));
    goto corral_source_split_14260;

  corral_source_split_14260:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(26, 1));
    goto corral_source_split_14261;

  corral_source_split_14261:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p39, $sub.i16(0, 1));
    goto corral_source_split_14262;

  corral_source_split_14262:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(28, 1));
    goto corral_source_split_14263;

  corral_source_split_14263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p41, $sub.i16(0, 1));
    goto corral_source_split_14264;

  corral_source_split_14264:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(30, 1));
    goto corral_source_split_14265;

  corral_source_split_14265:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p43, $sub.i16(0, 1));
    goto corral_source_split_14266;

  corral_source_split_14266:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(32, 1));
    goto corral_source_split_14267;

  corral_source_split_14267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p45, $sub.i16(0, 1));
    goto corral_source_split_14268;

  corral_source_split_14268:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(34, 1));
    goto corral_source_split_14269;

  corral_source_split_14269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p47, $sub.i16(0, 1));
    goto corral_source_split_14270;

  corral_source_split_14270:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(44, 1));
    goto corral_source_split_14271;

  corral_source_split_14271:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, $sub.i8(0, 1));
    goto corral_source_split_14272;

  corral_source_split_14272:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(48, 1));
    goto corral_source_split_14273;

  corral_source_split_14273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $sub.i32(0, 1));
    goto corral_source_split_14274;

  corral_source_split_14274:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(56, 1));
    goto corral_source_split_14275;

  corral_source_split_14275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, $sub.i8(0, 1));
    goto corral_source_split_14276;

  corral_source_split_14276:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(57, 1));
    goto corral_source_split_14277;

  corral_source_split_14277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, 15);
    goto corral_source_split_14278;

  corral_source_split_14278:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(48, 1));
    goto corral_source_split_14279;

  corral_source_split_14279:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i1);
    goto corral_source_split_14280;

  corral_source_split_14280:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(52, 1));
    goto corral_source_split_14281;

  corral_source_split_14281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $i1);
    goto corral_source_split_14282;

  corral_source_split_14282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2866} $i60 := be_mcc_notify_wait($p0);
    call {:si_unique_call 2867} {:cexpr "status"} boogie_si_record_i32($i60);
    goto corral_source_split_14283;

  corral_source_split_14283:
    assume {:verifier.code 0} true;
    $i7 := $i60;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14225;

  corral_source_split_14225:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_14226;

  corral_source_split_14226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2863} spin_unlock_bh($p61);
    goto corral_source_split_14227;

  corral_source_split_14227:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_14223;

  corral_source_split_14223:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 16);
    goto $bb3;
}



const be_cmd_set_hsw_config: ref;

axiom be_cmd_set_hsw_config == $sub.ref(0, 785590);

procedure be_cmd_set_hsw_config($p0: ref, $i1: i16, $i2: i32, $i3: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_set_hsw_config($p0: ref, $i1: i16, $i2: i32, $i3: i16) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i8: i32;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2868} {:cexpr "be_cmd_set_hsw_config:arg:pvid"} boogie_si_record_i16($i1);
    call {:si_unique_call 2869} {:cexpr "be_cmd_set_hsw_config:arg:domain"} boogie_si_record_i32($i2);
    call {:si_unique_call 2870} {:cexpr "be_cmd_set_hsw_config:arg:intf_id"} boogie_si_record_i16($i3);
    goto corral_source_split_14285;

  corral_source_split_14285:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_14286;

  corral_source_split_14286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2871} spin_lock_bh($p4);
    goto corral_source_split_14287;

  corral_source_split_14287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2872} $p5 := wrb_from_mccq($p0);
    goto corral_source_split_14288;

  corral_source_split_14288:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_14289;

  corral_source_split_14289:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_14290;

  corral_source_split_14290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2874} $p9 := embedded_payload($p5);
    goto corral_source_split_14298;

  corral_source_split_14298:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_14299;

  corral_source_split_14299:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_14300;

  corral_source_split_14300:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_14301;

  corral_source_split_14301:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_14302;

  corral_source_split_14302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2875} be_wrb_cmd_hdr_prepare($p13, 1, $sub.i8(0, 103), 36, $p5, $0.ref);
    goto corral_source_split_14303;

  corral_source_split_14303:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i2);
    goto corral_source_split_14304;

  corral_source_split_14304:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_14305;

  corral_source_split_14305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i14);
    goto corral_source_split_14306;

  corral_source_split_14306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2876} $i17 := amap_mask(16);
    call {:si_unique_call 2877} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_14307;

  corral_source_split_14307:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i3);
    goto corral_source_split_14308;

  corral_source_split_14308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2878} amap_set($p12, 0, $i17, 0, $i18);
    goto corral_source_split_14309;

  corral_source_split_14309:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i1);
    goto corral_source_split_14310;

  corral_source_split_14310:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_14311;

  corral_source_split_14311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p10, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_14320;

  corral_source_split_14320:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_14321;

  corral_source_split_14321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2885} swap_dws($p25, 20);
    goto corral_source_split_14322;

  corral_source_split_14322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2886} $i26 := be_mcc_notify_wait($p0);
    call {:si_unique_call 2887} {:cexpr "status"} boogie_si_record_i32($i26);
    goto corral_source_split_14323;

  corral_source_split_14323:
    assume {:verifier.code 0} true;
    $i8 := $i26;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14294;

  corral_source_split_14294:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_14295;

  corral_source_split_14295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2873} spin_unlock_bh($p27);
    goto corral_source_split_14296;

  corral_source_split_14296:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_14313;

  corral_source_split_14313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2879} $i21 := amap_mask(1);
    call {:si_unique_call 2880} {:cexpr "tmp___1"} boogie_si_record_i32($i21);
    goto corral_source_split_14314;

  corral_source_split_14314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2881} amap_set($p12, 0, $i21, 30, 1);
    goto corral_source_split_14315;

  corral_source_split_14315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2882} $i22 := amap_mask(16);
    call {:si_unique_call 2883} {:cexpr "tmp___2"} boogie_si_record_i32($i22);
    goto corral_source_split_14316;

  corral_source_split_14316:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i1);
    goto corral_source_split_14317;

  corral_source_split_14317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2884} amap_set($p12, 1, $i22, 16, $i23);
    goto corral_source_split_14318;

  corral_source_split_14318:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_14292;

  corral_source_split_14292:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 16);
    goto $bb3;
}



const is_valid_ether_addr: ref;

axiom is_valid_ether_addr == $sub.ref(0, 786622);

procedure is_valid_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_valid_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14325;

  corral_source_split_14325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2888} $i1 := is_multicast_ether_addr($p0);
    goto corral_source_split_14326;

  corral_source_split_14326:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2889} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_14327;

  corral_source_split_14327:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_14328;

  corral_source_split_14328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14332;

  corral_source_split_14332:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_14333;

  corral_source_split_14333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_14349;

  corral_source_split_14349:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_14350;

  corral_source_split_14350:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_14335;

  corral_source_split_14335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2890} $i6 := is_zero_ether_addr($p0);
    goto corral_source_split_14336;

  corral_source_split_14336:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 2891} {:cexpr "tmp___1"} boogie_si_record_i8($i7);
    goto corral_source_split_14337;

  corral_source_split_14337:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_14338;

  corral_source_split_14338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_14342;

  corral_source_split_14342:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_14343;

  corral_source_split_14343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_14347;

  corral_source_split_14347:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb12;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_14345;

  corral_source_split_14345:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb11;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_14340;

  corral_source_split_14340:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_14330;

  corral_source_split_14330:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const is_multicast_ether_addr: ref;

axiom is_multicast_ether_addr == $sub.ref(0, 787654);

procedure is_multicast_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_multicast_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14352;

  corral_source_split_14352:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_14353;

  corral_source_split_14353:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_14354;

  corral_source_split_14354:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_14355;

  corral_source_split_14355:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_14356;

  corral_source_split_14356:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const skb_get_queue_mapping: ref;

axiom skb_get_queue_mapping == $sub.ref(0, 788686);

procedure skb_get_queue_mapping($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation skb_get_queue_mapping($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $i2: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14358;

  corral_source_split_14358:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(176, 1));
    goto corral_source_split_14359;

  corral_source_split_14359:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_14360;

  corral_source_split_14360:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const is_ipv4_pkt: ref;

axiom is_ipv4_pkt == $sub.ref(0, 789718);

procedure is_ipv4_pkt($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_ipv4_pkt($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14362;

  corral_source_split_14362:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(126, 1));
    goto corral_source_split_14363;

  corral_source_split_14363:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_14364;

  corral_source_split_14364:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_14365;

  corral_source_split_14365:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 8);
    goto corral_source_split_14366;

  corral_source_split_14366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_14380;

  corral_source_split_14380:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_14381;

  corral_source_split_14381:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_14368;

  corral_source_split_14368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2892} $p5 := ip_hdr($p0);
    goto corral_source_split_14369;

  corral_source_split_14369:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_14370;

  corral_source_split_14370:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(0, 1));
    goto corral_source_split_14371;

  corral_source_split_14371:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_14372;

  corral_source_split_14372:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_14373;

  corral_source_split_14373:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 64);
    goto corral_source_split_14374;

  corral_source_split_14374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_14378;

  corral_source_split_14378:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb6;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_14376;

  corral_source_split_14376:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb5;
}



const ip_hdr: ref;

axiom ip_hdr == $sub.ref(0, 790750);

procedure ip_hdr($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ip_hdr($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14383;

  corral_source_split_14383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2893} $p1 := skb_network_header($p0);
    goto corral_source_split_14384;

  corral_source_split_14384:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_14385;

  corral_source_split_14385:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pskb_trim: ref;

axiom pskb_trim == $sub.ref(0, 791782);

procedure pskb_trim($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pskb_trim($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2894} {:cexpr "pskb_trim:arg:len"} boogie_si_record_i32($i1);
    goto corral_source_split_14387;

  corral_source_split_14387:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(104, 1));
    goto corral_source_split_14388;

  corral_source_split_14388:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_14389;

  corral_source_split_14389:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i32($i3, $i1);
    goto corral_source_split_14390;

  corral_source_split_14390:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14395;

  corral_source_split_14395:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_14392;

  corral_source_split_14392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2895} $i5 := __pskb_trim($p0, $i1);
    call {:si_unique_call 2896} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_14393;

  corral_source_split_14393:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;
}



const be_insert_vlan_in_pkt: ref;

axiom be_insert_vlan_in_pkt == $sub.ref(0, 792814);

procedure be_insert_vlan_in_pkt($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.53;



implementation be_insert_vlan_in_pkt($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i16;
  var $i17: i32;
  var $i18: i16;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i16;
  var $i35: i16;
  var $i36: i64;
  var $i37: i1;
  var $i38: i16;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i16;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i16;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i16;
  var $i58: i32;
  var $i59: i16;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $i63: i32;
  var $i64: i64;
  var $i65: i64;
  var $i66: i1;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14397;

  corral_source_split_14397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2897} $p3 := skb_share_check($p1, 32);
    goto corral_source_split_14398;

  corral_source_split_14398:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_14399;

  corral_source_split_14399:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_14400;

  corral_source_split_14400:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_14401;

  corral_source_split_14401:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_14402;

  corral_source_split_14402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2898} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 2899} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_14403;

  corral_source_split_14403:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_14404;

  corral_source_split_14404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 248)), $mul.ref(170, 1));
    goto corral_source_split_14410;

  corral_source_split_14410:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_14411;

  corral_source_split_14411:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_14412;

  corral_source_split_14412:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 4096);
    goto corral_source_split_14413;

  corral_source_split_14413:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_14414;

  corral_source_split_14414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $p23, $i24 := $p3, 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14428;

  corral_source_split_14428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2903} $i25 := qnq_async_evt_rcvd($p0);
    call {:si_unique_call 2904} {:cexpr "tmp___0"} boogie_si_record_i32($i25);
    goto corral_source_split_14429;

  corral_source_split_14429:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_14430;

  corral_source_split_14430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i38 := $i24;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_14453;

  corral_source_split_14453:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_14454;

  corral_source_split_14454:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_14455;

  corral_source_split_14455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $p51 := $p23;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_14473;

  corral_source_split_14473:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364278, 1));
    goto corral_source_split_14474;

  corral_source_split_14474:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.0, $p52);
    goto corral_source_split_14475;

  corral_source_split_14475:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    goto corral_source_split_14476;

  corral_source_split_14476:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_14477;

  corral_source_split_14477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $p69 := $p51;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_14500;

  corral_source_split_14500:
    assume {:verifier.code 0} true;
    $p10 := $p69;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14408;

  corral_source_split_14408:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;

  $bb29:
    assume $i55 == 1;
    goto corral_source_split_14479;

  corral_source_split_14479:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364278, 1));
    goto corral_source_split_14480;

  corral_source_split_14480:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.0, $p56);
    call {:si_unique_call 2909} {:cexpr "vlan_tag"} boogie_si_record_i16($i57);
    goto corral_source_split_14481;

  corral_source_split_14481:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_14482;

  corral_source_split_14482:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i16($i58);
    goto corral_source_split_14483;

  corral_source_split_14483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2910} $p60 := __vlan_put_tag($p51, 129, $i59);
    goto corral_source_split_14484;

  corral_source_split_14484:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_14485;

  corral_source_split_14485:
    assume {:verifier.code 0} true;
    $i62 := $eq.i64($i61, 0);
    goto corral_source_split_14486;

  corral_source_split_14486:
    assume {:verifier.code 0} true;
    $i63 := $zext.i1.i32($i62);
    goto corral_source_split_14487;

  corral_source_split_14487:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i63);
    goto corral_source_split_14488;

  corral_source_split_14488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2911} $i65 := ldv__builtin_expect($i64, 0);
    call {:si_unique_call 2912} {:cexpr "tmp___2"} boogie_si_record_i64($i65);
    goto corral_source_split_14489;

  corral_source_split_14489:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_14490;

  corral_source_split_14490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p2);
    goto corral_source_split_14494;

  corral_source_split_14494:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_14495;

  corral_source_split_14495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p69 := $p60;
    goto $bb37;

  $bb34:
    assume $i68 == 1;
    goto corral_source_split_14497;

  corral_source_split_14497:
    assume {:verifier.code 0} true;
    $M.53 := $store.i8($M.53, $p2, 1);
    goto corral_source_split_14498;

  corral_source_split_14498:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i66 == 1;
    goto corral_source_split_14492;

  corral_source_split_14492:
    assume {:verifier.code 0} true;
    $p10 := $p60;
    goto $bb3;

  $bb23:
    assume $i40 == 1;
    goto corral_source_split_14457;

  corral_source_split_14457:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i38);
    goto corral_source_split_14458;

  corral_source_split_14458:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_14459;

  corral_source_split_14459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2906} $p43 := __vlan_put_tag($p23, 129, $i42);
    goto corral_source_split_14460;

  corral_source_split_14460:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_14461;

  corral_source_split_14461:
    assume {:verifier.code 0} true;
    $i45 := $eq.i64($i44, 0);
    goto corral_source_split_14462;

  corral_source_split_14462:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i32($i45);
    goto corral_source_split_14463;

  corral_source_split_14463:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    goto corral_source_split_14464;

  corral_source_split_14464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2907} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 2908} {:cexpr "tmp___1"} boogie_si_record_i64($i48);
    goto corral_source_split_14465;

  corral_source_split_14465:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_14466;

  corral_source_split_14466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p43, $mul.ref(0, 248)), $mul.ref(170, 1));
    goto corral_source_split_14470;

  corral_source_split_14470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p50, 0);
    goto corral_source_split_14471;

  corral_source_split_14471:
    assume {:verifier.code 0} true;
    $p51 := $p43;
    goto $bb28;

  $bb25:
    assume $i49 == 1;
    goto corral_source_split_14468;

  corral_source_split_14468:
    assume {:verifier.code 0} true;
    $p10 := $p43;
    goto $bb3;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_14432;

  corral_source_split_14432:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364234, 1));
    goto corral_source_split_14433;

  corral_source_split_14433:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p27);
    goto corral_source_split_14434;

  corral_source_split_14434:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_14435;

  corral_source_split_14435:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_14436;

  corral_source_split_14436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb13;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_14438;

  corral_source_split_14438:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i24);
    goto corral_source_split_14439;

  corral_source_split_14439:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_14440;

  corral_source_split_14440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i35 := $i24;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_14446;

  corral_source_split_14446:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p2);
    goto corral_source_split_14447;

  corral_source_split_14447:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_14448;

  corral_source_split_14448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i38 := $i35;
    goto $bb22;

  $bb19:
    assume $i37 == 1;
    goto corral_source_split_14450;

  corral_source_split_14450:
    assume {:verifier.code 0} true;
    $M.53 := $store.i8($M.53, $p2, 1);
    goto corral_source_split_14451;

  corral_source_split_14451:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i32 == 1;
    goto corral_source_split_14442;

  corral_source_split_14442:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364234, 1));
    goto corral_source_split_14443;

  corral_source_split_14443:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.0, $p33);
    call {:si_unique_call 2905} {:cexpr "vlan_tag"} boogie_si_record_i16($i34);
    goto corral_source_split_14444;

  corral_source_split_14444:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb18;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_14416;

  corral_source_split_14416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2900} $i16 := be_get_tx_vlan_tag($p0, $p3);
    call {:si_unique_call 2901} {:cexpr "vlan_tag"} boogie_si_record_i16($i16);
    goto corral_source_split_14417;

  corral_source_split_14417:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_14418;

  corral_source_split_14418:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_14419;

  corral_source_split_14419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2902} $p19 := __vlan_put_tag($p3, 129, $i18);
    goto corral_source_split_14420;

  corral_source_split_14420:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_14421;

  corral_source_split_14421:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_14422;

  corral_source_split_14422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p23, $i24 := $p19, $i16;
    goto $bb10;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_14424;

  corral_source_split_14424:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p19, $mul.ref(0, 248)), $mul.ref(170, 1));
    goto corral_source_split_14425;

  corral_source_split_14425:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p22, 0);
    goto corral_source_split_14426;

  corral_source_split_14426:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_14406;

  corral_source_split_14406:
    assume {:verifier.code 0} true;
    $p10 := $p3;
    goto $bb3;
}



const be_ipv6_tx_stall_chk: ref;

axiom be_ipv6_tx_stall_chk == $sub.ref(0, 793846);

procedure be_ipv6_tx_stall_chk($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation be_ipv6_tx_stall_chk($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i8;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14502;

  corral_source_split_14502:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_14503;

  corral_source_split_14503:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_14504;

  corral_source_split_14504:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_14505;

  corral_source_split_14505:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_14506;

  corral_source_split_14506:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_14507;

  corral_source_split_14507:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 545);
    goto corral_source_split_14508;

  corral_source_split_14508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_14514;

  corral_source_split_14514:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_14515;

  corral_source_split_14515:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_14516;

  corral_source_split_14516:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_14517;

  corral_source_split_14517:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_14518;

  corral_source_split_14518:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_14519;

  corral_source_split_14519:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 1808);
    goto corral_source_split_14520;

  corral_source_split_14520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_14526;

  corral_source_split_14526:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2913} $i14 := be_ipv6_exthdr_check($p1);
    goto corral_source_split_14510;

  corral_source_split_14510:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i14);
    call {:si_unique_call 2914} {:cexpr "tmp"} boogie_si_record_i8($i15);
    goto corral_source_split_14511;

  corral_source_split_14511:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_14512;

  corral_source_split_14512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_14524;

  corral_source_split_14524:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb9;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_14522;

  corral_source_split_14522:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const qnq_async_evt_rcvd: ref;

axiom qnq_async_evt_rcvd == $sub.ref(0, 794878);

procedure qnq_async_evt_rcvd($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qnq_async_evt_rcvd($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14528;

  corral_source_split_14528:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363952, 1));
    goto corral_source_split_14529;

  corral_source_split_14529:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_14530;

  corral_source_split_14530:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 2048);
    goto corral_source_split_14531;

  corral_source_split_14531:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const be_vlan_tag_tx_chk: ref;

axiom be_vlan_tag_tx_chk == $sub.ref(0, 795910);

procedure be_vlan_tag_tx_chk($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation be_vlan_tag_tx_chk($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $i7: i1;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14533;

  corral_source_split_14533:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(170, 1));
    goto corral_source_split_14534;

  corral_source_split_14534:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_14535;

  corral_source_split_14535:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_14536;

  corral_source_split_14536:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 4096);
    goto corral_source_split_14537;

  corral_source_split_14537:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_14538;

  corral_source_split_14538:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_14543;

  corral_source_split_14543:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364234, 1));
    goto corral_source_split_14544;

  corral_source_split_14544:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_14545;

  corral_source_split_14545:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_14546;

  corral_source_split_14546:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_14547;

  corral_source_split_14547:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_14549;

  corral_source_split_14549:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364278, 1));
    goto corral_source_split_14550;

  corral_source_split_14550:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_14551;

  corral_source_split_14551:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_14552;

  corral_source_split_14552:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_14553;

  corral_source_split_14553:
    assume {:verifier.code 0} true;
    $i7 := $i15;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_14540;

  corral_source_split_14540:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i7);
    goto corral_source_split_14541;

  corral_source_split_14541:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const make_tx_wrbs: ref;

axiom make_tx_wrbs == $sub.ref(0, 796942);

procedure make_tx_wrbs($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i1, $i5: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation make_tx_wrbs($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i1, $i5: i1) returns ($r: i32)
{
  var $i6: i8;
  var $i7: i8;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i16;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $i25: i32;
  var $i26: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i8;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $i50: i32;
  var $i51: i64;
  var $i52: i64;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $i42: i32;
  var $i43: i32;
  var $i69: i32;
  var $i41: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i1;
  var $p75: ref;
  var $i27: i32;
  var $i28: i8;
  var $p77: ref;
  var $i78: i1;
  var $p81: ref;
  var $p82: ref;
  var $i83: i1;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $i79: i8;
  var $i80: i32;
  var $i76: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2915} {:cexpr "make_tx_wrbs:arg:wrb_cnt"} boogie_si_record_i32($i3);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i4);
    call {:si_unique_call 2916} {:cexpr "make_tx_wrbs:arg:dummy_wrb"} boogie_si_record_i1($i4);
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i5);
    call {:si_unique_call 2917} {:cexpr "make_tx_wrbs:arg:skip_hw_vlan"} boogie_si_record_i1($i5);
    goto corral_source_split_14555;

  corral_source_split_14555:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_14556;

  corral_source_split_14556:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_14557;

  corral_source_split_14557:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_14558;

  corral_source_split_14558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2918} $p11 := queue_head_node($p1);
    goto corral_source_split_14559;

  corral_source_split_14559:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_14560;

  corral_source_split_14560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2919} queue_head_inc($p1);
    goto corral_source_split_14561;

  corral_source_split_14561:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_14562;

  corral_source_split_14562:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    call {:si_unique_call 2920} {:cexpr "map_head"} boogie_si_record_i16($i14);
    goto corral_source_split_14563;

  corral_source_split_14563:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(104, 1));
    goto corral_source_split_14564;

  corral_source_split_14564:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_14565;

  corral_source_split_14565:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(108, 1));
    goto corral_source_split_14566;

  corral_source_split_14566:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_14567;

  corral_source_split_14567:
    assume {:verifier.code 0} true;
    $i19 := $ugt.i32($i16, $i18);
    goto corral_source_split_14568;

  corral_source_split_14568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i33, $i34 := 0, 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14594;

  corral_source_split_14594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2932} $p35 := skb_end_pointer($p2);
    goto corral_source_split_14595;

  corral_source_split_14595:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_14596;

  corral_source_split_14596:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_14597;

  corral_source_split_14597:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_14598;

  corral_source_split_14598:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_14599;

  corral_source_split_14599:
    assume {:verifier.code 0} true;
    $i40 := $sgt.i32($i39, 0);
    goto corral_source_split_14600;

  corral_source_split_14600:
    assume {:verifier.code 0} true;
    $i41 := $i33;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i8.i1($i6);
    goto corral_source_split_14639;

  corral_source_split_14639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i8.i1($i7);
    goto corral_source_split_14649;

  corral_source_split_14649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2955} wrb_fill_hdr($p0, $p12, $p2, $i3, $i41, $i74);
    goto corral_source_split_14650;

  corral_source_split_14650:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p12);
    goto corral_source_split_14651;

  corral_source_split_14651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2956} swap_dws($p75, 16);
    goto corral_source_split_14652;

  corral_source_split_14652:
    assume {:verifier.code 0} true;
    $i76 := $i41;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_14654;

  corral_source_split_14654:
    assume {:verifier.code 0} true;
    $r := $i76;
    return;

  $bb19:
    assume $i70 == 1;
    goto corral_source_split_14641;

  corral_source_split_14641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2951} $p71 := queue_head_node($p1);
    goto corral_source_split_14642;

  corral_source_split_14642:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_14643;

  corral_source_split_14643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2952} wrb_fill($p72, 0, 0);
    goto corral_source_split_14644;

  corral_source_split_14644:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_14645;

  corral_source_split_14645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2953} swap_dws($p73, 16);
    goto corral_source_split_14646;

  corral_source_split_14646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2954} queue_head_inc($p1);
    goto corral_source_split_14647;

  corral_source_split_14647:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb8:
    assume $i40 == 1;
    goto corral_source_split_14602;

  corral_source_split_14602:
    assume {:verifier.code 0} true;
    $i42, $i43 := $i33, 0;
    goto $bb11;

  $bb11:
    call $p44, $p45, $p46, $p47, $i48, $p49, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $p57, $i58, $p59, $i60, $i61, $i62, $p63, $p64, $p65, $i66, $i67, $i68, $i42, $i43, $i69 := make_tx_wrbs_loop_$bb11($p1, $p2, $p10, $p44, $p45, $p46, $p47, $i48, $p49, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $p57, $i58, $p59, $i60, $i61, $i62, $p63, $p64, $p65, $i66, $i67, $i68, $i42, $i43, $i69);
    goto $bb11_last;

  corral_source_split_14604:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2933} $p44 := skb_end_pointer($p2);
    goto corral_source_split_14606;

  corral_source_split_14606:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_14607;

  corral_source_split_14607:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_14608;

  corral_source_split_14608:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_14609;

  corral_source_split_14609:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i43);
    goto corral_source_split_14610;

  corral_source_split_14610:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p47, $mul.ref($i48, 16));
    goto corral_source_split_14611;

  corral_source_split_14611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2934} $i50 := skb_frag_size($p49);
    call {:si_unique_call 2935} {:cexpr "tmp___4"} boogie_si_record_i32($i50);
    goto corral_source_split_14612;

  corral_source_split_14612:
    assume {:verifier.code 0} true;
    $i51 := $zext.i32.i64($i50);
    goto corral_source_split_14613;

  corral_source_split_14613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2936} $i52 := skb_frag_dma_map($p10, $p49, 0, $i51, 1);
    call {:si_unique_call 2937} {:cexpr "busaddr"} boogie_si_record_i64($i52);
    goto corral_source_split_14614;

  corral_source_split_14614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2938} $i53 := dma_mapping_error($p10, $i52);
    call {:si_unique_call 2939} {:cexpr "tmp___5"} boogie_si_record_i32($i53);
    goto corral_source_split_14615;

  corral_source_split_14615:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_14616;

  corral_source_split_14616:
    assume {:verifier.code 0} true;
    $i55 := $i42;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2940} $p56 := queue_head_node($p1);
    goto corral_source_split_14620;

  corral_source_split_14620:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_14621;

  corral_source_split_14621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2941} $i58 := skb_frag_size($p49);
    call {:si_unique_call 2942} {:cexpr "tmp___7"} boogie_si_record_i32($i58);
    goto corral_source_split_14622;

  corral_source_split_14622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2943} wrb_fill($p57, $i52, $i58);
    goto corral_source_split_14623;

  corral_source_split_14623:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p57);
    goto corral_source_split_14624;

  corral_source_split_14624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2944} swap_dws($p59, 16);
    goto corral_source_split_14625;

  corral_source_split_14625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2945} queue_head_inc($p1);
    goto corral_source_split_14626;

  corral_source_split_14626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2946} $i60 := skb_frag_size($p49);
    call {:si_unique_call 2947} {:cexpr "tmp___8"} boogie_si_record_i32($i60);
    goto corral_source_split_14627;

  corral_source_split_14627:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, $i42);
    call {:si_unique_call 2948} {:cexpr "copied"} boogie_si_record_i32($i61);
    goto corral_source_split_14628;

  corral_source_split_14628:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i43, 1);
    call {:si_unique_call 2949} {:cexpr "i"} boogie_si_record_i32($i62);
    goto corral_source_split_14629;

  corral_source_split_14629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2950} $p63 := skb_end_pointer($p2);
    goto corral_source_split_14630;

  corral_source_split_14630:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_14631;

  corral_source_split_14631:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_14632;

  corral_source_split_14632:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_14633;

  corral_source_split_14633:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_14634;

  corral_source_split_14634:
    assume {:verifier.code 0} true;
    $i68 := $sgt.i32($i67, $i62);
    goto corral_source_split_14635;

  corral_source_split_14635:
    assume {:verifier.code 0} true;
    $i69 := $i61;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_14637;

  corral_source_split_14637:
    assume {:verifier.code 0} true;
    $i41 := $i69;
    goto $bb10;

  $bb16:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i42, $i43 := $i61, $i62;
    goto $bb16_dummy;

  $bb13:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_14618;

  corral_source_split_14618:
    assume {:verifier.code 0} true;
    $i27, $i28 := $i55, $i34;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14581;

  corral_source_split_14581:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_14582;

  corral_source_split_14582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p77, $i14);
    goto corral_source_split_14583;

  corral_source_split_14583:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i27, 0);
    goto corral_source_split_14584;

  corral_source_split_14584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i76 := 0;
    goto $bb22;

  $bb23:
    assume $i78 == 1;
    goto corral_source_split_14656;

  corral_source_split_14656:
    assume {:verifier.code 0} true;
    $i79, $i80 := $i28, $i27;
    goto $bb26;

  $bb26:
    call $p81, $p82, $i83, $p84, $i85, $i86, $i87, $i79, $i80 := make_tx_wrbs_loop_$bb26($p1, $p10, $p81, $p82, $i83, $p84, $i85, $i86, $i87, $i79, $i80);
    goto $bb26_last;

  corral_source_split_14658:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2957} $p81 := queue_head_node($p1);
    goto corral_source_split_14660;

  corral_source_split_14660:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_14661;

  corral_source_split_14661:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i8.i1($i79);
    goto corral_source_split_14662;

  corral_source_split_14662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2958} unmap_tx_frag($p10, $p82, $i83);
    goto corral_source_split_14663;

  corral_source_split_14663:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p82, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_14664;

  corral_source_split_14664:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_14665;

  corral_source_split_14665:
    assume {:verifier.code 0} true;
    $i86 := $sub.i32($i80, $i85);
    call {:si_unique_call 2959} {:cexpr "copied"} boogie_si_record_i32($i86);
    goto corral_source_split_14666;

  corral_source_split_14666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2960} queue_head_inc($p1);
    goto corral_source_split_14667;

  corral_source_split_14667:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_14668;

  corral_source_split_14668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i87 == 1);
    goto corral_source_split_14670;

  corral_source_split_14670:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb28:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i79, $i80 := 0, $i86;
    goto $bb28_dummy;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_14570;

  corral_source_split_14570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2921} $i20 := skb_headlen($p2);
    call {:si_unique_call 2922} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_14571;

  corral_source_split_14571:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(232, 1));
    goto corral_source_split_14572;

  corral_source_split_14572:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_14573;

  corral_source_split_14573:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i20);
    goto corral_source_split_14574;

  corral_source_split_14574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2923} $i24 := dma_map_single_attrs($p10, $p22, $i23, 1, $0.ref);
    call {:si_unique_call 2924} {:cexpr "busaddr"} boogie_si_record_i64($i24);
    goto corral_source_split_14575;

  corral_source_split_14575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2925} $i25 := dma_mapping_error($p10, $i24);
    call {:si_unique_call 2926} {:cexpr "tmp___1"} boogie_si_record_i32($i25);
    goto corral_source_split_14576;

  corral_source_split_14576:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_14577;

  corral_source_split_14577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2927} $p29 := queue_head_node($p1);
    goto corral_source_split_14586;

  corral_source_split_14586:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_14587;

  corral_source_split_14587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2928} wrb_fill($p30, $i24, $i20);
    goto corral_source_split_14588;

  corral_source_split_14588:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_14589;

  corral_source_split_14589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2929} swap_dws($p31, 16);
    goto corral_source_split_14590;

  corral_source_split_14590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2930} queue_head_inc($p1);
    goto corral_source_split_14591;

  corral_source_split_14591:
    assume {:verifier.code 0} true;
    $i32 := $add.i32(0, $i20);
    call {:si_unique_call 2931} {:cexpr "copied"} boogie_si_record_i32($i32);
    goto corral_source_split_14592;

  corral_source_split_14592:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i32, 1;
    goto $bb7;

  $bb3:
    assume $i26 == 1;
    goto corral_source_split_14579;

  corral_source_split_14579:
    assume {:verifier.code 0} true;
    $i27, $i28 := 0, 0;
    goto $bb5;

  $bb16_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14604;

  $bb28_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14658;
}



const netif_stop_subqueue: ref;

axiom netif_stop_subqueue == $sub.ref(0, 797974);

procedure netif_stop_subqueue($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation netif_stop_subqueue($p0: ref, $i1: i16)
{
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2961} {:cexpr "netif_stop_subqueue:arg:queue_index"} boogie_si_record_i16($i1);
    goto corral_source_split_14672;

  corral_source_split_14672:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_14673;

  corral_source_split_14673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2962} $p3 := netdev_get_tx_queue($p0, $i2);
    goto corral_source_split_14674;

  corral_source_split_14674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2963} $i4 := netpoll_trap();
    call {:si_unique_call 2964} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_14675;

  corral_source_split_14675:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_14676;

  corral_source_split_14676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2965} netif_tx_stop_queue($p3);
    goto corral_source_split_14680;

  corral_source_split_14680:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_14678;

  corral_source_split_14678:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const be_txq_notify: ref;

axiom be_txq_notify == $sub.ref(0, 799006);

procedure be_txq_notify($p0: ref, $p1: ref, $i2: i16);
  free requires assertsPassed;



implementation be_txq_notify($p0: ref, $p1: ref, $i2: i16)
{
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2966} {:cexpr "be_txq_notify:arg:posted"} boogie_si_record_i16($i2);
    goto corral_source_split_14682;

  corral_source_split_14682:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(28, 1));
    goto corral_source_split_14683;

  corral_source_split_14683:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_14684;

  corral_source_split_14684:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_14685;

  corral_source_split_14685:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 2047);
    goto corral_source_split_14686;

  corral_source_split_14686:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, 0);
    call {:si_unique_call 2967} {:cexpr "val"} boogie_si_record_i32($i8);
    goto corral_source_split_14687;

  corral_source_split_14687:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i2);
    goto corral_source_split_14688;

  corral_source_split_14688:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 16383);
    goto corral_source_split_14689;

  corral_source_split_14689:
    assume {:verifier.code 0} true;
    $i11 := $shl.i32($i10, 16);
    goto corral_source_split_14690;

  corral_source_split_14690:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, $i8);
    call {:si_unique_call 2968} {:cexpr "val"} boogie_si_record_i32($i12);
    call {:si_unique_call 2969} devirtbounce.4(0);
    goto corral_source_split_14691;

  corral_source_split_14691:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_14692;

  corral_source_split_14692:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_14693;

  corral_source_split_14693:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 16528)), $mul.ref(0, 1));
    goto corral_source_split_14694;

  corral_source_split_14694:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_14695;

  corral_source_split_14695:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_14696;

  corral_source_split_14696:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p14, $mul.ref($i17, 1));
    goto corral_source_split_14697;

  corral_source_split_14697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2970} iowrite32($i12, $p18);
    goto corral_source_split_14698;

  corral_source_split_14698:
    assume {:verifier.code 0} true;
    return;
}



const be_tx_stats_update: ref;

axiom be_tx_stats_update == $sub.ref(0, 800038);

procedure be_tx_stats_update($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i1);
  free requires assertsPassed;
  modifies $M.0;



implementation be_tx_stats_update($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i1)
{
  var $i5: i8;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2971} {:cexpr "be_tx_stats_update:arg:wrb_cnt"} boogie_si_record_i32($i1);
    call {:si_unique_call 2972} {:cexpr "be_tx_stats_update:arg:copied"} boogie_si_record_i32($i2);
    call {:si_unique_call 2973} {:cexpr "be_tx_stats_update:arg:gso_segs"} boogie_si_record_i32($i3);
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 2974} {:cexpr "be_tx_stats_update:arg:stopped"} boogie_si_record_i1($i4);
    goto corral_source_split_14700;

  corral_source_split_14700:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(52, 1));
    goto corral_source_split_14701;

  corral_source_split_14701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2975} u64_stats_update_begin($p7);
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(16, 1));
    goto corral_source_split_14702;

  corral_source_split_14702:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_14703;

  corral_source_split_14703:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 1);
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(16, 1));
    goto corral_source_split_14704;

  corral_source_split_14704:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i10);
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(24, 1));
    goto corral_source_split_14705;

  corral_source_split_14705:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_14706;

  corral_source_split_14706:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i1);
    goto corral_source_split_14707;

  corral_source_split_14707:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i13, $i14);
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(24, 1));
    goto corral_source_split_14708;

  corral_source_split_14708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p16, $i15);
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(0, 1));
    goto corral_source_split_14709;

  corral_source_split_14709:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_14710;

  corral_source_split_14710:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i2);
    goto corral_source_split_14711;

  corral_source_split_14711:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i18, $i19);
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(0, 1));
    goto corral_source_split_14712;

  corral_source_split_14712:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p21, $i20);
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(8, 1));
    goto corral_source_split_14713;

  corral_source_split_14713:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_14714;

  corral_source_split_14714:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i3, 0);
    goto corral_source_split_14715;

  corral_source_split_14715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    goto corral_source_split_14720;

  corral_source_split_14720:
    assume {:verifier.code 0} true;
    $i26 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14722;

  corral_source_split_14722:
    assume {:verifier.code 0} true;
    $i27 := $add.i64($i23, $i26);
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(8, 1));
    goto corral_source_split_14723;

  corral_source_split_14723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p28, $i27);
    goto corral_source_split_14724;

  corral_source_split_14724:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i5);
    goto corral_source_split_14725;

  corral_source_split_14725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(52, 1));
    goto corral_source_split_14732;

  corral_source_split_14732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2976} u64_stats_update_begin($p34);
    goto corral_source_split_14733;

  corral_source_split_14733:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i29 == 1;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(48, 1));
    goto corral_source_split_14727;

  corral_source_split_14727:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_14728;

  corral_source_split_14728:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, 1);
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(48, 1));
    goto corral_source_split_14729;

  corral_source_split_14729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_14730;

  corral_source_split_14730:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_14717;

  corral_source_split_14717:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i3);
    goto corral_source_split_14718;

  corral_source_split_14718:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb3;
}



const dev_kfree_skb_any: ref;

axiom dev_kfree_skb_any == $sub.ref(0, 801070);

procedure dev_kfree_skb_any($p0: ref);
  free requires assertsPassed;



implementation dev_kfree_skb_any($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14735;

  corral_source_split_14735:
    assume {:verifier.code 0} true;
    return;
}



const dma_map_single_attrs: ref;

axiom dma_map_single_attrs == $sub.ref(0, 802102);

procedure dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2977} {:cexpr "dma_map_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 2978} {:cexpr "dma_map_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_14737;

  corral_source_split_14737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2979} $p5 := get_dma_ops($p0);
    goto corral_source_split_14738;

  corral_source_split_14738:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    goto corral_source_split_14739;

  corral_source_split_14739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2980} kmemcheck_mark_initialized($p1, $i6);
    goto corral_source_split_14740;

  corral_source_split_14740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2981} $i7 := valid_dma_direction($i3);
    call {:si_unique_call 2982} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_14741;

  corral_source_split_14741:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_14742;

  corral_source_split_14742:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_14743;

  corral_source_split_14743:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_14744;

  corral_source_split_14744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2983} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 2984} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_14745;

  corral_source_split_14745:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_14746;

  corral_source_split_14746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_14750;

  corral_source_split_14750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2986} $i14 := __phys_addr($i13);
    call {:si_unique_call 2987} {:cexpr "tmp___2"} boogie_si_record_i64($i14);
    goto corral_source_split_14751;

  corral_source_split_14751:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_14752;

  corral_source_split_14752:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_14753;

  corral_source_split_14753:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i64($i14, 12);
    goto corral_source_split_14754;

  corral_source_split_14754:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($sub.i64(0, 24189255811072), $i17);
    goto corral_source_split_14755;

  corral_source_split_14755:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_14756;

  corral_source_split_14756:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p1);
    goto corral_source_split_14757;

  corral_source_split_14757:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 4095);
    call {:si_unique_call 2988} $i22 := devirtbounce.12($p16, $p0, $p19, $i21, $i2, $i3, $p4);
    call {:si_unique_call 2989} {:cexpr "addr"} boogie_si_record_i64($i22);
    goto corral_source_split_14758;

  corral_source_split_14758:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p1);
    goto corral_source_split_14759;

  corral_source_split_14759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2990} $i24 := __phys_addr($i23);
    call {:si_unique_call 2991} {:cexpr "tmp___3"} boogie_si_record_i64($i24);
    goto corral_source_split_14760;

  corral_source_split_14760:
    assume {:verifier.code 0} true;
    $i25 := $lshr.i64($i24, 12);
    goto corral_source_split_14761;

  corral_source_split_14761:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($sub.i64(0, 24189255811072), $i25);
    goto corral_source_split_14762;

  corral_source_split_14762:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_14763;

  corral_source_split_14763:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p1);
    goto corral_source_split_14764;

  corral_source_split_14764:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 4095);
    goto corral_source_split_14765;

  corral_source_split_14765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2992} debug_dma_map_page($p0, $p27, $i29, $i2, $i3, $i22, 1);
    goto corral_source_split_14766;

  corral_source_split_14766:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb1:
    assume $i12 == 1;
    call {:si_unique_call 2985} devirtbounce.2(0, .str.22, 19, 12);
    goto corral_source_split_14748;

  corral_source_split_14748:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_map_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const dma_mapping_error: ref;

axiom dma_mapping_error == $sub.ref(0, 803134);

procedure dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i11: i1;
  var $i12: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2993} {:cexpr "dma_mapping_error:arg:dma_addr"} boogie_si_record_i64($i1);
    goto corral_source_split_14768;

  corral_source_split_14768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2994} $p2 := get_dma_ops($p0);
    goto corral_source_split_14769;

  corral_source_split_14769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2995} debug_dma_mapping_error($p0, $i1);
    goto corral_source_split_14770;

  corral_source_split_14770:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_14771;

  corral_source_split_14771:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_14772;

  corral_source_split_14772:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_14773;

  corral_source_split_14773:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_14774;

  corral_source_split_14774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i1, 0);
    goto corral_source_split_14782;

  corral_source_split_14782:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_14783;

  corral_source_split_14783:
    assume {:verifier.code 0} true;
    $i10 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14780;

  corral_source_split_14780:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_14776;

  corral_source_split_14776:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_14777;

  corral_source_split_14777:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    call {:si_unique_call 2996} $i9 := devirtbounce.17($p8, $p0, $i1);
    call {:si_unique_call 2997} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_14778;

  corral_source_split_14778:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const wrb_fill: ref;

axiom wrb_fill == $sub.ref(0, 804166);

procedure wrb_fill($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation wrb_fill($p0: ref, $i1: i64, $i2: i32)
{
  var $i3: i64;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2998} {:cexpr "wrb_fill:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 2999} {:cexpr "wrb_fill:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_14785;

  corral_source_split_14785:
    assume {:verifier.code 0} true;
    $i3 := $lshr.i64($i1, 32);
    goto corral_source_split_14786;

  corral_source_split_14786:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_14787;

  corral_source_split_14787:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_14788;

  corral_source_split_14788:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_14789;

  corral_source_split_14789:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i1);
    goto corral_source_split_14790;

  corral_source_split_14790:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_14791;

  corral_source_split_14791:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_14792;

  corral_source_split_14792:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i2, 65535);
    goto corral_source_split_14793;

  corral_source_split_14793:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_14794;

  corral_source_split_14794:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_14795;

  corral_source_split_14795:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_14796;

  corral_source_split_14796:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_14797;

  corral_source_split_14797:
    assume {:verifier.code 0} true;
    return;
}



const skb_frag_size: ref;

axiom skb_frag_size == $sub.ref(0, 805198);

procedure skb_frag_size($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_frag_size($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14799;

  corral_source_split_14799:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_14800;

  corral_source_split_14800:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_14801;

  corral_source_split_14801:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const skb_frag_dma_map: ref;

axiom skb_frag_dma_map == $sub.ref(0, 806230);

procedure skb_frag_dma_map($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64);
  free requires assertsPassed;



implementation skb_frag_dma_map($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3000} {:cexpr "skb_frag_dma_map:arg:offset"} boogie_si_record_i64($i2);
    call {:si_unique_call 3001} {:cexpr "skb_frag_dma_map:arg:size"} boogie_si_record_i64($i3);
    call {:si_unique_call 3002} {:cexpr "skb_frag_dma_map:arg:dir"} boogie_si_record_i32($i4);
    goto corral_source_split_14803;

  corral_source_split_14803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3003} $p5 := skb_frag_page($p1);
    goto corral_source_split_14804;

  corral_source_split_14804:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_14805;

  corral_source_split_14805:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_14806;

  corral_source_split_14806:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_14807;

  corral_source_split_14807:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, $i2);
    goto corral_source_split_14808;

  corral_source_split_14808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3004} $i10 := dma_map_page($p0, $p5, $i9, $i3, $i4);
    call {:si_unique_call 3005} {:cexpr "tmp___0"} boogie_si_record_i64($i10);
    goto corral_source_split_14809;

  corral_source_split_14809:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const wrb_fill_hdr: ref;

axiom wrb_fill_hdr == $sub.ref(0, 807262);

procedure wrb_fill_hdr($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i1);
  free requires assertsPassed;
  modifies $M.0;



implementation wrb_fill_hdr($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i1)
{
  var $i6: i8;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i1;
  var $i23: i8;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i16;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $i67: i1;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var cmdloc_dummy_var_366: [ref]i8;
  var cmdloc_dummy_var_367: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3006} {:cexpr "wrb_fill_hdr:arg:wrb_cnt"} boogie_si_record_i32($i3);
    call {:si_unique_call 3007} {:cexpr "wrb_fill_hdr:arg:len"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 3008} {:cexpr "wrb_fill_hdr:arg:skip_hw_vlan"} boogie_si_record_i1($i5);
    goto corral_source_split_14811;

  corral_source_split_14811:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_14812;

  corral_source_split_14812:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_366 := $M.0;
    call {:si_unique_call 3009} cmdloc_dummy_var_367 := $memset.i8(cmdloc_dummy_var_366, $p7, 0, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_367;
    goto corral_source_split_14813;

  corral_source_split_14813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3010} $i8 := amap_mask(1);
    call {:si_unique_call 3011} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_14814;

  corral_source_split_14814:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_14815;

  corral_source_split_14815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3012} amap_set($p9, 2, $i8, 2, 1);
    goto corral_source_split_14816;

  corral_source_split_14816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3013} $i10 := skb_is_gso($p2);
    goto corral_source_split_14817;

  corral_source_split_14817:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 3014} {:cexpr "tmp___9"} boogie_si_record_i8($i11);
    goto corral_source_split_14818;

  corral_source_split_14818:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_14819;

  corral_source_split_14819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    goto corral_source_split_14837;

  corral_source_split_14837:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p2);
    goto corral_source_split_14838;

  corral_source_split_14838:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p39, $mul.ref(124, 1));
    goto corral_source_split_14839;

  corral_source_split_14839:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_14840;

  corral_source_split_14840:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_14841;

  corral_source_split_14841:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 12);
    goto corral_source_split_14842;

  corral_source_split_14842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(170, 1));
    goto corral_source_split_14865;

  corral_source_split_14865:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.0, $p54);
    goto corral_source_split_14866;

  corral_source_split_14866:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i55);
    goto corral_source_split_14867;

  corral_source_split_14867:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 4096);
    goto corral_source_split_14868;

  corral_source_split_14868:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_14869;

  corral_source_split_14869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3045} $i65 := amap_mask(1);
    call {:si_unique_call 3046} {:cexpr "tmp___12"} boogie_si_record_i32($i65);
    goto corral_source_split_14901;

  corral_source_split_14901:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p1);
    goto corral_source_split_14902;

  corral_source_split_14902:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i8.i1($i6);
    goto corral_source_split_14903;

  corral_source_split_14903:
    assume {:verifier.code 0} true;
    $i68 := $xor.i1($i67, 1);
    goto corral_source_split_14904;

  corral_source_split_14904:
    assume {:verifier.code 0} true;
    $i69 := $zext.i1.i32($i68);
    goto corral_source_split_14905;

  corral_source_split_14905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3047} amap_set($p66, 2, $i65, 0, $i69);
    goto corral_source_split_14906;

  corral_source_split_14906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3048} $i70 := amap_mask(1);
    call {:si_unique_call 3049} {:cexpr "tmp___13"} boogie_si_record_i32($i70);
    goto corral_source_split_14907;

  corral_source_split_14907:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p1);
    goto corral_source_split_14908;

  corral_source_split_14908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3050} amap_set($p71, 2, $i70, 1, 1);
    goto corral_source_split_14909;

  corral_source_split_14909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3051} $i72 := amap_mask(5);
    call {:si_unique_call 3052} {:cexpr "tmp___14"} boogie_si_record_i32($i72);
    goto corral_source_split_14910;

  corral_source_split_14910:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p1);
    goto corral_source_split_14911;

  corral_source_split_14911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3053} amap_set($p73, 2, $i72, 13, $i3);
    goto corral_source_split_14912;

  corral_source_split_14912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3054} $i74 := amap_mask(16);
    call {:si_unique_call 3055} {:cexpr "tmp___15"} boogie_si_record_i32($i74);
    goto corral_source_split_14913;

  corral_source_split_14913:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p1);
    goto corral_source_split_14914;

  corral_source_split_14914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3056} amap_set($p75, 3, $i74, 0, $i4);
    goto corral_source_split_14915;

  corral_source_split_14915:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i58 == 1;
    goto corral_source_split_14891;

  corral_source_split_14891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3037} $i59 := amap_mask(1);
    call {:si_unique_call 3038} {:cexpr "tmp___10"} boogie_si_record_i32($i59);
    goto corral_source_split_14892;

  corral_source_split_14892:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p1);
    goto corral_source_split_14893;

  corral_source_split_14893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3039} amap_set($p60, 2, $i59, 10, 1);
    goto corral_source_split_14894;

  corral_source_split_14894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3040} $i61 := be_get_tx_vlan_tag($p0, $p2);
    call {:si_unique_call 3041} {:cexpr "vlan_tag"} boogie_si_record_i16($i61);
    goto corral_source_split_14895;

  corral_source_split_14895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3042} $i62 := amap_mask(16);
    call {:si_unique_call 3043} {:cexpr "tmp___11"} boogie_si_record_i32($i62);
    goto corral_source_split_14896;

  corral_source_split_14896:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p1);
    goto corral_source_split_14897;

  corral_source_split_14897:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i61);
    goto corral_source_split_14898;

  corral_source_split_14898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3044} amap_set($p63, 3, $i62, 16, $i64);
    goto corral_source_split_14899;

  corral_source_split_14899:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb12:
    assume $i43 == 1;
    goto corral_source_split_14871;

  corral_source_split_14871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3027} $i44 := is_tcp_pkt($p2);
    call {:si_unique_call 3028} {:cexpr "tmp___8"} boogie_si_record_i8($i44);
    goto corral_source_split_14872;

  corral_source_split_14872:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_14873;

  corral_source_split_14873:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_14874;

  corral_source_split_14874:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i46 == 1);
    goto corral_source_split_14881;

  corral_source_split_14881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3032} $i49 := is_udp_pkt($p2);
    call {:si_unique_call 3033} {:cexpr "tmp___7"} boogie_si_record_i8($i49);
    goto corral_source_split_14882;

  corral_source_split_14882:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_14883;

  corral_source_split_14883:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_14884;

  corral_source_split_14884:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i51 == 1;
    goto corral_source_split_14886;

  corral_source_split_14886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3034} $i52 := amap_mask(1);
    call {:si_unique_call 3035} {:cexpr "tmp___6"} boogie_si_record_i32($i52);
    goto corral_source_split_14887;

  corral_source_split_14887:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p1);
    goto corral_source_split_14888;

  corral_source_split_14888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3036} amap_set($p53, 2, $i52, 7, 1);
    goto corral_source_split_14889;

  corral_source_split_14889:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i46 == 1;
    goto corral_source_split_14876;

  corral_source_split_14876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3029} $i47 := amap_mask(1);
    call {:si_unique_call 3030} {:cexpr "tmp___5"} boogie_si_record_i32($i47);
    goto corral_source_split_14877;

  corral_source_split_14877:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p1);
    goto corral_source_split_14878;

  corral_source_split_14878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3031} amap_set($p48, 2, $i47, 8, 1);
    goto corral_source_split_14879;

  corral_source_split_14879:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_14821;

  corral_source_split_14821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3015} $i13 := amap_mask(1);
    call {:si_unique_call 3016} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_14822;

  corral_source_split_14822:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_14823;

  corral_source_split_14823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3017} amap_set($p14, 2, $i13, 9, 1);
    goto corral_source_split_14824;

  corral_source_split_14824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3018} $p15 := skb_end_pointer($p2);
    goto corral_source_split_14825;

  corral_source_split_14825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3019} $i16 := amap_mask(14);
    call {:si_unique_call 3020} {:cexpr "tmp___2"} boogie_si_record_i32($i16);
    goto corral_source_split_14826;

  corral_source_split_14826:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p1);
    goto corral_source_split_14827;

  corral_source_split_14827:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p15);
    goto corral_source_split_14828;

  corral_source_split_14828:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 320)), $mul.ref(2, 1));
    goto corral_source_split_14829;

  corral_source_split_14829:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_14830;

  corral_source_split_14830:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_14831;

  corral_source_split_14831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3021} amap_set($p17, 2, $i16, 18, $i21);
    goto corral_source_split_14832;

  corral_source_split_14832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3022} $i22 := skb_is_gso_v6($p2);
    goto corral_source_split_14833;

  corral_source_split_14833:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i8($i22);
    call {:si_unique_call 3023} {:cexpr "tmp___4"} boogie_si_record_i8($i23);
    goto corral_source_split_14834;

  corral_source_split_14834:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_14835;

  corral_source_split_14835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume $i24 == 1;
    goto corral_source_split_14844;

  corral_source_split_14844:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_14845;

  corral_source_split_14845:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_14846;

  corral_source_split_14846:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_14847;

  corral_source_split_14847:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p27);
    goto corral_source_split_14848;

  corral_source_split_14848:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_14849;

  corral_source_split_14849:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 57888);
    goto corral_source_split_14850;

  corral_source_split_14850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb5;

  $bb6:
    assume $i30 == 1;
    goto corral_source_split_14852;

  corral_source_split_14852:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_14853;

  corral_source_split_14853:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_14854;

  corral_source_split_14854:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_14855;

  corral_source_split_14855:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.0, $p33);
    goto corral_source_split_14856;

  corral_source_split_14856:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_14857;

  corral_source_split_14857:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 57896);
    goto corral_source_split_14858;

  corral_source_split_14858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb5;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_14860;

  corral_source_split_14860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3024} $i37 := amap_mask(1);
    call {:si_unique_call 3025} {:cexpr "tmp___3"} boogie_si_record_i32($i37);
    goto corral_source_split_14861;

  corral_source_split_14861:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p1);
    goto corral_source_split_14862;

  corral_source_split_14862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3026} amap_set($p38, 2, $i37, 4, 1);
    goto corral_source_split_14863;

  corral_source_split_14863:
    assume {:verifier.code 0} true;
    goto $bb10;
}



const skb_is_gso: ref;

axiom skb_is_gso == $sub.ref(0, 808294);

procedure skb_is_gso($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation skb_is_gso($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14917;

  corral_source_split_14917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3057} $p1 := skb_end_pointer($p0);
    goto corral_source_split_14918;

  corral_source_split_14918:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_14919;

  corral_source_split_14919:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 320)), $mul.ref(2, 1));
    goto corral_source_split_14920;

  corral_source_split_14920:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_14921;

  corral_source_split_14921:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_14922;

  corral_source_split_14922:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_14923;

  corral_source_split_14923:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const skb_is_gso_v6: ref;

axiom skb_is_gso_v6 == $sub.ref(0, 809326);

procedure skb_is_gso_v6($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation skb_is_gso_v6($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14925;

  corral_source_split_14925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3058} $p1 := skb_end_pointer($p0);
    goto corral_source_split_14926;

  corral_source_split_14926:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_14927;

  corral_source_split_14927:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 320)), $mul.ref(6, 1));
    goto corral_source_split_14928;

  corral_source_split_14928:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_14929;

  corral_source_split_14929:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_14930;

  corral_source_split_14930:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 16);
    goto corral_source_split_14931;

  corral_source_split_14931:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_14932;

  corral_source_split_14932:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const is_tcp_pkt: ref;

axiom is_tcp_pkt == $sub.ref(0, 810358);

procedure is_tcp_pkt($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation is_tcp_pkt($p0: ref) returns ($r: i8)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i8;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i8;
  var $i28: i8;
  var $i14: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14934;

  corral_source_split_14934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3059} $p1 := ip_hdr($p0);
    goto corral_source_split_14935;

  corral_source_split_14935:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_14936;

  corral_source_split_14936:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(0, 1));
    goto corral_source_split_14937;

  corral_source_split_14937:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_14938;

  corral_source_split_14938:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_14939;

  corral_source_split_14939:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 64);
    goto corral_source_split_14940;

  corral_source_split_14940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_14951;

  corral_source_split_14951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3062} $p15 := ip_hdr($p0);
    goto corral_source_split_14952;

  corral_source_split_14952:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_14953;

  corral_source_split_14953:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref(0, 1));
    goto corral_source_split_14954;

  corral_source_split_14954:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_14955;

  corral_source_split_14955:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_14956;

  corral_source_split_14956:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 96);
    goto corral_source_split_14957;

  corral_source_split_14957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i14 := $i28;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14959;

  corral_source_split_14959:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_14961;

  corral_source_split_14961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3063} $p21 := ipv6_hdr($p0);
    goto corral_source_split_14962;

  corral_source_split_14962:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(6, 1));
    goto corral_source_split_14963;

  corral_source_split_14963:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_14964;

  corral_source_split_14964:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_14965;

  corral_source_split_14965:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 6);
    goto corral_source_split_14966;

  corral_source_split_14966:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    goto corral_source_split_14967;

  corral_source_split_14967:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    call {:si_unique_call 3064} {:cexpr "val"} boogie_si_record_i8($i27);
    goto corral_source_split_14968;

  corral_source_split_14968:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_14942;

  corral_source_split_14942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3060} $p7 := ip_hdr($p0);
    goto corral_source_split_14943;

  corral_source_split_14943:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(9, 1));
    goto corral_source_split_14944;

  corral_source_split_14944:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_14945;

  corral_source_split_14945:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_14946;

  corral_source_split_14946:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 6);
    goto corral_source_split_14947;

  corral_source_split_14947:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_14948;

  corral_source_split_14948:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    call {:si_unique_call 3061} {:cexpr "val"} boogie_si_record_i8($i13);
    goto corral_source_split_14949;

  corral_source_split_14949:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb3;
}



const is_udp_pkt: ref;

axiom is_udp_pkt == $sub.ref(0, 811390);

procedure is_udp_pkt($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation is_udp_pkt($p0: ref) returns ($r: i8)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i8;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i8;
  var $i28: i8;
  var $i14: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14970;

  corral_source_split_14970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3065} $p1 := ip_hdr($p0);
    goto corral_source_split_14971;

  corral_source_split_14971:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_14972;

  corral_source_split_14972:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(0, 1));
    goto corral_source_split_14973;

  corral_source_split_14973:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_14974;

  corral_source_split_14974:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_14975;

  corral_source_split_14975:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 64);
    goto corral_source_split_14976;

  corral_source_split_14976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_14987;

  corral_source_split_14987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3068} $p15 := ip_hdr($p0);
    goto corral_source_split_14988;

  corral_source_split_14988:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_14989;

  corral_source_split_14989:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref(0, 1));
    goto corral_source_split_14990;

  corral_source_split_14990:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_14991;

  corral_source_split_14991:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_14992;

  corral_source_split_14992:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 96);
    goto corral_source_split_14993;

  corral_source_split_14993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i14 := $i28;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14995;

  corral_source_split_14995:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_14997;

  corral_source_split_14997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3069} $p21 := ipv6_hdr($p0);
    goto corral_source_split_14998;

  corral_source_split_14998:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(6, 1));
    goto corral_source_split_14999;

  corral_source_split_14999:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_15000;

  corral_source_split_15000:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_15001;

  corral_source_split_15001:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 17);
    goto corral_source_split_15002;

  corral_source_split_15002:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    goto corral_source_split_15003;

  corral_source_split_15003:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    call {:si_unique_call 3070} {:cexpr "val"} boogie_si_record_i8($i27);
    goto corral_source_split_15004;

  corral_source_split_15004:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_14978;

  corral_source_split_14978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3066} $p7 := ip_hdr($p0);
    goto corral_source_split_14979;

  corral_source_split_14979:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(9, 1));
    goto corral_source_split_14980;

  corral_source_split_14980:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_14981;

  corral_source_split_14981:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_14982;

  corral_source_split_14982:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 17);
    goto corral_source_split_14983;

  corral_source_split_14983:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_14984;

  corral_source_split_14984:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    call {:si_unique_call 3067} {:cexpr "val"} boogie_si_record_i8($i13);
    goto corral_source_split_14985;

  corral_source_split_14985:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb3;
}



const be_get_tx_vlan_tag: ref;

axiom be_get_tx_vlan_tag == $sub.ref(0, 812422);

procedure be_get_tx_vlan_tag($p0: ref, $p1: ref) returns ($r: i16);
  free requires assertsPassed;



implementation be_get_tx_vlan_tag($p0: ref, $p1: ref) returns ($r: i16)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i32;
  var $i23: i16;
  var $i24: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15006;

  corral_source_split_15006:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(170, 1));
    goto corral_source_split_15007;

  corral_source_split_15007:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_15008;

  corral_source_split_15008:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_15009;

  corral_source_split_15009:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 61439);
    goto corral_source_split_15010;

  corral_source_split_15010:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    call {:si_unique_call 3071} {:cexpr "vlan_tag"} boogie_si_record_i16($i6);
    goto corral_source_split_15011;

  corral_source_split_15011:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_15012;

  corral_source_split_15012:
    assume {:verifier.code 0} true;
    $i8 := $ashr.i32($i7, 13);
    goto corral_source_split_15013;

  corral_source_split_15013:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    call {:si_unique_call 3072} {:cexpr "vlan_prio"} boogie_si_record_i8($i9);
    goto corral_source_split_15014;

  corral_source_split_15014:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363442, 1));
    goto corral_source_split_15015;

  corral_source_split_15015:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_15016;

  corral_source_split_15016:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_15017;

  corral_source_split_15017:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i9);
    goto corral_source_split_15018;

  corral_source_split_15018:
    assume {:verifier.code 0} true;
    $i14 := $ashr.i32($i12, $i13);
    goto corral_source_split_15019;

  corral_source_split_15019:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 1);
    goto corral_source_split_15020;

  corral_source_split_15020:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_15021;

  corral_source_split_15021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15032;

  corral_source_split_15032:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_15023;

  corral_source_split_15023:
    assume {:verifier.code 0} true;
    $i17 := $sext.i16.i32($i6);
    goto corral_source_split_15024;

  corral_source_split_15024:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 8191);
    goto corral_source_split_15025;

  corral_source_split_15025:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363444, 1));
    goto corral_source_split_15026;

  corral_source_split_15026:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_15027;

  corral_source_split_15027:
    assume {:verifier.code 0} true;
    $i21 := $sext.i16.i32($i20);
    goto corral_source_split_15028;

  corral_source_split_15028:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i18, $i21);
    goto corral_source_split_15029;

  corral_source_split_15029:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    call {:si_unique_call 3073} {:cexpr "vlan_tag"} boogie_si_record_i16($i23);
    goto corral_source_split_15030;

  corral_source_split_15030:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb3;
}



const ipv6_hdr: ref;

axiom ipv6_hdr == $sub.ref(0, 813454);

procedure ipv6_hdr($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ipv6_hdr($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15034;

  corral_source_split_15034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3074} $p1 := skb_network_header($p0);
    goto corral_source_split_15035;

  corral_source_split_15035:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_15036;

  corral_source_split_15036:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_network_header: ref;

axiom skb_network_header == $sub.ref(0, 814486);

procedure skb_network_header($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_network_header($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15038;

  corral_source_split_15038:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(224, 1));
    goto corral_source_split_15039;

  corral_source_split_15039:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_15040;

  corral_source_split_15040:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(208, 1));
    goto corral_source_split_15041;

  corral_source_split_15041:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_15042;

  corral_source_split_15042:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_15043;

  corral_source_split_15043:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_15044;

  corral_source_split_15044:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const skb_frag_page: ref;

axiom skb_frag_page == $sub.ref(0, 815518);

procedure skb_frag_page($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_frag_page($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15046;

  corral_source_split_15046:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_15047;

  corral_source_split_15047:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_15048;

  corral_source_split_15048:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const debug_dma_mapping_error: ref;

axiom debug_dma_mapping_error == $sub.ref(0, 816550);

procedure debug_dma_mapping_error($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation debug_dma_mapping_error($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3075} {:cexpr "debug_dma_mapping_error:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_15050;

  corral_source_split_15050:
    assume {:verifier.code 0} true;
    return;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 817582);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3076} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_15052;

  corral_source_split_15052:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3077} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 3078} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_15053;

  corral_source_split_15053:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const be_ipv6_exthdr_check: ref;

axiom be_ipv6_exthdr_check == $sub.ref(0, 818614);

procedure be_ipv6_exthdr_check($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation be_ipv6_exthdr_check($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i13: i32;
  var $i14: i32;
  var $i15: i16;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15055;

  corral_source_split_15055:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(232, 1));
    goto corral_source_split_15056;

  corral_source_split_15056:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_15057;

  corral_source_split_15057:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_15058;

  corral_source_split_15058:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 14)), $mul.ref(12, 1));
    goto corral_source_split_15059;

  corral_source_split_15059:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_15060;

  corral_source_split_15060:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_15061;

  corral_source_split_15061:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 56710);
    goto corral_source_split_15062;

  corral_source_split_15062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_15097;

  corral_source_split_15097:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_15064;

  corral_source_split_15064:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(232, 1));
    goto corral_source_split_15065;

  corral_source_split_15065:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_15066;

  corral_source_split_15066:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_15067;

  corral_source_split_15067:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i64(14);
    goto corral_source_split_15068;

  corral_source_split_15068:
    assume {:verifier.code 0} true;
    goto corral_source_split_15069;

  corral_source_split_15069:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32(14);
    goto corral_source_split_15070;

  corral_source_split_15070:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 40);
    goto corral_source_split_15071;

  corral_source_split_15071:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    call {:si_unique_call 3079} {:cexpr "offset"} boogie_si_record_i16($i15);
    goto corral_source_split_15072;

  corral_source_split_15072:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p10, $mul.ref($i11, 40)), $mul.ref(6, 1));
    goto corral_source_split_15073;

  corral_source_split_15073:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_15074;

  corral_source_split_15074:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_15075;

  corral_source_split_15075:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 6);
    goto corral_source_split_15076;

  corral_source_split_15076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_15078;

  corral_source_split_15078:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p10, $mul.ref($i11, 40)), $mul.ref(6, 1));
    goto corral_source_split_15079;

  corral_source_split_15079:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_15080;

  corral_source_split_15080:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_15081;

  corral_source_split_15081:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 17);
    goto corral_source_split_15082;

  corral_source_split_15082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb5;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_15084;

  corral_source_split_15084:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(232, 1));
    goto corral_source_split_15085;

  corral_source_split_15085:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_15086;

  corral_source_split_15086:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_15087;

  corral_source_split_15087:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i64($i15);
    goto corral_source_split_15088;

  corral_source_split_15088:
    assume {:verifier.code 0} true;
    goto corral_source_split_15089;

  corral_source_split_15089:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p26, $mul.ref($i27, 2)), $mul.ref(1, 1));
    goto corral_source_split_15090;

  corral_source_split_15090:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_15091;

  corral_source_split_15091:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_15092;

  corral_source_split_15092:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 255);
    goto corral_source_split_15093;

  corral_source_split_15093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_15095;

  corral_source_split_15095:
    assume {:verifier.code 0} true;
    $i33 := 1;
    goto $bb10;
}



const skb_share_check: ref;

axiom skb_share_check == $sub.ref(0, 819646);

procedure skb_share_check($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_share_check($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3080} {:cexpr "skb_share_check:arg:pri"} boogie_si_record_i32($i1);
    goto corral_source_split_15099;

  corral_source_split_15099:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 16);
    goto corral_source_split_15100;

  corral_source_split_15100:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_15101;

  corral_source_split_15101:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3082} $i4 := skb_shared($p0);
    call {:si_unique_call 3083} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_15106;

  corral_source_split_15106:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_15107;

  corral_source_split_15107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $p13 := $p0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_15123;

  corral_source_split_15123:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_15109;

  corral_source_split_15109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3084} $p6 := skb_clone($p0, $i1);
    goto corral_source_split_15110;

  corral_source_split_15110:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_15111;

  corral_source_split_15111:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_15112;

  corral_source_split_15112:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_15113;

  corral_source_split_15113:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_15114;

  corral_source_split_15114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3085} $i11 := ldv__builtin_expect($i10, 1);
    call {:si_unique_call 3086} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_15115;

  corral_source_split_15115:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_15116;

  corral_source_split_15116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_15121;

  corral_source_split_15121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3088} kfree_skb($p0);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $p6;
    goto $bb9;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_15118;

  corral_source_split_15118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3087} consume_skb($p0);
    goto corral_source_split_15119;

  corral_source_split_15119:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_15103;

  corral_source_split_15103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3081} __might_sleep(.str.105, 926, 0);
    goto corral_source_split_15104;

  corral_source_split_15104:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __vlan_put_tag: ref;

axiom __vlan_put_tag == $sub.ref(0, 820678);

procedure __vlan_put_tag($p0: ref, $i1: i16, $i2: i16) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __vlan_put_tag($p0: ref, $i1: i16, $i2: i16) returns ($r: ref)
{
  var $i3: i32;
  var $i4: i16;
  var $i5: i32;
  var $i6: i16;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3089} {:cexpr "__vlan_put_tag:arg:vlan_proto"} boogie_si_record_i16($i1);
    call {:si_unique_call 3090} {:cexpr "__vlan_put_tag:arg:vlan_tci"} boogie_si_record_i16($i2);
    goto corral_source_split_15125;

  corral_source_split_15125:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i1);
    goto corral_source_split_15126;

  corral_source_split_15126:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i16($i3);
    goto corral_source_split_15127;

  corral_source_split_15127:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i2);
    goto corral_source_split_15128;

  corral_source_split_15128:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_15129;

  corral_source_split_15129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3091} $p7 := vlan_insert_tag($p0, $i4, $i6);
    goto corral_source_split_15130;

  corral_source_split_15130:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_15131;

  corral_source_split_15131:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_15132;

  corral_source_split_15132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_15134;

  corral_source_split_15134:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 248)), $mul.ref(126, 1));
    goto corral_source_split_15135;

  corral_source_split_15135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, $i1);
    goto corral_source_split_15136;

  corral_source_split_15136:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vlan_insert_tag: ref;

axiom vlan_insert_tag == $sub.ref(0, 821710);

procedure vlan_insert_tag($p0: ref, $i1: i16, $i2: i16) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation vlan_insert_tag($p0: ref, $i1: i16, $i2: i16) returns ($r: ref)
{
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i16;
  var $i20: i16;
  var $p21: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3092} {:cexpr "vlan_insert_tag:arg:vlan_proto"} boogie_si_record_i16($i1);
    call {:si_unique_call 3093} {:cexpr "vlan_insert_tag:arg:vlan_tci"} boogie_si_record_i16($i2);
    goto corral_source_split_15138;

  corral_source_split_15138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3094} $i3 := skb_cow_head($p0, 4);
    call {:si_unique_call 3095} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_15139;

  corral_source_split_15139:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_15140;

  corral_source_split_15140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3097} $p6 := skb_push($p0, 4);
    goto corral_source_split_15147;

  corral_source_split_15147:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_15148;

  corral_source_split_15148:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(232, 1));
    goto corral_source_split_15149;

  corral_source_split_15149:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_15150;

  corral_source_split_15150:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(232, 1));
    goto corral_source_split_15151;

  corral_source_split_15151:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_15152;

  corral_source_split_15152:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(4, 1));
    goto corral_source_split_15153;

  corral_source_split_15153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3098} llvm.memmove.p0i8.p0i8.i64($p9, $p12, 12, 1, 0);
    goto corral_source_split_15154;

  corral_source_split_15154:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(212, 1));
    goto corral_source_split_15155;

  corral_source_split_15155:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_15156;

  corral_source_split_15156:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i14, 4);
    goto corral_source_split_15157;

  corral_source_split_15157:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(212, 1));
    goto corral_source_split_15158;

  corral_source_split_15158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_15159;

  corral_source_split_15159:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 18)), $mul.ref(12, 1));
    goto corral_source_split_15160;

  corral_source_split_15160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p17, $i1);
    goto corral_source_split_15161;

  corral_source_split_15161:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i2);
    goto corral_source_split_15162;

  corral_source_split_15162:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_15163;

  corral_source_split_15163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3099} $i20 := __fswab16($i19);
    call {:si_unique_call 3100} {:cexpr "tmp___1"} boogie_si_record_i16($i20);
    goto corral_source_split_15164;

  corral_source_split_15164:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p7, $mul.ref(0, 18)), $mul.ref(14, 1));
    goto corral_source_split_15165;

  corral_source_split_15165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, $i20);
    goto corral_source_split_15166;

  corral_source_split_15166:
    assume {:verifier.code 0} true;
    $p5 := $p0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15145;

  corral_source_split_15145:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_15142;

  corral_source_split_15142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3096} kfree_skb($p0);
    goto corral_source_split_15143;

  corral_source_split_15143:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;
}



const skb_cow_head: ref;

axiom skb_cow_head == $sub.ref(0, 822742);

procedure skb_cow_head($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation skb_cow_head($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3101} {:cexpr "skb_cow_head:arg:headroom"} boogie_si_record_i32($i1);
    goto corral_source_split_15168;

  corral_source_split_15168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3102} $i2 := skb_header_cloned($p0);
    call {:si_unique_call 3103} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_15169;

  corral_source_split_15169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3104} $i3 := __skb_cow($p0, $i1, $i2);
    call {:si_unique_call 3105} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_15170;

  corral_source_split_15170:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const skb_push: ref;

axiom skb_push == $sub.ref(0, 823774);

procedure skb_push($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_push($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3106} {:cexpr "skb_push:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_15172;

  corral_source_split_15172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3107} $p2 := external_alloc();
    goto corral_source_split_15173;

  corral_source_split_15173:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.memmove.p0i8.p0i8.i64: ref;

axiom llvm.memmove.p0i8.p0i8.i64 == $sub.ref(0, 824806);

procedure llvm.memmove.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const skb_header_cloned: ref;

axiom skb_header_cloned == $sub.ref(0, 825838);

procedure skb_header_cloned($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_header_cloned($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15175;

  corral_source_split_15175:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_15176;

  corral_source_split_15176:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(124, 1));
    goto corral_source_split_15177;

  corral_source_split_15177:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_15178;

  corral_source_split_15178:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_15179;

  corral_source_split_15179:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_15180;

  corral_source_split_15180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3108} $p7 := skb_end_pointer($p0);
    goto corral_source_split_15186;

  corral_source_split_15186:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_15187;

  corral_source_split_15187:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 320)), $mul.ref(36, 1));
    goto corral_source_split_15188;

  corral_source_split_15188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3109} $i10 := atomic_read($p9);
    call {:si_unique_call 3110} {:cexpr "dataref"} boogie_si_record_i32($i10);
    goto corral_source_split_15189;

  corral_source_split_15189:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 65535);
    goto corral_source_split_15190;

  corral_source_split_15190:
    assume {:verifier.code 0} true;
    $i12 := $ashr.i32($i10, 16);
    goto corral_source_split_15191;

  corral_source_split_15191:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32($i11, $i12);
    call {:si_unique_call 3111} {:cexpr "dataref"} boogie_si_record_i32($i13);
    goto corral_source_split_15192;

  corral_source_split_15192:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 1);
    goto corral_source_split_15193;

  corral_source_split_15193:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_15194;

  corral_source_split_15194:
    assume {:verifier.code 0} true;
    $i6 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15184;

  corral_source_split_15184:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_15182;

  corral_source_split_15182:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const __skb_cow: ref;

axiom __skb_cow == $sub.ref(0, 826870);

procedure __skb_cow($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __skb_cow($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3112} {:cexpr "__skb_cow:arg:headroom"} boogie_si_record_i32($i1);
    call {:si_unique_call 3113} {:cexpr "__skb_cow:arg:cloned"} boogie_si_record_i32($i2);
    goto corral_source_split_15196;

  corral_source_split_15196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3114} $i3 := skb_headroom($p0);
    call {:si_unique_call 3115} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_15197;

  corral_source_split_15197:
    assume {:verifier.code 0} true;
    $i4 := $ult.i32($i3, $i1);
    goto corral_source_split_15198;

  corral_source_split_15198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15204;

  corral_source_split_15204:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_15205;

  corral_source_split_15205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i8 == 1);
    goto corral_source_split_15209;

  corral_source_split_15209:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_15210;

  corral_source_split_15210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_15230;

  corral_source_split_15230:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32(32, 64);
    goto corral_source_split_15207;

  corral_source_split_15207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    goto corral_source_split_15214;

  corral_source_split_15214:
    assume {:verifier.code 0} true;
    $i11 := 64;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_15216;

  corral_source_split_15216:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, $sub.i32(0, 1));
    goto corral_source_split_15217;

  corral_source_split_15217:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, $i7);
    goto corral_source_split_15218;

  corral_source_split_15218:
    assume {:verifier.code 0} true;
    $i14 := $sgt.i32(32, 64);
    goto corral_source_split_15219;

  corral_source_split_15219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i14 == 1);
    goto corral_source_split_15223;

  corral_source_split_15223:
    assume {:verifier.code 0} true;
    $i15 := 64;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_15225;

  corral_source_split_15225:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, $i15);
    goto corral_source_split_15226;

  corral_source_split_15226:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i13, $i16);
    goto corral_source_split_15227;

  corral_source_split_15227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3119} $i18 := pskb_expand_head($p0, $i17, 0, 32);
    call {:si_unique_call 3120} {:cexpr "tmp___1"} boogie_si_record_i32($i18);
    goto corral_source_split_15228;

  corral_source_split_15228:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb15;

  $bb12:
    assume $i14 == 1;
    goto corral_source_split_15221;

  corral_source_split_15221:
    assume {:verifier.code 0} true;
    $i15 := 32;
    goto $bb14;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_15212;

  corral_source_split_15212:
    assume {:verifier.code 0} true;
    $i11 := 32;
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb5;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_15200;

  corral_source_split_15200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3116} $i5 := skb_headroom($p0);
    call {:si_unique_call 3117} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_15201;

  corral_source_split_15201:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i1, $i5);
    call {:si_unique_call 3118} {:cexpr "delta"} boogie_si_record_i32($i6);
    goto corral_source_split_15202;

  corral_source_split_15202:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const skb_headroom: ref;

axiom skb_headroom == $sub.ref(0, 827902);

procedure skb_headroom($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_headroom($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15232;

  corral_source_split_15232:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(232, 1));
    goto corral_source_split_15233;

  corral_source_split_15233:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_15234;

  corral_source_split_15234:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_15235;

  corral_source_split_15235:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_15236;

  corral_source_split_15236:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(224, 1));
    goto corral_source_split_15237;

  corral_source_split_15237:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_15238;

  corral_source_split_15238:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_15239;

  corral_source_split_15239:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_15240;

  corral_source_split_15240:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i4, $i8);
    goto corral_source_split_15241;

  corral_source_split_15241:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const pskb_expand_head: ref;

axiom pskb_expand_head == $sub.ref(0, 828934);

procedure pskb_expand_head($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pskb_expand_head($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3121} {:cexpr "pskb_expand_head:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 3122} {:cexpr "pskb_expand_head:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 3123} {:cexpr "pskb_expand_head:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_15243;

  corral_source_split_15243:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3124} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 3125} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_15244;

  corral_source_split_15244:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 829966);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3126} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 3127} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_15246;

  corral_source_split_15246:
    assume {:verifier.code 0} true;
    return;
}



const skb_shared: ref;

axiom skb_shared == $sub.ref(0, 830998);

procedure skb_shared($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_shared($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15248;

  corral_source_split_15248:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(244, 1));
    goto corral_source_split_15249;

  corral_source_split_15249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3128} $i2 := atomic_read($p1);
    call {:si_unique_call 3129} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_15250;

  corral_source_split_15250:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 1);
    goto corral_source_split_15251;

  corral_source_split_15251:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_15252;

  corral_source_split_15252:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const skb_clone: ref;

axiom skb_clone == $sub.ref(0, 832030);

procedure skb_clone($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_clone($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3130} {:cexpr "skb_clone:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_15254;

  corral_source_split_15254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3131} $p2 := external_alloc();
    goto corral_source_split_15255;

  corral_source_split_15255:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_15256;

  corral_source_split_15256:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const consume_skb: ref;

axiom consume_skb == $sub.ref(0, 833062);

procedure consume_skb($p0: ref);
  free requires assertsPassed;



implementation consume_skb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15258;

  corral_source_split_15258:
    assume {:verifier.code 0} true;
    return;
}



const __pskb_trim: ref;

axiom __pskb_trim == $sub.ref(0, 834094);

procedure __pskb_trim($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __pskb_trim($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3132} {:cexpr "__pskb_trim:arg:len"} boogie_si_record_i32($i1);
    goto corral_source_split_15260;

  corral_source_split_15260:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(108, 1));
    goto corral_source_split_15261;

  corral_source_split_15261:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_15262;

  corral_source_split_15262:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_15263;

  corral_source_split_15263:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3135} __skb_trim($p0, $i1);
    goto corral_source_split_15270;

  corral_source_split_15270:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15268;

  corral_source_split_15268:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_15265;

  corral_source_split_15265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3133} $i5 := ___pskb_trim($p0, $i1);
    call {:si_unique_call 3134} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_15266;

  corral_source_split_15266:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;
}



const ___pskb_trim: ref;

axiom ___pskb_trim == $sub.ref(0, 835126);

procedure ___pskb_trim($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ___pskb_trim($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3136} {:cexpr "___pskb_trim:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_15272;

  corral_source_split_15272:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3137} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 3138} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_15273;

  corral_source_split_15273:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __skb_trim: ref;

axiom __skb_trim == $sub.ref(0, 836158);

procedure __skb_trim($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_trim($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $p17: ref;
  var vslice_dummy_var_572: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3139} {:cexpr "__skb_trim:arg:len"} boogie_si_record_i32($i1);
    goto corral_source_split_15275;

  corral_source_split_15275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3140} $i2 := skb_is_nonlinear($p0);
    goto corral_source_split_15276;

  corral_source_split_15276:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 3141} {:cexpr "tmp___0"} boogie_si_record_i8($i3);
    goto corral_source_split_15277;

  corral_source_split_15277:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_15278;

  corral_source_split_15278:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i64($i4);
    goto corral_source_split_15279;

  corral_source_split_15279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3142} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 3143} {:cexpr "tmp___1"} boogie_si_record_i64($i6);
    goto corral_source_split_15280;

  corral_source_split_15280:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_15281;

  corral_source_split_15281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(104, 1));
    goto corral_source_split_15298;

  corral_source_split_15298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i1);
    goto corral_source_split_15299;

  corral_source_split_15299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3148} skb_set_tail_pointer($p0, $i1);
    goto corral_source_split_15300;

  corral_source_split_15300:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_15283;

  corral_source_split_15283:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32(1, 0);
    goto corral_source_split_15284;

  corral_source_split_15284:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_15285;

  corral_source_split_15285:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_15286;

  corral_source_split_15286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3144} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 3145} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_15287;

  corral_source_split_15287:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_15288;

  corral_source_split_15288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32(1, 0);
    goto corral_source_split_15293;

  corral_source_split_15293:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_15294;

  corral_source_split_15294:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_15295;

  corral_source_split_15295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3147} vslice_dummy_var_572 := ldv__builtin_expect($i15, 0);
    goto corral_source_split_15296;

  corral_source_split_15296:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_15290;

  corral_source_split_15290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3146} warn_slowpath_null(.str.105, 1858);
    goto corral_source_split_15291;

  corral_source_split_15291:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const skb_is_nonlinear: ref;

axiom skb_is_nonlinear == $sub.ref(0, 837190);

procedure skb_is_nonlinear($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation skb_is_nonlinear($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15302;

  corral_source_split_15302:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(108, 1));
    goto corral_source_split_15303;

  corral_source_split_15303:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_15304;

  corral_source_split_15304:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_15305;

  corral_source_split_15305:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const skb_set_tail_pointer: ref;

axiom skb_set_tail_pointer == $sub.ref(0, 838222);

procedure skb_set_tail_pointer($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_set_tail_pointer($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3149} {:cexpr "skb_set_tail_pointer:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_15307;

  corral_source_split_15307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3150} skb_reset_tail_pointer($p0);
    goto corral_source_split_15308;

  corral_source_split_15308:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(216, 1));
    goto corral_source_split_15309;

  corral_source_split_15309:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_15310;

  corral_source_split_15310:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i1);
    goto corral_source_split_15311;

  corral_source_split_15311:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(216, 1));
    goto corral_source_split_15312;

  corral_source_split_15312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_15313;

  corral_source_split_15313:
    assume {:verifier.code 0} true;
    return;
}



const skb_reset_tail_pointer: ref;

axiom skb_reset_tail_pointer == $sub.ref(0, 839254);

procedure skb_reset_tail_pointer($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_reset_tail_pointer($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15315;

  corral_source_split_15315:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(232, 1));
    goto corral_source_split_15316;

  corral_source_split_15316:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_15317;

  corral_source_split_15317:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_15318;

  corral_source_split_15318:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_15319;

  corral_source_split_15319:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(224, 1));
    goto corral_source_split_15320;

  corral_source_split_15320:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_15321;

  corral_source_split_15321:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_15322;

  corral_source_split_15322:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_15323;

  corral_source_split_15323:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i4, $i8);
    goto corral_source_split_15324;

  corral_source_split_15324:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(216, 1));
    goto corral_source_split_15325;

  corral_source_split_15325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_15326;

  corral_source_split_15326:
    assume {:verifier.code 0} true;
    return;
}



const be_set_rss_hash_opts: ref;

axiom be_set_rss_hash_opts == $sub.ref(0, 840286);

procedure be_set_rss_hash_opts($p0: ref, $p1: ref) returns ($r: i32);



const be_get_rss_hash_opts: ref;

axiom be_get_rss_hash_opts == $sub.ref(0, 841318);

procedure be_get_rss_hash_opts($p0: ref, $i1: i64) returns ($r: i64);



const be_cmd_get_beacon_state: ref;

axiom be_cmd_get_beacon_state == $sub.ref(0, 842350);

procedure be_cmd_get_beacon_state($p0: ref, $i1: i8, $p2: ref) returns ($r: i32);



const be_cmd_set_beacon_state: ref;

axiom be_cmd_set_beacon_state == $sub.ref(0, 843382);

procedure be_cmd_set_beacon_state($p0: ref, $i1: i8, $i2: i8, $i3: i8, $i4: i8) returns ($r: i32);



const be_loopback_test: ref;

axiom be_loopback_test == $sub.ref(0, 844414);

procedure be_loopback_test($p0: ref, $i1: i8, $p2: ref) returns ($r: i64);



const be_test_ddr_dma: ref;

axiom be_test_ddr_dma == $sub.ref(0, 845446);

procedure be_test_ddr_dma($p0: ref) returns ($r: i32);



const be_cmd_ddr_dma_test: ref;

axiom be_cmd_ddr_dma_test == $sub.ref(0, 846478);

procedure be_cmd_ddr_dma_test($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: i32);



const be_cmd_set_loopback: ref;

axiom be_cmd_set_loopback == $sub.ref(0, 847510);

procedure be_cmd_set_loopback($p0: ref, $i1: i8, $i2: i8, $i3: i8) returns ($r: i32);



const be_cmd_loopback_test: ref;

axiom be_cmd_loopback_test == $sub.ref(0, 848542);

procedure be_cmd_loopback_test($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i64) returns ($r: i32);



const lancer_cmd_read_file: ref;

axiom lancer_cmd_read_file == $sub.ref(0, 849574);

procedure lancer_cmd_read_file($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);



const be_cmd_get_seeprom_data: ref;

axiom be_cmd_get_seeprom_data == $sub.ref(0, 850606);

procedure be_cmd_get_seeprom_data($p0: ref, $p1: ref) returns ($r: i32);



const lancer_cmd_read_object: ref;

axiom lancer_cmd_read_object == $sub.ref(0, 851638);

procedure lancer_cmd_read_object($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $p5: ref, $p6: ref, $p7: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $M.60, $M.61, $M.62, $CurrAddr;



implementation lancer_cmd_read_object($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $p5: ref, $p6: ref, $p7: ref) returns ($r: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i8;
  var $i12: i32;
  var $p42: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3151} {:cexpr "lancer_cmd_read_object:arg:data_size"} boogie_si_record_i32($i2);
    call {:si_unique_call 3152} {:cexpr "lancer_cmd_read_object:arg:data_offset"} boogie_si_record_i32($i3);
    goto corral_source_split_15328;

  corral_source_split_15328:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_15329;

  corral_source_split_15329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3153} spin_lock_bh($p8);
    goto corral_source_split_15330;

  corral_source_split_15330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3154} $p9 := wrb_from_mccq($p0);
    goto corral_source_split_15331;

  corral_source_split_15331:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_15332;

  corral_source_split_15332:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_15333;

  corral_source_split_15333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3156} $p13 := embedded_payload($p9);
    goto corral_source_split_15341;

  corral_source_split_15341:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_15342;

  corral_source_split_15342:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_15343;

  corral_source_split_15343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3157} be_wrb_cmd_hdr_prepare($p15, 1, $sub.i8(0, 85), 144, $p9, $0.ref);
    goto corral_source_split_15344;

  corral_source_split_15344:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p14, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_15345;

  corral_source_split_15345:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i2);
    goto corral_source_split_15346;

  corral_source_split_15346:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref(0, 144)), $mul.ref(20, 1));
    goto corral_source_split_15347;

  corral_source_split_15347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i3);
    goto corral_source_split_15348;

  corral_source_split_15348:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p14, $mul.ref(0, 144)), $mul.ref(24, 1));
    goto corral_source_split_15349;

  corral_source_split_15349:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_15350;

  corral_source_split_15350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3158} $p20 := strcpy($p19, $p4);
    assume $isExternal($p20);
    goto corral_source_split_15351;

  corral_source_split_15351:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p14, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_15352;

  corral_source_split_15352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 1);
    goto corral_source_split_15353;

  corral_source_split_15353:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p14, $mul.ref(0, 144)), $mul.ref(132, 1));
    goto corral_source_split_15354;

  corral_source_split_15354:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i2);
    goto corral_source_split_15355;

  corral_source_split_15355:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_15356;

  corral_source_split_15356:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.41, $p23);
    goto corral_source_split_15357;

  corral_source_split_15357:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i64.i32($i24);
    goto corral_source_split_15358;

  corral_source_split_15358:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p14, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_15359;

  corral_source_split_15359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_15360;

  corral_source_split_15360:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_15361;

  corral_source_split_15361:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.41, $p27);
    goto corral_source_split_15362;

  corral_source_split_15362:
    assume {:verifier.code 0} true;
    $i29 := $lshr.i64($i28, 32);
    goto corral_source_split_15363;

  corral_source_split_15363:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i64.i32($i29);
    goto corral_source_split_15364;

  corral_source_split_15364:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p14, $mul.ref(0, 144)), $mul.ref(140, 1));
    goto corral_source_split_15365;

  corral_source_split_15365:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i30);
    goto corral_source_split_15366;

  corral_source_split_15366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3159} $i32 := be_mcc_notify_wait($p0);
    call {:si_unique_call 3160} {:cexpr "status"} boogie_si_record_i32($i32);
    goto corral_source_split_15367;

  corral_source_split_15367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3161} $p33 := embedded_payload($p9);
    goto corral_source_split_15368;

  corral_source_split_15368:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_15369;

  corral_source_split_15369:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i32, 0);
    goto corral_source_split_15370;

  corral_source_split_15370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i35 == 1);
    goto corral_source_split_15380;

  corral_source_split_15380:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p34, $mul.ref(0, 24)), $mul.ref(5, 1));
    goto corral_source_split_15381;

  corral_source_split_15381:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_15382;

  corral_source_split_15382:
    assume {:verifier.code 0} true;
    $M.62 := $store.i8($M.62, $p7, $i41);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i12 := $i32;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15337;

  corral_source_split_15337:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_15338;

  corral_source_split_15338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3155} spin_unlock_bh($p42);
    goto corral_source_split_15339;

  corral_source_split_15339:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb5:
    assume $i35 == 1;
    goto corral_source_split_15372;

  corral_source_split_15372:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p34, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_15373;

  corral_source_split_15373:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_15374;

  corral_source_split_15374:
    assume {:verifier.code 0} true;
    $M.60 := $store.i32($M.60, $p5, $i37);
    goto corral_source_split_15375;

  corral_source_split_15375:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p34, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_15376;

  corral_source_split_15376:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_15377;

  corral_source_split_15377:
    assume {:verifier.code 0} true;
    $M.61 := $store.i32($M.61, $p6, $i39);
    goto corral_source_split_15378;

  corral_source_split_15378:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_15335;

  corral_source_split_15335:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 16);
    goto $bb3;
}



const check_privilege: ref;

axiom check_privilege == $sub.ref(0, 852670);

procedure check_privilege($p0: ref, $i1: i32) returns ($r: i1);
  free requires assertsPassed;



implementation check_privilege($p0: ref, $i1: i32) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3162} {:cexpr "check_privilege:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_15384;

  corral_source_split_15384:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363956, 1));
    goto corral_source_split_15385;

  corral_source_split_15385:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_15386;

  corral_source_split_15386:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, $i1);
    goto corral_source_split_15387;

  corral_source_split_15387:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_15388;

  corral_source_split_15388:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const lancer_cmd_get_file_len: ref;

axiom lancer_cmd_get_file_len == $sub.ref(0, 853702);

procedure lancer_cmd_get_file_len($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.60, $M.41, $M.0, $M.21, $M.61, $M.62, $CurrAddr;



implementation lancer_cmd_get_file_len($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var cmdloc_dummy_var_368: [ref]i8;
  var cmdloc_dummy_var_369: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3163} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3164} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3165} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3166} $p5 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_15390;

  corral_source_split_15390:
    assume {:verifier.code 0} true;
    $M.60 := $store.i32($M.60, $p2, 0);
    goto corral_source_split_15391;

  corral_source_split_15391:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_15392;

  corral_source_split_15392:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_368 := $M.41;
    call {:si_unique_call 3167} cmdloc_dummy_var_369 := $memset.i8(cmdloc_dummy_var_368, $p6, 0, 24, $zext.i32.i64(8), 0 == 1);
    $M.41 := cmdloc_dummy_var_369;
    goto corral_source_split_15393;

  corral_source_split_15393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3168} $i7 := lancer_cmd_read_object($p0, $p5, 0, 0, $p1, $p2, $p3, $p4);
    call {:si_unique_call 3169} {:cexpr "status"} boogie_si_record_i32($i7);
    goto corral_source_split_15394;

  corral_source_split_15394:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.60, $p2);
    goto corral_source_split_15395;

  corral_source_split_15395:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const be_set_fw_log_level: ref;

axiom be_set_fw_log_level == $sub.ref(0, 854734);

procedure be_set_fw_log_level($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.41, $M.0, $M.25, $M.21, $CurrAddr, assertsPassed, $M.26;



implementation be_set_fw_log_level($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i31: i64;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i38: i64;
  var $i39: i64;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $i48: i64;
  var $i49: i64;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i37: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i30: i32;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i64;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var cmdloc_dummy_var_370: [ref]i8;
  var cmdloc_dummy_var_371: [ref]i8;
  var vslice_dummy_var_573: i32;
  var vslice_dummy_var_574: i32;
  var vslice_dummy_var_575: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3170} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    call {:si_unique_call 3171} {:cexpr "be_set_fw_log_level:arg:level"} boogie_si_record_i32($i1);
    goto corral_source_split_15397;

  corral_source_split_15397:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_15398;

  corral_source_split_15398:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_370 := $M.41;
    call {:si_unique_call 3172} cmdloc_dummy_var_371 := $memset.i8(cmdloc_dummy_var_370, $p3, 0, 24, $zext.i32.i64(8), 0 == 1);
    $M.41 := cmdloc_dummy_var_371;
    goto corral_source_split_15399;

  corral_source_split_15399:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_15400;

  corral_source_split_15400:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p4, 2844);
    goto corral_source_split_15401;

  corral_source_split_15401:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_15402;

  corral_source_split_15402:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_15403;

  corral_source_split_15403:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_15404;

  corral_source_split_15404:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.41, $p7);
    goto corral_source_split_15405;

  corral_source_split_15405:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_15406;

  corral_source_split_15406:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_15407;

  corral_source_split_15407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3173} $p11 := pci_alloc_consistent($p6, $i9, $p10);
    goto corral_source_split_15408;

  corral_source_split_15408:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_15409;

  corral_source_split_15409:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p12, $p11);
    goto corral_source_split_15410;

  corral_source_split_15410:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_15411;

  corral_source_split_15411:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.41, $p13);
    goto corral_source_split_15412;

  corral_source_split_15412:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_15413;

  corral_source_split_15413:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_15414;

  corral_source_split_15414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3175} $i21 := be_cmd_get_ext_fat_capabilites($p0, $p2);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    call {:si_unique_call 3176} {:cexpr "status"} boogie_si_record_i32($i21);
    goto corral_source_split_15422;

  corral_source_split_15422:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_15423;

  corral_source_split_15423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    goto corral_source_split_15434;

  corral_source_split_15434:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_15435;

  corral_source_split_15435:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_15436;

  corral_source_split_15436:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_15437;

  corral_source_split_15437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3177} vslice_dummy_var_574 := dev_err.ref.ref($p68, .str.178);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_15485;

  corral_source_split_15485:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_15486;

  corral_source_split_15486:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_15487;

  corral_source_split_15487:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.41, $p72);
    goto corral_source_split_15488;

  corral_source_split_15488:
    assume {:verifier.code 0} true;
    $i74 := $zext.i32.i64($i73);
    goto corral_source_split_15489;

  corral_source_split_15489:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_15490;

  corral_source_split_15490:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.41, $p75);
    goto corral_source_split_15491;

  corral_source_split_15491:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_15492;

  corral_source_split_15492:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.41, $p77);
    goto corral_source_split_15493;

  corral_source_split_15493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3184} pci_free_consistent($p71, $i74, $p76, $i78);
    goto corral_source_split_15494;

  corral_source_split_15494:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_15425;

  corral_source_split_15425:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_15426;

  corral_source_split_15426:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.41, $p23);
    goto corral_source_split_15427;

  corral_source_split_15427:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_15428;

  corral_source_split_15428:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref(16, 2832));
    goto corral_source_split_15429;

  corral_source_split_15429:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p25, $mul.ref(16, 2832)), $mul.ref(16, 1));
    goto corral_source_split_15430;

  corral_source_split_15430:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_15431;

  corral_source_split_15431:
    assume {:verifier.code 0} true;
    $i29 := $ult.i32(0, $i28);
    goto corral_source_split_15432;

  corral_source_split_15432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3181} $i60 := be_cmd_set_ext_fat_capabilites($p0, $p2, $p26);
    call {:si_unique_call 3182} {:cexpr "status"} boogie_si_record_i32($i60);
    goto corral_source_split_15476;

  corral_source_split_15476:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_15477;

  corral_source_split_15477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i61 == 1;
    goto corral_source_split_15479;

  corral_source_split_15479:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_15480;

  corral_source_split_15480:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_15481;

  corral_source_split_15481:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_15482;

  corral_source_split_15482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3183} vslice_dummy_var_575 := dev_err.ref.ref($p64, .str.177);
    goto corral_source_split_15483;

  corral_source_split_15483:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_15439;

  corral_source_split_15439:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb10;

  $bb10:
    call $i31, $p34, $i35, $i36, $i38, $i39, $p44, $i45, $i46, $i47, $i48, $i49, $p54, $i55, $i56, $i37, $i57, $i58, $i59, $i30 := be_set_fw_log_level_loop_$bb10($i1, $p25, $p27, $i31, $p34, $i35, $i36, $i38, $i39, $p44, $i45, $i46, $i47, $i48, $i49, $p54, $i55, $i56, $i37, $i57, $i58, $i59, $i30);
    goto $bb10_last;

  corral_source_split_15441:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_15443;

  corral_source_split_15443:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p25, $mul.ref(16, 2832)), $mul.ref(24, 1)), $mul.ref($i31, 104)), $mul.ref(36, 1));
    goto corral_source_split_15444;

  corral_source_split_15444:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    call {:si_unique_call 3178} {:cexpr "num_modes"} boogie_si_record_i32($i35);
    goto corral_source_split_15445;

  corral_source_split_15445:
    assume {:verifier.code 0} true;
    $i36 := $ult.i32(0, $i35);
    goto corral_source_split_15446;

  corral_source_split_15446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i30, 1);
    call {:si_unique_call 3180} {:cexpr "i"} boogie_si_record_i32($i57);
    goto corral_source_split_15470;

  corral_source_split_15470:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p27);
    goto corral_source_split_15471;

  corral_source_split_15471:
    assume {:verifier.code 0} true;
    $i59 := $ult.i32($i57, $i58);
    goto corral_source_split_15472;

  corral_source_split_15472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i59 == 1);
    goto corral_source_split_15474;

  corral_source_split_15474:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb23:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i30 := $i57;
    goto $bb23_dummy;

  $bb12:
    assume $i36 == 1;
    goto corral_source_split_15448;

  corral_source_split_15448:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb15;

  $bb15:
    call $i38, $i39, $p44, $i45, $i46, $i47, $i48, $i49, $p54, $i55, $i56, $i37 := be_set_fw_log_level_loop_$bb15($i1, $p25, $i35, $i38, $i39, $p44, $i45, $i46, $i47, $i48, $i49, $p54, $i55, $i56, $i37, $i30);
    goto $bb15_last;

  corral_source_split_15450:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_15452;

  corral_source_split_15452:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i30);
    goto corral_source_split_15453;

  corral_source_split_15453:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p25, $mul.ref(16, 2832)), $mul.ref(24, 1)), $mul.ref($i39, 104)), $mul.ref(40, 1)), $mul.ref($i38, 16)), $mul.ref(0, 1));
    goto corral_source_split_15454;

  corral_source_split_15454:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_15455;

  corral_source_split_15455:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_15456;

  corral_source_split_15456:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_15457;

  corral_source_split_15457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i37, 1);
    call {:si_unique_call 3179} {:cexpr "j"} boogie_si_record_i32($i55);
    goto corral_source_split_15465;

  corral_source_split_15465:
    assume {:verifier.code 0} true;
    $i56 := $ult.i32($i55, $i35);
    goto corral_source_split_15466;

  corral_source_split_15466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i56 == 1);
    goto corral_source_split_15468;

  corral_source_split_15468:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb20:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i37 := $i55;
    goto $bb20_dummy;

  $bb17:
    assume $i47 == 1;
    goto corral_source_split_15459;

  corral_source_split_15459:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i37);
    goto corral_source_split_15460;

  corral_source_split_15460:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i30);
    goto corral_source_split_15461;

  corral_source_split_15461:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p25, $mul.ref(16, 2832)), $mul.ref(24, 1)), $mul.ref($i49, 104)), $mul.ref(40, 1)), $mul.ref($i48, 16)), $mul.ref(4, 1));
    goto corral_source_split_15462;

  corral_source_split_15462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i1);
    goto corral_source_split_15463;

  corral_source_split_15463:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_517:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_15416;

  corral_source_split_15416:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_15417;

  corral_source_split_15417:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_15418;

  corral_source_split_15418:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_15419;

  corral_source_split_15419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3174} vslice_dummy_var_573 := dev_err.ref.ref.ref($p19, .str.8, .str.176);
    goto corral_source_split_15420;

  corral_source_split_15420:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb20_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_15450;

  $bb23_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_15441;
}



const be_cmd_set_ext_fat_capabilites: ref;

axiom be_cmd_set_ext_fat_capabilites == $sub.ref(0, 855766);

procedure be_cmd_set_ext_fat_capabilites($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_set_ext_fat_capabilites($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i7: i32;
  var $p22: ref;
  var cmdloc_dummy_var_372: [ref]i8;
  var cmdloc_dummy_var_373: [ref]i8;
  var cmdloc_dummy_var_374: [ref]i8;
  var cmdloc_dummy_var_375: [ref]i8;
  var cmdloc_dummy_var_376: [ref]i8;
  var cmdloc_dummy_var_377: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15496;

  corral_source_split_15496:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_15497;

  corral_source_split_15497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3185} spin_lock_bh($p3);
    goto corral_source_split_15498;

  corral_source_split_15498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3186} $p4 := wrb_from_mccq($p0);
    goto corral_source_split_15499;

  corral_source_split_15499:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_15500;

  corral_source_split_15500:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_15501;

  corral_source_split_15501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_15509;

  corral_source_split_15509:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.41, $p8);
    goto corral_source_split_15510;

  corral_source_split_15510:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_15511;

  corral_source_split_15511:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i64(2828, 63);
    goto corral_source_split_15512;

  corral_source_split_15512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    goto corral_source_split_15520;

  corral_source_split_15520:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p10, $mul.ref(0, 2848)), $mul.ref(16, 1));
    goto corral_source_split_15521;

  corral_source_split_15521:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_15522;

  corral_source_split_15522:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p2);
    goto corral_source_split_15523;

  corral_source_split_15523:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_375 := $M.0;
    cmdloc_dummy_var_376 := $M.0;
    call {:si_unique_call 3189} cmdloc_dummy_var_377 := $memcpy.i8(cmdloc_dummy_var_375, cmdloc_dummy_var_376, $p16, $p17, 2828, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_377;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p10, $mul.ref(0, 2848)), $mul.ref(0, 1));
    goto corral_source_split_15525;

  corral_source_split_15525:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_15526;

  corral_source_split_15526:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.41, $p19);
    goto corral_source_split_15527;

  corral_source_split_15527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3190} be_wrb_cmd_hdr_prepare($p18, 1, 126, $i20, $p4, $p1);
    goto corral_source_split_15528;

  corral_source_split_15528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3191} $i21 := be_mcc_notify_wait($p0);
    call {:si_unique_call 3192} {:cexpr "status"} boogie_si_record_i32($i21);
    goto corral_source_split_15529;

  corral_source_split_15529:
    assume {:verifier.code 0} true;
    $i7 := $i21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15505;

  corral_source_split_15505:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_15506;

  corral_source_split_15506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3187} spin_unlock_bh($p22);
    goto corral_source_split_15507;

  corral_source_split_15507:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_15514;

  corral_source_split_15514:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref(0, 2848)), $mul.ref(16, 1));
    goto corral_source_split_15515;

  corral_source_split_15515:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_15516;

  corral_source_split_15516:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p2);
    goto corral_source_split_15517;

  corral_source_split_15517:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_372 := $M.0;
    cmdloc_dummy_var_373 := $M.0;
    call {:si_unique_call 3188} cmdloc_dummy_var_374 := $memcpy.i8(cmdloc_dummy_var_372, cmdloc_dummy_var_373, $p13, $p14, 2828, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_374;
    goto corral_source_split_15518;

  corral_source_split_15518:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_15503;

  corral_source_split_15503:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 16);
    goto $bb3;
}



const be_cmd_get_regs: ref;

axiom be_cmd_get_regs == $sub.ref(0, 856798);

procedure be_cmd_get_regs($p0: ref, $i1: i32, $p2: ref);



const be_cmd_get_reg_len: ref;

axiom be_cmd_get_reg_len == $sub.ref(0, 857830);

procedure be_cmd_get_reg_len($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $M.3, $CurrAddr;



implementation be_cmd_get_reg_len($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i6: i32;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15531;

  corral_source_split_15531:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_15532;

  corral_source_split_15532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3193} spin_lock_bh($p2);
    goto corral_source_split_15533;

  corral_source_split_15533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3194} $p3 := wrb_from_mccq($p0);
    goto corral_source_split_15534;

  corral_source_split_15534:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_15535;

  corral_source_split_15535:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_15536;

  corral_source_split_15536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3196} $p7 := embedded_payload($p3);
    goto corral_source_split_15544;

  corral_source_split_15544:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_15545;

  corral_source_split_15545:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_15546;

  corral_source_split_15546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3197} be_wrb_cmd_hdr_prepare($p9, 1, 68, 36, $p3, $0.ref);
    goto corral_source_split_15547;

  corral_source_split_15547:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_15548;

  corral_source_split_15548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 1);
    goto corral_source_split_15549;

  corral_source_split_15549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3198} $i11 := be_mcc_notify_wait($p0);
    call {:si_unique_call 3199} {:cexpr "status"} boogie_si_record_i32($i11);
    goto corral_source_split_15550;

  corral_source_split_15550:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_15551;

  corral_source_split_15551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i6 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15540;

  corral_source_split_15540:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_15541;

  corral_source_split_15541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3195} spin_unlock_bh($p23);
    goto corral_source_split_15542;

  corral_source_split_15542:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_15553;

  corral_source_split_15553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3200} $p13 := embedded_payload($p3);
    goto corral_source_split_15554;

  corral_source_split_15554:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_15555;

  corral_source_split_15555:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p1);
    goto corral_source_split_15556;

  corral_source_split_15556:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_15557;

  corral_source_split_15557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_15559;

  corral_source_split_15559:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_15560;

  corral_source_split_15560:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_15561;

  corral_source_split_15561:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_15562;

  corral_source_split_15562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb9;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_15564;

  corral_source_split_15564:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p14, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_15565;

  corral_source_split_15565:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_15566;

  corral_source_split_15566:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i21, 4);
    goto corral_source_split_15567;

  corral_source_split_15567:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p1, $i22);
    goto corral_source_split_15568;

  corral_source_split_15568:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_15538;

  corral_source_split_15538:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 16);
    goto $bb3;
}



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 858862);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3201} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_15570;

  corral_source_split_15570:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3202} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 3203} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_15571;

  corral_source_split_15571:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 859894);

procedure snprintf.ref.i64.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32);



const pci_name: ref;

axiom pci_name == $sub.ref(0, 860926);

procedure pci_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15573;

  corral_source_split_15573:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_15574;

  corral_source_split_15574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3204} $p2 := dev_name($p1);
    goto corral_source_split_15575;

  corral_source_split_15575:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 861958);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15577;

  corral_source_split_15577:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(80, 1));
    goto corral_source_split_15578;

  corral_source_split_15578:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_15579;

  corral_source_split_15579:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_15580;

  corral_source_split_15580:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_15581;

  corral_source_split_15581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(16, 1));
    goto corral_source_split_15589;

  corral_source_split_15589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3205} $p9 := kobject_name($p8);
    goto corral_source_split_15590;

  corral_source_split_15590:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15587;

  corral_source_split_15587:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_15583;

  corral_source_split_15583:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(80, 1));
    goto corral_source_split_15584;

  corral_source_split_15584:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_15585;

  corral_source_split_15585:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 862990);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15592;

  corral_source_split_15592:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_15593;

  corral_source_split_15593:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_15594;

  corral_source_split_15594:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ethtool_cmd_speed_set: ref;

axiom ethtool_cmd_speed_set == $sub.ref(0, 864022);

procedure ethtool_cmd_speed_set($p0: ref, $i1: i32);



const convert_to_et_setting: ref;

axiom convert_to_et_setting == $sub.ref(0, 865054);

procedure convert_to_et_setting($i0: i32, $i1: i32) returns ($r: i32);



const be_get_port_type: ref;

axiom be_get_port_type == $sub.ref(0, 866086);

procedure be_get_port_type($i0: i32, $i1: i32) returns ($r: i32);



const ethtool_cmd_speed: ref;

axiom ethtool_cmd_speed == $sub.ref(0, 867118);

procedure ethtool_cmd_speed($p0: ref) returns ($r: i32);



const netif_carrier_ok: ref;

axiom netif_carrier_ok == $sub.ref(0, 868150);

procedure netif_carrier_ok($p0: ref) returns ($r: i1);



const main: ref;

axiom main == $sub.ref(0, 869182);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.29, $M.41, $M.21, $M.42, $M.54, $M.53, $M.35, $M.67, $M.51, $M.69, $M.70, $M.43, $M.44, $M.45, $M.39, $M.71, $M.28, $M.27, $M.33, $M.66, $M.25, $M.65, $M.38, $M.36, $M.79, $M.80, $M.81, $M.82, $M.83, $CurrAddr, $M.30, $M.31, $M.49, $M.26, $M.2, $M.1, $M.34, $M.23, assertsPassed, $M.47, $M.46, $M.48, $M.40, $M.3, $M.60, $M.61, $M.62;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i46: i32;
  var $i47: i16;
  var $i48: i32;
  var $i49: i16;
  var $i51: i32;
  var $i52: i16;
  var $i53: i32;
  var $i54: i16;
  var $i57: i32;
  var $i58: i16;
  var $i59: i32;
  var $i60: i8;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $p73: ref;
  var $i74: i32;
  var $i36: i32;
  var $i37: i32;
  var $i3: i32;
  var $i4: i32;
  var $i79: i32;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var vslice_dummy_var_576: i32;
  var vslice_dummy_var_577: i32;
  var vslice_dummy_var_578: i32;
  var vslice_dummy_var_579: i32;
  var vslice_dummy_var_580: i32;
  var vslice_dummy_var_581: i32;
  var vslice_dummy_var_582: i32;
  var vslice_dummy_var_583: i32;
  var vslice_dummy_var_584: i32;
  var vslice_dummy_var_585: i32;
  var vslice_dummy_var_586: ref;
  var vslice_dummy_var_587: i32;
  var vslice_dummy_var_588: i32;
  var vslice_dummy_var_589: i32;
  var vslice_dummy_var_590: i32;
  var vslice_dummy_var_591: i32;

  $bb0:
    call {:si_unique_call 3206} $initialize();
    goto corral_source_split_15596;

  corral_source_split_15596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3207} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 3208} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_15597;

  corral_source_split_15597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3209} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_15598;

  corral_source_split_15598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3210} ldv_initialize();
    goto corral_source_split_15599;

  corral_source_split_15599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3211} ldv_handler_precall();
    goto corral_source_split_15600;

  corral_source_split_15600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3212} $i1 := be_init_module();
    call {:si_unique_call 3213} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_15601;

  corral_source_split_15601:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_15602;

  corral_source_split_15602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3, $i4 := 0, 0;
    goto $bb5;

  $bb5:
    call $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i38, $i39, $i40, $i41, $i46, $i47, $i48, $i49, $i51, $i52, $i53, $i54, $i57, $i58, $i59, $i60, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $p73, $i74, $i36, $i37, $i3, $i4, $i79, $i80, $i81, $i82, vslice_dummy_var_576, vslice_dummy_var_577, vslice_dummy_var_578, vslice_dummy_var_579, vslice_dummy_var_580, vslice_dummy_var_581, vslice_dummy_var_582, vslice_dummy_var_583, vslice_dummy_var_584, vslice_dummy_var_585, vslice_dummy_var_586, vslice_dummy_var_587, vslice_dummy_var_588, vslice_dummy_var_589, vslice_dummy_var_590, vslice_dummy_var_591 := main_loop_$bb5($p0, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i38, $i39, $i40, $i41, $i46, $i47, $i48, $i49, $i51, $i52, $i53, $i54, $i57, $i58, $i59, $i60, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $p73, $i74, $i36, $i37, $i3, $i4, $i79, $i80, $i81, $i82, vslice_dummy_var_576, vslice_dummy_var_577, vslice_dummy_var_578, vslice_dummy_var_579, vslice_dummy_var_580, vslice_dummy_var_581, vslice_dummy_var_582, vslice_dummy_var_583, vslice_dummy_var_584, vslice_dummy_var_585, vslice_dummy_var_586, vslice_dummy_var_587, vslice_dummy_var_588, vslice_dummy_var_589, vslice_dummy_var_590, vslice_dummy_var_591);
    goto $bb5_last;

  corral_source_split_15608:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3215} $i79 := __VERIFIER_nondet_int();
    call {:si_unique_call 3216} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i79);
    call {:si_unique_call 3217} {:cexpr "tmp___1"} boogie_si_record_i32($i79);
    goto corral_source_split_15609;

  corral_source_split_15609:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_15610;

  corral_source_split_15610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb85;

  $bb85:
    assume !($i80 == 1);
    goto corral_source_split_15767;

  corral_source_split_15767:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i3, 0);
    goto corral_source_split_15768;

  corral_source_split_15768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i81 == 1);
    goto corral_source_split_15770;

  corral_source_split_15770:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i4, 0);
    goto corral_source_split_15771;

  corral_source_split_15771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3269} ldv_handler_precall();
    goto corral_source_split_15730;

  corral_source_split_15730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3270} be_exit_module();
    goto corral_source_split_15731;

  corral_source_split_15731:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3214} ldv_check_final_state();
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_15606;

  corral_source_split_15606:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_520:
    assume !assertsPassed;
    return;

  $bb88:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3218} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 3219} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 3220} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i5, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i5, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i5, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i5, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i3, $i4;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_15737;

  corral_source_split_15737:
    assume {:verifier.code 0} true;
    $i3, $i4 := $i36, $i37;
    goto corral_source_split_15737_dummy;

  $bb18:
    assume $i11 == 1;
    goto corral_source_split_15622;

  corral_source_split_15622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3227} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_15623;

  corral_source_split_15623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3228} ldv_handler_precall();
    goto corral_source_split_15624;

  corral_source_split_15624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3229} vslice_dummy_var_577 := be_msix($u0, $u3);
    goto corral_source_split_15625;

  corral_source_split_15625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3230} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_15626;

  corral_source_split_15626:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i3, $i4;
    goto $bb66;

  $bb16:
    assume $i10 == 1;
    goto corral_source_split_15616;

  corral_source_split_15616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3223} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_15617;

  corral_source_split_15617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3224} ldv_handler_precall();
    goto corral_source_split_15618;

  corral_source_split_15618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3225} vslice_dummy_var_576 := be_intx($u0, $u3);
    goto corral_source_split_15619;

  corral_source_split_15619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3226} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_15620;

  corral_source_split_15620:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i3, $i4;
    goto $bb66;

  $bb14:
    assume $i9 == 1;
    goto corral_source_split_15612;

  corral_source_split_15612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3221} ldv_handler_precall();
    goto corral_source_split_15613;

  corral_source_split_15613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3222} be_shutdown($u8);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    goto corral_source_split_15614;

  corral_source_split_15614:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i3, $i4;
    goto $bb66;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i5, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i5, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i13 == 1);
    goto corral_source_split_15637;

  corral_source_split_15637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3233} ldv_handler_precall();
    goto corral_source_split_15638;

  corral_source_split_15638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3234} vslice_dummy_var_579 := be_resume($u8);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_15639;

  corral_source_split_15639:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i3, $i4;
    goto $bb66;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i13 == 1;
    goto corral_source_split_15631;

  corral_source_split_15631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3231} ldv_handler_precall();
    goto corral_source_split_15632;

  corral_source_split_15632:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_15633;

  corral_source_split_15633:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.64, $p73);
    goto corral_source_split_15634;

  corral_source_split_15634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3232} vslice_dummy_var_578 := be_suspend($u8, $i74);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_15635;

  corral_source_split_15635:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i3, $i4;
    goto $bb66;

  SeqInstr_526:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i12 == 1;
    goto corral_source_split_15628;

  corral_source_split_15628:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i4, 1);
    goto corral_source_split_15629;

  corral_source_split_15629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := $i4;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto corral_source_split_15765;

  corral_source_split_15765:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i3, $i72;
    goto $bb66;

  $bb79:
    assume $i71 == 1;
    goto corral_source_split_15761;

  corral_source_split_15761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3281} ldv_handler_precall();
    goto corral_source_split_15762;

  corral_source_split_15762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3282} be_remove($u8);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_15763;

  corral_source_split_15763:
    assume {:verifier.code 0} true;
    $i72 := 0;
    goto $bb81;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i5, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i5, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i5, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i16 == 1);
    goto corral_source_split_15649;

  corral_source_split_15649:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i4, 0);
    goto corral_source_split_15650;

  corral_source_split_15650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i70 := $i4;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto corral_source_split_15759;

  corral_source_split_15759:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i3, $i70;
    goto $bb66;

  $bb73:
    assume $i66 == 1;
    goto corral_source_split_15749;

  corral_source_split_15749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3276} $i67 := be_probe($u8, $u9);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    call {:si_unique_call 3277} {:cexpr "res_be_probe_135"} boogie_si_record_i32($i67);
    goto corral_source_split_15750;

  corral_source_split_15750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3278} ldv_check_return_value($i67);
    goto corral_source_split_15751;

  corral_source_split_15751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3279} ldv_check_return_value_probe($i67);
    goto corral_source_split_15752;

  corral_source_split_15752:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_15753;

  corral_source_split_15753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i4, 1);
    call {:si_unique_call 3280} {:cexpr "ldv_s_be_driver_pci_driver"} boogie_si_record_i32($i69);
    goto corral_source_split_15757;

  corral_source_split_15757:
    assume {:verifier.code 0} true;
    $i70 := $i69;
    goto $bb78;

  $bb75:
    assume $i68 == 1;
    goto corral_source_split_15755;

  corral_source_split_15755:
    assume {:verifier.code 0} true;
    goto $bb63;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i16 == 1;
    goto corral_source_split_15645;

  corral_source_split_15645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3237} ldv_handler_precall();
    goto corral_source_split_15646;

  corral_source_split_15646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3238} be_eeh_resume($u8);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_15647;

  corral_source_split_15647:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i3, $i4;
    goto $bb66;

  SeqInstr_532:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i15 == 1;
    goto corral_source_split_15641;

  corral_source_split_15641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3235} ldv_handler_precall();
    goto corral_source_split_15642;

  corral_source_split_15642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3236} vslice_dummy_var_580 := be_eeh_reset($u8);
    goto corral_source_split_15643;

  corral_source_split_15643:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i3, $i4;
    goto $bb66;

  $bb25:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i5, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i5, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i18 == 1);
    goto corral_source_split_15660;

  corral_source_split_15660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3243} ldv_handler_precall();
    goto corral_source_split_15661;

  corral_source_split_15661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3244} vslice_dummy_var_582 := be_eeh_err_detected($u8, $u0);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    goto corral_source_split_15662;

  corral_source_split_15662:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i3, $i4;
    goto $bb66;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i18 == 1;
    goto corral_source_split_15656;

  corral_source_split_15656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3241} ldv_handler_precall();
    goto corral_source_split_15657;

  corral_source_split_15657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3242} be_netpoll($u1);
    goto corral_source_split_15658;

  corral_source_split_15658:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i3, $i4;
    goto $bb66;

  $bb31:
    assume $i17 == 1;
    goto corral_source_split_15652;

  corral_source_split_15652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3239} ldv_handler_precall();
    goto corral_source_split_15653;

  corral_source_split_15653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3240} vslice_dummy_var_581 := be_get_vf_config($u1, $u0, $u7);
    goto corral_source_split_15654;

  corral_source_split_15654:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i3, $i4;
    goto $bb66;

  $bb8:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i5, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i5, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i5, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i5, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i22 == 1);
    goto corral_source_split_15676;

  corral_source_split_15676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3249} ldv_handler_precall();
    goto corral_source_split_15677;

  corral_source_split_15677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3250} vslice_dummy_var_585 := be_set_vf_tx_rate($u1, $u0, $u0);
    goto corral_source_split_15678;

  corral_source_split_15678:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i3, $i4;
    goto $bb66;

  $bb41:
    assume $i22 == 1;
    goto corral_source_split_15668;

  corral_source_split_15668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3247} ldv_handler_precall();
    goto corral_source_split_15669;

  corral_source_split_15669:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($u5);
    goto corral_source_split_15670;

  corral_source_split_15670:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i16($i57);
    goto corral_source_split_15671;

  corral_source_split_15671:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($u6);
    goto corral_source_split_15672;

  corral_source_split_15672:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    goto corral_source_split_15673;

  corral_source_split_15673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3248} vslice_dummy_var_584 := be_set_vf_vlan($u1, $u0, $i58, $i60);
    goto corral_source_split_15674;

  corral_source_split_15674:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i3, $i4;
    goto $bb66;

  $bb39:
    assume $i21 == 1;
    goto corral_source_split_15664;

  corral_source_split_15664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3245} ldv_handler_precall();
    goto corral_source_split_15665;

  corral_source_split_15665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3246} vslice_dummy_var_583 := be_set_vf_mac($u1, $u0, $u3);
    goto corral_source_split_15666;

  corral_source_split_15666:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i3, $i4;
    goto $bb66;

  $bb37:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i5, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i5, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i24 == 1);
    goto corral_source_split_15692;

  corral_source_split_15692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3255} ldv_handler_precall();
    goto corral_source_split_15693;

  corral_source_split_15693:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($u5);
    goto corral_source_split_15694;

  corral_source_split_15694:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i16($i51);
    goto corral_source_split_15695;

  corral_source_split_15695:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($u5);
    goto corral_source_split_15696;

  corral_source_split_15696:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i53);
    goto corral_source_split_15697;

  corral_source_split_15697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3256} vslice_dummy_var_588 := be_vlan_rem_vid($u1, $i52, $i54);
    goto corral_source_split_15698;

  corral_source_split_15698:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i3, $i4;
    goto $bb66;

  $bb45:
    assume $i24 == 1;
    goto corral_source_split_15684;

  corral_source_split_15684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3253} ldv_handler_precall();
    goto corral_source_split_15685;

  corral_source_split_15685:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($u5);
    goto corral_source_split_15686;

  corral_source_split_15686:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i16($i46);
    goto corral_source_split_15687;

  corral_source_split_15687:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($u5);
    goto corral_source_split_15688;

  corral_source_split_15688:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i16($i48);
    goto corral_source_split_15689;

  corral_source_split_15689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3254} vslice_dummy_var_587 := be_vlan_add_vid($u1, $i47, $i49);
    goto corral_source_split_15690;

  corral_source_split_15690:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i3, $i4;
    goto $bb66;

  $bb43:
    assume $i23 == 1;
    goto corral_source_split_15680;

  corral_source_split_15680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3251} ldv_handler_precall();
    goto corral_source_split_15681;

  corral_source_split_15681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3252} vslice_dummy_var_586 := be_get_stats64($u1, $u4);
    goto corral_source_split_15682;

  corral_source_split_15682:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i3, $i4;
    goto $bb66;

  $bb35:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i5, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i5, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i5, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i27 == 1);
    goto corral_source_split_15708;

  corral_source_split_15708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3261} ldv_handler_precall();
    goto corral_source_split_15709;

  corral_source_split_15709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3262} vslice_dummy_var_590 := be_change_mtu($u1, $u0);
    goto corral_source_split_15710;

  corral_source_split_15710:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i3, $i4;
    goto $bb66;

  $bb51:
    assume $i27 == 1;
    goto corral_source_split_15704;

  corral_source_split_15704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3259} ldv_handler_precall();
    goto corral_source_split_15705;

  corral_source_split_15705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3260} vslice_dummy_var_589 := be_mac_addr_set($u1, $u3);
    goto corral_source_split_15706;

  corral_source_split_15706:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i3, $i4;
    goto $bb66;

  $bb49:
    assume $i26 == 1;
    goto corral_source_split_15700;

  corral_source_split_15700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3257} ldv_handler_precall();
    goto corral_source_split_15701;

  corral_source_split_15701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3258} be_set_rx_mode($u1);
    goto corral_source_split_15702;

  corral_source_split_15702:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i3, $i4;
    goto $bb66;

  $bb47:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i5, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i5, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i29 == 1);
    goto corral_source_split_15715;

  corral_source_split_15715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3263} ldv_handler_precall();
    goto corral_source_split_15716;

  corral_source_split_15716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3264} vslice_dummy_var_591 := be_xmit($u2, $u1);
    goto corral_source_split_15717;

  corral_source_split_15717:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i3, $i4;
    goto $bb66;

  $bb55:
    assume $i29 == 1;
    goto corral_source_split_15712;

  corral_source_split_15712:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i3, 1);
    goto corral_source_split_15713;

  corral_source_split_15713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i41 := $i3;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto corral_source_split_15747;

  corral_source_split_15747:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i41, $i4;
    goto $bb66;

  $bb67:
    assume $i38 == 1;
    goto corral_source_split_15739;

  corral_source_split_15739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3272} ldv_handler_precall();
    goto corral_source_split_15740;

  corral_source_split_15740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3273} $i39 := be_close($u1);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    call {:si_unique_call 3274} {:cexpr "res_be_close_86"} boogie_si_record_i32($i39);
    goto corral_source_split_15741;

  corral_source_split_15741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3275} ldv_check_return_value($i39);
    goto corral_source_split_15742;

  corral_source_split_15742:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_15743;

  corral_source_split_15743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb72;

  $bb69:
    assume $i40 == 1;
    goto corral_source_split_15745;

  corral_source_split_15745:
    assume {:verifier.code 0} true;
    goto $bb63;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  $bb53:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb20;

  $bb57:
    assume $i30 == 1;
    goto corral_source_split_15719;

  corral_source_split_15719:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i3, 0);
    goto corral_source_split_15720;

  corral_source_split_15720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i35 := $i3;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_15735;

  corral_source_split_15735:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i35, $i4;
    goto $bb66;

  $bb59:
    assume $i31 == 1;
    goto corral_source_split_15722;

  corral_source_split_15722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3265} ldv_handler_precall();
    goto corral_source_split_15723;

  corral_source_split_15723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3266} $i32 := be_open($u1);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    call {:si_unique_call 3267} {:cexpr "res_be_open_88"} boogie_si_record_i32($i32);
    goto corral_source_split_15724;

  corral_source_split_15724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3268} ldv_check_return_value($i32);
    goto corral_source_split_15725;

  corral_source_split_15725:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 0);
    goto corral_source_split_15726;

  corral_source_split_15726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i3, 1);
    call {:si_unique_call 3271} {:cexpr "ldv_s_be_netdev_ops_net_device_ops"} boogie_si_record_i32($i34);
    goto corral_source_split_15733;

  corral_source_split_15733:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb65;

  $bb61:
    assume $i33 == 1;
    goto corral_source_split_15728;

  corral_source_split_15728:
    assume {:verifier.code 0} true;
    goto $bb63;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i81 == 1;
    goto $bb84;

  $bb83:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb84;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_15604;

  corral_source_split_15604:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_15737_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_15608;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 870214);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.38, $M.65, $M.25, $M.66;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15773;

  corral_source_split_15773:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 3283} {:cexpr "ldv_mutex_be_adapter_list_lock"} boogie_si_record_i32(1);
    goto corral_source_split_15774;

  corral_source_split_15774:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 3284} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    goto corral_source_split_15775;

  corral_source_split_15775:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 3285} {:cexpr "ldv_mutex_mbox_lock_of_be_adapter"} boogie_si_record_i32(1);
    goto corral_source_split_15776;

  corral_source_split_15776:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 3286} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(1);
    goto corral_source_split_15777;

  corral_source_split_15777:
    assume {:verifier.code 0} true;
    return;
}



const ldv_handler_precall: ref;

axiom ldv_handler_precall == $sub.ref(0, 871246);

procedure ldv_handler_precall();
  free requires assertsPassed;



implementation ldv_handler_precall()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15779;

  corral_source_split_15779:
    assume {:verifier.code 0} true;
    return;
}



const be_init_module: ref;

axiom be_init_module == $sub.ref(0, 872278);

procedure be_init_module() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.33;



implementation be_init_module() returns ($r: i32)
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i3: i16;
  var $i4: i32;
  var $i5: i1;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var vslice_dummy_var_592: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15781;

  corral_source_split_15781:
    assume {:verifier.code 0} true;
    $i0 := $M.33;
    goto corral_source_split_15782;

  corral_source_split_15782:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_15783;

  corral_source_split_15783:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 8192);
    goto corral_source_split_15784;

  corral_source_split_15784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3289} $i10 := __pci_register_driver(be_driver, __this_module, .str.97);
    call {:si_unique_call 3290} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_15800;

  corral_source_split_15800:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_15786;

  corral_source_split_15786:
    assume {:verifier.code 0} true;
    $i3 := $M.33;
    goto corral_source_split_15787;

  corral_source_split_15787:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_15788;

  corral_source_split_15788:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 4096);
    goto corral_source_split_15789;

  corral_source_split_15789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_15791;

  corral_source_split_15791:
    assume {:verifier.code 0} true;
    $i6 := $M.33;
    goto corral_source_split_15792;

  corral_source_split_15792:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_15793;

  corral_source_split_15793:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 2048);
    goto corral_source_split_15794;

  corral_source_split_15794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_15796;

  corral_source_split_15796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3287} vslice_dummy_var_592 := printk.ref(.str.96);
    goto corral_source_split_15797;

  corral_source_split_15797:
    assume {:verifier.code 0} true;
    $M.33 := 2048;
    call {:si_unique_call 3288} {:cexpr "rx_frag_size"} boogie_si_record_i16(2048);
    goto corral_source_split_15798;

  corral_source_split_15798:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const ldv_check_return_value: ref;

axiom ldv_check_return_value == $sub.ref(0, 873310);

procedure ldv_check_return_value($i0: i32);
  free requires assertsPassed;



implementation ldv_check_return_value($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3291} {:cexpr "ldv_check_return_value:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_15802;

  corral_source_split_15802:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_return_value_probe: ref;

axiom ldv_check_return_value_probe == $sub.ref(0, 874342);

procedure ldv_check_return_value_probe($i0: i32);
  free requires assertsPassed;



implementation ldv_check_return_value_probe($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3292} {:cexpr "ldv_check_return_value_probe:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_15804;

  corral_source_split_15804:
    assume {:verifier.code 0} true;
    return;
}



const be_exit_module: ref;

axiom be_exit_module == $sub.ref(0, 875374);

procedure be_exit_module();
  free requires assertsPassed;



implementation be_exit_module()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15806;

  corral_source_split_15806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3293} pci_unregister_driver(be_driver);
    goto corral_source_split_15807;

  corral_source_split_15807:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 876406);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15809;

  corral_source_split_15809:
    assume {:verifier.code 0} true;
    $i0 := $M.38;
    goto corral_source_split_15810;

  corral_source_split_15810:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_15811;

  corral_source_split_15811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_15815;

  corral_source_split_15815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3294} ldv_error();
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.65;
    goto corral_source_split_15817;

  corral_source_split_15817:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_15818;

  corral_source_split_15818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_15822;

  corral_source_split_15822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3295} ldv_error();
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.25;
    goto corral_source_split_15824;

  corral_source_split_15824:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_15825;

  corral_source_split_15825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    goto corral_source_split_15829;

  corral_source_split_15829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3296} ldv_error();
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.66;
    goto corral_source_split_15831;

  corral_source_split_15831:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_15832;

  corral_source_split_15832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    goto corral_source_split_15836;

  corral_source_split_15836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3297} ldv_error();
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_15834;

  corral_source_split_15834:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_556:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_15827;

  corral_source_split_15827:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_553:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_15820;

  corral_source_split_15820:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_15813;

  corral_source_split_15813:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 877438);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15838;

  corral_source_split_15838:
    assume {:verifier.code 0} true;
    return;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 878470);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15840;

  corral_source_split_15840:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3298} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 3299} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_15841;

  corral_source_split_15841:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 879502);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3300} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_15843;

  corral_source_split_15843:
    assume {:verifier.code 1} true;
    goto corral_source_split_15844;

  corral_source_split_15844:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_15845;

  corral_source_split_15845:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 880534);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 881566);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 882598);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15847;

  corral_source_split_15847:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_15848;

  corral_source_split_15848:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_562:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 883630);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 884662);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 885694);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 886726);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 887758);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 888790);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 889822);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __VERIFIER_nondet_unsigned_short: ref;

axiom __VERIFIER_nondet_unsigned_short == $sub.ref(0, 890854);

procedure __VERIFIER_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 891886);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 892918);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 893950);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15850;

  corral_source_split_15850:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3301} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 3302} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 3303} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_15851;

  corral_source_split_15851:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_15852;

  corral_source_split_15852:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_15856;

  corral_source_split_15856:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_15857;

  corral_source_split_15857:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3304} __VERIFIER_assume($i4);
    goto corral_source_split_15858;

  corral_source_split_15858:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_15854;

  corral_source_split_15854:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 894982);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 896014);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 897046);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 898078);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15860;

  corral_source_split_15860:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3305} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 3306} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 3307} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_15861;

  corral_source_split_15861:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3308} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 3309} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 3310} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_15862;

  corral_source_split_15862:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3311} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 3312} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 3313} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_15863;

  corral_source_split_15863:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_15864;

  corral_source_split_15864:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_15869;

  corral_source_split_15869:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_15870;

  corral_source_split_15870:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3314} __VERIFIER_assume($i7);
    goto corral_source_split_15871;

  corral_source_split_15871:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_15872;

  corral_source_split_15872:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_15878;

  corral_source_split_15878:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_15879;

  corral_source_split_15879:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3315} __VERIFIER_assume($i11);
    goto corral_source_split_15880;

  corral_source_split_15880:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_15876;

  corral_source_split_15876:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_15866;

  corral_source_split_15866:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_15867;

  corral_source_split_15867:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_15874;

  corral_source_split_15874:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 899110);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 900142);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 901174);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 902206);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 903238);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 904270);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15882;

  corral_source_split_15882:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3316} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 3317} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 3318} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_15883;

  corral_source_split_15883:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3319} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 3320} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 3321} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_15884;

  corral_source_split_15884:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3322} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 3323} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 3324} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_15885;

  corral_source_split_15885:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_15886;

  corral_source_split_15886:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_15891;

  corral_source_split_15891:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_15892;

  corral_source_split_15892:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3325} __VERIFIER_assume($i7);
    goto corral_source_split_15893;

  corral_source_split_15893:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_15894;

  corral_source_split_15894:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_15900;

  corral_source_split_15900:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_15901;

  corral_source_split_15901:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3326} __VERIFIER_assume($i11);
    goto corral_source_split_15902;

  corral_source_split_15902:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_15898;

  corral_source_split_15898:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_15888;

  corral_source_split_15888:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_15889;

  corral_source_split_15889:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_15896;

  corral_source_split_15896:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 905302);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 906334);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 907366);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 908398);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 909430);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 910462);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 911494);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 912526);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 913558);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15904;

  corral_source_split_15904:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3327} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3328} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_15905;

  corral_source_split_15905:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_15906;

  corral_source_split_15906:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 3329} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_15907;

  corral_source_split_15907:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_15908;

  corral_source_split_15908:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_15909;

  corral_source_split_15909:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_15910;

  corral_source_split_15910:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_15917;

  corral_source_split_15917:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_15918;

  corral_source_split_15918:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_15919;

  corral_source_split_15919:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_15920;

  corral_source_split_15920:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_15912;

  corral_source_split_15912:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_15913;

  corral_source_split_15913:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3330} __VERIFIER_assume($i10);
    goto corral_source_split_15914;

  corral_source_split_15914:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_15915;

  corral_source_split_15915:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ushort: ref;

axiom __VERIFIER_nondet_ushort == $sub.ref(0, 914590);

procedure __VERIFIER_nondet_ushort() returns ($r: i16);



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 915622);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15922;

  corral_source_split_15922:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3331} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 3332} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 3333} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_15923;

  corral_source_split_15923:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 916654);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15925;

  corral_source_split_15925:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3334} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 3335} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 3336} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_15926;

  corral_source_split_15926:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 917686);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15928;

  corral_source_split_15928:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3337} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 3338} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_15929;

  corral_source_split_15929:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 918718);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 919750);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 3339} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 3340} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 920782);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 921814);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15931;

  corral_source_split_15931:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_15932;

  corral_source_split_15932:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 922846);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 923878);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.67, $M.0, $M.51, $M.69, $M.70, $M.43, $M.44, $M.45, $M.39, $M.71, $M.28, $M.27, $M.33, $M.66, $M.25, $M.65, $M.38, $M.36, $M.79, $M.80, $M.81, $M.82, $M.83;



implementation __SMACK_static_init()
{

  $bb0:
    $M.67 := $store.i8($M.67, flash_cookie, 42);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(1, 1)), 42);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(2, 1)), 42);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(3, 1)), 32);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(4, 1)), 83);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(5, 1)), 69);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(6, 1)), 32);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(7, 1)), 70);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(8, 1)), 76);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(9, 1)), 65);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(10, 1)), 83);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(11, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(12, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(13, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(14, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(0, 1)), 72);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(1, 1)), 32);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(2, 1)), 68);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(3, 1)), 73);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(4, 1)), 82);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(5, 1)), 69);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(6, 1)), 67);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(7, 1)), 84);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(8, 1)), 79);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(9, 1)), 82);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(10, 1)), 89);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(11, 1)), 32);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(12, 1)), 42);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(13, 1)), 42);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(14, 1)), 42);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(15, 1)), 32);
    call {:si_unique_call 3341} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, be_ethtool_ops, be_get_settings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(16, 1)), be_get_drvinfo);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(24, 1)), be_get_reg_len);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(32, 1)), be_get_regs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(40, 1)), be_get_wol);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(48, 1)), be_set_wol);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(56, 1)), be_get_msg_level);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(64, 1)), be_set_msg_level);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(80, 1)), ethtool_op_get_link);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(88, 1)), be_get_eeprom_len);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(96, 1)), be_read_eeprom);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(112, 1)), be_get_coalesce);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(120, 1)), be_set_coalesce);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(128, 1)), be_get_ringparam);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(144, 1)), be_get_pauseparam);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(152, 1)), be_set_pauseparam);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(160, 1)), be_self_test);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(168, 1)), be_get_stat_strings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(176, 1)), be_set_phys_id);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(184, 1)), be_get_ethtool_stats);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(224, 1)), be_get_sset_count);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(232, 1)), be_get_rxnfc);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(240, 1)), be_set_rxnfc);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(248, 1)), be_do_flash);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(360, 1)), $0.ref);
    $M.51 := be_adapter_list;
    $M.0 := $store.i32($M.0, be_adapter_list_lock, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.187);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(be_adapter_list_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(be_adapter_list_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(112, 1)), be_adapter_list_lock);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(24, 1)), .str.188);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, et_self_tests, 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(1, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(2, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(4, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(8, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(11, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(1, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(2, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(4, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(8, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(11, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(9, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(12, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(13, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(15, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(16, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(2, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(4, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(5, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(3, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(31, 1)), 0);
    $M.69 := $store.i8($M.69, et_tx_stats, 116);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 99);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 111);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 109);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 108);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(32, 1)), 0);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(36, 1)), 8);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(40, 1)), 32);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 98);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 121);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 116);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 101);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(32, 1)), 0);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(36, 1)), 8);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(40, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 112);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 107);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 116);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 115);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(32, 1)), 0);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(36, 1)), 8);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(40, 1)), 8);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 114);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 101);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 113);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 115);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(32, 1)), 0);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(36, 1)), 8);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(40, 1)), 16);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 119);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 98);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 115);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(32, 1)), 0);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(36, 1)), 8);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(40, 1)), 24);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 115);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 116);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(32, 1)), 0);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(36, 1)), 4);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(40, 1)), 48);
    $M.70 := $store.i8($M.70, et_rx_stats, 114);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 98);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 121);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 116);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 101);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(32, 1)), 1);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(36, 1)), 8);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(40, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 112);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 107);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 116);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 115);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(32, 1)), 1);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(36, 1)), 8);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(40, 1)), 8);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 99);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 111);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 109);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 108);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(32, 1)), 1);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(36, 1)), 4);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(40, 1)), 44);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 109);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 99);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 97);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 115);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 116);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 95);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 112);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 107);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 116);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 115);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(32, 1)), 1);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(36, 1)), 4);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(40, 1)), 48);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 112);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 111);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 115);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 116);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 95);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 102);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 97);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 105);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 108);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(32, 1)), 1);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(36, 1)), 4);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(40, 1)), 40);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 95);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 110);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 111);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 95);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 115);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 107);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 98);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 115);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(32, 1)), 1);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(36, 1)), 4);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(40, 1)), 32);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 95);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 110);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 111);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 95);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 102);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 114);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 97);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 103);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 115);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(32, 1)), 1);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(36, 1)), 4);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(40, 1)), 36);
    $M.0 := $store.i8($M.0, et_stats, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(40, 1)), 36);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(40, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(40, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(40, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(40, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(40, 1)), 60);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(40, 1)), 64);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(40, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(40, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(40, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(40, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(40, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(40, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(40, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(40, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(40, 1)), 92);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(40, 1)), 96);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(40, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(40, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(40, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(40, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(40, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(40, 1)), 124);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(40, 1)), 128);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(40, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(40, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(40, 1)), 20);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(40, 1)), 24);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(40, 1)), 28);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(40, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(40, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(40, 1)), 0);
    $M.43 := $store.i8($M.43, cmd_priv_map, 12);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(0, 8)), $mul.ref(1, 1)), 3);
    $M.45 := $store.i32($M.45, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(0, 8)), $mul.ref(4, 1)), 1800);
    $M.43 := $store.i8($M.43, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(1, 8)), $mul.ref(0, 1)), 37);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(1, 8)), $mul.ref(1, 1)), 1);
    $M.45 := $store.i32($M.45, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(1, 8)), $mul.ref(4, 1)), 1794);
    $M.43 := $store.i8($M.43, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(2, 8)), $mul.ref(0, 1)), 36);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(2, 8)), $mul.ref(1, 1)), 1);
    $M.45 := $store.i32($M.45, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(2, 8)), $mul.ref(4, 1)), 1800);
    $M.43 := $store.i8($M.43, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(3, 8)), $mul.ref(0, 1)), 18);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(3, 8)), $mul.ref(1, 1)), 3);
    $M.45 := $store.i32($M.45, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(3, 8)), $mul.ref(4, 1)), 1800);
    $M.43 := $store.i8($M.43, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(4, 8)), $mul.ref(0, 1)), 102);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(4, 8)), $mul.ref(1, 1)), 1);
    $M.45 := $store.i32($M.45, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(4, 8)), $mul.ref(4, 1)), 1800);
    $M.0 := $store.ref($M.0, be_netdev_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(16, 1)), be_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(24, 1)), be_close);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(32, 1)), be_xmit);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(56, 1)), be_set_rx_mode);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(64, 1)), be_mac_addr_set);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(72, 1)), eth_validate_addr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(96, 1)), be_change_mtu);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(120, 1)), be_get_stats64);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(136, 1)), be_vlan_add_vid);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(144, 1)), be_vlan_rem_vid);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(152, 1)), be_netpoll);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(176, 1)), be_set_vf_mac);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(184, 1)), be_set_vf_vlan);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(192, 1)), be_set_vf_tx_rate);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(208, 1)), be_get_vf_config);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(400, 1)), $0.ref);
    $M.39 := 0;
    call {:si_unique_call 3342} {:cexpr "num_vfs"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, be_eeh_handlers, be_eeh_err_detected);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_eeh_handlers, $mul.ref(0, 40)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_eeh_handlers, $mul.ref(0, 40)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_eeh_handlers, $mul.ref(0, 40)), $mul.ref(24, 1)), be_eeh_reset);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_eeh_handlers, $mul.ref(0, 40)), $mul.ref(32, 1)), be_eeh_resume);
    $M.0 := $store.i32($M.0, be_dev_ids, 6562);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(0, 32)), $mul.ref(4, 1)), 529);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(1, 32)), $mul.ref(0, 1)), 6562);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(1, 32)), $mul.ref(4, 1)), 545);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(1, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(1, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(2, 32)), $mul.ref(0, 1)), 6562);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(2, 32)), $mul.ref(4, 1)), 1792);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(2, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(2, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(3, 32)), $mul.ref(0, 1)), 6562);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(3, 32)), $mul.ref(4, 1)), 1808);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(3, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(3, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(3, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(4, 32)), $mul.ref(0, 1)), 4319);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(4, 32)), $mul.ref(4, 1)), 57888);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(4, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(4, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(4, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(5, 32)), $mul.ref(0, 1)), 4319);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(5, 32)), $mul.ref(4, 1)), 57896);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(5, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(5, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(5, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(6, 32)), $mul.ref(0, 1)), 4319);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(6, 32)), $mul.ref(4, 1)), 1824);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(6, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(6, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(6, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(7, 32)), $mul.ref(0, 1)), 4319);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(7, 32)), $mul.ref(4, 1)), 1832);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(7, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(7, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(7, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(8, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(8, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(8, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.71 := $store.ref($M.71, be_driver, $0.ref);
    $M.71 := $store.ref($M.71, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.71 := $store.ref($M.71, $add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), .str.97);
    $M.71 := $store.ref($M.71, $add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), be_dev_ids);
    $M.71 := $store.ref($M.71, $add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), be_probe);
    $M.71 := $store.ref($M.71, $add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), be_remove);
    $M.71 := $store.ref($M.71, $add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), be_suspend);
    $M.71 := $store.ref($M.71, $add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.71 := $store.ref($M.71, $add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.71 := $store.ref($M.71, $add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), be_resume);
    $M.71 := $store.ref($M.71, $add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), be_shutdown);
    $M.71 := $store.ref($M.71, $add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.71 := $store.ref($M.71, $add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), be_eeh_handlers);
    $M.71 := $store.ref($M.71, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.71 := $store.ref($M.71, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.71 := $store.ref($M.71, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.71 := $store.ref($M.71, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.71 := $store.ref($M.71, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.71 := $store.ref($M.71, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.71 := $store.ref($M.71, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.71 := $store.ref($M.71, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.71 := $store.ref($M.71, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.71 := $store.ref($M.71, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.71 := $store.ref($M.71, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.71 := $store.ref($M.71, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.71 := $store.ref($M.71, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), $0.ref);
    $M.71 := $store.ref($M.71, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.71 := $store.i32($M.71, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.71 := $store.i32($M.71, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.71 := $store.i32($M.71, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.71 := $store.ref($M.71, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.71 := $store.ref($M.71, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.71 := $store.ref($M.71, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.71 := $store.ref($M.71, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.71 := $store.ref($M.71, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.71 := $store.i32($M.71, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.71 := $store.i64($M.71, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.71 := $store.ref($M.71, $add.ref($add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.71 := $store.ref($M.71, $add.ref($add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.28 := $store.ref($M.28, ue_status_hi_desc, .str.57);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(1, 8)), .str.58);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(2, 8)), .str.59);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(3, 8)), .str.60);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(4, 8)), .str.61);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(5, 8)), .str.62);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(6, 8)), .str.63);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(7, 8)), .str.64);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(8, 8)), .str.65);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(9, 8)), .str.66);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(10, 8)), .str.67);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(11, 8)), .str.68);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(12, 8)), .str.69);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(13, 8)), .str.70);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(14, 8)), .str.71);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(15, 8)), .str.72);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(16, 8)), .str.73);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(17, 8)), .str.74);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(18, 8)), .str.75);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(19, 8)), .str.76);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(20, 8)), .str.77);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(21, 8)), .str.78);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(22, 8)), .str.79);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(23, 8)), .str.80);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(24, 8)), .str.81);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(25, 8)), .str.81);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(26, 8)), .str.81);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(27, 8)), .str.81);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(28, 8)), .str.81);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(29, 8)), .str.81);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(30, 8)), .str.81);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(31, 8)), .str.81);
    $M.27 := $store.ref($M.27, ue_status_low_desc, .str.25);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(1, 8)), .str.26);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(2, 8)), .str.27);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(3, 8)), .str.28);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(4, 8)), .str.29);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(5, 8)), .str.30);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(6, 8)), .str.31);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(7, 8)), .str.32);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(8, 8)), .str.33);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(9, 8)), .str.34);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(10, 8)), .str.35);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(11, 8)), .str.36);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(12, 8)), .str.37);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(13, 8)), .str.38);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(14, 8)), .str.39);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(15, 8)), .str.40);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(16, 8)), .str.41);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(17, 8)), .str.42);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(18, 8)), .str.43);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(19, 8)), .str.44);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(20, 8)), .str.45);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(21, 8)), .str.46);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(22, 8)), .str.47);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(23, 8)), .str.48);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(24, 8)), .str.49);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(25, 8)), .str.50);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(26, 8)), .str.51);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(27, 8)), .str.52);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(28, 8)), .str.53);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(29, 8)), .str.54);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(30, 8)), .str.55);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(31, 8)), .str.56);
    $M.33 := 2048;
    call {:si_unique_call 3343} {:cexpr "rx_frag_size"} boogie_si_record_i16(2048);
    $M.66 := 0;
    call {:si_unique_call 3344} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(0);
    $M.25 := 0;
    call {:si_unique_call 3345} {:cexpr "ldv_mutex_mbox_lock_of_be_adapter"} boogie_si_record_i32(0);
    $M.65 := 0;
    call {:si_unique_call 3346} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(0);
    $M.38 := 0;
    call {:si_unique_call 3347} {:cexpr "ldv_mutex_be_adapter_list_lock"} boogie_si_record_i32(0);
    $M.36 := $0.ref;
    $M.79 := $store.i8($M.79, .str.95, 51);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.95, $mul.ref(0, 12)), $mul.ref(1, 1)), 46);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.95, $mul.ref(0, 12)), $mul.ref(2, 1)), 49);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.95, $mul.ref(0, 12)), $mul.ref(3, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.95, $mul.ref(0, 12)), $mul.ref(4, 1)), 50);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.95, $mul.ref(0, 12)), $mul.ref(5, 1)), 46);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.95, $mul.ref(0, 12)), $mul.ref(6, 1)), 49);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.95, $mul.ref(0, 12)), $mul.ref(7, 1)), 52);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.95, $mul.ref(0, 12)), $mul.ref(8, 1)), 56);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.95, $mul.ref(0, 12)), $mul.ref(9, 1)), 46);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.95, $mul.ref(0, 12)), $mul.ref(10, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.95, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.83, 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 5)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 5)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 5)), $mul.ref(3, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.97, 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 7)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 7)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 7)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 7)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, .str.99, 37);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.99, $mul.ref(0, 7)), $mul.ref(1, 1)), 115);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.99, $mul.ref(0, 7)), $mul.ref(2, 1)), 45);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.99, $mul.ref(0, 7)), $mul.ref(3, 1)), 113);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.99, $mul.ref(0, 7)), $mul.ref(4, 1)), 37);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.99, $mul.ref(0, 7)), $mul.ref(5, 1)), 100);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.99, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.187, 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(18, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(19, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(20, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(21, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(22, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(23, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(24, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(25, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(26, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(27, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(28, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(29, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, .str.188, 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(18, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(19, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.81 := $store.i8($M.81, .str.183, 114);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.183, $mul.ref(0, 10)), $mul.ref(1, 1)), 120);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.183, $mul.ref(0, 10)), $mul.ref(2, 1)), 113);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.183, $mul.ref(0, 10)), $mul.ref(3, 1)), 37);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.183, $mul.ref(0, 10)), $mul.ref(4, 1)), 100);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.183, $mul.ref(0, 10)), $mul.ref(5, 1)), 58);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.183, $mul.ref(0, 10)), $mul.ref(6, 1)), 32);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.183, $mul.ref(0, 10)), $mul.ref(7, 1)), 37);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.183, $mul.ref(0, 10)), $mul.ref(8, 1)), 115);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.183, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.82 := $store.i8($M.82, .str.184, 116);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.184, $mul.ref(0, 10)), $mul.ref(1, 1)), 120);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.184, $mul.ref(0, 10)), $mul.ref(2, 1)), 113);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.184, $mul.ref(0, 10)), $mul.ref(3, 1)), 37);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.184, $mul.ref(0, 10)), $mul.ref(4, 1)), 100);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.184, $mul.ref(0, 10)), $mul.ref(5, 1)), 58);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.184, $mul.ref(0, 10)), $mul.ref(6, 1)), 32);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.184, $mul.ref(0, 10)), $mul.ref(7, 1)), 37);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.184, $mul.ref(0, 10)), $mul.ref(8, 1)), 115);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.184, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.179, 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(1, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(4, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(10, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(11, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(12, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.180, 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(1, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(4, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(9, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(10, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(11, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(12, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.172, 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 14)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 14)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 14)), $mul.ref(3, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 14)), $mul.ref(4, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 14)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 14)), $mul.ref(6, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 14)), $mul.ref(7, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 14)), $mul.ref(8, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 14)), $mul.ref(9, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 14)), $mul.ref(10, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 14)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 14)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.170, 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 10)), $mul.ref(1, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 10)), $mul.ref(2, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 10)), $mul.ref(3, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 10)), $mul.ref(4, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 10)), $mul.ref(5, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 10)), $mul.ref(6, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 10)), $mul.ref(7, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 10)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.83 := $store.i8($M.83, .str.171, 37);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.171, $mul.ref(0, 8)), $mul.ref(1, 1)), 115);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.171, $mul.ref(0, 8)), $mul.ref(2, 1)), 32);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.171, $mul.ref(0, 8)), $mul.ref(3, 1)), 91);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.171, $mul.ref(0, 8)), $mul.ref(4, 1)), 37);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.171, $mul.ref(0, 8)), $mul.ref(5, 1)), 115);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.171, $mul.ref(0, 8)), $mul.ref(6, 1)), 93);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.171, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    call {:si_unique_call 3348} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 924910);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 925942);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 926974);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 928006);

procedure devirtbounce.3(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 929038);

procedure devirtbounce.4(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 930070);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i12 := $eq.ref(be_get_pauseparam, $p0);
    assume true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i12 == 1);
    $i11 := $eq.ref(be_get_ringparam, $p0);
    assume true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i11 == 1);
    $i10 := $eq.ref(be_get_wol, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i10 == 1);
    $i9 := $eq.ref(be_get_drvinfo, $p0);
    assume true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3349} be_get_drvinfo($p1, $p2);
    return;

  $bb3:
    assume $i10 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3350} be_get_wol($p3, $p4);
    return;

  $bb4:
    assume $i11 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3351} be_get_ringparam($p5, $p6);
    return;

  $bb5:
    assume $i12 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3352} be_get_pauseparam($p7, $p8);
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 931102);

procedure devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.60, $M.41, $M.21, $M.61, $M.62, $M.29, $M.30, $M.31, $M.2, $M.1, $M.34, $M.26, $CurrAddr, $M.25, $M.38, $M.35, assertsPassed, $M.47, $M.46, $M.48, $M.42, $M.40;



implementation devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i27 := $eq.ref(eth_validate_addr, $p0);
    assume true;
    goto $bb10, $bb19;

  $bb19:
    assume !($i27 == 1);
    $i26 := $eq.ref(be_eeh_reset, $p0);
    assume true;
    goto $bb9, $bb18;

  $bb18:
    assume !($i26 == 1);
    $i25 := $eq.ref(be_close, $p0);
    assume true;
    goto $bb8, $bb17;

  $bb17:
    assume !($i25 == 1);
    $i24 := $eq.ref(be_open, $p0);
    assume true;
    goto $bb7, $bb16;

  $bb16:
    assume !($i24 == 1);
    $i23 := $eq.ref(be_resume, $p0);
    assume true;
    goto $bb6, $bb15;

  $bb15:
    assume !($i23 == 1);
    $i22 := $eq.ref(be_get_eeprom_len, $p0);
    assume true;
    goto $bb5, $bb14;

  $bb14:
    assume !($i22 == 1);
    $i21 := $eq.ref(ethtool_op_get_link, $p0);
    assume true;
    goto $bb4, $bb13;

  $bb13:
    assume !($i21 == 1);
    $i20 := $eq.ref(be_get_msg_level, $p0);
    assume true;
    goto $bb3, $bb12;

  $bb12:
    assume !($i20 == 1);
    $i19 := $eq.ref(be_get_reg_len, $p0);
    assume true;
    goto $bb2, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume false;
    return;

  $bb2:
    assume $i19 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3353} $i2 := be_get_reg_len($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i20 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3354} $i4 := be_get_msg_level($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i21 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3355} $i6 := ethtool_op_get_link($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i22 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3356} $i8 := be_get_eeprom_len($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i23 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3357} $i10 := be_resume($p9);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    $r := $i10;
    return;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i24 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3358} $i12 := be_open($p11);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    $r := $i12;
    return;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i25 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3359} $i14 := be_close($p13);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    $r := $i14;
    return;

  SeqInstr_571:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i26 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3360} $i16 := be_eeh_reset($p15);
    $r := $i16;
    return;

  $bb10:
    assume $i27 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3361} $i18 := eth_validate_addr($p17);
    $r := $i18;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 932134);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 933166);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(be_get_stat_strings, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3362} be_get_stat_strings($p1, arg1, $p2);
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 934198);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(be_get_stat_strings, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3363} be_get_stat_strings($p1, arg1, $p2);
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 935230);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.41, $M.0, $M.21, $M.42, $CurrAddr;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i8 := $eq.ref(be_get_vf_config, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    $i7 := $eq.ref(be_set_vf_mac, $p0);
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3364} $i3 := be_set_vf_mac($p1, arg1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i8 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3365} $i6 := be_get_vf_config($p4, arg1, $p5);
    $r := $i6;
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 936262);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.25, $M.21, $CurrAddr, assertsPassed, $M.26;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(be_set_msg_level, $p0);
    assume {:branchcond $i4} true;
    goto $bb7, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(be_set_msg_level, $p0);
    assume {:branchcond $i3} true;
    goto $bb6, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb6:
    assume $i3 == 1;
    goto $bb3;

  $bb3:
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3367} be_set_msg_level($p2, arg1);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    return;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i4 == 1;
    goto $bb3;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 937294);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 938326);

procedure devirtbounce.13(funcPtr: ref, arg: i64, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: i64, arg1: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 939358);

procedure devirtbounce.14(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 940390);

procedure devirtbounce.15(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, $M.29, $M.26, $M.41, $M.42, $M.25, $M.2, $M.1, $CurrAddr, $M.38, assertsPassed, $M.47, $M.46, $M.48, $M.40, $M.34, $M.35, $M.3, $M.60, $M.61, $M.62, $M.30, $M.31;



implementation devirtbounce.15(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i22 := $eq.ref(be_worker, $p0);
    assume true;
    goto $bb31, $bb29;

  $bb29:
    assume !($i22 == 1);
    $i21 := $eq.ref(be_func_recovery_task, $p0);
    assume true;
    goto $bb30, $bb27;

  $bb27:
    assume !($i21 == 1);
    $i20 := $eq.ref(be_eeh_resume, $p0);
    assume true;
    goto $bb28, $bb25;

  $bb25:
    assume !($i20 == 1);
    $i19 := $eq.ref(be_remove, $p0);
    assume true;
    goto $bb26, $bb23;

  $bb23:
    assume !($i19 == 1);
    $i18 := $eq.ref(be_worker, $p0);
    assume true;
    goto $bb24, $bb21;

  $bb21:
    assume !($i18 == 1);
    $i17 := $eq.ref(be_func_recovery_task, $p0);
    assume true;
    goto $bb22, $bb19;

  $bb19:
    assume !($i17 == 1);
    $i16 := $eq.ref(be_eeh_resume, $p0);
    assume true;
    goto $bb20, $bb17;

  $bb17:
    assume !($i16 == 1);
    $i15 := $eq.ref(be_remove, $p0);
    assume true;
    goto $bb18, $bb16;

  $bb16:
    assume !($i15 == 1);
    $i14 := $eq.ref(be_set_rx_mode, $p0);
    assume true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i14 == 1);
    $i13 := $eq.ref(be_netpoll, $p0);
    assume true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i13 == 1);
    $i12 := $eq.ref(be_shutdown, $p0);
    assume true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i12 == 1);
    assume false;
    return;

  $bb2:
    assume $i12 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3368} be_shutdown($p1);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    return;

  SeqInstr_580:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i13 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3369} be_netpoll($p2);
    return;

  $bb4:
    assume $i14 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3370} be_set_rx_mode($p3);
    return;

  $bb18:
    assume $i15 == 1;
    goto $bb9;

  $bb9:
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3375} be_remove($p8);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    return;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i16 == 1;
    goto $bb10;

  $bb10:
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3376} be_eeh_resume($p9);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    return;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i17 == 1;
    goto $bb11;

  $bb11:
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3377} be_func_recovery_task($p10);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    return;

  SeqInstr_598:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i18 == 1;
    goto $bb12;

  $bb12:
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3378} be_worker($p11);
    return;

  $bb26:
    assume $i19 == 1;
    goto $bb9;

  $bb28:
    assume $i20 == 1;
    goto $bb10;

  $bb30:
    assume $i21 == 1;
    goto $bb11;

  $bb31:
    assume $i22 == 1;
    goto $bb12;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 941422);

procedure devirtbounce.16(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 942454);

procedure devirtbounce.17(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.17(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i32;

const $u1: ref;

const $u2: ref;

const $u3: ref;

const $u4: ref;

const $u5: i16;

const $u6: i8;

const $u7: ref;

const $u8: ref;

const $u9: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.67, $M.0, $M.51, $M.69, $M.70, $M.43, $M.44, $M.45, $M.39, $M.71, $M.28, $M.27, $M.33, $M.66, $M.25, $M.65, $M.38, $M.36, $M.79, $M.80, $M.81, $M.82, $M.83, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 3379} __SMACK_static_init();
    call {:si_unique_call 3380} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.0, $M.24, $M.29, $M.41, $M.21, $M.42, $M.54, $M.53, $M.35, $M.67, $M.51, $M.69, $M.70, $M.43, $M.44, $M.45, $M.39, $M.71, $M.28, $M.27, $M.33, $M.66, $M.25, $M.65, $M.38, $M.36, $M.79, $M.80, $M.81, $M.82, $M.83, $CurrAddr, $M.30, $M.31, $M.49, $M.26, $M.2, $M.1, $M.34, $M.23, $M.47, $M.46, $M.48, $M.40, $M.3, $M.60, $M.61, $M.62;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation be_get_stat_strings_loop_$bb31(in_$p23: ref, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$p26: ref, in_$i27: i32, in_$i41: i64, in_$p42: ref, in_$i44: i64, in_$p45: ref, in_$i47: i64, in_$p48: ref, in_$i50: i64, in_$p51: ref, in_$i53: i64, in_$p54: ref, in_vslice_dummy_var_390: i32, in_vslice_dummy_var_391: i32, in_vslice_dummy_var_392: i32, in_vslice_dummy_var_393: i32, in_vslice_dummy_var_394: i32, in_vslice_dummy_var_395: i32) returns (out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$p26: ref, out_$i27: i32, out_$i41: i64, out_$p42: ref, out_$i44: i64, out_$p45: ref, out_$i47: i64, out_$p48: ref, out_$i50: i64, out_$p51: ref, out_$i53: i64, out_$p54: ref, out_vslice_dummy_var_390: i32, out_vslice_dummy_var_391: i32, out_vslice_dummy_var_392: i32, out_vslice_dummy_var_393: i32, out_vslice_dummy_var_394: i32, out_vslice_dummy_var_395: i32)
{

  entry:
    out_$p29, out_$i30, out_$i31, out_$i32, out_$p26, out_$i27, out_$i41, out_$p42, out_$i44, out_$p45, out_$i47, out_$p48, out_$i50, out_$p51, out_$i53, out_$p54, out_vslice_dummy_var_390, out_vslice_dummy_var_391, out_vslice_dummy_var_392, out_vslice_dummy_var_393, out_vslice_dummy_var_394, out_vslice_dummy_var_395 := in_$p29, in_$i30, in_$i31, in_$i32, in_$p26, in_$i27, in_$i41, in_$p42, in_$i44, in_$p45, in_$i47, in_$p48, in_$i50, in_$p51, in_$i53, in_$p54, in_vslice_dummy_var_390, in_vslice_dummy_var_391, in_vslice_dummy_var_392, in_vslice_dummy_var_393, in_vslice_dummy_var_394, in_vslice_dummy_var_395;
    goto $bb31, exit;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_311;

  $bb37:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$p26, out_$i27 := out_$p54, out_$i30;
    goto $bb37_dummy;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    out_$i32 := $ult.i32(out_$i30, out_$i31);
    goto corral_source_split_321;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, in_$p23);
    goto corral_source_split_320;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i27, 1);
    call {:si_unique_call 49} {:cexpr "i"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_319;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(out_$p26, $mul.ref(out_$i53, 1));
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} out_vslice_dummy_var_395 := sprintf.ref.ref.i32.ref(out_$p51, .str.184, out_$i27, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    out_$i53 := $add.i64(out_$i50, 32);
    goto corral_source_split_370;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p26, $mul.ref(out_$i50, 1));
    goto corral_source_split_368;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} out_vslice_dummy_var_394 := sprintf.ref.ref.i32.ref(out_$p48, .str.184, out_$i27, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    out_$i50 := $add.i64(out_$i47, 32);
    goto corral_source_split_367;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref(out_$p26, $mul.ref(out_$i47, 1));
    goto corral_source_split_365;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} out_vslice_dummy_var_393 := sprintf.ref.ref.i32.ref(out_$p45, .str.184, out_$i27, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    out_$i47 := $add.i64(out_$i44, 32);
    goto corral_source_split_364;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(out_$p26, $mul.ref(out_$i44, 1));
    goto corral_source_split_362;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} out_vslice_dummy_var_392 := sprintf.ref.ref.i32.ref(out_$p42, .str.184, out_$i27, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    out_$i44 := $add.i64(out_$i41, 32);
    goto corral_source_split_361;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref(out_$p26, $mul.ref(out_$i41, 1));
    goto corral_source_split_317;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} out_vslice_dummy_var_391 := sprintf.ref.ref.i32.ref(out_$p29, .str.184, out_$i27, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    out_$i41 := $add.i64(32, 32);
    goto corral_source_split_316;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref(out_$p26, $mul.ref(32, 1));
    goto corral_source_split_314;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} out_vslice_dummy_var_390 := sprintf.ref.ref.i32.ref(out_$p26, .str.184, out_$i27, et_tx_stats);
    goto corral_source_split_313;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb37_dummy:
    call {:si_unique_call 1} out_$p29, out_$i30, out_$i31, out_$i32, out_$p26, out_$i27, out_$i41, out_$p42, out_$i44, out_$p45, out_$i47, out_$p48, out_$i50, out_$p51, out_$i53, out_$p54, out_vslice_dummy_var_390, out_vslice_dummy_var_391, out_vslice_dummy_var_392, out_vslice_dummy_var_393, out_vslice_dummy_var_394, out_vslice_dummy_var_395 := be_get_stat_strings_loop_$bb31(in_$p23, out_$p29, out_$i30, out_$i31, out_$i32, out_$p26, out_$i27, out_$i41, out_$p42, out_$i44, out_$p45, out_$i47, out_$p48, out_$i50, out_$p51, out_$i53, out_$p54, out_vslice_dummy_var_390, out_vslice_dummy_var_391, out_vslice_dummy_var_392, out_vslice_dummy_var_393, out_vslice_dummy_var_394, out_vslice_dummy_var_395);
    return;

  exit:
    return;
}



procedure be_get_stat_strings_loop_$bb31(in_$p23: ref, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$p26: ref, in_$i27: i32, in_$i41: i64, in_$p42: ref, in_$i44: i64, in_$p45: ref, in_$i47: i64, in_$p48: ref, in_$i50: i64, in_$p51: ref, in_$i53: i64, in_$p54: ref, in_vslice_dummy_var_390: i32, in_vslice_dummy_var_391: i32, in_vslice_dummy_var_392: i32, in_vslice_dummy_var_393: i32, in_vslice_dummy_var_394: i32, in_vslice_dummy_var_395: i32) returns (out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$p26: ref, out_$i27: i32, out_$i41: i64, out_$p42: ref, out_$i44: i64, out_$p45: ref, out_$i47: i64, out_$p48: ref, out_$i50: i64, out_$p51: ref, out_$i53: i64, out_$p54: ref, out_vslice_dummy_var_390: i32, out_vslice_dummy_var_391: i32, out_vslice_dummy_var_392: i32, out_vslice_dummy_var_393: i32, out_vslice_dummy_var_394: i32, out_vslice_dummy_var_395: i32);



implementation be_get_stat_strings_loop_$bb19(in_$p9: ref, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$p14: ref, in_$i15: i32, in_$p21: ref, in_$i56: i64, in_$p57: ref, in_$i59: i64, in_$p60: ref, in_$i62: i64, in_$p63: ref, in_$i65: i64, in_$p66: ref, in_$i68: i64, in_$p69: ref, in_$i71: i64, in_$p22: ref, in_vslice_dummy_var_388: i32, in_vslice_dummy_var_389: i32, in_vslice_dummy_var_396: i32, in_vslice_dummy_var_397: i32, in_vslice_dummy_var_398: i32, in_vslice_dummy_var_399: i32, in_vslice_dummy_var_400: i32) returns (out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$p14: ref, out_$i15: i32, out_$p21: ref, out_$i56: i64, out_$p57: ref, out_$i59: i64, out_$p60: ref, out_$i62: i64, out_$p63: ref, out_$i65: i64, out_$p66: ref, out_$i68: i64, out_$p69: ref, out_$i71: i64, out_$p22: ref, out_vslice_dummy_var_388: i32, out_vslice_dummy_var_389: i32, out_vslice_dummy_var_396: i32, out_vslice_dummy_var_397: i32, out_vslice_dummy_var_398: i32, out_vslice_dummy_var_399: i32, out_vslice_dummy_var_400: i32)
{

  entry:
    out_$p17, out_$i18, out_$i19, out_$i20, out_$p14, out_$i15, out_$p21, out_$i56, out_$p57, out_$i59, out_$p60, out_$i62, out_$p63, out_$i65, out_$p66, out_$i68, out_$p69, out_$i71, out_$p22, out_vslice_dummy_var_388, out_vslice_dummy_var_389, out_vslice_dummy_var_396, out_vslice_dummy_var_397, out_vslice_dummy_var_398, out_vslice_dummy_var_399, out_vslice_dummy_var_400 := in_$p17, in_$i18, in_$i19, in_$i20, in_$p14, in_$i15, in_$p21, in_$i56, in_$p57, in_$i59, in_$p60, in_$i62, in_$p63, in_$i65, in_$p66, in_$i68, in_$p69, in_$i71, in_$p22, in_vslice_dummy_var_388, in_vslice_dummy_var_389, in_vslice_dummy_var_396, in_vslice_dummy_var_397, in_vslice_dummy_var_398, in_vslice_dummy_var_399, in_vslice_dummy_var_400;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_291;

  $bb25:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$p14, out_$i15 := out_$p22, out_$i18;
    goto $bb25_dummy;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    out_$p21 := out_$p22;
    assume true;
    goto $bb25;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    out_$i20 := $ult.i32(out_$i18, out_$i19);
    goto corral_source_split_301;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, in_$p9);
    goto corral_source_split_300;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i15, 1);
    call {:si_unique_call 46} {:cexpr "i"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_299;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(out_$p14, $mul.ref(out_$i71, 1));
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} out_vslice_dummy_var_400 := sprintf.ref.ref.i32.ref(out_$p69, .str.183, out_$i15, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    out_$i71 := $add.i64(out_$i68, 32);
    goto corral_source_split_384;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref(out_$p14, $mul.ref(out_$i68, 1));
    goto corral_source_split_382;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} out_vslice_dummy_var_399 := sprintf.ref.ref.i32.ref(out_$p66, .str.183, out_$i15, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    out_$i68 := $add.i64(out_$i65, 32);
    goto corral_source_split_381;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref(out_$p14, $mul.ref(out_$i65, 1));
    goto corral_source_split_379;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} out_vslice_dummy_var_398 := sprintf.ref.ref.i32.ref(out_$p63, .str.183, out_$i15, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    out_$i65 := $add.i64(out_$i62, 32);
    goto corral_source_split_378;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref(out_$p14, $mul.ref(out_$i62, 1));
    goto corral_source_split_376;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} out_vslice_dummy_var_397 := sprintf.ref.ref.i32.ref(out_$p60, .str.183, out_$i15, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    out_$i62 := $add.i64(out_$i59, 32);
    goto corral_source_split_375;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref(out_$p14, $mul.ref(out_$i59, 1));
    goto corral_source_split_373;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} out_vslice_dummy_var_396 := sprintf.ref.ref.i32.ref(out_$p57, .str.183, out_$i15, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    out_$i59 := $add.i64(out_$i56, 32);
    goto corral_source_split_372;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref(out_$p14, $mul.ref(out_$i56, 1));
    goto corral_source_split_297;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} out_vslice_dummy_var_389 := sprintf.ref.ref.i32.ref(out_$p17, .str.183, out_$i15, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    out_$i56 := $add.i64(32, 32);
    goto corral_source_split_296;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(out_$p14, $mul.ref(32, 1));
    goto corral_source_split_294;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} out_vslice_dummy_var_388 := sprintf.ref.ref.i32.ref(out_$p14, .str.183, out_$i15, et_rx_stats);
    goto corral_source_split_293;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p17, out_$i18, out_$i19, out_$i20, out_$p14, out_$i15, out_$p21, out_$i56, out_$p57, out_$i59, out_$p60, out_$i62, out_$p63, out_$i65, out_$p66, out_$i68, out_$p69, out_$i71, out_$p22, out_vslice_dummy_var_388, out_vslice_dummy_var_389, out_vslice_dummy_var_396, out_vslice_dummy_var_397, out_vslice_dummy_var_398, out_vslice_dummy_var_399, out_vslice_dummy_var_400 := be_get_stat_strings_loop_$bb19(in_$p9, out_$p17, out_$i18, out_$i19, out_$i20, out_$p14, out_$i15, out_$p21, out_$i56, out_$p57, out_$i59, out_$p60, out_$i62, out_$p63, out_$i65, out_$p66, out_$i68, out_$p69, out_$i71, out_$p22, out_vslice_dummy_var_388, out_vslice_dummy_var_389, out_vslice_dummy_var_396, out_vslice_dummy_var_397, out_vslice_dummy_var_398, out_vslice_dummy_var_399, out_vslice_dummy_var_400);
    return;

  exit:
    return;
}



procedure be_get_stat_strings_loop_$bb19(in_$p9: ref, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$p14: ref, in_$i15: i32, in_$p21: ref, in_$i56: i64, in_$p57: ref, in_$i59: i64, in_$p60: ref, in_$i62: i64, in_$p63: ref, in_$i65: i64, in_$p66: ref, in_$i68: i64, in_$p69: ref, in_$i71: i64, in_$p22: ref, in_vslice_dummy_var_388: i32, in_vslice_dummy_var_389: i32, in_vslice_dummy_var_396: i32, in_vslice_dummy_var_397: i32, in_vslice_dummy_var_398: i32, in_vslice_dummy_var_399: i32, in_vslice_dummy_var_400: i32) returns (out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$p14: ref, out_$i15: i32, out_$p21: ref, out_$i56: i64, out_$p57: ref, out_$i59: i64, out_$p60: ref, out_$i62: i64, out_$p63: ref, out_$i65: i64, out_$p66: ref, out_$i68: i64, out_$p69: ref, out_$i71: i64, out_$p22: ref, out_vslice_dummy_var_388: i32, out_vslice_dummy_var_389: i32, out_vslice_dummy_var_396: i32, out_vslice_dummy_var_397: i32, out_vslice_dummy_var_398: i32, out_vslice_dummy_var_399: i32, out_vslice_dummy_var_400: i32);



implementation arch_local_save_flags_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_save_flags_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_save_flags_loop_$bb3();



implementation MODULO___0_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} MODULO___0_loop_$bb3();
    return;

  exit:
    return;
}



procedure MODULO___0_loop_$bb3();



implementation be_mcc_wait_compl_loop_$bb1(in_$p0: ref, in_$i3: i1, in_$i4: i8, in_$i5: i1, in_$i7: i32, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i16: i32, in_$i17: i1, in_$i2: i32, in_$i18: i32, in_$i19: i32) returns (out_$i3: i1, out_$i4: i8, out_$i5: i1, out_$i7: i32, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i16: i32, out_$i17: i1, out_$i2: i32, out_$i18: i32, out_$i19: i32)
{

  entry:
    out_$i3, out_$i4, out_$i5, out_$i7, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i16, out_$i17, out_$i2, out_$i18, out_$i19 := in_$i3, in_$i4, in_$i5, in_$i7, in_$p9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i16, in_$i17, in_$i2, in_$i18, in_$i19;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1041;

  $bb11:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i2 := out_$i16;
    goto $bb11_dummy;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    out_$i18, out_$i19 := out_$i16, out_$i7;
    assume true;
    goto $bb11;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    out_$i17 := $sle.i32(out_$i16, 119999);
    goto corral_source_split_1064;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i2, 1);
    call {:si_unique_call 250} {:cexpr "i"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_1063;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} __const_udelay(429500);
    goto corral_source_split_1062;

  $bb8:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    out_$i12, out_$i13 := out_$i2, out_$i7;
    assume true;
    goto $bb8;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i10, 0);
    goto corral_source_split_1055;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} out_$i10 := atomic_read(out_$p9);
    call {:si_unique_call 248} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_1054;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} local_bh_enable();
    out_$p9 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1)), $mul.ref(36, 1));
    goto corral_source_split_1053;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} out_$i7 := be_process_mcc(in_$p0);
    call {:si_unique_call 245} {:cexpr "status"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_1052;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} local_bh_disable();
    goto corral_source_split_1051;

  $bb4:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    out_$i5 := $trunc.i8.i1(out_$i4);
    goto corral_source_split_1045;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    out_$i4 := $zext.i1.i8(out_$i3);
    call {:si_unique_call 242} {:cexpr "tmp"} boogie_si_record_i8(out_$i4);
    goto corral_source_split_1044;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} out_$i3 := be_error(in_$p0);
    goto corral_source_split_1043;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4, out_$i5, out_$i7, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i16, out_$i17, out_$i2, out_$i18, out_$i19 := be_mcc_wait_compl_loop_$bb1(in_$p0, out_$i3, out_$i4, out_$i5, out_$i7, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i16, out_$i17, out_$i2, out_$i18, out_$i19);
    return;

  exit:
    return;
}



procedure be_mcc_wait_compl_loop_$bb1(in_$p0: ref, in_$i3: i1, in_$i4: i8, in_$i5: i1, in_$i7: i32, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i16: i32, in_$i17: i1, in_$i2: i32, in_$i18: i32, in_$i19: i32) returns (out_$i3: i1, out_$i4: i8, out_$i5: i1, out_$i7: i32, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i16: i32, out_$i17: i1, out_$i2: i32, out_$i18: i32, out_$i19: i32);
  modifies $M.0, $M.21, $CurrAddr;



implementation be_process_mcc_loop_$bb4(in_$p0: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i8, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i24: i8, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i31: i8, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$p42: ref, in_$i43: i32, in_$i35: i32, in_$i44: i32, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$i48: i32, in_$i49: i32) returns (out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i8, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i24: i8, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i31: i8, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$p42: ref, out_$i43: i32, out_$i35: i32, out_$i44: i32, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$i48: i32, out_$i49: i32)
{

  entry:
    out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p42, out_$i43, out_$i35, out_$i44, out_$p45, out_$i46, out_$i47, out_$p8, out_$i9, out_$i10, out_$i48, out_$i49 := in_$p11, in_$i12, in_$i13, in_$i14, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p26, in_$i27, in_$p28, in_$i29, in_$i30, in_$i31, in_$i32, in_$p33, in_$i34, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$p42, in_$i43, in_$i35, in_$i44, in_$p45, in_$i46, in_$i47, in_$p8, in_$i9, in_$i10, in_$i48, in_$i49;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1086;

  $bb21:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$p8, out_$i9, out_$i10 := out_$p45, out_$i35, out_$i44;
    goto $bb21_dummy;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    out_$i48, out_$i49 := out_$i44, out_$i35;
    assume true;
    goto $bb21;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i64(out_$i46, 0);
    goto corral_source_split_1139;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_1138;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} out_$p45 := be_mcc_compl_get(in_$p0);
    goto corral_source_split_1137;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i10, 1);
    call {:si_unique_call 264} {:cexpr "num"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_1136;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} be_mcc_compl_use(out_$p8);
    goto corral_source_split_1135;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1134;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i35 := out_$i43;
    goto $bb17;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i9;
    goto $bb17;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} be_async_link_state_process(in_$p0, out_$p20);
    goto corral_source_split_1108;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p8);
    goto corral_source_split_1107;

  $bb8:
    assume out_$i19 == 1;
    goto corral_source_split_1106;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    out_$i19 := $trunc.i8.i1(out_$i18);
    goto corral_source_split_1098;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i1.i8(out_$i17);
    call {:si_unique_call 255} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i18);
    goto corral_source_split_1097;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} out_$i17 := is_link_state_evt(out_$i16);
    goto corral_source_split_1096;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, out_$p15);
    goto corral_source_split_1095;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1094;

  $bb6:
    assume out_$i14 == 1;
    goto corral_source_split_1093;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_1091;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    out_$i13 := $and.i32(out_$i12, 1073741824);
    goto corral_source_split_1090;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.0, out_$p11);
    goto corral_source_split_1089;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1088;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} be_async_grp5_evt_process(in_$p0, out_$i27, out_$p8);
    goto corral_source_split_1120;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_1119;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1118;

  $bb11:
    assume out_$i25 == 1;
    goto corral_source_split_1117;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    out_$i25 := $trunc.i8.i1(out_$i24);
    goto corral_source_split_1115;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i1.i8(out_$i23);
    call {:si_unique_call 258} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i24);
    goto corral_source_split_1114;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} out_$i23 := is_grp5_evt(out_$i22);
    goto corral_source_split_1113;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.0, out_$p21);
    goto corral_source_split_1112;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1111;

  $bb9:
    assume !(out_$i19 == 1);
    goto corral_source_split_1110;

  $bb15:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} be_async_dbg_evt_process(in_$p0, out_$i34, out_$p8);
    goto corral_source_split_1132;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.0, out_$p33);
    goto corral_source_split_1131;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1130;

  $bb14:
    assume out_$i32 == 1;
    goto corral_source_split_1129;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    out_$i32 := $trunc.i8.i1(out_$i31);
    goto corral_source_split_1127;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i1.i8(out_$i30);
    call {:si_unique_call 261} {:cexpr "tmp"} boogie_si_record_i8(out_$i31);
    goto corral_source_split_1126;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} out_$i30 := is_dbg_evt(out_$i29);
    goto corral_source_split_1125;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.0, out_$p28);
    goto corral_source_split_1124;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1123;

  $bb12:
    assume !(out_$i25 == 1);
    goto corral_source_split_1122;

  $bb19:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i43 := out_$i9;
    goto $bb20;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i40;
    goto $bb20;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} atomic_dec(out_$p42);
    goto corral_source_split_1143;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} out_$i40 := be_mcc_compl_process(in_$p0, out_$p8);
    call {:si_unique_call 267} {:cexpr "status"} boogie_si_record_i32(out_$i40);
    out_$p42 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1)), $mul.ref(36, 1));
    goto corral_source_split_1142;

  $bb18:
    assume out_$i39 == 1;
    goto corral_source_split_1141;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i32(out_$i38, 0);
    goto corral_source_split_1104;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    out_$i38 := $and.i32(out_$i37, 268435456);
    goto corral_source_split_1103;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, out_$p36);
    goto corral_source_split_1102;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1101;

  $bb7:
    assume !(out_$i14 == 1);
    goto corral_source_split_1100;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p42, out_$i43, out_$i35, out_$i44, out_$p45, out_$i46, out_$i47, out_$p8, out_$i9, out_$i10, out_$i48, out_$i49 := be_process_mcc_loop_$bb4(in_$p0, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p42, out_$i43, out_$i35, out_$i44, out_$p45, out_$i46, out_$i47, out_$p8, out_$i9, out_$i10, out_$i48, out_$i49);
    return;

  exit:
    return;
}



procedure be_process_mcc_loop_$bb4(in_$p0: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i8, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i24: i8, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i31: i8, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$p42: ref, in_$i43: i32, in_$i35: i32, in_$i44: i32, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$i48: i32, in_$i49: i32) returns (out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i8, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i24: i8, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i31: i8, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$p42: ref, out_$i43: i32, out_$i35: i32, out_$i44: i32, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$i48: i32, out_$i49: i32);
  modifies $M.0, $M.21, $CurrAddr;



implementation be_parse_stats_loop_$bb16(in_$p0: ref, in_$p2: ref, in_$p31: ref, in_$p37: ref, in_$i38: i16, in_$i39: i32, in_$i40: i64, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i34: i32, in_$p35: ref) returns (out_$p37: ref, out_$i38: i16, out_$i39: i32, out_$i40: i64, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i34: i32, out_$p35: ref)
{

  entry:
    out_$p37, out_$i38, out_$i39, out_$i40, out_$p42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i34, out_$p35 := in_$p37, in_$i38, in_$i39, in_$i40, in_$p42, in_$i43, in_$i44, in_$p45, in_$i46, in_$i47, in_$i34, in_$p35;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1531;

  $bb18:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i34, out_$p35 := out_$i44, out_$p45;
    goto $bb18_dummy;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    out_$i47 := $ult.i32(out_$i44, out_$i46);
    goto corral_source_split_1543;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.0, in_$p31);
    goto corral_source_split_1542;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(out_$p35, $mul.ref(1, 24760));
    goto corral_source_split_1541;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i34, 1);
    call {:si_unique_call 318} {:cexpr "i"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_1540;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} populate_erx_stats(in_$p0, out_$p35, out_$i43);
    goto corral_source_split_1539;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.0, out_$p42);
    call {:si_unique_call 316} {:cexpr "erx_stat"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_1538;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(out_$i40, 4));
    goto corral_source_split_1537;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    out_$i40 := $sext.i32.i64(out_$i39);
    goto corral_source_split_1536;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i16.i32(out_$i38);
    goto corral_source_split_1535;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i16($M.0, out_$p37);
    goto corral_source_split_1534;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(out_$p35, $mul.ref(0, 24760)), $mul.ref(8, 1)), $mul.ref(28, 1));
    goto corral_source_split_1533;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p37, out_$i38, out_$i39, out_$i40, out_$p42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i34, out_$p35 := be_parse_stats_loop_$bb16(in_$p0, in_$p2, in_$p31, out_$p37, out_$i38, out_$i39, out_$i40, out_$p42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i34, out_$p35);
    return;

  exit:
    return;
}



procedure be_parse_stats_loop_$bb16(in_$p0: ref, in_$p2: ref, in_$p31: ref, in_$p37: ref, in_$i38: i16, in_$i39: i32, in_$i40: i64, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i34: i32, in_$p35: ref) returns (out_$p37: ref, out_$i38: i16, out_$i39: i32, out_$i40: i64, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i34: i32, out_$p35: ref);
  modifies $M.0;



implementation be_mbox_db_ready_wait_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i5: i32, in_$i7: i32, in_$i8: i1, in_$i9: i32, in_$i10: i1, in_$i11: i1, in_$i17: i32, in_$i18: i1, in_$i19: i8, in_$i20: i1) returns (out_$i5: i32, out_$i7: i32, out_$i8: i1, out_$i9: i32, out_$i10: i1, out_$i11: i1, out_$i17: i32, out_$i18: i1, out_$i19: i8, out_$i20: i1)
{

  entry:
    out_$i5, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i17, out_$i18, out_$i19, out_$i20 := in_$i5, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i17, in_$i18, in_$i19, in_$i20;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb18:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    out_$i5 := out_$i17;
    goto $bb18_dummy;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    out_$i20 := $trunc.i8.i1(out_$i19);
    goto corral_source_split_3007;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i1.i8(out_$i18);
    call {:si_unique_call 625} {:cexpr "tmp"} boogie_si_record_i8(out_$i19);
    goto corral_source_split_3006;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} out_$i18 := be_error(in_$p0);
    goto corral_source_split_3005;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i5, 1);
    call {:si_unique_call 623} {:cexpr "msecs"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_3004;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} msleep(1);
    goto corral_source_split_3003;

  $bb16:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i11 := $sgt.i32(out_$i5, 4000);
    goto corral_source_split_2992;

  $bb12:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_2988;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i9 := $and.i32(out_$i7, 1);
    call {:si_unique_call 619} {:cexpr "ready"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_2987;

  $bb9:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i7, $sub.i32(0, 1));
    goto corral_source_split_2983;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} out_$i7 := ioread32(in_$p1);
    call {:si_unique_call 618} {:cexpr "ready"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_2982;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i5, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i17, out_$i18, out_$i19, out_$i20 := be_mbox_db_ready_wait_loop_$bb4(in_$p0, in_$p1, out_$i5, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i17, out_$i18, out_$i19, out_$i20);
    return;

  exit:
    return;
}



procedure be_mbox_db_ready_wait_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i5: i32, in_$i7: i32, in_$i8: i1, in_$i9: i32, in_$i10: i1, in_$i11: i1, in_$i17: i32, in_$i18: i1, in_$i19: i8, in_$i20: i1) returns (out_$i5: i32, out_$i7: i32, out_$i8: i1, out_$i9: i32, out_$i10: i1, out_$i11: i1, out_$i17: i32, out_$i18: i1, out_$i19: i8, out_$i20: i1);



implementation be_detect_error_loop_$bb39(in_$p0: ref, in_$p2: ref, in_$i102: i32, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$i108: i64, in_$p109: ref, in_$p110: ref, in_$i112: i32, in_$i113: i32, in_$i114: i32, in_$i115: i32, in_$i116: i1, in_$i101: i32, in_vslice_dummy_var_445: i32) returns (out_$i102: i32, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$i108: i64, out_$p109: ref, out_$p110: ref, out_$i112: i32, out_$i113: i32, out_$i114: i32, out_$i115: i32, out_$i116: i1, out_$i101: i32, out_vslice_dummy_var_445: i32)
{

  entry:
    out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$i108, out_$p109, out_$p110, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i101, out_vslice_dummy_var_445 := in_$i102, in_$i103, in_$i104, in_$p105, in_$p106, in_$p107, in_$i108, in_$p109, in_$p110, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i101, in_vslice_dummy_var_445;
    goto $bb39, exit;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_3145;

  $bb44:
    assume out_$i116 == 1;
    assume {:verifier.code 0} true;
    out_$i101 := out_$i114;
    goto $bb44_dummy;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    out_$i116 := $ne.i32(out_$i115, 0);
    goto corral_source_split_3165;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    out_$i115 := $load.i32($M.26, in_$p2);
    goto corral_source_split_3164;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    out_$i114 := $add.i32(out_$i101, 1);
    call {:si_unique_call 649} {:cexpr "i"} boogie_si_record_i32(out_$i114);
    goto corral_source_split_3163;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, in_$p2, out_$i113);
    goto corral_source_split_3162;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    out_$i113 := $lshr.i32(out_$i112, 1);
    goto corral_source_split_3161;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i32($M.26, in_$p2);
    goto corral_source_split_3160;

  $bb42:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} out_vslice_dummy_var_445 := dev_err.ref.ref.ref(out_$p107, .str.5, out_$p110);
    goto corral_source_split_3158;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    out_$p110 := $load.ref($M.28, out_$p109);
    goto corral_source_split_3157;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(out_$i108, 8));
    goto corral_source_split_3156;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    out_$i108 := $zext.i32.i64(out_$i101);
    goto corral_source_split_3155;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(out_$p106, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3154;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.0, out_$p105);
    goto corral_source_split_3153;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3152;

  $bb41:
    assume out_$i104 == 1;
    goto corral_source_split_3151;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    out_$i104 := $ne.i32(out_$i103, 0);
    goto corral_source_split_3149;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    out_$i103 := $and.i32(out_$i102, 1);
    goto corral_source_split_3148;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i32($M.26, in_$p2);
    goto corral_source_split_3147;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb44_dummy:
    call {:si_unique_call 1} out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$i108, out_$p109, out_$p110, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i101, out_vslice_dummy_var_445 := be_detect_error_loop_$bb39(in_$p0, in_$p2, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$i108, out_$p109, out_$p110, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i101, out_vslice_dummy_var_445);
    return;

  exit:
    return;
}



procedure be_detect_error_loop_$bb39(in_$p0: ref, in_$p2: ref, in_$i102: i32, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$i108: i64, in_$p109: ref, in_$p110: ref, in_$i112: i32, in_$i113: i32, in_$i114: i32, in_$i115: i32, in_$i116: i1, in_$i101: i32, in_vslice_dummy_var_445: i32) returns (out_$i102: i32, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$i108: i64, out_$p109: ref, out_$p110: ref, out_$i112: i32, out_$i113: i32, out_$i114: i32, out_$i115: i32, out_$i116: i1, out_$i101: i32, out_vslice_dummy_var_445: i32);
  modifies $M.26;



implementation be_detect_error_loop_$bb25(in_$p0: ref, in_$p1: ref, in_$i82: i32, in_$i83: i32, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i64, in_$p89: ref, in_$p90: ref, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$i81: i32, in_vslice_dummy_var_444: i32) returns (out_$i82: i32, out_$i83: i32, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i64, out_$p89: ref, out_$p90: ref, out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$i81: i32, out_vslice_dummy_var_444: i32)
{

  entry:
    out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$i88, out_$p89, out_$p90, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i81, out_vslice_dummy_var_444 := in_$i82, in_$i83, in_$i84, in_$p85, in_$p86, in_$p87, in_$i88, in_$p89, in_$p90, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i81, in_vslice_dummy_var_444;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_3112;

  $bb30:
    assume out_$i96 == 1;
    assume {:verifier.code 0} true;
    out_$i81 := out_$i94;
    goto $bb30_dummy;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    out_$i96 := $ne.i32(out_$i95, 0);
    goto corral_source_split_3132;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    out_$i95 := $load.i32($M.26, in_$p1);
    goto corral_source_split_3131;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i32(out_$i81, 1);
    call {:si_unique_call 647} {:cexpr "i"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_3130;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, in_$p1, out_$i93);
    goto corral_source_split_3129;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    out_$i93 := $lshr.i32(out_$i92, 1);
    goto corral_source_split_3128;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i32($M.26, in_$p1);
    goto corral_source_split_3127;

  $bb28:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} out_vslice_dummy_var_444 := dev_err.ref.ref.ref(out_$p87, .str.5, out_$p90);
    goto corral_source_split_3125;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    out_$p90 := $load.ref($M.27, out_$p89);
    goto corral_source_split_3124;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(out_$i88, 8));
    goto corral_source_split_3123;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i32.i64(out_$i81);
    goto corral_source_split_3122;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p86, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3121;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.0, out_$p85);
    goto corral_source_split_3120;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3119;

  $bb27:
    assume out_$i84 == 1;
    goto corral_source_split_3118;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i32(out_$i83, 0);
    goto corral_source_split_3116;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    out_$i83 := $and.i32(out_$i82, 1);
    goto corral_source_split_3115;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i32($M.26, in_$p1);
    goto corral_source_split_3114;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb30_dummy:
    call {:si_unique_call 1} out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$i88, out_$p89, out_$p90, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i81, out_vslice_dummy_var_444 := be_detect_error_loop_$bb25(in_$p0, in_$p1, out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$i88, out_$p89, out_$p90, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i81, out_vslice_dummy_var_444);
    return;

  exit:
    return;
}



procedure be_detect_error_loop_$bb25(in_$p0: ref, in_$p1: ref, in_$i82: i32, in_$i83: i32, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i64, in_$p89: ref, in_$p90: ref, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$i81: i32, in_vslice_dummy_var_444: i32) returns (out_$i82: i32, out_$i83: i32, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i64, out_$p89: ref, out_$p90: ref, out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$i81: i32, out_vslice_dummy_var_444: i32);
  modifies $M.26;



implementation be_open_loop_$bb27(in_$p3: ref, in_$p48: ref, in_$p53: ref, in_$p55: ref, in_$i56: i16, in_$i57: i32, in_$i58: i16, in_$i59: i32, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$i51: i32, in_$p52: ref) returns (out_$p53: ref, out_$p55: ref, out_$i56: i16, out_$i57: i32, out_$i58: i16, out_$i59: i32, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$i51: i32, out_$p52: ref)
{

  entry:
    out_$p53, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i51, out_$p52 := in_$p53, in_$p55, in_$i56, in_$i57, in_$i58, in_$i59, in_$p60, in_$i61, in_$i62, in_$i51, in_$p52;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3605;

  $bb29:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i51, out_$p52 := out_$i59, out_$p60;
    goto $bb29_dummy;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    out_$i62 := $ult.i32(out_$i59, out_$i61);
    goto corral_source_split_3617;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, in_$p48);
    goto corral_source_split_3616;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref(out_$p52, $mul.ref(1, 272));
    goto corral_source_split_3615;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i32(out_$i51, 1);
    call {:si_unique_call 751} {:cexpr "i"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_3614;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} be_eq_notify(in_$p3, out_$i58, 1, 0, 0);
    goto corral_source_split_3613;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    out_$i58 := $trunc.i32.i16(out_$i57);
    goto corral_source_split_3612;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i16.i32(out_$i56);
    goto corral_source_split_3611;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i16($M.0, out_$p55);
    goto corral_source_split_3610;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($add.ref(out_$p52, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(28, 1));
    goto corral_source_split_3609;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} napi_enable(out_$p53);
    goto corral_source_split_3608;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p52, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_3607;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb29_dummy:
    call {:si_unique_call 1} out_$p53, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i51, out_$p52 := be_open_loop_$bb27(in_$p3, in_$p48, out_$p53, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i51, out_$p52);
    return;

  exit:
    return;
}



procedure be_open_loop_$bb27(in_$p3: ref, in_$p48: ref, in_$p53: ref, in_$p55: ref, in_$i56: i16, in_$i57: i32, in_$i58: i16, in_$i59: i32, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$i51: i32, in_$p52: ref) returns (out_$p53: ref, out_$p55: ref, out_$i56: i16, out_$i57: i32, out_$i58: i16, out_$i59: i32, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$i51: i32, out_$p52: ref);
  modifies $M.0;



implementation be_open_loop_$bb19(in_$p3: ref, in_$p30: ref, in_$p36: ref, in_$i37: i16, in_$i38: i32, in_$i39: i16, in_$i40: i32, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$i33: i32, in_$p34: ref) returns (out_$p36: ref, out_$i37: i16, out_$i38: i32, out_$i39: i16, out_$i40: i32, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$i33: i32, out_$p34: ref)
{

  entry:
    out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i33, out_$p34 := in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$p41, in_$i42, in_$i43, in_$i33, in_$p34;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3580;

  $bb21:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$i33, out_$p34 := out_$i40, out_$p41;
    goto $bb21_dummy;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    out_$i43 := $ult.i32(out_$i40, out_$i42);
    goto corral_source_split_3590;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.0, in_$p30);
    goto corral_source_split_3589;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref(out_$p34, $mul.ref(1, 16528));
    goto corral_source_split_3588;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i33, 1);
    call {:si_unique_call 747} {:cexpr "i"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_3587;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} be_cq_notify(in_$p3, out_$i39, 1, 0);
    goto corral_source_split_3586;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i32.i16(out_$i38);
    goto corral_source_split_3585;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i16.i32(out_$i37);
    goto corral_source_split_3584;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i16($M.0, out_$p36);
    goto corral_source_split_3583;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(out_$p34, $mul.ref(0, 16528)), $mul.ref(48, 1)), $mul.ref(28, 1));
    goto corral_source_split_3582;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i33, out_$p34 := be_open_loop_$bb19(in_$p3, in_$p30, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i33, out_$p34);
    return;

  exit:
    return;
}



procedure be_open_loop_$bb19(in_$p3: ref, in_$p30: ref, in_$p36: ref, in_$i37: i16, in_$i38: i32, in_$i39: i16, in_$i40: i32, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$i33: i32, in_$p34: ref) returns (out_$p36: ref, out_$i37: i16, out_$i38: i32, out_$i39: i16, out_$i40: i32, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$i33: i32, out_$p34: ref);



implementation be_open_loop_$bb11(in_$p3: ref, in_$p12: ref, in_$p18: ref, in_$i19: i16, in_$i20: i32, in_$i21: i16, in_$i22: i32, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$i15: i32, in_$p16: ref) returns (out_$p18: ref, out_$i19: i16, out_$i20: i32, out_$i21: i16, out_$i22: i32, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$i15: i32, out_$p16: ref)
{

  entry:
    out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i15, out_$p16 := in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$p23, in_$i24, in_$i25, in_$i15, in_$p16;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3556;

  $bb13:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i15, out_$p16 := out_$i22, out_$p23;
    goto $bb13_dummy;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    out_$i25 := $ult.i32(out_$i22, out_$i24);
    goto corral_source_split_3566;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, in_$p12);
    goto corral_source_split_3565;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p16, $mul.ref(1, 24760));
    goto corral_source_split_3564;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i15, 1);
    call {:si_unique_call 745} {:cexpr "i"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_3563;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} be_cq_notify(in_$p3, out_$i21, 1, 0);
    goto corral_source_split_3562;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    out_$i21 := $trunc.i32.i16(out_$i20);
    goto corral_source_split_3561;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i16.i32(out_$i19);
    goto corral_source_split_3560;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i16($M.0, out_$p18);
    goto corral_source_split_3559;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 24760)), $mul.ref(48, 1)), $mul.ref(28, 1));
    goto corral_source_split_3558;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i15, out_$p16 := be_open_loop_$bb11(in_$p3, in_$p12, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i15, out_$p16);
    return;

  exit:
    return;
}



procedure be_open_loop_$bb11(in_$p3: ref, in_$p12: ref, in_$p18: ref, in_$i19: i16, in_$i20: i32, in_$i21: i16, in_$i22: i32, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$i15: i32, in_$p16: ref) returns (out_$p18: ref, out_$i19: i16, out_$i20: i32, out_$i21: i16, out_$i22: i32, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$i15: i32, out_$p16: ref);



implementation be_rx_qs_create_loop_$bb63(in_$p144: ref, in_$i149: i32, in_$p150: ref, in_$i151: i32, in_$i152: i1, in_$p147: ref, in_$i148: i32) returns (out_$i149: i32, out_$p150: ref, out_$i151: i32, out_$i152: i1, out_$p147: ref, out_$i148: i32)
{

  entry:
    out_$i149, out_$p150, out_$i151, out_$i152, out_$p147, out_$i148 := in_$i149, in_$p150, in_$i151, in_$i152, in_$p147, in_$i148;
    goto $bb63, exit;

  $bb63:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3985;

  $bb65:
    assume out_$i152 == 1;
    assume {:verifier.code 0} true;
    out_$p147, out_$i148 := out_$p150, out_$i149;
    goto $bb65_dummy;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    out_$i152 := $ult.i32(out_$i149, out_$i151);
    goto corral_source_split_3991;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    out_$i151 := $load.i32($M.0, in_$p144);
    goto corral_source_split_3990;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    out_$p150 := $add.ref(out_$p147, $mul.ref(1, 24760));
    goto corral_source_split_3989;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    out_$i149 := $add.i32(out_$i148, 1);
    call {:si_unique_call 827} {:cexpr "i"} boogie_si_record_i32(out_$i149);
    goto corral_source_split_3988;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} be_post_rx_frags(out_$p147, 208);
    goto corral_source_split_3987;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb65_dummy:
    call {:si_unique_call 1} out_$i149, out_$p150, out_$i151, out_$i152, out_$p147, out_$i148 := be_rx_qs_create_loop_$bb63(in_$p144, out_$i149, out_$p150, out_$i151, out_$i152, out_$p147, out_$i148);
    return;

  exit:
    return;
}



procedure be_rx_qs_create_loop_$bb63(in_$p144: ref, in_$i149: i32, in_$p150: ref, in_$i151: i32, in_$i152: i1, in_$p147: ref, in_$i148: i32) returns (out_$i149: i32, out_$p150: ref, out_$i151: i32, out_$i152: i1, out_$p147: ref, out_$i148: i32);
  modifies $M.0, $M.21, $CurrAddr;



implementation be_rx_qs_create_loop_$bb34(in_$p1: ref, in_$p79: ref, in_$i86: i32, in_$i87: i1, in_$p89: ref, in_$i90: i8, in_$i91: i32, in_$i92: i64, in_$p93: ref, in_$i94: i32, in_$p95: ref, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$p84: ref, in_$i85: i32, in_$i74: i32) returns (out_$i86: i32, out_$i87: i1, out_$p89: ref, out_$i90: i8, out_$i91: i32, out_$i92: i64, out_$p93: ref, out_$i94: i32, out_$p95: ref, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$p84: ref, out_$i85: i32)
{

  entry:
    out_$i86, out_$i87, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p84, out_$i85 := in_$i86, in_$i87, in_$p89, in_$i90, in_$i91, in_$i92, in_$p93, in_$i94, in_$p95, in_$i96, in_$i97, in_$i98, in_$p84, in_$i85;
    goto $bb34, exit;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3896;

  $bb40:
    assume out_$i98 == 1;
    assume {:verifier.code 0} true;
    out_$p84, out_$i85 := out_$p95, out_$i94;
    goto $bb40_dummy;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    out_$i98 := $ult.i32(out_$i94, out_$i97);
    goto corral_source_split_3920;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    out_$i97 := $sub.i32(out_$i96, 1);
    goto corral_source_split_3919;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i32($M.0, in_$p79);
    goto corral_source_split_3918;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref(out_$p84, $mul.ref(1, 24760));
    goto corral_source_split_3917;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i32(out_$i85, 1);
    call {:si_unique_call 823} {:cexpr "i"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_3916;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p93, out_$i90);
    goto corral_source_split_3915;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(in_$p1, $mul.ref(0, 128)), $mul.ref(out_$i92, 1));
    goto corral_source_split_3914;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    out_$i92 := $sext.i32.i64(out_$i91);
    goto corral_source_split_3913;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    out_$i91 := $add.i32(in_$i74, out_$i85);
    goto corral_source_split_3912;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i8($M.0, out_$p89);
    goto corral_source_split_3911;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p84, $mul.ref(0, 24760)), $mul.ref(24752, 1));
    goto corral_source_split_3910;

  $bb37:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    out_$i87 := $sgt.i32(out_$i86, 127);
    goto corral_source_split_3899;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i32(in_$i74, out_$i85);
    goto corral_source_split_3898;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb40_dummy:
    call {:si_unique_call 1} out_$i86, out_$i87, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p84, out_$i85 := be_rx_qs_create_loop_$bb34(in_$p1, in_$p79, out_$i86, out_$i87, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p84, out_$i85, in_$i74);
    return;

  exit:
    return;
}



procedure be_rx_qs_create_loop_$bb34(in_$p1: ref, in_$p79: ref, in_$i86: i32, in_$i87: i1, in_$p89: ref, in_$i90: i8, in_$i91: i32, in_$i92: i64, in_$p93: ref, in_$i94: i32, in_$p95: ref, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$p84: ref, in_$i85: i32, in_$i74: i32) returns (out_$i86: i32, out_$i87: i1, out_$p89: ref, out_$i90: i8, out_$i91: i32, out_$i92: i64, out_$p93: ref, out_$i94: i32, out_$p95: ref, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$p84: ref, out_$i85: i32);
  modifies $M.0;



implementation be_rx_qs_create_loop_$bb29(in_$p0: ref, in_$p1: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$p78: ref, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$i82: i1, in_$i86: i32, in_$i87: i1, in_$p89: ref, in_$i90: i8, in_$i91: i32, in_$i92: i64, in_$p93: ref, in_$i94: i32, in_$p95: ref, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$p84: ref, in_$i85: i32, in_$i83: i32, in_$i88: i32, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i74: i32) returns (out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$p78: ref, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$i82: i1, out_$i86: i32, out_$i87: i1, out_$p89: ref, out_$i90: i8, out_$i91: i32, out_$i92: i64, out_$p93: ref, out_$i94: i32, out_$p95: ref, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$p84: ref, out_$i85: i32, out_$i83: i32, out_$i88: i32, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i74: i32)
{

  entry:
    out_$p75, out_$p76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i86, out_$i87, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p84, out_$i85, out_$i83, out_$i88, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i74 := in_$p75, in_$p76, in_$i77, in_$p78, in_$p79, in_$i80, in_$i81, in_$i82, in_$i86, in_$i87, in_$p89, in_$i90, in_$i91, in_$i92, in_$p93, in_$i94, in_$p95, in_$i96, in_$i97, in_$i98, in_$p84, in_$i85, in_$i83, in_$i88, in_$p99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i74;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_3883;

  $bb43:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$i74 := out_$i102;
    goto $bb43_dummy;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    out_$i103 := $sle.i32(out_$i102, 127);
    goto corral_source_split_3908;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    out_$i102 := $sub.i32(out_$i101, 1);
    call {:si_unique_call 822} {:cexpr "j"} boogie_si_record_i32(out_$i102);
    goto corral_source_split_3907;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    out_$i101 := $add.i32(out_$i100, out_$i88);
    goto corral_source_split_3906;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i32($M.0, out_$p99);
    goto corral_source_split_3905;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_3904;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_3903;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i88 := out_$i83;
    goto $bb38;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    out_$i88 := out_$i74;
    goto $bb38;

  $bb36:
    assume out_$i87 == 1;
    goto corral_source_split_3901;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    out_$i87 := $sgt.i32(out_$i86, 127);
    goto corral_source_split_3899;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i32(out_$i74, out_$i85);
    goto corral_source_split_3898;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb34:
    call out_$i86, out_$i87, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p84, out_$i85 := be_rx_qs_create_loop_$bb34(in_$p1, out_$p79, out_$i86, out_$i87, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p84, out_$i85, out_$i74);
    goto $bb34_last;

  $bb34_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3896;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    out_$p84, out_$i85 := out_$p78, 0;
    goto $bb34;

  $bb40:
    assume out_$i98 == 1;
    assume {:verifier.code 0} true;
    out_$p84, out_$i85 := out_$p95, out_$i94;
    assume false;
    return;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    out_$i98 := $ult.i32(out_$i94, out_$i97);
    goto corral_source_split_3920;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    out_$i97 := $sub.i32(out_$i96, 1);
    goto corral_source_split_3919;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i32($M.0, out_$p79);
    goto corral_source_split_3918;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref(out_$p84, $mul.ref(1, 24760));
    goto corral_source_split_3917;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i32(out_$i85, 1);
    call {:si_unique_call 823} {:cexpr "i"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_3916;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p93, out_$i90);
    goto corral_source_split_3915;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(in_$p1, $mul.ref(0, 128)), $mul.ref(out_$i92, 1));
    goto corral_source_split_3914;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    out_$i92 := $sext.i32.i64(out_$i91);
    goto corral_source_split_3913;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    out_$i91 := $add.i32(out_$i74, out_$i85);
    goto corral_source_split_3912;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i8($M.0, out_$p89);
    goto corral_source_split_3911;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p84, $mul.ref(0, 24760)), $mul.ref(24752, 1));
    goto corral_source_split_3910;

  $bb37:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb31:
    assume out_$i82 == 1;
    goto corral_source_split_3894;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    out_$i83 := out_$i74;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    out_$i82 := $ult.i32(0, out_$i81);
    goto corral_source_split_3892;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    out_$i81 := $sub.i32(out_$i80, 1);
    goto corral_source_split_3891;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.0, out_$p79);
    goto corral_source_split_3890;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_3889;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref(out_$p76, $mul.ref(out_$i77, 24760));
    goto corral_source_split_3888;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    out_$i77 := $sext.i32.i64(0);
    goto corral_source_split_3887;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    out_$p76 := $bitcast.ref.ref(out_$p75);
    goto corral_source_split_3886;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(136368, 1));
    goto corral_source_split_3885;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i82 == 1);
    goto $bb33;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    out_$i83 := out_$i74;
    goto $bb33;

  $bb41:
    assume !(out_$i98 == 1);
    goto corral_source_split_3922;

  $bb43_dummy:
    call {:si_unique_call 1} out_$p75, out_$p76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i86, out_$i87, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p84, out_$i85, out_$i83, out_$i88, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i74 := be_rx_qs_create_loop_$bb29(in_$p0, in_$p1, out_$p75, out_$p76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i86, out_$i87, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p84, out_$i85, out_$i83, out_$i88, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i74);
    return;

  exit:
    return;
}



procedure be_rx_qs_create_loop_$bb29(in_$p0: ref, in_$p1: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$p78: ref, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$i82: i1, in_$i86: i32, in_$i87: i1, in_$p89: ref, in_$i90: i8, in_$i91: i32, in_$i92: i64, in_$p93: ref, in_$i94: i32, in_$p95: ref, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$p84: ref, in_$i85: i32, in_$i83: i32, in_$i88: i32, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i74: i32) returns (out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$p78: ref, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$i82: i1, out_$i86: i32, out_$i87: i1, out_$p89: ref, out_$i90: i8, out_$i91: i32, out_$i92: i64, out_$p93: ref, out_$i94: i32, out_$p95: ref, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$p84: ref, out_$i85: i32, out_$i83: i32, out_$i88: i32, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i74: i32);
  modifies $M.0;



implementation be_rx_qs_create_loop_$bb19(in_$p0: ref, in_$p45: ref, in_$p51: ref, in_$p53: ref, in_$i54: i16, in_$i55: i32, in_$i56: i16, in_$i57: i16, in_$i58: i32, in_$i59: i16, in_$p60: ref, in_$i61: i32, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i32, in_$p67: ref, in_$i68: i32, in_$i69: i32, in_$i70: i1, in_$p49: ref, in_$i50: i32) returns (out_$p51: ref, out_$p53: ref, out_$i54: i16, out_$i55: i32, out_$i56: i16, out_$i57: i16, out_$i58: i32, out_$i59: i16, out_$p60: ref, out_$i61: i32, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i32, out_$p67: ref, out_$i68: i32, out_$i69: i32, out_$i70: i1, out_$p49: ref, out_$i50: i32)
{

  entry:
    out_$p51, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$p49, out_$i50 := in_$p51, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$p60, in_$i61, in_$p62, in_$i63, in_$i64, in_$i65, in_$i66, in_$p67, in_$i68, in_$i69, in_$i70, in_$p49, in_$i50;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3851;

  $bb24:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$p49, out_$i50 := out_$p67, out_$i66;
    goto $bb24_dummy;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    out_$i70 := $ult.i32(out_$i66, out_$i69);
    goto corral_source_split_3873;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    out_$i69 := $sub.i32(out_$i68, 1);
    goto corral_source_split_3872;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.0, in_$p45);
    goto corral_source_split_3871;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref(out_$p49, $mul.ref(1, 24760));
    goto corral_source_split_3870;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i66 := $add.i32(out_$i50, 1);
    call {:si_unique_call 819} {:cexpr "i"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_3869;

  $bb22:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    out_$i65 := out_$i63;
    assume true;
    goto $bb22;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i32(out_$i63, 0);
    goto corral_source_split_3865;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} out_$i63 := be_cmd_rxq_create(in_$p0, out_$p51, out_$i56, out_$i59, out_$i61, 1, out_$p62);
    call {:si_unique_call 818} {:cexpr "rc"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_3864;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p49, $mul.ref(0, 24760)), $mul.ref(24752, 1));
    goto corral_source_split_3863;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, out_$p60);
    goto corral_source_split_3862;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(363992, 1));
    goto corral_source_split_3861;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    out_$i59 := $trunc.i32.i16(out_$i58);
    goto corral_source_split_3860;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i16.i32(out_$i57);
    goto corral_source_split_3859;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    out_$i57 := $M.33;
    goto corral_source_split_3858;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    out_$i56 := $trunc.i32.i16(out_$i55);
    goto corral_source_split_3857;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i16.i32(out_$i54);
    goto corral_source_split_3856;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i16($M.0, out_$p53);
    goto corral_source_split_3855;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($add.ref(out_$p49, $mul.ref(0, 24760)), $mul.ref(48, 1)), $mul.ref(28, 1));
    goto corral_source_split_3854;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p49, $mul.ref(0, 24760)), $mul.ref(8, 1));
    goto corral_source_split_3853;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p51, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$p49, out_$i50 := be_rx_qs_create_loop_$bb19(in_$p0, in_$p45, out_$p51, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$p49, out_$i50);
    return;

  exit:
    return;
}



procedure be_rx_qs_create_loop_$bb19(in_$p0: ref, in_$p45: ref, in_$p51: ref, in_$p53: ref, in_$i54: i16, in_$i55: i32, in_$i56: i16, in_$i57: i16, in_$i58: i32, in_$i59: i16, in_$p60: ref, in_$i61: i32, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i32, in_$p67: ref, in_$i68: i32, in_$i69: i32, in_$i70: i1, in_$p49: ref, in_$i50: i32) returns (out_$p51: ref, out_$p53: ref, out_$i54: i16, out_$i55: i32, out_$i56: i16, out_$i57: i16, out_$i58: i32, out_$i59: i16, out_$p60: ref, out_$i61: i32, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i32, out_$p67: ref, out_$i68: i32, out_$i69: i32, out_$i70: i1, out_$p49: ref, out_$i50: i32);
  modifies $M.0, $M.21, $CurrAddr;



implementation be_rx_qs_create_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$i14: i32, in_$i16: i32, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p9: ref, in_$i10: i32) returns (out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$i14: i32, out_$i16: i32, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p9: ref, out_$i10: i32)
{

  entry:
    out_$p11, out_$i12, out_$i13, out_$i14, out_$i16, out_$p17, out_$i18, out_$i19, out_$p9, out_$i10 := in_$p11, in_$i12, in_$i13, in_$i14, in_$i16, in_$p17, in_$i18, in_$i19, in_$p9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3800;

  $bb10:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$p9, out_$i10 := out_$p17, out_$i16;
    goto $bb10_dummy;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    out_$i19 := $ult.i32(out_$i16, out_$i18);
    goto corral_source_split_3813;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, in_$p6);
    goto corral_source_split_3812;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(out_$p9, $mul.ref(1, 24760));
    goto corral_source_split_3811;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i10, 1);
    call {:si_unique_call 814} {:cexpr "i"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_3810;

  $bb7:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i12;
    assume true;
    goto $bb7;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i32(out_$i12, 0);
    goto corral_source_split_3804;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} out_$i12 := be_queue_alloc(in_$p0, out_$p11, 1024, 8);
    call {:si_unique_call 813} {:cexpr "rc"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_3803;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p9, $mul.ref(0, 24760)), $mul.ref(8, 1));
    goto corral_source_split_3802;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p11, out_$i12, out_$i13, out_$i14, out_$i16, out_$p17, out_$i18, out_$i19, out_$p9, out_$i10 := be_rx_qs_create_loop_$bb4(in_$p0, in_$p6, out_$p11, out_$i12, out_$i13, out_$i14, out_$i16, out_$p17, out_$i18, out_$i19, out_$p9, out_$i10);
    return;

  exit:
    return;
}



procedure be_rx_qs_create_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$i14: i32, in_$i16: i32, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p9: ref, in_$i10: i32) returns (out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$i14: i32, out_$i16: i32, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p9: ref, out_$i10: i32);
  modifies $M.0;



implementation napi_enable_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} napi_enable_loop_$bb3();
    return;

  exit:
    return;
}



procedure napi_enable_loop_$bb3();



implementation netif_tx_start_all_queues_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$i6: i32, in_$i7: i32, in_$i8: i1, in_$i4: i32) returns (out_$p5: ref, out_$i6: i32, out_$i7: i32, out_$i8: i1, out_$i4: i32)
{

  entry:
    out_$p5, out_$i6, out_$i7, out_$i8, out_$i4 := in_$p5, in_$i6, in_$i7, in_$i8, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4202;

  $bb6:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i6;
    goto $bb6_dummy;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    out_$i8 := $ugt.i32(out_$i7, out_$i6);
    goto corral_source_split_4208;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i32($M.0, in_$p1);
    goto corral_source_split_4207;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    out_$i6 := $add.i32(out_$i4, 1);
    call {:si_unique_call 867} {:cexpr "i"} boogie_si_record_i32(out_$i6);
    goto corral_source_split_4206;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} netif_tx_start_queue(out_$p5);
    goto corral_source_split_4205;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} out_$p5 := netdev_get_tx_queue(in_$p0, out_$i4);
    goto corral_source_split_4204;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p5, out_$i6, out_$i7, out_$i8, out_$i4 := netif_tx_start_all_queues_loop_$bb4(in_$p0, in_$p1, out_$p5, out_$i6, out_$i7, out_$i8, out_$i4);
    return;

  exit:
    return;
}



procedure netif_tx_start_all_queues_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$i6: i32, in_$i7: i32, in_$i8: i1, in_$i4: i32) returns (out_$p5: ref, out_$i6: i32, out_$i7: i32, out_$i8: i1, out_$i4: i32);
  modifies $M.0;



implementation be_close_loop_$bb15(in_$p0: ref, in_$p2: ref, in_$p29: ref, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$i32: i32, in_$p33: ref) returns (out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$i32: i32, out_$p33: ref)
{

  entry:
    out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i32, out_$p33 := in_$p34, in_$i35, in_$i36, in_$i37, in_$p38, in_$i39, in_$i40, in_$p41, in_$i42, in_$i43, in_$i32, in_$p33;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4289;

  $bb20:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$i32, out_$p33 := out_$i40, out_$p41;
    goto $bb20_dummy;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    out_$i43 := $ult.i32(out_$i40, out_$i42);
    goto corral_source_split_4307;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.0, in_$p29);
    goto corral_source_split_4306;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref(out_$p33, $mul.ref(1, 272));
    goto corral_source_split_4305;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i32, 1);
    call {:si_unique_call 884} {:cexpr "i"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_4304;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} be_eq_clean(out_$p33);
    goto corral_source_split_4303;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} synchronize_irq(out_$i39);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} synchronize_irq(out_$i37);
    goto corral_source_split_4297;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} out_$i37 := be_msix_vec_get(in_$p2, out_$p33);
    call {:si_unique_call 880} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_4296;

  $bb17:
    assume out_$i36 == 1;
    goto corral_source_split_4295;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_4293;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, out_$p34);
    goto corral_source_split_4292;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p2, $mul.ref(0, 364320)), $mul.ref(480, 1));
    goto corral_source_split_4291;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, out_$p38);
    goto corral_source_split_4301;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2784)), $mul.ref(64, 1));
    goto corral_source_split_4300;

  $bb18:
    assume !(out_$i36 == 1);
    goto corral_source_split_4299;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i32, out_$p33 := be_close_loop_$bb15(in_$p0, in_$p2, in_$p29, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i32, out_$p33);
    return;

  exit:
    return;
}



procedure be_close_loop_$bb15(in_$p0: ref, in_$p2: ref, in_$p29: ref, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$i32: i32, in_$p33: ref) returns (out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$i32: i32, out_$p33: ref);
  modifies $M.0;



implementation be_close_loop_$bb6(in_$p11: ref, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i14: i32, in_$p15: ref) returns (out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i14: i32, out_$p15: ref)
{

  entry:
    out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i14, out_$p15 := in_$p16, in_$i17, in_$p18, in_$i19, in_$i20, in_$i14, in_$p15;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4258;

  $bb8:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i14, out_$p15 := out_$i17, out_$p18;
    goto $bb8_dummy;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    out_$i20 := $ult.i32(out_$i17, out_$i19);
    goto corral_source_split_4265;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, in_$p11);
    goto corral_source_split_4264;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p15, $mul.ref(1, 272));
    goto corral_source_split_4263;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i14, 1);
    call {:si_unique_call 874} {:cexpr "i"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_4262;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} napi_disable(out_$p16);
    goto corral_source_split_4261;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_4260;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i14, out_$p15 := be_close_loop_$bb6(in_$p11, out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i14, out_$p15);
    return;

  exit:
    return;
}



procedure be_close_loop_$bb6(in_$p11: ref, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i14: i32, in_$p15: ref) returns (out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i14: i32, out_$p15: ref);
  modifies $M.0, $M.29, $M.41, $M.21, $M.42, $CurrAddr;



implementation napi_disable_loop_$bb4(in_$p2: ref, in_$i5: i32, in_$i6: i1) returns (out_$i5: i32, out_$i6: i1)
{

  entry:
    out_$i5, out_$i6 := in_$i5, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i6 == 1;
    goto $bb6_dummy;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    out_$i6 := $ne.i32(out_$i5, 0);
    goto corral_source_split_4350;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} out_$i5 := test_and_set_bit(0, in_$p2);
    call {:si_unique_call 894} {:cexpr "tmp"} boogie_si_record_i32(out_$i5);
    goto corral_source_split_4349;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} msleep(1);
    goto corral_source_split_4348;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i5, out_$i6 := napi_disable_loop_$bb4(in_$p2, out_$i5, out_$i6);
    return;

  exit:
    return;
}



procedure napi_disable_loop_$bb4(in_$p2: ref, in_$i5: i32, in_$i6: i1) returns (out_$i5: i32, out_$i6: i1);
  modifies $M.29, $M.41, $M.0, $M.21, $M.42, $CurrAddr;



implementation be_tx_compl_clean_loop_$bb48(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p103: ref, in_$p106: ref, in_$i107: i16, in_$i108: i32, in_$i109: i64, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$i114: i16, in_$i115: i32, in_$i116: i16, in_$i117: i32, in_$i118: i32, in_$i119: i16, in_$p120: ref, in_$i121: i16, in_$i122: i32, in_$i123: i16, in_$i124: i16, in_$i125: i32, in_$i126: i16, in_$i127: i16, in_$i128: i32, in_$p129: ref, in_$i130: i32, in_$i131: i1, in_$p91: ref) returns (out_$p106: ref, out_$i107: i16, out_$i108: i32, out_$i109: i64, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$i114: i16, out_$i115: i32, out_$i116: i16, out_$i117: i32, out_$i118: i32, out_$i119: i16, out_$p120: ref, out_$i121: i16, out_$i122: i32, out_$i123: i16, out_$i124: i16, out_$i125: i32, out_$i126: i16, out_$i127: i16, out_$i128: i32, out_$p129: ref, out_$i130: i32, out_$i131: i1)
{

  entry:
    out_$p106, out_$i107, out_$i108, out_$i109, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131 := in_$p106, in_$i107, in_$i108, in_$i109, in_$p111, in_$p112, in_$p113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$p120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$p129, in_$i130, in_$i131;
    goto $bb48, exit;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb50:
    assume {:verifier.code 0} true;
    assume out_$i131 == 1;
    goto $bb50_dummy;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    out_$i131 := $ne.i32(out_$i130, 0);
    goto corral_source_split_4519;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} out_$i130 := atomic_read(in_$p103);
    call {:si_unique_call 936} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i130);
    goto corral_source_split_4518;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} atomic_sub(out_$i128, out_$p129);
    goto corral_source_split_4517;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    out_$i128 := $zext.i16.i32(out_$i127);
    out_$p129 := $add.ref($add.ref($add.ref(in_$p91, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(36, 1));
    goto corral_source_split_4516;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} out_$i127 := be_tx_compl_process(in_$p0, in_$p91, out_$i126);
    call {:si_unique_call 933} {:cexpr "num_wrbs"} boogie_si_record_i16(out_$i127);
    goto corral_source_split_4515;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    out_$i126 := $trunc.i32.i16(out_$i125);
    goto corral_source_split_4514;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    out_$i125 := $zext.i16.i32(out_$i124);
    goto corral_source_split_4513;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    out_$i124 := $load.i16($M.34, in_$p1);
    goto corral_source_split_4512;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} index_adv(in_$p1, out_$i119, out_$i123);
    goto corral_source_split_4511;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    out_$i123 := $trunc.i32.i16(out_$i122);
    goto corral_source_split_4510;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    out_$i122 := $zext.i16.i32(out_$i121);
    goto corral_source_split_4509;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i16($M.0, out_$p120);
    goto corral_source_split_4508;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    out_$i119 := $trunc.i32.i16(out_$i118);
    out_$p120 := $add.ref($add.ref($add.ref(in_$p91, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_4507;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    out_$i118 := $add.i32(out_$i117, 65535);
    goto corral_source_split_4506;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    out_$i117 := $zext.i16.i32(out_$i116);
    goto corral_source_split_4505;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    out_$i116 := $trunc.i32.i16(out_$i115);
    call {:si_unique_call 930} {:cexpr "num_wrbs"} boogie_si_record_i16(out_$i116);
    goto corral_source_split_4504;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} out_$i115 := wrb_cnt_for_skb(in_$p0, out_$p112, in_$p2);
    call {:si_unique_call 929} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i115);
    goto corral_source_split_4503;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $M.34 := $store.i16($M.34, in_$p1, out_$i114);
    goto corral_source_split_4502;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i16($M.0, out_$p113);
    goto corral_source_split_4501;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    out_$p112 := $load.ref($M.0, out_$p111);
    out_$p113 := $add.ref($add.ref($add.ref(in_$p91, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(30, 1));
    goto corral_source_split_4500;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref($add.ref(in_$p91, $mul.ref(0, 16528)), $mul.ref(88, 1)), $mul.ref(out_$i109, 8));
    goto corral_source_split_4499;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    out_$i109 := $sext.i32.i64(out_$i108);
    goto corral_source_split_4498;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    out_$i108 := $zext.i16.i32(out_$i107);
    goto corral_source_split_4497;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    out_$i107 := $load.i16($M.0, out_$p106);
    goto corral_source_split_4496;

  $bb49:
    out_$p106 := $add.ref($add.ref($add.ref(in_$p91, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(30, 1));
    goto corral_source_split_4495;

  $bb50_dummy:
    call {:si_unique_call 1} out_$p106, out_$i107, out_$i108, out_$i109, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131 := be_tx_compl_clean_loop_$bb48(in_$p0, in_$p1, in_$p2, in_$p103, out_$p106, out_$i107, out_$i108, out_$i109, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, in_$p91);
    return;

  exit:
    return;
}



procedure be_tx_compl_clean_loop_$bb48(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p103: ref, in_$p106: ref, in_$i107: i16, in_$i108: i32, in_$i109: i64, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$i114: i16, in_$i115: i32, in_$i116: i16, in_$i117: i32, in_$i118: i32, in_$i119: i16, in_$p120: ref, in_$i121: i16, in_$i122: i32, in_$i123: i16, in_$i124: i16, in_$i125: i32, in_$i126: i16, in_$i127: i16, in_$i128: i32, in_$p129: ref, in_$i130: i32, in_$i131: i1, in_$p91: ref) returns (out_$p106: ref, out_$i107: i16, out_$i108: i32, out_$i109: i64, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$i114: i16, out_$i115: i32, out_$i116: i16, out_$i117: i32, out_$i118: i32, out_$i119: i16, out_$p120: ref, out_$i121: i16, out_$i122: i32, out_$i123: i16, out_$i124: i16, out_$i125: i32, out_$i126: i16, out_$i127: i16, out_$i128: i32, out_$p129: ref, out_$i130: i32, out_$i131: i1);
  modifies $M.0, $M.34, $M.35;



implementation be_tx_compl_clean_loop_$bb40(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p88: ref, in_$p94: ref, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$i98: i32, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$p103: ref, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i107: i16, in_$i108: i32, in_$i109: i64, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$i114: i16, in_$i115: i32, in_$i116: i16, in_$i117: i32, in_$i118: i32, in_$i119: i16, in_$p120: ref, in_$i121: i16, in_$i122: i32, in_$i123: i16, in_$i124: i16, in_$i125: i32, in_$i126: i16, in_$i127: i16, in_$i128: i32, in_$p129: ref, in_$i130: i32, in_$i131: i1, in_$i132: i32, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$p91: ref, in_$i92: i32, in_vslice_dummy_var_463: i32) returns (out_$p94: ref, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$i98: i32, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$p103: ref, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i107: i16, out_$i108: i32, out_$i109: i64, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$i114: i16, out_$i115: i32, out_$i116: i16, out_$i117: i32, out_$i118: i32, out_$i119: i16, out_$p120: ref, out_$i121: i16, out_$i122: i32, out_$i123: i16, out_$i124: i16, out_$i125: i32, out_$i126: i16, out_$i127: i16, out_$i128: i32, out_$p129: ref, out_$i130: i32, out_$i131: i1, out_$i132: i32, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$p91: ref, out_$i92: i32, out_vslice_dummy_var_463: i32)
{

  entry:
    out_$p94, out_$i95, out_$i96, out_$p97, out_$i98, out_$p99, out_$p100, out_$p101, out_$p103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p91, out_$i92, out_vslice_dummy_var_463 := in_$p94, in_$i95, in_$i96, in_$p97, in_$i98, in_$p99, in_$p100, in_$p101, in_$p103, in_$i104, in_$i105, in_$p106, in_$i107, in_$i108, in_$i109, in_$p111, in_$p112, in_$p113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$p120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$p129, in_$i130, in_$i131, in_$i132, in_$p133, in_$i134, in_$i135, in_$p91, in_$i92, in_vslice_dummy_var_463;
    goto $bb40, exit;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4476;

  $bb53:
    assume out_$i135 == 1;
    assume {:verifier.code 0} true;
    out_$p91, out_$i92 := out_$p133, out_$i132;
    goto $bb53_dummy;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    out_$i135 := $ult.i32(out_$i132, out_$i134);
    goto corral_source_split_4526;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    out_$i134 := $load.i32($M.0, in_$p88);
    goto corral_source_split_4525;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref(out_$p91, $mul.ref(1, 16528));
    goto corral_source_split_4524;

  $bb52:
    assume {:verifier.code 0} true;
    out_$i132 := $add.i32(out_$i92, 1);
    call {:si_unique_call 937} {:cexpr "i"} boogie_si_record_i32(out_$i132);
    goto corral_source_split_4523;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb46:
    assume {:verifier.code 0} true;
    assume !(out_$i105 == 1);
    goto $bb47;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb51:
    assume !(out_$i131 == 1);
    goto corral_source_split_4521;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    out_$i131 := $ne.i32(out_$i130, 0);
    goto corral_source_split_4519;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} out_$i130 := atomic_read(out_$p103);
    call {:si_unique_call 936} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i130);
    goto corral_source_split_4518;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} atomic_sub(out_$i128, out_$p129);
    goto corral_source_split_4517;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    out_$i128 := $zext.i16.i32(out_$i127);
    out_$p129 := $add.ref($add.ref($add.ref(out_$p91, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(36, 1));
    goto corral_source_split_4516;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} out_$i127 := be_tx_compl_process(in_$p0, out_$p91, out_$i126);
    call {:si_unique_call 933} {:cexpr "num_wrbs"} boogie_si_record_i16(out_$i127);
    goto corral_source_split_4515;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    out_$i126 := $trunc.i32.i16(out_$i125);
    goto corral_source_split_4514;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    out_$i125 := $zext.i16.i32(out_$i124);
    goto corral_source_split_4513;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    out_$i124 := $load.i16($M.34, in_$p1);
    goto corral_source_split_4512;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} index_adv(in_$p1, out_$i119, out_$i123);
    goto corral_source_split_4511;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    out_$i123 := $trunc.i32.i16(out_$i122);
    goto corral_source_split_4510;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    out_$i122 := $zext.i16.i32(out_$i121);
    goto corral_source_split_4509;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i16($M.0, out_$p120);
    goto corral_source_split_4508;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    out_$i119 := $trunc.i32.i16(out_$i118);
    out_$p120 := $add.ref($add.ref($add.ref(out_$p91, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_4507;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    out_$i118 := $add.i32(out_$i117, 65535);
    goto corral_source_split_4506;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    out_$i117 := $zext.i16.i32(out_$i116);
    goto corral_source_split_4505;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    out_$i116 := $trunc.i32.i16(out_$i115);
    call {:si_unique_call 930} {:cexpr "num_wrbs"} boogie_si_record_i16(out_$i116);
    goto corral_source_split_4504;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} out_$i115 := wrb_cnt_for_skb(in_$p0, out_$p112, in_$p2);
    call {:si_unique_call 929} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i115);
    goto corral_source_split_4503;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $M.34 := $store.i16($M.34, in_$p1, out_$i114);
    goto corral_source_split_4502;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i16($M.0, out_$p113);
    goto corral_source_split_4501;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    out_$p112 := $load.ref($M.0, out_$p111);
    out_$p113 := $add.ref($add.ref($add.ref(out_$p91, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(30, 1));
    goto corral_source_split_4500;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref($add.ref(out_$p91, $mul.ref(0, 16528)), $mul.ref(88, 1)), $mul.ref(out_$i109, 8));
    goto corral_source_split_4499;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    out_$i109 := $sext.i32.i64(out_$i108);
    goto corral_source_split_4498;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    out_$i108 := $zext.i16.i32(out_$i107);
    goto corral_source_split_4497;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    out_$i107 := $load.i16($M.0, out_$p106);
    goto corral_source_split_4496;

  $bb49:
    out_$p106 := $add.ref($add.ref($add.ref(out_$p91, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(30, 1));
    goto corral_source_split_4495;

  $bb48:
    call out_$p106, out_$i107, out_$i108, out_$i109, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131 := be_tx_compl_clean_loop_$bb48(in_$p0, in_$p1, in_$p2, out_$p103, out_$p106, out_$i107, out_$i108, out_$i109, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$p91);
    goto $bb48_last;

  $bb48_last:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb50:
    assume {:verifier.code 0} true;
    assume out_$i131 == 1;
    assume false;
    return;

  $bb45:
    assume out_$i105 == 1;
    goto corral_source_split_4493;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    out_$i105 := $ne.i32(out_$i104, 0);
    goto corral_source_split_4491;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} out_$i104 := atomic_read(out_$p103);
    call {:si_unique_call 927} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_4490;

  $bb44:
    out_$p103 := $add.ref($add.ref($add.ref(out_$p91, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(36, 1));
    goto corral_source_split_4489;

  $bb43:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} out_vslice_dummy_var_463 := dev_err.ref.ref.i32(out_$p101, .str.102, out_$i98);
    goto corral_source_split_4487;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(out_$p100, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_4486;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    out_$p100 := $load.ref($M.0, out_$p99);
    goto corral_source_split_4485;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4484;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} out_$i98 := atomic_read(out_$p97);
    call {:si_unique_call 924} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i98);
    goto corral_source_split_4483;

  $bb42:
    assume out_$i96 == 1;
    out_$p97 := $add.ref($add.ref($add.ref(out_$p91, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(36, 1));
    goto corral_source_split_4482;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    out_$i96 := $ne.i32(out_$i95, 0);
    goto corral_source_split_4480;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} out_$i95 := atomic_read(out_$p94);
    call {:si_unique_call 922} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i95);
    goto corral_source_split_4479;

  $bb41:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref($add.ref(out_$p91, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(36, 1));
    goto corral_source_split_4478;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb53_dummy:
    call {:si_unique_call 1} out_$p94, out_$i95, out_$i96, out_$p97, out_$i98, out_$p99, out_$p100, out_$p101, out_$p103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p91, out_$i92, out_vslice_dummy_var_463 := be_tx_compl_clean_loop_$bb40(in_$p0, in_$p1, in_$p2, in_$p88, out_$p94, out_$i95, out_$i96, out_$p97, out_$i98, out_$p99, out_$p100, out_$p101, out_$p103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p91, out_$i92, out_vslice_dummy_var_463);
    return;

  exit:
    return;
}



procedure be_tx_compl_clean_loop_$bb40(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p88: ref, in_$p94: ref, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$i98: i32, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$p103: ref, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i107: i16, in_$i108: i32, in_$i109: i64, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$i114: i16, in_$i115: i32, in_$i116: i16, in_$i117: i32, in_$i118: i32, in_$i119: i16, in_$p120: ref, in_$i121: i16, in_$i122: i32, in_$i123: i16, in_$i124: i16, in_$i125: i32, in_$i126: i16, in_$i127: i16, in_$i128: i32, in_$p129: ref, in_$i130: i32, in_$i131: i1, in_$i132: i32, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$p91: ref, in_$i92: i32, in_vslice_dummy_var_463: i32) returns (out_$p94: ref, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$i98: i32, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$p103: ref, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i107: i16, out_$i108: i32, out_$i109: i64, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$i114: i16, out_$i115: i32, out_$i116: i16, out_$i117: i32, out_$i118: i32, out_$i119: i16, out_$p120: ref, out_$i121: i16, out_$i122: i32, out_$i123: i16, out_$i124: i16, out_$i125: i32, out_$i126: i16, out_$i127: i16, out_$i128: i32, out_$p129: ref, out_$i130: i32, out_$i131: i1, out_$i132: i32, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$p91: ref, out_$i92: i32, out_vslice_dummy_var_463: i32);
  modifies $M.0, $M.34, $M.35;



implementation be_tx_compl_clean_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$p24: ref, in_$i33: i32, in_$p34: ref, in_$i35: i32, in_$i36: i16, in_$i37: i16, in_$i38: i32, in_$i39: i16, in_$i40: i16, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i16, in_$i45: i32, in_$i46: i32, in_$i47: i16, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p30: ref, in_$i31: i16, in_$i32: i16, in_$i51: i16, in_$i52: i16, in_$p18: ref) returns (out_$i33: i32, out_$p34: ref, out_$i35: i32, out_$i36: i16, out_$i37: i16, out_$i38: i32, out_$i39: i16, out_$i40: i16, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i16, out_$i45: i32, out_$i46: i32, out_$i47: i16, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p30: ref, out_$i31: i16, out_$i32: i16, out_$i51: i16, out_$i52: i16)
{

  entry:
    out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p30, out_$i31, out_$i32, out_$i51, out_$i52 := in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$p30, in_$i31, in_$i32, in_$i51, in_$i52;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4395;

  $bb12:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$p30, out_$i31, out_$i32 := out_$p48, out_$i47, out_$i44;
    goto $bb12_dummy;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    out_$i51, out_$i52 := out_$i44, out_$i47;
    assume true;
    goto $bb12;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i64(out_$i49, 0);
    goto corral_source_split_4415;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64(out_$p48);
    goto corral_source_split_4414;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} out_$p48 := be_tx_compl_get(in_$p24);
    goto corral_source_split_4413;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    out_$i47 := $trunc.i32.i16(out_$i46);
    call {:si_unique_call 910} {:cexpr "cmpl"} boogie_si_record_i16(out_$i47);
    goto corral_source_split_4412;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i45, 1);
    goto corral_source_split_4411;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i16.i32(out_$i31);
    goto corral_source_split_4410;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    out_$i44 := $trunc.i32.i16(out_$i43);
    call {:si_unique_call 909} {:cexpr "num_wrbs"} boogie_si_record_i16(out_$i44);
    goto corral_source_split_4409;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    out_$i43 := $add.i32(out_$i41, out_$i42);
    goto corral_source_split_4408;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i16.i32(out_$i32);
    goto corral_source_split_4407;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i16.i32(out_$i40);
    goto corral_source_split_4406;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} out_$i40 := be_tx_compl_process(in_$p0, in_$p18, out_$i39);
    call {:si_unique_call 908} {:cexpr "tmp___1"} boogie_si_record_i16(out_$i40);
    goto corral_source_split_4405;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i32.i16(out_$i38);
    goto corral_source_split_4404;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i16.i32(out_$i37);
    goto corral_source_split_4403;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i16($M.34, in_$p1);
    goto corral_source_split_4402;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $M.34 := $store.i16($M.34, in_$p1, out_$i36);
    goto corral_source_split_4401;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i32.i16(out_$i35);
    goto corral_source_split_4400;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} out_$i35 := amap_get(out_$p34, 0, out_$i33, 0);
    call {:si_unique_call 906} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_4399;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_4398;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} out_$i33 := amap_mask(16);
    call {:si_unique_call 904} {:cexpr "tmp"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_4397;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p30, out_$i31, out_$i32, out_$i51, out_$i52 := be_tx_compl_clean_loop_$bb10(in_$p0, in_$p1, in_$p24, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p30, out_$i31, out_$i32, out_$i51, out_$i52, in_$p18);
    return;

  exit:
    return;
}



procedure be_tx_compl_clean_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$p24: ref, in_$i33: i32, in_$p34: ref, in_$i35: i32, in_$i36: i16, in_$i37: i16, in_$i38: i32, in_$i39: i16, in_$i40: i16, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i16, in_$i45: i32, in_$i46: i32, in_$i47: i16, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p30: ref, in_$i31: i16, in_$i32: i16, in_$i51: i16, in_$i52: i16, in_$p18: ref) returns (out_$i33: i32, out_$p34: ref, out_$i35: i32, out_$i36: i16, out_$i37: i16, out_$i38: i32, out_$i39: i16, out_$i40: i16, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i16, out_$i45: i32, out_$i46: i32, out_$i47: i16, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p30: ref, out_$i31: i16, out_$i32: i16, out_$i51: i16, out_$i52: i16);
  modifies $M.0, $M.34;



implementation be_tx_compl_clean_loop_$bb5(in_$p0: ref, in_$p1: ref, in_$p12: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$i33: i32, in_$p34: ref, in_$i35: i32, in_$i36: i16, in_$i37: i16, in_$i38: i32, in_$i39: i16, in_$i40: i16, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i16, in_$i45: i32, in_$i46: i32, in_$i47: i16, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p30: ref, in_$i31: i16, in_$i32: i16, in_$i51: i16, in_$i52: i16, in_$i28: i16, in_$i29: i16, in_$i53: i32, in_$i54: i1, in_$p56: ref, in_$i57: i16, in_$i58: i32, in_$i59: i16, in_$i60: i32, in_$i61: i16, in_$i62: i32, in_$p63: ref, in_$i64: i16, in_$i65: i16, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$i71: i32, in_$p72: ref, in_$i73: i32, in_$i74: i1, in_$p18: ref, in_$i19: i32, in_$i20: i16, in_$i21: i16, in_$i22: i32, in_$i75: i16, in_$i76: i16, in_$i77: i32) returns (out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$i33: i32, out_$p34: ref, out_$i35: i32, out_$i36: i16, out_$i37: i16, out_$i38: i32, out_$i39: i16, out_$i40: i16, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i16, out_$i45: i32, out_$i46: i32, out_$i47: i16, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p30: ref, out_$i31: i16, out_$i32: i16, out_$i51: i16, out_$i52: i16, out_$i28: i16, out_$i29: i16, out_$i53: i32, out_$i54: i1, out_$p56: ref, out_$i57: i16, out_$i58: i32, out_$i59: i16, out_$i60: i32, out_$i61: i16, out_$i62: i32, out_$p63: ref, out_$i64: i16, out_$i65: i16, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$i71: i32, out_$p72: ref, out_$i73: i32, out_$i74: i1, out_$p18: ref, out_$i19: i32, out_$i20: i16, out_$i21: i16, out_$i22: i32, out_$i75: i16, out_$i76: i16, out_$i77: i32)
{

  entry:
    out_$p24, out_$p25, out_$i26, out_$i27, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p30, out_$i31, out_$i32, out_$i51, out_$i52, out_$i28, out_$i29, out_$i53, out_$i54, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i75, out_$i76, out_$i77 := in_$p24, in_$p25, in_$i26, in_$i27, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$p30, in_$i31, in_$i32, in_$i51, in_$i52, in_$i28, in_$i29, in_$i53, in_$i54, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$p63, in_$i64, in_$i65, in_$p66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$p72, in_$i73, in_$i74, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i75, in_$i76, in_$i77;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4385;

  $bb21:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$p18, out_$i19, out_$i20, out_$i21, out_$i22 := out_$p72, out_$i70, out_$i65, out_$i64, out_$i71;
    goto $bb21_dummy;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    out_$i75, out_$i76, out_$i77 := out_$i64, out_$i65, out_$i70;
    assume true;
    goto $bb21;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    out_$i74 := $ult.i32(out_$i71, out_$i73);
    goto corral_source_split_4444;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i32($M.0, in_$p12);
    goto corral_source_split_4443;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref(out_$p18, $mul.ref(1, 16528));
    goto corral_source_split_4442;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i32(out_$i22, 1);
    call {:si_unique_call 917} {:cexpr "i"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_4441;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_4440;

  $bb19:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    out_$i70 := out_$i19;
    goto $bb20;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    out_$i70 := out_$i69;
    goto $bb20;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    out_$i69 := $sub.i32(out_$i19, 1);
    call {:si_unique_call 916} {:cexpr "pending_txqs"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_4438;

  $bb18:
    assume out_$i68 == 1;
    goto corral_source_split_4437;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i32(out_$i67, 0);
    goto corral_source_split_4435;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} out_$i67 := atomic_read(out_$p66);
    call {:si_unique_call 915} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_4434;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(36, 1));
    goto corral_source_split_4433;

  $bb16:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    out_$i64, out_$i65 := out_$i28, out_$i29;
    goto $bb17;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    out_$i64, out_$i65 := 0, 0;
    goto $bb17;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} atomic_sub(out_$i62, out_$p63);
    goto corral_source_split_4431;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i16.i32(out_$i28);
    out_$p63 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(36, 1));
    goto corral_source_split_4430;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} be_cq_notify(in_$p0, out_$i59, 0, out_$i61);
    goto corral_source_split_4429;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    out_$i61 := $trunc.i32.i16(out_$i60);
    goto corral_source_split_4428;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i16.i32(out_$i29);
    goto corral_source_split_4427;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    out_$i59 := $trunc.i32.i16(out_$i58);
    goto corral_source_split_4426;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i16.i32(out_$i57);
    goto corral_source_split_4425;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i16($M.0, out_$p56);
    goto corral_source_split_4424;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 16528)), $mul.ref(48, 1)), $mul.ref(28, 1));
    goto corral_source_split_4423;

  $bb15:
    assume out_$i54 == 1;
    goto corral_source_split_4422;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i32(out_$i53, 0);
    goto corral_source_split_4420;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i16.i32(out_$i29);
    goto corral_source_split_4419;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i27 == 1);
    goto $bb9;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    out_$i28, out_$i29 := out_$i51, out_$i52;
    goto $bb9;

  $bb13:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4417;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    out_$i51, out_$i52 := out_$i44, out_$i47;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i64(out_$i49, 0);
    goto corral_source_split_4415;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64(out_$p48);
    goto corral_source_split_4414;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} out_$p48 := be_tx_compl_get(out_$p24);
    goto corral_source_split_4413;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    out_$i47 := $trunc.i32.i16(out_$i46);
    call {:si_unique_call 910} {:cexpr "cmpl"} boogie_si_record_i16(out_$i47);
    goto corral_source_split_4412;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i45, 1);
    goto corral_source_split_4411;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i16.i32(out_$i31);
    goto corral_source_split_4410;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    out_$i44 := $trunc.i32.i16(out_$i43);
    call {:si_unique_call 909} {:cexpr "num_wrbs"} boogie_si_record_i16(out_$i44);
    goto corral_source_split_4409;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    out_$i43 := $add.i32(out_$i41, out_$i42);
    goto corral_source_split_4408;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i16.i32(out_$i32);
    goto corral_source_split_4407;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i16.i32(out_$i40);
    goto corral_source_split_4406;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} out_$i40 := be_tx_compl_process(in_$p0, out_$p18, out_$i39);
    call {:si_unique_call 908} {:cexpr "tmp___1"} boogie_si_record_i16(out_$i40);
    goto corral_source_split_4405;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i32.i16(out_$i38);
    goto corral_source_split_4404;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i16.i32(out_$i37);
    goto corral_source_split_4403;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i16($M.34, in_$p1);
    goto corral_source_split_4402;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $M.34 := $store.i16($M.34, in_$p1, out_$i36);
    goto corral_source_split_4401;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i32.i16(out_$i35);
    goto corral_source_split_4400;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} out_$i35 := amap_get(out_$p34, 0, out_$i33, 0);
    call {:si_unique_call 906} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_4399;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_4398;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} out_$i33 := amap_mask(16);
    call {:si_unique_call 904} {:cexpr "tmp"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_4397;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb10:
    call out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p30, out_$i31, out_$i32, out_$i51, out_$i52 := be_tx_compl_clean_loop_$bb10(in_$p0, in_$p1, out_$p24, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p30, out_$i31, out_$i32, out_$i51, out_$i52, out_$p18);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4395;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    out_$p30, out_$i31, out_$i32 := out_$p25, out_$i20, out_$i21;
    goto $bb10;

  $bb12:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$p30, out_$i31, out_$i32 := out_$p48, out_$i47, out_$i44;
    assume false;
    return;

  $bb7:
    assume out_$i27 == 1;
    goto corral_source_split_4393;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    out_$i28, out_$i29 := out_$i21, out_$i20;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i64(out_$i26, 0);
    goto corral_source_split_4391;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p25);
    goto corral_source_split_4390;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} out_$p25 := be_tx_compl_get(out_$p24);
    goto corral_source_split_4389;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p18, $mul.ref(0, 16528)), $mul.ref(48, 1));
    goto corral_source_split_4388;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4387;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p24, out_$p25, out_$i26, out_$i27, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p30, out_$i31, out_$i32, out_$i51, out_$i52, out_$i28, out_$i29, out_$i53, out_$i54, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i75, out_$i76, out_$i77 := be_tx_compl_clean_loop_$bb5(in_$p0, in_$p1, in_$p12, out_$p24, out_$p25, out_$i26, out_$i27, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p30, out_$i31, out_$i32, out_$i51, out_$i52, out_$i28, out_$i29, out_$i53, out_$i54, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i75, out_$i76, out_$i77);
    return;

  exit:
    return;
}



procedure be_tx_compl_clean_loop_$bb5(in_$p0: ref, in_$p1: ref, in_$p12: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$i33: i32, in_$p34: ref, in_$i35: i32, in_$i36: i16, in_$i37: i16, in_$i38: i32, in_$i39: i16, in_$i40: i16, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i16, in_$i45: i32, in_$i46: i32, in_$i47: i16, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p30: ref, in_$i31: i16, in_$i32: i16, in_$i51: i16, in_$i52: i16, in_$i28: i16, in_$i29: i16, in_$i53: i32, in_$i54: i1, in_$p56: ref, in_$i57: i16, in_$i58: i32, in_$i59: i16, in_$i60: i32, in_$i61: i16, in_$i62: i32, in_$p63: ref, in_$i64: i16, in_$i65: i16, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$i71: i32, in_$p72: ref, in_$i73: i32, in_$i74: i1, in_$p18: ref, in_$i19: i32, in_$i20: i16, in_$i21: i16, in_$i22: i32, in_$i75: i16, in_$i76: i16, in_$i77: i32) returns (out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$i33: i32, out_$p34: ref, out_$i35: i32, out_$i36: i16, out_$i37: i16, out_$i38: i32, out_$i39: i16, out_$i40: i16, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i16, out_$i45: i32, out_$i46: i32, out_$i47: i16, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p30: ref, out_$i31: i16, out_$i32: i16, out_$i51: i16, out_$i52: i16, out_$i28: i16, out_$i29: i16, out_$i53: i32, out_$i54: i1, out_$p56: ref, out_$i57: i16, out_$i58: i32, out_$i59: i16, out_$i60: i32, out_$i61: i16, out_$i62: i32, out_$p63: ref, out_$i64: i16, out_$i65: i16, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$i71: i32, out_$p72: ref, out_$i73: i32, out_$i74: i1, out_$p18: ref, out_$i19: i32, out_$i20: i16, out_$i21: i16, out_$i22: i32, out_$i75: i16, out_$i76: i16, out_$i77: i32);
  modifies $M.0, $M.34;



implementation be_tx_compl_clean_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i3: i16, in_$i4: i16, in_$i5: i16, in_$p6: ref, in_$i7: i32, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$i33: i32, in_$p34: ref, in_$i35: i32, in_$i36: i16, in_$i37: i16, in_$i38: i32, in_$i39: i16, in_$i40: i16, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i16, in_$i45: i32, in_$i46: i32, in_$i47: i16, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p30: ref, in_$i31: i16, in_$i32: i16, in_$i51: i16, in_$i52: i16, in_$i28: i16, in_$i29: i16, in_$i53: i32, in_$i54: i1, in_$p56: ref, in_$i57: i16, in_$i58: i32, in_$i59: i16, in_$i60: i32, in_$i61: i16, in_$i62: i32, in_$p63: ref, in_$i64: i16, in_$i65: i16, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$i71: i32, in_$p72: ref, in_$i73: i32, in_$i74: i1, in_$p18: ref, in_$i19: i32, in_$i20: i16, in_$i21: i16, in_$i22: i32, in_$i75: i16, in_$i76: i16, in_$i77: i32, in_$i15: i16, in_$i16: i16, in_$i17: i32, in_$i78: i1, in_$i79: i32, in_$i80: i32, in_$i81: i16, in_$i82: i32, in_$i83: i1) returns (out_$i3: i16, out_$i4: i16, out_$i5: i16, out_$p6: ref, out_$i7: i32, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$i33: i32, out_$p34: ref, out_$i35: i32, out_$i36: i16, out_$i37: i16, out_$i38: i32, out_$i39: i16, out_$i40: i16, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i16, out_$i45: i32, out_$i46: i32, out_$i47: i16, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p30: ref, out_$i31: i16, out_$i32: i16, out_$i51: i16, out_$i52: i16, out_$i28: i16, out_$i29: i16, out_$i53: i32, out_$i54: i1, out_$p56: ref, out_$i57: i16, out_$i58: i32, out_$i59: i16, out_$i60: i32, out_$i61: i16, out_$i62: i32, out_$p63: ref, out_$i64: i16, out_$i65: i16, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$i71: i32, out_$p72: ref, out_$i73: i32, out_$i74: i1, out_$p18: ref, out_$i19: i32, out_$i20: i16, out_$i21: i16, out_$i22: i32, out_$i75: i16, out_$i76: i16, out_$i77: i32, out_$i15: i16, out_$i16: i16, out_$i17: i32, out_$i78: i1, out_$i79: i32, out_$i80: i32, out_$i81: i16, out_$i82: i32, out_$i83: i1)
{

  entry:
    out_$i3, out_$i4, out_$i5, out_$p6, out_$i7, out_$p8, out_$p9, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p24, out_$p25, out_$i26, out_$i27, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p30, out_$i31, out_$i32, out_$i51, out_$i52, out_$i28, out_$i29, out_$i53, out_$i54, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i75, out_$i76, out_$i77, out_$i15, out_$i16, out_$i17, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83 := in_$i3, in_$i4, in_$i5, in_$p6, in_$i7, in_$p8, in_$p9, in_$i10, in_$p11, in_$p12, in_$i13, in_$i14, in_$p24, in_$p25, in_$i26, in_$i27, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$p30, in_$i31, in_$i32, in_$i51, in_$i52, in_$i28, in_$i29, in_$i53, in_$i54, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$p63, in_$i64, in_$i65, in_$p66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$p72, in_$i73, in_$i74, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i75, in_$i76, in_$i77, in_$i15, in_$i16, in_$i17, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4372;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i3, out_$i4, out_$i5 := out_$i15, out_$i81, out_$i16;
    goto $bb33_dummy;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} __const_udelay(4295000);
    goto corral_source_split_4470;

  $bb31:
    assume 1 == 1;
    goto corral_source_split_4469;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb31, $bb32;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    out_$i83 := $ugt.i32(out_$i82, 200);
    goto corral_source_split_4457;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    out_$i82 := $zext.i16.i32(out_$i81);
    goto corral_source_split_4456;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    out_$i81 := $trunc.i32.i16(out_$i80);
    call {:si_unique_call 918} {:cexpr "timeo"} boogie_si_record_i16(out_$i81);
    goto corral_source_split_4455;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    out_$i80 := $add.i32(out_$i79, 1);
    goto corral_source_split_4454;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    out_$i79 := $zext.i16.i32(out_$i4);
    goto corral_source_split_4453;

  $bb25:
    assume !(out_$i78 == 1);
    goto corral_source_split_4452;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i32(out_$i17, 0);
    goto corral_source_split_4448;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb3:
    assume {:verifier.code 0} true;
    assume !(out_$i14 == 1);
    goto $bb4;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    out_$i15, out_$i16, out_$i17 := out_$i75, out_$i76, out_$i77;
    goto $bb4;

  $bb22:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4446;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    out_$i75, out_$i76, out_$i77 := out_$i64, out_$i65, out_$i70;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    out_$i74 := $ult.i32(out_$i71, out_$i73);
    goto corral_source_split_4444;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i32($M.0, out_$p12);
    goto corral_source_split_4443;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref(out_$p18, $mul.ref(1, 16528));
    goto corral_source_split_4442;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i32(out_$i22, 1);
    call {:si_unique_call 917} {:cexpr "i"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_4441;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_4440;

  $bb19:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    out_$i70 := out_$i19;
    goto $bb20;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    out_$i70 := out_$i69;
    goto $bb20;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    out_$i69 := $sub.i32(out_$i19, 1);
    call {:si_unique_call 916} {:cexpr "pending_txqs"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_4438;

  $bb18:
    assume out_$i68 == 1;
    goto corral_source_split_4437;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i32(out_$i67, 0);
    goto corral_source_split_4435;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} out_$i67 := atomic_read(out_$p66);
    call {:si_unique_call 915} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_4434;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(36, 1));
    goto corral_source_split_4433;

  $bb16:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    out_$i64, out_$i65 := out_$i28, out_$i29;
    goto $bb17;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    out_$i64, out_$i65 := 0, 0;
    goto $bb17;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} atomic_sub(out_$i62, out_$p63);
    goto corral_source_split_4431;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i16.i32(out_$i28);
    out_$p63 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(36, 1));
    goto corral_source_split_4430;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} be_cq_notify(in_$p0, out_$i59, 0, out_$i61);
    goto corral_source_split_4429;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    out_$i61 := $trunc.i32.i16(out_$i60);
    goto corral_source_split_4428;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i16.i32(out_$i29);
    goto corral_source_split_4427;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    out_$i59 := $trunc.i32.i16(out_$i58);
    goto corral_source_split_4426;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i16.i32(out_$i57);
    goto corral_source_split_4425;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i16($M.0, out_$p56);
    goto corral_source_split_4424;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 16528)), $mul.ref(48, 1)), $mul.ref(28, 1));
    goto corral_source_split_4423;

  $bb15:
    assume out_$i54 == 1;
    goto corral_source_split_4422;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i32(out_$i53, 0);
    goto corral_source_split_4420;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i16.i32(out_$i29);
    goto corral_source_split_4419;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i27 == 1);
    goto $bb9;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    out_$i28, out_$i29 := out_$i51, out_$i52;
    goto $bb9;

  $bb13:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4417;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    out_$i51, out_$i52 := out_$i44, out_$i47;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i64(out_$i49, 0);
    goto corral_source_split_4415;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64(out_$p48);
    goto corral_source_split_4414;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} out_$p48 := be_tx_compl_get(out_$p24);
    goto corral_source_split_4413;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    out_$i47 := $trunc.i32.i16(out_$i46);
    call {:si_unique_call 910} {:cexpr "cmpl"} boogie_si_record_i16(out_$i47);
    goto corral_source_split_4412;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i45, 1);
    goto corral_source_split_4411;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i16.i32(out_$i31);
    goto corral_source_split_4410;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    out_$i44 := $trunc.i32.i16(out_$i43);
    call {:si_unique_call 909} {:cexpr "num_wrbs"} boogie_si_record_i16(out_$i44);
    goto corral_source_split_4409;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    out_$i43 := $add.i32(out_$i41, out_$i42);
    goto corral_source_split_4408;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i16.i32(out_$i32);
    goto corral_source_split_4407;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i16.i32(out_$i40);
    goto corral_source_split_4406;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} out_$i40 := be_tx_compl_process(in_$p0, out_$p18, out_$i39);
    call {:si_unique_call 908} {:cexpr "tmp___1"} boogie_si_record_i16(out_$i40);
    goto corral_source_split_4405;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i32.i16(out_$i38);
    goto corral_source_split_4404;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i16.i32(out_$i37);
    goto corral_source_split_4403;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i16($M.34, in_$p1);
    goto corral_source_split_4402;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $M.34 := $store.i16($M.34, in_$p1, out_$i36);
    goto corral_source_split_4401;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i32.i16(out_$i35);
    goto corral_source_split_4400;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} out_$i35 := amap_get(out_$p34, 0, out_$i33, 0);
    call {:si_unique_call 906} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_4399;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_4398;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} out_$i33 := amap_mask(16);
    call {:si_unique_call 904} {:cexpr "tmp"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_4397;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb10:
    call out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p30, out_$i31, out_$i32, out_$i51, out_$i52 := be_tx_compl_clean_loop_$bb10(in_$p0, in_$p1, out_$p24, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p30, out_$i31, out_$i32, out_$i51, out_$i52, out_$p18);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4395;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    out_$p30, out_$i31, out_$i32 := out_$p25, out_$i20, out_$i21;
    goto $bb10;

  $bb12:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$p30, out_$i31, out_$i32 := out_$p48, out_$i47, out_$i44;
    assume false;
    return;

  $bb7:
    assume out_$i27 == 1;
    goto corral_source_split_4393;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    out_$i28, out_$i29 := out_$i21, out_$i20;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i64(out_$i26, 0);
    goto corral_source_split_4391;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p25);
    goto corral_source_split_4390;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} out_$p25 := be_tx_compl_get(out_$p24);
    goto corral_source_split_4389;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p18, $mul.ref(0, 16528)), $mul.ref(48, 1));
    goto corral_source_split_4388;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4387;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb5:
    call out_$p24, out_$p25, out_$i26, out_$i27, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p30, out_$i31, out_$i32, out_$i51, out_$i52, out_$i28, out_$i29, out_$i53, out_$i54, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i75, out_$i76, out_$i77 := be_tx_compl_clean_loop_$bb5(in_$p0, in_$p1, out_$p12, out_$p24, out_$p25, out_$i26, out_$i27, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p30, out_$i31, out_$i32, out_$i51, out_$i52, out_$i28, out_$i29, out_$i53, out_$i54, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i75, out_$i76, out_$i77);
    goto $bb5_last;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4385;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    out_$p18, out_$i19, out_$i20, out_$i21, out_$i22 := out_$p11, out_$i7, out_$i5, out_$i3, 0;
    goto $bb5;

  $bb21:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$p18, out_$i19, out_$i20, out_$i21, out_$i22 := out_$p72, out_$i70, out_$i65, out_$i64, out_$i71;
    assume false;
    return;

  $bb2:
    assume out_$i14 == 1;
    goto corral_source_split_4383;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    out_$i15, out_$i16, out_$i17 := out_$i3, out_$i5, out_$i7;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    out_$i14 := $ult.i32(0, out_$i13);
    goto corral_source_split_4381;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.0, out_$p12);
    goto corral_source_split_4380;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(4132, 1));
    goto corral_source_split_4379;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref(out_$p9, $mul.ref(out_$i10, 16528));
    goto corral_source_split_4378;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(0);
    goto corral_source_split_4377;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    out_$p9 := $bitcast.ref.ref(out_$p8);
    goto corral_source_split_4376;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(4136, 1));
    goto corral_source_split_4375;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i32($M.0, out_$p6);
    call {:si_unique_call 901} {:cexpr "pending_txqs"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_4374;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(4132, 1));
    goto corral_source_split_4373;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume !(1 == 1);
    goto corral_source_split_4472;

  $bb33_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4, out_$i5, out_$p6, out_$i7, out_$p8, out_$p9, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p24, out_$p25, out_$i26, out_$i27, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p30, out_$i31, out_$i32, out_$i51, out_$i52, out_$i28, out_$i29, out_$i53, out_$i54, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i75, out_$i76, out_$i77, out_$i15, out_$i16, out_$i17, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83 := be_tx_compl_clean_loop_$bb1(in_$p0, in_$p1, out_$i3, out_$i4, out_$i5, out_$p6, out_$i7, out_$p8, out_$p9, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p24, out_$p25, out_$i26, out_$i27, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p30, out_$i31, out_$i32, out_$i51, out_$i52, out_$i28, out_$i29, out_$i53, out_$i54, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i75, out_$i76, out_$i77, out_$i15, out_$i16, out_$i17, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83);
    return;

  exit:
    return;
}



procedure be_tx_compl_clean_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i3: i16, in_$i4: i16, in_$i5: i16, in_$p6: ref, in_$i7: i32, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$i33: i32, in_$p34: ref, in_$i35: i32, in_$i36: i16, in_$i37: i16, in_$i38: i32, in_$i39: i16, in_$i40: i16, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i16, in_$i45: i32, in_$i46: i32, in_$i47: i16, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p30: ref, in_$i31: i16, in_$i32: i16, in_$i51: i16, in_$i52: i16, in_$i28: i16, in_$i29: i16, in_$i53: i32, in_$i54: i1, in_$p56: ref, in_$i57: i16, in_$i58: i32, in_$i59: i16, in_$i60: i32, in_$i61: i16, in_$i62: i32, in_$p63: ref, in_$i64: i16, in_$i65: i16, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$i71: i32, in_$p72: ref, in_$i73: i32, in_$i74: i1, in_$p18: ref, in_$i19: i32, in_$i20: i16, in_$i21: i16, in_$i22: i32, in_$i75: i16, in_$i76: i16, in_$i77: i32, in_$i15: i16, in_$i16: i16, in_$i17: i32, in_$i78: i1, in_$i79: i32, in_$i80: i32, in_$i81: i16, in_$i82: i32, in_$i83: i1) returns (out_$i3: i16, out_$i4: i16, out_$i5: i16, out_$p6: ref, out_$i7: i32, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$i33: i32, out_$p34: ref, out_$i35: i32, out_$i36: i16, out_$i37: i16, out_$i38: i32, out_$i39: i16, out_$i40: i16, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i16, out_$i45: i32, out_$i46: i32, out_$i47: i16, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p30: ref, out_$i31: i16, out_$i32: i16, out_$i51: i16, out_$i52: i16, out_$i28: i16, out_$i29: i16, out_$i53: i32, out_$i54: i1, out_$p56: ref, out_$i57: i16, out_$i58: i32, out_$i59: i16, out_$i60: i32, out_$i61: i16, out_$i62: i32, out_$p63: ref, out_$i64: i16, out_$i65: i16, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$i71: i32, out_$p72: ref, out_$i73: i32, out_$i74: i1, out_$p18: ref, out_$i19: i32, out_$i20: i16, out_$i21: i16, out_$i22: i32, out_$i75: i16, out_$i76: i16, out_$i77: i32, out_$i15: i16, out_$i16: i16, out_$i17: i32, out_$i78: i1, out_$i79: i32, out_$i80: i32, out_$i81: i16, out_$i82: i32, out_$i83: i1);
  modifies $M.0, $M.34;



implementation netif_tx_disable_loop_$bb26(in_$p0: ref, in_$i9: i32, in_$p13: ref, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i16: i32) returns (out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i16: i32)
{

  entry:
    out_$p17, out_$i18, out_$i19, out_$i20, out_$i16 := in_$p17, in_$i18, in_$i19, in_$i20, in_$i16;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_4549;

  $bb28:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := out_$i18;
    goto $bb28_dummy;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    out_$i20 := $ugt.i32(out_$i19, out_$i18);
    goto corral_source_split_4557;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, in_$p13);
    goto corral_source_split_4556;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i16, 1);
    call {:si_unique_call 952} {:cexpr "i"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_4555;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} __netif_tx_unlock(out_$p17);
    goto corral_source_split_4554;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} netif_tx_stop_queue(out_$p17);
    goto corral_source_split_4553;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} __netif_tx_lock(out_$p17, in_$i9);
    goto corral_source_split_4552;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} out_$p17 := netdev_get_tx_queue(in_$p0, out_$i16);
    goto corral_source_split_4551;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p17, out_$i18, out_$i19, out_$i20, out_$i16 := netif_tx_disable_loop_$bb26(in_$p0, in_$i9, in_$p13, out_$p17, out_$i18, out_$i19, out_$i20, out_$i16);
    return;

  exit:
    return;
}



procedure netif_tx_disable_loop_$bb26(in_$p0: ref, in_$i9: i32, in_$p13: ref, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i16: i32) returns (out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i16: i32);
  modifies $M.0;



implementation be_rx_qs_destroy_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p10: ref, in_$p11: ref, in_$i12: i8, in_$i13: i1, in_$i15: i32, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$i8: i32, in_$p9: ref, in_vslice_dummy_var_464: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i8, out_$i13: i1, out_$i15: i32, out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$i8: i32, out_$p9: ref, out_vslice_dummy_var_464: i32)
{

  entry:
    out_$p10, out_$p11, out_$i12, out_$i13, out_$i15, out_$p16, out_$i17, out_$i18, out_$i8, out_$p9, out_vslice_dummy_var_464 := in_$p10, in_$p11, in_$i12, in_$i13, in_$i15, in_$p16, in_$i17, in_$i18, in_$i8, in_$p9, in_vslice_dummy_var_464;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4574;

  $bb9:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i8, out_$p9 := out_$i15, out_$p16;
    goto $bb9_dummy;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    out_$i18 := $ult.i32(out_$i15, out_$i17);
    goto corral_source_split_4588;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.0, in_$p5);
    goto corral_source_split_4587;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref(out_$p9, $mul.ref(1, 24760));
    goto corral_source_split_4586;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i8, 1);
    call {:si_unique_call 957} {:cexpr "i"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_4585;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} be_queue_free(in_$p0, out_$p10);
    goto corral_source_split_4584;

  $bb7:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} be_rx_cq_clean(out_$p9);
    goto corral_source_split_4582;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} out_vslice_dummy_var_464 := be_cmd_rxq_destroy(in_$p0, out_$p10);
    goto corral_source_split_4581;

  $bb6:
    assume out_$i13 == 1;
    goto corral_source_split_4580;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    out_$i13 := $trunc.i8.i1(out_$i12);
    goto corral_source_split_4578;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i8($M.0, out_$p11);
    goto corral_source_split_4577;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p9, $mul.ref(0, 24760)), $mul.ref(8, 1));
    out_$p11 := $add.ref($add.ref($add.ref(out_$p9, $mul.ref(0, 24760)), $mul.ref(8, 1)), $mul.ref(34, 1));
    goto corral_source_split_4576;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$i12, out_$i13, out_$i15, out_$p16, out_$i17, out_$i18, out_$i8, out_$p9, out_vslice_dummy_var_464 := be_rx_qs_destroy_loop_$bb4(in_$p0, in_$p5, out_$p10, out_$p11, out_$i12, out_$i13, out_$i15, out_$p16, out_$i17, out_$i18, out_$i8, out_$p9, out_vslice_dummy_var_464);
    return;

  exit:
    return;
}



procedure be_rx_qs_destroy_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p10: ref, in_$p11: ref, in_$i12: i8, in_$i13: i1, in_$i15: i32, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$i8: i32, in_$p9: ref, in_vslice_dummy_var_464: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i8, out_$i13: i1, out_$i15: i32, out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$i8: i32, out_$p9: ref, out_vslice_dummy_var_464: i32);
  modifies $M.0, $CurrAddr, $M.21;



implementation be_irq_unregister_loop_$bb12(in_$p0: ref, in_$p17: ref, in_$i22: i32, in_$p23: ref, in_$i24: i32, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i20: i32, in_$p21: ref) returns (out_$i22: i32, out_$p23: ref, out_$i24: i32, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i20: i32, out_$p21: ref)
{

  entry:
    out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i20, out_$p21 := in_$i22, in_$p23, in_$i24, in_$p25, in_$i26, in_$i27, in_$i20, in_$p21;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4648;

  $bb14:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i20, out_$p21 := out_$i24, out_$p25;
    goto $bb14_dummy;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    out_$i27 := $ult.i32(out_$i24, out_$i26);
    goto corral_source_split_4656;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, in_$p17);
    goto corral_source_split_4655;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref(out_$p21, $mul.ref(1, 272));
    goto corral_source_split_4654;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i20, 1);
    call {:si_unique_call 966} {:cexpr "i"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_4653;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} free_irq(out_$i22, out_$p23);
    goto corral_source_split_4652;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_4651;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} out_$i22 := be_msix_vec_get(in_$p0, out_$p21);
    call {:si_unique_call 964} {:cexpr "tmp"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_4650;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i20, out_$p21 := be_irq_unregister_loop_$bb12(in_$p0, in_$p17, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i20, out_$p21);
    return;

  exit:
    return;
}



procedure be_irq_unregister_loop_$bb12(in_$p0: ref, in_$p17: ref, in_$i22: i32, in_$p23: ref, in_$i24: i32, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i20: i32, in_$p21: ref) returns (out_$i22: i32, out_$p23: ref, out_$i24: i32, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i20: i32, out_$p21: ref);



implementation events_get_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i10: i32, in_$p8: ref, in_$i9: i32, in_$p11: ref, in_$i12: i32, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i1) returns (out_$i10: i32, out_$p8: ref, out_$i9: i32, out_$p11: ref, out_$i12: i32, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i1)
{

  entry:
    out_$i10, out_$p8, out_$i9, out_$p11, out_$i12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18 := in_$i10, in_$p8, in_$i9, in_$p11, in_$i12, in_$p13, in_$p14, in_$p15, in_$p16, in_$i17, in_$i18;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    out_$p8, out_$i9 := out_$p14, out_$i12;
    goto $bb8_dummy;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    out_$i10 := out_$i12;
    assume true;
    goto $bb8;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i17, 0);
    goto corral_source_split_4686;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.0, out_$p16);
    goto corral_source_split_4685;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4684;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p14);
    goto corral_source_split_4683;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} out_$p14 := queue_tail_node(in_$p1);
    goto corral_source_split_4682;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} queue_tail_inc(out_$p13);
    goto corral_source_split_4681;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_4680;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i9, 1);
    call {:si_unique_call 970} {:cexpr "num"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_4679;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p11, 0);
    goto corral_source_split_4678;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p8, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4677;

  $bb7:
    call {:si_unique_call 969} devirtbounce.4(0);
    goto corral_source_split_4676;

  $bb8_dummy:
    call {:si_unique_call 1} out_$i10, out_$p8, out_$i9, out_$p11, out_$i12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18 := events_get_loop_$bb4(in_$p0, in_$p1, out_$i10, out_$p8, out_$i9, out_$p11, out_$i12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18);
    return;

  exit:
    return;
}



procedure events_get_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i10: i32, in_$p8: ref, in_$i9: i32, in_$p11: ref, in_$i12: i32, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i1) returns (out_$i10: i32, out_$p8: ref, out_$i9: i32, out_$p11: ref, out_$i12: i32, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i1);
  modifies $M.0;



implementation MODULO_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} MODULO_loop_$bb3();
    return;

  exit:
    return;
}



procedure MODULO_loop_$bb3();



implementation be_rx_cq_clean_loop_$bb37()
{

  entry:
    goto $bb37, exit;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb37_dummy;

  $bb37_dummy:
    call {:si_unique_call 1} be_rx_cq_clean_loop_$bb37();
    return;

  exit:
    return;
}



procedure be_rx_cq_clean_loop_$bb37();



implementation be_rx_cq_clean_loop_$bb30(in_$p0: ref, in_$p1: ref, in_$p67: ref, in_$i70: i16, in_$i71: i32, in_$i72: i16, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i16, in_$i79: i32, in_$i80: i16, in_$i81: i32, in_$i82: i1, in_cmdloc_dummy_var_258: [ref]i8, in_cmdloc_dummy_var_259: [ref]i8) returns (out_$i70: i16, out_$i71: i32, out_$i72: i16, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i16, out_$i79: i32, out_$i80: i16, out_$i81: i32, out_$i82: i1, out_cmdloc_dummy_var_258: [ref]i8, out_cmdloc_dummy_var_259: [ref]i8)
{

  entry:
    out_$i70, out_$i71, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_cmdloc_dummy_var_258, out_cmdloc_dummy_var_259 := in_$i70, in_$i71, in_$i72, in_$p73, in_$p74, in_$p75, in_$p76, in_$p77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_cmdloc_dummy_var_258, in_cmdloc_dummy_var_259;
    goto $bb30, exit;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb32:
    assume {:verifier.code 0} true;
    assume out_$i82 == 1;
    goto $bb32_dummy;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    out_$i82 := $sgt.i32(out_$i81, 0);
    goto corral_source_split_4859;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} out_$i81 := atomic_read(in_$p67);
    call {:si_unique_call 1011} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_4858;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} index_inc(in_$p1, out_$i80);
    goto corral_source_split_4857;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    out_$i80 := $trunc.i32.i16(out_$i79);
    goto corral_source_split_4856;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    out_$i79 := $zext.i16.i32(out_$i78);
    goto corral_source_split_4855;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i16($M.0, out_$p77);
    goto corral_source_split_4854;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_258 := $M.0;
    call {:si_unique_call 1008} out_cmdloc_dummy_var_259 := $memset.i8(out_cmdloc_dummy_var_258, out_$p76, 0, 24, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_259;
    out_$p77 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 24760)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_4853;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    out_$p76 := $bitcast.ref.ref(out_$p73);
    goto corral_source_split_4852;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} put_page(out_$p75);
    goto corral_source_split_4851;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.0, out_$p74);
    goto corral_source_split_4850;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p73, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4849;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} out_$p73 := get_rx_page_info(in_$p0, out_$i72);
    goto corral_source_split_4848;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    out_$i72 := $trunc.i32.i16(out_$i71);
    goto corral_source_split_4847;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.i16.i32(out_$i70);
    goto corral_source_split_4846;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i16($M.0, in_$p1);
    goto corral_source_split_4845;

  $bb32_dummy:
    call {:si_unique_call 1} out_$i70, out_$i71, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_cmdloc_dummy_var_258, out_cmdloc_dummy_var_259 := be_rx_cq_clean_loop_$bb30(in_$p0, in_$p1, in_$p67, out_$i70, out_$i71, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_cmdloc_dummy_var_258, out_cmdloc_dummy_var_259);
    return;

  exit:
    return;
}



procedure be_rx_cq_clean_loop_$bb30(in_$p0: ref, in_$p1: ref, in_$p67: ref, in_$i70: i16, in_$i71: i32, in_$i72: i16, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i16, in_$i79: i32, in_$i80: i16, in_$i81: i32, in_$i82: i1, in_cmdloc_dummy_var_258: [ref]i8, in_cmdloc_dummy_var_259: [ref]i8) returns (out_$i70: i16, out_$i71: i32, out_$i72: i16, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i16, out_$i79: i32, out_$i80: i16, out_$i81: i32, out_$i82: i1, out_cmdloc_dummy_var_258: [ref]i8, out_cmdloc_dummy_var_259: [ref]i8);
  modifies $M.0, $M.21, $CurrAddr;



implementation be_rx_cq_clean_loop_$bb1(in_$p0: ref, in_$p5: ref, in_$i6: i32, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i16, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i16, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i28: i1, in_$i29: i8, in_$i30: i1, in_$p35: ref, in_$i36: i16, in_$i37: i32, in_$i38: i16, in_$p40: ref, in_$i41: i16, in_$i42: i32, in_$i43: i16, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$i47: i1, in_$i39: i32) returns (out_$i6: i32, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i16, out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i16, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i28: i1, out_$i29: i8, out_$i30: i1, out_$p35: ref, out_$i36: i16, out_$i37: i32, out_$i38: i16, out_$p40: ref, out_$i41: i16, out_$i42: i32, out_$i43: i16, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$i47: i1, out_$i39: i32)
{

  entry:
    out_$i6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i28, out_$i29, out_$i30, out_$p35, out_$i36, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i39 := in_$i6, in_$p7, in_$i8, in_$i9, in_$p10, in_$p11, in_$p12, in_$i13, in_$i14, in_$i15, in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i28, in_$i29, in_$i30, in_$p35, in_$i36, in_$i37, in_$i38, in_$p40, in_$i41, in_$i42, in_$i43, in_$p44, in_$i45, in_$i46, in_$i47, in_$i39;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_4756;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    out_$i6 := out_$i39;
    goto corral_source_split_4839_dummy;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_4839;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i6;
    goto $bb23;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i22;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} __const_udelay(4295000);
    goto corral_source_split_4835;

  $bb17:
    assume 1 == 1;
    goto corral_source_split_4834;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb17, $bb18;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} be_cq_notify(in_$p5, out_$i38, 1, 0);
    goto corral_source_split_4832;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i32.i16(out_$i37);
    goto corral_source_split_4831;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i16.i32(out_$i36);
    goto corral_source_split_4830;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i16($M.0, out_$p35);
    goto corral_source_split_4829;

  $bb16:
    out_$p35 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 24760)), $mul.ref(48, 1)), $mul.ref(28, 1));
    goto corral_source_split_4828;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    out_$i30 := $trunc.i8.i1(out_$i29);
    goto corral_source_split_4820;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i1.i8(out_$i28);
    call {:si_unique_call 1001} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i29);
    goto corral_source_split_4819;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} out_$i28 := be_hw_error(in_$p5);
    goto corral_source_split_4818;

  $bb12:
    assume !(out_$i23 == 1);
    goto corral_source_split_4817;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    out_$i23 := $sgt.i32(out_$i6, 10);
    goto corral_source_split_4809;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i6, 1);
    call {:si_unique_call 998} {:cexpr "flush_wait"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_4808;

  $bb8:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, 57896);
    goto corral_source_split_4786;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i16.i32(out_$i19);
    goto corral_source_split_4785;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i16($M.0, out_$p18);
    goto corral_source_split_4784;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p17, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_4783;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_4782;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p5, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4781;

  $bb6:
    assume !(out_$i15 == 1);
    goto corral_source_split_4780;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, 57888);
    goto corral_source_split_4767;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i16.i32(out_$i13);
    goto corral_source_split_4766;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i16($M.0, out_$p12);
    goto corral_source_split_4765;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_4764;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_4763;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p5, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4762;

  $bb2:
    assume out_$i9 == 1;
    goto corral_source_split_4761;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i64(out_$i8, 0);
    goto corral_source_split_4759;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_4758;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} out_$p7 := be_rx_compl_get(in_$p0);
    goto corral_source_split_4757;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume !(1 == 1);
    goto corral_source_split_4837;

  $bb25:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i46, 0);
    goto corral_source_split_4778;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i8.i32(out_$i45);
    goto corral_source_split_4777;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i8($M.0, out_$p44);
    goto corral_source_split_4776;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p7, $mul.ref(0, 24)), $mul.ref(13, 1));
    goto corral_source_split_4775;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} be_cq_notify(in_$p5, out_$i43, 0, 1);
    goto corral_source_split_4774;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    out_$i43 := $trunc.i32.i16(out_$i42);
    goto corral_source_split_4773;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i16.i32(out_$i41);
    goto corral_source_split_4772;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i16($M.0, out_$p40);
    goto corral_source_split_4771;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} be_rx_compl_discard(in_$p0, out_$p7);
    out_$p40 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 24760)), $mul.ref(48, 1)), $mul.ref(28, 1));
    goto corral_source_split_4770;

  $bb3:
    assume !(out_$i9 == 1);
    goto corral_source_split_4769;

  corral_source_split_4839_dummy:
    call {:si_unique_call 1} out_$i6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i28, out_$i29, out_$i30, out_$p35, out_$i36, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i39 := be_rx_cq_clean_loop_$bb1(in_$p0, in_$p5, out_$i6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i28, out_$i29, out_$i30, out_$p35, out_$i36, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i39);
    return;

  exit:
    return;
}



procedure be_rx_cq_clean_loop_$bb1(in_$p0: ref, in_$p5: ref, in_$i6: i32, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i16, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i16, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i28: i1, in_$i29: i8, in_$i30: i1, in_$p35: ref, in_$i36: i16, in_$i37: i32, in_$i38: i16, in_$p40: ref, in_$i41: i16, in_$i42: i32, in_$i43: i16, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$i47: i1, in_$i39: i32) returns (out_$i6: i32, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i16, out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i16, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i28: i1, out_$i29: i8, out_$i30: i1, out_$p35: ref, out_$i36: i16, out_$i37: i32, out_$i38: i16, out_$p40: ref, out_$i41: i16, out_$i42: i32, out_$i43: i16, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$i47: i1, out_$i39: i32);
  modifies $M.0, $M.21, $CurrAddr;



implementation be_rx_compl_discard_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i6: i32, in_$p9: ref, in_$i10: i16, in_$i11: i32, in_$i12: i16, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i16, in_$i20: i32, in_$i21: i16, in_$i22: i32, in_$i23: i32, in_$i24: i16, in_$i25: i32, in_$i26: i1, in_$i8: i16, in_cmdloc_dummy_var_260: [ref]i8, in_cmdloc_dummy_var_261: [ref]i8) returns (out_$p9: ref, out_$i10: i16, out_$i11: i32, out_$i12: i16, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i16, out_$i20: i32, out_$i21: i16, out_$i22: i32, out_$i23: i32, out_$i24: i16, out_$i25: i32, out_$i26: i1, out_$i8: i16, out_cmdloc_dummy_var_260: [ref]i8, out_cmdloc_dummy_var_261: [ref]i8)
{

  entry:
    out_$p9, out_$i10, out_$i11, out_$i12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i8, out_cmdloc_dummy_var_260, out_cmdloc_dummy_var_261 := in_$p9, in_$i10, in_$i11, in_$i12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i8, in_cmdloc_dummy_var_260, in_cmdloc_dummy_var_261;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4997;

  $bb6:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i24;
    goto $bb6_dummy;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(out_$i25, in_$i6);
    goto corral_source_split_5018;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i16.i32(out_$i24);
    goto corral_source_split_5017;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    out_$i24 := $trunc.i32.i16(out_$i23);
    call {:si_unique_call 1031} {:cexpr "i"} boogie_si_record_i16(out_$i24);
    goto corral_source_split_5016;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i22, 1);
    goto corral_source_split_5015;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i16.i32(out_$i8);
    goto corral_source_split_5014;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} index_inc(out_$p17, out_$i21);
    goto corral_source_split_5013;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    out_$i21 := $trunc.i32.i16(out_$i20);
    goto corral_source_split_5012;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i16.i32(out_$i19);
    goto corral_source_split_5011;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i16($M.0, out_$p18);
    goto corral_source_split_5010;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    out_$p18 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 24760)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_5009;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_260 := $M.0;
    call {:si_unique_call 1029} out_cmdloc_dummy_var_261 := $memset.i8(out_cmdloc_dummy_var_260, out_$p16, 0, 24, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_261;
    goto corral_source_split_5008;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p13);
    goto corral_source_split_5007;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} put_page(out_$p15);
    goto corral_source_split_5006;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_5005;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p13, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5004;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} out_$p13 := get_rx_page_info(in_$p0, out_$i12);
    goto corral_source_split_5003;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    out_$i12 := $trunc.i32.i16(out_$i11);
    goto corral_source_split_5002;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i16.i32(out_$i10);
    goto corral_source_split_5001;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i16($M.0, out_$p9);
    goto corral_source_split_5000;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4999;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p9, out_$i10, out_$i11, out_$i12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i8, out_cmdloc_dummy_var_260, out_cmdloc_dummy_var_261 := be_rx_compl_discard_loop_$bb4(in_$p0, in_$p1, in_$i6, out_$p9, out_$i10, out_$i11, out_$i12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i8, out_cmdloc_dummy_var_260, out_cmdloc_dummy_var_261);
    return;

  exit:
    return;
}



procedure be_rx_compl_discard_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i6: i32, in_$p9: ref, in_$i10: i16, in_$i11: i32, in_$i12: i16, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i16, in_$i20: i32, in_$i21: i16, in_$i22: i32, in_$i23: i32, in_$i24: i16, in_$i25: i32, in_$i26: i1, in_$i8: i16, in_cmdloc_dummy_var_260: [ref]i8, in_cmdloc_dummy_var_261: [ref]i8) returns (out_$p9: ref, out_$i10: i16, out_$i11: i32, out_$i12: i16, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i16, out_$i20: i32, out_$i21: i16, out_$i22: i32, out_$i23: i32, out_$i24: i16, out_$i25: i32, out_$i26: i1, out_$i8: i16, out_cmdloc_dummy_var_260: [ref]i8, out_cmdloc_dummy_var_261: [ref]i8);
  modifies $M.0, $M.21, $CurrAddr;



implementation get_rx_page_info_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} get_rx_page_info_loop_$bb3();
    return;

  exit:
    return;
}



procedure get_rx_page_info_loop_$bb3();



implementation dma_unmap_page_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_unmap_page_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_unmap_page_loop_$bb3();



implementation be_tx_compl_process_loop_$bb5(in_$p0: ref, in_$p1: ref, in_$i2: i16, in_$p3: ref, in_$p10: ref, in_$i21: i16, in_$i22: i8, in_$p23: ref, in_$i24: i16, in_$p25: ref, in_$p26: ref, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i32, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i1, in_$i36: i32, in_$i37: i32, in_$i38: i16, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i42: i16) returns (out_$i21: i16, out_$i22: i8, out_$p23: ref, out_$i24: i16, out_$p25: ref, out_$p26: ref, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i32, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i1, out_$i36: i32, out_$i37: i32, out_$i38: i16, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i42: i16)
{

  entry:
    out_$i21, out_$i22, out_$p23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42 := in_$i21, in_$i22, in_$p23, in_$i24, in_$p25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p32, in_$p33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(30, 1));
    goto corral_source_split_5387;

  $bb12:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$i21, out_$i22 := out_$i38, 0;
    goto $bb12_dummy;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i38;
    assume true;
    goto $bb12;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i32(out_$i39, out_$i40);
    goto corral_source_split_5413;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i16.i32(in_$i2);
    goto corral_source_split_5412;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i16.i32(out_$i24);
    goto corral_source_split_5411;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} queue_tail_inc(in_$p3);
    goto corral_source_split_5410;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i32.i16(out_$i37);
    call {:si_unique_call 1202} {:cexpr "num_wrbs"} boogie_si_record_i16(out_$i38);
    goto corral_source_split_5409;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i36, 1);
    goto corral_source_split_5408;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i16.i32(out_$i21);
    goto corral_source_split_5407;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} unmap_tx_frag(out_$p34, out_$p26, out_$i35);
    goto corral_source_split_5406;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i31, 0);
    goto corral_source_split_5405;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p33, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_5404;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_5403;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5402;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5401;

  $bb7:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    out_$i31 := 0;
    goto $bb11;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i30;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5399;

  $bb9:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i30 := 0;
    goto $bb10;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    out_$i30 := 1;
    goto $bb10;

  $bb8:
    assume out_$i29 == 1;
    goto corral_source_split_5397;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_5395;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} out_$i28 := skb_headlen(in_$p10);
    call {:si_unique_call 1200} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_5394;

  $bb6:
    assume out_$i27 == 1;
    goto corral_source_split_5393;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    out_$i27 := $trunc.i8.i1(out_$i22);
    goto corral_source_split_5391;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(out_$p25);
    goto corral_source_split_5390;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} out_$p25 := queue_tail_node(in_$p3);
    goto corral_source_split_5389;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i16($M.0, out_$p23);
    call {:si_unique_call 1197} {:cexpr "cur_index"} boogie_si_record_i16(out_$i24);
    goto corral_source_split_5388;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i21, out_$i22, out_$p23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42 := be_tx_compl_process_loop_$bb5(in_$p0, in_$p1, in_$i2, in_$p3, in_$p10, out_$i21, out_$i22, out_$p23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42);
    return;

  exit:
    return;
}



procedure be_tx_compl_process_loop_$bb5(in_$p0: ref, in_$p1: ref, in_$i2: i16, in_$p3: ref, in_$p10: ref, in_$i21: i16, in_$i22: i8, in_$p23: ref, in_$i24: i16, in_$p25: ref, in_$p26: ref, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i32, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i1, in_$i36: i32, in_$i37: i32, in_$i38: i16, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i42: i16) returns (out_$i21: i16, out_$i22: i8, out_$p23: ref, out_$i24: i16, out_$p25: ref, out_$p26: ref, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i32, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i1, out_$i36: i32, out_$i37: i32, out_$i38: i16, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i42: i16);
  modifies $M.0;



implementation be_tx_compl_process_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} be_tx_compl_process_loop_$bb3();
    return;

  exit:
    return;
}



procedure be_tx_compl_process_loop_$bb3();



implementation wrb_cnt_for_skb_loop_$bb11()
{

  entry:
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb11_dummy:
    call {:si_unique_call 1} wrb_cnt_for_skb_loop_$bb11();
    return;

  exit:
    return;
}



procedure wrb_cnt_for_skb_loop_$bb11();



implementation dma_unmap_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_unmap_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_unmap_single_attrs_loop_$bb3();



implementation be_msix_register_loop_$bb17(in_$p0: ref, in_$i38: i32, in_$p39: ref, in_$i40: i32, in_$p41: ref, in_$i42: i1, in_$i36: i32, in_$p37: ref) returns (out_$i38: i32, out_$p39: ref, out_$i40: i32, out_$p41: ref, out_$i42: i1, out_$i36: i32, out_$p37: ref)
{

  entry:
    out_$i38, out_$p39, out_$i40, out_$p41, out_$i42, out_$i36, out_$p37 := in_$i38, in_$p39, in_$i40, in_$p41, in_$i42, in_$i36, in_$p37;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5720;

  $bb19:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i36, out_$p37 := out_$i40, out_$p41;
    goto $bb19_dummy;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    out_$i42 := $sge.i32(out_$i40, 0);
    goto corral_source_split_5727;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref(out_$p37, $mul.ref($sub.ref(0, 1), 272));
    goto corral_source_split_5726;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    out_$i40 := $sub.i32(out_$i36, 1);
    call {:si_unique_call 1270} {:cexpr "i"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_5725;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} free_irq(out_$i38, out_$p39);
    goto corral_source_split_5724;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    out_$p39 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_5723;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} out_$i38 := be_msix_vec_get(in_$p0, out_$p37);
    call {:si_unique_call 1268} {:cexpr "tmp"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_5722;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb19_dummy:
    call {:si_unique_call 1} out_$i38, out_$p39, out_$i40, out_$p41, out_$i42, out_$i36, out_$p37 := be_msix_register_loop_$bb17(in_$p0, out_$i38, out_$p39, out_$i40, out_$p41, out_$i42, out_$i36, out_$p37);
    return;

  exit:
    return;
}



procedure be_msix_register_loop_$bb17(in_$p0: ref, in_$i38: i32, in_$p39: ref, in_$i40: i32, in_$p41: ref, in_$i42: i1, in_$i36: i32, in_$p37: ref) returns (out_$i38: i32, out_$p39: ref, out_$i40: i32, out_$p41: ref, out_$i42: i1, out_$i36: i32, out_$p37: ref);



implementation be_msix_register_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p7: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$i10: i32, in_$p11: ref, in_vslice_dummy_var_468: i32) returns (out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$i10: i32, out_$p11: ref, out_vslice_dummy_var_468: i32)
{

  entry:
    out_$p12, out_$p13, out_$p14, out_$p15, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i10, out_$p11, out_vslice_dummy_var_468 := in_$p12, in_$p13, in_$p14, in_$p15, in_$i17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i10, in_$p11, in_vslice_dummy_var_468;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5686;

  $bb10:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i10, out_$p11 := out_$i25, out_$p26;
    goto $bb10_dummy;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    out_$i28 := $ult.i32(out_$i25, out_$i27);
    goto corral_source_split_5712;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, in_$p7);
    goto corral_source_split_5711;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p11, $mul.ref(1, 272));
    goto corral_source_split_5710;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i10, 1);
    call {:si_unique_call 1266} {:cexpr "i"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_5709;

  $bb7:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    out_$i23, out_$i24 := out_$i10, out_$i21;
    assume true;
    goto $bb7;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_5698;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} out_$i21 := request_irq(out_$i17, be_msix, 0, out_$p19, out_$p20);
    call {:si_unique_call 1264} {:cexpr "status"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_5697;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p11);
    goto corral_source_split_5696;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_5695;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p11, $mul.ref(0, 272)), $mul.ref(40, 1));
    goto corral_source_split_5694;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} out_$i17 := be_msix_vec_get(in_$p0, out_$p11);
    call {:si_unique_call 1262} {:cexpr "vec"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_5693;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} out_vslice_dummy_var_468 := sprintf.ref.ref.ref.i32(out_$p13, .str.99, out_$p15, out_$i10);
    goto corral_source_split_5692;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p14);
    goto corral_source_split_5691;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2784)), $mul.ref(0, 1));
    goto corral_source_split_5690;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    out_$p13 := $bitcast.ref.ref(out_$p12);
    goto corral_source_split_5689;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 272)), $mul.ref(40, 1));
    goto corral_source_split_5688;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$p14, out_$p15, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i10, out_$p11, out_vslice_dummy_var_468 := be_msix_register_loop_$bb4(in_$p0, in_$p2, in_$p7, out_$p12, out_$p13, out_$p14, out_$p15, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i10, out_$p11, out_vslice_dummy_var_468);
    return;

  exit:
    return;
}



procedure be_msix_register_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p7: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$i10: i32, in_$p11: ref, in_vslice_dummy_var_468: i32) returns (out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$i10: i32, out_$p11: ref, out_vslice_dummy_var_468: i32);



implementation be_post_rx_frags_loop_$bb1(in_$p0: ref, in_$i1: i32, in_$p3: ref, in_$p4: ref, in_$i17: i64, in_$i18: i1, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$i24: i32, in_$i25: i64, in_$i26: i64, in_$i27: i1, in_$p28: ref, in_$i29: i32, in_$p30: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$i45: i64, in_$i46: i64, in_$p47: ref, in_$i50: i16, in_$i51: i32, in_$i52: i16, in_$i53: i32, in_$i54: i32, in_$i55: i16, in_$p56: ref, in_$p48: ref, in_$i49: i64, in_$p57: ref, in_$i58: i16, in_$i59: i32, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i16, in_$i64: i64, in_$i65: i64, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$p69: ref, in_$i70: i64, in_$i71: i32, in_$p72: ref, in_$i73: i16, in_$i74: i32, in_$i75: i32, in_$i76: i16, in_$i77: i32, in_$i78: i32, in_$p79: ref, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$i87: i16, in_$i88: i64, in_$p89: ref, in_$i90: i32, in_$i91: i1, in_$i11: i32, in_$i12: i32, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p95: ref, in_$p96: ref, in_$i97: i64, in_$i98: i1, in_$p92: ref, in_$p93: ref, in_$i94: i32) returns (out_$i17: i64, out_$i18: i1, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$i24: i32, out_$i25: i64, out_$i26: i64, out_$i27: i1, out_$p28: ref, out_$i29: i32, out_$p30: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$i45: i64, out_$i46: i64, out_$p47: ref, out_$i50: i16, out_$i51: i32, out_$i52: i16, out_$i53: i32, out_$i54: i32, out_$i55: i16, out_$p56: ref, out_$p48: ref, out_$i49: i64, out_$p57: ref, out_$i58: i16, out_$i59: i32, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i16, out_$i64: i64, out_$i65: i64, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$p69: ref, out_$i70: i64, out_$i71: i32, out_$p72: ref, out_$i73: i16, out_$i74: i32, out_$i75: i32, out_$i76: i16, out_$i77: i32, out_$i78: i32, out_$p79: ref, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$i87: i16, out_$i88: i64, out_$p89: ref, out_$i90: i32, out_$i91: i1, out_$i11: i32, out_$i12: i32, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p95: ref, out_$p96: ref, out_$i97: i64, out_$i98: i1, out_$p92: ref, out_$p93: ref, out_$i94: i32)
{

  entry:
    out_$i17, out_$i18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$p30, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p48, out_$i49, out_$p57, out_$i58, out_$i59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$p95, out_$p96, out_$i97, out_$i98, out_$p92, out_$p93, out_$i94 := in_$i17, in_$i18, in_$p19, in_$i20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$p28, in_$i29, in_$p30, in_$p40, in_$p41, in_$p42, in_$p43, in_$i44, in_$i45, in_$i46, in_$p47, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p56, in_$p48, in_$i49, in_$p57, in_$i58, in_$i59, in_$p60, in_$p61, in_$p62, in_$i63, in_$i64, in_$i65, in_$p66, in_$p67, in_$i68, in_$p69, in_$i70, in_$i71, in_$p72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$p79, in_$i80, in_$i81, in_$p82, in_$p83, in_$p84, in_$p85, in_$p86, in_$i87, in_$i88, in_$p89, in_$i90, in_$i91, in_$i11, in_$i12, in_$i13, in_$p14, in_$p15, in_$p16, in_$p95, in_$p96, in_$i97, in_$i98, in_$p92, in_$p93, in_$i94;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6061;

  $bb13:
    assume out_$i91 == 1;
    assume {:verifier.code 0} true;
    out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16 := out_$i59, out_$i90, out_$i49, out_$p89, out_$p14, out_$p83;
    goto $bb13_dummy;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    out_$p92, out_$p93, out_$i94 := out_$p83, out_$p14, out_$i90;
    assume true;
    goto $bb13;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    out_$i91 := $ule.i32(out_$i90, 63);
    goto corral_source_split_6155;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    out_$i90 := $add.i32(out_$i12, 1);
    call {:si_unique_call 1350} {:cexpr "posted"} boogie_si_record_i32(out_$i90);
    goto corral_source_split_6154;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref(out_$p85, $mul.ref(out_$i88, 24));
    goto corral_source_split_6153;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i16.i64(out_$i87);
    goto corral_source_split_6152;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i16($M.0, out_$p86);
    goto corral_source_split_6151;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    out_$p85 := $bitcast.ref.ref(out_$p84);
    out_$p86 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 24760)), $mul.ref(8, 1)), $mul.ref(32, 1));
    goto corral_source_split_6150;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p0, $mul.ref(0, 24760)), $mul.ref(112, 1));
    goto corral_source_split_6149;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} queue_head_inc(in_$p4);
    goto corral_source_split_6148;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6147;

  $bb11:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    out_$p83 := out_$p48;
    goto $bb12;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    out_$p83 := $0.ref;
    goto $bb12;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p82, 1);
    goto corral_source_split_6145;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p14, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_6144;

  $bb10:
    assume out_$i81 == 1;
    goto corral_source_split_6143;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    out_$i81 := $ugt.i32(out_$i78, out_$i80);
    goto corral_source_split_6141;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.0, out_$p79);
    goto corral_source_split_6140;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p3, $mul.ref(0, 364320)), $mul.ref(359208, 1));
    goto corral_source_split_6139;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    out_$i78 := $add.i32(out_$i75, out_$i77);
    goto corral_source_split_6138;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i16.i32(out_$i76);
    goto corral_source_split_6137;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    out_$i76 := $M.33;
    goto corral_source_split_6136;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i32(out_$i74, out_$i59);
    goto corral_source_split_6135;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    out_$i74 := $zext.i16.i32(out_$i73);
    goto corral_source_split_6134;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    out_$i73 := $M.33;
    goto corral_source_split_6133;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p72, out_$i71);
    goto corral_source_split_6132;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p67, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6131;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    out_$i71 := $trunc.i64.i32(out_$i70);
    goto corral_source_split_6130;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    out_$i70 := $lshr.i64(out_$i65, 32);
    goto corral_source_split_6129;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p69, out_$i68);
    goto corral_source_split_6128;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p67, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6127;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    out_$i68 := $trunc.i64.i32(out_$i65);
    goto corral_source_split_6126;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    out_$p67 := $bitcast.ref.ref(out_$p66);
    goto corral_source_split_6125;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} out_$p66 := queue_head_node(in_$p4);
    goto corral_source_split_6124;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i64(out_$i64, out_$i49);
    call {:si_unique_call 1347} {:cexpr "frag_dmaaddr"} boogie_si_record_i64(out_$i65);
    goto corral_source_split_6123;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i16.i64(out_$i63);
    goto corral_source_split_6122;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i16($M.0, out_$p62);
    goto corral_source_split_6121;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p14, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6120;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p61, out_$i49);
    goto corral_source_split_6119;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p14, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6118;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p60, out_$p48);
    goto corral_source_split_6117;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p14, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6116;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i16.i32(out_$i58);
    call {:si_unique_call 1346} {:cexpr "page_offset"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_6115;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i16($M.0, out_$p57);
    goto corral_source_split_6114;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p14, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6113;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6112;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p56, out_$i55);
    assume {:verifier.code 0} true;
    out_$p48, out_$i49 := out_$p16, out_$i13;
    goto $bb9;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    out_$p48, out_$i49 := out_$p21, out_$i46;
    goto $bb9;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p47, 0);
    goto corral_source_split_6110;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p14, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6109;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} out_$i46 := dma_map_page(out_$p42, out_$p21, 0, out_$i45, 2);
    call {:si_unique_call 1345} {:cexpr "page_dmaaddr"} boogie_si_record_i64(out_$i46);
    goto corral_source_split_6108;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i32.i64(out_$i44);
    goto corral_source_split_6107;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, out_$p43);
    goto corral_source_split_6106;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p3, $mul.ref(0, 364320)), $mul.ref(359208, 1));
    goto corral_source_split_6105;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p41, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_6104;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_6103;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p3, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6102;

  $bb6:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    out_$p28, out_$i29, out_$p30 := out_$p15, out_$i12, out_$p21;
    assume true;
    goto $bb6;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i64(out_$i26, 0);
    goto corral_source_split_6079;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} out_$i26 := ldv__builtin_expect(out_$i25, 0);
    call {:si_unique_call 1342} {:cexpr "tmp"} boogie_si_record_i64(out_$i26);
    goto corral_source_split_6078;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i24);
    goto corral_source_split_6077;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i1.i32(out_$i23);
    goto corral_source_split_6076;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i64(out_$i22, 0);
    goto corral_source_split_6075;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_6074;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} out_$p21 := be_alloc_pages(out_$i20, in_$i1);
    goto corral_source_split_6073;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    goto corral_source_split_6072;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p3, $mul.ref(0, 364320)), $mul.ref(359208, 1));
    goto corral_source_split_6071;

  $bb3:
    assume out_$i18 == 1;
    goto corral_source_split_6070;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i64(out_$i17, 0);
    goto corral_source_split_6068;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(out_$p16);
    goto corral_source_split_6067;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb16:
    assume out_$i98 == 1;
    goto corral_source_split_6157;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    out_$p92, out_$p93, out_$i94 := out_$p16, out_$p15, out_$i12;
    assume true;
    goto $bb16;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i64(out_$i97, 0);
    goto corral_source_split_6065;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    out_$i97 := $p2i.ref.i64(out_$p96);
    goto corral_source_split_6064;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    out_$p96 := $load.ref($M.0, out_$p95);
    goto corral_source_split_6063;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p14, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6062;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p14, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6089;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    out_$i55 := $trunc.i32.i16(out_$i54);
    goto corral_source_split_6088;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i51, out_$i53);
    goto corral_source_split_6087;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i16.i32(out_$i52);
    goto corral_source_split_6086;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    out_$i52 := $M.33;
    goto corral_source_split_6085;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i16.i32(out_$i50);
    goto corral_source_split_6084;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    out_$i50 := $trunc.i32.i16(out_$i11);
    goto corral_source_split_6083;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} get_page(out_$p16);
    goto corral_source_split_6082;

  $bb4:
    assume !(out_$i18 == 1);
    goto corral_source_split_6081;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i17, out_$i18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$p30, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p48, out_$i49, out_$p57, out_$i58, out_$i59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$p95, out_$p96, out_$i97, out_$i98, out_$p92, out_$p93, out_$i94 := be_post_rx_frags_loop_$bb1(in_$p0, in_$i1, in_$p3, in_$p4, out_$i17, out_$i18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$p30, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p48, out_$i49, out_$p57, out_$i58, out_$i59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$p95, out_$p96, out_$i97, out_$i98, out_$p92, out_$p93, out_$i94);
    return;

  exit:
    return;
}



procedure be_post_rx_frags_loop_$bb1(in_$p0: ref, in_$i1: i32, in_$p3: ref, in_$p4: ref, in_$i17: i64, in_$i18: i1, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$i24: i32, in_$i25: i64, in_$i26: i64, in_$i27: i1, in_$p28: ref, in_$i29: i32, in_$p30: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$i45: i64, in_$i46: i64, in_$p47: ref, in_$i50: i16, in_$i51: i32, in_$i52: i16, in_$i53: i32, in_$i54: i32, in_$i55: i16, in_$p56: ref, in_$p48: ref, in_$i49: i64, in_$p57: ref, in_$i58: i16, in_$i59: i32, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i16, in_$i64: i64, in_$i65: i64, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$p69: ref, in_$i70: i64, in_$i71: i32, in_$p72: ref, in_$i73: i16, in_$i74: i32, in_$i75: i32, in_$i76: i16, in_$i77: i32, in_$i78: i32, in_$p79: ref, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$i87: i16, in_$i88: i64, in_$p89: ref, in_$i90: i32, in_$i91: i1, in_$i11: i32, in_$i12: i32, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p95: ref, in_$p96: ref, in_$i97: i64, in_$i98: i1, in_$p92: ref, in_$p93: ref, in_$i94: i32) returns (out_$i17: i64, out_$i18: i1, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$i24: i32, out_$i25: i64, out_$i26: i64, out_$i27: i1, out_$p28: ref, out_$i29: i32, out_$p30: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$i45: i64, out_$i46: i64, out_$p47: ref, out_$i50: i16, out_$i51: i32, out_$i52: i16, out_$i53: i32, out_$i54: i32, out_$i55: i16, out_$p56: ref, out_$p48: ref, out_$i49: i64, out_$p57: ref, out_$i58: i16, out_$i59: i32, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i16, out_$i64: i64, out_$i65: i64, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$p69: ref, out_$i70: i64, out_$i71: i32, out_$p72: ref, out_$i73: i16, out_$i74: i32, out_$i75: i32, out_$i76: i16, out_$i77: i32, out_$i78: i32, out_$p79: ref, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$i87: i16, out_$i88: i64, out_$p89: ref, out_$i90: i32, out_$i91: i1, out_$i11: i32, out_$i12: i32, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p95: ref, out_$p96: ref, out_$i97: i64, out_$i98: i1, out_$p92: ref, out_$p93: ref, out_$i94: i32);
  modifies $M.0, $M.21, $CurrAddr;



implementation dma_map_page_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_map_page_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_map_page_loop_$bb3();



implementation get_page_loop_$bb10()
{

  entry:
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb10_dummy:
    call {:si_unique_call 1} get_page_loop_$bb10();
    return;

  exit:
    return;
}



procedure get_page_loop_$bb10();



implementation be_cmd_page_addrs_prepare_loop_$bb7(in_$p0: ref, in_$i15: i32, in_$i21: i32, in_$i22: i64, in_$p24: ref, in_$i25: i64, in_$i26: i32, in_$i27: i64, in_$p29: ref, in_$i30: i64, in_$i31: i32, in_$i32: i1, in_$i19: i64, in_$i20: i32) returns (out_$i21: i32, out_$i22: i64, out_$p24: ref, out_$i25: i64, out_$i26: i32, out_$i27: i64, out_$p29: ref, out_$i30: i64, out_$i31: i32, out_$i32: i1, out_$i19: i64, out_$i20: i32)
{

  entry:
    out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$p29, out_$i30, out_$i31, out_$i32, out_$i19, out_$i20 := in_$i21, in_$i22, in_$p24, in_$i25, in_$i26, in_$i27, in_$p29, in_$i30, in_$i31, in_$i32, in_$i19, in_$i20;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6341;

  $bb9:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i19, out_$i20 := out_$i30, out_$i31;
    goto $bb9_dummy;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i31, in_$i15);
    goto corral_source_split_6356;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i32(out_$i20, 1);
    call {:si_unique_call 1436} {:cexpr "i"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_6355;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i64(out_$i19, 4096);
    call {:si_unique_call 1435} {:cexpr "dma"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_6354;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p29, out_$i26);
    goto corral_source_split_6353;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p0, $mul.ref(out_$i27, 8)), $mul.ref(4, 1));
    goto corral_source_split_6352;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    goto corral_source_split_6351;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i20);
    goto corral_source_split_6350;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    out_$i26 := $trunc.i64.i32(out_$i25);
    goto corral_source_split_6349;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    out_$i25 := $lshr.i64(out_$i19, 32);
    goto corral_source_split_6348;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p24, out_$i21);
    goto corral_source_split_6347;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p0, $mul.ref(out_$i22, 8)), $mul.ref(0, 1));
    goto corral_source_split_6346;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    goto corral_source_split_6345;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i20);
    goto corral_source_split_6344;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i21 := $trunc.i64.i32(out_$i19);
    goto corral_source_split_6343;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$p29, out_$i30, out_$i31, out_$i32, out_$i19, out_$i20 := be_cmd_page_addrs_prepare_loop_$bb7(in_$p0, in_$i15, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$p29, out_$i30, out_$i31, out_$i32, out_$i19, out_$i20);
    return;

  exit:
    return;
}



procedure be_cmd_page_addrs_prepare_loop_$bb7(in_$p0: ref, in_$i15: i32, in_$i21: i32, in_$i22: i64, in_$p24: ref, in_$i25: i64, in_$i26: i32, in_$i27: i64, in_$p29: ref, in_$i30: i64, in_$i31: i32, in_$i32: i1, in_$i19: i64, in_$i20: i32) returns (out_$i21: i32, out_$i22: i64, out_$p24: ref, out_$i25: i64, out_$i26: i32, out_$i27: i64, out_$p29: ref, out_$i30: i64, out_$i31: i32, out_$i32: i1, out_$i19: i64, out_$i20: i32);
  modifies $M.0;



implementation be_msix_enable_loop_$bb28(in_$p0: ref, in_$i38: i32, in_$i41: i16, in_$i42: i64, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i40: i32) returns (out_$i41: i16, out_$i42: i64, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i40: i32)
{

  entry:
    out_$i41, out_$i42, out_$p45, out_$i46, out_$i47, out_$i40 := in_$i41, in_$i42, in_$p45, in_$i46, in_$i47, in_$i40;
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_6535;

  $bb30:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i40 := out_$i46;
    goto $bb30_dummy;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i46, in_$i38);
    goto corral_source_split_6542;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i40, 1);
    call {:si_unique_call 1459} {:cexpr "i"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_6541;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p45, out_$i41);
    goto corral_source_split_6540;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(4024, 1)), $mul.ref(out_$i42, 8)), $mul.ref(4, 1));
    goto corral_source_split_6539;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i32.i64(out_$i40);
    goto corral_source_split_6538;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i41 := $trunc.i32.i16(out_$i40);
    goto corral_source_split_6537;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb30_dummy:
    call {:si_unique_call 1} out_$i41, out_$i42, out_$p45, out_$i46, out_$i47, out_$i40 := be_msix_enable_loop_$bb28(in_$p0, in_$i38, out_$i41, out_$i42, out_$p45, out_$i46, out_$i47, out_$i40);
    return;

  exit:
    return;
}



procedure be_msix_enable_loop_$bb28(in_$p0: ref, in_$i38: i32, in_$i41: i16, in_$i42: i64, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i40: i32) returns (out_$i41: i16, out_$i42: i64, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i40: i32);
  modifies $M.0;



implementation be_evt_queues_create_loop_$bb7(in_$p0: ref, in_$p12: ref, in_$p17: ref, in_$p18: ref, in_$i19: i8, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i15: i32, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$i19: i8, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i15: i32, out_$p16: ref)
{

  entry:
    out_$p17, out_$p18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i15, out_$p16 := in_$p17, in_$p18, in_$i19, in_$p20, in_$p21, in_$p22, in_$p23, in_$i24, in_$i25, in_$i26, in_$p28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i15, in_$p16;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6647;

  $bb16:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$i15, out_$p16 := out_$i33, out_$p34;
    goto $bb16_dummy;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    out_$i36 := $ult.i32(out_$i33, out_$i35);
    goto corral_source_split_6678;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, in_$p12);
    goto corral_source_split_6677;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(out_$p16, $mul.ref(1, 272));
    goto corral_source_split_6676;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i15, 1);
    call {:si_unique_call 1470} {:cexpr "i"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_6675;

  $bb14:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i30;
    assume true;
    goto $bb14;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_6671;

  SeqInstr_204:
    call {:si_unique_call 1469} {:cexpr "rc"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_6670;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} out_$i30 := be_cmd_eq_create(in_$p0, out_$p23, out_$i29);
    goto SeqInstr_203;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.0, out_$p28);
    goto corral_source_split_6669;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p16, $mul.ref(0, 272)), $mul.ref(88, 1));
    goto corral_source_split_6668;

  $bb10:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i24;
    assume true;
    goto $bb10;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i24, 0);
    goto corral_source_split_6662;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} out_$i24 := be_queue_alloc(in_$p0, out_$p23, 1024, 4);
    call {:si_unique_call 1467} {:cexpr "rc"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_6661;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p16, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_6660;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p22, 1);
    goto corral_source_split_6659;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p16, $mul.ref(0, 272)), $mul.ref(72, 1));
    goto corral_source_split_6658;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p21, 96);
    goto corral_source_split_6657;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p16, $mul.ref(0, 272)), $mul.ref(80, 1));
    goto corral_source_split_6656;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p20, out_$i19);
    goto corral_source_split_6655;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p16, $mul.ref(0, 272)), $mul.ref(92, 1));
    goto corral_source_split_6654;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    out_$i19 := $trunc.i32.i8(out_$i15);
    goto corral_source_split_6653;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p18, 256);
    goto corral_source_split_6652;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p16, $mul.ref(0, 272)), $mul.ref(94, 1));
    goto corral_source_split_6651;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p17, in_$p0);
    goto corral_source_split_6650;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 272)), $mul.ref(264, 1));
    goto corral_source_split_6649;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i15, out_$p16 := be_evt_queues_create_loop_$bb7(in_$p0, in_$p12, out_$p17, out_$p18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i15, out_$p16);
    return;

  exit:
    return;
}



procedure be_evt_queues_create_loop_$bb7(in_$p0: ref, in_$p12: ref, in_$p17: ref, in_$p18: ref, in_$i19: i8, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i15: i32, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$i19: i8, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i15: i32, out_$p16: ref);
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_tx_cqs_create_loop_$bb7(in_$p0: ref, in_$p15: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i25: i32, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i64, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i8, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i18: i8, in_$p19: ref) returns (out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i25: i32, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i64, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i8, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i18: i8, out_$p19: ref)
{

  entry:
    out_$p20, out_$i21, out_$i22, out_$i23, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i18, out_$p19 := in_$p20, in_$i21, in_$i22, in_$i23, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i18, in_$p19;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6709;

  $bb16:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i18, out_$p19 := out_$i38, out_$p39;
    goto $bb16_dummy;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    out_$i42 := $ult.i32(out_$i40, out_$i41);
    goto corral_source_split_6736;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.0, in_$p15);
    goto corral_source_split_6735;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i8.i32(out_$i38);
    goto corral_source_split_6734;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(out_$p19, $mul.ref(1, 16528));
    goto corral_source_split_6733;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i32.i8(out_$i37);
    call {:si_unique_call 1480} {:cexpr "i"} boogie_si_record_i8(out_$i38);
    goto corral_source_split_6732;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i36, 1);
    goto corral_source_split_6731;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i8.i32(out_$i18);
    goto corral_source_split_6730;

  $bb14:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i33;
    assume true;
    goto $bb14;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i33, 0);
    goto corral_source_split_6726;

  SeqInstr_207:
    call {:si_unique_call 1479} {:cexpr "status"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_6725;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} out_$i33 := be_cmd_cq_create(in_$p0, out_$p20, out_$p32, 0, 3);
    goto SeqInstr_206;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(488, 1)), $mul.ref(out_$i29, 272)), $mul.ref(0, 1));
    goto corral_source_split_6724;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i32.i64(out_$i28);
    goto corral_source_split_6723;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    out_$i28 := $urem.i32(out_$i25, out_$i27);
    goto corral_source_split_6722;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_6721;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(484, 1));
    goto corral_source_split_6720;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i8.i32(out_$i18);
    goto corral_source_split_6719;

  $bb10:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i21;
    assume true;
    goto $bb10;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_6713;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} out_$i21 := be_queue_alloc(in_$p0, out_$p20, 1024, 16);
    call {:si_unique_call 1477} {:cexpr "status"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_6712;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 16528)), $mul.ref(48, 1));
    goto corral_source_split_6711;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p20, out_$i21, out_$i22, out_$i23, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i18, out_$p19 := be_tx_cqs_create_loop_$bb7(in_$p0, in_$p15, out_$p20, out_$i21, out_$i22, out_$i23, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i18, out_$p19);
    return;

  exit:
    return;
}



procedure be_tx_cqs_create_loop_$bb7(in_$p0: ref, in_$p15: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i25: i32, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i64, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i8, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i18: i8, in_$p19: ref) returns (out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i25: i32, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i64, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i8, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i18: i8, out_$p19: ref);
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_rx_cqs_create_loop_$bb16(in_$p0: ref, in_$p36: ref, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$p47: ref, in_$i48: i32, in_$i49: i32, in_$i50: i64, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i32, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$i39: i32, in_$p40: ref) returns (out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$p47: ref, out_$i48: i32, out_$i49: i32, out_$i50: i64, out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i32, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$i39: i32, out_$p40: ref)
{

  entry:
    out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p47, out_$i48, out_$i49, out_$i50, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i39, out_$p40 := in_$p41, in_$p42, in_$i43, in_$i44, in_$i45, in_$p47, in_$i48, in_$i49, in_$i50, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$p58, in_$i59, in_$i60, in_$i39, in_$p40;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6799;

  $bb25:
    assume out_$i60 == 1;
    assume {:verifier.code 0} true;
    out_$i39, out_$p40 := out_$i57, out_$p58;
    goto $bb25_dummy;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    out_$i60 := $ult.i32(out_$i57, out_$i59);
    goto corral_source_split_6824;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.0, in_$p36);
    goto corral_source_split_6823;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref(out_$p40, $mul.ref(1, 24760));
    goto corral_source_split_6822;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i57 := $add.i32(out_$i39, 1);
    call {:si_unique_call 1490} {:cexpr "i"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_6821;

  $bb23:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    out_$i56 := out_$i54;
    assume true;
    goto $bb23;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i32(out_$i54, 0);
    goto corral_source_split_6817;

  SeqInstr_210:
    call {:si_unique_call 1489} {:cexpr "rc"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_6816;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} out_$i54 := be_cmd_cq_create(in_$p0, out_$p42, out_$p53, 0, 3);
    goto SeqInstr_209;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(488, 1)), $mul.ref(out_$i50, 272)), $mul.ref(0, 1));
    goto corral_source_split_6815;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i32.i64(out_$i49);
    goto corral_source_split_6814;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    out_$i49 := $urem.i32(out_$i39, out_$i48);
    goto corral_source_split_6813;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, out_$p47);
    goto corral_source_split_6812;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(484, 1));
    goto corral_source_split_6811;

  $bb19:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i43;
    assume true;
    goto $bb19;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i32(out_$i43, 0);
    goto corral_source_split_6805;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} out_$i43 := be_queue_alloc(in_$p0, out_$p42, 1024, 16);
    call {:si_unique_call 1487} {:cexpr "rc"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_6804;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p40, $mul.ref(0, 24760)), $mul.ref(48, 1));
    goto corral_source_split_6803;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p41, in_$p0);
    goto corral_source_split_6802;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p40, $mul.ref(0, 24760)), $mul.ref(0, 1));
    goto corral_source_split_6801;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p47, out_$i48, out_$i49, out_$i50, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i39, out_$p40 := be_rx_cqs_create_loop_$bb16(in_$p0, in_$p36, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p47, out_$i48, out_$i49, out_$i50, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i39, out_$p40);
    return;

  exit:
    return;
}



procedure be_rx_cqs_create_loop_$bb16(in_$p0: ref, in_$p36: ref, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$p47: ref, in_$i48: i32, in_$i49: i32, in_$i50: i64, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i32, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$i39: i32, in_$p40: ref) returns (out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$p47: ref, out_$i48: i32, out_$i49: i32, out_$i50: i64, out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i32, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$i39: i32, out_$p40: ref);
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_tx_qs_create_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$i18: i32, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$p8: ref, in_$i9: i32) returns (out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$i18: i32, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$p8: ref, out_$i9: i32)
{

  entry:
    out_$p10, out_$i11, out_$i12, out_$i13, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$p8, out_$i9 := in_$p10, in_$i11, in_$i12, in_$i13, in_$i15, in_$i16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21, in_$p8, in_$i9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7136;

  $bb13:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$p8, out_$i9 := out_$p19, out_$i18;
    goto $bb13_dummy;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    out_$i21 := $ult.i32(out_$i18, out_$i20);
    goto corral_source_split_7154;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, in_$p5);
    goto corral_source_split_7153;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(out_$p8, $mul.ref(1, 16528));
    goto corral_source_split_7152;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i9, 1);
    call {:si_unique_call 1552} {:cexpr "i"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_7151;

  $bb11:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i15;
    assume true;
    goto $bb11;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(out_$i15, 0);
    goto corral_source_split_7147;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} out_$i15 := be_cmd_txq_create(in_$p0, out_$p8);
    call {:si_unique_call 1551} {:cexpr "status"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_7146;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i11;
    assume true;
    goto $bb7;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i32(out_$i11, 0);
    goto corral_source_split_7140;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} out_$i11 := be_queue_alloc(in_$p0, out_$p10, 2048, 16);
    call {:si_unique_call 1549} {:cexpr "status"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_7139;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p8, $mul.ref(0, 16528)), $mul.ref(8, 1));
    goto corral_source_split_7138;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p10, out_$i11, out_$i12, out_$i13, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$p8, out_$i9 := be_tx_qs_create_loop_$bb4(in_$p0, in_$p5, out_$p10, out_$i11, out_$i12, out_$i13, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$p8, out_$i9);
    return;

  exit:
    return;
}



procedure be_tx_qs_create_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$i18: i32, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$p8: ref, in_$i9: i32) returns (out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$i18: i32, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$p8: ref, out_$i9: i32);
  modifies $M.0, $M.21, $CurrAddr;



implementation be_vid_config_loop_$bb9(in_$p0: ref, in_$p1: ref, in_$i15: i32, in_$i16: i64, in_$p18: ref, in_$i19: i8, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i32, in_$i24: i16, in_$i25: i32, in_$i26: i64, in_$p27: ref, in_$i28: i16, in_$i29: i32, in_$i30: i32, in_$i31: i16, in_$i32: i32, in_$i33: i1, in_$i13: i16, in_$i14: i16, in_$i34: i16) returns (out_$i15: i32, out_$i16: i64, out_$p18: ref, out_$i19: i8, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i32, out_$i24: i16, out_$i25: i32, out_$i26: i64, out_$p27: ref, out_$i28: i16, out_$i29: i32, out_$i30: i32, out_$i31: i16, out_$i32: i32, out_$i33: i1, out_$i13: i16, out_$i14: i16, out_$i34: i16)
{

  entry:
    out_$i15, out_$i16, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i13, out_$i14, out_$i34 := in_$i15, in_$i16, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i13, in_$i14, in_$i34;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7222;

  $bb14:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$i13, out_$i14 := out_$i28, out_$i31;
    goto $bb14_dummy;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i28;
    assume true;
    goto $bb14;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    out_$i33 := $ule.i32(out_$i32, 4095);
    goto corral_source_split_7245;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i16.i32(out_$i31);
    goto corral_source_split_7244;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    out_$i31 := $trunc.i32.i16(out_$i30);
    call {:si_unique_call 1568} {:cexpr "i"} boogie_si_record_i16(out_$i31);
    goto corral_source_split_7243;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i29, 1);
    goto corral_source_split_7242;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i16.i32(out_$i14);
    goto corral_source_split_7241;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_7240;

  $bb12:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    out_$i28 := out_$i13;
    goto $bb13;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i24;
    goto $bb13;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p27, out_$i14);
    goto corral_source_split_7238;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p1, $mul.ref(0, 128)), $mul.ref(out_$i26, 2));
    goto corral_source_split_7237;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i25);
    goto corral_source_split_7236;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i16.i32(out_$i13);
    goto corral_source_split_7235;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    out_$i24 := $trunc.i32.i16(out_$i23);
    call {:si_unique_call 1567} {:cexpr "num"} boogie_si_record_i16(out_$i24);
    goto corral_source_split_7234;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i22, 1);
    goto corral_source_split_7233;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i16.i32(out_$i13);
    goto corral_source_split_7232;

  $bb11:
    assume out_$i21 == 1;
    goto corral_source_split_7231;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i32(out_$i20, 0);
    goto corral_source_split_7229;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i8.i32(out_$i19);
    goto corral_source_split_7228;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i8($M.0, out_$p18);
    goto corral_source_split_7227;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(359346, 1)), $mul.ref(out_$i16, 1));
    goto corral_source_split_7226;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i15);
    goto corral_source_split_7225;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i16.i32(out_$i14);
    goto corral_source_split_7224;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i15, out_$i16, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i13, out_$i14, out_$i34 := be_vid_config_loop_$bb9(in_$p0, in_$p1, out_$i15, out_$i16, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i13, out_$i14, out_$i34);
    return;

  exit:
    return;
}



procedure be_vid_config_loop_$bb9(in_$p0: ref, in_$p1: ref, in_$i15: i32, in_$i16: i64, in_$p18: ref, in_$i19: i8, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i32, in_$i24: i16, in_$i25: i32, in_$i26: i64, in_$p27: ref, in_$i28: i16, in_$i29: i32, in_$i30: i32, in_$i31: i16, in_$i32: i32, in_$i33: i1, in_$i13: i16, in_$i14: i16, in_$i34: i16) returns (out_$i15: i32, out_$i16: i64, out_$p18: ref, out_$i19: i8, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i32, out_$i24: i16, out_$i25: i32, out_$i26: i64, out_$p27: ref, out_$i28: i16, out_$i29: i32, out_$i30: i32, out_$i31: i16, out_$i32: i32, out_$i33: i1, out_$i13: i16, out_$i14: i16, out_$i34: i16);
  modifies $M.0;



implementation be_set_rx_mode_loop_$bb33(in_$p2: ref, in_$p74: ref, in_$p81: ref, in_$i82: i32, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i32, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$i92: i32, in_$i93: i64, in_$p94: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$p102: ref, in_$p104: ref, in_$i105: i64, in_$i106: i1, in_$p80: ref, in_vslice_dummy_var_486: i32) returns (out_$p81: ref, out_$i82: i32, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i32, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$i92: i32, out_$i93: i64, out_$p94: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$p102: ref, out_$p104: ref, out_$i105: i64, out_$i106: i1, out_$p80: ref, out_vslice_dummy_var_486: i32)
{

  entry:
    out_$p81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$p89, out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$p102, out_$p104, out_$i105, out_$i106, out_$p80, out_vslice_dummy_var_486 := in_$p81, in_$i82, in_$i83, in_$p84, in_$p85, in_$p86, in_$p87, in_$i88, in_$p89, in_$p90, in_$p91, in_$i92, in_$i93, in_$p94, in_$p97, in_$p98, in_$p99, in_$p100, in_$i101, in_$p102, in_$p104, in_$i105, in_$i106, in_$p80, in_vslice_dummy_var_486;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_7369;

  $bb35:
    assume out_$i106 == 1;
    assume {:verifier.code 0} true;
    out_$p80 := out_$p98;
    goto $bb35_dummy;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    out_$i106 := $ne.i64(out_$i101, out_$i105);
    goto corral_source_split_7395;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    out_$i105 := $p2i.ref.i64(out_$p104);
    goto corral_source_split_7394;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref($add.ref(out_$p102, $mul.ref(0, 2784)), $mul.ref(568, 1)), $mul.ref(0, 1));
    goto corral_source_split_7393;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    out_$p102 := $load.ref($M.0, in_$p74);
    goto corral_source_split_7392;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    out_$i101 := $p2i.ref.i64(out_$p100);
    goto corral_source_split_7391;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p99, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_7390;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    out_$p99 := $bitcast.ref.ref(out_$p98);
    goto corral_source_split_7389;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    out_$p98 := $load.ref($M.0, out_$p97);
    goto corral_source_split_7388;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref($add.ref(out_$p80, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7387;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} out_vslice_dummy_var_486 := be_cmd_pmac_add(in_$p2, out_$p86, out_$i88, out_$p94, 0);
    goto corral_source_split_7386;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref(out_$p90, $mul.ref(out_$i93, 4));
    goto corral_source_split_7385;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    out_$i93 := $zext.i32.i64(out_$i92);
    goto corral_source_split_7384;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i32($M.0, out_$p91);
    goto corral_source_split_7383;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(in_$p2, $mul.ref(0, 364320)), $mul.ref(364272, 1));
    goto corral_source_split_7382;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    out_$p90 := $load.ref($M.0, out_$p89);
    goto corral_source_split_7381;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p2, $mul.ref(0, 364320)), $mul.ref(364000, 1));
    goto corral_source_split_7380;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i32($M.0, out_$p87);
    goto corral_source_split_7379;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p2, $mul.ref(0, 364320)), $mul.ref(363992, 1));
    goto corral_source_split_7378;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    out_$p86 := $bitcast.ref.ref(out_$p85);
    goto corral_source_split_7377;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p80, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_7376;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p84, out_$i83);
    goto corral_source_split_7375;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p2, $mul.ref(0, 364320)), $mul.ref(364272, 1));
    goto corral_source_split_7374;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    out_$i83 := $add.i32(out_$i82, 1);
    goto corral_source_split_7373;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i32($M.0, out_$p81);
    goto corral_source_split_7372;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p2, $mul.ref(0, 364320)), $mul.ref(364272, 1));
    goto corral_source_split_7371;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb35_dummy:
    call {:si_unique_call 1} out_$p81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$p89, out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$p102, out_$p104, out_$i105, out_$i106, out_$p80, out_vslice_dummy_var_486 := be_set_rx_mode_loop_$bb33(in_$p2, in_$p74, out_$p81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$p89, out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$p102, out_$p104, out_$i105, out_$i106, out_$p80, out_vslice_dummy_var_486);
    return;

  exit:
    return;
}



procedure be_set_rx_mode_loop_$bb33(in_$p2: ref, in_$p74: ref, in_$p81: ref, in_$i82: i32, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i32, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$i92: i32, in_$i93: i64, in_$p94: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$p102: ref, in_$p104: ref, in_$i105: i64, in_$i106: i1, in_$p80: ref, in_vslice_dummy_var_486: i32) returns (out_$p81: ref, out_$i82: i32, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i32, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$i92: i32, out_$i93: i64, out_$p94: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$p102: ref, out_$p104: ref, out_$i105: i64, out_$i106: i1, out_$p80: ref, out_vslice_dummy_var_486: i32);
  modifies $M.0, $M.21, $CurrAddr;



implementation be_set_rx_mode_loop_$bb22(in_$p2: ref, in_$p37: ref, in_$p41: ref, in_$i42: i32, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$p46: ref, in_$i47: i32, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$i40: i32, in_vslice_dummy_var_484: i32) returns (out_$p41: ref, out_$i42: i32, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$p46: ref, out_$i47: i32, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$i40: i32, out_vslice_dummy_var_484: i32)
{

  entry:
    out_$p41, out_$i42, out_$p43, out_$p44, out_$i45, out_$p46, out_$i47, out_$p49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i40, out_vslice_dummy_var_484 := in_$p41, in_$i42, in_$p43, in_$p44, in_$i45, in_$p46, in_$i47, in_$p49, in_$i50, in_$i51, in_$p52, in_$i53, in_$i54, in_$i55, in_$i40, in_vslice_dummy_var_484;
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_7321;

  $bb24:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$i40 := out_$i53;
    goto $bb24_dummy;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i32(out_$i54, 0);
    goto corral_source_split_7338;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.0, in_$p37);
    goto corral_source_split_7337;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    out_$i53 := $add.i32(out_$i40, 1);
    call {:si_unique_call 1579} {:cexpr "i"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_7336;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p52, out_$i51);
    goto corral_source_split_7335;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p2, $mul.ref(0, 364320)), $mul.ref(364272, 1));
    goto corral_source_split_7334;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    out_$i51 := $sub.i32(out_$i50, 1);
    goto corral_source_split_7333;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, out_$p49);
    goto corral_source_split_7332;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p2, $mul.ref(0, 364320)), $mul.ref(364272, 1));
    goto corral_source_split_7331;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} out_vslice_dummy_var_484 := be_cmd_pmac_del(in_$p2, out_$i42, out_$i47, 0);
    goto corral_source_split_7330;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.0, out_$p46);
    goto corral_source_split_7329;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref(out_$p44, $mul.ref(out_$i45, 4));
    goto corral_source_split_7328;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    out_$i45 := $sext.i32.i64(out_$i40);
    goto corral_source_split_7327;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_7326;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p2, $mul.ref(0, 364320)), $mul.ref(364000, 1));
    goto corral_source_split_7325;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.0, out_$p41);
    goto corral_source_split_7324;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p2, $mul.ref(0, 364320)), $mul.ref(363992, 1));
    goto corral_source_split_7323;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p41, out_$i42, out_$p43, out_$p44, out_$i45, out_$p46, out_$i47, out_$p49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i40, out_vslice_dummy_var_484 := be_set_rx_mode_loop_$bb22(in_$p2, in_$p37, out_$p41, out_$i42, out_$p43, out_$p44, out_$i45, out_$p46, out_$i47, out_$p49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i40, out_vslice_dummy_var_484);
    return;

  exit:
    return;
}



procedure be_set_rx_mode_loop_$bb22(in_$p2: ref, in_$p37: ref, in_$p41: ref, in_$i42: i32, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$p46: ref, in_$i47: i32, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$i40: i32, in_vslice_dummy_var_484: i32) returns (out_$p41: ref, out_$i42: i32, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$p46: ref, out_$i47: i32, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$i40: i32, out_vslice_dummy_var_484: i32);
  modifies $M.0, $M.21, $CurrAddr;



implementation be_vf_setup_loop_$bb50(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i6: i32, in_$p69: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i16, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i16, in_$i84: i32, in_$i85: i1, in_$i86: i1, in_$i87: i32, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i92: i16, in_$i93: i32, in_$p94: ref, in_$i95: i32, in_$p96: ref, in_$i97: i32, in_$i98: i16, in_$i99: i32, in_$i100: i16, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i16, in_$p105: ref, in_$i106: i8, in_$i107: i32, in_$i108: i32, in_$i109: i8, in_$i111: i32, in_$p112: ref, in_$i113: i32, in_$i114: i1, in_$i72: i32, in_$p73: ref, in_vslice_dummy_var_494: i32, in_vslice_dummy_var_495: i32) returns (out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i16, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i16, out_$i84: i32, out_$i85: i1, out_$i86: i1, out_$i87: i32, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i92: i16, out_$i93: i32, out_$p94: ref, out_$i95: i32, out_$p96: ref, out_$i97: i32, out_$i98: i16, out_$i99: i32, out_$i100: i16, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i16, out_$p105: ref, out_$i106: i8, out_$i107: i32, out_$i108: i32, out_$i109: i8, out_$i111: i32, out_$p112: ref, out_$i113: i32, out_$i114: i1, out_$i72: i32, out_$p73: ref, out_vslice_dummy_var_494: i32, out_vslice_dummy_var_495: i32)
{

  entry:
    out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i111, out_$p112, out_$i113, out_$i114, out_$i72, out_$p73, out_vslice_dummy_var_494, out_vslice_dummy_var_495 := in_$p74, in_$p75, in_$p76, in_$i77, in_$i78, in_$i79, in_$p80, in_$p81, in_$p82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$p94, in_$i95, in_$p96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$p105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i111, in_$p112, in_$i113, in_$i114, in_$i72, in_$p73, in_vslice_dummy_var_494, in_vslice_dummy_var_495;
    goto $bb50, exit;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7619;

  $bb67:
    assume out_$i114 == 1;
    assume {:verifier.code 0} true;
    out_$i72, out_$p73 := out_$i111, out_$p112;
    goto $bb67_dummy;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    out_$i114 := $ult.i32(out_$i111, out_$i113);
    goto corral_source_split_7674;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i32($M.0, in_$p69);
    goto corral_source_split_7673;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref(out_$p73, $mul.ref(1, 24));
    goto corral_source_split_7672;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    out_$i111 := $add.i32(out_$i72, 1);
    call {:si_unique_call 1636} {:cexpr "vf"} boogie_si_record_i32(out_$i111);
    goto corral_source_split_7671;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} out_vslice_dummy_var_495 := be_cmd_enable_vf(in_$p0, out_$i109);
    goto corral_source_split_7670;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    out_$i109 := $trunc.i32.i8(out_$i108);
    goto corral_source_split_7669;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    out_$i108 := $add.i32(out_$i107, 1);
    goto corral_source_split_7668;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    out_$i107 := $zext.i8.i32(out_$i106);
    goto corral_source_split_7667;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    out_$i106 := $trunc.i32.i8(out_$i72);
    goto corral_source_split_7666;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p105, out_$i104);
    goto corral_source_split_7665;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(out_$p73, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7664;

  $bb66:
    assume {:verifier.code 0} true;
    out_$i104 := $load.i16($M.40, in_$p1);
    goto corral_source_split_7663;

  $bb65:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    out_$i103 := out_$i101;
    assume true;
    goto $bb65;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i32(out_$i101, 0);
    goto corral_source_split_7659;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} out_$i101 := be_cmd_get_hsw_config(in_$p0, in_$p1, out_$i95, out_$i100);
    call {:si_unique_call 1634} {:cexpr "status"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_7658;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    out_$i100 := $trunc.i32.i16(out_$i99);
    goto corral_source_split_7657;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i16.i32(out_$i98);
    goto corral_source_split_7656;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    out_$i98 := $trunc.i32.i16(out_$i97);
    goto corral_source_split_7655;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i32($M.0, out_$p96);
    goto corral_source_split_7654;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p73, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_7653;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i95 := $add.i32(out_$i72, 1);
    goto corral_source_split_7652;

  $bb62:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p94, out_$i93);
    goto corral_source_split_7650;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p73, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_7649;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    out_$i93 := $zext.i16.i32(out_$i92);
    goto corral_source_split_7648;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i16($M.1, in_$p2);
    goto corral_source_split_7647;

  $bb61:
    assume out_$i91 == 1;
    goto corral_source_split_7646;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i90, 0);
    goto corral_source_split_7644;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} out_$i90 := be_cmd_link_status_query(in_$p0, in_$p2, $0.ref, out_$i89);
    call {:si_unique_call 1632} {:cexpr "status"} boogie_si_record_i32(out_$i90);
    goto corral_source_split_7643;

  $bb60:
    assume {:verifier.code 0} true;
    out_$i89 := $add.i32(out_$i72, 1);
    goto corral_source_split_7642;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} out_vslice_dummy_var_494 := be_cmd_set_qos(in_$p0, 1000, out_$i87);
    goto corral_source_split_7640;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    out_$i87 := $add.i32(out_$i72, 1);
    goto corral_source_split_7639;

  $bb58:
    assume out_$i86 == 1;
    goto corral_source_split_7638;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb53:
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i32(in_$i6, 0);
    goto corral_source_split_7628;

  $bb55:
    assume {:verifier.code 0} true;
    assume out_$i85 == 1;
    goto $bb53;

  $bb52:
    assume {:verifier.code 0} true;
    assume out_$i79 == 1;
    goto $bb53;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb54;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i78, 545);
    goto corral_source_split_7626;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i16.i32(out_$i77);
    goto corral_source_split_7625;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i16($M.0, out_$p76);
    goto corral_source_split_7624;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p75, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_7623;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.0, out_$p74);
    goto corral_source_split_7622;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7621;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    out_$i85 := $eq.i32(out_$i84, 1808);
    goto corral_source_split_7636;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    out_$i84 := $zext.i16.i32(out_$i83);
    goto corral_source_split_7635;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i16($M.0, out_$p82);
    goto corral_source_split_7634;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p81, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_7633;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    out_$p81 := $load.ref($M.0, out_$p80);
    goto corral_source_split_7632;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7631;

  $bb54:
    assume !(out_$i79 == 1);
    goto corral_source_split_7630;

  $bb56:
    assume {:verifier.code 0} true;
    assume !(out_$i85 == 1);
    goto $bb57;

  $bb59:
    assume {:verifier.code 0} true;
    assume !(out_$i86 == 1);
    goto $bb57;

  $bb67_dummy:
    call {:si_unique_call 1} out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i111, out_$p112, out_$i113, out_$i114, out_$i72, out_$p73, out_vslice_dummy_var_494, out_vslice_dummy_var_495 := be_vf_setup_loop_$bb50(in_$p0, in_$p1, in_$p2, in_$i6, in_$p69, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i111, out_$p112, out_$i113, out_$i114, out_$i72, out_$p73, out_vslice_dummy_var_494, out_vslice_dummy_var_495);
    return;

  exit:
    return;
}



procedure be_vf_setup_loop_$bb50(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i6: i32, in_$p69: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i16, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i16, in_$i84: i32, in_$i85: i1, in_$i86: i1, in_$i87: i32, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i92: i16, in_$i93: i32, in_$p94: ref, in_$i95: i32, in_$p96: ref, in_$i97: i32, in_$i98: i16, in_$i99: i32, in_$i100: i16, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i16, in_$p105: ref, in_$i106: i8, in_$i107: i32, in_$i108: i32, in_$i109: i8, in_$i111: i32, in_$p112: ref, in_$i113: i32, in_$i114: i1, in_$i72: i32, in_$p73: ref, in_vslice_dummy_var_494: i32, in_vslice_dummy_var_495: i32) returns (out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i16, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i16, out_$i84: i32, out_$i85: i1, out_$i86: i1, out_$i87: i32, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i92: i16, out_$i93: i32, out_$p94: ref, out_$i95: i32, out_$p96: ref, out_$i97: i32, out_$i98: i16, out_$i99: i32, out_$i100: i16, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i16, out_$p105: ref, out_$i106: i8, out_$i107: i32, out_$i108: i32, out_$i109: i8, out_$i111: i32, out_$p112: ref, out_$i113: i32, out_$i114: i1, out_$i72: i32, out_$p73: ref, out_vslice_dummy_var_494: i32, out_vslice_dummy_var_495: i32);
  modifies $M.0, $M.21, $CurrAddr, $M.40, $M.2, $M.1;



implementation be_vf_setup_loop_$bb26(in_$p0: ref, in_$p46: ref, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i32, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$i49: i32, in_$p50: ref) returns (out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i32, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$i49: i32, out_$p50: ref)
{

  entry:
    out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i49, out_$p50 := in_$i51, in_$i52, in_$i53, in_$i54, in_$p55, in_$i56, in_$i57, in_$i49, in_$p50;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7579;

  $bb31:
    assume out_$i57 == 1;
    assume {:verifier.code 0} true;
    out_$i49, out_$p50 := out_$i54, out_$p55;
    goto $bb31_dummy;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    out_$i57 := $ult.i32(out_$i54, out_$i56);
    goto corral_source_split_7589;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i32($M.0, in_$p46);
    goto corral_source_split_7588;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref(out_$p50, $mul.ref(1, 24));
    goto corral_source_split_7587;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i49, 1);
    call {:si_unique_call 1625} {:cexpr "vf"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_7586;

  $bb29:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i51;
    assume true;
    goto $bb29;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i32(out_$i51, 0);
    goto corral_source_split_7582;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} out_$i51 := be_cmd_get_if_id(in_$p0, out_$p50, out_$i49);
    call {:si_unique_call 1624} {:cexpr "status"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_7581;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i49, out_$p50 := be_vf_setup_loop_$bb26(in_$p0, in_$p46, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i49, out_$p50);
    return;

  exit:
    return;
}



procedure be_vf_setup_loop_$bb26(in_$p0: ref, in_$p46: ref, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i32, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$i49: i32, in_$p50: ref) returns (out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i32, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$i49: i32, out_$p50: ref);
  modifies $M.0, $M.21, $CurrAddr;



implementation be_clear_loop_$bb10(in_$p0: ref, in_$p14: ref, in_$p18: ref, in_$i19: i32, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i32, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i17: i32, in_vslice_dummy_var_499: i32) returns (out_$p18: ref, out_$i19: i32, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i32, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i17: i32, out_vslice_dummy_var_499: i32)
{

  entry:
    out_$p18, out_$i19, out_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i17, out_vslice_dummy_var_499 := in_$p18, in_$i19, in_$p20, in_$p21, in_$i22, in_$p23, in_$i24, in_$p26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i17, in_vslice_dummy_var_499;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_7827;

  $bb12:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := out_$i30;
    goto $bb12_dummy;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i31, 0);
    goto corral_source_split_7844;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, in_$p14);
    goto corral_source_split_7843;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i17, 1);
    call {:si_unique_call 1655} {:cexpr "i"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_7842;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p29, out_$i28);
    goto corral_source_split_7841;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(364272, 1));
    goto corral_source_split_7840;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    out_$i28 := $sub.i32(out_$i27, 1);
    goto corral_source_split_7839;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_7838;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(364272, 1));
    goto corral_source_split_7837;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} out_vslice_dummy_var_499 := be_cmd_pmac_del(in_$p0, out_$i19, out_$i24, 0);
    goto corral_source_split_7836;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, out_$p23);
    goto corral_source_split_7835;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p21, $mul.ref(out_$i22, 4));
    goto corral_source_split_7834;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i17);
    goto corral_source_split_7833;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_7832;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(364000, 1));
    goto corral_source_split_7831;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    goto corral_source_split_7830;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(363992, 1));
    goto corral_source_split_7829;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p18, out_$i19, out_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i17, out_vslice_dummy_var_499 := be_clear_loop_$bb10(in_$p0, in_$p14, out_$p18, out_$i19, out_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i17, out_vslice_dummy_var_499);
    return;

  exit:
    return;
}



procedure be_clear_loop_$bb10(in_$p0: ref, in_$p14: ref, in_$p18: ref, in_$i19: i32, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i32, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i17: i32, in_vslice_dummy_var_499: i32) returns (out_$p18: ref, out_$i19: i32, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i32, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i17: i32, out_vslice_dummy_var_499: i32);
  modifies $M.0, $M.21, $CurrAddr;



implementation be_vf_clear_loop_$bb8(in_$p0: ref, in_$p13: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i16, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i16, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$p32: ref, in_$i33: i32, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i42: i32, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i16: i32, in_$p17: ref, in_vslice_dummy_var_502: i32, in_vslice_dummy_var_503: i32, in_vslice_dummy_var_504: i32) returns (out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i16, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i16, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$p32: ref, out_$i33: i32, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i42: i32, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i16: i32, out_$p17: ref, out_vslice_dummy_var_502: i32, out_vslice_dummy_var_503: i32, out_vslice_dummy_var_504: i32)
{

  entry:
    out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$p38, out_$i39, out_$i40, out_$i42, out_$p43, out_$i44, out_$i45, out_$i16, out_$p17, out_vslice_dummy_var_502, out_vslice_dummy_var_503, out_vslice_dummy_var_504 := in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$p32, in_$i33, in_$p34, in_$i35, in_$i36, in_$p38, in_$i39, in_$i40, in_$i42, in_$p43, in_$i44, in_$i45, in_$i16, in_$p17, in_vslice_dummy_var_502, in_vslice_dummy_var_503, in_vslice_dummy_var_504;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7893;

  $bb16:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i16, out_$p17 := out_$i42, out_$p43;
    goto $bb16_dummy;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    out_$i45 := $ugt.i32(out_$i44, out_$i42);
    goto corral_source_split_7927;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, in_$p13);
    goto corral_source_split_7926;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref(out_$p17, $mul.ref(1, 24));
    goto corral_source_split_7925;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i32(out_$i16, 1);
    call {:si_unique_call 1671} {:cexpr "vf"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_7924;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} out_vslice_dummy_var_504 := be_cmd_if_destroy(in_$p0, out_$i39, out_$i40);
    goto corral_source_split_7923;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i16, 1);
    goto corral_source_split_7922;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, out_$p38);
    goto corral_source_split_7921;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p17, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_7920;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} out_vslice_dummy_var_503 := be_cmd_pmac_del(in_$p0, out_$i33, out_$i35, out_$i36);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} out_vslice_dummy_var_502 := be_cmd_set_mac_list(in_$p0, $0.ref, 0, out_$i30);
    goto corral_source_split_7903;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i16, 1);
    goto corral_source_split_7902;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i29 == 1;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i23 == 1;
    goto $bb11;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i22, 57888);
    goto corral_source_split_7900;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i16.i32(out_$i21);
    goto corral_source_split_7899;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i16($M.0, out_$p20);
    goto corral_source_split_7898;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_7897;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_7896;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7895;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i28, 57896);
    goto corral_source_split_7911;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i16.i32(out_$i27);
    goto corral_source_split_7910;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i16($M.0, out_$p26);
    goto corral_source_split_7909;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p25, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_7908;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_7907;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7906;

  $bb12:
    assume !(out_$i23 == 1);
    goto corral_source_split_7905;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i16, 1);
    goto corral_source_split_7918;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, out_$p34);
    goto corral_source_split_7917;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p17, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_7916;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, out_$p32);
    goto corral_source_split_7915;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p17, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_7914;

  $bb14:
    assume !(out_$i29 == 1);
    goto corral_source_split_7913;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$p38, out_$i39, out_$i40, out_$i42, out_$p43, out_$i44, out_$i45, out_$i16, out_$p17, out_vslice_dummy_var_502, out_vslice_dummy_var_503, out_vslice_dummy_var_504 := be_vf_clear_loop_$bb8(in_$p0, in_$p13, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$p38, out_$i39, out_$i40, out_$i42, out_$p43, out_$i44, out_$i45, out_$i16, out_$p17, out_vslice_dummy_var_502, out_vslice_dummy_var_503, out_vslice_dummy_var_504);
    return;

  exit:
    return;
}



procedure be_vf_clear_loop_$bb8(in_$p0: ref, in_$p13: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i16, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i16, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$p32: ref, in_$i33: i32, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i42: i32, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i16: i32, in_$p17: ref, in_vslice_dummy_var_502: i32, in_vslice_dummy_var_503: i32, in_vslice_dummy_var_504: i32) returns (out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i16, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i16, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$p32: ref, out_$i33: i32, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i42: i32, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i16: i32, out_$p17: ref, out_vslice_dummy_var_502: i32, out_vslice_dummy_var_503: i32, out_vslice_dummy_var_504: i32);
  modifies $M.0, $M.21, $CurrAddr, $M.42;



implementation be_rx_cqs_destroy_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p10: ref, in_$p11: ref, in_$i12: i8, in_$i13: i1, in_$i15: i32, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$i8: i32, in_$p9: ref, in_vslice_dummy_var_507: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i8, out_$i13: i1, out_$i15: i32, out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$i8: i32, out_$p9: ref, out_vslice_dummy_var_507: i32)
{

  entry:
    out_$p10, out_$p11, out_$i12, out_$i13, out_$i15, out_$p16, out_$i17, out_$i18, out_$i8, out_$p9, out_vslice_dummy_var_507 := in_$p10, in_$p11, in_$i12, in_$i13, in_$i15, in_$p16, in_$i17, in_$i18, in_$i8, in_$p9, in_vslice_dummy_var_507;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8022;

  $bb9:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i8, out_$p9 := out_$i15, out_$p16;
    goto $bb9_dummy;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    out_$i18 := $ult.i32(out_$i15, out_$i17);
    goto corral_source_split_8035;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.0, in_$p5);
    goto corral_source_split_8034;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref(out_$p9, $mul.ref(1, 24760));
    goto corral_source_split_8033;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i8, 1);
    call {:si_unique_call 1697} {:cexpr "i"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_8032;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} be_queue_free(in_$p0, out_$p10);
    goto corral_source_split_8031;

  $bb7:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_243:
    goto corral_source_split_8029;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} out_vslice_dummy_var_507 := be_cmd_q_destroy(in_$p0, out_$p10, 2);
    goto SeqInstr_242;

  $bb6:
    assume out_$i13 == 1;
    goto corral_source_split_8028;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    out_$i13 := $trunc.i8.i1(out_$i12);
    goto corral_source_split_8026;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i8($M.0, out_$p11);
    goto corral_source_split_8025;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p9, $mul.ref(0, 24760)), $mul.ref(48, 1));
    out_$p11 := $add.ref($add.ref($add.ref(out_$p9, $mul.ref(0, 24760)), $mul.ref(48, 1)), $mul.ref(34, 1));
    goto corral_source_split_8024;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$i12, out_$i13, out_$i15, out_$p16, out_$i17, out_$i18, out_$i8, out_$p9, out_vslice_dummy_var_507 := be_rx_cqs_destroy_loop_$bb4(in_$p0, in_$p5, out_$p10, out_$p11, out_$i12, out_$i13, out_$i15, out_$p16, out_$i17, out_$i18, out_$i8, out_$p9, out_vslice_dummy_var_507);
    return;

  exit:
    return;
}



procedure be_rx_cqs_destroy_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p10: ref, in_$p11: ref, in_$i12: i8, in_$i13: i1, in_$i15: i32, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$i8: i32, in_$p9: ref, in_vslice_dummy_var_507: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i8, out_$i13: i1, out_$i15: i32, out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$i8: i32, out_$p9: ref, out_vslice_dummy_var_507: i32);
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_tx_queues_destroy_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p10: ref, in_$p11: ref, in_$i12: i8, in_$i13: i1, in_$p15: ref, in_$p16: ref, in_$i17: i8, in_$i18: i1, in_$i20: i32, in_$i21: i32, in_$i22: i8, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i8: i8, in_$p9: ref, in_vslice_dummy_var_508: i32, in_vslice_dummy_var_509: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i8, out_$i13: i1, out_$p15: ref, out_$p16: ref, out_$i17: i8, out_$i18: i1, out_$i20: i32, out_$i21: i32, out_$i22: i8, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i8: i8, out_$p9: ref, out_vslice_dummy_var_508: i32, out_vslice_dummy_var_509: i32)
{

  entry:
    out_$p10, out_$p11, out_$i12, out_$i13, out_$p15, out_$p16, out_$i17, out_$i18, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i8, out_$p9, out_vslice_dummy_var_508, out_vslice_dummy_var_509 := in_$p10, in_$p11, in_$i12, in_$i13, in_$p15, in_$p16, in_$i17, in_$i18, in_$i20, in_$i21, in_$i22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i8, in_$p9, in_vslice_dummy_var_508, in_vslice_dummy_var_509;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8050;

  $bb12:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i8, out_$p9 := out_$i22, out_$p23;
    goto $bb12_dummy;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    out_$i26 := $ult.i32(out_$i24, out_$i25);
    goto corral_source_split_8074;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, in_$p5);
    goto corral_source_split_8073;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i8.i32(out_$i22);
    goto corral_source_split_8072;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p9, $mul.ref(1, 16528));
    goto corral_source_split_8071;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    out_$i22 := $trunc.i32.i8(out_$i21);
    call {:si_unique_call 1702} {:cexpr "i"} boogie_si_record_i8(out_$i22);
    goto corral_source_split_8070;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i20, 1);
    goto corral_source_split_8069;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i8.i32(out_$i8);
    goto corral_source_split_8068;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} be_queue_free(in_$p0, out_$p15);
    goto corral_source_split_8067;

  $bb10:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_249:
    goto corral_source_split_8065;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} out_vslice_dummy_var_509 := be_cmd_q_destroy(in_$p0, out_$p15, 2);
    goto SeqInstr_248;

  $bb9:
    assume out_$i18 == 1;
    goto corral_source_split_8064;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    out_$i18 := $trunc.i8.i1(out_$i17);
    goto corral_source_split_8062;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i8($M.0, out_$p16);
    goto corral_source_split_8061;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p9, $mul.ref(0, 16528)), $mul.ref(48, 1));
    out_$p16 := $add.ref($add.ref($add.ref(out_$p9, $mul.ref(0, 16528)), $mul.ref(48, 1)), $mul.ref(34, 1));
    goto corral_source_split_8060;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} be_queue_free(in_$p0, out_$p10);
    goto corral_source_split_8059;

  $bb7:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_246:
    goto corral_source_split_8057;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} out_vslice_dummy_var_508 := be_cmd_q_destroy(in_$p0, out_$p10, 3);
    goto SeqInstr_245;

  $bb6:
    assume out_$i13 == 1;
    goto corral_source_split_8056;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    out_$i13 := $trunc.i8.i1(out_$i12);
    goto corral_source_split_8054;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i8($M.0, out_$p11);
    goto corral_source_split_8053;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p9, $mul.ref(0, 16528)), $mul.ref(8, 1));
    out_$p11 := $add.ref($add.ref($add.ref(out_$p9, $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(34, 1));
    goto corral_source_split_8052;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$i12, out_$i13, out_$p15, out_$p16, out_$i17, out_$i18, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i8, out_$p9, out_vslice_dummy_var_508, out_vslice_dummy_var_509 := be_tx_queues_destroy_loop_$bb4(in_$p0, in_$p5, out_$p10, out_$p11, out_$i12, out_$i13, out_$p15, out_$p16, out_$i17, out_$i18, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i8, out_$p9, out_vslice_dummy_var_508, out_vslice_dummy_var_509);
    return;

  exit:
    return;
}



procedure be_tx_queues_destroy_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p10: ref, in_$p11: ref, in_$i12: i8, in_$i13: i1, in_$p15: ref, in_$p16: ref, in_$i17: i8, in_$i18: i1, in_$i20: i32, in_$i21: i32, in_$i22: i8, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i8: i8, in_$p9: ref, in_vslice_dummy_var_508: i32, in_vslice_dummy_var_509: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i8, out_$i13: i1, out_$p15: ref, out_$p16: ref, out_$i17: i8, out_$i18: i1, out_$i20: i32, out_$i21: i32, out_$i22: i8, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i8: i8, out_$p9: ref, out_vslice_dummy_var_508: i32, out_vslice_dummy_var_509: i32);
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_evt_queues_destroy_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p11: ref, in_$i12: i8, in_$i13: i1, in_$p14: ref, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i8: i32, in_$p9: ref, in_vslice_dummy_var_510: i32) returns (out_$p11: ref, out_$i12: i8, out_$i13: i1, out_$p14: ref, out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i8: i32, out_$p9: ref, out_vslice_dummy_var_510: i32)
{

  entry:
    out_$p11, out_$i12, out_$i13, out_$p14, out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i8, out_$p9, out_vslice_dummy_var_510 := in_$p11, in_$i12, in_$i13, in_$p14, in_$p16, in_$i17, in_$p18, in_$i19, in_$i20, in_$i8, in_$p9, in_vslice_dummy_var_510;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8089;

  $bb9:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i8, out_$p9 := out_$i17, out_$p18;
    goto $bb9_dummy;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    out_$i20 := $ult.i32(out_$i17, out_$i19);
    goto corral_source_split_8105;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, in_$p5);
    goto corral_source_split_8104;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p9, $mul.ref(1, 272));
    goto corral_source_split_8103;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i8, 1);
    call {:si_unique_call 1706} {:cexpr "i"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_8102;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} be_queue_free(in_$p0, out_$p16);
    goto corral_source_split_8101;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p9, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_8100;

  $bb7:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_252:
    goto corral_source_split_8098;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} out_vslice_dummy_var_510 := be_cmd_q_destroy(in_$p0, out_$p14, 1);
    goto SeqInstr_251;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p9, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_8097;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} be_eq_clean(out_$p9);
    goto corral_source_split_8096;

  $bb6:
    assume out_$i13 == 1;
    goto corral_source_split_8095;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    out_$i13 := $trunc.i8.i1(out_$i12);
    goto corral_source_split_8093;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i8($M.0, out_$p11);
    goto corral_source_split_8092;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($add.ref(out_$p9, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(34, 1));
    goto corral_source_split_8091;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p11, out_$i12, out_$i13, out_$p14, out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i8, out_$p9, out_vslice_dummy_var_510 := be_evt_queues_destroy_loop_$bb4(in_$p0, in_$p5, out_$p11, out_$i12, out_$i13, out_$p14, out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i8, out_$p9, out_vslice_dummy_var_510);
    return;

  exit:
    return;
}



procedure be_evt_queues_destroy_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p11: ref, in_$i12: i8, in_$i13: i1, in_$p14: ref, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i8: i32, in_$p9: ref, in_vslice_dummy_var_510: i32) returns (out_$p11: ref, out_$i12: i8, out_$i13: i1, out_$p14: ref, out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i8: i32, out_$p9: ref, out_vslice_dummy_var_510: i32);
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_cmd_q_destroy_loop_$bb21()
{

  entry:
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb21_dummy;

  $bb21_dummy:
    call {:si_unique_call 1} be_cmd_q_destroy_loop_$bb21();
    return;

  exit:
    return;
}



procedure be_cmd_q_destroy_loop_$bb21();



implementation be_find_vfs_loop_$bb8(in_$p5: ref, in_$p24: ref, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$i30: i64, in_$i31: i64, in_$i32: i1, in_$i33: i32, in_$p34: ref, in_$i35: i16, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$p45: ref, in_$i46: i16, in_$i47: i32, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$i21: i32, in_$i22: i32, in_$p23: ref, in_$i51: i32, in_$i52: i32) returns (out_$p24: ref, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$i30: i64, out_$i31: i64, out_$i32: i1, out_$i33: i32, out_$p34: ref, out_$i35: i16, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$p45: ref, out_$i46: i16, out_$i47: i32, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$i21: i32, out_$i22: i32, out_$p23: ref, out_$i51: i32, out_$i52: i32)
{

  entry:
    out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i21, out_$i22, out_$p23, out_$i51, out_$i52 := in_$p24, in_$p25, in_$i26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$i21, in_$i22, in_$p23, in_$i51, in_$i52;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8184;

  $bb19:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$i21, out_$i22, out_$p23 := out_$i44, out_$i43, out_$p48;
    goto $bb19_dummy;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    out_$i51, out_$i52 := out_$i43, out_$i44;
    assume true;
    goto $bb19;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i64(out_$i49, 0);
    goto corral_source_split_8219;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64(out_$p48);
    goto corral_source_split_8218;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} out_$p48 := pci_get_device(out_$i47, $sub.i32(0, 1), out_$p23);
    goto corral_source_split_8217;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i16.i32(out_$i46);
    goto corral_source_split_8216;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i16($M.0, out_$p45);
    goto corral_source_split_8215;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p5, $mul.ref(0, 2696)), $mul.ref(60, 1));
    goto corral_source_split_8214;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8213;

  $bb11:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    out_$i43, out_$i44 := out_$i22, out_$i21;
    goto $bb18;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    out_$i43, out_$i44 := out_$i41, out_$i42;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8211;

  $bb13:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$i41, out_$i42 := out_$i22, out_$i21;
    goto $bb17;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    out_$i41, out_$i42 := out_$i33, out_$i40;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_8209;

  $bb15:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$i40 := out_$i21;
    goto $bb16;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    out_$i40 := out_$i39;
    goto $bb16;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i21, 1);
    call {:si_unique_call 1735} {:cexpr "assigned_vfs"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_8207;

  $bb14:
    assume out_$i38 == 1;
    goto corral_source_split_8206;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_8204;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    out_$i37 := $and.i32(out_$i36, 4);
    goto corral_source_split_8203;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i16.i32(out_$i35);
    goto corral_source_split_8202;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i16($M.0, out_$p34);
    goto corral_source_split_8201;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p23, $mul.ref(0, 2696)), $mul.ref(2262, 1));
    goto corral_source_split_8200;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i22, 1);
    call {:si_unique_call 1734} {:cexpr "vfs"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_8199;

  $bb12:
    assume out_$i32 == 1;
    goto corral_source_split_8198;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i64(out_$i30, out_$i31);
    goto corral_source_split_8196;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(in_$p5);
    goto corral_source_split_8195;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p29);
    goto corral_source_split_8194;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} out_$p29 := pci_physfn(out_$p23);
    goto corral_source_split_8193;

  $bb10:
    assume out_$i28 == 1;
    goto corral_source_split_8192;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_8190;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i8.i32(out_$i26);
    goto corral_source_split_8189;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i8($M.0, out_$p25);
    goto corral_source_split_8188;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref(out_$p24, $mul.ref(2251, 1));
    goto corral_source_split_8187;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_8186;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i21, out_$i22, out_$p23, out_$i51, out_$i52 := be_find_vfs_loop_$bb8(in_$p5, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i21, out_$i22, out_$p23, out_$i51, out_$i52);
    return;

  exit:
    return;
}



procedure be_find_vfs_loop_$bb8(in_$p5: ref, in_$p24: ref, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$i30: i64, in_$i31: i64, in_$i32: i1, in_$i33: i32, in_$p34: ref, in_$i35: i16, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$p45: ref, in_$i46: i16, in_$i47: i32, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$i21: i32, in_$i22: i32, in_$p23: ref, in_$i51: i32, in_$i52: i32) returns (out_$p24: ref, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$i30: i64, out_$i31: i64, out_$i32: i1, out_$i33: i32, out_$p34: ref, out_$i35: i16, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$p45: ref, out_$i46: i16, out_$i47: i32, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$i21: i32, out_$i22: i32, out_$p23: ref, out_$i51: i32, out_$i52: i32);



implementation be_vf_setup_init_loop_$bb8(in_$p16: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$i19: i32, in_$p20: ref) returns (out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$i19: i32, out_$p20: ref)
{

  entry:
    out_$p21, out_$p22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i19, out_$p20 := in_$p21, in_$p22, in_$i23, in_$p24, in_$i25, in_$i26, in_$i19, in_$p20;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8471;

  $bb10:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i19, out_$p20 := out_$i23, out_$p24;
    goto $bb10_dummy;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    out_$i26 := $ult.i32(out_$i23, out_$i25);
    goto corral_source_split_8480;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, in_$p16);
    goto corral_source_split_8479;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(out_$p20, $mul.ref(1, 24));
    goto corral_source_split_8478;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i19, 1);
    call {:si_unique_call 1773} {:cexpr "vf"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_8477;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p22, $sub.i32(0, 1));
    goto corral_source_split_8476;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p20, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_8475;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p21, $sub.i32(0, 1));
    goto corral_source_split_8474;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8473;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p21, out_$p22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i19, out_$p20 := be_vf_setup_init_loop_$bb8(in_$p16, out_$p21, out_$p22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i19, out_$p20);
    return;

  exit:
    return;
}



procedure be_vf_setup_init_loop_$bb8(in_$p16: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$i19: i32, in_$p20: ref) returns (out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$i19: i32, out_$p20: ref);
  modifies $M.0;



implementation be_vfs_if_create_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i16, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i16, in_$i22: i32, in_$i23: i1, in_$i24: i8, in_$i25: i32, in_$i26: i32, in_$i27: i8, in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i38: i32, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$p10: ref, in_$i11: i32, in_$i42: i32, in_vslice_dummy_var_513: i32) returns (out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i16, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i16, out_$i22: i32, out_$i23: i1, out_$i24: i8, out_$i25: i32, out_$i26: i32, out_$i27: i8, out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i38: i32, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$p10: ref, out_$i11: i32, out_$i42: i32, out_vslice_dummy_var_513: i32)
{

  entry:
    out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i38, out_$p39, out_$i40, out_$i41, out_$p10, out_$i11, out_$i42, out_vslice_dummy_var_513 := in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i38, in_$p39, in_$i40, in_$i41, in_$p10, in_$i11, in_$i42, in_vslice_dummy_var_513;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8529;

  $bb16:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$p10, out_$i11 := out_$p39, out_$i38;
    goto $bb16_dummy;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i34;
    assume true;
    goto $bb16;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    out_$i41 := $ugt.i32(out_$i40, out_$i38);
    goto corral_source_split_8568;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.0, in_$p6);
    goto corral_source_split_8567;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(out_$p10, $mul.ref(1, 24));
    goto corral_source_split_8566;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(out_$i11, 1);
    call {:si_unique_call 1787} {:cexpr "vf"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_8565;

  $bb13:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i34;
    assume true;
    goto $bb13;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 0);
    goto corral_source_split_8559;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} out_$i34 := be_cmd_if_create(in_$p0, out_$i31, out_$i30, out_$p32, out_$i33);
    call {:si_unique_call 1786} {:cexpr "status"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_8558;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i11, 1);
    goto corral_source_split_8557;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p10, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8556;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.46, in_$p1);
    goto corral_source_split_8555;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    out_$i30 := $and.i32(out_$i29, 4144);
    call {:si_unique_call 1784} {:cexpr "en_flags"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_8554;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.46, in_$p1);
    goto corral_source_split_8553;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_267:
    goto corral_source_split_8551;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} out_vslice_dummy_var_513 := be_cmd_get_profile_config(in_$p0, in_$p1, $0.ref, out_$i27);
    goto SeqInstr_266;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    out_$i27 := $trunc.i32.i8(out_$i26);
    goto corral_source_split_8550;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i25, 1);
    goto corral_source_split_8549;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i8.i32(out_$i24);
    goto corral_source_split_8548;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    out_$i24 := $trunc.i32.i8(out_$i11);
    goto corral_source_split_8547;

  $bb9:
    assume out_$i23 == 1;
    goto corral_source_split_8546;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 1808);
    goto corral_source_split_8544;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i16.i32(out_$i21);
    goto corral_source_split_8543;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i16($M.0, out_$p20);
    goto corral_source_split_8542;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_8541;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_8540;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_8539;

  $bb6:
    assume out_$i17 == 1;
    goto corral_source_split_8538;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 545);
    goto corral_source_split_8536;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i16.i32(out_$i15);
    goto corral_source_split_8535;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i16($M.0, out_$p14);
    goto corral_source_split_8534;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p13, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_8533;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_8532;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_8531;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i17 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i23 == 1);
    goto $bb8;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i38, out_$p39, out_$i40, out_$i41, out_$p10, out_$i11, out_$i42, out_vslice_dummy_var_513 := be_vfs_if_create_loop_$bb4(in_$p0, in_$p1, in_$p6, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i38, out_$p39, out_$i40, out_$i41, out_$p10, out_$i11, out_$i42, out_vslice_dummy_var_513);
    return;

  exit:
    return;
}



procedure be_vfs_if_create_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i16, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i16, in_$i22: i32, in_$i23: i1, in_$i24: i8, in_$i25: i32, in_$i26: i32, in_$i27: i8, in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i38: i32, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$p10: ref, in_$i11: i32, in_$i42: i32, in_vslice_dummy_var_513: i32) returns (out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i16, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i16, out_$i22: i32, out_$i23: i1, out_$i24: i8, out_$i25: i32, out_$i26: i32, out_$i27: i8, out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i38: i32, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$p10: ref, out_$i11: i32, out_$i42: i32, out_vslice_dummy_var_513: i32);
  modifies $M.0, $M.21, $CurrAddr, $M.41, $M.46, $M.47, $M.25, assertsPassed, $M.26;



implementation be_vfs_mac_query_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p7: ref, in_$p12: ref, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p10: ref, in_$i11: i32, in_cmdloc_dummy_var_290: [ref]i8, in_cmdloc_dummy_var_291: [ref]i8, in_cmdloc_dummy_var_292: [ref]i8, in_cmdloc_dummy_var_293: [ref]i8, in_cmdloc_dummy_var_294: [ref]i8, in_cmdloc_dummy_var_295: [ref]i8, in_vslice_dummy_var_514: i32) returns (out_$p12: ref, out_$p13: ref, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p10: ref, out_$i11: i32, out_cmdloc_dummy_var_290: [ref]i8, out_cmdloc_dummy_var_291: [ref]i8, out_cmdloc_dummy_var_292: [ref]i8, out_cmdloc_dummy_var_293: [ref]i8, out_cmdloc_dummy_var_294: [ref]i8, out_cmdloc_dummy_var_295: [ref]i8, out_vslice_dummy_var_514: i32)
{

  entry:
    out_$p12, out_$p13, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p10, out_$i11, out_cmdloc_dummy_var_290, out_cmdloc_dummy_var_291, out_cmdloc_dummy_var_292, out_cmdloc_dummy_var_293, out_cmdloc_dummy_var_294, out_cmdloc_dummy_var_295, out_vslice_dummy_var_514 := in_$p12, in_$p13, in_$p15, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i22, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$p28, in_$i29, in_$p30, in_$i31, in_$i32, in_$p10, in_$i11, in_cmdloc_dummy_var_290, in_cmdloc_dummy_var_291, in_cmdloc_dummy_var_292, in_cmdloc_dummy_var_293, in_cmdloc_dummy_var_294, in_cmdloc_dummy_var_295, in_vslice_dummy_var_514;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8583;

  $bb13:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$p10, out_$i11 := out_$p30, out_$i29;
    goto $bb13_dummy;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    out_$i32 := $ult.i32(out_$i29, out_$i31);
    goto corral_source_split_8614;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, in_$p7);
    goto corral_source_split_8613;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref(out_$p10, $mul.ref(1, 24));
    goto corral_source_split_8612;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i11, 1);
    call {:si_unique_call 1795} {:cexpr "vf"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_8611;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_293 := $M.0;
    out_cmdloc_dummy_var_294 := $M.0;
    call {:si_unique_call 1794} out_cmdloc_dummy_var_295 := $memcpy.i8(out_cmdloc_dummy_var_293, out_cmdloc_dummy_var_294, out_$p27, out_$p28, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_295;
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_290 := $M.0;
    out_cmdloc_dummy_var_291 := $M.0;
    call {:si_unique_call 1793} out_cmdloc_dummy_var_292 := $memcpy.i8(out_cmdloc_dummy_var_290, out_cmdloc_dummy_var_291, out_$p24, out_$p25, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_292;
    goto corral_source_split_8604;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_8603;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_8602;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p10, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8601;

  $bb10:
    assume out_$i22 == 1;
    goto corral_source_split_8600;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i22 := $ugt.i64(6, 63);
    goto corral_source_split_8598;

  $bb7:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i18;
    assume true;
    goto $bb7;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i18, 0);
    goto corral_source_split_8592;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} out_$i18 := be_cmd_mac_addr_query(in_$p0, out_$p15, 0, out_$i17, 0);
    call {:si_unique_call 1792} {:cexpr "status"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_8591;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.0, out_$p16);
    goto corral_source_split_8590;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p10, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8589;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_8588;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} out_vslice_dummy_var_514 := be_cmd_get_mac_from_list(in_$p0, out_$p12, in_$p2, out_$p13, 0);
    goto corral_source_split_8587;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p10, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_8586;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_8585;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_8609;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_8608;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p10, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8607;

  $bb11:
    assume !(out_$i22 == 1);
    goto corral_source_split_8606;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p10, out_$i11, out_cmdloc_dummy_var_290, out_cmdloc_dummy_var_291, out_cmdloc_dummy_var_292, out_cmdloc_dummy_var_293, out_cmdloc_dummy_var_294, out_cmdloc_dummy_var_295, out_vslice_dummy_var_514 := be_vfs_mac_query_loop_$bb4(in_$p0, in_$p1, in_$p2, in_$p7, out_$p12, out_$p13, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p10, out_$i11, out_cmdloc_dummy_var_290, out_cmdloc_dummy_var_291, out_cmdloc_dummy_var_292, out_cmdloc_dummy_var_293, out_cmdloc_dummy_var_294, out_cmdloc_dummy_var_295, out_vslice_dummy_var_514);
    return;

  exit:
    return;
}



procedure be_vfs_mac_query_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p7: ref, in_$p12: ref, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p10: ref, in_$i11: i32, in_cmdloc_dummy_var_290: [ref]i8, in_cmdloc_dummy_var_291: [ref]i8, in_cmdloc_dummy_var_292: [ref]i8, in_cmdloc_dummy_var_293: [ref]i8, in_cmdloc_dummy_var_294: [ref]i8, in_cmdloc_dummy_var_295: [ref]i8, in_vslice_dummy_var_514: i32) returns (out_$p12: ref, out_$p13: ref, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p10: ref, out_$i11: i32, out_cmdloc_dummy_var_290: [ref]i8, out_cmdloc_dummy_var_291: [ref]i8, out_cmdloc_dummy_var_292: [ref]i8, out_cmdloc_dummy_var_293: [ref]i8, out_cmdloc_dummy_var_294: [ref]i8, out_cmdloc_dummy_var_295: [ref]i8, out_vslice_dummy_var_514: i32);
  modifies $M.0, $M.21, $CurrAddr, $M.41, $M.29;



implementation be_vf_eth_addr_config_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p7: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i1, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i16, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i28: i32, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i8, in_$i49: i32, in_$i50: i32, in_$i51: i8, in_$p52: ref, in_$i53: i32, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$i11: i32, in_$p12: ref, in_$i57: i32, in_cmdloc_dummy_var_296: [ref]i8, in_cmdloc_dummy_var_297: [ref]i8, in_cmdloc_dummy_var_298: [ref]i8, in_cmdloc_dummy_var_299: [ref]i8, in_cmdloc_dummy_var_300: [ref]i8, in_cmdloc_dummy_var_301: [ref]i8, in_vslice_dummy_var_515: i32) returns (out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i1, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i16, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i28: i32, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i8, out_$i49: i32, out_$i50: i32, out_$i51: i8, out_$p52: ref, out_$i53: i32, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$i11: i32, out_$p12: ref, out_$i57: i32, out_cmdloc_dummy_var_296: [ref]i8, out_cmdloc_dummy_var_297: [ref]i8, out_cmdloc_dummy_var_298: [ref]i8, out_cmdloc_dummy_var_299: [ref]i8, out_cmdloc_dummy_var_300: [ref]i8, out_cmdloc_dummy_var_301: [ref]i8, out_vslice_dummy_var_515: i32)
{

  entry:
    out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i28, out_$i35, out_$p36, out_$p37, out_$p38, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i11, out_$p12, out_$i57, out_cmdloc_dummy_var_296, out_cmdloc_dummy_var_297, out_cmdloc_dummy_var_298, out_cmdloc_dummy_var_299, out_cmdloc_dummy_var_300, out_cmdloc_dummy_var_301, out_vslice_dummy_var_515 := in_$p13, in_$p14, in_$p15, in_$i16, in_$i17, in_$i18, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$p25, in_$i26, in_$i27, in_$p29, in_$p30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i28, in_$i35, in_$p36, in_$p37, in_$p38, in_$i40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$i48, in_$i49, in_$i50, in_$i51, in_$p52, in_$i53, in_$p54, in_$i55, in_$i56, in_$i11, in_$p12, in_$i57, in_cmdloc_dummy_var_296, in_cmdloc_dummy_var_297, in_cmdloc_dummy_var_298, in_cmdloc_dummy_var_299, in_cmdloc_dummy_var_300, in_cmdloc_dummy_var_301, in_vslice_dummy_var_515;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8631;

  $bb18:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i11, out_$p12 := out_$i53, out_$p54;
    goto $bb18_dummy;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i28;
    assume true;
    goto $bb18;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    out_$i56 := $ugt.i32(out_$i55, out_$i53);
    goto corral_source_split_8681;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.0, in_$p7);
    goto corral_source_split_8680;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(out_$p12, $mul.ref(1, 24));
    goto corral_source_split_8679;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    out_$i53 := $add.i32(out_$i11, 1);
    call {:si_unique_call 1803} {:cexpr "vf"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_8678;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p52, out_$i51);
    goto corral_source_split_8677;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p1, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_8676;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    out_$i51 := $trunc.i32.i8(out_$i50);
    goto corral_source_split_8675;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i32(out_$i49, 1);
    goto corral_source_split_8674;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i8.i32(out_$i48);
    goto corral_source_split_8673;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i8($M.0, out_$p47);
    goto corral_source_split_8672;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p1, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_8671;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} out_vslice_dummy_var_515 := dev_err.ref.ref.i32(out_$p38, .str.133, out_$i11);
    goto corral_source_split_8666;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p37, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_8665;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_8664;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_8663;

  $bb12:
    assume out_$i35 == 1;
    goto corral_source_split_8662;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i28, 0);
    goto corral_source_split_8660;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_8659;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} out_$i34 := be_cmd_pmac_add(in_$p0, out_$p29, out_$i31, out_$p32, out_$i33);
    call {:si_unique_call 1801} {:cexpr "status"} boogie_si_record_i32(out_$i34);
    assume {:verifier.code 0} true;
    out_$i28 := out_$i34;
    goto $bb11;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i27;
    goto $bb11;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} out_$i27 := be_cmd_set_mac_list(in_$p0, out_$p25, 1, out_$i26);
    call {:si_unique_call 1799} {:cexpr "status"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_8642;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i11, 1);
    goto corral_source_split_8641;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_8640;

  $bb9:
    assume {:verifier.code 0} true;
    assume out_$i24 == 1;
    goto $bb7;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i18 == 1;
    goto $bb7;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb8;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i17, 57888);
    goto corral_source_split_8638;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i16.i32(out_$i16);
    goto corral_source_split_8637;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i16($M.0, out_$p15);
    goto corral_source_split_8636;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_8635;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_8634;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_8633;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i23, 57896);
    goto corral_source_split_8650;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i16.i32(out_$i22);
    goto corral_source_split_8649;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i16($M.0, out_$p21);
    goto corral_source_split_8648;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_8647;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_8646;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_8645;

  $bb8:
    assume !(out_$i18 == 1);
    goto corral_source_split_8644;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i11, 1);
    goto corral_source_split_8657;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p12, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_8656;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, out_$p30);
    goto corral_source_split_8655;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p12, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8654;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_8653;

  $bb10:
    assume !(out_$i24 == 1);
    goto corral_source_split_8652;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_299 := $M.0;
    out_cmdloc_dummy_var_300 := $M.0;
    call {:si_unique_call 1805} out_cmdloc_dummy_var_301 := $memcpy.i8(out_cmdloc_dummy_var_299, out_cmdloc_dummy_var_300, out_$p45, out_$p46, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_301;
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_296 := $M.0;
    out_cmdloc_dummy_var_297 := $M.0;
    call {:si_unique_call 1804} out_cmdloc_dummy_var_298 := $memcpy.i8(out_cmdloc_dummy_var_296, out_cmdloc_dummy_var_297, out_$p42, out_$p43, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_298;
    goto corral_source_split_8687;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_8686;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    out_$p42 := $bitcast.ref.ref(out_$p41);
    goto corral_source_split_8685;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p12, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8684;

  $bb15:
    assume out_$i40 == 1;
    goto corral_source_split_8683;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    out_$i40 := $ugt.i64(6, 63);
    goto corral_source_split_8669;

  $bb13:
    assume !(out_$i35 == 1);
    goto corral_source_split_8668;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_8692;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_8691;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p12, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8690;

  $bb16:
    assume !(out_$i40 == 1);
    goto corral_source_split_8689;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i28, out_$i35, out_$p36, out_$p37, out_$p38, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i11, out_$p12, out_$i57, out_cmdloc_dummy_var_296, out_cmdloc_dummy_var_297, out_cmdloc_dummy_var_298, out_cmdloc_dummy_var_299, out_cmdloc_dummy_var_300, out_cmdloc_dummy_var_301, out_vslice_dummy_var_515 := be_vf_eth_addr_config_loop_$bb4(in_$p0, in_$p1, in_$p7, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i28, out_$i35, out_$p36, out_$p37, out_$p38, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i11, out_$p12, out_$i57, out_cmdloc_dummy_var_296, out_cmdloc_dummy_var_297, out_cmdloc_dummy_var_298, out_cmdloc_dummy_var_299, out_cmdloc_dummy_var_300, out_cmdloc_dummy_var_301, out_vslice_dummy_var_515);
    return;

  exit:
    return;
}



procedure be_vf_eth_addr_config_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p7: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i1, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i16, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i28: i32, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i8, in_$i49: i32, in_$i50: i32, in_$i51: i8, in_$p52: ref, in_$i53: i32, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$i11: i32, in_$p12: ref, in_$i57: i32, in_cmdloc_dummy_var_296: [ref]i8, in_cmdloc_dummy_var_297: [ref]i8, in_cmdloc_dummy_var_298: [ref]i8, in_cmdloc_dummy_var_299: [ref]i8, in_cmdloc_dummy_var_300: [ref]i8, in_cmdloc_dummy_var_301: [ref]i8, in_vslice_dummy_var_515: i32) returns (out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i1, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i16, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i28: i32, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i8, out_$i49: i32, out_$i50: i32, out_$i51: i8, out_$p52: ref, out_$i53: i32, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$i11: i32, out_$p12: ref, out_$i57: i32, out_cmdloc_dummy_var_296: [ref]i8, out_cmdloc_dummy_var_297: [ref]i8, out_cmdloc_dummy_var_298: [ref]i8, out_cmdloc_dummy_var_299: [ref]i8, out_cmdloc_dummy_var_300: [ref]i8, out_cmdloc_dummy_var_301: [ref]i8, out_vslice_dummy_var_515: i32);
  modifies $M.0, $M.21, $CurrAddr, $M.42;



implementation jhash_loop_$bb4(in_$i16: i32, in_$i17: i32, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$i47: i32, in_$i48: i32, in_$p49: ref, in_$i50: i1, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i32, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$p55: ref) returns (out_$i16: i32, out_$i17: i32, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$i47: i32, out_$i48: i32, out_$p49: ref, out_$i50: i1, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i32, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$p55: ref)
{

  entry:
    out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55 := in_$i16, in_$i17, in_$p18, in_$i19, in_$i20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$p49, in_$i50, in_$p11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i51, in_$i52, in_$i53, in_$i54, in_$p55;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8852;

  $bb6:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$p11, out_$i12, out_$i13, out_$i14, out_$i15 := out_$p49, out_$i48, out_$i46, out_$i43, out_$i47;
    goto $bb6_dummy;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    out_$i51, out_$i52, out_$i53, out_$i54, out_$p55 := out_$i47, out_$i43, out_$i46, out_$i48, out_$p49;
    assume true;
    goto $bb6;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    out_$i50 := $ugt.i32(out_$i48, 12);
    goto corral_source_split_8888;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(out_$p11, $mul.ref(12, 1));
    goto corral_source_split_8887;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    out_$i48 := $sub.i32(out_$i12, 12);
    call {:si_unique_call 1895} {:cexpr "length"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_8886;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i42, out_$i43);
    call {:si_unique_call 1894} {:cexpr "b"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_8885;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    out_$i46 := $xor.i32(out_$i45, out_$i44);
    call {:si_unique_call 1893} {:cexpr "c"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_8884;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} out_$i45 := rol32(out_$i42, 4);
    call {:si_unique_call 1892} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_8883;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    out_$i44 := $sub.i32(out_$i39, out_$i42);
    call {:si_unique_call 1890} {:cexpr "c"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_8882;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    out_$i43 := $add.i32(out_$i38, out_$i39);
    call {:si_unique_call 1889} {:cexpr "a"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_8881;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    out_$i42 := $xor.i32(out_$i41, out_$i40);
    call {:si_unique_call 1888} {:cexpr "b"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_8880;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} out_$i41 := rol32(out_$i38, 19);
    call {:si_unique_call 1887} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_8879;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    out_$i40 := $sub.i32(out_$i35, out_$i38);
    call {:si_unique_call 1885} {:cexpr "b"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_8878;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i34, out_$i35);
    call {:si_unique_call 1884} {:cexpr "c"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_8877;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    out_$i38 := $xor.i32(out_$i37, out_$i36);
    call {:si_unique_call 1883} {:cexpr "a"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_8876;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} out_$i37 := rol32(out_$i34, 16);
    call {:si_unique_call 1882} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_8875;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    out_$i36 := $sub.i32(out_$i31, out_$i34);
    call {:si_unique_call 1880} {:cexpr "a"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_8874;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i30, out_$i31);
    call {:si_unique_call 1879} {:cexpr "b"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_8873;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    out_$i34 := $xor.i32(out_$i33, out_$i32);
    call {:si_unique_call 1878} {:cexpr "c"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_8872;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} out_$i33 := rol32(out_$i30, 8);
    call {:si_unique_call 1877} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_8871;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    out_$i32 := $sub.i32(out_$i27, out_$i30);
    call {:si_unique_call 1875} {:cexpr "c"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_8870;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i32(out_$i26, out_$i27);
    call {:si_unique_call 1874} {:cexpr "a"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_8869;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    out_$i30 := $xor.i32(out_$i29, out_$i28);
    call {:si_unique_call 1873} {:cexpr "b"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_8868;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} out_$i29 := rol32(out_$i26, 6);
    call {:si_unique_call 1872} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_8867;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    out_$i28 := $sub.i32(out_$i20, out_$i26);
    call {:si_unique_call 1870} {:cexpr "b"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_8866;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i23, out_$i20);
    call {:si_unique_call 1869} {:cexpr "c"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_8865;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    out_$i26 := $xor.i32(out_$i25, out_$i24);
    call {:si_unique_call 1868} {:cexpr "a"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_8864;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} out_$i25 := rol32(out_$i23, 4);
    call {:si_unique_call 1867} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_8863;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    out_$i24 := $sub.i32(out_$i17, out_$i23);
    call {:si_unique_call 1865} {:cexpr "a"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_8862;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i22, out_$i13);
    call {:si_unique_call 1864} {:cexpr "c"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_8861;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} out_$i22 := __get_unaligned_cpu32(out_$p21);
    call {:si_unique_call 1863} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_8860;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref(out_$p11, $mul.ref(8, 1));
    goto corral_source_split_8859;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i19, out_$i15);
    call {:si_unique_call 1861} {:cexpr "b"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_8858;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} out_$i19 := __get_unaligned_cpu32(out_$p18);
    call {:si_unique_call 1860} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_8857;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p11, $mul.ref(4, 1));
    goto corral_source_split_8856;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i16, out_$i14);
    call {:si_unique_call 1858} {:cexpr "a"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_8855;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} out_$i16 := __get_unaligned_cpu32(out_$p11);
    call {:si_unique_call 1857} {:cexpr "tmp"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_8854;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55 := jhash_loop_$bb4(out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55);
    return;

  exit:
    return;
}



procedure jhash_loop_$bb4(in_$i16: i32, in_$i17: i32, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$i47: i32, in_$i48: i32, in_$p49: ref, in_$i50: i1, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i32, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$p55: ref) returns (out_$i16: i32, out_$i17: i32, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$i47: i32, out_$i48: i32, out_$p49: ref, out_$i50: i1, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i32, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$p55: ref);



implementation be_cmd_get_mac_from_list_loop_$bb14(in_$p44: ref, in_$i51: i32, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$p57: ref, in_$p58: ref, in_$i59: i16, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$i67: i32, in_$i68: i1, in_$i53: i32) returns (out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$p57: ref, out_$p58: ref, out_$i59: i16, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$i67: i32, out_$i68: i1, out_$i53: i32)
{

  entry:
    out_$p54, out_$p55, out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i67, out_$i68, out_$i53 := in_$p54, in_$p55, in_$i56, in_$p57, in_$p58, in_$i59, in_$i60, in_$i61, in_$p62, in_$i67, in_$i68, in_$i53;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_9090;

  $bb19:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i53 := out_$i67;
    goto $bb19_dummy;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i67, in_$i51);
    goto corral_source_split_9110;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i53, 1);
    call {:si_unique_call 1953} {:cexpr "i"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_9109;

  $bb17:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    out_$p62 := out_$p57;
    assume true;
    goto $bb17;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i60, 4);
    goto corral_source_split_9099;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i16.i32(out_$i59);
    goto corral_source_split_9098;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i16($M.0, out_$p58);
    call {:si_unique_call 1951} {:cexpr "mac_addr_size"} boogie_si_record_i16(out_$i59);
    goto corral_source_split_9097;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p55, $mul.ref(out_$i56, 12)), $mul.ref(0, 1));
    goto corral_source_split_9096;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref(out_$p55, $mul.ref(out_$i56, 12));
    goto corral_source_split_9095;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i32.i64(out_$i53);
    goto corral_source_split_9094;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    out_$p55 := $bitcast.ref.ref(out_$p54);
    goto corral_source_split_9093;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p44, $mul.ref(0, 812)), $mul.ref(44, 1));
    goto corral_source_split_9092;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p54, out_$p55, out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i67, out_$i68, out_$i53 := be_cmd_get_mac_from_list_loop_$bb14(in_$p44, in_$i51, out_$p54, out_$p55, out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i67, out_$i68, out_$i53);
    return;

  exit:
    return;
}



procedure be_cmd_get_mac_from_list_loop_$bb14(in_$p44: ref, in_$i51: i32, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$p57: ref, in_$p58: ref, in_$i59: i16, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$i67: i32, in_$i68: i1, in_$i53: i32) returns (out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$p57: ref, out_$p58: ref, out_$i59: i16, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$i67: i32, out_$i68: i1, out_$i53: i32);



implementation be_get_nic_desc_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p9: ref, in_$i10: i8, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$i14: i8, in_$i15: i32, in_$i16: i8, in_$i17: i32, in_$i18: i32, in_$i19: i8, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i8, in_$i24: i64, in_$p25: ref, in_$i26: i64, in_$i27: i64, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$i31: i32, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$i37: i1, in_$p40: ref, in_$i41: i8, in_$i42: i32, in_$i43: i1, in_$p38: ref, in_$i39: i32, in_$p44: ref, in_$i45: i8, in_$i46: i64, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$i7: i32, in_$p8: ref, in_$p50: ref, in_$i51: i32) returns (out_$p9: ref, out_$i10: i8, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$i14: i8, out_$i15: i32, out_$i16: i8, out_$i17: i32, out_$i18: i32, out_$i19: i8, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i8, out_$i24: i64, out_$p25: ref, out_$i26: i64, out_$i27: i64, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$i31: i32, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$i37: i1, out_$p40: ref, out_$i41: i8, out_$i42: i32, out_$i43: i1, out_$p38: ref, out_$i39: i32, out_$p44: ref, out_$i45: i8, out_$i46: i64, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$i7: i32, out_$p8: ref, out_$p50: ref, out_$i51: i32)
{

  entry:
    out_$p9, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$i37, out_$p40, out_$i41, out_$i42, out_$i43, out_$p38, out_$i39, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i7, out_$p8, out_$p50, out_$i51 := in_$p9, in_$i10, in_$i11, in_$i12, in_$p13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$p25, in_$i26, in_$i27, in_$p28, in_$i29, in_$i30, in_$i31, in_$p34, in_$i35, in_$i36, in_$i37, in_$p40, in_$i41, in_$i42, in_$i43, in_$p38, in_$i39, in_$p44, in_$i45, in_$i46, in_$p47, in_$i48, in_$i49, in_$i7, in_$p8, in_$p50, in_$i51;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9384;

  $bb19:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i7, out_$p8 := out_$i48, out_$p47;
    goto $bb19_dummy;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    out_$p50, out_$i51 := out_$p47, out_$i48;
    assume true;
    goto $bb19;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    out_$i49 := $ult.i32(out_$i48, in_$i1);
    goto corral_source_split_9439;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i32(out_$i7, 1);
    call {:si_unique_call 1998} {:cexpr "i"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_9438;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref(out_$p8, $mul.ref(out_$i46, 72));
    goto corral_source_split_9437;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i8.i64(out_$i45);
    goto corral_source_split_9436;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i8($M.0, out_$p44);
    goto corral_source_split_9435;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p8, $mul.ref(0, 72)), $mul.ref(1, 1));
    goto corral_source_split_9434;

  $bb17:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    out_$p38, out_$i39 := out_$p8, out_$i7;
    assume true;
    goto $bb17;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, 81);
    goto corral_source_split_9432;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i8.i32(out_$i41);
    goto corral_source_split_9431;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i8($M.0, out_$p40);
    goto corral_source_split_9430;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p8, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_9429;

  $bb15:
    assume !(out_$i37 == 1);
    goto corral_source_split_9428;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    out_$p38, out_$i39 := out_$p8, out_$i7;
    assume true;
    goto $bb15;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, 65);
    goto corral_source_split_9424;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i8.i32(out_$i35);
    goto corral_source_split_9423;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i8($M.0, out_$p34);
    goto corral_source_split_9422;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p8, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_9421;

  $bb10:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i7;
    assume true;
    goto $bb10;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    out_$i30 := $ugt.i64(out_$i26, out_$i29);
    goto corral_source_split_9413;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_9412;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref(in_$p0, $mul.ref(out_$i27, 1));
    goto corral_source_split_9411;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i32.i64(in_$i2);
    goto corral_source_split_9410;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p25);
    goto corral_source_split_9409;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref(out_$p21, $mul.ref(out_$i24, 1));
    goto corral_source_split_9408;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i8.i64(out_$i23);
    goto corral_source_split_9407;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i8($M.0, out_$p22);
    goto corral_source_split_9406;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p8, $mul.ref(0, 72)), $mul.ref(1, 1));
    goto corral_source_split_9405;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p8);
    goto corral_source_split_9404;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p20, out_$i19);
    goto corral_source_split_9403;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p8, $mul.ref(0, 72)), $mul.ref(1, 1));
    goto corral_source_split_9402;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    out_$i19 := $trunc.i32.i8(out_$i18);
    goto corral_source_split_9401;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_9400;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    out_$i18 := 88;
    goto $bb8;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i17;
    goto $bb8;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i8.i32(out_$i16);
    goto corral_source_split_9396;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    out_$i16 := $trunc.i32.i8(out_$i15);
    goto corral_source_split_9395;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i8.i32(out_$i14);
    goto corral_source_split_9394;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i8($M.0, out_$p13);
    goto corral_source_split_9393;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p8, $mul.ref(0, 72)), $mul.ref(1, 1));
    goto corral_source_split_9392;

  $bb6:
    assume out_$i12 == 1;
    goto corral_source_split_9391;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i32(out_$i11, 0);
    goto corral_source_split_9389;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i8.i32(out_$i10);
    goto corral_source_split_9388;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i8($M.0, out_$p9);
    goto corral_source_split_9387;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p8, $mul.ref(0, 72)), $mul.ref(1, 1));
    goto corral_source_split_9386;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume !(out_$i12 == 1);
    goto corral_source_split_9398;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p9, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$i37, out_$p40, out_$i41, out_$i42, out_$i43, out_$p38, out_$i39, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i7, out_$p8, out_$p50, out_$i51 := be_get_nic_desc_loop_$bb4(in_$p0, in_$i1, in_$i2, out_$p9, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$i37, out_$p40, out_$i41, out_$i42, out_$i43, out_$p38, out_$i39, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i7, out_$p8, out_$p50, out_$i51);
    return;

  exit:
    return;
}



procedure be_get_nic_desc_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p9: ref, in_$i10: i8, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$i14: i8, in_$i15: i32, in_$i16: i8, in_$i17: i32, in_$i18: i32, in_$i19: i8, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i8, in_$i24: i64, in_$p25: ref, in_$i26: i64, in_$i27: i64, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$i31: i32, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$i37: i1, in_$p40: ref, in_$i41: i8, in_$i42: i32, in_$i43: i1, in_$p38: ref, in_$i39: i32, in_$p44: ref, in_$i45: i8, in_$i46: i64, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$i7: i32, in_$p8: ref, in_$p50: ref, in_$i51: i32) returns (out_$p9: ref, out_$i10: i8, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$i14: i8, out_$i15: i32, out_$i16: i8, out_$i17: i32, out_$i18: i32, out_$i19: i8, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i8, out_$i24: i64, out_$p25: ref, out_$i26: i64, out_$i27: i64, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$i31: i32, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$i37: i1, out_$p40: ref, out_$i41: i8, out_$i42: i32, out_$i43: i1, out_$p38: ref, out_$i39: i32, out_$p44: ref, out_$i45: i8, out_$i46: i64, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$i7: i32, out_$p8: ref, out_$p50: ref, out_$i51: i32);
  modifies $M.0;



implementation be_cmd_rx_filter_loop_$bb17(in_$p6: ref, in_$p50: ref, in_$i58: i1, in_$i59: i32, in_$i60: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i68: i32, in_$i69: i64, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i67: i32, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$p82: ref, in_$p84: ref, in_$i85: i64, in_$i86: i1, in_$i56: i32, in_$p57: ref, in_cmdloc_dummy_var_326: [ref]i8, in_cmdloc_dummy_var_327: [ref]i8, in_cmdloc_dummy_var_328: [ref]i8, in_cmdloc_dummy_var_329: [ref]i8, in_cmdloc_dummy_var_330: [ref]i8, in_cmdloc_dummy_var_331: [ref]i8) returns (out_$i58: i1, out_$i59: i32, out_$i60: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i68: i32, out_$i69: i64, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i67: i32, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$p82: ref, out_$p84: ref, out_$i85: i64, out_$i86: i1, out_$i56: i32, out_$p57: ref, out_cmdloc_dummy_var_326: [ref]i8, out_cmdloc_dummy_var_327: [ref]i8, out_cmdloc_dummy_var_328: [ref]i8, out_cmdloc_dummy_var_329: [ref]i8, out_cmdloc_dummy_var_330: [ref]i8, out_cmdloc_dummy_var_331: [ref]i8)
{

  entry:
    out_$i58, out_$i59, out_$i60, out_$p63, out_$p64, out_$p65, out_$p66, out_$i68, out_$i69, out_$p72, out_$p73, out_$p74, out_$p75, out_$i67, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$p82, out_$p84, out_$i85, out_$i86, out_$i56, out_$p57, out_cmdloc_dummy_var_326, out_cmdloc_dummy_var_327, out_cmdloc_dummy_var_328, out_cmdloc_dummy_var_329, out_cmdloc_dummy_var_330, out_cmdloc_dummy_var_331 := in_$i58, in_$i59, in_$i60, in_$p63, in_$p64, in_$p65, in_$p66, in_$i68, in_$i69, in_$p72, in_$p73, in_$p74, in_$p75, in_$i67, in_$p77, in_$p78, in_$p79, in_$p80, in_$i81, in_$p82, in_$p84, in_$i85, in_$i86, in_$i56, in_$p57, in_cmdloc_dummy_var_326, in_cmdloc_dummy_var_327, in_cmdloc_dummy_var_328, in_cmdloc_dummy_var_329, in_cmdloc_dummy_var_330, in_cmdloc_dummy_var_331;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9581;

  $bb22:
    assume out_$i86 == 1;
    assume {:verifier.code 0} true;
    out_$i56, out_$p57 := out_$i67, out_$p78;
    goto $bb22_dummy;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i64(out_$i81, out_$i85);
    goto corral_source_split_9611;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    out_$i85 := $p2i.ref.i64(out_$p84);
    goto corral_source_split_9610;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref($add.ref(out_$p82, $mul.ref(0, 2784)), $mul.ref(592, 1)), $mul.ref(0, 1));
    goto corral_source_split_9609;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.0, in_$p50);
    goto corral_source_split_9608;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    out_$i81 := $p2i.ref.i64(out_$p80);
    goto corral_source_split_9607;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p79, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_9606;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    out_$p79 := $bitcast.ref.ref(out_$p78);
    goto corral_source_split_9605;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.0, out_$p77);
    goto corral_source_split_9604;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9603;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_9602;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_329 := $M.0;
    out_cmdloc_dummy_var_330 := $M.0;
    call {:si_unique_call 2035} out_cmdloc_dummy_var_331 := $memcpy.i8(out_cmdloc_dummy_var_329, out_cmdloc_dummy_var_330, out_$p73, out_$p75, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_331;
    assume {:verifier.code 0} true;
    out_$i67 := out_$i68;
    goto $bb21;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    out_$i67 := out_$i59;
    goto $bb21;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_326 := $M.0;
    out_cmdloc_dummy_var_327 := $M.0;
    call {:si_unique_call 2033} out_cmdloc_dummy_var_328 := $memcpy.i8(out_cmdloc_dummy_var_326, out_cmdloc_dummy_var_327, out_$p64, out_$p66, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_328;
    goto corral_source_split_9592;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(out_$p65);
    goto corral_source_split_9591;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p57, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_9590;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    out_$p64 := $bitcast.ref.ref(out_$p63);
    goto corral_source_split_9589;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 424)), $mul.ref(40, 1)), $mul.ref(out_$i60, 6)), $mul.ref(0, 1));
    goto corral_source_split_9588;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i32.i64(out_$i56);
    goto corral_source_split_9587;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i32(out_$i56, 1);
    call {:si_unique_call 2032} {:cexpr "i"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_9586;

  $bb19:
    assume out_$i58 == 1;
    goto corral_source_split_9585;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i58 := $ugt.i64(6, 63);
    goto corral_source_split_9583;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    out_$p75 := $bitcast.ref.ref(out_$p74);
    goto corral_source_split_9600;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p57, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_9599;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    out_$p73 := $bitcast.ref.ref(out_$p72);
    goto corral_source_split_9598;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 424)), $mul.ref(40, 1)), $mul.ref(out_$i69, 6)), $mul.ref(0, 1));
    goto corral_source_split_9597;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    out_$i69 := $sext.i32.i64(out_$i56);
    goto corral_source_split_9596;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    out_$i68 := $add.i32(out_$i56, 1);
    call {:si_unique_call 2034} {:cexpr "i"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_9595;

  $bb20:
    assume !(out_$i58 == 1);
    goto corral_source_split_9594;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i58, out_$i59, out_$i60, out_$p63, out_$p64, out_$p65, out_$p66, out_$i68, out_$i69, out_$p72, out_$p73, out_$p74, out_$p75, out_$i67, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$p82, out_$p84, out_$i85, out_$i86, out_$i56, out_$p57, out_cmdloc_dummy_var_326, out_cmdloc_dummy_var_327, out_cmdloc_dummy_var_328, out_cmdloc_dummy_var_329, out_cmdloc_dummy_var_330, out_cmdloc_dummy_var_331 := be_cmd_rx_filter_loop_$bb17(in_$p6, in_$p50, out_$i58, out_$i59, out_$i60, out_$p63, out_$p64, out_$p65, out_$p66, out_$i68, out_$i69, out_$p72, out_$p73, out_$p74, out_$p75, out_$i67, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$p82, out_$p84, out_$i85, out_$i86, out_$i56, out_$p57, out_cmdloc_dummy_var_326, out_cmdloc_dummy_var_327, out_cmdloc_dummy_var_328, out_cmdloc_dummy_var_329, out_cmdloc_dummy_var_330, out_cmdloc_dummy_var_331);
    return;

  exit:
    return;
}



procedure be_cmd_rx_filter_loop_$bb17(in_$p6: ref, in_$p50: ref, in_$i58: i1, in_$i59: i32, in_$i60: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i68: i32, in_$i69: i64, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i67: i32, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$p82: ref, in_$p84: ref, in_$i85: i64, in_$i86: i1, in_$i56: i32, in_$p57: ref, in_cmdloc_dummy_var_326: [ref]i8, in_cmdloc_dummy_var_327: [ref]i8, in_cmdloc_dummy_var_328: [ref]i8, in_cmdloc_dummy_var_329: [ref]i8, in_cmdloc_dummy_var_330: [ref]i8, in_cmdloc_dummy_var_331: [ref]i8) returns (out_$i58: i1, out_$i59: i32, out_$i60: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i68: i32, out_$i69: i64, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i67: i32, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$p82: ref, out_$p84: ref, out_$i85: i64, out_$i86: i1, out_$i56: i32, out_$p57: ref, out_cmdloc_dummy_var_326: [ref]i8, out_cmdloc_dummy_var_327: [ref]i8, out_cmdloc_dummy_var_328: [ref]i8, out_cmdloc_dummy_var_329: [ref]i8, out_cmdloc_dummy_var_330: [ref]i8, out_cmdloc_dummy_var_331: [ref]i8);
  modifies $M.0;



implementation be_fw_wait_ready_loop_$bb11(in_$p0: ref, in_$p3: ref, in_$i23: i32, in_$i24: i16, in_$i25: i32, in_$i26: i1, in_$i21: i16, in_$i22: i32, in_$i28: i64, in_$i29: i1, in_$i31: i32, in_$i32: i1, in_$i33: i16, in_vslice_dummy_var_529: i32) returns (out_$i23: i32, out_$i24: i16, out_$i25: i32, out_$i26: i1, out_$i21: i16, out_$i22: i32, out_$i28: i64, out_$i29: i1, out_$i31: i32, out_$i32: i1, out_$i33: i16, out_vslice_dummy_var_529: i32)
{

  entry:
    out_$i23, out_$i24, out_$i25, out_$i26, out_$i21, out_$i22, out_$i28, out_$i29, out_$i31, out_$i32, out_$i33, out_vslice_dummy_var_529 := in_$i23, in_$i24, in_$i25, in_$i26, in_$i21, in_$i22, in_$i28, in_$i29, in_$i31, in_$i32, in_$i33, in_vslice_dummy_var_529;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb14:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    out_$i21, out_$i22 := out_$i24, out_$i23;
    goto $bb14_dummy;

  corral_source_split_11429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_11428:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i25, 49152);
    goto corral_source_split_11429;

  corral_source_split_11427:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i16.i32(out_$i24);
    goto corral_source_split_11428;

  corral_source_split_11426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2422} out_$i24 := be_POST_stage_get(in_$p0);
    call {:si_unique_call 2423} {:cexpr "stage"} boogie_si_record_i16(out_$i24);
    goto corral_source_split_11427;

  $bb12:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_11426;

  corral_source_split_11441:
    assume {:verifier.code 0} true;
    out_$i23, out_$i33 := out_$i31, out_$i21;
    assume true;
    goto $bb12;

  corral_source_split_11440:
    assume {:verifier.code 0} true;
    out_$i32 := $sle.i32(out_$i31, 59);
    goto corral_source_split_11441;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i32(out_$i22, 2);
    call {:si_unique_call 2428} {:cexpr "timeout"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_11440;

  $bb17:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_11435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_11434:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i28, 0);
    goto corral_source_split_11435;

  corral_source_split_11433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2425} out_$i28 := msleep_interruptible(2000);
    call {:si_unique_call 2426} {:cexpr "tmp"} boogie_si_record_i64(out_$i28);
    goto corral_source_split_11434;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2424} out_vslice_dummy_var_529 := _dev_info.ref.ref.i32(in_$p3, .str.10, out_$i22);
    goto corral_source_split_11433;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i23, out_$i24, out_$i25, out_$i26, out_$i21, out_$i22, out_$i28, out_$i29, out_$i31, out_$i32, out_$i33, out_vslice_dummy_var_529 := be_fw_wait_ready_loop_$bb11(in_$p0, in_$p3, out_$i23, out_$i24, out_$i25, out_$i26, out_$i21, out_$i22, out_$i28, out_$i29, out_$i31, out_$i32, out_$i33, out_vslice_dummy_var_529);
    return;

  exit:
    return;
}



procedure be_fw_wait_ready_loop_$bb11(in_$p0: ref, in_$p3: ref, in_$i23: i32, in_$i24: i16, in_$i25: i32, in_$i26: i1, in_$i21: i16, in_$i22: i32, in_$i28: i64, in_$i29: i1, in_$i31: i32, in_$i32: i1, in_$i33: i16, in_vslice_dummy_var_529: i32) returns (out_$i23: i32, out_$i24: i16, out_$i25: i32, out_$i26: i1, out_$i21: i16, out_$i22: i32, out_$i28: i64, out_$i29: i1, out_$i31: i32, out_$i32: i1, out_$i33: i16, out_vslice_dummy_var_529: i32);
  modifies $M.26, $CurrAddr;



implementation be_worker_loop_$bb34(in_$p2: ref, in_$p63: ref, in_$i68: i32, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$i66: i32, in_$p67: ref) returns (out_$i68: i32, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$i66: i32, out_$p67: ref)
{

  entry:
    out_$i68, out_$p69, out_$i70, out_$i71, out_$i66, out_$p67 := in_$i68, in_$p69, in_$i70, in_$i71, in_$i66, in_$p67;
    goto $bb34, exit;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11671;

  $bb36:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i66, out_$p67 := out_$i68, out_$p69;
    goto $bb36_dummy;

  corral_source_split_11677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_11676:
    assume {:verifier.code 0} true;
    out_$i71 := $ult.i32(out_$i68, out_$i70);
    goto corral_source_split_11677;

  corral_source_split_11675:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.0, in_$p63);
    goto corral_source_split_11676;

  corral_source_split_11674:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref(out_$p67, $mul.ref(1, 272));
    goto corral_source_split_11675;

  corral_source_split_11673:
    assume {:verifier.code 0} true;
    out_$i68 := $add.i32(out_$i66, 1);
    call {:si_unique_call 2461} {:cexpr "i"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_11674;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2460} be_eqd_update(in_$p2, out_$p67);
    goto corral_source_split_11673;

  corral_source_split_11671:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb36_dummy:
    call {:si_unique_call 1} out_$i68, out_$p69, out_$i70, out_$i71, out_$i66, out_$p67 := be_worker_loop_$bb34(in_$p2, in_$p63, out_$i68, out_$p69, out_$i70, out_$i71, out_$i66, out_$p67);
    return;

  exit:
    return;
}



procedure be_worker_loop_$bb34(in_$p2: ref, in_$p63: ref, in_$i68: i32, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$i66: i32, in_$p67: ref) returns (out_$i68: i32, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$i66: i32, out_$p67: ref);
  modifies $M.0, $M.21, $CurrAddr;



implementation be_worker_loop_$bb23(in_$p46: ref, in_$p51: ref, in_$i52: i8, in_$i53: i1, in_$p54: ref, in_$i55: i32, in_$p56: ref, in_$i57: i32, in_$i58: i1, in_$i49: i32, in_$p50: ref) returns (out_$p51: ref, out_$i52: i8, out_$i53: i1, out_$p54: ref, out_$i55: i32, out_$p56: ref, out_$i57: i32, out_$i58: i1, out_$i49: i32, out_$p50: ref)
{

  entry:
    out_$p51, out_$i52, out_$i53, out_$p54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i49, out_$p50 := in_$p51, in_$i52, in_$i53, in_$p54, in_$i55, in_$p56, in_$i57, in_$i58, in_$i49, in_$p50;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11643;

  $bb28:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    out_$i49, out_$p50 := out_$i55, out_$p56;
    goto $bb28_dummy;

  corral_source_split_11657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_11656:
    assume {:verifier.code 0} true;
    out_$i58 := $ult.i32(out_$i55, out_$i57);
    goto corral_source_split_11657;

  corral_source_split_11655:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.0, in_$p46);
    goto corral_source_split_11656;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref(out_$p50, $mul.ref(1, 24760));
    goto corral_source_split_11655;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i32(out_$i49, 1);
    call {:si_unique_call 2459} {:cexpr "i"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_11654;

  $bb26:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2458} be_post_rx_frags(out_$p50, 208);
    goto corral_source_split_11652;

  corral_source_split_11650:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p54, 0);
    goto corral_source_split_11651;

  corral_source_split_11649:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p50, $mul.ref(0, 24760)), $mul.ref(24753, 1));
    goto corral_source_split_11650;

  $bb25:
    assume out_$i53 == 1;
    goto corral_source_split_11649;

  corral_source_split_11647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    out_$i53 := $trunc.i8.i1(out_$i52);
    goto corral_source_split_11647;

  corral_source_split_11645:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i8($M.0, out_$p51);
    goto corral_source_split_11646;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p50, $mul.ref(0, 24760)), $mul.ref(24753, 1));
    goto corral_source_split_11645;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p51, out_$i52, out_$i53, out_$p54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i49, out_$p50 := be_worker_loop_$bb23(in_$p46, out_$p51, out_$i52, out_$i53, out_$p54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i49, out_$p50);
    return;

  exit:
    return;
}



procedure be_worker_loop_$bb23(in_$p46: ref, in_$p51: ref, in_$i52: i8, in_$i53: i1, in_$p54: ref, in_$i55: i32, in_$p56: ref, in_$i57: i32, in_$i58: i1, in_$i49: i32, in_$p50: ref) returns (out_$p51: ref, out_$i52: i8, out_$i53: i1, out_$p54: ref, out_$i55: i32, out_$p56: ref, out_$i57: i32, out_$i58: i1, out_$i49: i32, out_$p50: ref);
  modifies $M.0, $M.21, $CurrAddr;



implementation be_netdev_init_loop_$bb7(in_$p0: ref, in_$p39: ref, in_$p44: ref, in_$i45: i32, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$i42: i32, in_$p43: ref) returns (out_$p44: ref, out_$i45: i32, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$i42: i32, out_$p43: ref)
{

  entry:
    out_$p44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i42, out_$p43 := in_$p44, in_$i45, in_$p46, in_$i47, in_$i48, in_$i42, in_$p43;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11787;

  $bb9:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i42, out_$p43 := out_$i45, out_$p46;
    goto $bb9_dummy;

  corral_source_split_11794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_11793:
    assume {:verifier.code 0} true;
    out_$i48 := $ult.i32(out_$i45, out_$i47);
    goto corral_source_split_11794;

  corral_source_split_11792:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.0, in_$p39);
    goto corral_source_split_11793;

  corral_source_split_11791:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref(out_$p43, $mul.ref(1, 272));
    goto corral_source_split_11792;

  corral_source_split_11790:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i42, 1);
    call {:si_unique_call 2478} {:cexpr "i"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_11791;

  corral_source_split_11789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2477} netif_napi_add(in_$p0, out_$p44, be_poll, 64);
    goto corral_source_split_11790;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_11789;

  corral_source_split_11787:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i42, out_$p43 := be_netdev_init_loop_$bb7(in_$p0, in_$p39, out_$p44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i42, out_$p43);
    return;

  exit:
    return;
}



procedure be_netdev_init_loop_$bb7(in_$p0: ref, in_$p39: ref, in_$p44: ref, in_$i45: i32, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$i42: i32, in_$p43: ref) returns (out_$p44: ref, out_$i45: i32, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$i42: i32, out_$p43: ref);



implementation _be_roce_dev_add_loop_$bb28(in_$p0: ref, in_$p1: ref, in_$p104: ref, in_$i108: i64, in_$p111: ref, in_$i112: i32, in_$i113: i64, in_$p116: ref, in_$i117: i32, in_$i118: i32, in_$i119: i1, in_$i107: i32) returns (out_$i108: i64, out_$p111: ref, out_$i112: i32, out_$i113: i64, out_$p116: ref, out_$i117: i32, out_$i118: i32, out_$i119: i1, out_$i107: i32)
{

  entry:
    out_$i108, out_$p111, out_$i112, out_$i113, out_$p116, out_$i117, out_$i118, out_$i119, out_$i107 := in_$i108, in_$p111, in_$i112, in_$i113, in_$p116, in_$i117, in_$i118, in_$i119, in_$i107;
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_12095;

  $bb30:
    assume out_$i119 == 1;
    assume {:verifier.code 0} true;
    out_$i107 := out_$i117;
    goto $bb30_dummy;

  corral_source_split_12105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_12104:
    assume {:verifier.code 0} true;
    out_$i119 := $sgt.i32(out_$i118, out_$i117);
    goto corral_source_split_12105;

  corral_source_split_12103:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i32($M.0, in_$p104);
    goto corral_source_split_12104;

  corral_source_split_12102:
    assume {:verifier.code 0} true;
    out_$i117 := $add.i32(out_$i107, 1);
    call {:si_unique_call 2501} {:cexpr "i"} boogie_si_record_i32(out_$i117);
    goto corral_source_split_12103;

  corral_source_split_12101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p116, out_$i112);
    goto corral_source_split_12102;

  corral_source_split_12100:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(72, 1)), $mul.ref(8, 1)), $mul.ref(out_$i113, 4));
    goto corral_source_split_12101;

  corral_source_split_12099:
    assume {:verifier.code 0} true;
    out_$i113 := $sext.i32.i64(out_$i107);
    goto corral_source_split_12100;

  corral_source_split_12098:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i32($M.0, out_$p111);
    goto corral_source_split_12099;

  corral_source_split_12097:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(4024, 1)), $mul.ref(out_$i108, 8)), $mul.ref(0, 1));
    goto corral_source_split_12098;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i108 := $sext.i32.i64(out_$i107);
    goto corral_source_split_12097;

  corral_source_split_12095:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb30_dummy:
    call {:si_unique_call 1} out_$i108, out_$p111, out_$i112, out_$i113, out_$p116, out_$i117, out_$i118, out_$i119, out_$i107 := _be_roce_dev_add_loop_$bb28(in_$p0, in_$p1, in_$p104, out_$i108, out_$p111, out_$i112, out_$i113, out_$p116, out_$i117, out_$i118, out_$i119, out_$i107);
    return;

  exit:
    return;
}



procedure _be_roce_dev_add_loop_$bb28(in_$p0: ref, in_$p1: ref, in_$p104: ref, in_$i108: i64, in_$p111: ref, in_$i112: i32, in_$i113: i64, in_$p116: ref, in_$i117: i32, in_$i118: i32, in_$i119: i1, in_$i107: i32) returns (out_$i108: i64, out_$p111: ref, out_$i112: i32, out_$i113: i64, out_$p116: ref, out_$i117: i32, out_$i118: i32, out_$i119: i1, out_$i107: i32);
  modifies $M.0;



implementation be_eqd_update_loop_$bb15(in_$p26: ref, in_$i29: i64, in_$p38: ref, in_$i39: i32, in_$p40: ref, in_$i41: i64, in_$p42: ref, in_$i43: i1, in_$i44: i8, in_$i45: i1, in_$i46: i64) returns (out_$p38: ref, out_$i39: i32, out_$p40: ref, out_$i41: i64, out_$p42: ref, out_$i43: i1, out_$i44: i8, out_$i45: i1, out_$i46: i64)
{

  entry:
    out_$p38, out_$i39, out_$p40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46 := in_$p38, in_$i39, in_$p40, in_$i41, in_$p42, in_$i43, in_$i44, in_$i45, in_$i46;
    goto $bb15, exit;

  $bb15:
    out_$p38 := $add.ref($add.ref($add.ref(in_$p26, $mul.ref(in_$i29, 24760)), $mul.ref(24688, 1)), $mul.ref(60, 1));
    goto corral_source_split_12350;

  $bb16:
    assume {:verifier.code 0} true;
    assume out_$i45 == 1;
    goto $bb16_dummy;

  corral_source_split_12355:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i41;
    assume true;
    goto $bb16;

  corral_source_split_12354:
    assume {:verifier.code 0} true;
    out_$i45 := $trunc.i8.i1(out_$i44);
    goto corral_source_split_12355;

  corral_source_split_12353:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i1.i8(out_$i43);
    call {:si_unique_call 2548} {:cexpr "tmp"} boogie_si_record_i8(out_$i44);
    goto corral_source_split_12354;

  corral_source_split_12352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2547} out_$i43 := u64_stats_fetch_retry_bh(out_$p42, out_$i39);
    goto corral_source_split_12353;

  corral_source_split_12351:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i64($M.0, out_$p40);
    call {:si_unique_call 2546} {:cexpr "pkts"} boogie_si_record_i64(out_$i41);
    out_$p42 := $add.ref($add.ref($add.ref(in_$p26, $mul.ref(in_$i29, 24760)), $mul.ref(24688, 1)), $mul.ref(60, 1));
    goto corral_source_split_12352;

  corral_source_split_12350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2544} out_$i39 := u64_stats_fetch_begin_bh(out_$p38);
    call {:si_unique_call 2545} {:cexpr "start"} boogie_si_record_i32(out_$i39);
    out_$p40 := $add.ref($add.ref($add.ref(in_$p26, $mul.ref(in_$i29, 24760)), $mul.ref(24688, 1)), $mul.ref(8, 1));
    goto corral_source_split_12351;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p38, out_$i39, out_$p40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46 := be_eqd_update_loop_$bb15(in_$p26, in_$i29, out_$p38, out_$i39, out_$p40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46);
    return;

  exit:
    return;
}



procedure be_eqd_update_loop_$bb15(in_$p26: ref, in_$i29: i64, in_$p38: ref, in_$i39: i32, in_$p40: ref, in_$i41: i64, in_$p42: ref, in_$i43: i1, in_$i44: i8, in_$i45: i1, in_$i46: i64) returns (out_$p38: ref, out_$i39: i32, out_$p40: ref, out_$i41: i64, out_$p42: ref, out_$i43: i1, out_$i44: i8, out_$i45: i1, out_$i46: i64);



implementation be_get_fw_log_level_loop_$bb17(in_$p38: ref, in_$p42: ref, in_$i48: i64, in_$p53: ref, in_$i54: i8, in_$i55: i32, in_$i56: i1, in_$i57: i64, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$i46: i32, in_$i47: i32, in_$i68: i32) returns (out_$i48: i64, out_$p53: ref, out_$i54: i8, out_$i55: i32, out_$i56: i1, out_$i57: i64, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$i46: i32, out_$i47: i32, out_$i68: i32)
{

  entry:
    out_$i48, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i46, out_$i47, out_$i68 := in_$i48, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$p62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i46, in_$i47, in_$i68;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12713;

  $bb22:
    assume out_$i67 == 1;
    assume {:verifier.code 0} true;
    out_$i46, out_$i47 := out_$i65, out_$i64;
    goto $bb22_dummy;

  corral_source_split_12729:
    assume {:verifier.code 0} true;
    out_$i68 := out_$i64;
    assume true;
    goto $bb22;

  corral_source_split_12728:
    assume {:verifier.code 0} true;
    out_$i67 := $ult.i32(out_$i65, out_$i66);
    goto corral_source_split_12729;

  corral_source_split_12727:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.0, in_$p42);
    goto corral_source_split_12728;

  corral_source_split_12726:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i32(out_$i46, 1);
    call {:si_unique_call 2598} {:cexpr "j"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_12727;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_12726;

  $bb20:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    out_$i64 := out_$i47;
    goto $bb21;

  corral_source_split_12724:
    assume {:verifier.code 0} true;
    out_$i64 := out_$i63;
    goto $bb21;

  corral_source_split_12723:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i32($M.0, out_$p62);
    call {:si_unique_call 2597} {:cexpr "level"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_12724;

  corral_source_split_12722:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(in_$p38, $mul.ref(16, 2832)), $mul.ref(24, 1)), $mul.ref(0, 104)), $mul.ref(40, 1)), $mul.ref(out_$i57, 16)), $mul.ref(4, 1));
    goto corral_source_split_12723;

  corral_source_split_12721:
    assume {:verifier.code 0} true;
    out_$i57 := $sext.i32.i64(out_$i46);
    goto corral_source_split_12722;

  $bb19:
    assume out_$i56 == 1;
    goto corral_source_split_12721;

  corral_source_split_12719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_12718:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i55, 0);
    goto corral_source_split_12719;

  corral_source_split_12717:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i8.i32(out_$i54);
    goto corral_source_split_12718;

  corral_source_split_12716:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i8($M.0, out_$p53);
    goto corral_source_split_12717;

  corral_source_split_12715:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(in_$p38, $mul.ref(16, 2832)), $mul.ref(24, 1)), $mul.ref(0, 104)), $mul.ref(40, 1)), $mul.ref(out_$i48, 16)), $mul.ref(0, 1));
    goto corral_source_split_12716;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i46);
    goto corral_source_split_12715;

  corral_source_split_12713:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i48, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i46, out_$i47, out_$i68 := be_get_fw_log_level_loop_$bb17(in_$p38, in_$p42, out_$i48, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i46, out_$i47, out_$i68);
    return;

  exit:
    return;
}



procedure be_get_fw_log_level_loop_$bb17(in_$p38: ref, in_$p42: ref, in_$i48: i64, in_$p53: ref, in_$i54: i8, in_$i55: i32, in_$i56: i1, in_$i57: i64, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$i46: i32, in_$i47: i32, in_$i68: i32) returns (out_$i48: i64, out_$p53: ref, out_$i54: i8, out_$i55: i32, out_$i56: i1, out_$i57: i64, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$i46: i32, out_$i47: i32, out_$i68: i32);



implementation be_xmit_loop_$bb57()
{

  entry:
    goto $bb57, exit;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb57_dummy;

  $bb57_dummy:
    call {:si_unique_call 1} be_xmit_loop_$bb57();
    return;

  exit:
    return;
}



procedure be_xmit_loop_$bb57();



implementation be_get_stats64_loop_$bb18(in_$p71: ref, in_$i72: i32, in_$p74: ref, in_$i75: i64, in_$p77: ref, in_$i78: i64, in_$p79: ref, in_$i80: i1, in_$i81: i8, in_$i82: i1, in_$i83: i64, in_$i84: i64, in_$p69: ref) returns (out_$p71: ref, out_$i72: i32, out_$p74: ref, out_$i75: i64, out_$p77: ref, out_$i78: i64, out_$p79: ref, out_$i80: i1, out_$i81: i8, out_$i82: i1, out_$i83: i64, out_$i84: i64)
{

  entry:
    out_$p71, out_$i72, out_$p74, out_$i75, out_$p77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84 := in_$p71, in_$i72, in_$p74, in_$i75, in_$p77, in_$i78, in_$p79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84;
    goto $bb18, exit;

  $bb18:
    out_$p71 := $add.ref($add.ref($add.ref(in_$p69, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(52, 1));
    goto corral_source_split_13639;

  $bb19:
    assume {:verifier.code 0} true;
    assume out_$i82 == 1;
    goto $bb19_dummy;

  corral_source_split_13647:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84 := out_$i75, out_$i78;
    assume true;
    goto $bb19;

  corral_source_split_13646:
    assume {:verifier.code 0} true;
    out_$i82 := $trunc.i8.i1(out_$i81);
    goto corral_source_split_13647;

  corral_source_split_13645:
    assume {:verifier.code 0} true;
    out_$i81 := $zext.i1.i8(out_$i80);
    call {:si_unique_call 2801} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i81);
    goto corral_source_split_13646;

  corral_source_split_13644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2800} out_$i80 := u64_stats_fetch_retry_bh(out_$p79, out_$i72);
    goto corral_source_split_13645;

  corral_source_split_13643:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i64($M.0, out_$p77);
    call {:si_unique_call 2799} {:cexpr "bytes"} boogie_si_record_i64(out_$i78);
    out_$p79 := $add.ref($add.ref($add.ref(in_$p69, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(52, 1));
    goto corral_source_split_13644;

  corral_source_split_13642:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref($add.ref(in_$p69, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(0, 1));
    goto corral_source_split_13643;

  corral_source_split_13641:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i64($M.0, out_$p74);
    call {:si_unique_call 2798} {:cexpr "pkts"} boogie_si_record_i64(out_$i75);
    goto corral_source_split_13642;

  corral_source_split_13640:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref($add.ref(in_$p69, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(8, 1));
    goto corral_source_split_13641;

  corral_source_split_13639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2796} out_$i72 := u64_stats_fetch_begin_bh(out_$p71);
    call {:si_unique_call 2797} {:cexpr "start"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_13640;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p71, out_$i72, out_$p74, out_$i75, out_$p77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84 := be_get_stats64_loop_$bb18(out_$p71, out_$i72, out_$p74, out_$i75, out_$p77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, in_$p69);
    return;

  exit:
    return;
}



procedure be_get_stats64_loop_$bb18(in_$p71: ref, in_$i72: i32, in_$p74: ref, in_$i75: i64, in_$p77: ref, in_$i78: i64, in_$p79: ref, in_$i80: i1, in_$i81: i8, in_$i82: i1, in_$i83: i64, in_$i84: i64, in_$p69: ref) returns (out_$p71: ref, out_$i72: i32, out_$p74: ref, out_$i75: i64, out_$p77: ref, out_$i78: i64, out_$p79: ref, out_$i80: i1, out_$i81: i8, out_$i82: i1, out_$i83: i64, out_$i84: i64);



implementation be_get_stats64_loop_$bb16(in_$p1: ref, in_$p65: ref, in_$p71: ref, in_$i72: i32, in_$p74: ref, in_$i75: i64, in_$p77: ref, in_$i78: i64, in_$p79: ref, in_$i80: i1, in_$i81: i8, in_$i82: i1, in_$i83: i64, in_$i84: i64, in_$p85: ref, in_$i86: i64, in_$i87: i64, in_$p88: ref, in_$p89: ref, in_$i90: i64, in_$i91: i64, in_$p92: ref, in_$i93: i32, in_$p94: ref, in_$i95: i32, in_$i96: i1, in_$i68: i32, in_$p69: ref) returns (out_$p71: ref, out_$i72: i32, out_$p74: ref, out_$i75: i64, out_$p77: ref, out_$i78: i64, out_$p79: ref, out_$i80: i1, out_$i81: i8, out_$i82: i1, out_$i83: i64, out_$i84: i64, out_$p85: ref, out_$i86: i64, out_$i87: i64, out_$p88: ref, out_$p89: ref, out_$i90: i64, out_$i91: i64, out_$p92: ref, out_$i93: i32, out_$p94: ref, out_$i95: i32, out_$i96: i1, out_$i68: i32, out_$p69: ref)
{

  entry:
    out_$p71, out_$i72, out_$p74, out_$i75, out_$p77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$i86, out_$i87, out_$p88, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i68, out_$p69 := in_$p71, in_$i72, in_$p74, in_$i75, in_$p77, in_$i78, in_$p79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$p85, in_$i86, in_$i87, in_$p88, in_$p89, in_$i90, in_$i91, in_$p92, in_$i93, in_$p94, in_$i95, in_$i96, in_$i68, in_$p69;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_13635;

  $bb22:
    assume out_$i96 == 1;
    assume {:verifier.code 0} true;
    out_$i68, out_$p69 := out_$i93, out_$p94;
    goto $bb22_dummy;

  corral_source_split_13662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_13661:
    assume {:verifier.code 0} true;
    out_$i96 := $ult.i32(out_$i93, out_$i95);
    goto corral_source_split_13662;

  corral_source_split_13660:
    assume {:verifier.code 0} true;
    out_$i95 := $load.i32($M.0, in_$p65);
    goto corral_source_split_13661;

  corral_source_split_13659:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref(out_$p69, $mul.ref(1, 16528));
    goto corral_source_split_13660;

  corral_source_split_13658:
    assume {:verifier.code 0} true;
    out_$i93 := $add.i32(out_$i68, 1);
    call {:si_unique_call 2802} {:cexpr "i"} boogie_si_record_i32(out_$i93);
    goto corral_source_split_13659;

  corral_source_split_13657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p92, out_$i91);
    goto corral_source_split_13658;

  corral_source_split_13656:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_13657;

  corral_source_split_13655:
    assume {:verifier.code 0} true;
    out_$i91 := $add.i64(out_$i90, out_$i84);
    goto corral_source_split_13656;

  corral_source_split_13654:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i64($M.0, out_$p89);
    goto corral_source_split_13655;

  corral_source_split_13653:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_13654;

  corral_source_split_13652:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p88, out_$i87);
    goto corral_source_split_13653;

  corral_source_split_13651:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_13652;

  corral_source_split_13650:
    assume {:verifier.code 0} true;
    out_$i87 := $add.i64(out_$i86, out_$i83);
    goto corral_source_split_13651;

  corral_source_split_13649:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i64($M.0, out_$p85);
    goto corral_source_split_13650;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_13649;

  $bb20:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_13647:
    assume {:verifier.code 0} true;
    out_$i83, out_$i84 := out_$i75, out_$i78;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_13646:
    assume {:verifier.code 0} true;
    out_$i82 := $trunc.i8.i1(out_$i81);
    goto corral_source_split_13647;

  corral_source_split_13645:
    assume {:verifier.code 0} true;
    out_$i81 := $zext.i1.i8(out_$i80);
    call {:si_unique_call 2801} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i81);
    goto corral_source_split_13646;

  corral_source_split_13644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2800} out_$i80 := u64_stats_fetch_retry_bh(out_$p79, out_$i72);
    goto corral_source_split_13645;

  corral_source_split_13643:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i64($M.0, out_$p77);
    call {:si_unique_call 2799} {:cexpr "bytes"} boogie_si_record_i64(out_$i78);
    out_$p79 := $add.ref($add.ref($add.ref(out_$p69, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(52, 1));
    goto corral_source_split_13644;

  corral_source_split_13642:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref($add.ref(out_$p69, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(0, 1));
    goto corral_source_split_13643;

  corral_source_split_13641:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i64($M.0, out_$p74);
    call {:si_unique_call 2798} {:cexpr "pkts"} boogie_si_record_i64(out_$i75);
    goto corral_source_split_13642;

  corral_source_split_13640:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref($add.ref(out_$p69, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(8, 1));
    goto corral_source_split_13641;

  corral_source_split_13639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2796} out_$i72 := u64_stats_fetch_begin_bh(out_$p71);
    call {:si_unique_call 2797} {:cexpr "start"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_13640;

  $bb18:
    call out_$p71, out_$i72, out_$p74, out_$i75, out_$p77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84 := be_get_stats64_loop_$bb18(out_$p71, out_$i72, out_$p74, out_$i75, out_$p77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p69);
    goto $bb18_last;

  $bb18_last:
    out_$p71 := $add.ref($add.ref($add.ref(out_$p69, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(52, 1));
    goto corral_source_split_13639;

  corral_source_split_13637:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb19:
    assume {:verifier.code 0} true;
    assume out_$i82 == 1;
    assume false;
    return;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_13637;

  corral_source_split_13635:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p71, out_$i72, out_$p74, out_$i75, out_$p77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$i86, out_$i87, out_$p88, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i68, out_$p69 := be_get_stats64_loop_$bb16(in_$p1, in_$p65, out_$p71, out_$i72, out_$p74, out_$i75, out_$p77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$i86, out_$i87, out_$p88, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i68, out_$p69);
    return;

  exit:
    return;
}



procedure be_get_stats64_loop_$bb16(in_$p1: ref, in_$p65: ref, in_$p71: ref, in_$i72: i32, in_$p74: ref, in_$i75: i64, in_$p77: ref, in_$i78: i64, in_$p79: ref, in_$i80: i1, in_$i81: i8, in_$i82: i1, in_$i83: i64, in_$i84: i64, in_$p85: ref, in_$i86: i64, in_$i87: i64, in_$p88: ref, in_$p89: ref, in_$i90: i64, in_$i91: i64, in_$p92: ref, in_$i93: i32, in_$p94: ref, in_$i95: i32, in_$i96: i1, in_$i68: i32, in_$p69: ref) returns (out_$p71: ref, out_$i72: i32, out_$p74: ref, out_$i75: i64, out_$p77: ref, out_$i78: i64, out_$p79: ref, out_$i80: i1, out_$i81: i8, out_$i82: i1, out_$i83: i64, out_$i84: i64, out_$p85: ref, out_$i86: i64, out_$i87: i64, out_$p88: ref, out_$p89: ref, out_$i90: i64, out_$i91: i64, out_$p92: ref, out_$i93: i32, out_$p94: ref, out_$i95: i32, out_$i96: i1, out_$i68: i32, out_$p69: ref);
  modifies $M.0;



implementation be_get_stats64_loop_$bb6(in_$p15: ref, in_$i16: i32, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i1, in_$i25: i8, in_$i26: i1, in_$i27: i64, in_$i28: i64, in_$p13: ref) returns (out_$p15: ref, out_$i16: i32, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i1, out_$i25: i8, out_$i26: i1, out_$i27: i64, out_$i28: i64)
{

  entry:
    out_$p15, out_$i16, out_$p18, out_$i19, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28 := in_$p15, in_$i16, in_$p18, in_$i19, in_$p21, in_$i22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28;
    goto $bb6, exit;

  $bb6:
    out_$p15 := $add.ref($add.ref($add.ref(in_$p13, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(60, 1));
    goto corral_source_split_13579;

  $bb7:
    assume {:verifier.code 0} true;
    assume out_$i26 == 1;
    goto $bb7_dummy;

  corral_source_split_13587:
    assume {:verifier.code 0} true;
    out_$i27, out_$i28 := out_$i19, out_$i22;
    assume true;
    goto $bb7;

  corral_source_split_13586:
    assume {:verifier.code 0} true;
    out_$i26 := $trunc.i8.i1(out_$i25);
    goto corral_source_split_13587;

  corral_source_split_13585:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i1.i8(out_$i24);
    call {:si_unique_call 2794} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i25);
    goto corral_source_split_13586;

  corral_source_split_13584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2793} out_$i24 := u64_stats_fetch_retry_bh(out_$p23, out_$i16);
    goto corral_source_split_13585;

  corral_source_split_13583:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i64($M.0, out_$p21);
    call {:si_unique_call 2792} {:cexpr "bytes"} boogie_si_record_i64(out_$i22);
    out_$p23 := $add.ref($add.ref($add.ref(in_$p13, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(60, 1));
    goto corral_source_split_13584;

  corral_source_split_13582:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(in_$p13, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(0, 1));
    goto corral_source_split_13583;

  corral_source_split_13581:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i64($M.0, out_$p18);
    call {:si_unique_call 2791} {:cexpr "pkts"} boogie_si_record_i64(out_$i19);
    goto corral_source_split_13582;

  corral_source_split_13580:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(in_$p13, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(8, 1));
    goto corral_source_split_13581;

  corral_source_split_13579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2789} out_$i16 := u64_stats_fetch_begin_bh(out_$p15);
    call {:si_unique_call 2790} {:cexpr "start"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_13580;

  $bb7_dummy:
    call {:si_unique_call 1} out_$p15, out_$i16, out_$p18, out_$i19, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28 := be_get_stats64_loop_$bb6(out_$p15, out_$i16, out_$p18, out_$i19, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, in_$p13);
    return;

  exit:
    return;
}



procedure be_get_stats64_loop_$bb6(in_$p15: ref, in_$i16: i32, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i1, in_$i25: i8, in_$i26: i1, in_$i27: i64, in_$i28: i64, in_$p13: ref) returns (out_$p15: ref, out_$i16: i32, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i1, out_$i25: i8, out_$i26: i1, out_$i27: i64, out_$i28: i64);



implementation be_get_stats64_loop_$bb4(in_$p1: ref, in_$p9: ref, in_$p15: ref, in_$i16: i32, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i1, in_$i25: i8, in_$i26: i1, in_$i27: i64, in_$i28: i64, in_$p29: ref, in_$i30: i64, in_$i31: i64, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i64, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p40: ref, in_$i41: i32, in_$i42: i64, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p48: ref, in_$i49: i32, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$i54: i64, in_$i55: i64, in_$p56: ref, in_$i57: i32, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$i12: i32, in_$p13: ref) returns (out_$p15: ref, out_$i16: i32, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i1, out_$i25: i8, out_$i26: i1, out_$i27: i64, out_$i28: i64, out_$p29: ref, out_$i30: i64, out_$i31: i64, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i64, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p40: ref, out_$i41: i32, out_$i42: i64, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p48: ref, out_$i49: i32, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$i54: i64, out_$i55: i64, out_$p56: ref, out_$i57: i32, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$i12: i32, out_$p13: ref)
{

  entry:
    out_$p15, out_$i16, out_$p18, out_$i19, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p48, out_$i49, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i12, out_$p13 := in_$p15, in_$i16, in_$p18, in_$i19, in_$p21, in_$i22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$p32, in_$p33, in_$i34, in_$i35, in_$p36, in_$p37, in_$i38, in_$p40, in_$i41, in_$i42, in_$i43, in_$p44, in_$p45, in_$i46, in_$p48, in_$i49, in_$p51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p56, in_$i57, in_$p58, in_$i59, in_$i60, in_$i12, in_$p13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_13575;

  $bb10:
    assume out_$i60 == 1;
    assume {:verifier.code 0} true;
    out_$i12, out_$p13 := out_$i57, out_$p58;
    goto $bb10_dummy;

  corral_source_split_13621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_13620:
    assume {:verifier.code 0} true;
    out_$i60 := $ult.i32(out_$i57, out_$i59);
    goto corral_source_split_13621;

  corral_source_split_13619:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.0, in_$p9);
    goto corral_source_split_13620;

  corral_source_split_13618:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref(out_$p13, $mul.ref(1, 24760));
    goto corral_source_split_13619;

  corral_source_split_13617:
    assume {:verifier.code 0} true;
    out_$i57 := $add.i32(out_$i12, 1);
    call {:si_unique_call 2795} {:cexpr "i"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_13618;

  corral_source_split_13616:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p56, out_$i55);
    goto corral_source_split_13617;

  corral_source_split_13615:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_13616;

  corral_source_split_13614:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i64(out_$i46, out_$i54);
    goto corral_source_split_13615;

  corral_source_split_13613:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i32.i64(out_$i53);
    goto corral_source_split_13614;

  corral_source_split_13612:
    assume {:verifier.code 0} true;
    out_$i53 := $add.i32(out_$i49, out_$i52);
    goto corral_source_split_13613;

  corral_source_split_13611:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.0, out_$p51);
    goto corral_source_split_13612;

  corral_source_split_13610:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref($add.ref(out_$p13, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(36, 1));
    goto corral_source_split_13611;

  corral_source_split_13609:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.0, out_$p48);
    goto corral_source_split_13610;

  corral_source_split_13608:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref($add.ref(out_$p13, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(32, 1));
    goto corral_source_split_13609;

  corral_source_split_13607:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i64($M.0, out_$p45);
    goto corral_source_split_13608;

  corral_source_split_13606:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_13607;

  corral_source_split_13605:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p44, out_$i43);
    goto corral_source_split_13606;

  corral_source_split_13604:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_13605;

  corral_source_split_13603:
    assume {:verifier.code 0} true;
    out_$i43 := $add.i64(out_$i38, out_$i42);
    goto corral_source_split_13604;

  corral_source_split_13602:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i32.i64(out_$i41);
    goto corral_source_split_13603;

  corral_source_split_13601:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.0, out_$p40);
    goto corral_source_split_13602;

  corral_source_split_13600:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref(out_$p13, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(48, 1));
    goto corral_source_split_13601;

  corral_source_split_13599:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i64($M.0, out_$p37);
    goto corral_source_split_13600;

  corral_source_split_13598:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_13599;

  corral_source_split_13597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p36, out_$i35);
    goto corral_source_split_13598;

  corral_source_split_13596:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_13597;

  corral_source_split_13595:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i64(out_$i34, out_$i28);
    goto corral_source_split_13596;

  corral_source_split_13594:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i64($M.0, out_$p33);
    goto corral_source_split_13595;

  corral_source_split_13593:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_13594;

  corral_source_split_13592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p32, out_$i31);
    goto corral_source_split_13593;

  corral_source_split_13591:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_13592;

  corral_source_split_13590:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i64(out_$i30, out_$i27);
    goto corral_source_split_13591;

  corral_source_split_13589:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i64($M.0, out_$p29);
    goto corral_source_split_13590;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_13589;

  $bb8:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_13587:
    assume {:verifier.code 0} true;
    out_$i27, out_$i28 := out_$i19, out_$i22;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_13586:
    assume {:verifier.code 0} true;
    out_$i26 := $trunc.i8.i1(out_$i25);
    goto corral_source_split_13587;

  corral_source_split_13585:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i1.i8(out_$i24);
    call {:si_unique_call 2794} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i25);
    goto corral_source_split_13586;

  corral_source_split_13584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2793} out_$i24 := u64_stats_fetch_retry_bh(out_$p23, out_$i16);
    goto corral_source_split_13585;

  corral_source_split_13583:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i64($M.0, out_$p21);
    call {:si_unique_call 2792} {:cexpr "bytes"} boogie_si_record_i64(out_$i22);
    out_$p23 := $add.ref($add.ref($add.ref(out_$p13, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(60, 1));
    goto corral_source_split_13584;

  corral_source_split_13582:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(out_$p13, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(0, 1));
    goto corral_source_split_13583;

  corral_source_split_13581:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i64($M.0, out_$p18);
    call {:si_unique_call 2791} {:cexpr "pkts"} boogie_si_record_i64(out_$i19);
    goto corral_source_split_13582;

  corral_source_split_13580:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(out_$p13, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(8, 1));
    goto corral_source_split_13581;

  corral_source_split_13579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2789} out_$i16 := u64_stats_fetch_begin_bh(out_$p15);
    call {:si_unique_call 2790} {:cexpr "start"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_13580;

  $bb6:
    call out_$p15, out_$i16, out_$p18, out_$i19, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28 := be_get_stats64_loop_$bb6(out_$p15, out_$i16, out_$p18, out_$i19, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p13);
    goto $bb6_last;

  $bb6_last:
    out_$p15 := $add.ref($add.ref($add.ref(out_$p13, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(60, 1));
    goto corral_source_split_13579;

  corral_source_split_13577:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb7:
    assume {:verifier.code 0} true;
    assume out_$i26 == 1;
    assume false;
    return;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_13577;

  corral_source_split_13575:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p15, out_$i16, out_$p18, out_$i19, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p48, out_$i49, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i12, out_$p13 := be_get_stats64_loop_$bb4(in_$p1, in_$p9, out_$p15, out_$i16, out_$p18, out_$i19, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p48, out_$i49, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i12, out_$p13);
    return;

  exit:
    return;
}



procedure be_get_stats64_loop_$bb4(in_$p1: ref, in_$p9: ref, in_$p15: ref, in_$i16: i32, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i1, in_$i25: i8, in_$i26: i1, in_$i27: i64, in_$i28: i64, in_$p29: ref, in_$i30: i64, in_$i31: i64, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i64, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p40: ref, in_$i41: i32, in_$i42: i64, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p48: ref, in_$i49: i32, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$i54: i64, in_$i55: i64, in_$p56: ref, in_$i57: i32, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$i12: i32, in_$p13: ref) returns (out_$p15: ref, out_$i16: i32, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i1, out_$i25: i8, out_$i26: i1, out_$i27: i64, out_$i28: i64, out_$p29: ref, out_$i30: i64, out_$i31: i64, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i64, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p40: ref, out_$i41: i32, out_$i42: i64, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p48: ref, out_$i49: i32, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$i54: i64, out_$i55: i64, out_$p56: ref, out_$i57: i32, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$i12: i32, out_$p13: ref);
  modifies $M.0;



implementation be_netpoll_loop_$bb4(in_$p7: ref, in_$p12: ref, in_$p13: ref, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i16, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i10: i32, in_$p11: ref) returns (out_$p12: ref, out_$p13: ref, out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i16, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i10: i32, out_$p11: ref)
{

  entry:
    out_$p12, out_$p13, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i10, out_$p11 := in_$p12, in_$p13, in_$p15, in_$i16, in_$i17, in_$i18, in_$p19, in_$i20, in_$p21, in_$i22, in_$i23, in_$i10, in_$p11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_13888;

  $bb6:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i10, out_$p11 := out_$i20, out_$p21;
    goto $bb6_dummy;

  corral_source_split_13902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_13901:
    assume {:verifier.code 0} true;
    out_$i23 := $ult.i32(out_$i20, out_$i22);
    goto corral_source_split_13902;

  corral_source_split_13900:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.0, in_$p7);
    goto corral_source_split_13901;

  corral_source_split_13899:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref(out_$p11, $mul.ref(1, 272));
    goto corral_source_split_13900;

  corral_source_split_13898:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i10, 1);
    call {:si_unique_call 2816} {:cexpr "i"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_13899;

  corral_source_split_13897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2815} napi_schedule(out_$p19);
    goto corral_source_split_13898;

  corral_source_split_13896:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p11, $mul.ref(0, 272)), $mul.ref(104, 1));
    goto corral_source_split_13897;

  corral_source_split_13895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2814} be_eq_notify(out_$p13, out_$i18, 0, 1, 0);
    goto corral_source_split_13896;

  corral_source_split_13894:
    assume {:verifier.code 0} true;
    out_$i18 := $trunc.i32.i16(out_$i17);
    goto corral_source_split_13895;

  corral_source_split_13893:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i16.i32(out_$i16);
    goto corral_source_split_13894;

  corral_source_split_13892:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i16($M.0, out_$p15);
    goto corral_source_split_13893;

  corral_source_split_13891:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(28, 1));
    goto corral_source_split_13892;

  corral_source_split_13890:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_13891;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 272)), $mul.ref(264, 1));
    goto corral_source_split_13890;

  corral_source_split_13888:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i10, out_$p11 := be_netpoll_loop_$bb4(in_$p7, out_$p12, out_$p13, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i10, out_$p11);
    return;

  exit:
    return;
}



procedure be_netpoll_loop_$bb4(in_$p7: ref, in_$p12: ref, in_$p13: ref, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i16, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i10: i32, in_$p11: ref) returns (out_$p12: ref, out_$p13: ref, out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i16, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i10: i32, out_$p11: ref);
  modifies $M.29, $M.41, $M.0, $M.21, $M.42, $CurrAddr;



implementation make_tx_wrbs_loop_$bb11(in_$p1: ref, in_$p2: ref, in_$p10: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$i50: i32, in_$i51: i64, in_$i52: i64, in_$i53: i32, in_$i54: i1, in_$i55: i32, in_$p56: ref, in_$p57: ref, in_$i58: i32, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i32, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$i66: i8, in_$i67: i32, in_$i68: i1, in_$i42: i32, in_$i43: i32, in_$i69: i32) returns (out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$i50: i32, out_$i51: i64, out_$i52: i64, out_$i53: i32, out_$i54: i1, out_$i55: i32, out_$p56: ref, out_$p57: ref, out_$i58: i32, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i32, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$i66: i8, out_$i67: i32, out_$i68: i1, out_$i42: i32, out_$i43: i32, out_$i69: i32)
{

  entry:
    out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i42, out_$i43, out_$i69 := in_$p44, in_$p45, in_$p46, in_$p47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p56, in_$p57, in_$i58, in_$p59, in_$i60, in_$i61, in_$i62, in_$p63, in_$p64, in_$p65, in_$i66, in_$i67, in_$i68, in_$i42, in_$i43, in_$i69;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14604;

  $bb16:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i42, out_$i43 := out_$i61, out_$i62;
    goto $bb16_dummy;

  corral_source_split_14635:
    assume {:verifier.code 0} true;
    out_$i69 := out_$i61;
    assume true;
    goto $bb16;

  corral_source_split_14634:
    assume {:verifier.code 0} true;
    out_$i68 := $sgt.i32(out_$i67, out_$i62);
    goto corral_source_split_14635;

  corral_source_split_14633:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i8.i32(out_$i66);
    goto corral_source_split_14634;

  corral_source_split_14632:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i8($M.0, out_$p65);
    goto corral_source_split_14633;

  corral_source_split_14631:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p64, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_14632;

  corral_source_split_14630:
    assume {:verifier.code 0} true;
    out_$p64 := $bitcast.ref.ref(out_$p63);
    goto corral_source_split_14631;

  corral_source_split_14629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2950} out_$p63 := skb_end_pointer(in_$p2);
    goto corral_source_split_14630;

  corral_source_split_14628:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i43, 1);
    call {:si_unique_call 2949} {:cexpr "i"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_14629;

  corral_source_split_14627:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i60, out_$i42);
    call {:si_unique_call 2948} {:cexpr "copied"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_14628;

  corral_source_split_14626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2946} out_$i60 := skb_frag_size(out_$p49);
    call {:si_unique_call 2947} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_14627;

  corral_source_split_14625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2945} queue_head_inc(in_$p1);
    goto corral_source_split_14626;

  corral_source_split_14624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2944} swap_dws(out_$p59, 16);
    goto corral_source_split_14625;

  corral_source_split_14623:
    assume {:verifier.code 0} true;
    out_$p59 := $bitcast.ref.ref(out_$p57);
    goto corral_source_split_14624;

  corral_source_split_14622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2943} wrb_fill(out_$p57, out_$i52, out_$i58);
    goto corral_source_split_14623;

  corral_source_split_14621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2941} out_$i58 := skb_frag_size(out_$p49);
    call {:si_unique_call 2942} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_14622;

  corral_source_split_14620:
    assume {:verifier.code 0} true;
    out_$p57 := $bitcast.ref.ref(out_$p56);
    goto corral_source_split_14621;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2940} out_$p56 := queue_head_node(in_$p1);
    goto corral_source_split_14620;

  $bb14:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_14616:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i42;
    assume true;
    goto $bb14;

  corral_source_split_14615:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i32(out_$i53, 0);
    goto corral_source_split_14616;

  corral_source_split_14614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2938} out_$i53 := dma_mapping_error(in_$p10, out_$i52);
    call {:si_unique_call 2939} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_14615;

  corral_source_split_14613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2936} out_$i52 := skb_frag_dma_map(in_$p10, out_$p49, 0, out_$i51, 1);
    call {:si_unique_call 2937} {:cexpr "busaddr"} boogie_si_record_i64(out_$i52);
    goto corral_source_split_14614;

  corral_source_split_14612:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i32.i64(out_$i50);
    goto corral_source_split_14613;

  corral_source_split_14611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2934} out_$i50 := skb_frag_size(out_$p49);
    call {:si_unique_call 2935} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_14612;

  corral_source_split_14610:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(out_$p47, $mul.ref(out_$i48, 16));
    goto corral_source_split_14611;

  corral_source_split_14609:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i43);
    goto corral_source_split_14610;

  corral_source_split_14608:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_14609;

  corral_source_split_14607:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p45, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_14608;

  corral_source_split_14606:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_14607;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2933} out_$p44 := skb_end_pointer(in_$p2);
    goto corral_source_split_14606;

  corral_source_split_14604:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i42, out_$i43, out_$i69 := make_tx_wrbs_loop_$bb11(in_$p1, in_$p2, in_$p10, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i42, out_$i43, out_$i69);
    return;

  exit:
    return;
}



procedure make_tx_wrbs_loop_$bb11(in_$p1: ref, in_$p2: ref, in_$p10: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$i50: i32, in_$i51: i64, in_$i52: i64, in_$i53: i32, in_$i54: i1, in_$i55: i32, in_$p56: ref, in_$p57: ref, in_$i58: i32, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i32, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$i66: i8, in_$i67: i32, in_$i68: i1, in_$i42: i32, in_$i43: i32, in_$i69: i32) returns (out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$i50: i32, out_$i51: i64, out_$i52: i64, out_$i53: i32, out_$i54: i1, out_$i55: i32, out_$p56: ref, out_$p57: ref, out_$i58: i32, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i32, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$i66: i8, out_$i67: i32, out_$i68: i1, out_$i42: i32, out_$i43: i32, out_$i69: i32);
  modifies $M.0;



implementation make_tx_wrbs_loop_$bb26(in_$p1: ref, in_$p10: ref, in_$p81: ref, in_$p82: ref, in_$i83: i1, in_$p84: ref, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$i79: i8, in_$i80: i32) returns (out_$p81: ref, out_$p82: ref, out_$i83: i1, out_$p84: ref, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$i79: i8, out_$i80: i32)
{

  entry:
    out_$p81, out_$p82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i79, out_$i80 := in_$p81, in_$p82, in_$i83, in_$p84, in_$i85, in_$i86, in_$i87, in_$i79, in_$i80;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14658;

  $bb28:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$i79, out_$i80 := 0, out_$i86;
    goto $bb28_dummy;

  corral_source_split_14668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_14667:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i32(out_$i86, 0);
    goto corral_source_split_14668;

  corral_source_split_14666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2960} queue_head_inc(in_$p1);
    goto corral_source_split_14667;

  corral_source_split_14665:
    assume {:verifier.code 0} true;
    out_$i86 := $sub.i32(out_$i80, out_$i85);
    call {:si_unique_call 2959} {:cexpr "copied"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_14666;

  corral_source_split_14664:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i32($M.0, out_$p84);
    goto corral_source_split_14665;

  corral_source_split_14663:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p82, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_14664;

  corral_source_split_14662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2958} unmap_tx_frag(in_$p10, out_$p82, out_$i83);
    goto corral_source_split_14663;

  corral_source_split_14661:
    assume {:verifier.code 0} true;
    out_$i83 := $trunc.i8.i1(out_$i79);
    goto corral_source_split_14662;

  corral_source_split_14660:
    assume {:verifier.code 0} true;
    out_$p82 := $bitcast.ref.ref(out_$p81);
    goto corral_source_split_14661;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2957} out_$p81 := queue_head_node(in_$p1);
    goto corral_source_split_14660;

  corral_source_split_14658:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p81, out_$p82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i79, out_$i80 := make_tx_wrbs_loop_$bb26(in_$p1, in_$p10, out_$p81, out_$p82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i79, out_$i80);
    return;

  exit:
    return;
}



procedure make_tx_wrbs_loop_$bb26(in_$p1: ref, in_$p10: ref, in_$p81: ref, in_$p82: ref, in_$i83: i1, in_$p84: ref, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$i79: i8, in_$i80: i32) returns (out_$p81: ref, out_$p82: ref, out_$i83: i1, out_$p84: ref, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$i79: i8, out_$i80: i32);
  modifies $M.0;



implementation dma_map_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_map_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_map_single_attrs_loop_$bb3();



implementation be_set_fw_log_level_loop_$bb15(in_$i1: i32, in_$p25: ref, in_$i35: i32, in_$i38: i64, in_$i39: i64, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$i47: i1, in_$i48: i64, in_$i49: i64, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$i37: i32, in_$i30: i32) returns (out_$i38: i64, out_$i39: i64, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$i47: i1, out_$i48: i64, out_$i49: i64, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$i37: i32)
{

  entry:
    out_$i38, out_$i39, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p54, out_$i55, out_$i56, out_$i37 := in_$i38, in_$i39, in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$p54, in_$i55, in_$i56, in_$i37;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_15450;

  $bb20:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i37 := out_$i55;
    goto $bb20_dummy;

  corral_source_split_15466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_15465:
    assume {:verifier.code 0} true;
    out_$i56 := $ult.i32(out_$i55, in_$i35);
    goto corral_source_split_15466;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i32(out_$i37, 1);
    call {:si_unique_call 3179} {:cexpr "j"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_15465;

  $bb18:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_15463:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_15462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p54, in_$i1);
    goto corral_source_split_15463;

  corral_source_split_15461:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(in_$p25, $mul.ref(16, 2832)), $mul.ref(24, 1)), $mul.ref(out_$i49, 104)), $mul.ref(40, 1)), $mul.ref(out_$i48, 16)), $mul.ref(4, 1));
    goto corral_source_split_15462;

  corral_source_split_15460:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i32.i64(in_$i30);
    goto corral_source_split_15461;

  corral_source_split_15459:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i37);
    goto corral_source_split_15460;

  $bb17:
    assume out_$i47 == 1;
    goto corral_source_split_15459;

  corral_source_split_15457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_15456:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i46, 0);
    goto corral_source_split_15457;

  corral_source_split_15455:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i8.i32(out_$i45);
    goto corral_source_split_15456;

  corral_source_split_15454:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i8($M.0, out_$p44);
    goto corral_source_split_15455;

  corral_source_split_15453:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(in_$p25, $mul.ref(16, 2832)), $mul.ref(24, 1)), $mul.ref(out_$i39, 104)), $mul.ref(40, 1)), $mul.ref(out_$i38, 16)), $mul.ref(0, 1));
    goto corral_source_split_15454;

  corral_source_split_15452:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(in_$i30);
    goto corral_source_split_15453;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i37);
    goto corral_source_split_15452;

  corral_source_split_15450:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i38, out_$i39, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p54, out_$i55, out_$i56, out_$i37 := be_set_fw_log_level_loop_$bb15(in_$i1, in_$p25, in_$i35, out_$i38, out_$i39, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p54, out_$i55, out_$i56, out_$i37, in_$i30);
    return;

  exit:
    return;
}



procedure be_set_fw_log_level_loop_$bb15(in_$i1: i32, in_$p25: ref, in_$i35: i32, in_$i38: i64, in_$i39: i64, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$i47: i1, in_$i48: i64, in_$i49: i64, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$i37: i32, in_$i30: i32) returns (out_$i38: i64, out_$i39: i64, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$i47: i1, out_$i48: i64, out_$i49: i64, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$i37: i32);
  modifies $M.0;



implementation be_set_fw_log_level_loop_$bb10(in_$i1: i32, in_$p25: ref, in_$p27: ref, in_$i31: i64, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i38: i64, in_$i39: i64, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$i47: i1, in_$i48: i64, in_$i49: i64, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$i37: i32, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i30: i32) returns (out_$i31: i64, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i38: i64, out_$i39: i64, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$i47: i1, out_$i48: i64, out_$i49: i64, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$i37: i32, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i30: i32)
{

  entry:
    out_$i31, out_$p34, out_$i35, out_$i36, out_$i38, out_$i39, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p54, out_$i55, out_$i56, out_$i37, out_$i57, out_$i58, out_$i59, out_$i30 := in_$i31, in_$p34, in_$i35, in_$i36, in_$i38, in_$i39, in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$p54, in_$i55, in_$i56, in_$i37, in_$i57, in_$i58, in_$i59, in_$i30;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_15441;

  $bb23:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := out_$i57;
    goto $bb23_dummy;

  corral_source_split_15472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_15471:
    assume {:verifier.code 0} true;
    out_$i59 := $ult.i32(out_$i57, out_$i58);
    goto corral_source_split_15472;

  corral_source_split_15470:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.0, in_$p27);
    goto corral_source_split_15471;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i57 := $add.i32(out_$i30, 1);
    call {:si_unique_call 3180} {:cexpr "i"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_15470;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb14;

  corral_source_split_15468:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb21:
    assume !(out_$i56 == 1);
    goto corral_source_split_15468;

  corral_source_split_15466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_15465:
    assume {:verifier.code 0} true;
    out_$i56 := $ult.i32(out_$i55, out_$i35);
    goto corral_source_split_15466;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i32(out_$i37, 1);
    call {:si_unique_call 3179} {:cexpr "j"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_15465;

  $bb18:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_15463:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_15462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p54, in_$i1);
    goto corral_source_split_15463;

  corral_source_split_15461:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(in_$p25, $mul.ref(16, 2832)), $mul.ref(24, 1)), $mul.ref(out_$i49, 104)), $mul.ref(40, 1)), $mul.ref(out_$i48, 16)), $mul.ref(4, 1));
    goto corral_source_split_15462;

  corral_source_split_15460:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i32.i64(out_$i30);
    goto corral_source_split_15461;

  corral_source_split_15459:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i37);
    goto corral_source_split_15460;

  $bb17:
    assume out_$i47 == 1;
    goto corral_source_split_15459;

  corral_source_split_15457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_15456:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i46, 0);
    goto corral_source_split_15457;

  corral_source_split_15455:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i8.i32(out_$i45);
    goto corral_source_split_15456;

  corral_source_split_15454:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i8($M.0, out_$p44);
    goto corral_source_split_15455;

  corral_source_split_15453:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(in_$p25, $mul.ref(16, 2832)), $mul.ref(24, 1)), $mul.ref(out_$i39, 104)), $mul.ref(40, 1)), $mul.ref(out_$i38, 16)), $mul.ref(0, 1));
    goto corral_source_split_15454;

  corral_source_split_15452:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i30);
    goto corral_source_split_15453;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i37);
    goto corral_source_split_15452;

  corral_source_split_15450:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb15:
    call out_$i38, out_$i39, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p54, out_$i55, out_$i56, out_$i37 := be_set_fw_log_level_loop_$bb15(in_$i1, in_$p25, out_$i35, out_$i38, out_$i39, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p54, out_$i55, out_$i56, out_$i37, out_$i30);
    goto $bb15_last;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_15450;

  corral_source_split_15448:
    assume {:verifier.code 0} true;
    out_$i37 := 0;
    goto $bb15;

  $bb20:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i37 := out_$i55;
    assume false;
    return;

  $bb12:
    assume out_$i36 == 1;
    goto corral_source_split_15448;

  corral_source_split_15446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_15445:
    assume {:verifier.code 0} true;
    out_$i36 := $ult.i32(0, out_$i35);
    goto corral_source_split_15446;

  corral_source_split_15444:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, out_$p34);
    call {:si_unique_call 3178} {:cexpr "num_modes"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_15445;

  corral_source_split_15443:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref($add.ref(in_$p25, $mul.ref(16, 2832)), $mul.ref(24, 1)), $mul.ref(out_$i31, 104)), $mul.ref(36, 1));
    goto corral_source_split_15444;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i30);
    goto corral_source_split_15443;

  corral_source_split_15441:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i31, out_$p34, out_$i35, out_$i36, out_$i38, out_$i39, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p54, out_$i55, out_$i56, out_$i37, out_$i57, out_$i58, out_$i59, out_$i30 := be_set_fw_log_level_loop_$bb10(in_$i1, in_$p25, in_$p27, out_$i31, out_$p34, out_$i35, out_$i36, out_$i38, out_$i39, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p54, out_$i55, out_$i56, out_$i37, out_$i57, out_$i58, out_$i59, out_$i30);
    return;

  exit:
    return;
}



procedure be_set_fw_log_level_loop_$bb10(in_$i1: i32, in_$p25: ref, in_$p27: ref, in_$i31: i64, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i38: i64, in_$i39: i64, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$i47: i1, in_$i48: i64, in_$i49: i64, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$i37: i32, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i30: i32) returns (out_$i31: i64, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i38: i64, out_$i39: i64, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$i47: i1, out_$i48: i64, out_$i49: i64, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$i37: i32, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i30: i32);
  modifies $M.0;



implementation main_loop_$bb5(in_$p0: ref, in_$i5: i32, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$i34: i32, in_$i35: i32, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i46: i32, in_$i47: i16, in_$i48: i32, in_$i49: i16, in_$i51: i32, in_$i52: i16, in_$i53: i32, in_$i54: i16, in_$i57: i32, in_$i58: i16, in_$i59: i32, in_$i60: i8, in_$i66: i1, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$p73: ref, in_$i74: i32, in_$i36: i32, in_$i37: i32, in_$i3: i32, in_$i4: i32, in_$i79: i32, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_vslice_dummy_var_576: i32, in_vslice_dummy_var_577: i32, in_vslice_dummy_var_578: i32, in_vslice_dummy_var_579: i32, in_vslice_dummy_var_580: i32, in_vslice_dummy_var_581: i32, in_vslice_dummy_var_582: i32, in_vslice_dummy_var_583: i32, in_vslice_dummy_var_584: i32, in_vslice_dummy_var_585: i32, in_vslice_dummy_var_586: ref, in_vslice_dummy_var_587: i32, in_vslice_dummy_var_588: i32, in_vslice_dummy_var_589: i32, in_vslice_dummy_var_590: i32, in_vslice_dummy_var_591: i32) returns (out_$i5: i32, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$i34: i32, out_$i35: i32, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i46: i32, out_$i47: i16, out_$i48: i32, out_$i49: i16, out_$i51: i32, out_$i52: i16, out_$i53: i32, out_$i54: i16, out_$i57: i32, out_$i58: i16, out_$i59: i32, out_$i60: i8, out_$i66: i1, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$p73: ref, out_$i74: i32, out_$i36: i32, out_$i37: i32, out_$i3: i32, out_$i4: i32, out_$i79: i32, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_vslice_dummy_var_576: i32, out_vslice_dummy_var_577: i32, out_vslice_dummy_var_578: i32, out_vslice_dummy_var_579: i32, out_vslice_dummy_var_580: i32, out_vslice_dummy_var_581: i32, out_vslice_dummy_var_582: i32, out_vslice_dummy_var_583: i32, out_vslice_dummy_var_584: i32, out_vslice_dummy_var_585: i32, out_vslice_dummy_var_586: ref, out_vslice_dummy_var_587: i32, out_vslice_dummy_var_588: i32, out_vslice_dummy_var_589: i32, out_vslice_dummy_var_590: i32, out_vslice_dummy_var_591: i32)
{

  entry:
    out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i38, out_$i39, out_$i40, out_$i41, out_$i46, out_$i47, out_$i48, out_$i49, out_$i51, out_$i52, out_$i53, out_$i54, out_$i57, out_$i58, out_$i59, out_$i60, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i36, out_$i37, out_$i3, out_$i4, out_$i79, out_$i80, out_$i81, out_$i82, out_vslice_dummy_var_576, out_vslice_dummy_var_577, out_vslice_dummy_var_578, out_vslice_dummy_var_579, out_vslice_dummy_var_580, out_vslice_dummy_var_581, out_vslice_dummy_var_582, out_vslice_dummy_var_583, out_vslice_dummy_var_584, out_vslice_dummy_var_585, out_vslice_dummy_var_586, out_vslice_dummy_var_587, out_vslice_dummy_var_588, out_vslice_dummy_var_589, out_vslice_dummy_var_590, out_vslice_dummy_var_591 := in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i38, in_$i39, in_$i40, in_$i41, in_$i46, in_$i47, in_$i48, in_$i49, in_$i51, in_$i52, in_$i53, in_$i54, in_$i57, in_$i58, in_$i59, in_$i60, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$p73, in_$i74, in_$i36, in_$i37, in_$i3, in_$i4, in_$i79, in_$i80, in_$i81, in_$i82, in_vslice_dummy_var_576, in_vslice_dummy_var_577, in_vslice_dummy_var_578, in_vslice_dummy_var_579, in_vslice_dummy_var_580, in_vslice_dummy_var_581, in_vslice_dummy_var_582, in_vslice_dummy_var_583, in_vslice_dummy_var_584, in_vslice_dummy_var_585, in_vslice_dummy_var_586, in_vslice_dummy_var_587, in_vslice_dummy_var_588, in_vslice_dummy_var_589, in_vslice_dummy_var_590, in_vslice_dummy_var_591;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_15608;

  corral_source_split_15737:
    assume {:verifier.code 0} true;
    out_$i3, out_$i4 := out_$i36, out_$i37;
    goto corral_source_split_15737_dummy;

  $bb66:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_15737;

  $bb82:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i3, out_$i4;
    goto $bb66;

  corral_source_split_15626:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i3, out_$i4;
    goto $bb66;

  corral_source_split_15620:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i3, out_$i4;
    goto $bb66;

  corral_source_split_15614:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i3, out_$i4;
    goto $bb66;

  corral_source_split_15639:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i3, out_$i4;
    goto $bb66;

  corral_source_split_15635:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i3, out_$i4;
    goto $bb66;

  corral_source_split_15765:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i3, out_$i72;
    goto $bb66;

  corral_source_split_15759:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i3, out_$i70;
    goto $bb66;

  corral_source_split_15647:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i3, out_$i4;
    goto $bb66;

  corral_source_split_15643:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i3, out_$i4;
    goto $bb66;

  corral_source_split_15662:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i3, out_$i4;
    goto $bb66;

  corral_source_split_15658:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i3, out_$i4;
    goto $bb66;

  corral_source_split_15654:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i3, out_$i4;
    goto $bb66;

  corral_source_split_15678:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i3, out_$i4;
    goto $bb66;

  corral_source_split_15674:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i3, out_$i4;
    goto $bb66;

  corral_source_split_15666:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i3, out_$i4;
    goto $bb66;

  corral_source_split_15698:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i3, out_$i4;
    goto $bb66;

  corral_source_split_15690:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i3, out_$i4;
    goto $bb66;

  corral_source_split_15682:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i3, out_$i4;
    goto $bb66;

  corral_source_split_15710:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i3, out_$i4;
    goto $bb66;

  corral_source_split_15706:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i3, out_$i4;
    goto $bb66;

  corral_source_split_15702:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i3, out_$i4;
    goto $bb66;

  corral_source_split_15717:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i3, out_$i4;
    goto $bb66;

  corral_source_split_15747:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i41, out_$i4;
    goto $bb66;

  corral_source_split_15735:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i35, out_$i4;
    goto $bb66;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_15735;

  $bb60:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    out_$i35 := out_$i3;
    goto $bb65;

  corral_source_split_15733:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i34;
    goto $bb65;

  $bb64:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i3, 1);
    call {:si_unique_call 3271} {:cexpr "ldv_s_be_netdev_ops_net_device_ops"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_15733;

  $bb62:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_15726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62;

  corral_source_split_15725:
    assume {:verifier.code 0} true;
    out_$i33 := $slt.i32(out_$i32, 0);
    goto corral_source_split_15726;

  corral_source_split_15724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3268} ldv_check_return_value(out_$i32);
    goto corral_source_split_15725;

  SeqInstr_540:
    call {:si_unique_call 3267} {:cexpr "res_be_open_88"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_15724;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  corral_source_split_15723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3266} out_$i32 := be_open($u1);
    goto SeqInstr_539;

  corral_source_split_15722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3265} ldv_handler_precall();
    goto corral_source_split_15723;

  $bb59:
    assume out_$i31 == 1;
    goto corral_source_split_15722;

  corral_source_split_15720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_15719:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i3, 0);
    goto corral_source_split_15720;

  $bb57:
    assume out_$i30 == 1;
    goto corral_source_split_15719;

  $bb53:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb47:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i32(out_$i5, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb35:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i5, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb8:
    assume out_$i6 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := $slt.i32(out_$i5, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i6 := $slt.i32(out_$i5, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3218} out_$i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 3219} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i5);
    call {:si_unique_call 3220} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i5);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb88:
    assume {:verifier.code 0} true;
    assume out_$i82 == 1;
    goto $bb84;

  $bb86:
    assume {:verifier.code 0} true;
    assume out_$i81 == 1;
    goto $bb84;

  $bb83:
    assume {:verifier.code 0} true;
    assume out_$i80 == 1;
    goto $bb84;

  corral_source_split_15610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb85;

  corral_source_split_15609:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i32(out_$i79, 0);
    goto corral_source_split_15610;

  corral_source_split_15608:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3215} out_$i79 := __VERIFIER_nondet_int();
    call {:si_unique_call 3216} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i79);
    call {:si_unique_call 3217} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_15609;

  corral_source_split_15768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_15767:
    assume {:verifier.code 0} true;
    out_$i81 := $ne.i32(out_$i3, 0);
    goto corral_source_split_15768;

  $bb85:
    assume !(out_$i80 == 1);
    goto corral_source_split_15767;

  corral_source_split_15771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88;

  corral_source_split_15770:
    assume {:verifier.code 0} true;
    out_$i82 := $ne.i32(out_$i4, 0);
    goto corral_source_split_15771;

  $bb87:
    assume !(out_$i81 == 1);
    goto corral_source_split_15770;

  $bb72:
    assume {:verifier.code 0} true;
    goto corral_source_split_15747;

  $bb68:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$i41 := out_$i3;
    goto $bb72;

  $bb71:
    assume {:verifier.code 0} true;
    out_$i41 := 0;
    goto $bb72;

  $bb70:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_15743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70;

  corral_source_split_15742:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, 0);
    goto corral_source_split_15743;

  corral_source_split_15741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3275} ldv_check_return_value(out_$i39);
    goto corral_source_split_15742;

  SeqInstr_543:
    call {:si_unique_call 3274} {:cexpr "res_be_close_86"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_15741;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  corral_source_split_15740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3273} out_$i39 := be_close($u1);
    goto SeqInstr_542;

  corral_source_split_15739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3272} ldv_handler_precall();
    goto corral_source_split_15740;

  $bb67:
    assume out_$i38 == 1;
    goto corral_source_split_15739;

  corral_source_split_15713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_15712:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i3, 1);
    goto corral_source_split_15713;

  $bb55:
    assume out_$i29 == 1;
    goto corral_source_split_15712;

  $bb54:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i5, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_15716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3264} out_vslice_dummy_var_591 := be_xmit($u2, $u1);
    goto corral_source_split_15717;

  corral_source_split_15715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3263} ldv_handler_precall();
    goto corral_source_split_15716;

  $bb56:
    assume !(out_$i29 == 1);
    goto corral_source_split_15715;

  corral_source_split_15701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3258} be_set_rx_mode($u1);
    goto corral_source_split_15702;

  corral_source_split_15700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3257} ldv_handler_precall();
    goto corral_source_split_15701;

  $bb49:
    assume out_$i26 == 1;
    goto corral_source_split_15700;

  $bb48:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(out_$i5, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_15705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3260} out_vslice_dummy_var_589 := be_mac_addr_set($u1, $u3);
    goto corral_source_split_15706;

  corral_source_split_15704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3259} ldv_handler_precall();
    goto corral_source_split_15705;

  $bb51:
    assume out_$i27 == 1;
    goto corral_source_split_15704;

  $bb50:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    out_$i27 := $slt.i32(out_$i5, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_15709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3262} out_vslice_dummy_var_590 := be_change_mtu($u1, $u0);
    goto corral_source_split_15710;

  corral_source_split_15708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3261} ldv_handler_precall();
    goto corral_source_split_15709;

  $bb52:
    assume !(out_$i27 == 1);
    goto corral_source_split_15708;

  corral_source_split_15681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3252} out_vslice_dummy_var_586 := be_get_stats64($u1, $u4);
    goto corral_source_split_15682;

  corral_source_split_15680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3251} ldv_handler_precall();
    goto corral_source_split_15681;

  $bb43:
    assume out_$i23 == 1;
    goto corral_source_split_15680;

  $bb37:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i23 := $slt.i32(out_$i5, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb36:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    out_$i20 := $slt.i32(out_$i5, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_15689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3254} out_vslice_dummy_var_587 := be_vlan_add_vid($u1, out_$i47, out_$i49);
    goto corral_source_split_15690;

  corral_source_split_15688:
    assume {:verifier.code 0} true;
    out_$i49 := $trunc.i32.i16(out_$i48);
    goto corral_source_split_15689;

  corral_source_split_15687:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i16.i32($u5);
    goto corral_source_split_15688;

  corral_source_split_15686:
    assume {:verifier.code 0} true;
    out_$i47 := $trunc.i32.i16(out_$i46);
    goto corral_source_split_15687;

  corral_source_split_15685:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i16.i32($u5);
    goto corral_source_split_15686;

  corral_source_split_15684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3253} ldv_handler_precall();
    goto corral_source_split_15685;

  $bb45:
    assume out_$i24 == 1;
    goto corral_source_split_15684;

  $bb44:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := $slt.i32(out_$i5, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_15697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3256} out_vslice_dummy_var_588 := be_vlan_rem_vid($u1, out_$i52, out_$i54);
    goto corral_source_split_15698;

  corral_source_split_15696:
    assume {:verifier.code 0} true;
    out_$i54 := $trunc.i32.i16(out_$i53);
    goto corral_source_split_15697;

  corral_source_split_15695:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i16.i32($u5);
    goto corral_source_split_15696;

  corral_source_split_15694:
    assume {:verifier.code 0} true;
    out_$i52 := $trunc.i32.i16(out_$i51);
    goto corral_source_split_15695;

  corral_source_split_15693:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i16.i32($u5);
    goto corral_source_split_15694;

  corral_source_split_15692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3255} ldv_handler_precall();
    goto corral_source_split_15693;

  $bb46:
    assume !(out_$i24 == 1);
    goto corral_source_split_15692;

  corral_source_split_15665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3246} out_vslice_dummy_var_583 := be_set_vf_mac($u1, $u0, $u3);
    goto corral_source_split_15666;

  corral_source_split_15664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3245} ldv_handler_precall();
    goto corral_source_split_15665;

  $bb39:
    assume out_$i21 == 1;
    goto corral_source_split_15664;

  $bb38:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i5, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_15673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3248} out_vslice_dummy_var_584 := be_set_vf_vlan($u1, $u0, out_$i58, out_$i60);
    goto corral_source_split_15674;

  corral_source_split_15672:
    assume {:verifier.code 0} true;
    out_$i60 := $trunc.i32.i8(out_$i59);
    goto corral_source_split_15673;

  corral_source_split_15671:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i8.i32($u6);
    goto corral_source_split_15672;

  corral_source_split_15670:
    assume {:verifier.code 0} true;
    out_$i58 := $trunc.i32.i16(out_$i57);
    goto corral_source_split_15671;

  corral_source_split_15669:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i16.i32($u5);
    goto corral_source_split_15670;

  corral_source_split_15668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3247} ldv_handler_precall();
    goto corral_source_split_15669;

  $bb41:
    assume out_$i22 == 1;
    goto corral_source_split_15668;

  $bb40:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    out_$i22 := $slt.i32(out_$i5, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_15677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3250} out_vslice_dummy_var_585 := be_set_vf_tx_rate($u1, $u0, $u0);
    goto corral_source_split_15678;

  corral_source_split_15676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3249} ldv_handler_precall();
    goto corral_source_split_15677;

  $bb42:
    assume !(out_$i22 == 1);
    goto corral_source_split_15676;

  corral_source_split_15653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3240} out_vslice_dummy_var_581 := be_get_vf_config($u1, $u0, $u7);
    goto corral_source_split_15654;

  corral_source_split_15652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3239} ldv_handler_precall();
    goto corral_source_split_15653;

  $bb31:
    assume out_$i17 == 1;
    goto corral_source_split_15652;

  $bb25:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i5, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb10:
    assume out_$i7 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := $slt.i32(out_$i5, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb9:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    out_$i7 := $slt.i32(out_$i5, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_15657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3242} be_netpoll($u1);
    goto corral_source_split_15658;

  corral_source_split_15656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3241} ldv_handler_precall();
    goto corral_source_split_15657;

  $bb33:
    assume out_$i18 == 1;
    goto corral_source_split_15656;

  $bb32:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i5, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  SeqInstr_537:
    goto corral_source_split_15662;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  corral_source_split_15661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3244} out_vslice_dummy_var_582 := be_eeh_err_detected($u8, $u0);
    goto SeqInstr_536;

  corral_source_split_15660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3243} ldv_handler_precall();
    goto corral_source_split_15661;

  $bb34:
    assume !(out_$i18 == 1);
    goto corral_source_split_15660;

  corral_source_split_15642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3236} out_vslice_dummy_var_580 := be_eeh_reset($u8);
    goto corral_source_split_15643;

  corral_source_split_15641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3235} ldv_handler_precall();
    goto corral_source_split_15642;

  $bb27:
    assume out_$i15 == 1;
    goto corral_source_split_15641;

  $bb26:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i5, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  SeqInstr_534:
    goto corral_source_split_15647;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  corral_source_split_15646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3238} be_eeh_resume($u8);
    goto SeqInstr_533;

  corral_source_split_15645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3237} ldv_handler_precall();
    goto corral_source_split_15646;

  $bb29:
    assume out_$i16 == 1;
    goto corral_source_split_15645;

  $bb28:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i5, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb78:
    assume {:verifier.code 0} true;
    goto corral_source_split_15759;

  $bb74:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    out_$i70 := out_$i4;
    goto $bb78;

  corral_source_split_15757:
    assume {:verifier.code 0} true;
    out_$i70 := out_$i69;
    goto $bb78;

  $bb77:
    assume {:verifier.code 0} true;
    out_$i69 := $add.i32(out_$i4, 1);
    call {:si_unique_call 3280} {:cexpr "ldv_s_be_driver_pci_driver"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_15757;

  $bb76:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_15753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76;

  corral_source_split_15752:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i32(out_$i67, 0);
    goto corral_source_split_15753;

  corral_source_split_15751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3279} ldv_check_return_value_probe(out_$i67);
    goto corral_source_split_15752;

  corral_source_split_15750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3278} ldv_check_return_value(out_$i67);
    goto corral_source_split_15751;

  SeqInstr_546:
    call {:si_unique_call 3277} {:cexpr "res_be_probe_135"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_15750;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  corral_source_split_15749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3276} out_$i67 := be_probe($u8, $u9);
    goto SeqInstr_545;

  $bb73:
    assume out_$i66 == 1;
    goto corral_source_split_15749;

  corral_source_split_15650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_15649:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i32(out_$i4, 0);
    goto corral_source_split_15650;

  $bb30:
    assume !(out_$i16 == 1);
    goto corral_source_split_15649;

  $bb81:
    assume {:verifier.code 0} true;
    goto corral_source_split_15765;

  $bb80:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    out_$i72 := out_$i4;
    goto $bb81;

  corral_source_split_15763:
    assume {:verifier.code 0} true;
    out_$i72 := 0;
    goto $bb81;

  SeqInstr_549:
    goto corral_source_split_15763;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  corral_source_split_15762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3282} be_remove($u8);
    goto SeqInstr_548;

  corral_source_split_15761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3281} ldv_handler_precall();
    goto corral_source_split_15762;

  $bb79:
    assume out_$i71 == 1;
    goto corral_source_split_15761;

  corral_source_split_15629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_15628:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i4, 1);
    goto corral_source_split_15629;

  $bb21:
    assume out_$i12 == 1;
    goto corral_source_split_15628;

  $bb12:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := $slt.i32(out_$i5, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb11:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    out_$i8 := $slt.i32(out_$i5, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  SeqInstr_528:
    goto corral_source_split_15635;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  corral_source_split_15634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3232} out_vslice_dummy_var_578 := be_suspend($u8, out_$i74);
    goto SeqInstr_527;

  corral_source_split_15633:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.64, out_$p73);
    goto corral_source_split_15634;

  corral_source_split_15632:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_15633;

  corral_source_split_15631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3231} ldv_handler_precall();
    goto corral_source_split_15632;

  $bb23:
    assume out_$i13 == 1;
    goto corral_source_split_15631;

  $bb22:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i5, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  SeqInstr_531:
    goto corral_source_split_15639;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  corral_source_split_15638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3234} out_vslice_dummy_var_579 := be_resume($u8);
    goto SeqInstr_530;

  corral_source_split_15637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3233} ldv_handler_precall();
    goto corral_source_split_15638;

  $bb24:
    assume !(out_$i13 == 1);
    goto corral_source_split_15637;

  SeqInstr_525:
    goto corral_source_split_15614;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  corral_source_split_15613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3222} be_shutdown($u8);
    goto SeqInstr_524;

  corral_source_split_15612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3221} ldv_handler_precall();
    goto corral_source_split_15613;

  $bb14:
    assume out_$i9 == 1;
    goto corral_source_split_15612;

  $bb13:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    out_$i9 := $slt.i32(out_$i5, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_15619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3226} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_15620;

  corral_source_split_15618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3225} out_vslice_dummy_var_576 := be_intx($u0, $u3);
    goto corral_source_split_15619;

  corral_source_split_15617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3224} ldv_handler_precall();
    goto corral_source_split_15618;

  corral_source_split_15616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3223} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_15617;

  $bb16:
    assume out_$i10 == 1;
    goto corral_source_split_15616;

  $bb15:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := $slt.i32(out_$i5, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_15625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3230} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_15626;

  corral_source_split_15624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3229} out_vslice_dummy_var_577 := be_msix($u0, $u3);
    goto corral_source_split_15625;

  corral_source_split_15623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3228} ldv_handler_precall();
    goto corral_source_split_15624;

  corral_source_split_15622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3227} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_15623;

  $bb18:
    assume out_$i11 == 1;
    goto corral_source_split_15622;

  $bb17:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i5, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i11 == 1);
    goto $bb20;

  $bb58:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb20;

  corral_source_split_15737_dummy:
    call {:si_unique_call 1} out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i38, out_$i39, out_$i40, out_$i41, out_$i46, out_$i47, out_$i48, out_$i49, out_$i51, out_$i52, out_$i53, out_$i54, out_$i57, out_$i58, out_$i59, out_$i60, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i36, out_$i37, out_$i3, out_$i4, out_$i79, out_$i80, out_$i81, out_$i82, out_vslice_dummy_var_576, out_vslice_dummy_var_577, out_vslice_dummy_var_578, out_vslice_dummy_var_579, out_vslice_dummy_var_580, out_vslice_dummy_var_581, out_vslice_dummy_var_582, out_vslice_dummy_var_583, out_vslice_dummy_var_584, out_vslice_dummy_var_585, out_vslice_dummy_var_586, out_vslice_dummy_var_587, out_vslice_dummy_var_588, out_vslice_dummy_var_589, out_vslice_dummy_var_590, out_vslice_dummy_var_591 := main_loop_$bb5(in_$p0, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i38, out_$i39, out_$i40, out_$i41, out_$i46, out_$i47, out_$i48, out_$i49, out_$i51, out_$i52, out_$i53, out_$i54, out_$i57, out_$i58, out_$i59, out_$i60, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i36, out_$i37, out_$i3, out_$i4, out_$i79, out_$i80, out_$i81, out_$i82, out_vslice_dummy_var_576, out_vslice_dummy_var_577, out_vslice_dummy_var_578, out_vslice_dummy_var_579, out_vslice_dummy_var_580, out_vslice_dummy_var_581, out_vslice_dummy_var_582, out_vslice_dummy_var_583, out_vslice_dummy_var_584, out_vslice_dummy_var_585, out_vslice_dummy_var_586, out_vslice_dummy_var_587, out_vslice_dummy_var_588, out_vslice_dummy_var_589, out_vslice_dummy_var_590, out_vslice_dummy_var_591);
    return;

  exit:
    return;
}



procedure main_loop_$bb5(in_$p0: ref, in_$i5: i32, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$i34: i32, in_$i35: i32, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i46: i32, in_$i47: i16, in_$i48: i32, in_$i49: i16, in_$i51: i32, in_$i52: i16, in_$i53: i32, in_$i54: i16, in_$i57: i32, in_$i58: i16, in_$i59: i32, in_$i60: i8, in_$i66: i1, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$p73: ref, in_$i74: i32, in_$i36: i32, in_$i37: i32, in_$i3: i32, in_$i4: i32, in_$i79: i32, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_vslice_dummy_var_576: i32, in_vslice_dummy_var_577: i32, in_vslice_dummy_var_578: i32, in_vslice_dummy_var_579: i32, in_vslice_dummy_var_580: i32, in_vslice_dummy_var_581: i32, in_vslice_dummy_var_582: i32, in_vslice_dummy_var_583: i32, in_vslice_dummy_var_584: i32, in_vslice_dummy_var_585: i32, in_vslice_dummy_var_586: ref, in_vslice_dummy_var_587: i32, in_vslice_dummy_var_588: i32, in_vslice_dummy_var_589: i32, in_vslice_dummy_var_590: i32, in_vslice_dummy_var_591: i32) returns (out_$i5: i32, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$i34: i32, out_$i35: i32, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i46: i32, out_$i47: i16, out_$i48: i32, out_$i49: i16, out_$i51: i32, out_$i52: i16, out_$i53: i32, out_$i54: i16, out_$i57: i32, out_$i58: i16, out_$i59: i32, out_$i60: i8, out_$i66: i1, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$p73: ref, out_$i74: i32, out_$i36: i32, out_$i37: i32, out_$i3: i32, out_$i4: i32, out_$i79: i32, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_vslice_dummy_var_576: i32, out_vslice_dummy_var_577: i32, out_vslice_dummy_var_578: i32, out_vslice_dummy_var_579: i32, out_vslice_dummy_var_580: i32, out_vslice_dummy_var_581: i32, out_vslice_dummy_var_582: i32, out_vslice_dummy_var_583: i32, out_vslice_dummy_var_584: i32, out_vslice_dummy_var_585: i32, out_vslice_dummy_var_586: ref, out_vslice_dummy_var_587: i32, out_vslice_dummy_var_588: i32, out_vslice_dummy_var_589: i32, out_vslice_dummy_var_590: i32, out_vslice_dummy_var_591: i32);
  modifies $M.0, $M.2, $M.21, $M.1, $CurrAddr, $M.34, $M.38, $M.25, $M.35, $M.3, assertsPassed, $M.26, $M.29, $M.41, $M.42, $M.60, $M.61, $M.62, $M.30, $M.31, $M.47, $M.46, $M.48, $M.40, $M.53, $M.54, $M.23, $M.24, $M.49;


