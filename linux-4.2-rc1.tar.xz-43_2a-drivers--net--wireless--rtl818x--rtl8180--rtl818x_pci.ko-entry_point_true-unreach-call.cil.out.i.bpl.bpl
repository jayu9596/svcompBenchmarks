var $M.0: [ref]i8;

var $M.1: [ref]i32;

var $M.2: [ref]i8;

var $M.3: [ref]i32;

var $M.4: [ref]i32;

var $M.5: [ref]i32;

var $M.6: [ref]i32;

var $M.7: ref;

var $M.8: i32;

var $M.9: [ref]ref;

var $M.10: [ref]ref;

var $M.11: [ref]ref;

var $M.12: [ref]i32;

var $M.13: [ref]i16;

var $M.14: [ref]i16;

var $M.15: [ref]i16;

var $M.16: [ref]i32;

var $M.17: [ref]i32;

var $M.18: [ref]i32;

var $M.19: i32;

var $M.20: ref;

var $M.21: i32;

var $M.22: ref;

var $M.23: i32;

var $M.24: ref;

var $M.25: i32;

var $M.26: ref;

var $M.27: i32;

var $M.28: i32;

var $M.29: i32;

var $M.30: i32;

var $M.31: i32;

var $M.32: i32;

var $M.33: i32;

var $M.34: i32;

var $M.35: [ref]i64;

var $M.36: ref;

var $M.37: ref;

var $M.38: ref;

var $M.39: ref;

var $M.40: [ref]i8;

var $M.41: i32;

var $M.42: [ref]i32;

var $M.43: [ref]i8;

var $M.44: [ref]i8;

var $M.45: [ref]i8;

var $M.46: [ref]i8;

var $M.47: [ref]i8;

var $M.48: [ref]i8;

var $M.49: [ref]i32;

var $M.50: [ref]i8;

var $M.51: [ref]i8;

var $M.52: [ref]i8;

var $M.54: i32;

var $M.55: i32;

var $M.56: ref;

var $M.57: i32;

var $M.58: i32;

var $M.59: ref;

var $M.60: i32;

var $M.61: i32;

var $M.62: ref;

var $M.63: i32;

var $M.64: i32;

var $M.65: ref;

var $M.66: ref;

var $M.67: i32;

var $M.68: i32;

var $M.69: i32;

var $M.70: i32;

var $M.71: i32;

var $M.72: i32;

var $M.73: i32;

var $M.74: i32;

var $M.75: i32;

var $M.76: i32;

var $M.77: i32;

var $M.78: i32;

var $M.79: i32;

var $M.80: i32;

var $M.81: i32;

var $M.82: i32;

var $M.83: i32;

var $M.84: i32;

var $M.85: i32;

var $M.86: i32;

var $M.87: ref;

var $M.88: ref;

var $M.89: ref;

var $M.90: ref;

var $M.91: ref;

var $M.92: ref;

var $M.93: [ref]i8;

var $M.94: [ref]i8;

var $M.95: [ref]i32;

var $M.96: [ref]i16;

var $M.97: [ref]i8;

var $M.98: [ref]i16;

var $M.187: [ref]i8;

var $M.188: [ref]i8;

var $M.189: [ref]i32;

var $M.190: [ref]i32;

var $M.191: [ref]i32;

var $M.192: [ref]i32;

var $M.193: [ref]i32;

var $M.194: [ref]i32;

var $M.195: [ref]i64;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 535226);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_irq_2_0: ref;

axiom ldv_irq_2_0 == $sub.ref(0, 1028);

const ldv_irq_2_2: ref;

axiom ldv_irq_2_2 == $sub.ref(0, 2056);

const ldv_irq_2_1: ref;

axiom ldv_irq_2_1 == $sub.ref(0, 3084);

const ldv_irq_1_3: ref;

axiom ldv_irq_1_3 == $sub.ref(0, 4112);

const ldv_irq_1_0: ref;

axiom ldv_irq_1_0 == $sub.ref(0, 5140);

const ldv_irq_1_2: ref;

axiom ldv_irq_1_2 == $sub.ref(0, 6168);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 7196);

const ldv_irq_1_1: ref;

axiom ldv_irq_1_1 == $sub.ref(0, 8224);

const ldv_irq_2_3: ref;

axiom ldv_irq_2_3 == $sub.ref(0, 9252);

const rtl8180_ops_group0: ref;

axiom rtl8180_ops_group0 == $sub.ref(0, 10284);

const ldv_work_3_0: ref;

axiom ldv_work_3_0 == $sub.ref(0, 11312);

const ldv_work_3_1: ref;

axiom ldv_work_3_1 == $sub.ref(0, 12340);

const ldv_work_3_2: ref;

axiom ldv_work_3_2 == $sub.ref(0, 13368);

const ldv_work_3_3: ref;

axiom ldv_work_3_3 == $sub.ref(0, 14396);

const ldv_irq_line_2_0: ref;

axiom ldv_irq_line_2_0 == $sub.ref(0, 15424);

const ldv_irq_data_2_0: ref;

axiom ldv_irq_data_2_0 == $sub.ref(0, 16456);

const ldv_irq_line_2_1: ref;

axiom ldv_irq_line_2_1 == $sub.ref(0, 17484);

const ldv_irq_data_2_1: ref;

axiom ldv_irq_data_2_1 == $sub.ref(0, 18516);

const ldv_irq_line_2_2: ref;

axiom ldv_irq_line_2_2 == $sub.ref(0, 19544);

const ldv_irq_data_2_2: ref;

axiom ldv_irq_data_2_2 == $sub.ref(0, 20576);

const ldv_irq_line_2_3: ref;

axiom ldv_irq_line_2_3 == $sub.ref(0, 21604);

const ldv_irq_data_2_3: ref;

axiom ldv_irq_data_2_3 == $sub.ref(0, 22636);

const ldv_work_struct_3_0: ref;

axiom ldv_work_struct_3_0 == $sub.ref(0, 23668);

const ldv_work_struct_3_1: ref;

axiom ldv_work_struct_3_1 == $sub.ref(0, 24700);

const ldv_work_struct_3_2: ref;

axiom ldv_work_struct_3_2 == $sub.ref(0, 25732);

const ldv_work_struct_3_3: ref;

axiom ldv_work_struct_3_3 == $sub.ref(0, 26764);

const ldv_irq_line_1_0: ref;

axiom ldv_irq_line_1_0 == $sub.ref(0, 27792);

const ldv_irq_data_1_0: ref;

axiom ldv_irq_data_1_0 == $sub.ref(0, 28824);

const ldv_irq_line_1_1: ref;

axiom ldv_irq_line_1_1 == $sub.ref(0, 29852);

const ldv_irq_data_1_1: ref;

axiom ldv_irq_data_1_1 == $sub.ref(0, 30884);

const ldv_irq_line_1_2: ref;

axiom ldv_irq_line_1_2 == $sub.ref(0, 31912);

const ldv_irq_data_1_2: ref;

axiom ldv_irq_data_1_2 == $sub.ref(0, 32944);

const ldv_irq_line_1_3: ref;

axiom ldv_irq_line_1_3 == $sub.ref(0, 33972);

const ldv_irq_data_1_3: ref;

axiom ldv_irq_data_1_3 == $sub.ref(0, 35004);

const rtl8180_driver_group1: ref;

axiom rtl8180_driver_group1 == $sub.ref(0, 36036);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 37064);

const ldv_state_variable_11: ref;

axiom ldv_state_variable_11 == $sub.ref(0, 38092);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 39120);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 40148);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 41176);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 42204);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 43232);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 44260);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 45288);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 46316);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 47344);

const ldv_state_variable_10: ref;

axiom ldv_state_variable_10 == $sub.ref(0, 48372);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 49400);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 50428);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 51456);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 52484);

const pci_counter: ref;

axiom pci_counter == $sub.ref(0, 53512);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 54540);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 55568);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 56596);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 57624);

const rtl8225z2_ops_group0: ref;

axiom rtl8225z2_ops_group0 == $sub.ref(0, 58656);

const rtl8225_ops_group0: ref;

axiom rtl8225_ops_group0 == $sub.ref(0, 59688);

const sa2400_rf_ops: ref;

axiom sa2400_rf_ops == $sub.ref(0, 60752);

const .str: ref;

axiom .str == $sub.ref(0, 61784);

const rtl8225se_ops: ref;

axiom rtl8225se_ops == $sub.ref(0, 62848);

const {:count 14} rtl8225se_chan: ref;

axiom rtl8225se_chan == $sub.ref(0, 63928);

const {:count 36} cck_ofdm_gain_settings: ref;

axiom cck_ofdm_gain_settings == $sub.ref(0, 64988);

const {:count 61} OFDM_CONFIG: ref;

axiom OFDM_CONFIG == $sub.ref(0, 66073);

const {:count 128} ZEBRA_AGC: ref;

axiom ZEBRA_AGC == $sub.ref(0, 67225);

const {:count 37} RF_GAIN_TABLE: ref;

axiom RF_GAIN_TABLE == $sub.ref(0, 68397);

const {:count 16} grf5101_encode: ref;

axiom grf5101_encode == $sub.ref(0, 69485);

const {:count 14} max2820_chan: ref;

axiom max2820_chan == $sub.ref(0, 70565);

const {:count 79} sa2400_rf_rssi_map: ref;

axiom sa2400_rf_rssi_map == $sub.ref(0, 71668);

const {:count 14} sa2400_chan: ref;

axiom sa2400_chan == $sub.ref(0, 72748);

const {:count 7} rtl8225_threshold: ref;

axiom rtl8225_threshold == $sub.ref(0, 73779);

const {:count 28} rtl8225_gain: ref;

axiom rtl8225_gain == $sub.ref(0, 74831);

const {:count 95} rtl8225bcd_rxgain: ref;

axiom rtl8225bcd_rxgain == $sub.ref(0, 76045);

const {:count 128} rtl8225_agc: ref;

axiom rtl8225_agc == $sub.ref(0, 77197);

const {:count 95} rtl8225z2_rxgain: ref;

axiom rtl8225z2_rxgain == $sub.ref(0, 78411);

const {:count 14} rtl8225_chan: ref;

axiom rtl8225_chan == $sub.ref(0, 79491);

const {:count 8} rtl8225z2_tx_power_cck: ref;

axiom rtl8225z2_tx_power_cck == $sub.ref(0, 80523);

const {:count 8} rtl8225z2_tx_power_cck_A: ref;

axiom rtl8225z2_tx_power_cck_A == $sub.ref(0, 81555);

const {:count 8} rtl8225z2_tx_power_cck_B: ref;

axiom rtl8225z2_tx_power_cck_B == $sub.ref(0, 82587);

const {:count 8} rtl8225z2_tx_power_cck_ch14: ref;

axiom rtl8225z2_tx_power_cck_ch14 == $sub.ref(0, 83619);

const {:count 6} rtl8225_tx_power_ofdm: ref;

axiom rtl8225_tx_power_ofdm == $sub.ref(0, 84649);

const {:count 48} rtl8225_tx_power_cck: ref;

axiom rtl8225_tx_power_cck == $sub.ref(0, 85721);

const {:count 48} rtl8225_tx_power_cck_ch14: ref;

axiom rtl8225_tx_power_cck_ch14 == $sub.ref(0, 86793);

const {:count 6} rtl8225_tx_gain_cck_ofdm: ref;

axiom rtl8225_tx_gain_cck_ofdm == $sub.ref(0, 87823);

const rtl8225z2_ops: ref;

axiom rtl8225z2_ops == $sub.ref(0, 88887);

const rtl8225_ops: ref;

axiom rtl8225_ops == $sub.ref(0, 89951);

const {:count 12} rtl818x_rates: ref;

axiom rtl818x_rates == $sub.ref(0, 91119);

const {:count 14} rtl818x_channels: ref;

axiom rtl818x_channels == $sub.ref(0, 93039);

const rtl8180_ops: ref;

axiom rtl8180_ops == $sub.ref(0, 94767);

const {:count 11} rtl8180_table: ref;

axiom rtl8180_table == $sub.ref(0, 96143);

const rtl8180_driver: ref;

axiom rtl8180_driver == $sub.ref(0, 97479);

const {:count 2} rtl8180_queues_map: ref;

axiom rtl8180_queues_map == $sub.ref(0, 98511);

const {:count 5} rtl8187se_queues_map: ref;

axiom rtl8187se_queues_map == $sub.ref(0, 99555);

const {:count 4} rtl8187se_lna_gain: ref;

axiom rtl8187se_lna_gain == $sub.ref(0, 100583);

const {:count 11} __mod_pci__rtl8180_table_device_table: ref;

axiom __mod_pci__rtl8180_table_device_table == $sub.ref(0, 101959);

const max2820_rf_ops_group0: ref;

axiom max2820_rf_ops_group0 == $sub.ref(0, 102991);

const sa2400_rf_ops_group0: ref;

axiom sa2400_rf_ops_group0 == $sub.ref(0, 104023);

const grf5101_rf_ops_group0: ref;

axiom grf5101_rf_ops_group0 == $sub.ref(0, 105055);

const rtl8225se_ops_group0: ref;

axiom rtl8225se_ops_group0 == $sub.ref(0, 106087);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 107115);

const grf5101_rf_ops: ref;

axiom grf5101_rf_ops == $sub.ref(0, 108179);

const max2820_rf_ops: ref;

axiom max2820_rf_ops == $sub.ref(0, 109243);

const {:count 6} .str.1: ref;

axiom .str.1 == $sub.ref(0, 110273);

const {:count 4} .str.2: ref;

axiom .str.2 == $sub.ref(0, 111301);

const {:count 12} .str.11: ref;

axiom .str.11 == $sub.ref(0, 112337);

const {:count 45} .str.23: ref;

axiom .str.23 == $sub.ref(0, 113406);

const {:count 44} .str.24: ref;

axiom .str.24 == $sub.ref(0, 114474);

const {:count 40} .str.25: ref;

axiom .str.25 == $sub.ref(0, 115538);

const {:count 42} .str.26: ref;

axiom .str.26 == $sub.ref(0, 116604);

const {:count 39} .str.27: ref;

axiom .str.27 == $sub.ref(0, 117667);

const {:count 30} .str.28: ref;

axiom .str.28 == $sub.ref(0, 118721);

const {:count 8} .str.29: ref;

axiom .str.29 == $sub.ref(0, 119753);

const {:count 10} .str.30: ref;

axiom .str.30 == $sub.ref(0, 120787);

const {:count 8} .str.31: ref;

axiom .str.31 == $sub.ref(0, 121819);

const {:count 10} .str.32: ref;

axiom .str.32 == $sub.ref(0, 122853);

const {:count 10} .str.33: ref;

axiom .str.33 == $sub.ref(0, 123887);

const {:count 45} .str.34: ref;

axiom .str.34 == $sub.ref(0, 124956);

const {:count 37} .str.35: ref;

axiom .str.35 == $sub.ref(0, 126017);

const {:count 9} .str.36: ref;

axiom .str.36 == $sub.ref(0, 127050);

const {:count 5} .str.37: ref;

axiom .str.37 == $sub.ref(0, 128079);

const {:count 8} .str.38: ref;

axiom .str.38 == $sub.ref(0, 129111);

const {:count 35} .str.39: ref;

axiom .str.39 == $sub.ref(0, 130170);

const {:count 46} .str.40: ref;

axiom .str.40 == $sub.ref(0, 131240);

const {:count 66} .str.41: ref;

axiom .str.41 == $sub.ref(0, 132330);

const {:count 22} .str.42: ref;

axiom .str.42 == $sub.ref(0, 133376);

const {:count 39} .str.43: ref;

axiom .str.43 == $sub.ref(0, 134439);

const {:count 21} .str.44: ref;

axiom .str.44 == $sub.ref(0, 135484);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 34} .str.19: ref;

axiom .str.19 == $sub.ref(0, 136542);

const {:count 35} .str.20: ref;

axiom .str.20 == $sub.ref(0, 137601);

const {:count 41} .str.9: ref;

axiom .str.9 == $sub.ref(0, 138666);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 32} .str.12: ref;

axiom .str.12 == $sub.ref(0, 139722);

const {:count 18} .str.10: ref;

axiom .str.10 == $sub.ref(0, 140764);

const {:count 28} .str.8: ref;

axiom .str.8 == $sub.ref(0, 141816);

const {:count 16} .str.18: ref;

axiom .str.18 == $sub.ref(0, 142856);

const {:count 37} .str.16: ref;

axiom .str.16 == $sub.ref(0, 143917);

const {:count 22} .str.17: ref;

axiom .str.17 == $sub.ref(0, 144963);

const {:count 25} .str.13: ref;

axiom .str.13 == $sub.ref(0, 146012);

const {:count 24} .str.14: ref;

axiom .str.14 == $sub.ref(0, 147060);

const {:count 27} .str.15: ref;

axiom .str.15 == $sub.ref(0, 148111);

const {:count 22} .str.21: ref;

axiom .str.21 == $sub.ref(0, 149157);

const {:count 23} .str.22: ref;

axiom .str.22 == $sub.ref(0, 150204);

const {:count 8} .str.45: ref;

axiom .str.45 == $sub.ref(0, 151236);

const {:count 10} .str.46: ref;

axiom .str.46 == $sub.ref(0, 152270);

const {:count 11} .str.49: ref;

axiom .str.49 == $sub.ref(0, 153305);

const {:count 51} .str.47: ref;

axiom .str.47 == $sub.ref(0, 154380);

const {:count 35} .str.48: ref;

axiom .str.48 == $sub.ref(0, 155439);

const {:count 2} .str.4: ref;

axiom .str.4 == $sub.ref(0, 156465);

const {:count 6} .str.5: ref;

axiom .str.5 == $sub.ref(0, 157495);

const {:count 23} .str.3: ref;

axiom .str.3 == $sub.ref(0, 158542);

const {:count 10} .str.6: ref;

axiom .str.6 == $sub.ref(0, 159576);

const {:count 13} .str.7: ref;

axiom .str.7 == $sub.ref(0, 160613);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 161645);

const {:count 3} .str.1.114: ref;

axiom .str.1.114 == $sub.ref(0, 162672);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 163710);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 164738);

const sa2400_rf_init: ref;

axiom sa2400_rf_init == $sub.ref(0, 165770);

procedure sa2400_rf_init($p0: ref);
  free requires assertsPassed;



implementation sa2400_rf_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i17: i32;
  var $i18: i32;
  var $i15: i32;
  var $i16: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2168, 1));
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1);
    call {:si_unique_call 0} {:cexpr "analogphy"} boogie_si_record_i32($i7);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2164, 1));
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 1} {:cexpr "anaparam"} boogie_si_record_i32($i9);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, $sub.i32(0, 134217729));
    call {:si_unique_call 2} {:cexpr "anaparam"} boogie_si_record_i32($i10);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, $sub.i32(0, 133169153));
    call {:si_unique_call 3} {:cexpr "anaparam"} boogie_si_record_i32($i11);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, $sub.i32(0, 1879048193));
    call {:si_unique_call 4} {:cexpr "anaparam"} boogie_si_record_i32($i12);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i7, 0);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i12, 8388608);
    call {:si_unique_call 6} {:cexpr "anaparam"} boogie_si_record_i32($i17);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i17, 805306368);
    call {:si_unique_call 7} {:cexpr "anaparam"} boogie_si_record_i32($i18);
    assume {:verifier.code 0} true;
    $i15, $i16 := $i18, $sub.i8(0, 128);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} rtl8180_set_anaparam($p3, $i15);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.1, sa2400_chan);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} write_sa2400($p0, 0, $i19);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} write_sa2400($p0, 1, 47952);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} write_sa2400($p0, 2, 128);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} write_sa2400($p0, 3, 0);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i16);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i20, 103232);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} write_sa2400($p0, 4, $i21);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} write_sa2400($p0, 5, 1023483);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i16);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i22, 103240);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} write_sa2400($p0, 4, $i23);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i7, 0);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i16);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i25, 103232);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} write_sa2400($p0, 4, $i26);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.1, sa2400_chan);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} write_sa2400($p0, 0, $i27);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} write_sa2400($p0, 1, 47952);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} write_sa2400($p0, 2, 128);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} write_sa2400($p0, 3, 0);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i16);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i28, 103236);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} write_sa2400($p0, 4, $i29);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} write_sa2400($p0, 6, 8393727);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} write_sa2400($p0, 8, 0);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i7, 0);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i16);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i43, 103233);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} write_sa2400($p0, 4, $i44);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} rtl8180_write_phy($p0, 0, 152);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} rtl8180_write_phy($p0, 3, 56);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} rtl8180_write_phy($p0, 4, 224);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} rtl8180_write_phy($p0, 5, 144);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} rtl8180_write_phy($p0, 6, 26);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} rtl8180_write_phy($p0, 7, 100);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} sa2400_write_phy_antenna($p0, 1);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} rtl8180_write_phy($p0, 17, 128);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 256)), $mul.ref(83, 1));
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $i48 := rtl818x_ioread8($p3, $p47);
    call {:si_unique_call 43} {:cexpr "tmp"} boogie_si_record_i8($i48);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, 64);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i51 == 1);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} rtl8180_write_phy($p0, 18, 71);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2170, 1));
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i55 := $or.i32($i54, 144);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} rtl8180_write_phy($p0, 19, $i55);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} rtl8180_write_phy($p0, 25, 0);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} rtl8180_write_phy($p0, 26, 160);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i51 == 1;
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} rtl8180_write_phy($p0, 18, 199);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i15, 134217728);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} rtl8180_set_anaparam($p3, $i31);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 256)), $mul.ref(64, 1));
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $i35 := rtl818x_ioread32($p3, $p34);
    call {:si_unique_call 27} {:cexpr "txconf"} boogie_si_record_i32($i35);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 256)), $mul.ref(64, 1));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i35, 393216);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} rtl818x_iowrite32($p3, $p38, $i39);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} write_sa2400($p0, 4, 103233);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} write_sa2400($p0, 4, 103237);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 256)), $mul.ref(64, 1));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} rtl818x_iowrite32($p3, $p42, $i35);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} rtl8180_set_anaparam($p3, $i15);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} write_sa2400($p0, 4, 103308);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i12, 41943040);
    call {:si_unique_call 5} {:cexpr "anaparam"} boogie_si_record_i32($i14);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i15, $i16 := $i14, 0;
    goto $bb3;
}



const sa2400_rf_stop: ref;

axiom sa2400_rf_stop == $sub.ref(0, 166802);

procedure sa2400_rf_stop($p0: ref);
  free requires assertsPassed;



implementation sa2400_rf_stop($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} write_sa2400($p0, 4, 0);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    return;
}



const sa2400_rf_set_channel: ref;

axiom sa2400_rf_set_channel == $sub.ref(0, 167834);

procedure sa2400_rf_set_channel($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation sa2400_rf_set_channel($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i16;
  var $i25: i32;
  var $i26: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $i11 := ieee80211_frequency_to_channel($i10);
    call {:si_unique_call 51} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, $sub.i32(0, 1));
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref($i13, 64)), $mul.ref(6, 1));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 255);
    call {:si_unique_call 52} {:cexpr "txpw"} boogie_si_record_i32($i19);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i11, $sub.i32(0, 1));
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref(sa2400_chan, $mul.ref(0, 56)), $mul.ref($i21, 4));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.1, $p22);
    call {:si_unique_call 53} {:cexpr "chan"} boogie_si_record_i32($i23);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} write_sa2400($p0, 7, $i19);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i11);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i25 := $sext.i16.i32($i24);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} sa2400_write_phy_antenna($p0, $i26);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} write_sa2400($p0, 0, $i23);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} write_sa2400($p0, 1, 47952);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} write_sa2400($p0, 2, 128);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} write_sa2400($p0, 3, 0);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    return;
}



const sa2400_rf_calc_rssi: ref;

axiom sa2400_rf_calc_rssi == $sub.ref(0, 168866);

procedure sa2400_rf_calc_rssi($i0: i8, $i1: i8) returns ($r: i8);
  free requires assertsPassed;



implementation sa2400_rf_calc_rssi($i0: i8, $i1: i8) returns ($r: i8)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $i4: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} {:cexpr "sa2400_rf_calc_rssi:arg:agc"} boogie_si_record_i8($i0);
    call {:si_unique_call 61} {:cexpr "sa2400_rf_calc_rssi:arg:sq"} boogie_si_record_i8($i1);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 128);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i1);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i32($i5, 78);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref($i8, 1));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.2, $p9);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $i12 := $mul.i32($i11, 65);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i13 := $sdiv.i32($i12, 100);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i4 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i4 := 32;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 169898);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const max2820_rf_init: ref;

axiom max2820_rf_init == $sub.ref(0, 170930);

procedure max2820_rf_init($p0: ref);
  free requires assertsPassed;



implementation max2820_rf_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} write_max2820($p0, 0, 7);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} write_max2820($p0, 1, 30);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} write_max2820($p0, 2, 1);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} max2820_rf_set_channel($p0, $0.ref);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} write_max2820($p0, 4, 787);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} write_max2820($p0, 5, 15);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} rtl8180_write_phy($p0, 0, 136);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} rtl8180_write_phy($p0, 3, 8);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} rtl8180_write_phy($p0, 4, 248);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} rtl8180_write_phy($p0, 5, 144);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} rtl8180_write_phy($p0, 6, 26);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} rtl8180_write_phy($p0, 7, 100);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} max2820_write_phy_antenna($p0, 1);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} rtl8180_write_phy($p0, 17, 136);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 256)), $mul.ref(83, 1));
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $i7 := rtl818x_ioread8($p3, $p6);
    call {:si_unique_call 77} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 64);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} rtl8180_write_phy($p0, 18, 71);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} rtl8180_write_phy($p0, 19, 155);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} rtl8180_write_phy($p0, 25, 0);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} rtl8180_write_phy($p0, 26, 159);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} max2820_rf_set_channel($p0, $0.ref);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} rtl8180_write_phy($p0, 18, 199);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const max2820_rf_stop: ref;

axiom max2820_rf_stop == $sub.ref(0, 171962);

procedure max2820_rf_stop($p0: ref);
  free requires assertsPassed;



implementation max2820_rf_stop($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} rtl8180_write_phy($p0, 3, 8);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} write_max2820($p0, 1, 0);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    return;
}



const max2820_rf_set_channel: ref;

axiom max2820_rf_set_channel == $sub.ref(0, 172994);

procedure max2820_rf_set_channel($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation max2820_rf_set_channel($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i32;
  var $i23: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i16;
  var $i27: i32;
  var $i28: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, $sub.i32(0, 1));
    call {:si_unique_call 88} {:cexpr "chan_idx"} boogie_si_record_i32($i15);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref($i16, 64)), $mul.ref(6, 1));
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 255);
    call {:si_unique_call 89} {:cexpr "txpw"} boogie_si_record_i32($i22);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i15);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref(max2820_chan, $mul.ref(0, 56)), $mul.ref($i23, 4));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.3, $p24);
    call {:si_unique_call 90} {:cexpr "chan"} boogie_si_record_i32($i25);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} rtl8180_write_phy($p0, 3, $i22);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i14);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i27 := $sext.i16.i32($i26);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} max2820_write_phy_antenna($p0, $i28);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} write_max2820($p0, 3, $i25);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $i13 := ieee80211_frequency_to_channel($i12);
    call {:si_unique_call 87} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb3;
}



const max2820_rf_calc_rssi: ref;

axiom max2820_rf_calc_rssi == $sub.ref(0, 174026);

procedure max2820_rf_calc_rssi($i0: i8, $i1: i8) returns ($r: i8);
  free requires assertsPassed;



implementation max2820_rf_calc_rssi($i0: i8, $i1: i8) returns ($r: i8)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i8;
  var $i13: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} {:cexpr "max2820_rf_calc_rssi:arg:agc"} boogie_si_record_i8($i0);
    call {:si_unique_call 95} {:cexpr "max2820_rf_calc_rssi:arg:sq"} boogie_si_record_i8($i1);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i0);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 96} {:cexpr "odd"} boogie_si_record_i8($i5);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i0);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i7 := $ashr.i32($i6, 1);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    call {:si_unique_call 97} {:cexpr "agc"} boogie_si_record_i8($i8);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i5);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i8);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 66);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    call {:si_unique_call 99} {:cexpr "agc"} boogie_si_record_i8($i16);
    assume {:verifier.code 0} true;
    $i13 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i13);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i18 := $mul.i32($i17, 65);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i19 := $sdiv.i32($i18, 100);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i8);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 76);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    call {:si_unique_call 98} {:cexpr "agc"} boogie_si_record_i8($i12);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const ieee80211_frequency_to_channel: ref;

axiom ieee80211_frequency_to_channel == $sub.ref(0, 175058);

procedure ieee80211_frequency_to_channel($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_frequency_to_channel($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 100} {:cexpr "ieee80211_frequency_to_channel:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 1} true;
    call {:si_unique_call 101} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 102} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const rtl8180_write_phy: ref;

axiom rtl8180_write_phy == $sub.ref(0, 176090);

procedure rtl8180_write_phy($p0: ref, $i1: i8, $i2: i32);
  free requires assertsPassed;



implementation rtl8180_write_phy($p0: ref, $i1: i8, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i8;
  var $i102: i32;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i8;
  var $i115: i32;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i8;
  var $i128: i32;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i8;
  var $i141: i32;
  var $i142: i32;
  var $i143: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} {:cexpr "rtl8180_write_phy:arg:addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 104} {:cexpr "rtl8180_write_phy:arg:data"} boogie_si_record_i32($i2);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32($i2, 8);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i6, $i7);
    call {:si_unique_call 105} {:cexpr "buf"} boogie_si_record_i32($i8);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 256)), $mul.ref(124, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i8, 128);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} rtl818x_iowrite32($p5, $p12, $i13);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 256)), $mul.ref(124, 1));
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} rtl818x_iowrite32($p5, $p17, $i8);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 256)), $mul.ref(124, 1));
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(2, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $i23 := rtl818x_ioread8($p5, $p22);
    call {:si_unique_call 109} {:cexpr "tmp"} boogie_si_record_i8($i23);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i2, 255);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i24, $i25);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 256)), $mul.ref(124, 1));
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} rtl818x_iowrite32($p5, $p30, $i8);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 256)), $mul.ref(124, 1));
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p34, $mul.ref(2, 1));
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $i36 := rtl818x_ioread8($p5, $p35);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i2, 255);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i37, $i38);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 256)), $mul.ref(124, 1));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} rtl818x_iowrite32($p5, $p43, $i8);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 256)), $mul.ref(124, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p47, $mul.ref(2, 1));
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $i49 := rtl818x_ioread8($p5, $p48);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i2, 255);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i50, $i51);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 256)), $mul.ref(124, 1));
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} rtl818x_iowrite32($p5, $p56, $i8);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 256)), $mul.ref(124, 1));
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p60, $mul.ref(2, 1));
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $i62 := rtl818x_ioread8($p5, $p61);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i2, 255);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i63, $i64);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 256)), $mul.ref(124, 1));
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} rtl818x_iowrite32($p5, $p69, $i8);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 256)), $mul.ref(124, 1));
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p73, $mul.ref(2, 1));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $i75 := rtl818x_ioread8($p5, $p74);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i2, 255);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i76, $i77);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 256)), $mul.ref(124, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} rtl818x_iowrite32($p5, $p82, $i8);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 256)), $mul.ref(124, 1));
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p86, $mul.ref(2, 1));
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $i88 := rtl818x_ioread8($p5, $p87);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i88);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i2, 255);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i89, $i90);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 256)), $mul.ref(124, 1));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} rtl818x_iowrite32($p5, $p95, $i8);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 256)), $mul.ref(124, 1));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p99, $mul.ref(2, 1));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $i101 := rtl818x_ioread8($p5, $p100);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i2, 255);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i102, $i103);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 256)), $mul.ref(124, 1));
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} rtl818x_iowrite32($p5, $p108, $i8);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p110, $mul.ref(0, 256)), $mul.ref(124, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p112, $mul.ref(2, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $i114 := rtl818x_ioread8($p5, $p113);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i32($i114);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i116 := $and.i32($i2, 255);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i115, $i116);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p119, $mul.ref(0, 256)), $mul.ref(124, 1));
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} rtl818x_iowrite32($p5, $p121, $i8);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 256)), $mul.ref(124, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($p125, $mul.ref(2, 1));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i127 := rtl818x_ioread8($p5, $p126);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i127);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i129 := $and.i32($i2, 255);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i128, $i129);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p132, $mul.ref(0, 256)), $mul.ref(124, 1));
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p133);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} rtl818x_iowrite32($p5, $p134, $i8);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p135);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p136, $mul.ref(0, 256)), $mul.ref(124, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p138, $mul.ref(2, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $i140 := rtl818x_ioread8($p5, $p139);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i141 := $zext.i8.i32($i140);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i142 := $and.i32($i2, 255);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i141, $i142);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i143 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i130 == 1;
    goto $bb4;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i117 == 1;
    goto $bb4;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i104 == 1;
    goto $bb4;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb4;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb4;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i65 == 1;
    goto $bb4;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb4;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb4;
}



const max2820_write_phy_antenna: ref;

axiom max2820_write_phy_antenna == $sub.ref(0, 177122);

procedure max2820_write_phy_antenna($p0: ref, $i1: i16);
  free requires assertsPassed;



implementation max2820_write_phy_antenna($p0: ref, $i1: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $i19: i8;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} {:cexpr "max2820_write_phy_antenna:arg:chan"} boogie_si_record_i16($i1);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(2168, 1));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 2);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i13 := $sub.i8(0, 77);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i14 := $sext.i16.i32($i1);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 14);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i19 := $i13;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} rtl8180_write_phy($p0, 16, $i20);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i13);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i16, 12);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    call {:si_unique_call 130} {:cexpr "ant"} boogie_si_record_i8($i18);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($sub.i8(0, 77));
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 64);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    call {:si_unique_call 129} {:cexpr "ant"} boogie_si_record_i8($i12);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const write_max2820: ref;

axiom write_max2820 == $sub.ref(0, 178154);

procedure write_max2820($p0: ref, $i1: i8, $i2: i32);
  free requires assertsPassed;



implementation write_max2820($p0: ref, $i1: i8, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} {:cexpr "write_max2820:arg:addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 133} {:cexpr "write_max2820:arg:data"} boogie_si_record_i32($i2);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i2, 15);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 144);
    call {:si_unique_call 134} {:cexpr "phy_config"} boogie_si_record_i32($i7);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32($i7, 16);
    call {:si_unique_call 135} {:cexpr "phy_config"} boogie_si_record_i32($i8);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i1);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, $i8);
    call {:si_unique_call 136} {:cexpr "phy_config"} boogie_si_record_i32($i10);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i11 := $shl.i32($i10, 8);
    call {:si_unique_call 137} {:cexpr "phy_config"} boogie_si_record_i32($i11);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i12 := $lshr.i32($i2, 4);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 255);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, $i11);
    call {:si_unique_call 138} {:cexpr "phy_config"} boogie_si_record_i32($i14);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} rtl818x_iowrite32($p5, $p18, $i14);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} msleep(1);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    return;
}



const rtl818x_iowrite32: ref;

axiom rtl818x_iowrite32 == $sub.ref(0, 179186);

procedure rtl818x_iowrite32($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation rtl818x_iowrite32($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} {:cexpr "rtl818x_iowrite32:arg:val"} boogie_si_record_i32($i2);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} iowrite32($i2, $p3);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 180218);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    return;
}



const iowrite32: ref;

axiom iowrite32 == $sub.ref(0, 181250);

procedure iowrite32($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation iowrite32($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} {:cexpr "iowrite32:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    return;
}



const rtl818x_ioread8: ref;

axiom rtl818x_ioread8 == $sub.ref(0, 182282);

procedure rtl818x_ioread8($p0: ref, $p1: ref) returns ($r: i8);
  free requires assertsPassed;



implementation rtl818x_ioread8($p0: ref, $p1: ref) returns ($r: i8)
{
  var $i2: i32;
  var $i3: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $i2 := ioread8($p1);
    call {:si_unique_call 146} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i2);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ioread8: ref;

axiom ioread8 == $sub.ref(0, 183314);

procedure ioread8($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ioread8($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 1} true;
    call {:si_unique_call 147} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 148} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const grf5101_rf_init: ref;

axiom grf5101_rf_init == $sub.ref(0, 184346);

procedure grf5101_rf_init($p0: ref);
  free requires assertsPassed;



implementation grf5101_rf_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2164, 1));
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} rtl8180_set_anaparam($p3, $i5);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} write_grf5101($p0, 31, 0);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} write_grf5101($p0, 31, 0);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} write_grf5101($p0, 31, 64);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} write_grf5101($p0, 31, 96);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} write_grf5101($p0, 31, 97);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} write_grf5101($p0, 31, 97);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} write_grf5101($p0, 0, 2788);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} write_grf5101($p0, 31, 1);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} write_grf5101($p0, 31, 65);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} write_grf5101($p0, 31, 97);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} write_grf5101($p0, 1, 6691);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} write_grf5101($p0, 2, 18801);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} write_grf5101($p0, 3, 16862);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} write_grf5101($p0, 4, 11648);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} write_grf5101($p0, 5, 26879);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} write_grf5101($p0, 6, 0);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} write_grf5101($p0, 7, 0);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} write_grf5101($p0, 8, 30003);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} write_grf5101($p0, 9, 50177);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} write_grf5101($p0, 10, 0);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} write_grf5101($p0, 12, 455);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} write_grf5101($p0, 13, 10707);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} write_grf5101($p0, 14, 744);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} write_grf5101($p0, 16, 402);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} write_grf5101($p0, 17, 584);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} write_grf5101($p0, 18, 0);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} write_grf5101($p0, 19, 8388);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} write_grf5101($p0, 20, 62716);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} write_grf5101($p0, 21, 0);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} write_grf5101($p0, 22, 5376);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} write_grf5101($p0, 7, 4096);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} rtl8180_write_phy($p0, 0, 168);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} rtl8180_write_phy($p0, 3, 0);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} rtl8180_write_phy($p0, 4, 192);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} rtl8180_write_phy($p0, 5, 144);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} rtl8180_write_phy($p0, 6, 30);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} rtl8180_write_phy($p0, 7, 100);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} grf5101_write_phy_antenna($p0, 1);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} rtl8180_write_phy($p0, 17, 136);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 256)), $mul.ref(83, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $i9 := rtl818x_ioread8($p3, $p8);
    call {:si_unique_call 190} {:cexpr "tmp"} boogie_si_record_i8($i9);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 64);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} rtl8180_write_phy($p0, 18, 64);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2170, 1));
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 144);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} rtl8180_write_phy($p0, 19, $i16);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} rtl8180_write_phy($p0, 25, 0);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} rtl8180_write_phy($p0, 26, 160);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} rtl8180_write_phy($p0, 27, 68);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} rtl8180_write_phy($p0, 18, 192);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const grf5101_rf_stop: ref;

axiom grf5101_rf_stop == $sub.ref(0, 185378);

procedure grf5101_rf_stop($p0: ref);
  free requires assertsPassed;



implementation grf5101_rf_stop($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2164, 1));
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 197} {:cexpr "anaparam"} boogie_si_record_i32($i5);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1048575);
    call {:si_unique_call 198} {:cexpr "anaparam"} boogie_si_record_i32($i6);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 1066401792);
    call {:si_unique_call 199} {:cexpr "anaparam"} boogie_si_record_i32($i7);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} rtl8180_set_anaparam($p3, $i7);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} write_grf5101($p0, 7, 0);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} write_grf5101($p0, 31, 69);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} write_grf5101($p0, 31, 5);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} write_grf5101($p0, 0, 2276);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    return;
}



const grf5101_rf_set_channel: ref;

axiom grf5101_rf_set_channel == $sub.ref(0, 186410);

procedure grf5101_rf_set_channel($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation grf5101_rf_set_channel($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i16;
  var $i22: i32;
  var $i23: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $i11 := ieee80211_frequency_to_channel($i10);
    call {:si_unique_call 206} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, $sub.i32(0, 1));
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref($i13, 64)), $mul.ref(6, 1));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 255);
    call {:si_unique_call 207} {:cexpr "txpw"} boogie_si_record_i32($i19);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i11, $sub.i32(0, 1));
    call {:si_unique_call 208} {:cexpr "chan"} boogie_si_record_i32($i20);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} write_grf5101($p0, 21, 0);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} write_grf5101($p0, 6, $i19);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} write_grf5101($p0, 21, 16);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} write_grf5101($p0, 21, 0);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} write_grf5101($p0, 7, 0);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} write_grf5101($p0, 11, $i20);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} write_grf5101($p0, 7, 4096);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i16($i11);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i22 := $sext.i16.i32($i21);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} grf5101_write_phy_antenna($p0, $i23);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    return;
}



const grf5101_rf_calc_rssi: ref;

axiom grf5101_rf_calc_rssi == $sub.ref(0, 187442);

procedure grf5101_rf_calc_rssi($i0: i8, $i1: i8) returns ($r: i8);
  free requires assertsPassed;



implementation grf5101_rf_calc_rssi($i0: i8, $i1: i8) returns ($r: i8)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;
  var $i4: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} {:cexpr "grf5101_rf_calc_rssi:arg:agc"} boogie_si_record_i8($i0);
    call {:si_unique_call 218} {:cexpr "grf5101_rf_calc_rssi:arg:sq"} boogie_si_record_i8($i1);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i0);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i2, 60);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i0);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i6 := $mul.i32($i5, 65);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i7 := $sdiv.i32($i6, 60);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i4 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i4 := 65;
    goto $bb3;
}



const write_grf5101: ref;

axiom write_grf5101 == $sub.ref(0, 188474);

procedure write_grf5101($p0: ref, $i1: i8, $i2: i32);
  free requires assertsPassed;



implementation write_grf5101($p0: ref, $i1: i8, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} {:cexpr "write_grf5101:arg:addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 220} {:cexpr "write_grf5101:arg:data"} boogie_si_record_i32($i2);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i6 := $lshr.i32($i2, 8);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 15);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref(grf5101_encode, $mul.ref(0, 64)), $mul.ref($i8, 4));
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.4, $p9);
    call {:si_unique_call 221} {:cexpr "phy_config"} boogie_si_record_i32($i10);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i11 := $lshr.i32($i2, 4);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 15);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref(grf5101_encode, $mul.ref(0, 64)), $mul.ref($i13, 4));
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.4, $p14);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i16 := $shl.i32($i15, 4);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i16, $i10);
    call {:si_unique_call 222} {:cexpr "phy_config"} boogie_si_record_i32($i17);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i2, 15);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i18);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref(grf5101_encode, $mul.ref(0, 64)), $mul.ref($i19, 4));
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.4, $p20);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i22 := $shl.i32($i21, 8);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i22, $i17);
    call {:si_unique_call 223} {:cexpr "phy_config"} boogie_si_record_i32($i23);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i1);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i25 := $ashr.i32($i24, 1);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 15);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref(grf5101_encode, $mul.ref(0, 64)), $mul.ref($i27, 4));
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.4, $p28);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i30 := $shl.i32($i29, 12);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i30, $i23);
    call {:si_unique_call 224} {:cexpr "phy_config"} boogie_si_record_i32($i31);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i1);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 1);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i34 := $shl.i32($i33, 16);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i34, $i31);
    call {:si_unique_call 225} {:cexpr "phy_config"} boogie_si_record_i32($i35);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i2, 61440);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i37 := $lshr.i32($i36, 12);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i37);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref(grf5101_encode, $mul.ref(0, 64)), $mul.ref($i38, 4));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.4, $p39);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i41 := $shl.i32($i40, 24);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i41, $i35);
    call {:si_unique_call 226} {:cexpr "phy_config"} boogie_si_record_i32($i42);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i43 := $or.i32($i42, $sub.i32(0, 1879048192));
    call {:si_unique_call 227} {:cexpr "phy_config"} boogie_si_record_i32($i43);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} rtl818x_iowrite32($p5, $p47, $i43);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} msleep(3);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    return;
}



const grf5101_write_phy_antenna: ref;

axiom grf5101_write_phy_antenna == $sub.ref(0, 189506);

procedure grf5101_write_phy_antenna($p0: ref, $i1: i16);
  free requires assertsPassed;



implementation grf5101_write_phy_antenna($p0: ref, $i1: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $i19: i8;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} {:cexpr "grf5101_write_phy_antenna:arg:chan"} boogie_si_record_i16($i1);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(2168, 1));
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 2);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i13 := $sub.i8(0, 93);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i14 := $sext.i16.i32($i1);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 14);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i19 := $i13;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} rtl8180_write_phy($p0, 16, $i20);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i13);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i16, 12);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    call {:si_unique_call 232} {:cexpr "ant"} boogie_si_record_i8($i18);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($sub.i8(0, 93));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 64);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    call {:si_unique_call 231} {:cexpr "ant"} boogie_si_record_i8($i12);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const rtl8180_set_anaparam: ref;

axiom rtl8180_set_anaparam == $sub.ref(0, 190538);

procedure rtl8180_set_anaparam($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation rtl8180_set_anaparam($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i8;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} {:cexpr "rtl8180_set_anaparam:arg:anaparam"} boogie_si_record_i32($i1);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} rtl818x_iowrite8($p0, $p4, $sub.i8(0, 64));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $i8 := rtl818x_ioread8($p0, $p7);
    call {:si_unique_call 237} {:cexpr "reg"} boogie_si_record_i8($i8);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i8);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i12, 64);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} rtl818x_iowrite8($p0, $p11, $i14);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 256)), $mul.ref(84, 1));
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} rtl818x_iowrite32($p0, $p17, $i1);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i8);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 191);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} rtl818x_iowrite8($p0, $p20, $i23);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} rtl818x_iowrite8($p0, $p26, 0);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    return;
}



const rtl818x_iowrite8: ref;

axiom rtl818x_iowrite8 == $sub.ref(0, 191570);

procedure rtl818x_iowrite8($p0: ref, $p1: ref, $i2: i8);
  free requires assertsPassed;



implementation rtl818x_iowrite8($p0: ref, $p1: ref, $i2: i8)
{
  var $i3: i32;
  var $i4: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} {:cexpr "rtl818x_iowrite8:arg:val"} boogie_si_record_i8($i2);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} iowrite8($i4, $p1);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    return;
}



const iowrite8: ref;

axiom iowrite8 == $sub.ref(0, 192602);

procedure iowrite8($i0: i8, $p1: ref);
  free requires assertsPassed;



implementation iowrite8($i0: i8, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} {:cexpr "iowrite8:arg:arg0"} boogie_si_record_i8($i0);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    return;
}



const rtl8180_probe: ref;

axiom rtl8180_probe == $sub.ref(0, 193634);

procedure rtl8180_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation rtl8180_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p19: ref;
  var $i20: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p28: ref;
  var $i29: i64;
  var $i30: i32;
  var $p33: ref;
  var $i34: i64;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p46: ref;
  var $i47: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p55: ref;
  var $i56: i64;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $i65: i1;
  var $p66: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i64;
  var $i96: i1;
  var $i97: i64;
  var $p98: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $i105: i1;
  var $p106: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p113: ref;
  var $p114: ref;
  var $p117: ref;
  var $p119: ref;
  var $p120: ref;
  var $p123: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i32;
  var $i140: i32;
  var $i141: i1;
  var $i142: i1;
  var $i143: i1;
  var $i144: i1;
  var $i145: i1;
  var $i146: i1;
  var $i147: i1;
  var $i148: i1;
  var $i149: i1;
  var $p150: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i8;
  var $i157: i1;
  var $p158: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i32;
  var $p151: ref;
  var $p164: ref;
  var $i165: i32;
  var $i166: i1;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $i170: i32;
  var $i171: i1;
  var $p173: ref;
  var $p175: ref;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $i179: i8;
  var $i180: i32;
  var $i181: i1;
  var $i182: i1;
  var $i183: i1;
  var $i184: i1;
  var $i185: i1;
  var $i186: i1;
  var $i187: i1;
  var $i188: i1;
  var $i189: i1;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $i195: i32;
  var $i196: i1;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $i203: i8;
  var $i204: i32;
  var $p190: ref;
  var $p206: ref;
  var $p207: ref;
  var $i208: i64;
  var $i209: i1;
  var $p210: ref;
  var $p212: ref;
  var $p213: ref;
  var $i214: i1;
  var $i215: i8;
  var $i216: i1;
  var $i217: i32;
  var $i218: i1;
  var $p219: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p228: ref;
  var $p229: ref;
  var $i230: i32;
  var $i231: i1;
  var $p232: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $i159: i32;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $i107: i32;
  var $i68: i32;
  var $i7: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_24: i32;
  var vslice_dummy_var_25: i32;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i32;
  var vslice_dummy_var_28: i32;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: ref;
  var vslice_dummy_var_36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $i3 := pci_enable_device($p0);
    call {:si_unique_call 247} {:cexpr "err"} boogie_si_record_i32($i3);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $i8 := pci_request_regions($p0, .str.11);
    call {:si_unique_call 251} {:cexpr "err"} boogie_si_record_i32($i8);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i20, $i24);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.0, $p41);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i43 == 1);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(8, 1));
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i47, $i51);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i52 == 1);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i63 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i64 := $ule.i64($i63, 255);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i64 == 1);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i65 := $ule.i32($i38, 255);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $i69 := pci_set_dma_mask($p0, 4294967295);
    call {:si_unique_call 259} {:cexpr "err"} boogie_si_record_i32($i69);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i70 == 1);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $i73 := pci_set_consistent_dma_mask($p0, 4294967295);
    call {:si_unique_call 263} {:cexpr "err"} boogie_si_record_i32($i73);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} pci_set_master($p0);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $p77 := ldv_ieee80211_alloc_hw_46(2192, rtl8180_ops);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i79 := $eq.i64($i78, 0);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p77, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p85, $p0);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p77, $mul.ref(0, 160)), $mul.ref(117, 1));
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p86, 1);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} SET_IEEE80211_DEV($p77, $p87);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p77);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} pci_set_drvdata($p0, $p88);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(24, 1));
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p89, 0);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $p90 := pci_iomap($p0, 1, $i63);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p92, $p90);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p94);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i96 := $eq.i64($i95, 0);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i104 := $p2i.ref.i64($p103);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i105 := $eq.i64($i104, 0);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(992, 1));
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 276} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p109, rtl818x_channels, 896, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(1888, 1));
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 277} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p111, rtl818x_rates, 144, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(2032, 1)), $mul.ref(16, 1));
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, 0);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(992, 1));
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(2032, 1)), $mul.ref(0, 1));
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p117, $p114);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(2032, 1)), $mul.ref(20, 1));
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p119, 14);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(1888, 1));
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(2032, 1)), $mul.ref(8, 1));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p123, $p120);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(2032, 1)), $mul.ref(24, 1));
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p125, 4);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(2032, 1));
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p77, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p128, $mul.ref(0, 1776)), $mul.ref(224, 1)), $mul.ref(0, 8));
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p130, $p126);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} _ieee80211_hw_set($p77, 2);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} _ieee80211_hw_set($p77, 1);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p77, $mul.ref(0, 160)), $mul.ref(96, 1));
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p131, 240);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p77, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p133, $mul.ref(0, 1776)), $mul.ref(48, 1));
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p134, 6);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p77, $mul.ref(0, 160)), $mul.ref(116, 1));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p135, 65);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p137, $mul.ref(0, 256)), $mul.ref(64, 1));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i139 := rtl818x_ioread32($p84, $p138);
    call {:si_unique_call 281} {:cexpr "reg"} boogie_si_record_i32($i139);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i140 := $and.i32($i139, 234881024);
    call {:si_unique_call 282} {:cexpr "reg"} boogie_si_record_i32($i140);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i141 := $slt.i32($i140, 134217728);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    $i142 := $slt.i32($i140, 167772160);
    assume {:verifier.code 0} true;
    assume {:branchcond $i142} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    $i143 := $slt.i32($i140, 201326592);
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i140, 201326592);
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i144 == 1);
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $p161 := pci_name($p0);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i162 := $lshr.i32($i140, 25);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} vslice_dummy_var_30 := printk.ref.ref.i32(.str.35, $p161, $i162);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i159 := $sub.i32(0, 19);
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $p244 := $load.ref($M.0, $p243);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p245 := $bitcast.ref.ref($p244);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} pci_iounmap($p0, $p245);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i107 := $i159;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} ldv_ieee80211_free_hw_47($p77);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i68 := $i107;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} pci_release_regions($p0);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} pci_disable_device($p0);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i7 := $i68;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb50:
    assume $i144 == 1;
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(24, 1));
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i156 := $load.i8($M.0, $p155);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i157 := $trunc.i8.i1($i156);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p160, 2);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p151 := .str.33;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.0, $p164);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 2);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i166 == 1);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p77, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p168, 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i170 := $load.i32($M.0, $p169);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i171 := $ne.i32($i170, 0);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i176 := $load.i32($M.0, $p175);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i177 := $ne.i32($i176, 0);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i177 == 1);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} _ieee80211_hw_set($p77, 3);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} rtl8180_eeprom_read($p84);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(2177, 1));
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i179 := $load.i8($M.0, $p178);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i180 := $zext.i8.i32($i179);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i181 := $slt.i32($i180, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    $i182 := $slt.i32($i180, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    $i183 := $slt.i32($i180, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i180, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i184} true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i184 == 1);
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $p201 := pci_name($p0);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(2177, 1));
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i203 := $load.i8($M.0, $p202);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i204 := $zext.i8.i32($i203);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} vslice_dummy_var_32 := printk.ref.ref.i32(.str.39, $p201, $i204);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i159 := $sub.i32(0, 19);
    goto $bb66;

  $bb85:
    assume $i184 == 1;
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p190 := .str.38;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(8, 1));
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.0, $p206);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i208 := $p2i.ref.i64($p207);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i209 := $eq.i64($i208, 0);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i209} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(2171, 1));
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $p213 := $bitcast.ref.ref($p212);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $i214 := is_valid_ether_addr($p213);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i215 := $zext.i1.i8($i214);
    call {:si_unique_call 298} {:cexpr "tmp___10"} boogie_si_record_i8($i215);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i216 := $trunc.i8.i1($i215);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    assume {:branchcond $i216} true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    $i217 := 1;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i218 := $ne.i32($i217, 0);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    assume {:branchcond $i218} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(2171, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p224 := $bitcast.ref.ref($p223);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} SET_IEEE80211_PERM_ADDR($p77, $p224);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} vslice_dummy_var_35 := spinlock_check($p225);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $p229 := $bitcast.ref.ref($p228);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} __raw_spin_lock_init($p229, .str.42, $p2);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i230 := ieee80211_register_hw($p77);
    call {:si_unique_call 306} {:cexpr "err"} boogie_si_record_i32($i230);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i231 := $ne.i32($i230, 0);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p77, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p235 := $load.ref($M.0, $p234);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p235, $mul.ref(0, 1776)), $mul.ref(264, 1));
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(2171, 1));
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p238 := $bitcast.ref.ref($p237);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(8, 1));
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p240 := $load.ref($M.0, $p239);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p240, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p242 := $load.ref($M.0, $p241);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} _dev_info.ref.ref.ref.ref.ref($p236, .str.44, $p238, $p151, $p242);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb112:
    assume $i231 == 1;
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} $p232 := pci_name($p0);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} vslice_dummy_var_36 := printk.ref.ref(.str.43, $p232);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i159 := $i230;
    goto $bb66;

  $bb109:
    assume $i218 == 1;
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $p219 := pci_name($p0);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} vslice_dummy_var_34 := printk.ref.ref(.str.41, $p219);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(2171, 1));
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p222 := $bitcast.ref.ref($p221);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} eth_random_addr($p222);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb106:
    assume $i216 == 1;
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i217 := 0;
    goto $bb108;

  $bb103:
    assume $i209 == 1;
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $p210 := pci_name($p0);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} vslice_dummy_var_33 := printk.ref.ref.ref(.str.40, $p210, $p190);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i159 := $sub.i32(0, 19);
    goto $bb66;

  $bb83:
    assume $i183 == 1;
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i195 := $load.i32($M.0, $p194);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i195, 2);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i196 == 1);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $p199 := rtl8180_detect_rf($p77);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(8, 1));
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p200, $p199);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p190 := $0.ref;
    goto $bb98;

  $bb99:
    assume $i196 == 1;
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} $p197 := rtl8187se_detect_rf($p77);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(8, 1));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p198, $p197);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb81:
    assume $i182 == 1;
    assume {:verifier.code 0} true;
    $i185 := $slt.i32($i180, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i180, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i186} true;
    goto $bb90, $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    assume !($i186 == 1);
    goto $bb87;

  $bb90:
    assume $i186 == 1;
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(8, 1));
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p193, grf5101_rf_ops);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p190 := $0.ref;
    goto $bb98;

  $bb88:
    assume $i185 == 1;
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(8, 1));
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p192, max2820_rf_ops);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $p190 := $0.ref;
    goto $bb98;

  $bb79:
    assume $i181 == 1;
    assume {:verifier.code 0} true;
    $i187 := $slt.i32($i180, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    $i188 := $slt.i32($i180, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i188 == 1);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(8, 1));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p191, sa2400_rf_ops);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p190 := $0.ref;
    goto $bb98;

  $bb94:
    assume $i188 == 1;
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p190 := .str.37;
    goto $bb98;

  $bb92:
    assume $i187 == 1;
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i180, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    assume !($i189 == 1);
    goto $bb87;

  $bb96:
    assume $i189 == 1;
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p190 := .str.36;
    goto $bb98;

  $bb75:
    assume $i177 == 1;
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} _ieee80211_hw_set($p77, 4);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb72:
    assume $i171 == 1;
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(2032, 1)), $mul.ref(24, 1));
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p173, 12);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} vslice_dummy_var_31 := pci_try_set_mwi($p0);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb69:
    assume $i166 == 1;
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p77, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p167, 4);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb64:
    assume $i157 == 1;
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} dev_err.ref.ref($p158, .str.34);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i159 := $sub.i32(0, 12);
    goto $bb66;

  $bb48:
    assume $i143 == 1;
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i140, 167772160);
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i145 == 1);
    goto $bb52;

  $bb53:
    assume $i145 == 1;
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p154, 1);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p151 := .str.32;
    goto $bb63;

  $bb46:
    assume $i142 == 1;
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i140, 134217728);
    assume {:verifier.code 0} true;
    assume {:branchcond $i146} true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i146 == 1);
    goto $bb52;

  $bb55:
    assume $i146 == 1;
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p153, 1);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p151 := .str.31;
    goto $bb63;

  $bb44:
    assume $i141 == 1;
    assume {:verifier.code 0} true;
    $i147 := $slt.i32($i140, 100663296);
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i140, 100663296);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i148 == 1);
    goto $bb52;

  $bb59:
    assume $i148 == 1;
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p152, 0);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p151 := .str.30;
    goto $bb63;

  $bb57:
    assume $i147 == 1;
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i140, 67108864);
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i149 == 1);
    goto $bb52;

  $bb61:
    assume $i149 == 1;
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p150, 0);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p151 := .str.29;
    goto $bb63;

  $bb39:
    assume $i105 == 1;
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} dev_err.ref.ref($p106, .str.28);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i107 := $sub.i32(0, 12);
    goto $bb41;

  $bb36:
    assume $i96 == 1;
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i97 := $zext.i32.i64($i38);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $p98 := pci_iomap($p0, 0, $i97);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p100, $p98);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p84, $mul.ref(0, 2192)), $mul.ref(24, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p101, 1);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume $i79 == 1;
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $p80 := pci_name($p0);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} vslice_dummy_var_29 := printk.ref.ref(.str.27, $p80);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i68 := $sub.i32(0, 12);
    goto $bb25;

  $bb29:
    assume $i74 == 1;
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $p75 := pci_name($p0);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} vslice_dummy_var_28 := printk.ref.ref(.str.26, $p75);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i68 := $i73;
    goto $bb25;

  $bb27:
    assume $i70 == 1;
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $p71 := pci_name($p0);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} vslice_dummy_var_27 := printk.ref.ref(.str.26, $p71);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i68 := $i69;
    goto $bb25;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i65 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $p66 := pci_name($p0);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} vslice_dummy_var_26 := printk.ref.ref(.str.25, $p66);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i68 := $sub.i32(0, 12);
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb21;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(8, 1));
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.0, $p55);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.0, $p59);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i61 := $sub.i64($i56, $i60);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i62 := $add.i64($i61, 1);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i63 := $i62;
    goto $bb19;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i64.i32($i29);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i32($i34);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32($i30, $i35);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i36, 1);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb9;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $p10 := pci_name($p0);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} vslice_dummy_var_25 := printk.ref.ref(.str.24, $p10);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i7 := $i8;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $p5 := pci_name($p0);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} vslice_dummy_var_24 := printk.ref.ref(.str.23, $p5);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i7 := $i3;
    goto $bb3;
}



const rtl8180_remove: ref;

axiom rtl8180_remove == $sub.ref(0, 194666);

procedure rtl8180_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.8;



implementation rtl8180_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} ieee80211_unregister_hw($p2);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} pci_iounmap($p0, $p10);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} pci_release_regions($p0);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} pci_disable_device($p0);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} ldv_ieee80211_free_hw_48($p2);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rtl8180_suspend: ref;

axiom rtl8180_suspend == $sub.ref(0, 195698);

procedure rtl8180_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5, $M.6, $CurrAddr;



implementation rtl8180_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var vslice_dummy_var_37: i32;
  var vslice_dummy_var_38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, $p3, $i1);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} vslice_dummy_var_37 := pci_save_state($p0);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.5, $p5);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $i7 := pci_choose_state($p0, $i6);
    call {:si_unique_call 319} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} vslice_dummy_var_38 := pci_set_power_state($p0, $i7);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const rtl8180_resume: ref;

axiom rtl8180_resume == $sub.ref(0, 196730);

procedure rtl8180_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation rtl8180_resume($p0: ref) returns ($r: i32)
{
  var vslice_dummy_var_39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} vslice_dummy_var_39 := pci_set_power_state($p0, 0);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} pci_restore_state($p0);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const pci_set_power_state: ref;

axiom pci_set_power_state == $sub.ref(0, 197762);

procedure pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 323} {:cexpr "pci_set_power_state:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 1} true;
    call {:si_unique_call 324} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 325} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_restore_state: ref;

axiom pci_restore_state == $sub.ref(0, 198794);

procedure pci_restore_state($p0: ref);
  free requires assertsPassed;



implementation pci_restore_state($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    return;
}



const pci_save_state: ref;

axiom pci_save_state == $sub.ref(0, 199826);

procedure pci_save_state($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_save_state($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 1} true;
    call {:si_unique_call 326} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 327} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_choose_state: ref;

axiom pci_choose_state == $sub.ref(0, 200858);

procedure pci_choose_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation pci_choose_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p3, $i1);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 1} true;
    call {:si_unique_call 329} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 330} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 201890);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ieee80211_unregister_hw: ref;

axiom ieee80211_unregister_hw == $sub.ref(0, 202922);

procedure ieee80211_unregister_hw($p0: ref);
  free requires assertsPassed;



implementation ieee80211_unregister_hw($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    return;
}



const pci_iounmap: ref;

axiom pci_iounmap == $sub.ref(0, 203954);

procedure pci_iounmap($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation pci_iounmap($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    return;
}



const pci_release_regions: ref;

axiom pci_release_regions == $sub.ref(0, 204986);

procedure pci_release_regions($p0: ref);
  free requires assertsPassed;



implementation pci_release_regions($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    return;
}



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 206018);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    return;
}



const ldv_ieee80211_free_hw_48: ref;

axiom ldv_ieee80211_free_hw_48 == $sub.ref(0, 207050);

procedure ldv_ieee80211_free_hw_48($p0: ref);
  free requires assertsPassed;
  modifies $M.8;



implementation ldv_ieee80211_free_hw_48($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} ieee80211_free_hw($p0);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $p1 := $M.7;
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, $i3);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $M.8 := 0;
    call {:si_unique_call 333} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ieee80211_free_hw: ref;

axiom ieee80211_free_hw == $sub.ref(0, 208082);

procedure ieee80211_free_hw($p0: ref);
  free requires assertsPassed;



implementation ieee80211_free_hw($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 209114);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 210146);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 1} true;
    call {:si_unique_call 334} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 335} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_name: ref;

axiom pci_name == $sub.ref(0, 211178);

procedure pci_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $p2 := dev_name($p1);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 212210);

procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 1} true;
    call {:si_unique_call 337} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 338} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 1} true;
    call {:si_unique_call 339} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 340} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 1} true;
    call {:si_unique_call 341} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 342} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_request_regions: ref;

axiom pci_request_regions == $sub.ref(0, 213242);

procedure pci_request_regions($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_request_regions($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 1} true;
    call {:si_unique_call 343} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 344} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_set_dma_mask: ref;

axiom pci_set_dma_mask == $sub.ref(0, 214274);

procedure pci_set_dma_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_dma_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} {:cexpr "pci_set_dma_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $i3 := dma_set_mask($p2, $i1);
    call {:si_unique_call 347} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_set_consistent_dma_mask: ref;

axiom pci_set_consistent_dma_mask == $sub.ref(0, 215306);

procedure pci_set_consistent_dma_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pci_set_consistent_dma_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} {:cexpr "pci_set_consistent_dma_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $i3 := dma_set_coherent_mask($p2, $i1);
    call {:si_unique_call 350} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_set_master: ref;

axiom pci_set_master == $sub.ref(0, 216338);

procedure pci_set_master($p0: ref);
  free requires assertsPassed;



implementation pci_set_master($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    return;
}



const ldv_ieee80211_alloc_hw_46: ref;

axiom ldv_ieee80211_alloc_hw_46 == $sub.ref(0, 217370);

procedure ldv_ieee80211_alloc_hw_46($i0: i64, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.8, $M.7, $M.0, $CurrAddr;



implementation ldv_ieee80211_alloc_hw_46($i0: i64, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} {:cexpr "ldv_ieee80211_alloc_hw_46:arg:priv_data_len"} boogie_si_record_i64($i0);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $p2 := ieee80211_alloc_hw($i0, $p1);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 353} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} ldv_initialize_ieee80211_ops_11();
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $M.7 := $p2;
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const SET_IEEE80211_DEV: ref;

axiom SET_IEEE80211_DEV == $sub.ref(0, 218402);

procedure SET_IEEE80211_DEV($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation SET_IEEE80211_DEV($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} set_wiphy_dev($p3, $p1);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    return;
}



const pci_set_drvdata: ref;

axiom pci_set_drvdata == $sub.ref(0, 219434);

procedure pci_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pci_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} dev_set_drvdata($p2, $p1);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    return;
}



const pci_iomap: ref;

axiom pci_iomap == $sub.ref(0, 220466);

procedure pci_iomap($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation pci_iomap($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} {:cexpr "pci_iomap:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 358} {:cexpr "pci_iomap:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $p3 := external_alloc();
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 221498);

procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 222530);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const _ieee80211_hw_set: ref;

axiom _ieee80211_hw_set == $sub.ref(0, 223562);

procedure _ieee80211_hw_set($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation _ieee80211_hw_set($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} {:cexpr "_ieee80211_hw_set:arg:flg"} boogie_si_record_i32($i1);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    return;
}



const rtl818x_ioread32: ref;

axiom rtl818x_ioread32 == $sub.ref(0, 224594);

procedure rtl818x_ioread32($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation rtl818x_ioread32($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $i3 := ioread32($p2);
    call {:si_unique_call 362} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_try_set_mwi: ref;

axiom pci_try_set_mwi == $sub.ref(0, 225626);

procedure pci_try_set_mwi($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_try_set_mwi($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 1} true;
    call {:si_unique_call 363} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 364} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const rtl8180_eeprom_read: ref;

axiom rtl8180_eeprom_read == $sub.ref(0, 226658);

procedure rtl8180_eeprom_read($p0: ref);
  free requires assertsPassed;
  modifies $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $CurrAddr;



implementation rtl8180_eeprom_read($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i32;
  var $i28: i16;
  var $i29: i16;
  var $i30: i8;
  var $p31: ref;
  var $i32: i16;
  var $i33: i32;
  var $i34: i32;
  var $i35: i8;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i8;
  var $i44: i32;
  var $i45: i8;
  var $i46: i16;
  var $i47: i32;
  var $i48: i32;
  var $i49: i16;
  var $p52: ref;
  var $i53: i16;
  var $i54: i32;
  var $i55: i32;
  var $i56: i16;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p65: ref;
  var $i66: i16;
  var $i67: i32;
  var $i68: i16;
  var $i69: i32;
  var $i70: i32;
  var $i71: i16;
  var $i72: i32;
  var $i73: i32;
  var $i74: i16;
  var $p77: ref;
  var $p80: ref;
  var $i81: i16;
  var $i82: i32;
  var $i83: i16;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i16;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i1;
  var $i101: i16;
  var $i102: i32;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i8;
  var $p107: ref;
  var $i108: i16;
  var $i109: i32;
  var $i110: i32;
  var $i111: i1;
  var $i112: i32;
  var $i113: i8;
  var $p114: ref;
  var $i115: i16;
  var $i116: i8;
  var $i117: i32;
  var $i118: i32;
  var $i119: i8;
  var $p120: ref;
  var $i121: i16;
  var $i122: i32;
  var $i123: i32;
  var $i124: i32;
  var $i125: i8;
  var $p126: ref;
  var $i127: i16;
  var $i128: i32;
  var $i129: i32;
  var $i130: i1;
  var $i131: i32;
  var $i132: i8;
  var $p133: ref;
  var $i134: i16;
  var $i135: i32;
  var $i136: i32;
  var $i137: i32;
  var $i138: i8;
  var $p139: ref;
  var $i140: i16;
  var $i141: i32;
  var $i142: i32;
  var $i143: i1;
  var $i144: i32;
  var $i145: i8;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p152: ref;
  var $i153: i16;
  var $i154: i32;
  var $i155: i16;
  var $i156: i32;
  var $i157: i32;
  var $i158: i16;
  var $i159: i32;
  var $i160: i32;
  var $i161: i16;
  var $p164: ref;
  var $p167: ref;
  var $i168: i16;
  var $i169: i32;
  var $i170: i16;
  var $i171: i32;
  var $i172: i32;
  var $i173: i32;
  var $i174: i16;
  var $p177: ref;
  var $p180: ref;
  var $i181: i16;
  var $i182: i32;
  var $i183: i16;
  var $i184: i32;
  var $i185: i32;
  var $i186: i16;
  var $i187: i32;
  var $i188: i32;
  var $i189: i16;
  var $p192: ref;
  var $p195: ref;
  var $i196: i16;
  var $i197: i32;
  var $i198: i16;
  var $i199: i32;
  var $i200: i32;
  var $i201: i32;
  var $i202: i16;
  var $p205: ref;
  var $p208: ref;
  var $i209: i16;
  var $i210: i32;
  var $i211: i16;
  var $i212: i32;
  var $i213: i32;
  var $i214: i16;
  var $i215: i32;
  var $i216: i32;
  var $i217: i16;
  var $p220: ref;
  var $p223: ref;
  var $i224: i16;
  var $i225: i32;
  var $i226: i16;
  var $i227: i32;
  var $i228: i32;
  var $i229: i32;
  var $i230: i16;
  var $p233: ref;
  var $p236: ref;
  var $i237: i16;
  var $i238: i32;
  var $i239: i16;
  var $i240: i32;
  var $i241: i32;
  var $i242: i16;
  var $i243: i32;
  var $i244: i32;
  var $i245: i16;
  var $p248: ref;
  var $p251: ref;
  var $i252: i16;
  var $i253: i32;
  var $i254: i16;
  var $i255: i32;
  var $i256: i32;
  var $i257: i32;
  var $i258: i16;
  var $p261: ref;
  var $p264: ref;
  var $i265: i16;
  var $i266: i32;
  var $i267: i16;
  var $i268: i32;
  var $i269: i32;
  var $i270: i16;
  var $i271: i32;
  var $i272: i32;
  var $i273: i16;
  var $p276: ref;
  var $p279: ref;
  var $i280: i16;
  var $i281: i32;
  var $i282: i16;
  var $i283: i32;
  var $i284: i32;
  var $i285: i32;
  var $i286: i16;
  var $p289: ref;
  var $p292: ref;
  var $i293: i16;
  var $i294: i32;
  var $i295: i16;
  var $i296: i32;
  var $i297: i32;
  var $i298: i16;
  var $i299: i32;
  var $i300: i32;
  var $i301: i16;
  var $p304: ref;
  var $p307: ref;
  var $i308: i16;
  var $i309: i32;
  var $i310: i16;
  var $i311: i32;
  var $i312: i32;
  var $i313: i32;
  var $i314: i16;
  var $p317: ref;
  var $i318: i8;
  var $i319: i32;
  var $i320: i32;
  var $i321: i8;
  var $i322: i16;
  var $i323: i32;
  var $i324: i32;
  var $i325: i16;
  var $p328: ref;
  var $i329: i16;
  var $i330: i32;
  var $i331: i32;
  var $i332: i16;
  var $p335: ref;
  var $i336: i8;
  var $i337: i32;
  var $i338: i32;
  var $i339: i8;
  var $i340: i16;
  var $i341: i32;
  var $i342: i32;
  var $i343: i16;
  var $p346: ref;
  var $i347: i16;
  var $i348: i32;
  var $i349: i32;
  var $i350: i16;
  var $p353: ref;
  var $i354: i8;
  var $i355: i32;
  var $i356: i32;
  var $i357: i8;
  var $i358: i16;
  var $i359: i32;
  var $i360: i32;
  var $i361: i16;
  var $p364: ref;
  var $i365: i16;
  var $i366: i32;
  var $i367: i32;
  var $i368: i16;
  var $p371: ref;
  var $i372: i8;
  var $i373: i32;
  var $i374: i32;
  var $i375: i8;
  var $i376: i16;
  var $i377: i32;
  var $i378: i32;
  var $i379: i16;
  var $p382: ref;
  var $i383: i16;
  var $i384: i32;
  var $i385: i32;
  var $i386: i16;
  var $p389: ref;
  var $i390: i8;
  var $i391: i32;
  var $i392: i32;
  var $i393: i8;
  var $i394: i16;
  var $i395: i32;
  var $i396: i32;
  var $i397: i16;
  var $p400: ref;
  var $i401: i16;
  var $i402: i32;
  var $i403: i32;
  var $i404: i16;
  var $p407: ref;
  var $i408: i8;
  var $i409: i32;
  var $i410: i32;
  var $i411: i8;
  var $i412: i16;
  var $i413: i32;
  var $i414: i32;
  var $i415: i16;
  var $p418: ref;
  var $i419: i16;
  var $i420: i32;
  var $i421: i32;
  var $i422: i16;
  var $p425: ref;
  var vslice_dummy_var_40: i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $p4 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p7, $p0);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p8, rtl8180_eeprom_register_read);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p9, rtl8180_eeprom_register_write);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 256)), $mul.ref(68, 1));
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $i13 := rtl818x_ioread32($p0, $p12);
    call {:si_unique_call 371} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 64);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p17, 6);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} rtl818x_iowrite8($p0, $p20, $sub.i8(0, 128));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} vslice_dummy_var_40 := rtl818x_ioread8($p0, $p23);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} __const_udelay(42950);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} eeprom_93cx6_read($p1, 6, $p2);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.13, $p2);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 255);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $M.13 := $store.i16($M.13, $p2, $i28);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.13, $p2);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i16.i8($i29);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(2177, 1));
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, $i30);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} eeprom_93cx6_read($p1, 23, $p2);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.13, $p2);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i34 := $ashr.i32($i33, 8);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(2170, 1));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i35);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(2171, 1));
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} eeprom_93cx6_multiread($p1, 7, $p38, 3);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 2);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := 16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i42);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} eeprom_93cx6_read($p1, $i45, $p3);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.14, $p3);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 255);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i16($i48);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p52, $i49);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.14, $p3);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i55 := $ashr.i32($i54, 8);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i16($i55);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(1, 64)), $mul.ref(6, 1));
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p59, $i56);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i318 := $trunc.i32.i8($i42);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i319 := $zext.i8.i32($i318);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i320 := $add.i32(1, $i319);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i321 := $trunc.i32.i8($i320);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} eeprom_93cx6_read($p1, $i321, $p3);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i322 := $load.i16($M.14, $p3);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i323 := $zext.i16.i32($i322);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i324 := $and.i32($i323, 255);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i325 := $trunc.i32.i16($i324);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(2, 64)), $mul.ref(6, 1));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p328, $i325);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i329 := $load.i16($M.14, $p3);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i330 := $zext.i16.i32($i329);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i331 := $ashr.i32($i330, 8);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i332 := $trunc.i32.i16($i331);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(3, 64)), $mul.ref(6, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p335, $i332);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i336 := $trunc.i32.i8($i42);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i337 := $zext.i8.i32($i336);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i338 := $add.i32(2, $i337);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i339 := $trunc.i32.i8($i338);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} eeprom_93cx6_read($p1, $i339, $p3);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i340 := $load.i16($M.14, $p3);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i341 := $zext.i16.i32($i340);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i342 := $and.i32($i341, 255);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i343 := $trunc.i32.i16($i342);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(4, 64)), $mul.ref(6, 1));
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p346, $i343);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i347 := $load.i16($M.14, $p3);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i348 := $zext.i16.i32($i347);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i349 := $ashr.i32($i348, 8);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i350 := $trunc.i32.i16($i349);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(5, 64)), $mul.ref(6, 1));
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p353, $i350);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i354 := $trunc.i32.i8($i42);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i355 := $zext.i8.i32($i354);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i356 := $add.i32(3, $i355);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i357 := $trunc.i32.i8($i356);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} eeprom_93cx6_read($p1, $i357, $p3);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i358 := $load.i16($M.14, $p3);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i359 := $zext.i16.i32($i358);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i360 := $and.i32($i359, 255);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i361 := $trunc.i32.i16($i360);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(6, 64)), $mul.ref(6, 1));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p364, $i361);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i365 := $load.i16($M.14, $p3);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i366 := $zext.i16.i32($i365);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i367 := $ashr.i32($i366, 8);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i368 := $trunc.i32.i16($i367);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(7, 64)), $mul.ref(6, 1));
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p371, $i368);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i372 := $trunc.i32.i8($i42);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i373 := $zext.i8.i32($i372);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i374 := $add.i32(4, $i373);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i375 := $trunc.i32.i8($i374);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} eeprom_93cx6_read($p1, $i375, $p3);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i376 := $load.i16($M.14, $p3);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i377 := $zext.i16.i32($i376);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i378 := $and.i32($i377, 255);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i379 := $trunc.i32.i16($i378);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(8, 64)), $mul.ref(6, 1));
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p382, $i379);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i383 := $load.i16($M.14, $p3);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i384 := $zext.i16.i32($i383);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i385 := $ashr.i32($i384, 8);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i386 := $trunc.i32.i16($i385);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(9, 64)), $mul.ref(6, 1));
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p389, $i386);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i390 := $trunc.i32.i8($i42);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i391 := $zext.i8.i32($i390);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i392 := $add.i32(5, $i391);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i393 := $trunc.i32.i8($i392);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} eeprom_93cx6_read($p1, $i393, $p3);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i394 := $load.i16($M.14, $p3);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i395 := $zext.i16.i32($i394);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i396 := $and.i32($i395, 255);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i397 := $trunc.i32.i16($i396);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(10, 64)), $mul.ref(6, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p400, $i397);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i401 := $load.i16($M.14, $p3);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i402 := $zext.i16.i32($i401);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i403 := $ashr.i32($i402, 8);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i404 := $trunc.i32.i16($i403);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(11, 64)), $mul.ref(6, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p407, $i404);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i408 := $trunc.i32.i8($i42);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i409 := $zext.i8.i32($i408);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i410 := $add.i32(6, $i409);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i411 := $trunc.i32.i8($i410);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} eeprom_93cx6_read($p1, $i411, $p3);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i412 := $load.i16($M.14, $p3);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i413 := $zext.i16.i32($i412);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i414 := $and.i32($i413, 255);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i415 := $trunc.i32.i16($i414);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(12, 64)), $mul.ref(6, 1));
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p418, $i415);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i419 := $load.i16($M.14, $p3);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i420 := $zext.i16.i32($i419);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i421 := $ashr.i32($i420, 8);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i422 := $trunc.i32.i16($i421);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(13, 64)), $mul.ref(6, 1));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p425, $i422);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 0);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 2);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.0, $p147);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p148, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} rtl818x_iowrite8($p0, $p149, 0);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i100 == 1;
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} eeprom_93cx6_read($p1, 63, $p2);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i101 := $load.i16($M.13, $p2);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i102 := $zext.i16.i32($i101);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i102, 256);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 0);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i105 := $zext.i1.i32($i104);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i32.i8($i105);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(2183, 1));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p107, $i106);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i108 := $load.i16($M.13, $p2);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i109 := $zext.i16.i32($i108);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i110 := $and.i32($i109, 3072);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 1024);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i112 := $zext.i1.i32($i111);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i32.i8($i112);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(2184, 1));
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p114, $i113);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} eeprom_93cx6_read($p1, 124, $p2);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i115 := $load.i16($M.13, $p2);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i16.i8($i115);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i118 := $and.i32($i117, 15);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i32.i8($i118);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(2178, 1));
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p120, $i119);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i121 := $load.i16($M.13, $p2);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i122 := $zext.i16.i32($i121);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i123 := $and.i32($i122, 240);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i124 := $ashr.i32($i123, 4);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i32.i8($i124);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(2179, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p126, $i125);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i127 := $load.i16($M.13, $p2);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i128 := $zext.i16.i32($i127);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i129 := $and.i32($i128, 4096);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 0);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i131 := $zext.i1.i32($i130);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i132 := $trunc.i32.i8($i131);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(2180, 1));
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p133, $i132);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i134 := $load.i16($M.13, $p2);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i135 := $zext.i16.i32($i134);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i136 := $and.i32($i135, 3840);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i137 := $ashr.i32($i136, 8);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i138 := $trunc.i32.i8($i137);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(2181, 1));
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p139, $i138);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i140 := $load.i16($M.13, $p2);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i141 := $zext.i16.i32($i140);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i142 := $and.i32($i141, 8192);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i143 := $ne.i32($i142, 0);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i144 := $zext.i1.i32($i143);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i32.i8($i144);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(2182, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p146, $i145);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i93 == 1;
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p5);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} eeprom_93cx6_multiread($p1, 13, $p94, 2);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.16, $p5);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(2164, 1));
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, $i95);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(2168, 1));
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} eeprom_93cx6_read($p1, 25, $p97);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb11:
    assume $i62 == 1;
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} eeprom_93cx6_read($p1, 32, $p4);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.0, $p65);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i67 := $sext.i16.i32($i66);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i68 := $load.i16($M.15, $p4);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i69 := $zext.i16.i32($i68);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i70 := $shl.i32($i69, 8);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i16($i70);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i72 := $sext.i16.i32($i71);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i73 := $or.i32($i67, $i72);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i16($i73);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p77, $i74);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(1, 64)), $mul.ref(6, 1));
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i81 := $load.i16($M.0, $p80);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i82 := $sext.i16.i32($i81);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i83 := $load.i16($M.15, $p4);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i84 := $sext.i16.i32($i83);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i85 := $and.i32($i84, $sub.i32(0, 256));
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i86 := $or.i32($i82, $i85);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i16($i86);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(1, 64)), $mul.ref(6, 1));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p90, $i87);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} eeprom_93cx6_read($p1, 33, $p4);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(2, 64)), $mul.ref(6, 1));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i153 := $load.i16($M.0, $p152);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i154 := $sext.i16.i32($i153);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i155 := $load.i16($M.15, $p4);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i156 := $zext.i16.i32($i155);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i157 := $shl.i32($i156, 8);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i158 := $trunc.i32.i16($i157);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i159 := $sext.i16.i32($i158);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i160 := $or.i32($i154, $i159);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i161 := $trunc.i32.i16($i160);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(2, 64)), $mul.ref(6, 1));
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p164, $i161);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(3, 64)), $mul.ref(6, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i168 := $load.i16($M.0, $p167);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i169 := $sext.i16.i32($i168);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i170 := $load.i16($M.15, $p4);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i171 := $sext.i16.i32($i170);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i172 := $and.i32($i171, $sub.i32(0, 256));
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i173 := $or.i32($i169, $i172);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i174 := $trunc.i32.i16($i173);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(3, 64)), $mul.ref(6, 1));
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p177, $i174);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} eeprom_93cx6_read($p1, 34, $p4);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(4, 64)), $mul.ref(6, 1));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i181 := $load.i16($M.0, $p180);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i182 := $sext.i16.i32($i181);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i183 := $load.i16($M.15, $p4);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i184 := $zext.i16.i32($i183);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i185 := $shl.i32($i184, 8);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i186 := $trunc.i32.i16($i185);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i187 := $sext.i16.i32($i186);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i188 := $or.i32($i182, $i187);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i189 := $trunc.i32.i16($i188);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(4, 64)), $mul.ref(6, 1));
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p192, $i189);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(5, 64)), $mul.ref(6, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i196 := $load.i16($M.0, $p195);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i197 := $sext.i16.i32($i196);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i198 := $load.i16($M.15, $p4);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i199 := $sext.i16.i32($i198);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i200 := $and.i32($i199, $sub.i32(0, 256));
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i201 := $or.i32($i197, $i200);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i202 := $trunc.i32.i16($i201);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(5, 64)), $mul.ref(6, 1));
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p205, $i202);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} eeprom_93cx6_read($p1, 35, $p4);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(6, 64)), $mul.ref(6, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i209 := $load.i16($M.0, $p208);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i210 := $sext.i16.i32($i209);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i211 := $load.i16($M.15, $p4);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i212 := $zext.i16.i32($i211);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i213 := $shl.i32($i212, 8);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i214 := $trunc.i32.i16($i213);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i215 := $sext.i16.i32($i214);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i216 := $or.i32($i210, $i215);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i217 := $trunc.i32.i16($i216);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(6, 64)), $mul.ref(6, 1));
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p220, $i217);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(7, 64)), $mul.ref(6, 1));
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i224 := $load.i16($M.0, $p223);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i225 := $sext.i16.i32($i224);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i226 := $load.i16($M.15, $p4);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i227 := $sext.i16.i32($i226);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i228 := $and.i32($i227, $sub.i32(0, 256));
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i229 := $or.i32($i225, $i228);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i230 := $trunc.i32.i16($i229);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(7, 64)), $mul.ref(6, 1));
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p233, $i230);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} eeprom_93cx6_read($p1, 36, $p4);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(8, 64)), $mul.ref(6, 1));
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i237 := $load.i16($M.0, $p236);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i238 := $sext.i16.i32($i237);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i239 := $load.i16($M.15, $p4);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i240 := $zext.i16.i32($i239);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i241 := $shl.i32($i240, 8);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i242 := $trunc.i32.i16($i241);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i243 := $sext.i16.i32($i242);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i244 := $or.i32($i238, $i243);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i245 := $trunc.i32.i16($i244);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(8, 64)), $mul.ref(6, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p248, $i245);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(9, 64)), $mul.ref(6, 1));
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i252 := $load.i16($M.0, $p251);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i253 := $sext.i16.i32($i252);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i254 := $load.i16($M.15, $p4);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i255 := $sext.i16.i32($i254);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i256 := $and.i32($i255, $sub.i32(0, 256));
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i257 := $or.i32($i253, $i256);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i258 := $trunc.i32.i16($i257);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(9, 64)), $mul.ref(6, 1));
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p261, $i258);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} eeprom_93cx6_read($p1, 37, $p4);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(10, 64)), $mul.ref(6, 1));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i265 := $load.i16($M.0, $p264);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i266 := $sext.i16.i32($i265);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i267 := $load.i16($M.15, $p4);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i268 := $zext.i16.i32($i267);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i269 := $shl.i32($i268, 8);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i270 := $trunc.i32.i16($i269);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i271 := $sext.i16.i32($i270);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i272 := $or.i32($i266, $i271);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i273 := $trunc.i32.i16($i272);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(10, 64)), $mul.ref(6, 1));
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p276, $i273);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(11, 64)), $mul.ref(6, 1));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i280 := $load.i16($M.0, $p279);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i281 := $sext.i16.i32($i280);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i282 := $load.i16($M.15, $p4);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i283 := $sext.i16.i32($i282);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i284 := $and.i32($i283, $sub.i32(0, 256));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i285 := $or.i32($i281, $i284);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i286 := $trunc.i32.i16($i285);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(11, 64)), $mul.ref(6, 1));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p289, $i286);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} eeprom_93cx6_read($p1, 38, $p4);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(12, 64)), $mul.ref(6, 1));
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i293 := $load.i16($M.0, $p292);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i294 := $sext.i16.i32($i293);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i295 := $load.i16($M.15, $p4);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i296 := $zext.i16.i32($i295);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i297 := $shl.i32($i296, 8);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i298 := $trunc.i32.i16($i297);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i299 := $sext.i16.i32($i298);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i300 := $or.i32($i294, $i299);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i301 := $trunc.i32.i16($i300);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(12, 64)), $mul.ref(6, 1));
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p304, $i301);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(13, 64)), $mul.ref(6, 1));
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i308 := $load.i16($M.0, $p307);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i309 := $sext.i16.i32($i308);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i310 := $load.i16($M.15, $p4);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i311 := $sext.i16.i32($i310);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i312 := $and.i32($i311, $sub.i32(0, 256));
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i313 := $or.i32($i309, $i312);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i314 := $trunc.i32.i16($i313);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref(13, 64)), $mul.ref(6, 1));
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p317, $i314);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i41 == 1;
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i42 := 48;
    goto $bb6;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p16, 8);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rtl8187se_detect_rf: ref;

axiom rtl8187se_detect_rf == $sub.ref(0, 227690);

procedure rtl8187se_detect_rf($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation rtl8187se_detect_rf($p0: ref) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $r := rtl8225se_ops;
    return;
}



const rtl8180_detect_rf: ref;

axiom rtl8180_detect_rf == $sub.ref(0, 228722);

procedure rtl8180_detect_rf($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation rtl8180_detect_rf($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i17: i16;
  var $i18: i16;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var vslice_dummy_var_41: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} rtl818x_iowrite16($p3, $p6, 1152);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 256)), $mul.ref(132, 1));
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} rtl818x_iowrite16($p3, $p9, 1160);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 256)), $mul.ref(130, 1));
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} rtl818x_iowrite16($p3, $p12, 8191);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} vslice_dummy_var_41 := rtl818x_ioread8($p3, $p15);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} msleep(100);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} rtl8225_write($p0, 0, 439);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i17 := rtl8225_read($p0, 8);
    call {:si_unique_call 404} {:cexpr "reg8"} boogie_si_record_i16($i17);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} $i18 := rtl8225_read($p0, 9);
    call {:si_unique_call 406} {:cexpr "reg9"} boogie_si_record_i16($i18);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} rtl8225_write($p0, 0, 183);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i17);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 1416);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i20 == 1);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i18);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 1792);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p23 := rtl8225z2_ops;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $r := $p23;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p23 := rtl8225_ops;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb2;
}



const is_valid_ether_addr: ref;

axiom is_valid_ether_addr == $sub.ref(0, 229754);

procedure is_valid_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_valid_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $i1 := is_multicast_ether_addr($p0);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 409} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $i6 := is_zero_ether_addr($p0);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 411} {:cexpr "tmp___1"} boogie_si_record_i8($i7);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb12;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb11;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const eth_random_addr: ref;

axiom eth_random_addr == $sub.ref(0, 230786);

procedure eth_random_addr($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation eth_random_addr($p0: ref)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i8;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} get_random_bytes($p0, 6);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 254);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p0, $i4);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p0);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 2);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p0, $i8);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    return;
}



const SET_IEEE80211_PERM_ADDR: ref;

axiom SET_IEEE80211_PERM_ADDR == $sub.ref(0, 231818);

procedure SET_IEEE80211_PERM_ADDR($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation SET_IEEE80211_PERM_ADDR($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1776)), $mul.ref(0, 1));
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 413} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p5, $p1, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 232850);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 233882);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    return;
}



const ieee80211_register_hw: ref;

axiom ieee80211_register_hw == $sub.ref(0, 234914);

procedure ieee80211_register_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_register_hw($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 1} true;
    call {:si_unique_call 414} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 415} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 235946);

procedure _dev_info.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    return;
}



const ldv_ieee80211_free_hw_47: ref;

axiom ldv_ieee80211_free_hw_47 == $sub.ref(0, 236978);

procedure ldv_ieee80211_free_hw_47($p0: ref);
  free requires assertsPassed;
  modifies $M.8;



implementation ldv_ieee80211_free_hw_47($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} ieee80211_free_hw($p0);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p1 := $M.7;
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, $i3);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $M.8 := 0;
    call {:si_unique_call 417} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_random_bytes: ref;

axiom get_random_bytes == $sub.ref(0, 238010);

procedure get_random_bytes($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation get_random_bytes($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} {:cexpr "get_random_bytes:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    return;
}



const is_multicast_ether_addr: ref;

axiom is_multicast_ether_addr == $sub.ref(0, 239042);

procedure is_multicast_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_multicast_ether_addr($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 419} {:cexpr "a"} boogie_si_record_i32($i2);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const is_zero_ether_addr: ref;

axiom is_zero_ether_addr == $sub.ref(0, 240074);

procedure is_zero_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_zero_ether_addr($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(4, 2));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i2, $i6);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const rtl818x_iowrite16: ref;

axiom rtl818x_iowrite16 == $sub.ref(0, 241106);

procedure rtl818x_iowrite16($p0: ref, $p1: ref, $i2: i16);
  free requires assertsPassed;



implementation rtl818x_iowrite16($p0: ref, $p1: ref, $i2: i16)
{
  var $i3: i32;
  var $i4: i16;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} {:cexpr "rtl818x_iowrite16:arg:val"} boogie_si_record_i16($i2);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i16($i3);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} iowrite16($i4, $p5);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    return;
}



const rtl8225_write: ref;

axiom rtl8225_write == $sub.ref(0, 242138);

procedure rtl8225_write($p0: ref, $i1: i8, $i2: i16);
  free requires assertsPassed;



implementation rtl8225_write($p0: ref, $i1: i8, $i2: i16)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $i17: i16;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i16;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i16;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i16;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i16;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i16;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i32;
  var $i65: i16;
  var $i66: i16;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i16;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i77: i16;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $i83: i16;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i16;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i16;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $i103: i32;
  var $i104: i16;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $i109: i32;
  var $i110: i16;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $i117: i32;
  var $i118: i32;
  var $i119: i16;
  var $i116: i16;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i32;
  var $i124: i16;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i32;
  var $i129: i32;
  var $i130: i16;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i32;
  var $i135: i32;
  var $i136: i16;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i32;
  var $i141: i16;
  var $i142: i32;
  var $i143: i1;
  var $i145: i32;
  var $i146: i32;
  var $i147: i16;
  var $i144: i16;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i32;
  var $i152: i16;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i32;
  var $i157: i32;
  var $i158: i16;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i32;
  var $i163: i32;
  var $i164: i16;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $i168: i32;
  var $i169: i16;
  var $i170: i32;
  var $i171: i1;
  var $i173: i32;
  var $i174: i32;
  var $i175: i16;
  var $i172: i16;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $i179: i32;
  var $i180: i16;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $i184: i32;
  var $i185: i32;
  var $i186: i16;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $i190: i32;
  var $i191: i32;
  var $i192: i16;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $i196: i32;
  var $i197: i16;
  var $i198: i32;
  var $i199: i1;
  var $i201: i32;
  var $i202: i32;
  var $i203: i16;
  var $i200: i16;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $i207: i32;
  var $i208: i16;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $i212: i32;
  var $i213: i32;
  var $i214: i16;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $i218: i32;
  var $i219: i32;
  var $i220: i16;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $i224: i32;
  var $i225: i16;
  var $i226: i32;
  var $i227: i1;
  var $i229: i32;
  var $i230: i32;
  var $i231: i16;
  var $i228: i16;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $i235: i32;
  var $i236: i16;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $i240: i32;
  var $i241: i32;
  var $i242: i16;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $i246: i32;
  var $i247: i32;
  var $i248: i16;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $i252: i32;
  var $i253: i16;
  var $i254: i32;
  var $i255: i1;
  var $i257: i32;
  var $i258: i32;
  var $i259: i16;
  var $i256: i16;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $i263: i32;
  var $i264: i16;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $i268: i32;
  var $i269: i32;
  var $i270: i16;
  var $p271: ref;
  var $p272: ref;
  var $p273: ref;
  var $i274: i32;
  var $i275: i32;
  var $i276: i16;
  var $p277: ref;
  var $p278: ref;
  var $p279: ref;
  var $i280: i32;
  var $i281: i16;
  var $i282: i32;
  var $i283: i1;
  var $i285: i32;
  var $i286: i32;
  var $i287: i16;
  var $i284: i16;
  var $p288: ref;
  var $p289: ref;
  var $p290: ref;
  var $i291: i32;
  var $i292: i16;
  var $p293: ref;
  var $p294: ref;
  var $p295: ref;
  var $i296: i32;
  var $i297: i32;
  var $i298: i16;
  var $p299: ref;
  var $p300: ref;
  var $p301: ref;
  var $i302: i32;
  var $i303: i32;
  var $i304: i16;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $i308: i32;
  var $i309: i16;
  var $i310: i32;
  var $i311: i1;
  var $i313: i32;
  var $i314: i32;
  var $i315: i16;
  var $i312: i16;
  var $p316: ref;
  var $p317: ref;
  var $p318: ref;
  var $i319: i32;
  var $i320: i16;
  var $p321: ref;
  var $p322: ref;
  var $p323: ref;
  var $i324: i32;
  var $i325: i32;
  var $i326: i16;
  var $p327: ref;
  var $p328: ref;
  var $p329: ref;
  var $i330: i32;
  var $i331: i32;
  var $i332: i16;
  var $p333: ref;
  var $p334: ref;
  var $p335: ref;
  var $i336: i32;
  var $i337: i16;
  var $i338: i32;
  var $i339: i1;
  var $i341: i32;
  var $i342: i32;
  var $i343: i16;
  var $i340: i16;
  var $p344: ref;
  var $p345: ref;
  var $p346: ref;
  var $i347: i32;
  var $i348: i16;
  var $p349: ref;
  var $p350: ref;
  var $p351: ref;
  var $i352: i32;
  var $i353: i32;
  var $i354: i16;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $i358: i32;
  var $i359: i32;
  var $i360: i16;
  var $p361: ref;
  var $p362: ref;
  var $p363: ref;
  var $i364: i32;
  var $i365: i16;
  var $i366: i32;
  var $i367: i1;
  var $i369: i32;
  var $i370: i32;
  var $i371: i16;
  var $i368: i16;
  var $p372: ref;
  var $p373: ref;
  var $p374: ref;
  var $i375: i32;
  var $i376: i16;
  var $p377: ref;
  var $p378: ref;
  var $p379: ref;
  var $i380: i32;
  var $i381: i32;
  var $i382: i16;
  var $p383: ref;
  var $p384: ref;
  var $p385: ref;
  var $i386: i32;
  var $i387: i32;
  var $i388: i16;
  var $p389: ref;
  var $p390: ref;
  var $p391: ref;
  var $i392: i32;
  var $i393: i16;
  var $i394: i32;
  var $i395: i1;
  var $i397: i32;
  var $i398: i32;
  var $i399: i16;
  var $i396: i16;
  var $p400: ref;
  var $p401: ref;
  var $p402: ref;
  var $i403: i32;
  var $i404: i16;
  var $p405: ref;
  var $p406: ref;
  var $p407: ref;
  var $i408: i32;
  var $i409: i32;
  var $i410: i16;
  var $p411: ref;
  var $p412: ref;
  var $p413: ref;
  var $i414: i32;
  var $i415: i32;
  var $i416: i16;
  var $p417: ref;
  var $p418: ref;
  var $p419: ref;
  var $i420: i32;
  var $i421: i16;
  var $i422: i32;
  var $i423: i1;
  var $i425: i32;
  var $i426: i32;
  var $i427: i16;
  var $i424: i16;
  var $p428: ref;
  var $p429: ref;
  var $p430: ref;
  var $i431: i32;
  var $i432: i16;
  var $p433: ref;
  var $p434: ref;
  var $p435: ref;
  var $i436: i32;
  var $i437: i32;
  var $i438: i16;
  var $p439: ref;
  var $p440: ref;
  var $p441: ref;
  var $i442: i32;
  var $i443: i32;
  var $i444: i16;
  var $p445: ref;
  var $p446: ref;
  var $p447: ref;
  var $i448: i32;
  var $i449: i16;
  var $i450: i32;
  var $i451: i1;
  var $i453: i32;
  var $i454: i32;
  var $i455: i16;
  var $i452: i16;
  var $p456: ref;
  var $p457: ref;
  var $p458: ref;
  var $i459: i32;
  var $i460: i16;
  var $p461: ref;
  var $p462: ref;
  var $p463: ref;
  var $i464: i32;
  var $i465: i32;
  var $i466: i16;
  var $p467: ref;
  var $p468: ref;
  var $p469: ref;
  var $i470: i32;
  var $i471: i32;
  var $i472: i16;
  var $p473: ref;
  var $p474: ref;
  var $p475: ref;
  var $i476: i32;
  var $i477: i16;
  var $i478: i32;
  var $i479: i1;
  var $i481: i32;
  var $i482: i32;
  var $i483: i16;
  var $i480: i16;
  var $p484: ref;
  var $p485: ref;
  var $p486: ref;
  var $i487: i32;
  var $i488: i16;
  var $p489: ref;
  var $p490: ref;
  var $p491: ref;
  var $i492: i32;
  var $i493: i32;
  var $i494: i16;
  var $p495: ref;
  var $p496: ref;
  var $p497: ref;
  var $i498: i32;
  var $i499: i32;
  var $i500: i16;
  var $p501: ref;
  var $p502: ref;
  var $p503: ref;
  var $i504: i32;
  var $i505: i16;
  var $i506: i32;
  var $i507: i1;
  var $i509: i32;
  var $i510: i32;
  var $i511: i16;
  var $i508: i16;
  var $p512: ref;
  var $p513: ref;
  var $p514: ref;
  var $i515: i32;
  var $i516: i16;
  var $p517: ref;
  var $p518: ref;
  var $p519: ref;
  var $i520: i32;
  var $i521: i32;
  var $i522: i16;
  var $p523: ref;
  var $p524: ref;
  var $p525: ref;
  var $i526: i32;
  var $i527: i32;
  var $i528: i16;
  var $p529: ref;
  var $p530: ref;
  var $p531: ref;
  var $i532: i32;
  var $i533: i16;
  var vslice_dummy_var_42: i8;
  var vslice_dummy_var_43: i8;
  var vslice_dummy_var_44: i8;
  var vslice_dummy_var_45: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} {:cexpr "rtl8225_write:arg:addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 423} {:cexpr "rtl8225_write:arg:data"} boogie_si_record_i16($i2);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i2);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i7 := $shl.i32($i6, 4);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 15);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i7, $i9);
    call {:si_unique_call 424} {:cexpr "bangdata"} boogie_si_record_i32($i10);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $i14 := rtl818x_ioread16($p5, $p13);
    call {:si_unique_call 426} {:cexpr "tmp"} boogie_si_record_i16($i14);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 65523);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    call {:si_unique_call 427} {:cexpr "reg80"} boogie_si_record_i16($i17);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 256)), $mul.ref(130, 1));
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $i21 := rtl818x_ioread16($p5, $p20);
    call {:si_unique_call 429} {:cexpr "reg82"} boogie_si_record_i16($i21);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 256)), $mul.ref(130, 1));
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i21);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i25, 7);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i26);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} rtl818x_iowrite16($p5, $p24, $i27);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 256)), $mul.ref(132, 1));
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $i31 := rtl818x_ioread16($p5, $p30);
    call {:si_unique_call 432} {:cexpr "reg84"} boogie_si_record_i16($i31);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 256)), $mul.ref(132, 1));
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i31);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, 1031);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} rtl818x_iowrite16($p5, $p34, $i37);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} vslice_dummy_var_42 := rtl818x_ioread8($p5, $p40);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} __const_udelay(42950);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i17);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i45, 4);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i16($i46);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} rtl818x_iowrite16($p5, $p44, $i47);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} vslice_dummy_var_43 := rtl818x_ioread8($p5, $p50);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} __const_udelay(8590);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i17);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i16($i55);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} rtl818x_iowrite16($p5, $p54, $i56);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} vslice_dummy_var_44 := rtl818x_ioread8($p5, $p59);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} __const_udelay(42950);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i61 := $and.i32(32768, $i10);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i66 := $i17;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb6, $bb7;

  $bb7:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i66);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i76 := $or.i32($i75, 2);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i16($i76);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} rtl818x_iowrite16($p5, $p74, $i77);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i66);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i82 := $or.i32($i81, 2);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i16($i82);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} rtl818x_iowrite16($p5, $p80, $i83);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb9, $bb10;

  $bb10:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i114 := $and.i32(16384, $i10);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    $i116 := $i17;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb17, $bb18;

  $bb18:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p126, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i128 := $zext.i16.i32($i116);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i129 := $or.i32($i128, 2);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i130 := $trunc.i32.i16($i129);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} rtl818x_iowrite16($p5, $p127, $i130);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p132, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i134 := $zext.i16.i32($i116);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i135 := $or.i32($i134, 2);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i136 := $trunc.i32.i16($i135);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} rtl818x_iowrite16($p5, $p133, $i136);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb20, $bb21;

  $bb21:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i142 := $and.i32(8192, $i10);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i143 := $ne.i32($i142, 0);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    $i144 := $i17;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb27, $bb28;

  $bb28:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.0, $p153);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p154, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i156 := $zext.i16.i32($i144);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i157 := $or.i32($i156, 2);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i158 := $trunc.i32.i16($i157);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} rtl818x_iowrite16($p5, $p155, $i158);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.0, $p159);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p160, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i162 := $zext.i16.i32($i144);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i163 := $or.i32($i162, 2);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i164 := $trunc.i32.i16($i163);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} rtl818x_iowrite16($p5, $p161, $i164);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb30, $bb31;

  $bb31:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i170 := $and.i32(4096, $i10);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i171 := $ne.i32($i170, 0);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    $i172 := $i17;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb37, $bb38;

  $bb38:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p182 := $load.ref($M.0, $p181);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p182, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i184 := $zext.i16.i32($i172);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i185 := $or.i32($i184, 2);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i186 := $trunc.i32.i16($i185);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} rtl818x_iowrite16($p5, $p183, $i186);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.0, $p187);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p188, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i190 := $zext.i16.i32($i172);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i191 := $or.i32($i190, 2);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i192 := $trunc.i32.i16($i191);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} rtl818x_iowrite16($p5, $p189, $i192);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb40, $bb41;

  $bb41:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i198 := $and.i32(2048, $i10);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i199 := $ne.i32($i198, 0);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    $i200 := $i17;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb47, $bb48;

  $bb48:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p210 := $load.ref($M.0, $p209);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p210, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i212 := $zext.i16.i32($i200);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i213 := $or.i32($i212, 2);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i214 := $trunc.i32.i16($i213);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} rtl818x_iowrite16($p5, $p211, $i214);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p216 := $load.ref($M.0, $p215);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p216, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i218 := $zext.i16.i32($i200);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i219 := $or.i32($i218, 2);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i220 := $trunc.i32.i16($i219);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} rtl818x_iowrite16($p5, $p217, $i220);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb50, $bb51;

  $bb51:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i226 := $and.i32(1024, $i10);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i227 := $ne.i32($i226, 0);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i227} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    $i228 := $i17;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb57, $bb58;

  $bb58:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p238 := $load.ref($M.0, $p237);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p238, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i240 := $zext.i16.i32($i228);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i241 := $or.i32($i240, 2);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i242 := $trunc.i32.i16($i241);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} rtl818x_iowrite16($p5, $p239, $i242);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p244 := $load.ref($M.0, $p243);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p244, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i246 := $zext.i16.i32($i228);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i247 := $or.i32($i246, 2);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i248 := $trunc.i32.i16($i247);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} rtl818x_iowrite16($p5, $p245, $i248);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb60, $bb61;

  $bb61:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i254 := $and.i32(512, $i10);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i255 := $ne.i32($i254, 0);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    $i256 := $i17;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb67, $bb68;

  $bb68:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $p266 := $load.ref($M.0, $p265);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p266, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i268 := $zext.i16.i32($i256);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i269 := $or.i32($i268, 2);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i270 := $trunc.i32.i16($i269);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} rtl818x_iowrite16($p5, $p267, $i270);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p272 := $load.ref($M.0, $p271);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p272, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i274 := $zext.i16.i32($i256);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i275 := $or.i32($i274, 2);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i276 := $trunc.i32.i16($i275);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} rtl818x_iowrite16($p5, $p273, $i276);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb70, $bb71;

  $bb71:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i282 := $and.i32(256, $i10);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i283 := $ne.i32($i282, 0);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i283} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i283 == 1);
    assume {:verifier.code 0} true;
    $i284 := $i17;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb77, $bb78;

  $bb78:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p294 := $load.ref($M.0, $p293);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p294, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i296 := $zext.i16.i32($i284);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i297 := $or.i32($i296, 2);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i298 := $trunc.i32.i16($i297);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} rtl818x_iowrite16($p5, $p295, $i298);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p300 := $load.ref($M.0, $p299);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p300, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i302 := $zext.i16.i32($i284);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i303 := $or.i32($i302, 2);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i304 := $trunc.i32.i16($i303);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} rtl818x_iowrite16($p5, $p301, $i304);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb80, $bb81;

  $bb81:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i310 := $and.i32(128, $i10);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i311 := $ne.i32($i310, 0);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    assume {:branchcond $i311} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    $i312 := $i17;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb87, $bb88;

  $bb88:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p322 := $load.ref($M.0, $p321);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($p322, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i324 := $zext.i16.i32($i312);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i325 := $or.i32($i324, 2);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i326 := $trunc.i32.i16($i325);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} rtl818x_iowrite16($p5, $p323, $i326);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p328 := $load.ref($M.0, $p327);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($p328, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i330 := $zext.i16.i32($i312);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i331 := $or.i32($i330, 2);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i332 := $trunc.i32.i16($i331);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} rtl818x_iowrite16($p5, $p329, $i332);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb90, $bb91;

  $bb91:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i338 := $and.i32(64, $i10);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i339 := $ne.i32($i338, 0);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    assume {:branchcond $i339} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i339 == 1);
    assume {:verifier.code 0} true;
    $i340 := $i17;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb97, $bb98;

  $bb98:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p350 := $load.ref($M.0, $p349);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($p350, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i352 := $zext.i16.i32($i340);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i353 := $or.i32($i352, 2);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i354 := $trunc.i32.i16($i353);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} rtl818x_iowrite16($p5, $p351, $i354);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p356 := $load.ref($M.0, $p355);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($p356, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i358 := $zext.i16.i32($i340);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i359 := $or.i32($i358, 2);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i360 := $trunc.i32.i16($i359);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} rtl818x_iowrite16($p5, $p357, $i360);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb100, $bb101;

  $bb101:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i366 := $and.i32(32, $i10);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i367 := $ne.i32($i366, 0);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i367} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i367 == 1);
    assume {:verifier.code 0} true;
    $i368 := $i17;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb107, $bb108;

  $bb108:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p378 := $load.ref($M.0, $p377);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($p378, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i380 := $zext.i16.i32($i368);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i381 := $or.i32($i380, 2);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i382 := $trunc.i32.i16($i381);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} rtl818x_iowrite16($p5, $p379, $i382);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p384 := $load.ref($M.0, $p383);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($p384, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i386 := $zext.i16.i32($i368);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i387 := $or.i32($i386, 2);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i388 := $trunc.i32.i16($i387);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} rtl818x_iowrite16($p5, $p385, $i388);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb110, $bb111;

  $bb111:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $i394 := $and.i32(16, $i10);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i395 := $ne.i32($i394, 0);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i395} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i395 == 1);
    assume {:verifier.code 0} true;
    $i396 := $i17;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb117, $bb118;

  $bb118:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p406 := $load.ref($M.0, $p405);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($p406, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i408 := $zext.i16.i32($i396);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i409 := $or.i32($i408, 2);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i410 := $trunc.i32.i16($i409);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} rtl818x_iowrite16($p5, $p407, $i410);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $p412 := $load.ref($M.0, $p411);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($p412, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i414 := $zext.i16.i32($i396);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i415 := $or.i32($i414, 2);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i416 := $trunc.i32.i16($i415);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} rtl818x_iowrite16($p5, $p413, $i416);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb120, $bb121;

  $bb121:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $i422 := $and.i32(8, $i10);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i423 := $ne.i32($i422, 0);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i423} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i423 == 1);
    assume {:verifier.code 0} true;
    $i424 := $i17;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb127, $bb128;

  $bb128:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p434 := $load.ref($M.0, $p433);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($p434, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i436 := $zext.i16.i32($i424);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i437 := $or.i32($i436, 2);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i438 := $trunc.i32.i16($i437);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} rtl818x_iowrite16($p5, $p435, $i438);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p440 := $load.ref($M.0, $p439);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($p440, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i442 := $zext.i16.i32($i424);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i443 := $or.i32($i442, 2);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i444 := $trunc.i32.i16($i443);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} rtl818x_iowrite16($p5, $p441, $i444);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb130, $bb131;

  $bb131:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $i450 := $and.i32(4, $i10);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i451 := $ne.i32($i450, 0);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i451} true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i451 == 1);
    assume {:verifier.code 0} true;
    $i452 := $i17;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb137, $bb138;

  $bb138:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p462 := $load.ref($M.0, $p461);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($p462, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i464 := $zext.i16.i32($i452);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i465 := $or.i32($i464, 2);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i466 := $trunc.i32.i16($i465);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} rtl818x_iowrite16($p5, $p463, $i466);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p468 := $load.ref($M.0, $p467);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($p468, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i470 := $zext.i16.i32($i452);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i471 := $or.i32($i470, 2);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i472 := $trunc.i32.i16($i471);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} rtl818x_iowrite16($p5, $p469, $i472);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb140, $bb141;

  $bb141:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $i478 := $and.i32(2, $i10);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i479 := $ne.i32($i478, 0);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i479} true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i479 == 1);
    assume {:verifier.code 0} true;
    $i480 := $i17;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb147, $bb148;

  $bb148:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p490 := $load.ref($M.0, $p489);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($p490, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i492 := $zext.i16.i32($i480);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i493 := $or.i32($i492, 2);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i494 := $trunc.i32.i16($i493);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} rtl818x_iowrite16($p5, $p491, $i494);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $p496 := $load.ref($M.0, $p495);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($add.ref($p496, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i498 := $zext.i16.i32($i480);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i499 := $or.i32($i498, 2);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i500 := $trunc.i32.i16($i499);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} rtl818x_iowrite16($p5, $p497, $i500);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb150, $bb151;

  $bb151:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $i506 := $and.i32(1, $i10);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i507 := $ne.i32($i506, 0);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i507} true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i507 == 1);
    assume {:verifier.code 0} true;
    $i508 := $i17;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb157, $bb158;

  $bb158:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p518 := $load.ref($M.0, $p517);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p519 := $add.ref($add.ref($p518, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i520 := $zext.i16.i32($i508);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i521 := $or.i32($i520, 2);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i522 := $trunc.i32.i16($i521);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} rtl818x_iowrite16($p5, $p519, $i522);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p524 := $load.ref($M.0, $p523);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($add.ref($p524, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i526 := $zext.i16.i32($i508);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i527 := $or.i32($i526, 2);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i528 := $trunc.i32.i16($i527);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} rtl818x_iowrite16($p5, $p525, $i528);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb160, $bb161;

  $bb161:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p90, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i92 := $zext.i16.i32($i17);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i93 := $or.i32($i92, 4);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i32.i16($i93);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} rtl818x_iowrite16($p5, $p91, $i94);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p96, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} vslice_dummy_var_45 := rtl818x_ioread8($p5, $p97);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} __const_udelay(42950);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i102 := $zext.i16.i32($i17);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i103 := $or.i32($i102, 4);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i32.i16($i103);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} rtl818x_iowrite16($p5, $p101, $i104);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 256)), $mul.ref(132, 1));
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i108 := $zext.i16.i32($i31);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i109 := $or.i32($i108, 1024);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i32.i16($i109);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} rtl818x_iowrite16($p5, $p107, $i110);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p112, $mul.ref(0, 256)), $mul.ref(130, 1));
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} rtl818x_iowrite16($p5, $p113, 8191);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    return;

  $bb160:
    assume 1 == 1;
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p530 := $load.ref($M.0, $p529);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($p530, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i532 := $zext.i16.i32($i508);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i533 := $trunc.i32.i16($i532);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} rtl818x_iowrite16($p5, $p531, $i533);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb157:
    assume 0 == 1;
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p512 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $p513 := $load.ref($M.0, $p512);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($add.ref($p513, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i515 := $zext.i16.i32($i508);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i516 := $trunc.i32.i16($i515);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} rtl818x_iowrite16($p5, $p514, $i516);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb154:
    assume $i507 == 1;
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i509 := $zext.i16.i32($i17);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i510 := $or.i32($i509, 1);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i511 := $trunc.i32.i16($i510);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i508 := $i511;
    goto $bb156;

  $bb150:
    assume 0 == 1;
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p502 := $load.ref($M.0, $p501);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($p502, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i504 := $zext.i16.i32($i480);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i505 := $trunc.i32.i16($i504);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} rtl818x_iowrite16($p5, $p503, $i505);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb147:
    assume 1 == 1;
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p484 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p485 := $load.ref($M.0, $p484);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p486 := $add.ref($add.ref($p485, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i487 := $zext.i16.i32($i480);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i488 := $trunc.i32.i16($i487);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} rtl818x_iowrite16($p5, $p486, $i488);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb144:
    assume $i479 == 1;
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i481 := $zext.i16.i32($i17);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i482 := $or.i32($i481, 1);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i483 := $trunc.i32.i16($i482);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i480 := $i483;
    goto $bb146;

  $bb140:
    assume 1 == 1;
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p474 := $load.ref($M.0, $p473);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p475 := $add.ref($add.ref($p474, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i476 := $zext.i16.i32($i452);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i477 := $trunc.i32.i16($i476);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} rtl818x_iowrite16($p5, $p475, $i477);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb137:
    assume 0 == 1;
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p456 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p457 := $load.ref($M.0, $p456);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($add.ref($p457, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i459 := $zext.i16.i32($i452);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i460 := $trunc.i32.i16($i459);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} rtl818x_iowrite16($p5, $p458, $i460);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb134:
    assume $i451 == 1;
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i453 := $zext.i16.i32($i17);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i454 := $or.i32($i453, 1);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i455 := $trunc.i32.i16($i454);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i452 := $i455;
    goto $bb136;

  $bb130:
    assume 0 == 1;
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p446 := $load.ref($M.0, $p445);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($p446, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i448 := $zext.i16.i32($i424);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i449 := $trunc.i32.i16($i448);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} rtl818x_iowrite16($p5, $p447, $i449);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb127:
    assume 1 == 1;
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p429 := $load.ref($M.0, $p428);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($p429, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i431 := $zext.i16.i32($i424);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i432 := $trunc.i32.i16($i431);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} rtl818x_iowrite16($p5, $p430, $i432);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb124:
    assume $i423 == 1;
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i425 := $zext.i16.i32($i17);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i426 := $or.i32($i425, 1);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i427 := $trunc.i32.i16($i426);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i424 := $i427;
    goto $bb126;

  $bb120:
    assume 1 == 1;
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $p418 := $load.ref($M.0, $p417);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($p418, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i420 := $zext.i16.i32($i396);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i421 := $trunc.i32.i16($i420);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} rtl818x_iowrite16($p5, $p419, $i421);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb117:
    assume 0 == 1;
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p401 := $load.ref($M.0, $p400);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($p401, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i403 := $zext.i16.i32($i396);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i404 := $trunc.i32.i16($i403);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} rtl818x_iowrite16($p5, $p402, $i404);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb114:
    assume $i395 == 1;
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i397 := $zext.i16.i32($i17);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i398 := $or.i32($i397, 1);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i399 := $trunc.i32.i16($i398);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i396 := $i399;
    goto $bb116;

  $bb110:
    assume 0 == 1;
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p390 := $load.ref($M.0, $p389);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($p390, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i392 := $zext.i16.i32($i368);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i393 := $trunc.i32.i16($i392);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} rtl818x_iowrite16($p5, $p391, $i393);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb107:
    assume 1 == 1;
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p373 := $load.ref($M.0, $p372);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p373, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i375 := $zext.i16.i32($i368);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i376 := $trunc.i32.i16($i375);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} rtl818x_iowrite16($p5, $p374, $i376);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb104:
    assume $i367 == 1;
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i369 := $zext.i16.i32($i17);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i370 := $or.i32($i369, 1);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i371 := $trunc.i32.i16($i370);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i368 := $i371;
    goto $bb106;

  $bb100:
    assume 1 == 1;
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $p362 := $load.ref($M.0, $p361);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($p362, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i364 := $zext.i16.i32($i340);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i365 := $trunc.i32.i16($i364);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} rtl818x_iowrite16($p5, $p363, $i365);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb97:
    assume 0 == 1;
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p345 := $load.ref($M.0, $p344);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p345, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i347 := $zext.i16.i32($i340);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i348 := $trunc.i32.i16($i347);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} rtl818x_iowrite16($p5, $p346, $i348);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb94:
    assume $i339 == 1;
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i341 := $zext.i16.i32($i17);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i342 := $or.i32($i341, 1);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i343 := $trunc.i32.i16($i342);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i340 := $i343;
    goto $bb96;

  $bb90:
    assume 0 == 1;
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p334 := $load.ref($M.0, $p333);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($p334, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i336 := $zext.i16.i32($i312);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i337 := $trunc.i32.i16($i336);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} rtl818x_iowrite16($p5, $p335, $i337);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb87:
    assume 1 == 1;
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p317 := $load.ref($M.0, $p316);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p317, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i319 := $zext.i16.i32($i312);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i320 := $trunc.i32.i16($i319);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} rtl818x_iowrite16($p5, $p318, $i320);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb84:
    assume $i311 == 1;
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i313 := $zext.i16.i32($i17);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i314 := $or.i32($i313, 1);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i315 := $trunc.i32.i16($i314);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i312 := $i315;
    goto $bb86;

  $bb80:
    assume 1 == 1;
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p306 := $load.ref($M.0, $p305);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p306, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i308 := $zext.i16.i32($i284);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i309 := $trunc.i32.i16($i308);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} rtl818x_iowrite16($p5, $p307, $i309);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb77:
    assume 0 == 1;
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p289 := $load.ref($M.0, $p288);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p289, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i291 := $zext.i16.i32($i284);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i292 := $trunc.i32.i16($i291);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} rtl818x_iowrite16($p5, $p290, $i292);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb74:
    assume $i283 == 1;
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i285 := $zext.i16.i32($i17);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i286 := $or.i32($i285, 1);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i287 := $trunc.i32.i16($i286);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i284 := $i287;
    goto $bb76;

  $bb70:
    assume 0 == 1;
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p278 := $load.ref($M.0, $p277);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p278, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i280 := $zext.i16.i32($i256);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i281 := $trunc.i32.i16($i280);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} rtl818x_iowrite16($p5, $p279, $i281);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb67:
    assume 1 == 1;
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p261 := $load.ref($M.0, $p260);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p261, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i263 := $zext.i16.i32($i256);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i264 := $trunc.i32.i16($i263);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} rtl818x_iowrite16($p5, $p262, $i264);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb64:
    assume $i255 == 1;
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i257 := $zext.i16.i32($i17);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i258 := $or.i32($i257, 1);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i259 := $trunc.i32.i16($i258);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i256 := $i259;
    goto $bb66;

  $bb60:
    assume 1 == 1;
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p250 := $load.ref($M.0, $p249);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p250, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i252 := $zext.i16.i32($i228);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i253 := $trunc.i32.i16($i252);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} rtl818x_iowrite16($p5, $p251, $i253);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb57:
    assume 0 == 1;
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $p233 := $load.ref($M.0, $p232);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p233, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i235 := $zext.i16.i32($i228);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i236 := $trunc.i32.i16($i235);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} rtl818x_iowrite16($p5, $p234, $i236);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb54:
    assume $i227 == 1;
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i229 := $zext.i16.i32($i17);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i230 := $or.i32($i229, 1);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i231 := $trunc.i32.i16($i230);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i228 := $i231;
    goto $bb56;

  $bb50:
    assume 0 == 1;
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p222, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i224 := $zext.i16.i32($i200);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i225 := $trunc.i32.i16($i224);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} rtl818x_iowrite16($p5, $p223, $i225);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb47:
    assume 1 == 1;
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.0, $p204);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p205, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i207 := $zext.i16.i32($i200);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i208 := $trunc.i32.i16($i207);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} rtl818x_iowrite16($p5, $p206, $i208);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume $i199 == 1;
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i201 := $zext.i16.i32($i17);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i202 := $or.i32($i201, 1);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i203 := $trunc.i32.i16($i202);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i200 := $i203;
    goto $bb46;

  $bb40:
    assume 1 == 1;
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p194 := $load.ref($M.0, $p193);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p194, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i196 := $zext.i16.i32($i172);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i197 := $trunc.i32.i16($i196);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} rtl818x_iowrite16($p5, $p195, $i197);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume 0 == 1;
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p177, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i179 := $zext.i16.i32($i172);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i180 := $trunc.i32.i16($i179);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} rtl818x_iowrite16($p5, $p178, $i180);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i171 == 1;
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i173 := $zext.i16.i32($i17);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i174 := $or.i32($i173, 1);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i175 := $trunc.i32.i16($i174);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i172 := $i175;
    goto $bb36;

  $bb30:
    assume 0 == 1;
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.0, $p165);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p166, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i168 := $zext.i16.i32($i144);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i169 := $trunc.i32.i16($i168);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} rtl818x_iowrite16($p5, $p167, $i169);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume 1 == 1;
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p149, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i151 := $zext.i16.i32($i144);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i152 := $trunc.i32.i16($i151);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} rtl818x_iowrite16($p5, $p150, $i152);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i143 == 1;
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i145 := $zext.i16.i32($i17);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i146 := $or.i32($i145, 1);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i32.i16($i146);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i144 := $i147;
    goto $bb26;

  $bb20:
    assume 1 == 1;
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p138, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i140 := $zext.i16.i32($i116);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i141 := $trunc.i32.i16($i140);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} rtl818x_iowrite16($p5, $p139, $i141);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume 0 == 1;
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p121, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i123 := $zext.i16.i32($i116);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i32.i16($i123);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} rtl818x_iowrite16($p5, $p122, $i124);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i115 == 1;
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i117 := $zext.i16.i32($i17);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i118 := $or.i32($i117, 1);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i32.i16($i118);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i116 := $i119;
    goto $bb16;

  $bb9:
    assume 0 == 1;
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i87 := $zext.i16.i32($i66);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i32.i16($i87);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} rtl818x_iowrite16($p5, $p86, $i88);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume 1 == 1;
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i66);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i16($i70);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} rtl818x_iowrite16($p5, $p69, $i71);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i62 == 1;
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i17);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i64 := $or.i32($i63, 1);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i16($i64);
    call {:si_unique_call 442} {:cexpr "reg"} boogie_si_record_i16($i65);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i66 := $i65;
    goto $bb5;
}



const rtl8225_read: ref;

axiom rtl8225_read == $sub.ref(0, 243170);

procedure rtl8225_read($p0: ref, $i1: i8) returns ($r: i16);
  free requires assertsPassed;



implementation rtl8225_read($p0: ref, $i1: i8) returns ($r: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i19: i16;
  var $i20: i32;
  var $i21: i32;
  var $i22: i16;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i16;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i16;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i16;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i16;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i16;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i16;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i16;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $i76: i16;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $i86: i16;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i16;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $i115: i16;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i32;
  var $i124: i32;
  var $i125: i16;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i32;
  var $i134: i32;
  var $i135: i16;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i32;
  var $i144: i32;
  var $i145: i16;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $i153: i32;
  var $i154: i32;
  var $i155: i16;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $i163: i32;
  var $i164: i32;
  var $i165: i16;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $i173: i32;
  var $i174: i32;
  var $i175: i16;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $i183: i16;
  var $i184: i32;
  var $i185: i32;
  var $i186: i1;
  var $i187: i16;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $i191: i32;
  var $i192: i32;
  var $i193: i16;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $i201: i32;
  var $i202: i32;
  var $i203: i16;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $i211: i32;
  var $i212: i16;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $i216: i32;
  var $i217: i16;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $i225: i32;
  var $i226: i32;
  var $i227: i16;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $i235: i32;
  var $i236: i32;
  var $i237: i16;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $i245: i32;
  var $i246: i32;
  var $i247: i16;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $i255: i32;
  var $i256: i32;
  var $i257: i16;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $i265: i16;
  var $i266: i32;
  var $i267: i32;
  var $i268: i1;
  var $i270: i32;
  var $i271: i32;
  var $i272: i16;
  var $i269: i16;
  var $p273: ref;
  var $p274: ref;
  var $p275: ref;
  var $i276: i32;
  var $i277: i32;
  var $i278: i16;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $i286: i32;
  var $i287: i32;
  var $i288: i16;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $p293: ref;
  var $p294: ref;
  var $p295: ref;
  var $i296: i32;
  var $i297: i32;
  var $i298: i16;
  var $p299: ref;
  var $p300: ref;
  var $p301: ref;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $i306: i32;
  var $i307: i32;
  var $i308: i16;
  var $p309: ref;
  var $p310: ref;
  var $p311: ref;
  var $p313: ref;
  var $p314: ref;
  var $p315: ref;
  var $i316: i32;
  var $i317: i32;
  var $i318: i16;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $p323: ref;
  var $p324: ref;
  var $p325: ref;
  var $i326: i16;
  var $i327: i32;
  var $i328: i32;
  var $i329: i1;
  var $i331: i32;
  var $i332: i32;
  var $i333: i16;
  var $i330: i16;
  var $p334: ref;
  var $p335: ref;
  var $p336: ref;
  var $i337: i32;
  var $i338: i32;
  var $i339: i16;
  var $p340: ref;
  var $p341: ref;
  var $p342: ref;
  var $p344: ref;
  var $p345: ref;
  var $p346: ref;
  var $i347: i32;
  var $i348: i32;
  var $i349: i16;
  var $p350: ref;
  var $p351: ref;
  var $p352: ref;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $i357: i32;
  var $i358: i32;
  var $i359: i16;
  var $p360: ref;
  var $p361: ref;
  var $p362: ref;
  var $p364: ref;
  var $p365: ref;
  var $p366: ref;
  var $i367: i32;
  var $i368: i32;
  var $i369: i16;
  var $p370: ref;
  var $p371: ref;
  var $p372: ref;
  var $p374: ref;
  var $p375: ref;
  var $p376: ref;
  var $i377: i32;
  var $i378: i32;
  var $i379: i16;
  var $p380: ref;
  var $p381: ref;
  var $p382: ref;
  var $p384: ref;
  var $p385: ref;
  var $p386: ref;
  var $i387: i16;
  var $i388: i32;
  var $i389: i32;
  var $i390: i1;
  var $i392: i32;
  var $i393: i32;
  var $i394: i16;
  var $i391: i16;
  var $p395: ref;
  var $p396: ref;
  var $p397: ref;
  var $i398: i32;
  var $i399: i32;
  var $i400: i16;
  var $p401: ref;
  var $p402: ref;
  var $p403: ref;
  var $p405: ref;
  var $p406: ref;
  var $p407: ref;
  var $i408: i32;
  var $i409: i32;
  var $i410: i16;
  var $p411: ref;
  var $p412: ref;
  var $p413: ref;
  var $p415: ref;
  var $p416: ref;
  var $p417: ref;
  var $i418: i32;
  var $i419: i32;
  var $i420: i16;
  var $p421: ref;
  var $p422: ref;
  var $p423: ref;
  var $p425: ref;
  var $p426: ref;
  var $p427: ref;
  var $i428: i32;
  var $i429: i32;
  var $i430: i16;
  var $p431: ref;
  var $p432: ref;
  var $p433: ref;
  var $p435: ref;
  var $p436: ref;
  var $p437: ref;
  var $i438: i32;
  var $i439: i32;
  var $i440: i16;
  var $p441: ref;
  var $p442: ref;
  var $p443: ref;
  var $p445: ref;
  var $p446: ref;
  var $p447: ref;
  var $i448: i16;
  var $i449: i32;
  var $i450: i32;
  var $i451: i1;
  var $i453: i32;
  var $i454: i32;
  var $i455: i16;
  var $i452: i16;
  var $p456: ref;
  var $p457: ref;
  var $p458: ref;
  var $i459: i32;
  var $i460: i32;
  var $i461: i16;
  var $p462: ref;
  var $p463: ref;
  var $p464: ref;
  var $p466: ref;
  var $p467: ref;
  var $p468: ref;
  var $i469: i32;
  var $i470: i32;
  var $i471: i16;
  var $p472: ref;
  var $p473: ref;
  var $p474: ref;
  var $p476: ref;
  var $p477: ref;
  var $p478: ref;
  var $i479: i32;
  var $i480: i32;
  var $i481: i16;
  var $p482: ref;
  var $p483: ref;
  var $p484: ref;
  var $p486: ref;
  var $p487: ref;
  var $p488: ref;
  var $i489: i32;
  var $i490: i32;
  var $i491: i16;
  var $p492: ref;
  var $p493: ref;
  var $p494: ref;
  var $p496: ref;
  var $p497: ref;
  var $p498: ref;
  var $i499: i32;
  var $i500: i32;
  var $i501: i16;
  var $p502: ref;
  var $p503: ref;
  var $p504: ref;
  var $p506: ref;
  var $p507: ref;
  var $p508: ref;
  var $i509: i16;
  var $i510: i32;
  var $i511: i32;
  var $i512: i1;
  var $i514: i32;
  var $i515: i32;
  var $i516: i16;
  var $i513: i16;
  var $p517: ref;
  var $p518: ref;
  var $p519: ref;
  var $i520: i32;
  var $i521: i32;
  var $i522: i16;
  var $p523: ref;
  var $p524: ref;
  var $p525: ref;
  var $p527: ref;
  var $p528: ref;
  var $p529: ref;
  var $i530: i32;
  var $i531: i32;
  var $i532: i16;
  var $p533: ref;
  var $p534: ref;
  var $p535: ref;
  var $p537: ref;
  var $p538: ref;
  var $p539: ref;
  var $i540: i32;
  var $i541: i32;
  var $i542: i16;
  var $p543: ref;
  var $p544: ref;
  var $p545: ref;
  var $p547: ref;
  var $p548: ref;
  var $p549: ref;
  var $i550: i32;
  var $i551: i32;
  var $i552: i16;
  var $p553: ref;
  var $p554: ref;
  var $p555: ref;
  var $p557: ref;
  var $p558: ref;
  var $p559: ref;
  var $i560: i32;
  var $i561: i32;
  var $i562: i16;
  var $p563: ref;
  var $p564: ref;
  var $p565: ref;
  var $p567: ref;
  var $p568: ref;
  var $p569: ref;
  var $i570: i16;
  var $i571: i32;
  var $i572: i32;
  var $i573: i1;
  var $i575: i32;
  var $i576: i32;
  var $i577: i16;
  var $i574: i16;
  var $p578: ref;
  var $p579: ref;
  var $p580: ref;
  var $i581: i32;
  var $i582: i32;
  var $i583: i16;
  var $p584: ref;
  var $p585: ref;
  var $p586: ref;
  var $p588: ref;
  var $p589: ref;
  var $p590: ref;
  var $i591: i32;
  var $i592: i32;
  var $i593: i16;
  var $p594: ref;
  var $p595: ref;
  var $p596: ref;
  var $p598: ref;
  var $p599: ref;
  var $p600: ref;
  var $i601: i32;
  var $i602: i32;
  var $i603: i16;
  var $p604: ref;
  var $p605: ref;
  var $p606: ref;
  var $p608: ref;
  var $p609: ref;
  var $p610: ref;
  var $i611: i32;
  var $i612: i32;
  var $i613: i16;
  var $p614: ref;
  var $p615: ref;
  var $p616: ref;
  var $p618: ref;
  var $p619: ref;
  var $p620: ref;
  var $i621: i32;
  var $i622: i32;
  var $i623: i16;
  var $p624: ref;
  var $p625: ref;
  var $p626: ref;
  var $p628: ref;
  var $p629: ref;
  var $p630: ref;
  var $i631: i16;
  var $i632: i32;
  var $i633: i32;
  var $i634: i1;
  var $i636: i32;
  var $i637: i32;
  var $i638: i16;
  var $i635: i16;
  var $p639: ref;
  var $p640: ref;
  var $p641: ref;
  var $i642: i32;
  var $i643: i32;
  var $i644: i16;
  var $p645: ref;
  var $p646: ref;
  var $p647: ref;
  var $p649: ref;
  var $p650: ref;
  var $p651: ref;
  var $i652: i32;
  var $i653: i32;
  var $i654: i16;
  var $p655: ref;
  var $p656: ref;
  var $p657: ref;
  var $p659: ref;
  var $p660: ref;
  var $p661: ref;
  var $i662: i32;
  var $i663: i32;
  var $i664: i16;
  var $p665: ref;
  var $p666: ref;
  var $p667: ref;
  var $p669: ref;
  var $p670: ref;
  var $p671: ref;
  var $i672: i32;
  var $i673: i32;
  var $i674: i16;
  var $p675: ref;
  var $p676: ref;
  var $p677: ref;
  var $p679: ref;
  var $p680: ref;
  var $p681: ref;
  var $i682: i32;
  var $i683: i32;
  var $i684: i16;
  var $p685: ref;
  var $p686: ref;
  var $p687: ref;
  var $p689: ref;
  var $p690: ref;
  var $p691: ref;
  var $i692: i16;
  var $i693: i32;
  var $i694: i32;
  var $i695: i1;
  var $i697: i32;
  var $i698: i32;
  var $i699: i16;
  var $i696: i16;
  var $p700: ref;
  var $p701: ref;
  var $p702: ref;
  var $i703: i32;
  var $i704: i32;
  var $i705: i16;
  var $p706: ref;
  var $p707: ref;
  var $p708: ref;
  var $p710: ref;
  var $p711: ref;
  var $p712: ref;
  var $i713: i32;
  var $i714: i32;
  var $i715: i16;
  var $p716: ref;
  var $p717: ref;
  var $p718: ref;
  var $p720: ref;
  var $p721: ref;
  var $p722: ref;
  var $i723: i32;
  var $i724: i32;
  var $i725: i16;
  var $p726: ref;
  var $p727: ref;
  var $p728: ref;
  var $p730: ref;
  var $p731: ref;
  var $p732: ref;
  var $i733: i32;
  var $i734: i32;
  var $i735: i16;
  var $p736: ref;
  var $p737: ref;
  var $p738: ref;
  var $p740: ref;
  var $p741: ref;
  var $p742: ref;
  var $i743: i32;
  var $i744: i32;
  var $i745: i16;
  var $p746: ref;
  var $p747: ref;
  var $p748: ref;
  var $p750: ref;
  var $p751: ref;
  var $p752: ref;
  var $i753: i16;
  var $i754: i32;
  var $i755: i32;
  var $i756: i1;
  var $i758: i32;
  var $i759: i32;
  var $i760: i16;
  var $i757: i16;
  var $p761: ref;
  var $p762: ref;
  var $p763: ref;
  var $i764: i32;
  var $i765: i32;
  var $i766: i16;
  var $p767: ref;
  var $p768: ref;
  var $p769: ref;
  var $p771: ref;
  var $p772: ref;
  var $p773: ref;
  var $i774: i32;
  var $i775: i32;
  var $i776: i16;
  var $p777: ref;
  var $p778: ref;
  var $p779: ref;
  var $p781: ref;
  var $p782: ref;
  var $p783: ref;
  var $i784: i32;
  var $i785: i32;
  var $i786: i16;
  var $p787: ref;
  var $p788: ref;
  var $p789: ref;
  var $p791: ref;
  var $p792: ref;
  var $p793: ref;
  var $i794: i32;
  var $i795: i32;
  var $i796: i16;
  var $p797: ref;
  var $p798: ref;
  var $p799: ref;
  var $p801: ref;
  var $p802: ref;
  var $p803: ref;
  var $i804: i32;
  var $i805: i32;
  var $i806: i16;
  var $p807: ref;
  var $p808: ref;
  var $p809: ref;
  var $p811: ref;
  var $p812: ref;
  var $p813: ref;
  var $i814: i16;
  var $i815: i32;
  var $i816: i32;
  var $i817: i1;
  var $i819: i32;
  var $i820: i32;
  var $i821: i16;
  var $i818: i16;
  var $p822: ref;
  var $p823: ref;
  var $p824: ref;
  var $i825: i32;
  var $i826: i32;
  var $i827: i16;
  var $p828: ref;
  var $p829: ref;
  var $p830: ref;
  var $p832: ref;
  var $p833: ref;
  var $p834: ref;
  var $i835: i32;
  var $i836: i32;
  var $i837: i16;
  var $p838: ref;
  var $p839: ref;
  var $p840: ref;
  var $p842: ref;
  var $p843: ref;
  var $p844: ref;
  var $i845: i32;
  var $i846: i32;
  var $i847: i16;
  var $p848: ref;
  var $p849: ref;
  var $p850: ref;
  var $p852: ref;
  var $p853: ref;
  var $p854: ref;
  var $i855: i32;
  var $i856: i32;
  var $i857: i16;
  var $p858: ref;
  var $p859: ref;
  var $p860: ref;
  var $p862: ref;
  var $p863: ref;
  var $p864: ref;
  var $i865: i32;
  var $i866: i32;
  var $i867: i16;
  var $p868: ref;
  var $p869: ref;
  var $p870: ref;
  var $p872: ref;
  var $p873: ref;
  var $p874: ref;
  var $i875: i16;
  var $i876: i32;
  var $i877: i32;
  var $i878: i1;
  var $i879: i32;
  var $i880: i32;
  var $i881: i16;
  var $i221: i16;
  var $p882: ref;
  var $p883: ref;
  var $p884: ref;
  var $i885: i32;
  var $i886: i32;
  var $i887: i16;
  var $p888: ref;
  var $p889: ref;
  var $p890: ref;
  var $i892: i32;
  var $i893: i32;
  var $i894: i16;
  var $i895: i32;
  var $i896: i32;
  var $i897: i32;
  var $i898: i32;
  var $i899: i16;
  var $p900: ref;
  var $p901: ref;
  var $p902: ref;
  var $i903: i32;
  var $i904: i16;
  var $p905: ref;
  var $p906: ref;
  var $p907: ref;
  var $p909: ref;
  var $p910: ref;
  var $p911: ref;
  var $i912: i32;
  var $i913: i32;
  var $i914: i16;
  var $p915: ref;
  var $p916: ref;
  var $p917: ref;
  var $p919: ref;
  var $p920: ref;
  var $p921: ref;
  var $i922: i32;
  var $i923: i32;
  var $i924: i16;
  var $p925: ref;
  var $p926: ref;
  var $p927: ref;
  var $p929: ref;
  var $p930: ref;
  var $p931: ref;
  var $i932: i32;
  var $i933: i16;
  var $p934: ref;
  var $p935: ref;
  var $p936: ref;
  var $i938: i32;
  var $i939: i32;
  var $i940: i16;
  var $i941: i32;
  var $i942: i32;
  var $i943: i32;
  var $i944: i32;
  var $i945: i16;
  var $p946: ref;
  var $p947: ref;
  var $p948: ref;
  var $i949: i32;
  var $i950: i16;
  var $p951: ref;
  var $p952: ref;
  var $p953: ref;
  var $p955: ref;
  var $p956: ref;
  var $p957: ref;
  var $i958: i32;
  var $i959: i32;
  var $i960: i16;
  var $p961: ref;
  var $p962: ref;
  var $p963: ref;
  var $p965: ref;
  var $p966: ref;
  var $p967: ref;
  var $i968: i32;
  var $i969: i32;
  var $i970: i16;
  var $p971: ref;
  var $p972: ref;
  var $p973: ref;
  var $p975: ref;
  var $p976: ref;
  var $p977: ref;
  var $i978: i32;
  var $i979: i16;
  var $p980: ref;
  var $p981: ref;
  var $p982: ref;
  var $i984: i32;
  var $i985: i32;
  var $i986: i16;
  var $i987: i32;
  var $i988: i32;
  var $i989: i32;
  var $i990: i32;
  var $i991: i16;
  var $p992: ref;
  var $p993: ref;
  var $p994: ref;
  var $i995: i32;
  var $i996: i16;
  var $p997: ref;
  var $p998: ref;
  var $p999: ref;
  var $p1001: ref;
  var $p1002: ref;
  var $p1003: ref;
  var $i1004: i32;
  var $i1005: i32;
  var $i1006: i16;
  var $p1007: ref;
  var $p1008: ref;
  var $p1009: ref;
  var $p1011: ref;
  var $p1012: ref;
  var $p1013: ref;
  var $i1014: i32;
  var $i1015: i32;
  var $i1016: i16;
  var $p1017: ref;
  var $p1018: ref;
  var $p1019: ref;
  var $p1021: ref;
  var $p1022: ref;
  var $p1023: ref;
  var $i1024: i32;
  var $i1025: i16;
  var $p1026: ref;
  var $p1027: ref;
  var $p1028: ref;
  var $i1030: i32;
  var $i1031: i16;
  var $i1032: i32;
  var $i1033: i32;
  var $i1034: i32;
  var $i1035: i32;
  var $i1036: i16;
  var $p1037: ref;
  var $p1038: ref;
  var $p1039: ref;
  var $i1040: i32;
  var $i1041: i16;
  var $p1042: ref;
  var $p1043: ref;
  var $p1044: ref;
  var $p1046: ref;
  var $p1047: ref;
  var $p1048: ref;
  var $i1049: i32;
  var $i1050: i32;
  var $i1051: i16;
  var $p1052: ref;
  var $p1053: ref;
  var $p1054: ref;
  var $p1056: ref;
  var $p1057: ref;
  var $p1058: ref;
  var $i1059: i32;
  var $i1060: i32;
  var $i1061: i16;
  var $p1062: ref;
  var $p1063: ref;
  var $p1064: ref;
  var $p1066: ref;
  var $p1067: ref;
  var $p1068: ref;
  var $i1069: i32;
  var $i1070: i16;
  var $p1071: ref;
  var $p1072: ref;
  var $p1073: ref;
  var vslice_dummy_var_46: i8;
  var vslice_dummy_var_47: i8;
  var vslice_dummy_var_48: i8;
  var vslice_dummy_var_49: i8;
  var vslice_dummy_var_50: i8;
  var vslice_dummy_var_51: i8;
  var vslice_dummy_var_52: i8;
  var vslice_dummy_var_53: i8;
  var vslice_dummy_var_54: i8;
  var vslice_dummy_var_55: i8;
  var vslice_dummy_var_56: i8;
  var vslice_dummy_var_57: i8;
  var vslice_dummy_var_58: i8;
  var vslice_dummy_var_59: i8;
  var vslice_dummy_var_60: i8;
  var vslice_dummy_var_61: i8;
  var vslice_dummy_var_62: i8;
  var vslice_dummy_var_63: i8;
  var vslice_dummy_var_64: i8;
  var vslice_dummy_var_65: i8;
  var vslice_dummy_var_66: i8;
  var vslice_dummy_var_67: i8;
  var vslice_dummy_var_68: i8;
  var vslice_dummy_var_69: i8;
  var vslice_dummy_var_70: i8;
  var vslice_dummy_var_71: i8;
  var vslice_dummy_var_72: i8;
  var vslice_dummy_var_73: i8;
  var vslice_dummy_var_74: i8;
  var vslice_dummy_var_75: i8;
  var vslice_dummy_var_76: i8;
  var vslice_dummy_var_77: i8;
  var vslice_dummy_var_78: i8;
  var vslice_dummy_var_79: i8;
  var vslice_dummy_var_80: i8;
  var vslice_dummy_var_81: i8;
  var vslice_dummy_var_82: i8;
  var vslice_dummy_var_83: i8;
  var vslice_dummy_var_84: i8;
  var vslice_dummy_var_85: i8;
  var vslice_dummy_var_86: i8;
  var vslice_dummy_var_87: i8;
  var vslice_dummy_var_88: i8;
  var vslice_dummy_var_89: i8;
  var vslice_dummy_var_90: i8;
  var vslice_dummy_var_91: i8;
  var vslice_dummy_var_92: i8;
  var vslice_dummy_var_93: i8;
  var vslice_dummy_var_94: i8;
  var vslice_dummy_var_95: i8;
  var vslice_dummy_var_96: i8;
  var vslice_dummy_var_97: i8;
  var vslice_dummy_var_98: i8;
  var vslice_dummy_var_99: i8;
  var vslice_dummy_var_100: i8;
  var vslice_dummy_var_101: i8;
  var vslice_dummy_var_102: i8;
  var vslice_dummy_var_103: i8;
  var vslice_dummy_var_104: i8;
  var vslice_dummy_var_105: i8;
  var vslice_dummy_var_106: i8;
  var vslice_dummy_var_107: i8;
  var vslice_dummy_var_108: i8;
  var vslice_dummy_var_109: i8;
  var vslice_dummy_var_110: i8;
  var vslice_dummy_var_111: i8;
  var vslice_dummy_var_112: i8;
  var vslice_dummy_var_113: i8;
  var vslice_dummy_var_114: i8;
  var vslice_dummy_var_115: i8;
  var vslice_dummy_var_116: i8;
  var vslice_dummy_var_117: i8;
  var vslice_dummy_var_118: i8;
  var vslice_dummy_var_119: i8;
  var vslice_dummy_var_120: i8;
  var vslice_dummy_var_121: i8;
  var vslice_dummy_var_122: i8;
  var vslice_dummy_var_123: i8;
  var vslice_dummy_var_124: i8;
  var vslice_dummy_var_125: i8;
  var vslice_dummy_var_126: i8;
  var vslice_dummy_var_127: i8;
  var vslice_dummy_var_128: i8;
  var vslice_dummy_var_129: i8;
  var vslice_dummy_var_130: i8;
  var vslice_dummy_var_131: i8;
  var vslice_dummy_var_132: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} {:cexpr "rtl8225_read:arg:addr"} boogie_si_record_i8($i1);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $i8 := rtl818x_ioread16($p4, $p7);
    call {:si_unique_call 515} {:cexpr "reg80"} boogie_si_record_i16($i8);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 256)), $mul.ref(130, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $i12 := rtl818x_ioread16($p4, $p11);
    call {:si_unique_call 517} {:cexpr "reg82"} boogie_si_record_i16($i12);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 256)), $mul.ref(132, 1));
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $i16 := rtl818x_ioread16($p4, $p15);
    call {:si_unique_call 519} {:cexpr "tmp"} boogie_si_record_i16($i16);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i17, 1024);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    call {:si_unique_call 520} {:cexpr "reg84"} boogie_si_record_i16($i19);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i8);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 65520);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    call {:si_unique_call 521} {:cexpr "reg80"} boogie_si_record_i16($i22);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 256)), $mul.ref(130, 1));
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i12);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, 15);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} rtl818x_iowrite16($p4, $p25, $i28);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 256)), $mul.ref(132, 1));
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i19);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i32, 15);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i33);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} rtl818x_iowrite16($p4, $p31, $i34);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i22);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i38, 4);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i39);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} rtl818x_iowrite16($p4, $p37, $i40);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} vslice_dummy_var_46 := rtl818x_ioread8($p4, $p43);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} __const_udelay(17180);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i22);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i16($i48);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} rtl818x_iowrite16($p4, $p47, $i49);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} vslice_dummy_var_47 := rtl818x_ioread8($p4, $p52);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} __const_udelay(21475);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i1);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i55 := $ashr.i32($i54, 4);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i16($i55);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i57 := $sext.i16.i32($i56);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, 1);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i59 := $sext.i16.i32($i22);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i60 := $or.i32($i58, $i59);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i16($i60);
    call {:si_unique_call 530} {:cexpr "reg"} boogie_si_record_i16($i61);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb3, $bb4;

  $bb4:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i61);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i75 := $or.i32($i74, 2);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i16($i75);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} rtl818x_iowrite16($p4, $p73, $i76);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} vslice_dummy_var_49 := rtl818x_ioread8($p4, $p79);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} __const_udelay(8590);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i84 := $zext.i16.i32($i61);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i85 := $or.i32($i84, 2);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i16($i85);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} rtl818x_iowrite16($p4, $p83, $i86);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} vslice_dummy_var_50 := rtl818x_ioread8($p4, $p89);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} __const_udelay(8590);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb6, $bb7;

  $bb7:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i892 := $zext.i8.i32($i1);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i893 := $ashr.i32($i892, 3);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i894 := $trunc.i32.i16($i893);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i895 := $sext.i16.i32($i894);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i896 := $and.i32($i895, 1);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i897 := $sext.i16.i32($i22);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i898 := $or.i32($i896, $i897);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i899 := $trunc.i32.i16($i898);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb61, $bb62;

  $bb62:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p909 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $p910 := $load.ref($M.0, $p909);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $p911 := $add.ref($add.ref($p910, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i912 := $zext.i16.i32($i899);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i913 := $or.i32($i912, 2);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i914 := $trunc.i32.i16($i913);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} rtl818x_iowrite16($p4, $p911, $i914);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p915 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p916 := $load.ref($M.0, $p915);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $p917 := $add.ref($add.ref($p916, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} vslice_dummy_var_118 := rtl818x_ioread8($p4, $p917);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} __const_udelay(8590);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $p919 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p920 := $load.ref($M.0, $p919);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p921 := $add.ref($add.ref($p920, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i922 := $zext.i16.i32($i899);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i923 := $or.i32($i922, 2);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i924 := $trunc.i32.i16($i923);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} rtl818x_iowrite16($p4, $p921, $i924);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p925 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $p926 := $load.ref($M.0, $p925);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p927 := $add.ref($add.ref($p926, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} vslice_dummy_var_119 := rtl818x_ioread8($p4, $p927);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} __const_udelay(8590);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb64, $bb65;

  $bb65:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i938 := $zext.i8.i32($i1);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i939 := $ashr.i32($i938, 2);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i940 := $trunc.i32.i16($i939);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i941 := $sext.i16.i32($i940);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i942 := $and.i32($i941, 1);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i943 := $sext.i16.i32($i22);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i944 := $or.i32($i942, $i943);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i945 := $trunc.i32.i16($i944);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb68, $bb69;

  $bb69:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p955 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $p956 := $load.ref($M.0, $p955);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p957 := $add.ref($add.ref($p956, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i958 := $zext.i16.i32($i945);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i959 := $or.i32($i958, 2);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i960 := $trunc.i32.i16($i959);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} rtl818x_iowrite16($p4, $p957, $i960);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $p961 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p962 := $load.ref($M.0, $p961);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $p963 := $add.ref($add.ref($p962, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} vslice_dummy_var_122 := rtl818x_ioread8($p4, $p963);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} __const_udelay(8590);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p965 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $p966 := $load.ref($M.0, $p965);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p967 := $add.ref($add.ref($p966, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i968 := $zext.i16.i32($i945);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i969 := $or.i32($i968, 2);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i970 := $trunc.i32.i16($i969);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} rtl818x_iowrite16($p4, $p967, $i970);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $p971 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p972 := $load.ref($M.0, $p971);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p973 := $add.ref($add.ref($p972, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} vslice_dummy_var_123 := rtl818x_ioread8($p4, $p973);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} __const_udelay(8590);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb71, $bb72;

  $bb72:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i984 := $zext.i8.i32($i1);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i985 := $ashr.i32($i984, 1);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i986 := $trunc.i32.i16($i985);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i987 := $sext.i16.i32($i986);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i988 := $and.i32($i987, 1);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i989 := $sext.i16.i32($i22);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i990 := $or.i32($i988, $i989);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i991 := $trunc.i32.i16($i990);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb75, $bb76;

  $bb76:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p1001 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $p1002 := $load.ref($M.0, $p1001);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $p1003 := $add.ref($add.ref($p1002, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i1004 := $zext.i16.i32($i991);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i1005 := $or.i32($i1004, 2);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i1006 := $trunc.i32.i16($i1005);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} rtl818x_iowrite16($p4, $p1003, $i1006);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p1007 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p1008 := $load.ref($M.0, $p1007);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $p1009 := $add.ref($add.ref($p1008, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} vslice_dummy_var_126 := rtl818x_ioread8($p4, $p1009);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} __const_udelay(8590);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p1011 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $p1012 := $load.ref($M.0, $p1011);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p1013 := $add.ref($add.ref($p1012, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i1014 := $zext.i16.i32($i991);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i1015 := $or.i32($i1014, 2);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i1016 := $trunc.i32.i16($i1015);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} rtl818x_iowrite16($p4, $p1013, $i1016);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p1017 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p1018 := $load.ref($M.0, $p1017);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p1019 := $add.ref($add.ref($p1018, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} vslice_dummy_var_127 := rtl818x_ioread8($p4, $p1019);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} __const_udelay(8590);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb78, $bb79;

  $bb79:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i1030 := $zext.i8.i32($i1);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i1031 := $trunc.i32.i16($i1030);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i1032 := $sext.i16.i32($i1031);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i1033 := $and.i32($i1032, 1);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i1034 := $sext.i16.i32($i22);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i1035 := $or.i32($i1033, $i1034);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i1036 := $trunc.i32.i16($i1035);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb82, $bb83;

  $bb83:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p1046 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p1047 := $load.ref($M.0, $p1046);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $p1048 := $add.ref($add.ref($p1047, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i1049 := $zext.i16.i32($i1036);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i1050 := $or.i32($i1049, 2);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i1051 := $trunc.i32.i16($i1050);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} rtl818x_iowrite16($p4, $p1048, $i1051);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p1052 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p1053 := $load.ref($M.0, $p1052);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $p1054 := $add.ref($add.ref($p1053, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} vslice_dummy_var_130 := rtl818x_ioread8($p4, $p1054);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} __const_udelay(8590);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $p1056 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $p1057 := $load.ref($M.0, $p1056);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $p1058 := $add.ref($add.ref($p1057, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i1059 := $zext.i16.i32($i1036);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i1060 := $or.i32($i1059, 2);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i1061 := $trunc.i32.i16($i1060);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} rtl818x_iowrite16($p4, $p1058, $i1061);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $p1062 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p1063 := $load.ref($M.0, $p1062);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p1064 := $add.ref($add.ref($p1063, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} vslice_dummy_var_131 := rtl818x_ioread8($p4, $p1064);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} __const_udelay(8590);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb85, $bb86;

  $bb86:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0, 256)), $mul.ref(130, 1));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} rtl818x_iowrite16($p4, $p102, 14);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p104, $mul.ref(0, 256)), $mul.ref(132, 1));
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} rtl818x_iowrite16($p4, $p105, 1038);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} vslice_dummy_var_52 := rtl818x_ioread8($p4, $p108);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p111, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i113 := $zext.i16.i32($i22);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i114 := $or.i32($i113, 10);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i32.i16($i114);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} rtl818x_iowrite16($p4, $p112, $i115);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p117, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} vslice_dummy_var_53 := rtl818x_ioread8($p4, $p118);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} __const_udelay(8590);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p121, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i123 := $zext.i16.i32($i22);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i124 := $or.i32($i123, 8);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i32.i16($i124);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} rtl818x_iowrite16($p4, $p122, $i125);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p127, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} vslice_dummy_var_54 := rtl818x_ioread8($p4, $p128);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} __const_udelay(8590);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p131, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i133 := $zext.i16.i32($i22);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i134 := $or.i32($i133, 8);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i32.i16($i134);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} rtl818x_iowrite16($p4, $p132, $i135);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p137, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} vslice_dummy_var_55 := rtl818x_ioread8($p4, $p138);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} __const_udelay(8590);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p141, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i143 := $zext.i16.i32($i22);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i144 := $or.i32($i143, 8);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i32.i16($i144);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} rtl818x_iowrite16($p4, $p142, $i145);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p147, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} vslice_dummy_var_56 := rtl818x_ioread8($p4, $p148);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} __const_udelay(4295);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p151, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i153 := $zext.i16.i32($i22);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i154 := $or.i32($i153, 10);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i155 := $trunc.i32.i16($i154);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} rtl818x_iowrite16($p4, $p152, $i155);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p156);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p157, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} vslice_dummy_var_57 := rtl818x_ioread8($p4, $p158);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} __const_udelay(8590);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p161 := $load.ref($M.0, $p160);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p161, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i163 := $zext.i16.i32($i22);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i164 := $or.i32($i163, 10);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i165 := $trunc.i32.i16($i164);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} rtl818x_iowrite16($p4, $p162, $i165);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.0, $p166);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p167, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} vslice_dummy_var_58 := rtl818x_ioread8($p4, $p168);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} __const_udelay(8590);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.0, $p170);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p171, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i173 := $zext.i16.i32($i22);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i174 := $or.i32($i173, 10);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i175 := $trunc.i32.i16($i174);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} rtl818x_iowrite16($p4, $p172, $i175);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p177, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} vslice_dummy_var_59 := rtl818x_ioread8($p4, $p178);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} __const_udelay(8590);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.0, $p180);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p181, $mul.ref(0, 256)), $mul.ref(134, 1));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $i183 := rtl818x_ioread16($p4, $p182);
    call {:si_unique_call 568} {:cexpr "tmp___0"} boogie_si_record_i16($i183);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i184 := $zext.i16.i32($i183);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i185 := $and.i32($i184, 2);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i186 := $ne.i32($i185, 0);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i186} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    $i187 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $p189 := $load.ref($M.0, $p188);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p189, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i191 := $zext.i16.i32($i22);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i192 := $or.i32($i191, 8);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i193 := $trunc.i32.i16($i192);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} rtl818x_iowrite16($p4, $p190, $i193);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p195 := $load.ref($M.0, $p194);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p195, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} vslice_dummy_var_60 := rtl818x_ioread8($p4, $p196);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} __const_udelay(8590);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p223 := $load.ref($M.0, $p222);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p223, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i225 := $zext.i16.i32($i22);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i226 := $or.i32($i225, 8);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i227 := $trunc.i32.i16($i226);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} rtl818x_iowrite16($p4, $p224, $i227);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $p229 := $load.ref($M.0, $p228);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p229, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} vslice_dummy_var_61 := rtl818x_ioread8($p4, $p230);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} __const_udelay(4295);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p233 := $load.ref($M.0, $p232);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p233, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i235 := $zext.i16.i32($i22);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i236 := $or.i32($i235, 10);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i237 := $trunc.i32.i16($i236);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} rtl818x_iowrite16($p4, $p234, $i237);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.0, $p238);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p239, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} vslice_dummy_var_62 := rtl818x_ioread8($p4, $p240);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} __const_udelay(8590);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $p243 := $load.ref($M.0, $p242);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p243, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i245 := $zext.i16.i32($i22);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i246 := $or.i32($i245, 10);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i247 := $trunc.i32.i16($i246);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} rtl818x_iowrite16($p4, $p244, $i247);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p249 := $load.ref($M.0, $p248);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p249, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} vslice_dummy_var_63 := rtl818x_ioread8($p4, $p250);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} __const_udelay(8590);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p253 := $load.ref($M.0, $p252);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p253, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i255 := $zext.i16.i32($i22);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i256 := $or.i32($i255, 10);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i257 := $trunc.i32.i16($i256);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} rtl818x_iowrite16($p4, $p254, $i257);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p259 := $load.ref($M.0, $p258);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p259, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} vslice_dummy_var_64 := rtl818x_ioread8($p4, $p260);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} __const_udelay(8590);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p263 := $load.ref($M.0, $p262);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p263, $mul.ref(0, 256)), $mul.ref(134, 1));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $i265 := rtl818x_ioread16($p4, $p264);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i266 := $zext.i16.i32($i265);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i267 := $and.i32($i266, 2);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i268 := $ne.i32($i267, 0);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    $i269 := $i187;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p274 := $load.ref($M.0, $p273);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p274, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i276 := $zext.i16.i32($i22);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i277 := $or.i32($i276, 8);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i278 := $trunc.i32.i16($i277);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} rtl818x_iowrite16($p4, $p275, $i278);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $p280 := $load.ref($M.0, $p279);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p280, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} vslice_dummy_var_66 := rtl818x_ioread8($p4, $p281);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} __const_udelay(8590);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p284 := $load.ref($M.0, $p283);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p284, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i286 := $zext.i16.i32($i22);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i287 := $or.i32($i286, 8);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i288 := $trunc.i32.i16($i287);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} rtl818x_iowrite16($p4, $p285, $i288);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p290 := $load.ref($M.0, $p289);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p290, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} vslice_dummy_var_67 := rtl818x_ioread8($p4, $p291);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} __const_udelay(4295);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p294 := $load.ref($M.0, $p293);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p294, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i296 := $zext.i16.i32($i22);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i297 := $or.i32($i296, 10);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i298 := $trunc.i32.i16($i297);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} rtl818x_iowrite16($p4, $p295, $i298);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p300 := $load.ref($M.0, $p299);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p300, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} vslice_dummy_var_68 := rtl818x_ioread8($p4, $p301);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} __const_udelay(8590);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p304 := $load.ref($M.0, $p303);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p304, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i306 := $zext.i16.i32($i22);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i307 := $or.i32($i306, 10);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i308 := $trunc.i32.i16($i307);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} rtl818x_iowrite16($p4, $p305, $i308);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $p310 := $load.ref($M.0, $p309);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p310, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} vslice_dummy_var_69 := rtl818x_ioread8($p4, $p311);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} __const_udelay(8590);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $p314 := $load.ref($M.0, $p313);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p314, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i316 := $zext.i16.i32($i22);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i317 := $or.i32($i316, 10);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i318 := $trunc.i32.i16($i317);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} rtl818x_iowrite16($p4, $p315, $i318);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p320 := $load.ref($M.0, $p319);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p320, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} vslice_dummy_var_70 := rtl818x_ioread8($p4, $p321);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} __const_udelay(8590);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $p324 := $load.ref($M.0, $p323);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p324, $mul.ref(0, 256)), $mul.ref(134, 1));
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $i326 := rtl818x_ioread16($p4, $p325);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i327 := $zext.i16.i32($i326);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i328 := $and.i32($i327, 2);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i329 := $ne.i32($i328, 0);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i329} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    $i330 := $i269;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p335 := $load.ref($M.0, $p334);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($p335, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i337 := $zext.i16.i32($i22);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i338 := $or.i32($i337, 8);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i339 := $trunc.i32.i16($i338);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} rtl818x_iowrite16($p4, $p336, $i339);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $p341 := $load.ref($M.0, $p340);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p341, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} vslice_dummy_var_71 := rtl818x_ioread8($p4, $p342);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} __const_udelay(8590);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p345 := $load.ref($M.0, $p344);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p345, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i347 := $zext.i16.i32($i22);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i348 := $or.i32($i347, 8);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i349 := $trunc.i32.i16($i348);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} rtl818x_iowrite16($p4, $p346, $i349);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p351 := $load.ref($M.0, $p350);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($p351, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} vslice_dummy_var_72 := rtl818x_ioread8($p4, $p352);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} __const_udelay(4295);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p355 := $load.ref($M.0, $p354);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p355, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i357 := $zext.i16.i32($i22);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i358 := $or.i32($i357, 10);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i359 := $trunc.i32.i16($i358);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} rtl818x_iowrite16($p4, $p356, $i359);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $p361 := $load.ref($M.0, $p360);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p361, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} vslice_dummy_var_73 := rtl818x_ioread8($p4, $p362);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} __const_udelay(8590);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $p365 := $load.ref($M.0, $p364);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p365, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i367 := $zext.i16.i32($i22);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i368 := $or.i32($i367, 10);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i369 := $trunc.i32.i16($i368);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} rtl818x_iowrite16($p4, $p366, $i369);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p371 := $load.ref($M.0, $p370);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($p371, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} vslice_dummy_var_74 := rtl818x_ioread8($p4, $p372);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} __const_udelay(8590);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p375 := $load.ref($M.0, $p374);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p375, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i377 := $zext.i16.i32($i22);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i378 := $or.i32($i377, 10);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i379 := $trunc.i32.i16($i378);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} rtl818x_iowrite16($p4, $p376, $i379);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p381 := $load.ref($M.0, $p380);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($p381, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} vslice_dummy_var_75 := rtl818x_ioread8($p4, $p382);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} __const_udelay(8590);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p385 := $load.ref($M.0, $p384);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p385, $mul.ref(0, 256)), $mul.ref(134, 1));
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $i387 := rtl818x_ioread16($p4, $p386);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i388 := $zext.i16.i32($i387);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i389 := $and.i32($i388, 2);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i390 := $ne.i32($i389, 0);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i390} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i390 == 1);
    assume {:verifier.code 0} true;
    $i391 := $i330;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p396 := $load.ref($M.0, $p395);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p396, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i398 := $zext.i16.i32($i22);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i399 := $or.i32($i398, 8);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i400 := $trunc.i32.i16($i399);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} rtl818x_iowrite16($p4, $p397, $i400);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $p402 := $load.ref($M.0, $p401);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($p402, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} vslice_dummy_var_76 := rtl818x_ioread8($p4, $p403);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} __const_udelay(8590);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p406 := $load.ref($M.0, $p405);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($p406, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i408 := $zext.i16.i32($i22);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i409 := $or.i32($i408, 8);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i410 := $trunc.i32.i16($i409);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} rtl818x_iowrite16($p4, $p407, $i410);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p412 := $load.ref($M.0, $p411);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($p412, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} vslice_dummy_var_77 := rtl818x_ioread8($p4, $p413);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} __const_udelay(4295);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p416 := $load.ref($M.0, $p415);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($p416, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i418 := $zext.i16.i32($i22);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i419 := $or.i32($i418, 10);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i420 := $trunc.i32.i16($i419);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} rtl818x_iowrite16($p4, $p417, $i420);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p422 := $load.ref($M.0, $p421);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($p422, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} vslice_dummy_var_78 := rtl818x_ioread8($p4, $p423);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} __const_udelay(8590);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $p426 := $load.ref($M.0, $p425);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($p426, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i428 := $zext.i16.i32($i22);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i429 := $or.i32($i428, 10);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i430 := $trunc.i32.i16($i429);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} rtl818x_iowrite16($p4, $p427, $i430);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $p432 := $load.ref($M.0, $p431);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($p432, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} vslice_dummy_var_79 := rtl818x_ioread8($p4, $p433);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} __const_udelay(8590);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p436 := $load.ref($M.0, $p435);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($add.ref($p436, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i438 := $zext.i16.i32($i22);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i439 := $or.i32($i438, 10);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i440 := $trunc.i32.i16($i439);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} rtl818x_iowrite16($p4, $p437, $i440);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p442 := $load.ref($M.0, $p441);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($p442, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} vslice_dummy_var_80 := rtl818x_ioread8($p4, $p443);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} __const_udelay(8590);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p446 := $load.ref($M.0, $p445);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($p446, $mul.ref(0, 256)), $mul.ref(134, 1));
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $i448 := rtl818x_ioread16($p4, $p447);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i449 := $zext.i16.i32($i448);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i450 := $and.i32($i449, 2);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i451 := $ne.i32($i450, 0);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    assume {:branchcond $i451} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i451 == 1);
    assume {:verifier.code 0} true;
    $i452 := $i391;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $p456 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p457 := $load.ref($M.0, $p456);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($add.ref($p457, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i459 := $zext.i16.i32($i22);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i460 := $or.i32($i459, 8);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i461 := $trunc.i32.i16($i460);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} rtl818x_iowrite16($p4, $p458, $i461);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p462 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $p463 := $load.ref($M.0, $p462);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p464 := $add.ref($add.ref($p463, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} vslice_dummy_var_81 := rtl818x_ioread8($p4, $p464);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} __const_udelay(8590);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p467 := $load.ref($M.0, $p466);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $p468 := $add.ref($add.ref($p467, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i469 := $zext.i16.i32($i22);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i470 := $or.i32($i469, 8);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i471 := $trunc.i32.i16($i470);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} rtl818x_iowrite16($p4, $p468, $i471);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p473 := $load.ref($M.0, $p472);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($add.ref($p473, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} vslice_dummy_var_82 := rtl818x_ioread8($p4, $p474);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} __const_udelay(4295);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $p476 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $p477 := $load.ref($M.0, $p476);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p478 := $add.ref($add.ref($p477, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i479 := $zext.i16.i32($i22);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i480 := $or.i32($i479, 10);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i481 := $trunc.i32.i16($i480);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} rtl818x_iowrite16($p4, $p478, $i481);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p483 := $load.ref($M.0, $p482);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $p484 := $add.ref($add.ref($p483, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} vslice_dummy_var_83 := rtl818x_ioread8($p4, $p484);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} __const_udelay(8590);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p486 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p487 := $load.ref($M.0, $p486);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p488 := $add.ref($add.ref($p487, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i489 := $zext.i16.i32($i22);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i490 := $or.i32($i489, 10);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i491 := $trunc.i32.i16($i490);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} rtl818x_iowrite16($p4, $p488, $i491);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $p492 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $p493 := $load.ref($M.0, $p492);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p494 := $add.ref($add.ref($p493, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} vslice_dummy_var_84 := rtl818x_ioread8($p4, $p494);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} __const_udelay(8590);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $p496 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p497 := $load.ref($M.0, $p496);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p498 := $add.ref($add.ref($p497, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i499 := $zext.i16.i32($i22);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i500 := $or.i32($i499, 10);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i501 := $trunc.i32.i16($i500);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} rtl818x_iowrite16($p4, $p498, $i501);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p502 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p503 := $load.ref($M.0, $p502);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p504 := $add.ref($add.ref($p503, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} vslice_dummy_var_85 := rtl818x_ioread8($p4, $p504);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} __const_udelay(8590);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p507 := $load.ref($M.0, $p506);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($add.ref($p507, $mul.ref(0, 256)), $mul.ref(134, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $i509 := rtl818x_ioread16($p4, $p508);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i510 := $zext.i16.i32($i509);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i511 := $and.i32($i510, 2);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i512 := $ne.i32($i511, 0);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    assume {:branchcond $i512} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i512 == 1);
    assume {:verifier.code 0} true;
    $i513 := $i452;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $p518 := $load.ref($M.0, $p517);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p519 := $add.ref($add.ref($p518, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i520 := $zext.i16.i32($i22);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i521 := $or.i32($i520, 8);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i522 := $trunc.i32.i16($i521);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} rtl818x_iowrite16($p4, $p519, $i522);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $p524 := $load.ref($M.0, $p523);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($add.ref($p524, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} vslice_dummy_var_86 := rtl818x_ioread8($p4, $p525);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} __const_udelay(8590);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p527 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $p528 := $load.ref($M.0, $p527);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($p528, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i530 := $zext.i16.i32($i22);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i531 := $or.i32($i530, 8);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i532 := $trunc.i32.i16($i531);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} rtl818x_iowrite16($p4, $p529, $i532);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $p533 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p534 := $load.ref($M.0, $p533);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p535 := $add.ref($add.ref($p534, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} vslice_dummy_var_87 := rtl818x_ioread8($p4, $p535);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} __const_udelay(4295);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p538 := $load.ref($M.0, $p537);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p539 := $add.ref($add.ref($p538, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i540 := $zext.i16.i32($i22);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i541 := $or.i32($i540, 10);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i542 := $trunc.i32.i16($i541);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} rtl818x_iowrite16($p4, $p539, $i542);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p544 := $load.ref($M.0, $p543);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($add.ref($p544, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} vslice_dummy_var_88 := rtl818x_ioread8($p4, $p545);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} __const_udelay(8590);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $p548 := $load.ref($M.0, $p547);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($p548, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i550 := $zext.i16.i32($i22);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i551 := $or.i32($i550, 10);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i552 := $trunc.i32.i16($i551);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} rtl818x_iowrite16($p4, $p549, $i552);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p553 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $p554 := $load.ref($M.0, $p553);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $p555 := $add.ref($add.ref($p554, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} vslice_dummy_var_89 := rtl818x_ioread8($p4, $p555);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} __const_udelay(8590);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p557 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $p558 := $load.ref($M.0, $p557);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p559 := $add.ref($add.ref($p558, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i560 := $zext.i16.i32($i22);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i561 := $or.i32($i560, 10);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i562 := $trunc.i32.i16($i561);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} rtl818x_iowrite16($p4, $p559, $i562);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p563 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p564 := $load.ref($M.0, $p563);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p565 := $add.ref($add.ref($p564, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} vslice_dummy_var_90 := rtl818x_ioread8($p4, $p565);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} __const_udelay(8590);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p567 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p568 := $load.ref($M.0, $p567);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($add.ref($p568, $mul.ref(0, 256)), $mul.ref(134, 1));
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $i570 := rtl818x_ioread16($p4, $p569);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i571 := $zext.i16.i32($i570);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i572 := $and.i32($i571, 2);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i573 := $ne.i32($i572, 0);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    assume {:branchcond $i573} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i573 == 1);
    assume {:verifier.code 0} true;
    $i574 := $i513;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $p578 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p579 := $load.ref($M.0, $p578);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $p580 := $add.ref($add.ref($p579, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i581 := $zext.i16.i32($i22);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i582 := $or.i32($i581, 8);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i583 := $trunc.i32.i16($i582);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} rtl818x_iowrite16($p4, $p580, $i583);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $p584 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $p585 := $load.ref($M.0, $p584);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p586 := $add.ref($add.ref($p585, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} vslice_dummy_var_91 := rtl818x_ioread8($p4, $p586);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} __const_udelay(8590);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p588 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $p589 := $load.ref($M.0, $p588);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p590 := $add.ref($add.ref($p589, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i591 := $zext.i16.i32($i22);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i592 := $or.i32($i591, 8);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i593 := $trunc.i32.i16($i592);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} rtl818x_iowrite16($p4, $p590, $i593);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p594 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $p595 := $load.ref($M.0, $p594);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $p596 := $add.ref($add.ref($p595, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} vslice_dummy_var_92 := rtl818x_ioread8($p4, $p596);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} __const_udelay(4295);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p598 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p599 := $load.ref($M.0, $p598);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p600 := $add.ref($add.ref($p599, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i601 := $zext.i16.i32($i22);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i602 := $or.i32($i601, 10);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i603 := $trunc.i32.i16($i602);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} rtl818x_iowrite16($p4, $p600, $i603);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $p604 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p605 := $load.ref($M.0, $p604);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $p606 := $add.ref($add.ref($p605, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} vslice_dummy_var_93 := rtl818x_ioread8($p4, $p606);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} __const_udelay(8590);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $p608 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $p609 := $load.ref($M.0, $p608);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p610 := $add.ref($add.ref($p609, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i611 := $zext.i16.i32($i22);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i612 := $or.i32($i611, 10);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i613 := $trunc.i32.i16($i612);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} rtl818x_iowrite16($p4, $p610, $i613);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p614 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p615 := $load.ref($M.0, $p614);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $p616 := $add.ref($add.ref($p615, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} vslice_dummy_var_94 := rtl818x_ioread8($p4, $p616);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} __const_udelay(8590);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $p618 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p619 := $load.ref($M.0, $p618);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p620 := $add.ref($add.ref($p619, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i621 := $zext.i16.i32($i22);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i622 := $or.i32($i621, 10);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i623 := $trunc.i32.i16($i622);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} rtl818x_iowrite16($p4, $p620, $i623);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p624 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p625 := $load.ref($M.0, $p624);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $p626 := $add.ref($add.ref($p625, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} vslice_dummy_var_95 := rtl818x_ioread8($p4, $p626);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} __const_udelay(8590);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p628 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p629 := $load.ref($M.0, $p628);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p630 := $add.ref($add.ref($p629, $mul.ref(0, 256)), $mul.ref(134, 1));
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $i631 := rtl818x_ioread16($p4, $p630);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i632 := $zext.i16.i32($i631);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i633 := $and.i32($i632, 2);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i634 := $ne.i32($i633, 0);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i634} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i634 == 1);
    assume {:verifier.code 0} true;
    $i635 := $i574;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $p639 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p640 := $load.ref($M.0, $p639);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($add.ref($p640, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i642 := $zext.i16.i32($i22);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i643 := $or.i32($i642, 8);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i644 := $trunc.i32.i16($i643);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} rtl818x_iowrite16($p4, $p641, $i644);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p645 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $p646 := $load.ref($M.0, $p645);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p647 := $add.ref($add.ref($p646, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} vslice_dummy_var_96 := rtl818x_ioread8($p4, $p647);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} __const_udelay(8590);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p649 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p650 := $load.ref($M.0, $p649);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p651 := $add.ref($add.ref($p650, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i652 := $zext.i16.i32($i22);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i653 := $or.i32($i652, 8);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i654 := $trunc.i32.i16($i653);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} rtl818x_iowrite16($p4, $p651, $i654);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p655 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p656 := $load.ref($M.0, $p655);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $p657 := $add.ref($add.ref($p656, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} vslice_dummy_var_97 := rtl818x_ioread8($p4, $p657);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} __const_udelay(4295);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p659 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p660 := $load.ref($M.0, $p659);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p661 := $add.ref($add.ref($p660, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i662 := $zext.i16.i32($i22);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i663 := $or.i32($i662, 10);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i664 := $trunc.i32.i16($i663);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} rtl818x_iowrite16($p4, $p661, $i664);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p665 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p666 := $load.ref($M.0, $p665);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p667 := $add.ref($add.ref($p666, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} vslice_dummy_var_98 := rtl818x_ioread8($p4, $p667);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} __const_udelay(8590);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $p669 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $p670 := $load.ref($M.0, $p669);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p671 := $add.ref($add.ref($p670, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i672 := $zext.i16.i32($i22);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i673 := $or.i32($i672, 10);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i674 := $trunc.i32.i16($i673);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} rtl818x_iowrite16($p4, $p671, $i674);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p675 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p676 := $load.ref($M.0, $p675);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p677 := $add.ref($add.ref($p676, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} vslice_dummy_var_99 := rtl818x_ioread8($p4, $p677);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} __const_udelay(8590);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p679 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p680 := $load.ref($M.0, $p679);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p681 := $add.ref($add.ref($p680, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i682 := $zext.i16.i32($i22);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i683 := $or.i32($i682, 10);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i684 := $trunc.i32.i16($i683);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} rtl818x_iowrite16($p4, $p681, $i684);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p685 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p686 := $load.ref($M.0, $p685);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p687 := $add.ref($add.ref($p686, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} vslice_dummy_var_100 := rtl818x_ioread8($p4, $p687);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} __const_udelay(8590);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p689 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $p690 := $load.ref($M.0, $p689);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p691 := $add.ref($add.ref($p690, $mul.ref(0, 256)), $mul.ref(134, 1));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $i692 := rtl818x_ioread16($p4, $p691);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i693 := $zext.i16.i32($i692);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $i694 := $and.i32($i693, 2);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i695 := $ne.i32($i694, 0);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i695} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i695 == 1);
    assume {:verifier.code 0} true;
    $i696 := $i635;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p700 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $p701 := $load.ref($M.0, $p700);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p702 := $add.ref($add.ref($p701, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i703 := $zext.i16.i32($i22);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i704 := $or.i32($i703, 8);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i705 := $trunc.i32.i16($i704);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} rtl818x_iowrite16($p4, $p702, $i705);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $p706 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p707 := $load.ref($M.0, $p706);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p708 := $add.ref($add.ref($p707, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} vslice_dummy_var_101 := rtl818x_ioread8($p4, $p708);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} __const_udelay(8590);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p710 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $p711 := $load.ref($M.0, $p710);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $p712 := $add.ref($add.ref($p711, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i713 := $zext.i16.i32($i22);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i714 := $or.i32($i713, 8);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i715 := $trunc.i32.i16($i714);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} rtl818x_iowrite16($p4, $p712, $i715);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p716 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $p717 := $load.ref($M.0, $p716);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p718 := $add.ref($add.ref($p717, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} vslice_dummy_var_102 := rtl818x_ioread8($p4, $p718);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} __const_udelay(4295);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $p720 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $p721 := $load.ref($M.0, $p720);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p722 := $add.ref($add.ref($p721, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i723 := $zext.i16.i32($i22);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i724 := $or.i32($i723, 10);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i725 := $trunc.i32.i16($i724);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} rtl818x_iowrite16($p4, $p722, $i725);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $p726 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $p727 := $load.ref($M.0, $p726);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p728 := $add.ref($add.ref($p727, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} vslice_dummy_var_103 := rtl818x_ioread8($p4, $p728);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} __const_udelay(8590);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p730 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p731 := $load.ref($M.0, $p730);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p732 := $add.ref($add.ref($p731, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i733 := $zext.i16.i32($i22);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i734 := $or.i32($i733, 10);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i735 := $trunc.i32.i16($i734);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} rtl818x_iowrite16($p4, $p732, $i735);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p736 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $p737 := $load.ref($M.0, $p736);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $p738 := $add.ref($add.ref($p737, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} vslice_dummy_var_104 := rtl818x_ioread8($p4, $p738);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} __const_udelay(8590);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p740 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $p741 := $load.ref($M.0, $p740);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $p742 := $add.ref($add.ref($p741, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i743 := $zext.i16.i32($i22);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i744 := $or.i32($i743, 10);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i745 := $trunc.i32.i16($i744);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} rtl818x_iowrite16($p4, $p742, $i745);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $p746 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $p747 := $load.ref($M.0, $p746);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p748 := $add.ref($add.ref($p747, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} vslice_dummy_var_105 := rtl818x_ioread8($p4, $p748);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} __const_udelay(8590);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p750 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p751 := $load.ref($M.0, $p750);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p752 := $add.ref($add.ref($p751, $mul.ref(0, 256)), $mul.ref(134, 1));
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $i753 := rtl818x_ioread16($p4, $p752);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i754 := $zext.i16.i32($i753);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i755 := $and.i32($i754, 2);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i756 := $ne.i32($i755, 0);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i756} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i756 == 1);
    assume {:verifier.code 0} true;
    $i757 := $i696;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p761 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p762 := $load.ref($M.0, $p761);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p763 := $add.ref($add.ref($p762, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i764 := $zext.i16.i32($i22);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i765 := $or.i32($i764, 8);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i766 := $trunc.i32.i16($i765);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} rtl818x_iowrite16($p4, $p763, $i766);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p767 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p768 := $load.ref($M.0, $p767);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p769 := $add.ref($add.ref($p768, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} vslice_dummy_var_106 := rtl818x_ioread8($p4, $p769);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} __const_udelay(8590);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p771 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p772 := $load.ref($M.0, $p771);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $p773 := $add.ref($add.ref($p772, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i774 := $zext.i16.i32($i22);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i775 := $or.i32($i774, 8);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i776 := $trunc.i32.i16($i775);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} rtl818x_iowrite16($p4, $p773, $i776);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $p777 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $p778 := $load.ref($M.0, $p777);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p779 := $add.ref($add.ref($p778, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} vslice_dummy_var_107 := rtl818x_ioread8($p4, $p779);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} __const_udelay(4295);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $p781 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p782 := $load.ref($M.0, $p781);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $p783 := $add.ref($add.ref($p782, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i784 := $zext.i16.i32($i22);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i785 := $or.i32($i784, 10);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i786 := $trunc.i32.i16($i785);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} rtl818x_iowrite16($p4, $p783, $i786);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $p787 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p788 := $load.ref($M.0, $p787);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p789 := $add.ref($add.ref($p788, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} vslice_dummy_var_108 := rtl818x_ioread8($p4, $p789);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} __const_udelay(8590);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p791 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $p792 := $load.ref($M.0, $p791);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p793 := $add.ref($add.ref($p792, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $i794 := $zext.i16.i32($i22);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i795 := $or.i32($i794, 10);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i796 := $trunc.i32.i16($i795);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} rtl818x_iowrite16($p4, $p793, $i796);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p797 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p798 := $load.ref($M.0, $p797);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p799 := $add.ref($add.ref($p798, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} vslice_dummy_var_109 := rtl818x_ioread8($p4, $p799);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} __const_udelay(8590);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p801 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p802 := $load.ref($M.0, $p801);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $p803 := $add.ref($add.ref($p802, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i804 := $zext.i16.i32($i22);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i805 := $or.i32($i804, 10);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i806 := $trunc.i32.i16($i805);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} rtl818x_iowrite16($p4, $p803, $i806);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $p807 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p808 := $load.ref($M.0, $p807);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p809 := $add.ref($add.ref($p808, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} vslice_dummy_var_110 := rtl818x_ioread8($p4, $p809);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} __const_udelay(8590);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p811 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p812 := $load.ref($M.0, $p811);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p813 := $add.ref($add.ref($p812, $mul.ref(0, 256)), $mul.ref(134, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} $i814 := rtl818x_ioread16($p4, $p813);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i815 := $zext.i16.i32($i814);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i816 := $and.i32($i815, 2);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i817 := $ne.i32($i816, 0);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i817} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i817 == 1);
    assume {:verifier.code 0} true;
    $i818 := $i757;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p822 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p823 := $load.ref($M.0, $p822);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p824 := $add.ref($add.ref($p823, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i825 := $zext.i16.i32($i22);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i826 := $or.i32($i825, 8);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i827 := $trunc.i32.i16($i826);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} rtl818x_iowrite16($p4, $p824, $i827);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p828 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p829 := $load.ref($M.0, $p828);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p830 := $add.ref($add.ref($p829, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} vslice_dummy_var_111 := rtl818x_ioread8($p4, $p830);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} __const_udelay(8590);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p832 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p833 := $load.ref($M.0, $p832);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $p834 := $add.ref($add.ref($p833, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i835 := $zext.i16.i32($i22);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i836 := $or.i32($i835, 8);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i837 := $trunc.i32.i16($i836);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} rtl818x_iowrite16($p4, $p834, $i837);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p838 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p839 := $load.ref($M.0, $p838);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p840 := $add.ref($add.ref($p839, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} vslice_dummy_var_112 := rtl818x_ioread8($p4, $p840);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} __const_udelay(4295);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p842 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p843 := $load.ref($M.0, $p842);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p844 := $add.ref($add.ref($p843, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i845 := $zext.i16.i32($i22);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i846 := $or.i32($i845, 10);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i847 := $trunc.i32.i16($i846);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} rtl818x_iowrite16($p4, $p844, $i847);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $p848 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p849 := $load.ref($M.0, $p848);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $p850 := $add.ref($add.ref($p849, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} vslice_dummy_var_113 := rtl818x_ioread8($p4, $p850);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} __const_udelay(8590);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $p852 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p853 := $load.ref($M.0, $p852);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p854 := $add.ref($add.ref($p853, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i855 := $zext.i16.i32($i22);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i856 := $or.i32($i855, 10);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i857 := $trunc.i32.i16($i856);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} rtl818x_iowrite16($p4, $p854, $i857);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p858 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $p859 := $load.ref($M.0, $p858);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p860 := $add.ref($add.ref($p859, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} vslice_dummy_var_114 := rtl818x_ioread8($p4, $p860);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} __const_udelay(8590);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p862 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p863 := $load.ref($M.0, $p862);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p864 := $add.ref($add.ref($p863, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i865 := $zext.i16.i32($i22);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i866 := $or.i32($i865, 10);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i867 := $trunc.i32.i16($i866);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} rtl818x_iowrite16($p4, $p864, $i867);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $p868 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p869 := $load.ref($M.0, $p868);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $p870 := $add.ref($add.ref($p869, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} vslice_dummy_var_115 := rtl818x_ioread8($p4, $p870);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} __const_udelay(8590);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p872 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p873 := $load.ref($M.0, $p872);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p874 := $add.ref($add.ref($p873, $mul.ref(0, 256)), $mul.ref(134, 1));
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $i875 := rtl818x_ioread16($p4, $p874);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i876 := $zext.i16.i32($i875);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i877 := $and.i32($i876, 2);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i878 := $ne.i32($i877, 0);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i878} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i878 == 1);
    assume {:verifier.code 0} true;
    $i221 := $i818;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $p882 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $p883 := $load.ref($M.0, $p882);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p884 := $add.ref($add.ref($p883, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i885 := $zext.i16.i32($i22);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i886 := $or.i32($i885, 8);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i887 := $trunc.i32.i16($i886);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} rtl818x_iowrite16($p4, $p884, $i887);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p888 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p889 := $load.ref($M.0, $p888);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p890 := $add.ref($add.ref($p889, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} vslice_dummy_var_116 := rtl818x_ioread8($p4, $p890);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} __const_udelay(8590);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p199 := $load.ref($M.0, $p198);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p199, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i201 := $zext.i16.i32($i22);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i202 := $or.i32($i201, 12);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i203 := $trunc.i32.i16($i202);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} rtl818x_iowrite16($p4, $p200, $i203);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.0, $p204);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p205, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} vslice_dummy_var_65 := rtl818x_ioread8($p4, $p206);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} __const_udelay(8590);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p209 := $load.ref($M.0, $p208);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p209, $mul.ref(0, 256)), $mul.ref(130, 1));
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i211 := $zext.i16.i32($i12);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i212 := $trunc.i32.i16($i211);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} rtl818x_iowrite16($p4, $p210, $i212);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p214 := $load.ref($M.0, $p213);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p214, $mul.ref(0, 256)), $mul.ref(132, 1));
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i216 := $zext.i16.i32($i19);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i217 := $trunc.i32.i16($i216);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} rtl818x_iowrite16($p4, $p215, $i217);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $p219 := $load.ref($M.0, $p218);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p219, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} rtl818x_iowrite16($p4, $p220, 928);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $r := $i221;
    return;

  $bb58:
    assume $i878 == 1;
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i879 := $sext.i16.i32($i818);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i880 := $or.i32(1, $i879);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i881 := $trunc.i32.i16($i880);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i221 := $i881;
    goto $bb60;

  $bb54:
    assume $i817 == 1;
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i819 := $sext.i16.i32($i757);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i820 := $or.i32(2, $i819);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i821 := $trunc.i32.i16($i820);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i818 := $i821;
    goto $bb56;

  $bb50:
    assume $i756 == 1;
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i758 := $sext.i16.i32($i696);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i759 := $or.i32(4, $i758);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i760 := $trunc.i32.i16($i759);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i757 := $i760;
    goto $bb52;

  $bb46:
    assume $i695 == 1;
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i697 := $sext.i16.i32($i635);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i698 := $or.i32(8, $i697);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i699 := $trunc.i32.i16($i698);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i696 := $i699;
    goto $bb48;

  $bb42:
    assume $i634 == 1;
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i636 := $sext.i16.i32($i574);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i637 := $or.i32(16, $i636);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i638 := $trunc.i32.i16($i637);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i635 := $i638;
    goto $bb44;

  $bb38:
    assume $i573 == 1;
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i575 := $sext.i16.i32($i513);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i576 := $or.i32(32, $i575);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i577 := $trunc.i32.i16($i576);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i574 := $i577;
    goto $bb40;

  $bb34:
    assume $i512 == 1;
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i514 := $sext.i16.i32($i452);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i515 := $or.i32(64, $i514);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i516 := $trunc.i32.i16($i515);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i513 := $i516;
    goto $bb36;

  $bb30:
    assume $i451 == 1;
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i453 := $sext.i16.i32($i391);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i454 := $or.i32(128, $i453);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i455 := $trunc.i32.i16($i454);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i452 := $i455;
    goto $bb32;

  $bb26:
    assume $i390 == 1;
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i392 := $sext.i16.i32($i330);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i393 := $or.i32(256, $i392);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i394 := $trunc.i32.i16($i393);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i391 := $i394;
    goto $bb28;

  $bb22:
    assume $i329 == 1;
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i331 := $sext.i16.i32($i269);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i332 := $or.i32(512, $i331);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i333 := $trunc.i32.i16($i332);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i330 := $i333;
    goto $bb24;

  $bb18:
    assume $i268 == 1;
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i270 := $sext.i16.i32($i187);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i271 := $or.i32(1024, $i270);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i272 := $trunc.i32.i16($i271);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i269 := $i272;
    goto $bb20;

  $bb13:
    assume $i186 == 1;
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i187 := 2048;
    goto $bb15;

  $bb85:
    assume 0 == 1;
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $p1066 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $p1067 := $load.ref($M.0, $p1066);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p1068 := $add.ref($add.ref($p1067, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i1069 := $zext.i16.i32($i1036);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i1070 := $trunc.i32.i16($i1069);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} rtl818x_iowrite16($p4, $p1068, $i1070);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p1071 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $p1072 := $load.ref($M.0, $p1071);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p1073 := $add.ref($add.ref($p1072, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} vslice_dummy_var_132 := rtl818x_ioread8($p4, $p1073);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} __const_udelay(4295);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb82:
    assume 1 == 1;
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $p1037 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $p1038 := $load.ref($M.0, $p1037);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $p1039 := $add.ref($add.ref($p1038, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i1040 := $zext.i16.i32($i1036);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i1041 := $trunc.i32.i16($i1040);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} rtl818x_iowrite16($p4, $p1039, $i1041);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $p1042 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p1043 := $load.ref($M.0, $p1042);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $p1044 := $add.ref($add.ref($p1043, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} vslice_dummy_var_129 := rtl818x_ioread8($p4, $p1044);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} __const_udelay(4295);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb78:
    assume 1 == 1;
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p1021 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p1022 := $load.ref($M.0, $p1021);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p1023 := $add.ref($add.ref($p1022, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i1024 := $zext.i16.i32($i991);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i1025 := $trunc.i32.i16($i1024);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} rtl818x_iowrite16($p4, $p1023, $i1025);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $p1026 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $p1027 := $load.ref($M.0, $p1026);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $p1028 := $add.ref($add.ref($p1027, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} vslice_dummy_var_128 := rtl818x_ioread8($p4, $p1028);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} __const_udelay(4295);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb75:
    assume 0 == 1;
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $p992 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p993 := $load.ref($M.0, $p992);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $p994 := $add.ref($add.ref($p993, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i995 := $zext.i16.i32($i991);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i996 := $trunc.i32.i16($i995);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} rtl818x_iowrite16($p4, $p994, $i996);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $p997 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p998 := $load.ref($M.0, $p997);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $p999 := $add.ref($add.ref($p998, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} vslice_dummy_var_125 := rtl818x_ioread8($p4, $p999);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} __const_udelay(4295);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb71:
    assume 0 == 1;
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $p975 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $p976 := $load.ref($M.0, $p975);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $p977 := $add.ref($add.ref($p976, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i978 := $zext.i16.i32($i945);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i979 := $trunc.i32.i16($i978);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} rtl818x_iowrite16($p4, $p977, $i979);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $p980 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $p981 := $load.ref($M.0, $p980);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $p982 := $add.ref($add.ref($p981, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} vslice_dummy_var_124 := rtl818x_ioread8($p4, $p982);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} __const_udelay(4295);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb68:
    assume 1 == 1;
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p946 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p947 := $load.ref($M.0, $p946);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p948 := $add.ref($add.ref($p947, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i949 := $zext.i16.i32($i945);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i950 := $trunc.i32.i16($i949);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} rtl818x_iowrite16($p4, $p948, $i950);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p951 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p952 := $load.ref($M.0, $p951);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p953 := $add.ref($add.ref($p952, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} vslice_dummy_var_121 := rtl818x_ioread8($p4, $p953);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} __const_udelay(4295);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb64:
    assume 1 == 1;
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p929 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $p930 := $load.ref($M.0, $p929);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p931 := $add.ref($add.ref($p930, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i932 := $zext.i16.i32($i899);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i933 := $trunc.i32.i16($i932);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} rtl818x_iowrite16($p4, $p931, $i933);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $p934 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $p935 := $load.ref($M.0, $p934);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $p936 := $add.ref($add.ref($p935, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} vslice_dummy_var_120 := rtl818x_ioread8($p4, $p936);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} __const_udelay(4295);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb61:
    assume 0 == 1;
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p900 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $p901 := $load.ref($M.0, $p900);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p902 := $add.ref($add.ref($p901, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i903 := $zext.i16.i32($i899);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i904 := $trunc.i32.i16($i903);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} rtl818x_iowrite16($p4, $p902, $i904);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p905 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $p906 := $load.ref($M.0, $p905);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $p907 := $add.ref($add.ref($p906, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} vslice_dummy_var_117 := rtl818x_ioread8($p4, $p907);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} __const_udelay(4295);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb6:
    assume 0 == 1;
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i61);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i16($i94);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} rtl818x_iowrite16($p4, $p93, $i95);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} vslice_dummy_var_51 := rtl818x_ioread8($p4, $p98);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} __const_udelay(4295);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume 1 == 1;
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i61);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i16($i65);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} rtl818x_iowrite16($p4, $p64, $i66);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} vslice_dummy_var_48 := rtl818x_ioread8($p4, $p69);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} __const_udelay(4295);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const rtl818x_ioread16: ref;

axiom rtl818x_ioread16 == $sub.ref(0, 244202);

procedure rtl818x_ioread16($p0: ref, $p1: ref) returns ($r: i16);
  free requires assertsPassed;



implementation rtl818x_ioread16($p0: ref, $p1: ref) returns ($r: i16)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $i3 := ioread16($p2);
    call {:si_unique_call 803} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i16($i3);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 245234);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    return;
}



const ioread16: ref;

axiom ioread16 == $sub.ref(0, 246266);

procedure ioread16($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ioread16($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 1} true;
    call {:si_unique_call 805} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 806} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const iowrite16: ref;

axiom iowrite16 == $sub.ref(0, 247298);

procedure iowrite16($i0: i16, $p1: ref);
  free requires assertsPassed;



implementation iowrite16($i0: i16, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} {:cexpr "iowrite16:arg:arg0"} boogie_si_record_i16($i0);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    return;
}



const rtl8180_eeprom_register_read: ref;

axiom rtl8180_eeprom_register_read == $sub.ref(0, 248330);

procedure rtl8180_eeprom_register_read($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8180_eeprom_register_read($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i8;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $i7 := rtl818x_ioread8($p3, $p6);
    call {:si_unique_call 809} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i8 := $sext.i8.i32($i7);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 2);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(29, 1));
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i10);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i12 := $sext.i8.i32($i7);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 1);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(30, 1));
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i14);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i16 := $sext.i8.i32($i7);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 4);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(31, 1));
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i18);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i20 := $sext.i8.i32($i7);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 8);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i22);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    return;
}



const rtl8180_eeprom_register_write: ref;

axiom rtl8180_eeprom_register_write == $sub.ref(0, 249362);

procedure rtl8180_eeprom_register_write($p0: ref);
  free requires assertsPassed;



implementation rtl8180_eeprom_register_write($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $i11: i8;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $i19: i8;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i8;
  var $i27: i8;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i8;
  var $i35: i8;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i8;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var vslice_dummy_var_133: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(29, 1));
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i6 := $sext.i8.i32($i5);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i11 := $sub.i8(0, 128);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(30, 1));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i14 := $sext.i8.i32($i13);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i19 := $i11;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(31, 1));
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i22 := $sext.i8.i32($i21);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i27 := $i19;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i30 := $sext.i8.i32($i29);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i35 := $i27;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i35);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} rtl818x_iowrite8($p3, $p38, $i40);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} vslice_dummy_var_133 := rtl818x_ioread8($p3, $p43);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} __const_udelay(42950);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i31 == 1;
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i27);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i32, 8);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    call {:si_unique_call 813} {:cexpr "reg"} boogie_si_record_i8($i34);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb12;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i19);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i24, 4);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    call {:si_unique_call 812} {:cexpr "reg"} boogie_si_record_i8($i26);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb9;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i11);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i16, 1);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    call {:si_unique_call 811} {:cexpr "reg"} boogie_si_record_i8($i18);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($sub.i8(0, 128));
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i8, 2);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    call {:si_unique_call 810} {:cexpr "reg"} boogie_si_record_i8($i10);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const eeprom_93cx6_read: ref;

axiom eeprom_93cx6_read == $sub.ref(0, 250394);

procedure eeprom_93cx6_read($p0: ref, $i1: i8, $p2: ref);
  free requires assertsPassed;



implementation eeprom_93cx6_read($p0: ref, $i1: i8, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} {:cexpr "eeprom_93cx6_read:arg:arg1"} boogie_si_record_i8($i1);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    return;
}



const eeprom_93cx6_multiread: ref;

axiom eeprom_93cx6_multiread == $sub.ref(0, 251426);

procedure eeprom_93cx6_multiread($p0: ref, $i1: i8, $p2: ref, $i3: i16);
  free requires assertsPassed;



implementation eeprom_93cx6_multiread($p0: ref, $i1: i8, $p2: ref, $i3: i16)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} {:cexpr "eeprom_93cx6_multiread:arg:arg1"} boogie_si_record_i8($i1);
    call {:si_unique_call 819} {:cexpr "eeprom_93cx6_multiread:arg:arg3"} boogie_si_record_i16($i3);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    return;
}



const ioread32: ref;

axiom ioread32 == $sub.ref(0, 252458);

procedure ioread32($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ioread32($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 1} true;
    call {:si_unique_call 820} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 821} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 253490);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 1} true;
    call {:si_unique_call 822} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 823} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 254522);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    return;
}



const set_wiphy_dev: ref;

axiom set_wiphy_dev == $sub.ref(0, 255554);

procedure set_wiphy_dev($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation set_wiphy_dev($p0: ref, $p1: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1776)), $mul.ref(264, 1)), $mul.ref(0, 1));
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p1);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    return;
}



const ieee80211_alloc_hw: ref;

axiom ieee80211_alloc_hw == $sub.ref(0, 256586);

procedure ieee80211_alloc_hw($i0: i64, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_alloc_hw($i0: i64, $p1: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} {:cexpr "ieee80211_alloc_hw:arg:priv_data_len"} boogie_si_record_i64($i0);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $p2 := ieee80211_alloc_hw_nm($i0, $p1, $0.ref);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_initialize_ieee80211_ops_11: ref;

axiom ldv_initialize_ieee80211_ops_11 == $sub.ref(0, 257618);

procedure ldv_initialize_ieee80211_ops_11();
  free requires assertsPassed;
  modifies $M.7, $M.0, $CurrAddr;



implementation ldv_initialize_ieee80211_ops_11()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $p0 := ldv_init_zalloc(160);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $M.7 := $p0;
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 258650);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $p1 := calloc(1, $i0);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 1} true;
    call {:si_unique_call 829} __VERIFIER_assume($i4);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ieee80211_alloc_hw_nm: ref;

axiom ieee80211_alloc_hw_nm == $sub.ref(0, 259682);

procedure ieee80211_alloc_hw_nm($i0: i64, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_alloc_hw_nm($i0: i64, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} {:cexpr "ieee80211_alloc_hw_nm:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $p3 := external_alloc();
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const dma_set_coherent_mask: ref;

axiom dma_set_coherent_mask == $sub.ref(0, 260714);

procedure dma_set_coherent_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation dma_set_coherent_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} {:cexpr "dma_set_coherent_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $i2 := dma_supported($p0, $i1);
    call {:si_unique_call 834} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1168, 1));
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p5, $i1);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 5);
    goto $bb3;
}



const dma_supported: ref;

axiom dma_supported == $sub.ref(0, 261746);

procedure dma_supported($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_supported($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 835} {:cexpr "dma_supported:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 1} true;
    call {:si_unique_call 836} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 837} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dma_set_mask: ref;

axiom dma_set_mask == $sub.ref(0, 262778);

procedure dma_set_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_set_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 838} {:cexpr "dma_set_mask:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 1} true;
    call {:si_unique_call 839} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 840} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 263810);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(16, 1));
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} $p9 := kobject_name($p8);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 264842);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const rtl8180_tx: ref;

axiom rtl8180_tx == $sub.ref(0, 265874);

procedure rtl8180_tx($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.41;



implementation rtl8180_tx($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p51: ref;
  var $i52: i16;
  var $i53: i16;
  var $i54: i8;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i64;
  var $i70: i16;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $i79: i16;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i64;
  var $i88: i16;
  var $i89: i32;
  var $i90: i16;
  var $i71: i32;
  var $i72: i16;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $p100: ref;
  var $i101: i16;
  var $i102: i32;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $p107: ref;
  var $i108: i16;
  var $i109: i32;
  var $i110: i32;
  var $i111: i32;
  var $i112: i32;
  var $i113: i16;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i32;
  var $i118: i32;
  var $p119: ref;
  var $i120: i16;
  var $i121: i32;
  var $i122: i32;
  var $i123: i32;
  var $i124: i32;
  var $i125: i1;
  var $i126: i32;
  var $i127: i32;
  var $i128: i16;
  var $i129: i16;
  var $i130: i16;
  var $p131: ref;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i32;
  var $i139: i64;
  var $i140: i16;
  var $p141: ref;
  var $i142: i16;
  var $i143: i32;
  var $i144: i32;
  var $i145: i32;
  var $i146: i16;
  var $i147: i16;
  var $p148: ref;
  var $i149: i32;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $i153: i32;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $i157: i16;
  var $i158: i32;
  var $i159: i32;
  var $i160: i16;
  var $p161: ref;
  var $p162: ref;
  var $i163: i16;
  var $i164: i32;
  var $i165: i32;
  var $i166: i16;
  var $p167: ref;
  var $p168: ref;
  var $i169: i16;
  var $i170: i32;
  var $p171: ref;
  var $i172: i16;
  var $i173: i32;
  var $i174: i32;
  var $i175: i16;
  var $p176: ref;
  var $p177: ref;
  var $i178: i32;
  var $p179: ref;
  var $i180: i32;
  var $i181: i32;
  var $p182: ref;
  var $i183: i32;
  var $i184: i32;
  var $p185: ref;
  var $p186: ref;
  var $i187: i64;
  var $p189: ref;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $i196: i32;
  var $i197: i16;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $i203: i32;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $i208: i32;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p216: ref;
  var $i217: i8;
  var $i218: i8;
  var $i219: i32;
  var $i220: i32;
  var $i221: i8;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $i226: i32;
  var $p227: ref;
  var $i228: i32;
  var $i229: i32;
  var $i230: i1;
  var $p231: ref;
  var $p232: ref;
  var $i233: i32;
  var $i234: i1;
  var $i235: i64;
  var $p236: ref;
  var $i237: i32;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $i241: i32;
  var $i242: i8;
  var $i243: i32;
  var $i244: i8;
  var $i245: i64;
  var $p246: ref;
  var $i247: i32;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $i251: i32;
  var $i252: i8;
  var $i253: i32;
  var $i254: i32;
  var $i255: i8;
  var $i256: i32;
  var $i257: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $p3 := IEEE80211_SKB_CB($p2);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $i10 := skb_get_queue_mapping($p2);
    call {:si_unique_call 844} {:cexpr "tmp___0"} boogie_si_record_i16($i10);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    call {:si_unique_call 845} {:cexpr "prio"} boogie_si_record_i32($i11);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref(0, 2192)), $mul.ref(392, 1));
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i11);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p9, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $i23 := pci_map_single($p17, $p19, $i22, 1);
    call {:si_unique_call 847} {:cexpr "mapping"} boogie_si_record_i64($i23);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p9, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $i26 := pci_dma_mapping_error($p25, $i23);
    call {:si_unique_call 849} {:cexpr "tmp___1"} boogie_si_record_i32($i26);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $p31 := ieee80211_get_tx_rate($p0, $p3);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i35 := $shl.i32($i34, 24);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i35, $i37);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i38, $sub.i32(0, 1342177280));
    call {:si_unique_call 853} {:cexpr "tx_flags"} boogie_si_record_i32($i39);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p9, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i44 := $i39;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($add.ref($p48, $mul.ref(0, 18)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p51);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i53 := $and.i16($i52, 2047);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i16.i8($i53);
    call {:si_unique_call 855} {:cexpr "rc_flags"} boogie_si_record_i8($i54);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i55, 1);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i57 == 1);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i54);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i73, 2);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i89, $i90 := $i44, 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i71, $i72 := $i89, $i90;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p9, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 0);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i130 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p9, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.0, $p131);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i132, 2);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    $i147 := 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} ldv_spin_lock();
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.0, $p148);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i150 := $and.i32($i149, 2);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i151 := $ne.i32($i150, 0);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p13, $mul.ref($i14, 120)), $mul.ref(24, 1));
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $i178 := skb_queue_len($p177);
    call {:si_unique_call 878} {:cexpr "tmp___9"} boogie_si_record_i32($i178);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p13, $mul.ref($i14, 120)), $mul.ref(16, 1));
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i180 := $load.i32($M.0, $p179);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i181 := $add.i32($i180, $i178);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p13, $mul.ref($i14, 120)), $mul.ref(20, 1));
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i183 := $load.i32($M.0, $p182);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i184 := $urem.i32($i181, $i183);
    call {:si_unique_call 879} {:cexpr "idx"} boogie_si_record_i32($i184);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p13, $mul.ref($i14, 120)), $mul.ref(0, 1));
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.0, $p185);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i187 := $zext.i32.i64($i184);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p9, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i190 := $load.i32($M.0, $p189);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i190, 2);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i191 == 1);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.0, $p202);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p186, $mul.ref($i187, 32)), $mul.ref(12, 1));
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p205 := $bitcast.ref.ref($p204);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p205, $i203);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p186, $mul.ref($i187, 32)), $mul.ref(4, 1));
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p206, $i72);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p186, $mul.ref($i187, 32)), $mul.ref(6, 1));
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p207, $i130);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i208 := $trunc.i64.i32($i23);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p186, $mul.ref($i187, 32)), $mul.ref(8, 1));
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p209, $i208);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p211 := $bitcast.ref.ref($p210);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p211, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $p213 := $bitcast.ref.ref($p212);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($add.ref($p213, $mul.ref(0, 18)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i217 := $load.i8($M.0, $p216);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i218 := $and.i8($i217, 31);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i219 := $zext.i8.i32($i218);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i220 := $add.i32($i219, 255);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i221 := $trunc.i32.i8($i220);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p186, $mul.ref($i187, 32)), $mul.ref(21, 1));
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p222, $i221);
    call {:si_unique_call 880} devirtbounce(0);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p186, $mul.ref($i187, 32)), $mul.ref(0, 1));
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p223, $i71);
    call {:si_unique_call 881} devirtbounce(0);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p13, $mul.ref($i14, 120)), $mul.ref(24, 1));
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} __skb_queue_tail($p224, $p2);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p13, $mul.ref($i14, 120)), $mul.ref(24, 1));
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $i226 := skb_queue_len($p225);
    call {:si_unique_call 884} {:cexpr "tmp___10"} boogie_si_record_i32($i226);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p13, $mul.ref($i14, 120)), $mul.ref(20, 1));
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i228 := $load.i32($M.0, $p227);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i229 := $sub.i32($i228, $i226);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i230 := $ule.i32($i229, 1);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i230} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p9, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} spin_unlock_irqrestore($p231, $u0);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p9, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i233 := $load.i32($M.0, $p232);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i234 := $eq.i32($i233, 2);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i234 == 1);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i245 := $zext.i32.i64($i11);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref(rtl8180_queues_map, $mul.ref(0, 8)), $mul.ref($i245, 4));
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i247 := $load.i32($M.18, $p246);
    call {:si_unique_call 889} {:cexpr "hw_prio"} boogie_si_record_i32($i247);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p9, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $p249 := $load.ref($M.0, $p248);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p249, $mul.ref(0, 256)), $mul.ref(217, 1));
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i251 := $shl.i32(1, $i247);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i252 := $trunc.i32.i8($i251);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i253 := $sext.i8.i32($i252);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i254 := $or.i32($i253, 6);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i255 := $trunc.i32.i8($i254);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $i256 := $zext.i8.i32($i255);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i257 := $trunc.i32.i8($i256);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} rtl818x_iowrite8($p9, $p250, $i257);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb35:
    assume $i234 == 1;
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i235 := $zext.i32.i64($i11);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref(rtl8187se_queues_map, $mul.ref(0, 20)), $mul.ref($i235, 4));
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i237 := $load.i32($M.17, $p236);
    call {:si_unique_call 887} {:cexpr "hw_prio"} boogie_si_record_i32($i237);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p9, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.0, $p238);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p239, $mul.ref(0, 256)), $mul.ref(217, 1));
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i241 := $shl.i32(1, $i237);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i242 := $trunc.i32.i8($i241);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i243 := $zext.i8.i32($i242);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i244 := $trunc.i32.i8($i243);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} rtl818x_iowrite8($p9, $p240, $i244);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i230 == 1;
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} ieee80211_stop_queue($p0, $i11);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i191 == 1;
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p186, $mul.ref($i187, 32)), $mul.ref(12, 1));
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p193 := $bitcast.ref.ref($p192);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p193, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p194, $i147);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i196 := $load.i32($M.0, $p195);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i197 := $trunc.i32.i16($i196);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p186, $mul.ref($i187, 32)), $mul.ref(12, 1));
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $p199 := $bitcast.ref.ref($p198);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p199, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p200, $i197);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p186, $mul.ref($i187, 32)), $mul.ref(28, 1));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p201, 16);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb23:
    assume $i151 == 1;
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.0, $p152);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i154 := $and.i32($i153, 16);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i155 := $ne.i32($i154, 0);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p6, $mul.ref(0, 30)), $mul.ref(22, 1));
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i163 := $load.i16($M.0, $p162);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i164 := $zext.i16.i32($i163);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i165 := $and.i32($i164, 15);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i166 := $trunc.i32.i16($i165);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p6, $mul.ref(0, 30)), $mul.ref(22, 1));
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p167, $i166);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p6, $mul.ref(0, 30)), $mul.ref(22, 1));
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i169 := $load.i16($M.0, $p168);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i170 := $zext.i16.i32($i169);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p9, $mul.ref(0, 2192)), $mul.ref(2186, 1));
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i172 := $load.i16($M.0, $p171);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i173 := $zext.i16.i32($i172);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i174 := $or.i32($i170, $i173);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i175 := $trunc.i32.i16($i174);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p6, $mul.ref(0, 30)), $mul.ref(22, 1));
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p176, $i175);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i155 == 1;
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p9, $mul.ref(0, 2192)), $mul.ref(2186, 1));
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i157 := $load.i16($M.0, $p156);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i158 := $zext.i16.i32($i157);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $i159 := $add.i32($i158, 16);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i32.i16($i159);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p9, $mul.ref(0, 2192)), $mul.ref(2186, 1));
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p161, $i160);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb20:
    assume $i133 == 1;
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $p134 := ieee80211_get_tx_rate($p0, $p3);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p9, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p135);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.0, $p137);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i139 := $zext.i32.i64($i138);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $i140 := ieee80211_generic_frame_duration($p0, $p136, 0, $i139, $p134);
    call {:si_unique_call 874} {:cexpr "duration"} boogie_si_record_i16($i140);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p9, $mul.ref(0, 2192)), $mul.ref(2158, 1));
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i142 := $load.i16($M.0, $p141);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i143 := $zext.i16.i32($i142);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i144 := $zext.i16.i32($i140);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i145 := $add.i32($i143, $i144);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i146 := $trunc.i32.i16($i145);
    call {:si_unique_call 875} {:cexpr "frame_duration"} boogie_si_record_i16($i146);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i147 := $i146;
    goto $bb22;

  $bb14:
    assume $i93 == 1;
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $p94 := ieee80211_get_tx_rate($p0, $p3);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $p95 := ieee80211_get_tx_rate($p0, $p3);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i98 := $add.i32($i97, 4);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i99 := $mul.i32($i98, 16);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p94, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i101 := $load.i16($M.0, $p100);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i102 := $zext.i16.i32($i101);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i103 := $mul.i32($i102, 2);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i104 := $sdiv.i32($i103, 10);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i105 := $add.i32($i99, $i104);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i106 := $sub.i32($i105, 1);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p95, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i108 := $load.i16($M.0, $p107);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i109 := $zext.i16.i32($i108);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i110 := $mul.i32($i109, 2);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i111 := $sdiv.i32($i110, 10);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i112 := $udiv.i32($i106, $i111);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i32.i16($i112);
    call {:si_unique_call 868} {:cexpr "plcp_len"} boogie_si_record_i16($i113);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $p114 := ieee80211_get_tx_rate($p0, $p3);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p115);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i117 := $add.i32($i116, 4);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i118 := $mul.i32($i117, 16);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p114, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i120 := $load.i16($M.0, $p119);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i121 := $zext.i16.i32($i120);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i122 := $mul.i32($i121, 2);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i123 := $sdiv.i32($i122, 10);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i124 := $urem.i32($i118, $i123);
    call {:si_unique_call 870} {:cexpr "remainder"} boogie_si_record_i32($i124);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i125 := $ule.i32($i124, 6);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    $i129 := $i113;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i130 := $i129;
    goto $bb19;

  $bb16:
    assume $i125 == 1;
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i126 := $zext.i16.i32($i113);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i127 := $or.i32($i126, 32768);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i32.i16($i127);
    call {:si_unique_call 871} {:cexpr "plcp_len"} boogie_si_record_i16($i128);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i129 := $i128;
    goto $bb18;

  $bb11:
    assume $i75 == 1;
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i76 := $or.i32($i44, 8650752);
    call {:si_unique_call 861} {:cexpr "tx_flags"} boogie_si_record_i32($i76);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $p77 := ieee80211_get_rts_cts_rate($p0, $p3);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i79 := $load.i16($M.0, $p78);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i80 := $zext.i16.i32($i79);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i81 := $shl.i32($i80, 19);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i82 := $or.i32($i81, $i76);
    call {:si_unique_call 863} {:cexpr "tx_flags"} boogie_si_record_i32($i82);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p9, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i87 := $zext.i32.i64($i86);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $i88 := ieee80211_ctstoself_duration($p0, $p84, $i87, $p3);
    call {:si_unique_call 865} {:cexpr "rts_duration"} boogie_si_record_i16($i88);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i89, $i90 := $i82, $i88;
    goto $bb13;

  $bb8:
    assume $i57 == 1;
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i58 := $or.i32($i44, 8388608);
    call {:si_unique_call 856} {:cexpr "tx_flags"} boogie_si_record_i32($i58);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $p59 := ieee80211_get_rts_cts_rate($p0, $p3);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.0, $p60);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i63 := $shl.i32($i62, 19);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i64 := $or.i32($i63, $i58);
    call {:si_unique_call 858} {:cexpr "tx_flags"} boogie_si_record_i32($i64);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p9, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i69 := $zext.i32.i64($i68);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $i70 := ieee80211_rts_duration($p0, $p66, $i69, $p3);
    call {:si_unique_call 860} {:cexpr "rts_duration"} boogie_si_record_i16($i70);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i71, $i72 := $i64, $i70;
    goto $bb10;

  $bb5:
    assume $i42 == 1;
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i43 := $or.i32($i39, 1073774592);
    call {:si_unique_call 854} {:cexpr "tx_flags"} boogie_si_record_i32($i43);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb7;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} kfree_skb($p2);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p9, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} dev_err.ref.ref($p30, .str.21);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rtl8180_start: ref;

axiom rtl8180_start == $sub.ref(0, 266906);

procedure rtl8180_start($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.28, $M.36, $M.27, $M.30, $M.37, $M.29, $M.32, $M.38, $M.31, $M.34, $M.39, $M.33, $CurrAddr, $M.8, $M.41, $M.51, assertsPassed, $M.20, $M.19, $M.22, $M.21, $M.24, $M.23, $M.26, $M.25;



implementation rtl8180_start($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i13: i32;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i8: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i29: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i16;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i32;
  var $p69: ref;
  var $i70: i16;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i32;
  var $i77: i32;
  var $i76: i32;
  var $i58: i32;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $i97: i8;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i8;
  var $i102: i32;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i8;
  var $i110: i32;
  var $i111: i8;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i32;
  var $i120: i32;
  var $p121: ref;
  var $i122: i32;
  var $i123: i1;
  var $i124: i32;
  var $i125: i32;
  var $p126: ref;
  var $i127: i32;
  var $i128: i1;
  var $i129: i32;
  var $i131: i32;
  var $i130: i32;
  var $i132: i32;
  var $i133: i32;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i8;
  var $i141: i32;
  var $i142: i32;
  var $i143: i32;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $i147: i8;
  var $i148: i32;
  var $i149: i8;
  var $i12: i32;
  var $p150: ref;
  var $i152: i64;
  var $p155: ref;
  var $p156: ref;
  var $i157: i64;
  var $i158: i1;
  var $i159: i32;
  var $i160: i16;
  var $i161: i32;
  var $i162: i32;
  var $i163: i1;
  var $i151: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} $i4 := rtl8180_init_rx_ring($p0);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 892} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb5;

  $bb5:
    call $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i17, $i8 := rtl8180_start_loop_$bb5($p0, $p7, $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i17, $i8);
    goto $bb5_last;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $i9 := rtl8180_init_tx_ring($p0, $i8, 16);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 894} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i8, 1);
    call {:si_unique_call 896} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p7);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 1);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i32($i16, $i13);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $i18 := rtl8180_init_hw($p0);
    call {:si_unique_call 898} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i22 == 1);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p0);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $i35 := ldv_request_irq_43($i33, rtl8180_interrupt, 128, .str.11, $p34);
    call {:si_unique_call 902} {:cexpr "ret"} boogie_si_record_i32($i35);
    assume {:verifier.code 0} true;
    $i29 := $i35;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i29, 0);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} rtl8180_int_enable($p0);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 2);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 1);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i56 == 1);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 0);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i61 == 1);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($sub.i32(0, 1877735670), $sub.i32(0, 1610612737));
    call {:si_unique_call 911} {:cexpr "reg"} boogie_si_record_i32($i77);
    assume {:verifier.code 0} true;
    $i76 := $i77;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i58 := $i76;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2152, 1));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i58);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 256)), $mul.ref(68, 1));
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} rtl818x_iowrite32($p3, $p81, $i58);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p117, $mul.ref(0, 256)), $mul.ref(64, 1));
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $i119 := rtl818x_ioread32($p3, $p118);
    call {:si_unique_call 927} {:cexpr "reg"} boogie_si_record_i32($i119);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i120 := $or.i32($i119, 13107200);
    call {:si_unique_call 928} {:cexpr "reg"} boogie_si_record_i32($i120);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.0, $p121);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 2);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    $i125 := $i120;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.0, $p126);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i128 := $ne.i32($i127, 0);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i128 == 1);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i131 := $and.i32($i125, $sub.i32(0, 1073741825));
    call {:si_unique_call 931} {:cexpr "reg"} boogie_si_record_i32($i131);
    assume {:verifier.code 0} true;
    $i130 := $i131;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i132 := $and.i32($i130, $sub.i32(0, 1048577));
    call {:si_unique_call 932} {:cexpr "reg"} boogie_si_record_i32($i132);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i133 := $and.i32($i132, $sub.i32(0, 16777217));
    call {:si_unique_call 933} {:cexpr "reg"} boogie_si_record_i32($i133);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p135, $mul.ref(0, 256)), $mul.ref(64, 1));
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} rtl818x_iowrite32($p3, $p136, $i133);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p138, $mul.ref(0, 256)), $mul.ref(55, 1));
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $i140 := rtl818x_ioread8($p3, $p139);
    call {:si_unique_call 936} {:cexpr "tmp___1"} boogie_si_record_i8($i140);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $i141 := $zext.i8.i32($i140);
    call {:si_unique_call 937} {:cexpr "reg"} boogie_si_record_i32($i141);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i142 := $or.i32($i141, 8);
    call {:si_unique_call 938} {:cexpr "reg"} boogie_si_record_i32($i142);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i143 := $or.i32($i142, 4);
    call {:si_unique_call 939} {:cexpr "reg"} boogie_si_record_i32($i143);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.0, $p144);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p145, $mul.ref(0, 256)), $mul.ref(55, 1));
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i32.i8($i143);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i148 := $zext.i8.i32($i147);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i149 := $trunc.i32.i8($i148);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} rtl818x_iowrite8($p3, $p146, $i149);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb38:
    assume $i128 == 1;
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $i129 := $and.i32($i125, $sub.i32(0, 536870913));
    call {:si_unique_call 930} {:cexpr "reg"} boogie_si_record_i32($i129);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $i130 := $i129;
    goto $bb40;

  $bb35:
    assume $i123 == 1;
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i124 := $or.i32($i120, 1073741824);
    call {:si_unique_call 929} {:cexpr "reg"} boogie_si_record_i32($i124);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i125 := $i124;
    goto $bb37;

  $bb32:
    assume $i84 == 1;
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 256)), $mul.ref(188, 1));
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} $i88 := rtl818x_ioread8($p3, $p87);
    call {:si_unique_call 913} {:cexpr "tmp"} boogie_si_record_i8($i88);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i88);
    call {:si_unique_call 914} {:cexpr "reg"} boogie_si_record_i32($i89);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, $sub.i32(0, 2));
    call {:si_unique_call 915} {:cexpr "reg"} boogie_si_record_i32($i90);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i91 := $or.i32($i90, 2);
    call {:si_unique_call 916} {:cexpr "reg"} boogie_si_record_i32($i91);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 256)), $mul.ref(188, 1));
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i8($i91);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i8($i96);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} rtl818x_iowrite8($p3, $p94, $i97);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 256)), $mul.ref(156, 1));
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} $i101 := rtl818x_ioread8($p3, $p100);
    call {:si_unique_call 919} {:cexpr "tmp___0"} boogie_si_record_i8($i101);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    call {:si_unique_call 920} {:cexpr "reg"} boogie_si_record_i32($i102);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i102, $sub.i32(0, 2));
    call {:si_unique_call 921} {:cexpr "reg"} boogie_si_record_i32($i103);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i104 := $and.i32($i103, $sub.i32(0, 3));
    call {:si_unique_call 922} {:cexpr "reg"} boogie_si_record_i32($i104);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i105 := $or.i32($i104, 4);
    call {:si_unique_call 923} {:cexpr "reg"} boogie_si_record_i32($i105);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 256)), $mul.ref(156, 1));
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i8($i105);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i8($i110);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} rtl818x_iowrite8($p3, $p108, $i111);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($p114, $mul.ref(236, 1));
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} rtl818x_iowrite8($p3, $p115, 63);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i61 == 1;
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2168, 1));
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i63 := $load.i16($M.0, $p62);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i63);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 4);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i67 := (if $i66 == 1 then 536870912 else 0);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i68 := $or.i32($i67, $sub.i32(0, 1877735670));
    call {:si_unique_call 909} {:cexpr "reg"} boogie_si_record_i32($i68);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2168, 1));
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.0, $p69);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i71, 8);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i74 := (if $i73 == 1 then 1073741824 else 0);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i75 := $or.i32($i74, $i68);
    call {:si_unique_call 910} {:cexpr "reg"} boogie_si_record_i32($i75);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i76 := $i75;
    goto $bb31;

  $bb26:
    assume $i56 == 1;
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i57 := $or.i32($sub.i32(0, 1877735670), 1610612736);
    call {:si_unique_call 907} {:cexpr "reg"} boogie_si_record_i32($i57);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i58 := $i57;
    goto $bb28;

  $bb23:
    assume $i42 == 1;
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 256)), $mul.ref(8, 1));
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} rtl818x_iowrite32($p3, $p47, $sub.i32(0, 1));
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 256)), $mul.ref(8, 1));
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p52, $mul.ref(1, 4));
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} rtl818x_iowrite32($p3, $p53, $sub.i32(0, 1));
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i36 == 1;
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 1776)), $mul.ref(264, 1));
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} dev_err.ref.ref($p39, .str.12);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i12 := $i29;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} rtl8180_free_rx_ring($p0);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i151 := 0;
    goto $bb41;

  $bb41:
    call $i152, $p155, $p156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i151 := rtl8180_start_loop_$bb41($p0, $p3, $p150, $i152, $p155, $p156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i151);
    goto $bb41_last;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i152 := $sext.i32.i64($i151);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(392, 1)), $mul.ref($i152, 120)), $mul.ref(0, 1));
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.0, $p155);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $i157 := $p2i.ref.i64($p156);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $i158 := $ne.i64($i157, 0);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i159 := $add.i32($i151, 1);
    call {:si_unique_call 942} {:cexpr "i"} boogie_si_record_i32($i159);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i160 := $load.i16($M.0, $p150);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i161 := $zext.i16.i32($i160);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i162 := $add.i32($i161, 1);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i163 := $sgt.i32($i162, $i159);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i6 := $i12;
    goto $bb3;

  $bb46:
    assume $i163 == 1;
    assume {:verifier.code 0} true;
    $i151 := $i159;
    goto $bb46_dummy;

  $bb43:
    assume $i158 == 1;
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} rtl8180_free_tx_ring($p0, $i151);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb17:
    assume $i22 == 1;
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p0);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} $i28 := ldv_request_irq_42($i26, rtl8187se_interrupt, 128, .str.11, $p27);
    call {:si_unique_call 900} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb19;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i12 := $i18;
    goto $bb9;

  $bb11:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb11_dummy;

  $bb7:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb9;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb46_dummy:
    assume false;
    return;

  $bb41_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4548;

  $bb11_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4357;
}



const rtl8180_stop: ref;

axiom rtl8180_stop == $sub.ref(0, 267938);

procedure rtl8180_stop($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.41, $M.51, $M.27, $M.29, $M.31, $M.33, $M.20, $M.19, $M.22, $M.21, $M.24, $M.23, $M.26, $M.25, $CurrAddr;



implementation rtl8180_stop($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i8;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $i46: i32;
  var $i47: i16;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $i45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} rtl8180_int_disable($p0);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 256)), $mul.ref(55, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} $i7 := rtl818x_ioread8($p3, $p6);
    call {:si_unique_call 945} {:cexpr "reg"} boogie_si_record_i8($i7);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 251);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    call {:si_unique_call 946} {:cexpr "reg"} boogie_si_record_i8($i10);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 247);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    call {:si_unique_call 947} {:cexpr "reg"} boogie_si_record_i8($i13);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 256)), $mul.ref(55, 1));
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i13);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} rtl818x_iowrite8($p3, $p16, $i18);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(8, 1));
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    call {:si_unique_call 949} devirtbounce.1($p22, $p0);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} rtl818x_iowrite8($p3, $p25, $sub.i8(0, 64));
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 256)), $mul.ref(90, 1));
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} $i29 := rtl818x_ioread8($p3, $p28);
    call {:si_unique_call 952} {:cexpr "reg"} boogie_si_record_i8($i29);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 256)), $mul.ref(90, 1));
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i29);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i33, 128);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} rtl818x_iowrite8($p3, $p32, $i35);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} rtl818x_iowrite8($p3, $p38, 0);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p0);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} ldv_free_irq_44($i42, $p43);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} rtl8180_free_rx_ring($p0);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb1;

  $bb1:
    call $i46, $i47, $i48, $i49, $i50, $i45 := rtl8180_stop_loop_$bb1($p0, $p44, $i46, $i47, $i48, $i49, $i50, $i45);
    goto $bb1_last;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} rtl8180_free_tx_ring($p0, $i45);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i45, 1);
    call {:si_unique_call 958} {:cexpr "i"} boogie_si_record_i32($i46);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i47 := $load.i16($M.0, $p44);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i47);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i48, 1);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i50 := $sgt.i32($i49, $i46);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    return;

  $bb3:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i45 := $i46;
    goto $bb3_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4618;
}



const rtl8180_add_interface: ref;

axiom rtl8180_add_interface == $sub.ref(0, 268970);

procedure rtl8180_add_interface($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rtl8180_add_interface($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p32: ref;
  var $p35: ref;
  var $p38: ref;
  var $p40: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i16;
  var $i69: i32;
  var $i70: i16;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i12: i32;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i14, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 95);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p1);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(304, 1));
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p0);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 240)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} __init_work($p23, 0);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, 137438953408);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p20, $mul.ref(0, 240)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p3);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 963} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p28, $p29, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p20, $mul.ref(0, 240)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} lockdep_init_map($p32, .str.19, $p2, 0);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p20, $mul.ref(0, 240)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} INIT_LIST_HEAD($p35);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p20, $mul.ref(0, 240)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, rtl8180_beacon_work);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 240)), $mul.ref(8, 1)), $mul.ref(80, 1));
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} init_timer_key($p40, 2097152, .str.20, $p4);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p20, $mul.ref(0, 240)), $mul.ref(8, 1)), $mul.ref(80, 1)), $mul.ref(24, 1));
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, delayed_work_timer_fn);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p20, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p20, $mul.ref(0, 240)), $mul.ref(8, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p48, $i45);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p20, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, 0);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} rtl818x_iowrite8($p7, $p52, $sub.i8(0, 64));
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(256, 1));
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} rtl818x_iowrite32($p7, $p56, $i59);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p63, $mul.ref(4, 2));
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(256, 1));
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref(4, 2));
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i68 := $load.i16($M.0, $p67);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i69 := $zext.i16.i32($i68);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i16($i69);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} rtl818x_iowrite16($p7, $p64, $i70);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} rtl818x_iowrite8($p7, $p73, 0);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i14, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb12;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 16);
    goto $bb3;
}



const rtl8180_remove_interface: ref;

axiom rtl8180_remove_interface == $sub.ref(0, 270002);

procedure rtl8180_remove_interface($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8180_remove_interface($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    return;
}



const rtl8180_config: ref;

axiom rtl8180_config == $sub.ref(0, 271034);

procedure rtl8180_config($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.51, $CurrAddr;



implementation rtl8180_config($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} {:cexpr "rtl8180_config:arg:changed"} boogie_si_record_i32($i1);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(8, 1));
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    call {:si_unique_call 972} devirtbounce.2($p9, $p0, $p5);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const rtl8180_bss_info_changed: ref;

axiom rtl8180_bss_info_changed == $sub.ref(0, 272066);

procedure rtl8180_bss_info_changed($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.21, $M.23, $M.25, $M.20, $M.22, $M.24, $M.26;



implementation rtl8180_bss_info_changed($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i16;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i1;
  var $i34: i8;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i8;
  var $i40: i8;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var $i46: i8;
  var $i47: i8;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i8;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i16;
  var $i64: i32;
  var $i65: i32;
  var $i66: i16;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i74: i8;
  var $i75: i1;
  var $p76: ref;
  var $i77: i8;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p82: ref;
  var $i83: i8;
  var $i84: i1;
  var $p86: ref;
  var vslice_dummy_var_134: i1;
  var vslice_dummy_var_135: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} {:cexpr "rtl8180_bss_info_changed:arg:changed"} boogie_si_record_i32($i3);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(304, 1));
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i3, 128);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i3, 32);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i3, 12);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i3, 512);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i78 := $and.i32($i3, 768);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i79 == 1;
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} vslice_dummy_var_134 := ldv_cancel_delayed_work_sync_45($p80);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.0, $p82);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i8.i1($i83);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i84 == 1;
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} vslice_dummy_var_135 := schedule_work($p86);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb26:
    assume $i72 == 1;
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(17, 1));
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.0, $p73);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i8.i1($i74);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i77 := $zext.i1.i8($i75);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p76, $i77);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb16:
    assume $i58 == 1;
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(1888, 1));
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} $i63 := ieee80211_generic_frame_duration($p0, $p60, 0, 10, $p62);
    call {:si_unique_call 982} {:cexpr "tmp___0"} boogie_si_record_i16($i63);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i63);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i64, 65526);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i16($i65);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(2158, 1));
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p67, $i66);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} rtl8180_conf_erp($p0, $p2);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 2);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb18:
    assume $i70 == 1;
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} rtl8187se_conf_ac_parm($p0, 0);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} rtl8187se_conf_ac_parm($p0, 1);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} rtl8187se_conf_ac_parm($p0, 2);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} rtl8187se_conf_ac_parm($p0, 3);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb13:
    assume $i54 == 1;
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(40, 1));
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} rtl8180_conf_basic_rates($p0, $i56);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 256)), $mul.ref(46, 1));
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} rtl818x_iowrite16($p6, $p14, $i20);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 256)), $mul.ref(46, 1));
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(2, 4));
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref(2, 4));
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} rtl818x_iowrite32($p6, $p25, $i30);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} $i33 := is_valid_ether_addr($p32);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i8($i33);
    call {:si_unique_call 977} {:cexpr "tmp"} boogie_si_record_i8($i34);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i34);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 2);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i47 := $i40;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 256)), $mul.ref(88, 1));
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i47);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i51);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} rtl818x_iowrite8($p6, $p50, $i52);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i43 == 1;
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i40);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i45 := $or.i32($i44, 16);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    call {:si_unique_call 978} {:cexpr "reg"} boogie_si_record_i8($i46);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i47 := $i46;
    goto $bb11;

  $bb3:
    assume $i35 == 1;
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 1);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := 8;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb8;

  $bb5:
    assume $i38 == 1;
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i39 := 4;
    goto $bb7;
}



const rtl8180_prepare_multicast: ref;

axiom rtl8180_prepare_multicast == $sub.ref(0, 273098);

procedure rtl8180_prepare_multicast($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rtl8180_prepare_multicast($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const rtl8180_configure_filter: ref;

axiom rtl8180_configure_filter == $sub.ref(0, 274130);

procedure rtl8180_configure_filter($p0: ref, $i1: i32, $p2: ref, $i3: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8180_configure_filter($p0: ref, $i1: i32, $p2: ref, $i3: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} {:cexpr "rtl8180_configure_filter:arg:changed_flags"} boogie_si_record_i32($i1);
    call {:si_unique_call 991} {:cexpr "rtl8180_configure_filter:arg:multicast"} boogie_si_record_i64($i3);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i1, 4);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i1, 32);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i1, 64);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p2);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 2);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i27 == 1);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i3, 0);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(2152, 1));
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, $sub.i32(0, 5));
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(2152, 1));
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(2152, 1));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 32);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(2152, 1));
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 524288);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(2152, 1));
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 1);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(2152, 1));
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 4);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 256)), $mul.ref(68, 1));
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(2152, 1));
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} rtl818x_iowrite32($p6, $p63, $i65);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    return;

  $bb25:
    assume $i58 == 1;
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p2);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i60 := $or.i32($i59, 2);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i60);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i52 == 1;
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p2);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i54 := $or.i32($i53, 64);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i54);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i46 == 1;
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p2);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i47, 32);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i48);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i40 == 1;
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p2);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i41, 4);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i42);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(2152, 1));
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i30, 4);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(2152, 1));
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb11;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(2152, 1));
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i23 := $xor.i32($i22, 1);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(2152, 1));
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(2152, 1));
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i17 := $xor.i32($i16, 524288);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(2152, 1));
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(2152, 1));
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i11 := $xor.i32($i10, 32);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(2152, 1));
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rtl8180_conf_tx: ref;

axiom rtl8180_conf_tx == $sub.ref(0, 275162);

procedure rtl8180_conf_tx($p0: ref, $p1: ref, $i2: i16, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8180_conf_tx($p0: ref, $p1: ref, $i2: i16, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i8;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i8;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i8;
  var $i42: i32;
  var $i43: i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} {:cexpr "rtl8180_conf_tx:arg:queue"} boogie_si_record_i16($i2);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $i13 := fls($i12);
    call {:si_unique_call 995} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    call {:si_unique_call 996} {:cexpr "cw_min"} boogie_si_record_i8($i14);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} $i18 := fls($i17);
    call {:si_unique_call 998} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    call {:si_unique_call 999} {:cexpr "cw_max"} boogie_si_record_i8($i19);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 256)), $mul.ref(189, 1));
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i19);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i36 := $shl.i32($i35, 4);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i36);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i38 := $sext.i8.i32($i37);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $i39 := $sext.i8.i32($i14);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i38, $i39);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i42);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} rtl818x_iowrite8($p6, $p34, $i43);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i2);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(2104, 1)), $mul.ref($i24, 10));
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p3);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 1000} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p27, $p28, 10, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i16.i8($i2);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} rtl8187se_conf_ac_parm($p0, $i31);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rtl8180_get_tsf: ref;

axiom rtl8180_get_tsf == $sub.ref(0, 276194);

procedure rtl8180_get_tsf($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rtl8180_get_tsf($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 256)), $mul.ref(24, 1));
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} $i9 := rtl818x_ioread32($p4, $p8);
    call {:si_unique_call 1004} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 256)), $mul.ref(24, 1));
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(1, 4));
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} $i15 := rtl818x_ioread32($p4, $p14);
    call {:si_unique_call 1006} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i9);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i15);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i18 := $shl.i64($i17, 32);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i19 := $or.i64($i16, $i18);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;
}



const fls: ref;

axiom fls == $sub.ref(0, 277226);

procedure fls($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fls($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} {:cexpr "fls:arg:x"} boogie_si_record_i32($i0);
    call {:si_unique_call 1008} $i1 := devirtbounce.3(0, $i0, $sub.i32(0, 1));
    call {:si_unique_call 1009} {:cexpr "r"} boogie_si_record_i32($i1);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const rtl8187se_conf_ac_parm: ref;

axiom rtl8187se_conf_ac_parm == $sub.ref(0, 278258);

procedure rtl8187se_conf_ac_parm($p0: ref, $i1: i8);
  free requires assertsPassed;



implementation rtl8187se_conf_ac_parm($p0: ref, $i1: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i8;
  var $p28: ref;
  var $i29: i16;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} {:cexpr "rtl8187se_conf_ac_parm:arg:queue"} boogie_si_record_i8($i1);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(2104, 1));
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i64($i1);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref($i7, 10)), $mul.ref(2, 1));
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} $i12 := fls($i11);
    call {:si_unique_call 1012} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    call {:si_unique_call 1013} {:cexpr "cw_min"} boogie_si_record_i8($i13);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref($i7, 10)), $mul.ref(4, 1));
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} $i17 := fls($i16);
    call {:si_unique_call 1015} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    call {:si_unique_call 1016} {:cexpr "cw_max"} boogie_si_record_i8($i18);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref($i7, 10)), $mul.ref(6, 1));
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(2156, 1));
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i25 := $mul.i32($i21, $i24);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 10);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    call {:si_unique_call 1017} {:cexpr "aifs"} boogie_si_record_i8($i27);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref($i7, 10)), $mul.ref(0, 1));
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p28);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i16.i8($i29);
    call {:si_unique_call 1018} {:cexpr "txop"} boogie_si_record_i8($i30);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i32 := $shl.i32($i31, 16);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i18);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i34 := $shl.i32($i33, 12);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i32, $i34);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i13);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i37 := $shl.i32($i36, 8);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i35, $i37);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i27);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i38, $i39);
    call {:si_unique_call 1019} {:cexpr "ac_param"} boogie_si_record_i32($i40);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i41, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i41, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i44 == 1;
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 256)), $mul.ref(252, 1));
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} rtl818x_iowrite32($p4, $p50, $i40);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i43 == 1;
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 256)), $mul.ref(248, 1));
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} rtl818x_iowrite32($p4, $p54, $i40);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i41, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i45 == 1);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 256)), $mul.ref(244, 1));
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} rtl818x_iowrite32($p4, $p58, $i40);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i41, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb8;

  $bb11:
    assume $i46 == 1;
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 256)), $mul.ref(240, 1));
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} rtl818x_iowrite32($p4, $p61, $i40);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const rtl8180_conf_basic_rates: ref;

axiom rtl8180_conf_basic_rates == $sub.ref(0, 279290);

procedure rtl8180_conf_basic_rates($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation rtl8180_conf_basic_rates($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i32;
  var $i27: i16;
  var $i28: i16;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i16;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i16;
  var $i39: i32;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i8;
  var $i44: i32;
  var $i45: i8;
  var $i46: i32;
  var $i47: i32;
  var $i48: i8;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i16;
  var $i54: i32;
  var $i55: i16;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $i63: i8;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i8;
  var $i68: i32;
  var $i69: i8;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i16;
  var $i75: i32;
  var $i76: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} {:cexpr "rtl8180_conf_basic_rates:arg:basic_mask"} boogie_si_record_i32($i1);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    call {:si_unique_call 1025} {:cexpr "rtl8180_conf_basic_rates:arg:resp_mask"} boogie_si_record_i32($i1);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i1, 15);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, $i1);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i13 == 1;
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 256)), $mul.ref(52, 1));
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i16($i8);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i74);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i16($i75);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} rtl818x_iowrite16($p4, $p73, $i76);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} $i39 := fls($i8);
    call {:si_unique_call 1028} {:cexpr "tmp___0"} boogie_si_record_i32($i39);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i41, 255);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i42);
    call {:si_unique_call 1029} {:cexpr "resp_max"} boogie_si_record_i8($i43);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} $i44 := ffs($i8);
    call {:si_unique_call 1031} {:cexpr "tmp___1"} boogie_si_record_i32($i44);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i46, 255);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    call {:si_unique_call 1032} {:cexpr "resp_min"} boogie_si_record_i8($i48);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 256)), $mul.ref(44, 1));
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i1);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i54);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} rtl818x_iowrite16($p4, $p52, $i55);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 256)), $mul.ref(52, 1));
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i43);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i62 := $shl.i32($i61, 4);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i8($i62);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $i64 := $sext.i8.i32($i63);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i65 := $sext.i8.i32($i48);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i66 := $or.i32($i64, $i65);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i8($i66);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i8($i68);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} rtl818x_iowrite8($p4, $p60, $i69);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb5:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb11;

  $bb12:
    assume $i14 == 1;
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} $i15 := fls($i1);
    call {:si_unique_call 1037} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 255);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    call {:si_unique_call 1038} {:cexpr "basic_max"} boogie_si_record_i8($i19);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 256)), $mul.ref(44, 1));
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $i24 := rtl818x_ioread16($p4, $p23);
    call {:si_unique_call 1040} {:cexpr "reg"} boogie_si_record_i16($i24);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 65532);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i26);
    call {:si_unique_call 1041} {:cexpr "reg"} boogie_si_record_i16($i27);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i16($i19);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i27);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i29, $i30);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i31);
    call {:si_unique_call 1042} {:cexpr "reg"} boogie_si_record_i16($i32);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 256)), $mul.ref(44, 1));
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i32);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} rtl818x_iowrite16($p4, $p36, $i38);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i1, 336);
    call {:si_unique_call 1026} {:cexpr "resp_mask"} boogie_si_record_i32($i7);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const ieee80211_generic_frame_duration: ref;

axiom ieee80211_generic_frame_duration == $sub.ref(0, 280322);

procedure ieee80211_generic_frame_duration($p0: ref, $p1: ref, $i2: i32, $i3: i64, $p4: ref) returns ($r: i16);
  free requires assertsPassed;



implementation ieee80211_generic_frame_duration($p0: ref, $p1: ref, $i2: i32, $i3: i64, $p4: ref) returns ($r: i16)
{
  var $i5: i16;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1044} {:cexpr "ieee80211_generic_frame_duration:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1045} {:cexpr "ieee80211_generic_frame_duration:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1046} $i5 := __VERIFIER_nondet_ushort();
    call {:si_unique_call 1047} {:cexpr "smack:ext:__VERIFIER_nondet_ushort"} boogie_si_record_i16($i5);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const rtl8180_conf_erp: ref;

axiom rtl8180_conf_erp == $sub.ref(0, 281354);

procedure rtl8180_conf_erp($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8180_conf_erp($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i8;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i8;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i8;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i8;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i8;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i8;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i8;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 248)), $mul.ref(16, 1));
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(2156, 1));
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 20);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(2156, 1));
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 5);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i19 := $mul.i32($i18, 2);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    call {:si_unique_call 1048} {:cexpr "difs"} boogie_si_record_i8($i20);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 10);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(2158, 1));
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i22, $i25);
    call {:si_unique_call 1049} {:cexpr "eifs"} boogie_si_record_i32($i26);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 3);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i28 := $sdiv.i32($i27, 4);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    call {:si_unique_call 1050} {:cexpr "hw_eifs"} boogie_si_record_i8($i29);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 256)), $mul.ref(182, 1));
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(2156, 1));
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} rtl818x_iowrite8($p4, $p32, $i36);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 256)), $mul.ref(180, 1));
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32(34);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} rtl818x_iowrite8($p4, $p39, $i41);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 256)), $mul.ref(181, 1));
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i20);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} rtl818x_iowrite8($p4, $p44, $i46);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 256)), $mul.ref(121, 1));
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i29);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} rtl818x_iowrite8($p4, $p49, $i51);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 2);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i54 == 1);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 1);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i64 == 1;
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i20);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i66 := $sub.i32($i26, $i65);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i66, 3);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i68 := $sdiv.i32($i67, 4);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i8($i68);
    call {:si_unique_call 1056} {:cexpr "hw_eifs"} boogie_si_record_i8($i69);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 256)), $mul.ref(52, 1));
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i69);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i8($i75);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} rtl818x_iowrite8($p4, $p74, $i76);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i54 == 1;
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 256)), $mul.ref(44, 1));
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i29);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i8($i60);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} rtl818x_iowrite8($p4, $p59, $i61);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(2156, 1));
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 9);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_cancel_delayed_work_sync_45: ref;

axiom ldv_cancel_delayed_work_sync_45 == $sub.ref(0, 282386);

procedure ldv_cancel_delayed_work_sync_45($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.19, $M.21, $M.23, $M.25;



implementation ldv_cancel_delayed_work_sync_45($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $i1 := cancel_delayed_work_sync($p0);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1059} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1060} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} disable_work_3($p5);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 283418);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.20, $M.19, $M.22, $M.21, $M.24, $M.23, $M.26, $M.25;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, system_wq);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $i2 := queue_work($p1, $p0);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1063} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 284450);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.20, $M.19, $M.22, $M.21, $M.24, $M.23, $M.26, $M.25;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} $i2 := ldv_queue_work_on_15(8192, $p0, $p1);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1065} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_queue_work_on_15: ref;

axiom ldv_queue_work_on_15 == $sub.ref(0, 285482);

procedure ldv_queue_work_on_15($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.20, $M.19, $M.22, $M.21, $M.24, $M.23, $M.26, $M.25;



implementation ldv_queue_work_on_15($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} {:cexpr "ldv_queue_work_on_15:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} $i3 := queue_work_on($i0, $p1, $p2);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1068} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 1069} {:cexpr "ldv_func_res"} boogie_si_record_i8($i6);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} activate_work_3($p2, 2);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 286514);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1071} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1072} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1073} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const activate_work_3: ref;

axiom activate_work_3 == $sub.ref(0, 287546);

procedure activate_work_3($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.20, $M.19, $M.22, $M.21, $M.24, $M.23, $M.26, $M.25;



implementation activate_work_3($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} {:cexpr "activate_work_3:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $i2 := $M.19;
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.21;
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.23;
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.25;
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $M.26 := $p0;
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $M.25 := $i1;
    call {:si_unique_call 1078} {:cexpr "ldv_work_3_3"} boogie_si_record_i32($i1);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $M.24 := $p0;
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $M.23 := $i1;
    call {:si_unique_call 1077} {:cexpr "ldv_work_3_2"} boogie_si_record_i32($i1);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $M.22 := $p0;
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $M.21 := $i1;
    call {:si_unique_call 1076} {:cexpr "ldv_work_3_1"} boogie_si_record_i32($i1);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $M.20 := $p0;
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $M.19 := $i1;
    call {:si_unique_call 1075} {:cexpr "ldv_work_3_0"} boogie_si_record_i32($i1);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cancel_delayed_work_sync: ref;

axiom cancel_delayed_work_sync == $sub.ref(0, 288578);

procedure cancel_delayed_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_delayed_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1079} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1080} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_work_3: ref;

axiom disable_work_3 == $sub.ref(0, 289610);

procedure disable_work_3($p0: ref);
  free requires assertsPassed;
  modifies $M.19, $M.21, $M.23, $M.25;



implementation disable_work_3($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i1 := $M.19;
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 3);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i3 := $M.19;
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $M.21;
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 3);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i11 := $M.21;
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i17 := $M.23;
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 3);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i18 == 1);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i19 := $M.23;
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i25 := $M.25;
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 3);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i26 == 1);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i27 := $M.25;
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p29 := $M.26;
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p0);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i30, $i31);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb33;

  $bb34:
    assume $i32 == 1;
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 1084} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(1);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb29;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p21 := $M.24;
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb24;

  $bb25:
    assume $i24 == 1;
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 1083} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(1);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb20;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $M.22;
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i14, $i15);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb15;

  $bb16:
    assume $i16 == 1;
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 1082} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(1);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $M.20;
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i6, $i7);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $M.19 := 1;
    call {:si_unique_call 1081} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(1);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const ffs: ref;

axiom ffs == $sub.ref(0, 290642);

procedure ffs($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ffs($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} {:cexpr "ffs:arg:x"} boogie_si_record_i32($i0);
    call {:si_unique_call 1086} $i1 := devirtbounce.3(0, $i0, $sub.i32(0, 1));
    call {:si_unique_call 1087} {:cexpr "r"} boogie_si_record_i32($i1);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 291674);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 292706);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 293738);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    return;
}



const rtl8180_beacon_work: ref;

axiom rtl8180_beacon_work == $sub.ref(0, 294770);

procedure rtl8180_beacon_work($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.20, $M.19, $M.22, $M.21, $M.24, $M.23, $M.26, $M.25;



implementation rtl8180_beacon_work($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var vslice_dummy_var_136: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 8), 240));
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 296), 304));
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 240)), $mul.ref(0, 1));
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} $i9 := ieee80211_queue_stopped($p8, 0);
    call {:si_unique_call 1091} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} $p11 := ieee80211_beacon_get($p8, $p6);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} $i17 := rtl8180_get_tsf($p8, $p6);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i17);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} skb_set_queue_mapping($p11, 0);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} rtl8180_tx($p8, $0.ref, $p11);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p5, $mul.ref($sub.ref(0, 296), 304)), $mul.ref(8, 1)), $mul.ref(20, 1));
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $i25 := $mul.i32($i24, 1024);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} $i26 := usecs_to_jiffies($i25);
    call {:si_unique_call 1093} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 240)), $mul.ref(8, 1));
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} vslice_dummy_var_136 := schedule_delayed_work($p27, $i26);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const init_timer_key: ref;

axiom init_timer_key == $sub.ref(0, 295802);

procedure init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} {:cexpr "init_timer_key:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    return;
}



const delayed_work_timer_fn: ref;

axiom delayed_work_timer_fn == $sub.ref(0, 296834);

procedure delayed_work_timer_fn($i0: i64);



const ieee80211_queue_stopped: ref;

axiom ieee80211_queue_stopped == $sub.ref(0, 297866);

procedure ieee80211_queue_stopped($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_queue_stopped($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1100} {:cexpr "ieee80211_queue_stopped:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1101} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1102} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ieee80211_beacon_get: ref;

axiom ieee80211_beacon_get == $sub.ref(0, 298898);

procedure ieee80211_beacon_get($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_beacon_get($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} $p2 := ieee80211_beacon_get_tim($p0, $p1, $0.ref, $0.ref);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_set_queue_mapping: ref;

axiom skb_set_queue_mapping == $sub.ref(0, 299930);

procedure skb_set_queue_mapping($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_set_queue_mapping($p0: ref, $i1: i16)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} {:cexpr "skb_set_queue_mapping:arg:queue_mapping"} boogie_si_record_i16($i1);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(140, 1));
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p2, $i1);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    return;
}



const usecs_to_jiffies: ref;

axiom usecs_to_jiffies == $sub.ref(0, 300962);

procedure usecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation usecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} {:cexpr "usecs_to_jiffies:arg:u"} boogie_si_record_i32($i0);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} $i1 := __usecs_to_jiffies($i0);
    call {:si_unique_call 1107} {:cexpr "tmp___1"} boogie_si_record_i64($i1);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const schedule_delayed_work: ref;

axiom schedule_delayed_work == $sub.ref(0, 301994);

procedure schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.20, $M.19, $M.22, $M.21, $M.24, $M.23, $M.26, $M.25;



implementation schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} {:cexpr "schedule_delayed_work:arg:delay"} boogie_si_record_i64($i1);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, system_wq);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} $i3 := queue_delayed_work($p2, $p0, $i1);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1110} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const queue_delayed_work: ref;

axiom queue_delayed_work == $sub.ref(0, 303026);

procedure queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.20, $M.19, $M.22, $M.21, $M.24, $M.23, $M.26, $M.25;



implementation queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} {:cexpr "queue_delayed_work:arg:delay"} boogie_si_record_i64($i2);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} $i3 := ldv_queue_delayed_work_on_16(8192, $p0, $p1, $i2);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1113} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_queue_delayed_work_on_16: ref;

axiom ldv_queue_delayed_work_on_16 == $sub.ref(0, 304058);

procedure ldv_queue_delayed_work_on_16($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.20, $M.19, $M.22, $M.21, $M.24, $M.23, $M.26, $M.25;



implementation ldv_queue_delayed_work_on_16($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i8;
  var $p8: ref;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} {:cexpr "ldv_queue_delayed_work_on_16:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 1115} {:cexpr "ldv_queue_delayed_work_on_16:arg:ldv_func_arg4"} boogie_si_record_i64($i3);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} $i4 := queue_delayed_work_on($i0, $p1, $p2, $i3);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 1117} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 1118} {:cexpr "ldv_func_res"} boogie_si_record_i8($i7);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} activate_work_3($p8, 2);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i7);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const queue_delayed_work_on: ref;

axiom queue_delayed_work_on == $sub.ref(0, 305090);

procedure queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;



implementation queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1120} {:cexpr "queue_delayed_work_on:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1121} {:cexpr "queue_delayed_work_on:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1122} $i4 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1123} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i4);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __usecs_to_jiffies: ref;

axiom __usecs_to_jiffies == $sub.ref(0, 306122);

procedure __usecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation __usecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1124} {:cexpr "__usecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1125} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1126} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ieee80211_beacon_get_tim: ref;

axiom ieee80211_beacon_get_tim == $sub.ref(0, 307154);

procedure ieee80211_beacon_get_tim($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_beacon_get_tim($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} $p4 := external_alloc();
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const rtl8180_int_disable: ref;

axiom rtl8180_int_disable == $sub.ref(0, 308186);

procedure rtl8180_int_disable($p0: ref);
  free requires assertsPassed;



implementation rtl8180_int_disable($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 2);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 256)), $mul.ref(60, 1));
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} rtl818x_iowrite16($p3, $p14, 0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 256)), $mul.ref(108, 1));
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} rtl818x_iowrite32($p3, $p9, 0);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_free_irq_44: ref;

axiom ldv_free_irq_44 == $sub.ref(0, 309218);

procedure ldv_free_irq_44($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.27, $M.29, $M.31, $M.33;



implementation ldv_free_irq_44($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} {:cexpr "ldv_free_irq_44:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} free_irq($i0, $p1);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} disable_suitable_irq_2($i0, $p1);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    return;
}



const rtl8180_free_rx_ring: ref;

axiom rtl8180_free_rx_ring == $sub.ref(0, 310250);

procedure rtl8180_free_rx_ring($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8180_free_rx_ring($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i64;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $i110: i1;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i64;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i64;
  var $p127: ref;
  var $p128: ref;
  var $i129: i64;
  var $i130: i1;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i64;
  var $p137: ref;
  var $p138: ref;
  var $i139: i64;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i64;
  var $p147: ref;
  var $p148: ref;
  var $i149: i64;
  var $i150: i1;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $i155: i64;
  var $p157: ref;
  var $p158: ref;
  var $i159: i64;
  var $i160: i1;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $i165: i64;
  var $p167: ref;
  var $p168: ref;
  var $i169: i64;
  var $i170: i1;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $i175: i64;
  var $p177: ref;
  var $p178: ref;
  var $i179: i64;
  var $i180: i1;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $i185: i64;
  var $p187: ref;
  var $p188: ref;
  var $i189: i64;
  var $i190: i1;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $i195: i64;
  var $p197: ref;
  var $p198: ref;
  var $i199: i64;
  var $i200: i1;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $i205: i64;
  var $p207: ref;
  var $p208: ref;
  var $i209: i64;
  var $i210: i1;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $i215: i64;
  var $p217: ref;
  var $p218: ref;
  var $i219: i64;
  var $i220: i1;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $i225: i64;
  var $p227: ref;
  var $p228: ref;
  var $i229: i64;
  var $i230: i1;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $i235: i64;
  var $p237: ref;
  var $p238: ref;
  var $i239: i64;
  var $i240: i1;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $i245: i64;
  var $p247: ref;
  var $p248: ref;
  var $i249: i64;
  var $i250: i1;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $i255: i64;
  var $p257: ref;
  var $p258: ref;
  var $i259: i64;
  var $i260: i1;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $i265: i64;
  var $p267: ref;
  var $p268: ref;
  var $i269: i64;
  var $i270: i1;
  var $p271: ref;
  var $p272: ref;
  var $p273: ref;
  var $p274: ref;
  var $i275: i64;
  var $p277: ref;
  var $p278: ref;
  var $i279: i64;
  var $i280: i1;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $i285: i64;
  var $p287: ref;
  var $p288: ref;
  var $i289: i64;
  var $i290: i1;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $p294: ref;
  var $i295: i64;
  var $p297: ref;
  var $p298: ref;
  var $i299: i64;
  var $i300: i1;
  var $p301: ref;
  var $p302: ref;
  var $p303: ref;
  var $p304: ref;
  var $i305: i64;
  var $p307: ref;
  var $p308: ref;
  var $i309: i64;
  var $i310: i1;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $p314: ref;
  var $i315: i64;
  var $p317: ref;
  var $p318: ref;
  var $i319: i64;
  var $i320: i1;
  var $p321: ref;
  var $p322: ref;
  var $p323: ref;
  var $p324: ref;
  var $i325: i64;
  var $p327: ref;
  var $p328: ref;
  var $i329: i64;
  var $i330: i1;
  var $p331: ref;
  var $p332: ref;
  var $p333: ref;
  var $p334: ref;
  var $i335: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(0, 8));
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} pci_unmap_single($p10, $i13, 2353, 2);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} kfree_skb($p6);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(1, 8));
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p28, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} pci_unmap_single($p32, $i35, 2353, 2);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} kfree_skb($p28);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(2, 8));
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p38, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} pci_unmap_single($p42, $i45, 2353, 2);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} kfree_skb($p38);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(3, 8));
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p48, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.0, $p54);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} pci_unmap_single($p52, $i55, 2353, 2);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} kfree_skb($p48);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(4, 8));
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i60 := $eq.i64($i59, 0);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p58, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.0, $p64);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} pci_unmap_single($p62, $i65, 2353, 2);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} kfree_skb($p58);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(5, 8));
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $i70 := $eq.i64($i69, 0);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p68, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.0, $p74);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} pci_unmap_single($p72, $i75, 2353, 2);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} kfree_skb($p68);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(6, 8));
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $i80 := $eq.i64($i79, 0);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p78, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $i85 := $load.i64($M.0, $p84);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} pci_unmap_single($p82, $i85, 2353, 2);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} kfree_skb($p78);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(7, 8));
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $i90 := $eq.i64($i89, 0);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p88, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $i95 := $load.i64($M.0, $p94);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} pci_unmap_single($p92, $i95, 2353, 2);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} kfree_skb($p88);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(8, 8));
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p98);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i100 := $eq.i64($i99, 0);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p98, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i105 := $load.i64($M.0, $p104);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} pci_unmap_single($p102, $i105, 2353, 2);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} kfree_skb($p98);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(9, 8));
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i109 := $p2i.ref.i64($p108);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $i110 := $eq.i64($i109, 0);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p108, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $i115 := $load.i64($M.0, $p114);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} pci_unmap_single($p112, $i115, 2353, 2);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} kfree_skb($p108);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(10, 8));
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p118);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i120 := $eq.i64($i119, 0);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p118, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i125 := $load.i64($M.0, $p124);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} pci_unmap_single($p122, $i125, 2353, 2);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} kfree_skb($p118);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(11, 8));
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $i129 := $p2i.ref.i64($p128);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i130 := $eq.i64($i129, 0);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p128, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p133);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $i135 := $load.i64($M.0, $p134);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} pci_unmap_single($p132, $i135, 2353, 2);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} kfree_skb($p128);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(12, 8));
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i139 := $p2i.ref.i64($p138);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $i140 := $eq.i64($i139, 0);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.0, $p141);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p138, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p143);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i145 := $load.i64($M.0, $p144);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} pci_unmap_single($p142, $i145, 2353, 2);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} kfree_skb($p138);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(13, 8));
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.0, $p147);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i149 := $p2i.ref.i64($p148);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $i150 := $eq.i64($i149, 0);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i150} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.0, $p151);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p148, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p153);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i155 := $load.i64($M.0, $p154);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} pci_unmap_single($p152, $i155, 2353, 2);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} kfree_skb($p148);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(14, 8));
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.0, $p157);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $i159 := $p2i.ref.i64($p158);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $i160 := $eq.i64($i159, 0);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.0, $p161);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p158, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $p164 := $bitcast.ref.ref($p163);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $i165 := $load.i64($M.0, $p164);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} pci_unmap_single($p162, $i165, 2353, 2);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} kfree_skb($p158);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(15, 8));
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.0, $p167);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $i169 := $p2i.ref.i64($p168);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $i170 := $eq.i64($i169, 0);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.0, $p171);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p168, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $p174 := $bitcast.ref.ref($p173);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $i175 := $load.i64($M.0, $p174);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} pci_unmap_single($p172, $i175, 2353, 2);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} kfree_skb($p168);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(16, 8));
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $p178 := $load.ref($M.0, $p177);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $i179 := $p2i.ref.i64($p178);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $i180 := $eq.i64($i179, 0);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $p182 := $load.ref($M.0, $p181);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p178, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $p184 := $bitcast.ref.ref($p183);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i185 := $load.i64($M.0, $p184);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} pci_unmap_single($p182, $i185, 2353, 2);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} kfree_skb($p178);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(17, 8));
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.0, $p187);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $i189 := $p2i.ref.i64($p188);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i190 := $eq.i64($i189, 0);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    assume {:branchcond $i190} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.0, $p191);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p188, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $p194 := $bitcast.ref.ref($p193);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $i195 := $load.i64($M.0, $p194);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} pci_unmap_single($p192, $i195, 2353, 2);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} kfree_skb($p188);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(18, 8));
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.0, $p197);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i199 := $p2i.ref.i64($p198);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $i200 := $eq.i64($i199, 0);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $p202 := $load.ref($M.0, $p201);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p198, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $p204 := $bitcast.ref.ref($p203);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i205 := $load.i64($M.0, $p204);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} pci_unmap_single($p202, $i205, 2353, 2);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} kfree_skb($p198);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(19, 8));
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.0, $p207);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $i209 := $p2i.ref.i64($p208);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $i210 := $eq.i64($i209, 0);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    assume {:branchcond $i210} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p208, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $p214 := $bitcast.ref.ref($p213);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i215 := $load.i64($M.0, $p214);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} pci_unmap_single($p212, $i215, 2353, 2);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} kfree_skb($p208);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(20, 8));
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $i219 := $p2i.ref.i64($p218);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $i220 := $eq.i64($i219, 0);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    assume {:branchcond $i220} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p218, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $p224 := $bitcast.ref.ref($p223);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i225 := $load.i64($M.0, $p224);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} pci_unmap_single($p222, $i225, 2353, 2);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} kfree_skb($p218);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(21, 8));
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $p228 := $load.ref($M.0, $p227);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i229 := $p2i.ref.i64($p228);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $i230 := $eq.i64($i229, 0);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i230} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $p232 := $load.ref($M.0, $p231);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p228, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $p234 := $bitcast.ref.ref($p233);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $i235 := $load.i64($M.0, $p234);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} pci_unmap_single($p232, $i235, 2353, 2);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} kfree_skb($p228);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(22, 8));
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $p238 := $load.ref($M.0, $p237);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i239 := $p2i.ref.i64($p238);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i240 := $eq.i64($i239, 0);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    assume {:branchcond $i240} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p242 := $load.ref($M.0, $p241);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p238, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $p244 := $bitcast.ref.ref($p243);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i245 := $load.i64($M.0, $p244);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} pci_unmap_single($p242, $i245, 2353, 2);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} kfree_skb($p238);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(23, 8));
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $p248 := $load.ref($M.0, $p247);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i249 := $p2i.ref.i64($p248);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i250 := $eq.i64($i249, 0);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i250} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $p252 := $load.ref($M.0, $p251);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p248, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $p254 := $bitcast.ref.ref($p253);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i255 := $load.i64($M.0, $p254);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} pci_unmap_single($p252, $i255, 2353, 2);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} kfree_skb($p248);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(24, 8));
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $p258 := $load.ref($M.0, $p257);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i259 := $p2i.ref.i64($p258);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $i260 := $eq.i64($i259, 0);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $p262 := $load.ref($M.0, $p261);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p258, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $p264 := $bitcast.ref.ref($p263);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $i265 := $load.i64($M.0, $p264);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} pci_unmap_single($p262, $i265, 2353, 2);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} kfree_skb($p258);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(25, 8));
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $p268 := $load.ref($M.0, $p267);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $i269 := $p2i.ref.i64($p268);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i270 := $eq.i64($i269, 0);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $p272 := $load.ref($M.0, $p271);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p268, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $p274 := $bitcast.ref.ref($p273);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $i275 := $load.i64($M.0, $p274);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} pci_unmap_single($p272, $i275, 2353, 2);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} kfree_skb($p268);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(26, 8));
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $p278 := $load.ref($M.0, $p277);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $i279 := $p2i.ref.i64($p278);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $i280 := $eq.i64($i279, 0);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i280} true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $p282 := $load.ref($M.0, $p281);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p278, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $p284 := $bitcast.ref.ref($p283);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $i285 := $load.i64($M.0, $p284);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} pci_unmap_single($p282, $i285, 2353, 2);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} kfree_skb($p278);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(27, 8));
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $p288 := $load.ref($M.0, $p287);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $i289 := $p2i.ref.i64($p288);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $i290 := $eq.i64($i289, 0);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    assume {:branchcond $i290} true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $p292 := $load.ref($M.0, $p291);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p288, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $p294 := $bitcast.ref.ref($p293);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $i295 := $load.i64($M.0, $p294);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} pci_unmap_single($p292, $i295, 2353, 2);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} kfree_skb($p288);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(28, 8));
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $p298 := $load.ref($M.0, $p297);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i299 := $p2i.ref.i64($p298);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i300 := $eq.i64($i299, 0);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    assume {:branchcond $i300} true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $p302 := $load.ref($M.0, $p301);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p298, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $p304 := $bitcast.ref.ref($p303);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $i305 := $load.i64($M.0, $p304);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} pci_unmap_single($p302, $i305, 2353, 2);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} kfree_skb($p298);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(29, 8));
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $p308 := $load.ref($M.0, $p307);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $i309 := $p2i.ref.i64($p308);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i310 := $eq.i64($i309, 0);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i310} true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $p312 := $load.ref($M.0, $p311);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p308, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $p314 := $bitcast.ref.ref($p313);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i315 := $load.i64($M.0, $p314);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} pci_unmap_single($p312, $i315, 2353, 2);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} kfree_skb($p308);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(30, 8));
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $p318 := $load.ref($M.0, $p317);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i319 := $p2i.ref.i64($p318);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $i320 := $eq.i64($i319, 0);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    assume {:branchcond $i320} true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $p322 := $load.ref($M.0, $p321);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($p318, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $p324 := $bitcast.ref.ref($p323);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i325 := $load.i64($M.0, $p324);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} pci_unmap_single($p322, $i325, 2353, 2);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} kfree_skb($p318);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(31, 8));
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $p328 := $load.ref($M.0, $p327);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $i329 := $p2i.ref.i64($p328);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $i330 := $eq.i64($i329, 0);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i330} true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $p332 := $load.ref($M.0, $p331);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p328, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $p334 := $bitcast.ref.ref($p333);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i335 := $load.i64($M.0, $p334);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} pci_unmap_single($p332, $i335, 2353, 2);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} kfree_skb($p328);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i19 := $mul.i32($i18, 32);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(120, 1));
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} pci_free_consistent($p15, $i20, $p22, $i24);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $0.ref);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    return;

  $bb159:
    assume $i330 == 1;
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb154:
    assume $i320 == 1;
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb149:
    assume $i310 == 1;
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb144:
    assume $i300 == 1;
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb139:
    assume $i290 == 1;
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb134:
    assume $i280 == 1;
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb129:
    assume $i270 == 1;
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb124:
    assume $i260 == 1;
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb119:
    assume $i250 == 1;
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb114:
    assume $i240 == 1;
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb109:
    assume $i230 == 1;
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb104:
    assume $i220 == 1;
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb99:
    assume $i210 == 1;
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb94:
    assume $i200 == 1;
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb89:
    assume $i190 == 1;
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb84:
    assume $i180 == 1;
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb79:
    assume $i170 == 1;
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb74:
    assume $i160 == 1;
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb69:
    assume $i150 == 1;
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb64:
    assume $i140 == 1;
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb59:
    assume $i130 == 1;
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb54:
    assume $i120 == 1;
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb49:
    assume $i110 == 1;
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb44:
    assume $i100 == 1;
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb39:
    assume $i90 == 1;
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb34:
    assume $i80 == 1;
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb29:
    assume $i70 == 1;
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb24:
    assume $i60 == 1;
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume $i50 == 1;
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i40 == 1;
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb9:
    assume $i30 == 1;
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const rtl8180_free_tx_ring: ref;

axiom rtl8180_free_tx_ring == $sub.ref(0, 311282);

procedure rtl8180_free_tx_ring($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8180_free_tx_ring($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} {:cexpr "rtl8180_free_tx_ring:arg:prio"} boogie_si_record_i32($i1);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(392, 1));
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i1);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref($i7, 120)), $mul.ref(24, 1));
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} $i10 := skb_queue_len($p9);
    call {:si_unique_call 1200} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p6, $mul.ref($i7, 120)), $mul.ref(20, 1));
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i41 := $zext.i32.i64($i40);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i42 := $mul.i64($i41, 32);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref($i7, 120)), $mul.ref(0, 1));
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref($i7, 120)), $mul.ref(8, 1));
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} pci_free_consistent($p38, $i42, $p45, $i47);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p6, $mul.ref($i7, 120)), $mul.ref(0, 1));
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $0.ref);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p12, $p13, $p14, $i15, $i16, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $p25, $i26, $i27, $p28, $i29, $i30, $p31, $i32, $i33, $p34, $i35, $i36 := rtl8180_free_tx_ring_loop_$bb4($p4, $p6, $i7, $p9, $p12, $p13, $p14, $i15, $i16, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $p25, $i26, $i27, $p28, $i29, $i30, $p31, $i32, $i33, $p34, $i35, $i36);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref($i7, 120)), $mul.ref(0, 1));
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref($i7, 120)), $mul.ref(16, 1));
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref($i7, 120)), $mul.ref(24, 1));
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} $p19 := __skb_dequeue($p18);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p13, $mul.ref($i16, 32)), $mul.ref(8, 1));
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i23);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p19, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} pci_unmap_single($p21, $i24, $i27, 1);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} kfree_skb($p19);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref($i7, 120)), $mul.ref(16, 1));
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, 1);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref($i7, 120)), $mul.ref(20, 1));
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $i33 := $urem.i32($i30, $i32);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref($i7, 120)), $mul.ref(16, 1));
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i33);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} $i35 := skb_queue_len($p9);
    call {:si_unique_call 1205} {:cexpr "tmp___0"} boogie_si_record_i32($i35);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i36 == 1);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const __skb_dequeue: ref;

axiom __skb_dequeue == $sub.ref(0, 312314);

procedure __skb_dequeue($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_dequeue($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} $p1 := skb_peek($p0);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} __skb_unlink($p1, $p0);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pci_unmap_single: ref;

axiom pci_unmap_single == $sub.ref(0, 313346);

procedure pci_unmap_single($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation pci_unmap_single($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} {:cexpr "pci_unmap_single:arg:dma_addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 1210} {:cexpr "pci_unmap_single:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 1211} {:cexpr "pci_unmap_single:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} dma_unmap_single_attrs($p7, $i1, $i2, $i3, $0.ref);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kfree_skb: ref;

axiom kfree_skb == $sub.ref(0, 314378);

procedure kfree_skb($p0: ref);
  free requires assertsPassed;



implementation kfree_skb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    return;
}



const skb_queue_len: ref;

axiom skb_queue_len == $sub.ref(0, 315410);

procedure skb_queue_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_queue_len($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_free_consistent: ref;

axiom pci_free_consistent == $sub.ref(0, 316442);

procedure pci_free_consistent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation pci_free_consistent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} {:cexpr "pci_free_consistent:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1214} {:cexpr "pci_free_consistent:arg:dma_handle"} boogie_si_record_i64($i3);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} dma_free_attrs($p7, $i1, $p2, $i3, $0.ref);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const dma_free_attrs: ref;

axiom dma_free_attrs == $sub.ref(0, 317474);

procedure dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} {:cexpr "dma_free_attrs:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1217} {:cexpr "dma_free_attrs:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    return;
}



const dma_unmap_single_attrs: ref;

axiom dma_unmap_single_attrs == $sub.ref(0, 318506);

procedure dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} {:cexpr "dma_unmap_single_attrs:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 1219} {:cexpr "dma_unmap_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 1220} {:cexpr "dma_unmap_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} $p5 := get_dma_ops($p0);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} $i6 := valid_dma_direction($i3);
    call {:si_unique_call 1223} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 1225} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} debug_dma_unmap_page($p0, $i1, $i2, $i3, 1);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 1227} devirtbounce.5($p17, $p0, $i1, $i2, $i3, $p4);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 1226} devirtbounce.4(0, .str.9, 36, 12);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_unmap_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 319538);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1230} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, dma_ops);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 320570);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 1);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 2);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 321602);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 1233} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const debug_dma_unmap_page: ref;

axiom debug_dma_unmap_page == $sub.ref(0, 322634);

procedure debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1);
  free requires assertsPassed;



implementation debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} {:cexpr "debug_dma_unmap_page:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1235} {:cexpr "debug_dma_unmap_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1236} {:cexpr "debug_dma_unmap_page:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1237} {:cexpr "debug_dma_unmap_page:arg:arg4"} boogie_si_record_i1($i4);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    return;
}



const skb_peek: ref;

axiom skb_peek == $sub.ref(0, 323666);

procedure skb_peek($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_peek($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $p7 := $p2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;
}



const __skb_unlink: ref;

axiom __skb_unlink == $sub.ref(0, 324698);

procedure __skb_unlink($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_unlink($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, 1);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $0.ref);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $0.ref);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p9, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p13);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p13, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p9);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    return;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 325730);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    return;
}



const disable_suitable_irq_2: ref;

axiom disable_suitable_irq_2 == $sub.ref(0, 326762);

procedure disable_suitable_irq_2($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.27, $M.29, $M.31, $M.33;



implementation disable_suitable_irq_2($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} {:cexpr "disable_suitable_irq_2:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $i2 := $M.27;
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.29;
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $M.31;
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $M.33;
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $i16 := $M.34;
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i0, $i16);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb22;

  $bb23:
    assume $i17 == 1;
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $M.33 := 0;
    call {:si_unique_call 1243} {:cexpr "ldv_irq_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i11 == 1;
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i12 := $M.32;
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i0, $i12);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb16;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $M.31 := 0;
    call {:si_unique_call 1242} {:cexpr "ldv_irq_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i8 := $M.30;
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, $i8);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $M.29 := 0;
    call {:si_unique_call 1241} {:cexpr "ldv_irq_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $i4 := $M.28;
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, $i4);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $M.27 := 0;
    call {:si_unique_call 1240} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const rtl8180_init_rx_ring: ref;

axiom rtl8180_init_rx_ring == $sub.ref(0, 327794);

procedure rtl8180_init_rx_ring($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation rtl8180_init_rx_ring($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $i31: i32;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $i76: i64;
  var $i78: i64;
  var $i79: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i32;
  var $i92: i1;
  var $i93: i64;
  var $i94: i32;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i8;
  var $i103: i32;
  var $i104: i32;
  var $i105: i64;
  var $i107: i64;
  var $i108: i1;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i64;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i32;
  var $i121: i1;
  var $i122: i64;
  var $i123: i32;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i8;
  var $i132: i32;
  var $i133: i32;
  var $i134: i64;
  var $i136: i64;
  var $i137: i1;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i64;
  var $p146: ref;
  var $p147: ref;
  var $i148: i64;
  var $i149: i32;
  var $i150: i1;
  var $i151: i64;
  var $i152: i32;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i8;
  var $i161: i32;
  var $i162: i32;
  var $i163: i64;
  var $i165: i64;
  var $i166: i1;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $i174: i64;
  var $p175: ref;
  var $p176: ref;
  var $i177: i64;
  var $i178: i32;
  var $i179: i1;
  var $i180: i64;
  var $i181: i32;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $i189: i8;
  var $i190: i32;
  var $i191: i32;
  var $i192: i64;
  var $i194: i64;
  var $i195: i1;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $i203: i64;
  var $p204: ref;
  var $p205: ref;
  var $i206: i64;
  var $i207: i32;
  var $i208: i1;
  var $i209: i64;
  var $i210: i32;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $i218: i8;
  var $i219: i32;
  var $i220: i32;
  var $i221: i64;
  var $i223: i64;
  var $i224: i1;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $i232: i64;
  var $p233: ref;
  var $p234: ref;
  var $i235: i64;
  var $i236: i32;
  var $i237: i1;
  var $i238: i64;
  var $i239: i32;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $i247: i8;
  var $i248: i32;
  var $i249: i32;
  var $i250: i64;
  var $i252: i64;
  var $i253: i1;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $i261: i64;
  var $p262: ref;
  var $p263: ref;
  var $i264: i64;
  var $i265: i32;
  var $i266: i1;
  var $i267: i64;
  var $i268: i32;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $p272: ref;
  var $p273: ref;
  var $p274: ref;
  var $p275: ref;
  var $i276: i8;
  var $i277: i32;
  var $i278: i32;
  var $i279: i64;
  var $i281: i64;
  var $i282: i1;
  var $p284: ref;
  var $p285: ref;
  var $p286: ref;
  var $p287: ref;
  var $p288: ref;
  var $p289: ref;
  var $i290: i64;
  var $p291: ref;
  var $p292: ref;
  var $i293: i64;
  var $i294: i32;
  var $i295: i1;
  var $i296: i64;
  var $i297: i32;
  var $p298: ref;
  var $p299: ref;
  var $p300: ref;
  var $p301: ref;
  var $p302: ref;
  var $p303: ref;
  var $p304: ref;
  var $i305: i8;
  var $i306: i32;
  var $i307: i32;
  var $i308: i64;
  var $i310: i64;
  var $i311: i1;
  var $p313: ref;
  var $p314: ref;
  var $p315: ref;
  var $p316: ref;
  var $p317: ref;
  var $p318: ref;
  var $i319: i64;
  var $p320: ref;
  var $p321: ref;
  var $i322: i64;
  var $i323: i32;
  var $i324: i1;
  var $i325: i64;
  var $i326: i32;
  var $p327: ref;
  var $p328: ref;
  var $p329: ref;
  var $p330: ref;
  var $p331: ref;
  var $p332: ref;
  var $p333: ref;
  var $i334: i8;
  var $i335: i32;
  var $i336: i32;
  var $i337: i64;
  var $i339: i64;
  var $i340: i1;
  var $p342: ref;
  var $p343: ref;
  var $p344: ref;
  var $p345: ref;
  var $p346: ref;
  var $p347: ref;
  var $i348: i64;
  var $p349: ref;
  var $p350: ref;
  var $i351: i64;
  var $i352: i32;
  var $i353: i1;
  var $i354: i64;
  var $i355: i32;
  var $p356: ref;
  var $p357: ref;
  var $p358: ref;
  var $p359: ref;
  var $p360: ref;
  var $p361: ref;
  var $p362: ref;
  var $i363: i8;
  var $i364: i32;
  var $i365: i32;
  var $i366: i64;
  var $i368: i64;
  var $i369: i1;
  var $p371: ref;
  var $p372: ref;
  var $p373: ref;
  var $p374: ref;
  var $p375: ref;
  var $p376: ref;
  var $i377: i64;
  var $p378: ref;
  var $p379: ref;
  var $i380: i64;
  var $i381: i32;
  var $i382: i1;
  var $i383: i64;
  var $i384: i32;
  var $p385: ref;
  var $p386: ref;
  var $p387: ref;
  var $p388: ref;
  var $p389: ref;
  var $p390: ref;
  var $p391: ref;
  var $i392: i8;
  var $i393: i32;
  var $i394: i32;
  var $i395: i64;
  var $i397: i64;
  var $i398: i1;
  var $p400: ref;
  var $p401: ref;
  var $p402: ref;
  var $p403: ref;
  var $p404: ref;
  var $p405: ref;
  var $i406: i64;
  var $p407: ref;
  var $p408: ref;
  var $i409: i64;
  var $i410: i32;
  var $i411: i1;
  var $i412: i64;
  var $i413: i32;
  var $p414: ref;
  var $p415: ref;
  var $p416: ref;
  var $p417: ref;
  var $p418: ref;
  var $p419: ref;
  var $p420: ref;
  var $i421: i8;
  var $i422: i32;
  var $i423: i32;
  var $i424: i64;
  var $i426: i64;
  var $i427: i1;
  var $p429: ref;
  var $p430: ref;
  var $p431: ref;
  var $p432: ref;
  var $p433: ref;
  var $p434: ref;
  var $i435: i64;
  var $p436: ref;
  var $p437: ref;
  var $i438: i64;
  var $i439: i32;
  var $i440: i1;
  var $i441: i64;
  var $i442: i32;
  var $p443: ref;
  var $p444: ref;
  var $p445: ref;
  var $p446: ref;
  var $p447: ref;
  var $p448: ref;
  var $p449: ref;
  var $i450: i8;
  var $i451: i32;
  var $i452: i32;
  var $i453: i64;
  var $i455: i64;
  var $i456: i1;
  var $p458: ref;
  var $p459: ref;
  var $p460: ref;
  var $p461: ref;
  var $p462: ref;
  var $p463: ref;
  var $i464: i64;
  var $p465: ref;
  var $p466: ref;
  var $i467: i64;
  var $i468: i32;
  var $i469: i1;
  var $i470: i64;
  var $i471: i32;
  var $p472: ref;
  var $p473: ref;
  var $p474: ref;
  var $p475: ref;
  var $p476: ref;
  var $p477: ref;
  var $p478: ref;
  var $i479: i8;
  var $i480: i32;
  var $i481: i32;
  var $i482: i64;
  var $i484: i64;
  var $i485: i1;
  var $p487: ref;
  var $p488: ref;
  var $p489: ref;
  var $p490: ref;
  var $p491: ref;
  var $p492: ref;
  var $i493: i64;
  var $p494: ref;
  var $p495: ref;
  var $i496: i64;
  var $i497: i32;
  var $i498: i1;
  var $i499: i64;
  var $i500: i32;
  var $p501: ref;
  var $p502: ref;
  var $p503: ref;
  var $p504: ref;
  var $p505: ref;
  var $p506: ref;
  var $p507: ref;
  var $i508: i8;
  var $i509: i32;
  var $i510: i32;
  var $i511: i64;
  var $i513: i64;
  var $i514: i1;
  var $p516: ref;
  var $p517: ref;
  var $p518: ref;
  var $p519: ref;
  var $p520: ref;
  var $p521: ref;
  var $i522: i64;
  var $p523: ref;
  var $p524: ref;
  var $i525: i64;
  var $i526: i32;
  var $i527: i1;
  var $i528: i64;
  var $i529: i32;
  var $p530: ref;
  var $p531: ref;
  var $p532: ref;
  var $p533: ref;
  var $p534: ref;
  var $p535: ref;
  var $p536: ref;
  var $i537: i8;
  var $i538: i32;
  var $i539: i32;
  var $i540: i64;
  var $i542: i64;
  var $i543: i1;
  var $p545: ref;
  var $p546: ref;
  var $p547: ref;
  var $p548: ref;
  var $p549: ref;
  var $p550: ref;
  var $i551: i64;
  var $p552: ref;
  var $p553: ref;
  var $i554: i64;
  var $i555: i32;
  var $i556: i1;
  var $i557: i64;
  var $i558: i32;
  var $p559: ref;
  var $p560: ref;
  var $p561: ref;
  var $p562: ref;
  var $p563: ref;
  var $p564: ref;
  var $p565: ref;
  var $i566: i8;
  var $i567: i32;
  var $i568: i32;
  var $i569: i64;
  var $i571: i64;
  var $i572: i1;
  var $p574: ref;
  var $p575: ref;
  var $p576: ref;
  var $p577: ref;
  var $p578: ref;
  var $p579: ref;
  var $i580: i64;
  var $p581: ref;
  var $p582: ref;
  var $i583: i64;
  var $i584: i32;
  var $i585: i1;
  var $i586: i64;
  var $i587: i32;
  var $p588: ref;
  var $p589: ref;
  var $p590: ref;
  var $p591: ref;
  var $p592: ref;
  var $p593: ref;
  var $p594: ref;
  var $i595: i8;
  var $i596: i32;
  var $i597: i32;
  var $i598: i64;
  var $i600: i64;
  var $i601: i1;
  var $p603: ref;
  var $p604: ref;
  var $p605: ref;
  var $p606: ref;
  var $p607: ref;
  var $p608: ref;
  var $i609: i64;
  var $p610: ref;
  var $p611: ref;
  var $i612: i64;
  var $i613: i32;
  var $i614: i1;
  var $i615: i64;
  var $i616: i32;
  var $p617: ref;
  var $p618: ref;
  var $p619: ref;
  var $p620: ref;
  var $p621: ref;
  var $p622: ref;
  var $p623: ref;
  var $i624: i8;
  var $i625: i32;
  var $i626: i32;
  var $i627: i64;
  var $i629: i64;
  var $i630: i1;
  var $p632: ref;
  var $p633: ref;
  var $p634: ref;
  var $p635: ref;
  var $p636: ref;
  var $p637: ref;
  var $i638: i64;
  var $p639: ref;
  var $p640: ref;
  var $i641: i64;
  var $i642: i32;
  var $i643: i1;
  var $i644: i64;
  var $i645: i32;
  var $p646: ref;
  var $p647: ref;
  var $p648: ref;
  var $p649: ref;
  var $p650: ref;
  var $p651: ref;
  var $p652: ref;
  var $i653: i8;
  var $i654: i32;
  var $i655: i32;
  var $i656: i64;
  var $i658: i64;
  var $i659: i1;
  var $p661: ref;
  var $p662: ref;
  var $p663: ref;
  var $p664: ref;
  var $p665: ref;
  var $p666: ref;
  var $i667: i64;
  var $p668: ref;
  var $p669: ref;
  var $i670: i64;
  var $i671: i32;
  var $i672: i1;
  var $i673: i64;
  var $i674: i32;
  var $p675: ref;
  var $p676: ref;
  var $p677: ref;
  var $p678: ref;
  var $p679: ref;
  var $p680: ref;
  var $p681: ref;
  var $i682: i8;
  var $i683: i32;
  var $i684: i32;
  var $i685: i64;
  var $i687: i64;
  var $i688: i1;
  var $p690: ref;
  var $p691: ref;
  var $p692: ref;
  var $p693: ref;
  var $p694: ref;
  var $p695: ref;
  var $i696: i64;
  var $p697: ref;
  var $p698: ref;
  var $i699: i64;
  var $i700: i32;
  var $i701: i1;
  var $i702: i64;
  var $i703: i32;
  var $p704: ref;
  var $p705: ref;
  var $p706: ref;
  var $p707: ref;
  var $p708: ref;
  var $p709: ref;
  var $p710: ref;
  var $i711: i8;
  var $i712: i32;
  var $i713: i32;
  var $i714: i64;
  var $i716: i64;
  var $i717: i1;
  var $p719: ref;
  var $p720: ref;
  var $p721: ref;
  var $p722: ref;
  var $p723: ref;
  var $p724: ref;
  var $i725: i64;
  var $p726: ref;
  var $p727: ref;
  var $i728: i64;
  var $i729: i32;
  var $i730: i1;
  var $i731: i64;
  var $i732: i32;
  var $p733: ref;
  var $p734: ref;
  var $p735: ref;
  var $p736: ref;
  var $p737: ref;
  var $p738: ref;
  var $p739: ref;
  var $i740: i8;
  var $i741: i32;
  var $i742: i32;
  var $i743: i64;
  var $i745: i64;
  var $i746: i1;
  var $p748: ref;
  var $p749: ref;
  var $p750: ref;
  var $p751: ref;
  var $p752: ref;
  var $p753: ref;
  var $i754: i64;
  var $p755: ref;
  var $p756: ref;
  var $i757: i64;
  var $i758: i32;
  var $i759: i1;
  var $i760: i64;
  var $i761: i32;
  var $p762: ref;
  var $p763: ref;
  var $p764: ref;
  var $p765: ref;
  var $p766: ref;
  var $p767: ref;
  var $p768: ref;
  var $i769: i8;
  var $i770: i32;
  var $i771: i32;
  var $i772: i64;
  var $i774: i64;
  var $i775: i1;
  var $p777: ref;
  var $p778: ref;
  var $p779: ref;
  var $p780: ref;
  var $p781: ref;
  var $p782: ref;
  var $i783: i64;
  var $p784: ref;
  var $p785: ref;
  var $i786: i64;
  var $i787: i32;
  var $i788: i1;
  var $i789: i64;
  var $i790: i32;
  var $p791: ref;
  var $p792: ref;
  var $p793: ref;
  var $p794: ref;
  var $p795: ref;
  var $p796: ref;
  var $p797: ref;
  var $i798: i8;
  var $i799: i32;
  var $i800: i32;
  var $i801: i64;
  var $i803: i64;
  var $i804: i1;
  var $p806: ref;
  var $p807: ref;
  var $p808: ref;
  var $p809: ref;
  var $p810: ref;
  var $p811: ref;
  var $i812: i64;
  var $p813: ref;
  var $p814: ref;
  var $i815: i64;
  var $i816: i32;
  var $i817: i1;
  var $i818: i64;
  var $i819: i32;
  var $p820: ref;
  var $p821: ref;
  var $p822: ref;
  var $p823: ref;
  var $p824: ref;
  var $p825: ref;
  var $p826: ref;
  var $i827: i8;
  var $i828: i32;
  var $i829: i32;
  var $i830: i64;
  var $i832: i64;
  var $i833: i1;
  var $p835: ref;
  var $p836: ref;
  var $p837: ref;
  var $p838: ref;
  var $p839: ref;
  var $p840: ref;
  var $i841: i64;
  var $p842: ref;
  var $p843: ref;
  var $i844: i64;
  var $i845: i32;
  var $i846: i1;
  var $i847: i64;
  var $i848: i32;
  var $p849: ref;
  var $p850: ref;
  var $p851: ref;
  var $p852: ref;
  var $p853: ref;
  var $p854: ref;
  var $p855: ref;
  var $i856: i8;
  var $i857: i32;
  var $i858: i32;
  var $i859: i64;
  var $i861: i64;
  var $i862: i1;
  var $p864: ref;
  var $p865: ref;
  var $p866: ref;
  var $p867: ref;
  var $p868: ref;
  var $p869: ref;
  var $i870: i64;
  var $p871: ref;
  var $p872: ref;
  var $i873: i64;
  var $i874: i32;
  var $i875: i1;
  var $i876: i64;
  var $i877: i32;
  var $p878: ref;
  var $p879: ref;
  var $p880: ref;
  var $p881: ref;
  var $p882: ref;
  var $p883: ref;
  var $p884: ref;
  var $i885: i8;
  var $i886: i32;
  var $i887: i32;
  var $i888: i64;
  var $i890: i64;
  var $i891: i1;
  var $p893: ref;
  var $p894: ref;
  var $p895: ref;
  var $p896: ref;
  var $p897: ref;
  var $p898: ref;
  var $i899: i64;
  var $p900: ref;
  var $p901: ref;
  var $i902: i64;
  var $i903: i32;
  var $i904: i1;
  var $i905: i64;
  var $i906: i32;
  var $p907: ref;
  var $p908: ref;
  var $p909: ref;
  var $p910: ref;
  var $p911: ref;
  var $p912: ref;
  var $p913: ref;
  var $i914: i8;
  var $i915: i32;
  var $i916: i32;
  var $i917: i64;
  var $i919: i64;
  var $i920: i1;
  var $p922: ref;
  var $p923: ref;
  var $p924: ref;
  var $p925: ref;
  var $p926: ref;
  var $p927: ref;
  var $i928: i64;
  var $p929: ref;
  var $p930: ref;
  var $i931: i64;
  var $i932: i32;
  var $i933: i1;
  var $i934: i64;
  var $i935: i32;
  var $p936: ref;
  var $p937: ref;
  var $p938: ref;
  var $p939: ref;
  var $p940: ref;
  var $p64: ref;
  var $p941: ref;
  var $i942: i8;
  var $i943: i32;
  var $i944: i32;
  var $i65: i64;
  var $i946: i64;
  var $i947: i1;
  var $p949: ref;
  var $p950: ref;
  var $p951: ref;
  var $p952: ref;
  var $p953: ref;
  var $p954: ref;
  var $i955: i64;
  var $p956: ref;
  var $p957: ref;
  var $i958: i64;
  var $i959: i32;
  var $i960: i1;
  var $i961: i64;
  var $i962: i32;
  var $p963: ref;
  var $p964: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 2);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 16);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i14 := $mul.i32($i13, 32);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(120, 1));
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} $p17 := pci_zalloc_consistent($p10, $i15, $p16);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p17);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i22 == 1);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 255);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(128, 1));
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 0);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} $p33 := dev_alloc_skb(2353);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p33);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(0, 8));
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $p33);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p33, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} $p46 := skb_tail_pointer($p33);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $i49 := pci_map_single($p48, $p46, 2353, 2);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p45, $i49);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.0, $p45);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} $i53 := pci_dma_mapping_error($p51, $i52);
    call {:si_unique_call 1251} {:cexpr "tmp___1"} boogie_si_record_i32($i53);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $p55 := $p33;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.0, $p45);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i64.i32($i59);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p36, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i60);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p36, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $sub.i32(0, 2147481295));
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $p69 := dev_alloc_skb(2353);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.0, $p73);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i75);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p69);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $i79 := $eq.i64($i78, 0);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(1, 8));
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p81, $p69);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p69, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} $p84 := skb_tail_pointer($p69);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} $i87 := pci_map_single($p86, $p84, 2353, 2);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p83, $i87);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.0, $p83);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} $i91 := pci_dma_mapping_error($p89, $i90);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $p55 := $p69;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i93 := $load.i64($M.0, $p83);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i64.i32($i93);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p72, $mul.ref($i76, 12)), $mul.ref(8, 1));
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p95, $i94);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p72, $mul.ref($i76, 12)), $mul.ref(0, 1));
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, $sub.i32(0, 2147481295));
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} $p97 := dev_alloc_skb(2353);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.0, $p101);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $i104 := $mul.i32($i103, 2);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $i105 := $sext.i32.i64($i104);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p97);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $i108 := $eq.i64($i107, 0);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(2, 8));
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p110, $p97);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p97, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} $p113 := skb_tail_pointer($p97);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} $i116 := pci_map_single($p115, $p113, 2353, 2);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p112, $i116);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $i119 := $load.i64($M.0, $p112);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} $i120 := pci_dma_mapping_error($p118, $i119);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $p55 := $p97;
    assume {:branchcond $i121} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i122 := $load.i64($M.0, $p112);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i64.i32($i122);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p100, $mul.ref($i105, 12)), $mul.ref(8, 1));
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p124, $i123);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p100, $mul.ref($i105, 12)), $mul.ref(0, 1));
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p125, $sub.i32(0, 2147481295));
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} $p126 := dev_alloc_skb(2353);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.0, $p130);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $i133 := $mul.i32($i132, 3);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $i134 := $sext.i32.i64($i133);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $i136 := $p2i.ref.i64($p126);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i137 := $eq.i64($i136, 0);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(3, 8));
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p139, $p126);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p126, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p140);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} $p142 := skb_tail_pointer($p126);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.0, $p143);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} $i145 := pci_map_single($p144, $p142, 2353, 2);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p141, $i145);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $i148 := $load.i64($M.0, $p141);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} $i149 := pci_dma_mapping_error($p147, $i148);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $i150 := $ne.i32($i149, 0);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $p55 := $p126;
    assume {:branchcond $i150} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i151 := $load.i64($M.0, $p141);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i152 := $trunc.i64.i32($i151);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p129, $mul.ref($i134, 12)), $mul.ref(8, 1));
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p153, $i152);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p129, $mul.ref($i134, 12)), $mul.ref(0, 1));
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p154, $sub.i32(0, 2147481295));
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} $p155 := dev_alloc_skb(2353);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p156);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i160 := $load.i8($M.0, $p159);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $i161 := $zext.i8.i32($i160);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $i162 := $mul.i32($i161, 4);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $i163 := $sext.i32.i64($i162);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $i165 := $p2i.ref.i64($p155);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i166 := $eq.i64($i165, 0);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(4, 8));
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p168, $p155);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p155, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $p170 := $bitcast.ref.ref($p169);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} $p171 := skb_tail_pointer($p155);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $p173 := $load.ref($M.0, $p172);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} $i174 := pci_map_single($p173, $p171, 2353, 2);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p170, $i174);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.0, $p175);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $i177 := $load.i64($M.0, $p170);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} $i178 := pci_dma_mapping_error($p176, $i177);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $i179 := $ne.i32($i178, 0);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $p55 := $p155;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i180 := $load.i64($M.0, $p170);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $i181 := $trunc.i64.i32($i180);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p158, $mul.ref($i163, 12)), $mul.ref(8, 1));
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p182, $i181);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p158, $mul.ref($i163, 12)), $mul.ref(0, 1));
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p183, $sub.i32(0, 2147481295));
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} $p184 := dev_alloc_skb(2353);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.0, $p185);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $p187 := $bitcast.ref.ref($p186);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $i189 := $load.i8($M.0, $p188);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i190 := $zext.i8.i32($i189);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $i191 := $mul.i32($i190, 5);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $i192 := $sext.i32.i64($i191);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $i194 := $p2i.ref.i64($p184);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i195 := $eq.i64($i194, 0);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i195} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(5, 8));
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p197, $p184);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p184, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $p199 := $bitcast.ref.ref($p198);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} $p200 := skb_tail_pointer($p184);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $p202 := $load.ref($M.0, $p201);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} $i203 := pci_map_single($p202, $p200, 2353, 2);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p199, $i203);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.0, $p204);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $i206 := $load.i64($M.0, $p199);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $i207 := pci_dma_mapping_error($p205, $i206);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i208 := $ne.i32($i207, 0);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $p55 := $p184;
    assume {:branchcond $i208} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i209 := $load.i64($M.0, $p199);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $i210 := $trunc.i64.i32($i209);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p187, $mul.ref($i192, 12)), $mul.ref(8, 1));
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p211, $i210);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p187, $mul.ref($i192, 12)), $mul.ref(0, 1));
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p212, $sub.i32(0, 2147481295));
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} $p213 := dev_alloc_skb(2353);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $p215 := $load.ref($M.0, $p214);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $p216 := $bitcast.ref.ref($p215);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $i218 := $load.i8($M.0, $p217);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i219 := $zext.i8.i32($i218);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $i220 := $mul.i32($i219, 6);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $i221 := $sext.i32.i64($i220);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i223 := $p2i.ref.i64($p213);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i224 := $eq.i64($i223, 0);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    assume {:branchcond $i224} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(6, 8));
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p226, $p213);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p213, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $p228 := $bitcast.ref.ref($p227);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} $p229 := skb_tail_pointer($p213);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $p231 := $load.ref($M.0, $p230);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} $i232 := pci_map_single($p231, $p229, 2353, 2);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p228, $i232);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $p234 := $load.ref($M.0, $p233);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $i235 := $load.i64($M.0, $p228);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} $i236 := pci_dma_mapping_error($p234, $i235);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $i237 := $ne.i32($i236, 0);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $p55 := $p213;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i238 := $load.i64($M.0, $p228);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $i239 := $trunc.i64.i32($i238);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p216, $mul.ref($i221, 12)), $mul.ref(8, 1));
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p240, $i239);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p216, $mul.ref($i221, 12)), $mul.ref(0, 1));
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p241, $sub.i32(0, 2147481295));
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} $p242 := dev_alloc_skb(2353);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $p244 := $load.ref($M.0, $p243);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $p245 := $bitcast.ref.ref($p244);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $i247 := $load.i8($M.0, $p246);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $i248 := $zext.i8.i32($i247);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i249 := $mul.i32($i248, 7);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $i250 := $sext.i32.i64($i249);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $i252 := $p2i.ref.i64($p242);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $i253 := $eq.i64($i252, 0);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(7, 8));
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p255, $p242);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p242, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $p257 := $bitcast.ref.ref($p256);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} $p258 := skb_tail_pointer($p242);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $p260 := $load.ref($M.0, $p259);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $i261 := pci_map_single($p260, $p258, 2353, 2);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p257, $i261);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $p263 := $load.ref($M.0, $p262);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $i264 := $load.i64($M.0, $p257);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} $i265 := pci_dma_mapping_error($p263, $i264);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $i266 := $ne.i32($i265, 0);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $p55 := $p242;
    assume {:branchcond $i266} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i267 := $load.i64($M.0, $p257);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $i268 := $trunc.i64.i32($i267);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p245, $mul.ref($i250, 12)), $mul.ref(8, 1));
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p269, $i268);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p245, $mul.ref($i250, 12)), $mul.ref(0, 1));
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p270, $sub.i32(0, 2147481295));
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} $p271 := dev_alloc_skb(2353);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $p273 := $load.ref($M.0, $p272);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $p274 := $bitcast.ref.ref($p273);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $i276 := $load.i8($M.0, $p275);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i277 := $zext.i8.i32($i276);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i278 := $mul.i32($i277, 8);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $i279 := $sext.i32.i64($i278);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $i281 := $p2i.ref.i64($p271);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i282 := $eq.i64($i281, 0);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(8, 8));
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p284, $p271);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p271, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $p286 := $bitcast.ref.ref($p285);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} $p287 := skb_tail_pointer($p271);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $p289 := $load.ref($M.0, $p288);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} $i290 := pci_map_single($p289, $p287, 2353, 2);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p286, $i290);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $p292 := $load.ref($M.0, $p291);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $i293 := $load.i64($M.0, $p286);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} $i294 := pci_dma_mapping_error($p292, $i293);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $i295 := $ne.i32($i294, 0);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $p55 := $p271;
    assume {:branchcond $i295} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i296 := $load.i64($M.0, $p286);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $i297 := $trunc.i64.i32($i296);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p274, $mul.ref($i279, 12)), $mul.ref(8, 1));
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p298, $i297);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p274, $mul.ref($i279, 12)), $mul.ref(0, 1));
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p299, $sub.i32(0, 2147481295));
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $p300 := dev_alloc_skb(2353);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $p302 := $load.ref($M.0, $p301);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $p303 := $bitcast.ref.ref($p302);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $i305 := $load.i8($M.0, $p304);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $i306 := $zext.i8.i32($i305);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $i307 := $mul.i32($i306, 9);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $i308 := $sext.i32.i64($i307);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $i310 := $p2i.ref.i64($p300);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $i311 := $eq.i64($i310, 0);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    assume {:branchcond $i311} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(9, 8));
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p313, $p300);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p300, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $p315 := $bitcast.ref.ref($p314);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} $p316 := skb_tail_pointer($p300);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $p318 := $load.ref($M.0, $p317);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} $i319 := pci_map_single($p318, $p316, 2353, 2);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p315, $i319);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $p321 := $load.ref($M.0, $p320);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $i322 := $load.i64($M.0, $p315);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} $i323 := pci_dma_mapping_error($p321, $i322);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $i324 := $ne.i32($i323, 0);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $p55 := $p300;
    assume {:branchcond $i324} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i325 := $load.i64($M.0, $p315);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $i326 := $trunc.i64.i32($i325);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p303, $mul.ref($i308, 12)), $mul.ref(8, 1));
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p327, $i326);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($p303, $mul.ref($i308, 12)), $mul.ref(0, 1));
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p328, $sub.i32(0, 2147481295));
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} $p329 := dev_alloc_skb(2353);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $p331 := $load.ref($M.0, $p330);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $p332 := $bitcast.ref.ref($p331);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $i334 := $load.i8($M.0, $p333);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i335 := $zext.i8.i32($i334);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i336 := $mul.i32($i335, 10);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $i337 := $sext.i32.i64($i336);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i339 := $p2i.ref.i64($p329);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $i340 := $eq.i64($i339, 0);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i340} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(10, 8));
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p342, $p329);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p329, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $p344 := $bitcast.ref.ref($p343);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} $p345 := skb_tail_pointer($p329);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $p347 := $load.ref($M.0, $p346);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} $i348 := pci_map_single($p347, $p345, 2353, 2);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p344, $i348);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $p350 := $load.ref($M.0, $p349);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $i351 := $load.i64($M.0, $p344);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} $i352 := pci_dma_mapping_error($p350, $i351);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $i353 := $ne.i32($i352, 0);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $p55 := $p329;
    assume {:branchcond $i353} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i354 := $load.i64($M.0, $p344);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $i355 := $trunc.i64.i32($i354);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p332, $mul.ref($i337, 12)), $mul.ref(8, 1));
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p356, $i355);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($p332, $mul.ref($i337, 12)), $mul.ref(0, 1));
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p357, $sub.i32(0, 2147481295));
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} $p358 := dev_alloc_skb(2353);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $p360 := $load.ref($M.0, $p359);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $p361 := $bitcast.ref.ref($p360);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $i363 := $load.i8($M.0, $p362);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $i364 := $zext.i8.i32($i363);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $i365 := $mul.i32($i364, 11);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $i366 := $sext.i32.i64($i365);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i368 := $p2i.ref.i64($p358);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i369 := $eq.i64($i368, 0);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    assume {:branchcond $i369} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i369 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(11, 8));
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p371, $p358);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($p358, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $p373 := $bitcast.ref.ref($p372);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} $p374 := skb_tail_pointer($p358);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $p376 := $load.ref($M.0, $p375);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} $i377 := pci_map_single($p376, $p374, 2353, 2);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p373, $i377);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $p379 := $load.ref($M.0, $p378);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $i380 := $load.i64($M.0, $p373);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} $i381 := pci_dma_mapping_error($p379, $i380);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $i382 := $ne.i32($i381, 0);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $p55 := $p358;
    assume {:branchcond $i382} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $i383 := $load.i64($M.0, $p373);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $i384 := $trunc.i64.i32($i383);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($p361, $mul.ref($i366, 12)), $mul.ref(8, 1));
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p385, $i384);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p361, $mul.ref($i366, 12)), $mul.ref(0, 1));
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p386, $sub.i32(0, 2147481295));
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} $p387 := dev_alloc_skb(2353);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $p389 := $load.ref($M.0, $p388);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $p390 := $bitcast.ref.ref($p389);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $i392 := $load.i8($M.0, $p391);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $i393 := $zext.i8.i32($i392);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $i394 := $mul.i32($i393, 12);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $i395 := $sext.i32.i64($i394);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i397 := $p2i.ref.i64($p387);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i398 := $eq.i64($i397, 0);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    assume {:branchcond $i398} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i398 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(12, 8));
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p400, $p387);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p387, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $p402 := $bitcast.ref.ref($p401);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} $p403 := skb_tail_pointer($p387);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $p405 := $load.ref($M.0, $p404);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} $i406 := pci_map_single($p405, $p403, 2353, 2);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p402, $i406);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $p408 := $load.ref($M.0, $p407);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i409 := $load.i64($M.0, $p402);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} $i410 := pci_dma_mapping_error($p408, $i409);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $i411 := $ne.i32($i410, 0);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $p55 := $p387;
    assume {:branchcond $i411} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i411 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $i412 := $load.i64($M.0, $p402);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $i413 := $trunc.i64.i32($i412);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $p414 := $add.ref($add.ref($p390, $mul.ref($i395, 12)), $mul.ref(8, 1));
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p414, $i413);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($p390, $mul.ref($i395, 12)), $mul.ref(0, 1));
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p415, $sub.i32(0, 2147481295));
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} $p416 := dev_alloc_skb(2353);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $p418 := $load.ref($M.0, $p417);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $p419 := $bitcast.ref.ref($p418);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $i421 := $load.i8($M.0, $p420);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $i422 := $zext.i8.i32($i421);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $i423 := $mul.i32($i422, 13);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $i424 := $sext.i32.i64($i423);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $i426 := $p2i.ref.i64($p416);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $i427 := $eq.i64($i426, 0);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i427} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i427 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(13, 8));
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p429, $p416);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($p416, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $p431 := $bitcast.ref.ref($p430);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} $p432 := skb_tail_pointer($p416);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $p434 := $load.ref($M.0, $p433);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} $i435 := pci_map_single($p434, $p432, 2353, 2);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p431, $i435);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $p437 := $load.ref($M.0, $p436);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $i438 := $load.i64($M.0, $p431);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} $i439 := pci_dma_mapping_error($p437, $i438);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $i440 := $ne.i32($i439, 0);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $p55 := $p416;
    assume {:branchcond $i440} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i440 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i441 := $load.i64($M.0, $p431);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $i442 := $trunc.i64.i32($i441);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($p419, $mul.ref($i424, 12)), $mul.ref(8, 1));
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p443, $i442);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($p419, $mul.ref($i424, 12)), $mul.ref(0, 1));
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p444, $sub.i32(0, 2147481295));
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} $p445 := dev_alloc_skb(2353);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $p447 := $load.ref($M.0, $p446);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $p448 := $bitcast.ref.ref($p447);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $i450 := $load.i8($M.0, $p449);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i451 := $zext.i8.i32($i450);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $i452 := $mul.i32($i451, 14);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $i453 := $sext.i32.i64($i452);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $i455 := $p2i.ref.i64($p445);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $i456 := $eq.i64($i455, 0);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i456} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i456 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(14, 8));
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p458, $p445);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($add.ref($p445, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $p460 := $bitcast.ref.ref($p459);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} $p461 := skb_tail_pointer($p445);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $p462 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $p463 := $load.ref($M.0, $p462);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} $i464 := pci_map_single($p463, $p461, 2353, 2);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p460, $i464);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $p465 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $p466 := $load.ref($M.0, $p465);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $i467 := $load.i64($M.0, $p460);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} $i468 := pci_dma_mapping_error($p466, $i467);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i469 := $ne.i32($i468, 0);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $p55 := $p445;
    assume {:branchcond $i469} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i469 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $i470 := $load.i64($M.0, $p460);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $i471 := $trunc.i64.i32($i470);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($p448, $mul.ref($i453, 12)), $mul.ref(8, 1));
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p472, $i471);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($p448, $mul.ref($i453, 12)), $mul.ref(0, 1));
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p473, $sub.i32(0, 2147481295));
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} $p474 := dev_alloc_skb(2353);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $p475 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $p476 := $load.ref($M.0, $p475);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $p477 := $bitcast.ref.ref($p476);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $p478 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $i479 := $load.i8($M.0, $p478);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $i480 := $zext.i8.i32($i479);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i481 := $mul.i32($i480, 15);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $i482 := $sext.i32.i64($i481);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $i484 := $p2i.ref.i64($p474);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $i485 := $eq.i64($i484, 0);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i485} true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i485 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p487 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(15, 8));
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p487, $p474);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $p488 := $add.ref($add.ref($p474, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $p489 := $bitcast.ref.ref($p488);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} $p490 := skb_tail_pointer($p474);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $p492 := $load.ref($M.0, $p491);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} $i493 := pci_map_single($p492, $p490, 2353, 2);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p489, $i493);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $p494 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $p495 := $load.ref($M.0, $p494);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $i496 := $load.i64($M.0, $p489);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $i497 := pci_dma_mapping_error($p495, $i496);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $i498 := $ne.i32($i497, 0);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $p55 := $p474;
    assume {:branchcond $i498} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i498 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i499 := $load.i64($M.0, $p489);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $i500 := $trunc.i64.i32($i499);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($add.ref($p477, $mul.ref($i482, 12)), $mul.ref(8, 1));
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p501, $i500);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $p502 := $add.ref($add.ref($p477, $mul.ref($i482, 12)), $mul.ref(0, 1));
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p502, $sub.i32(0, 2147481295));
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} $p503 := dev_alloc_skb(2353);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $p504 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $p505 := $load.ref($M.0, $p504);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $p506 := $bitcast.ref.ref($p505);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $i508 := $load.i8($M.0, $p507);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i509 := $zext.i8.i32($i508);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $i510 := $mul.i32($i509, 16);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $i511 := $sext.i32.i64($i510);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $i513 := $p2i.ref.i64($p503);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $i514 := $eq.i64($i513, 0);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i514} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i514 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p516 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(16, 8));
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p516, $p503);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($add.ref($p503, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $p518 := $bitcast.ref.ref($p517);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} $p519 := skb_tail_pointer($p503);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $p520 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $p521 := $load.ref($M.0, $p520);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} $i522 := pci_map_single($p521, $p519, 2353, 2);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p518, $i522);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $p524 := $load.ref($M.0, $p523);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $i525 := $load.i64($M.0, $p518);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} $i526 := pci_dma_mapping_error($p524, $i525);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i527 := $ne.i32($i526, 0);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $p55 := $p503;
    assume {:branchcond $i527} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i527 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $i528 := $load.i64($M.0, $p518);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $i529 := $trunc.i64.i32($i528);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $p530 := $add.ref($add.ref($p506, $mul.ref($i511, 12)), $mul.ref(8, 1));
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p530, $i529);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($p506, $mul.ref($i511, 12)), $mul.ref(0, 1));
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p531, $sub.i32(0, 2147481295));
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} $p532 := dev_alloc_skb(2353);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $p533 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $p534 := $load.ref($M.0, $p533);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $p535 := $bitcast.ref.ref($p534);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $p536 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $i537 := $load.i8($M.0, $p536);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i538 := $zext.i8.i32($i537);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i539 := $mul.i32($i538, 17);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $i540 := $sext.i32.i64($i539);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i542 := $p2i.ref.i64($p532);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $i543 := $eq.i64($i542, 0);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    assume {:branchcond $i543} true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i543 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(17, 8));
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p545, $p532);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $p546 := $add.ref($add.ref($p532, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $p547 := $bitcast.ref.ref($p546);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} $p548 := skb_tail_pointer($p532);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $p550 := $load.ref($M.0, $p549);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} $i551 := pci_map_single($p550, $p548, 2353, 2);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p547, $i551);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $p552 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $p553 := $load.ref($M.0, $p552);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $i554 := $load.i64($M.0, $p547);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} $i555 := pci_dma_mapping_error($p553, $i554);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $i556 := $ne.i32($i555, 0);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $p55 := $p532;
    assume {:branchcond $i556} true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i556 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $i557 := $load.i64($M.0, $p547);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $i558 := $trunc.i64.i32($i557);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $p559 := $add.ref($add.ref($p535, $mul.ref($i540, 12)), $mul.ref(8, 1));
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p559, $i558);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $p560 := $add.ref($add.ref($p535, $mul.ref($i540, 12)), $mul.ref(0, 1));
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p560, $sub.i32(0, 2147481295));
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $p561 := dev_alloc_skb(2353);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $p563 := $load.ref($M.0, $p562);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $p564 := $bitcast.ref.ref($p563);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $p565 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $i566 := $load.i8($M.0, $p565);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $i567 := $zext.i8.i32($i566);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $i568 := $mul.i32($i567, 18);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i569 := $sext.i32.i64($i568);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $i571 := $p2i.ref.i64($p561);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $i572 := $eq.i64($i571, 0);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    assume {:branchcond $i572} true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i572 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $p574 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(18, 8));
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p574, $p561);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $p575 := $add.ref($add.ref($p561, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $p576 := $bitcast.ref.ref($p575);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} $p577 := skb_tail_pointer($p561);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $p578 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $p579 := $load.ref($M.0, $p578);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} $i580 := pci_map_single($p579, $p577, 2353, 2);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p576, $i580);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $p581 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $p582 := $load.ref($M.0, $p581);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $i583 := $load.i64($M.0, $p576);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} $i584 := pci_dma_mapping_error($p582, $i583);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $i585 := $ne.i32($i584, 0);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $p55 := $p561;
    assume {:branchcond $i585} true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i585 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $i586 := $load.i64($M.0, $p576);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $i587 := $trunc.i64.i32($i586);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $p588 := $add.ref($add.ref($p564, $mul.ref($i569, 12)), $mul.ref(8, 1));
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p588, $i587);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $p589 := $add.ref($add.ref($p564, $mul.ref($i569, 12)), $mul.ref(0, 1));
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p589, $sub.i32(0, 2147481295));
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} $p590 := dev_alloc_skb(2353);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $p592 := $load.ref($M.0, $p591);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $p593 := $bitcast.ref.ref($p592);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $p594 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $i595 := $load.i8($M.0, $p594);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $i596 := $zext.i8.i32($i595);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $i597 := $mul.i32($i596, 19);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $i598 := $sext.i32.i64($i597);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $i600 := $p2i.ref.i64($p590);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $i601 := $eq.i64($i600, 0);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    assume {:branchcond $i601} true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i601 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $p603 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(19, 8));
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p603, $p590);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $p604 := $add.ref($add.ref($p590, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $p605 := $bitcast.ref.ref($p604);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} $p606 := skb_tail_pointer($p590);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $p607 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $p608 := $load.ref($M.0, $p607);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} $i609 := pci_map_single($p608, $p606, 2353, 2);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p605, $i609);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $p610 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $p611 := $load.ref($M.0, $p610);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $i612 := $load.i64($M.0, $p605);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} $i613 := pci_dma_mapping_error($p611, $i612);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $i614 := $ne.i32($i613, 0);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $p55 := $p590;
    assume {:branchcond $i614} true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i614 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $i615 := $load.i64($M.0, $p605);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $i616 := $trunc.i64.i32($i615);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $p617 := $add.ref($add.ref($p593, $mul.ref($i598, 12)), $mul.ref(8, 1));
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p617, $i616);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $p618 := $add.ref($add.ref($p593, $mul.ref($i598, 12)), $mul.ref(0, 1));
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p618, $sub.i32(0, 2147481295));
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} $p619 := dev_alloc_skb(2353);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $p620 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $p621 := $load.ref($M.0, $p620);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $p622 := $bitcast.ref.ref($p621);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $p623 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $i624 := $load.i8($M.0, $p623);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $i625 := $zext.i8.i32($i624);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i626 := $mul.i32($i625, 20);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $i627 := $sext.i32.i64($i626);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $i629 := $p2i.ref.i64($p619);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $i630 := $eq.i64($i629, 0);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    assume {:branchcond $i630} true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i630 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p632 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(20, 8));
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p632, $p619);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $p633 := $add.ref($add.ref($p619, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $p634 := $bitcast.ref.ref($p633);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} $p635 := skb_tail_pointer($p619);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $p636 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $p637 := $load.ref($M.0, $p636);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} $i638 := pci_map_single($p637, $p635, 2353, 2);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p634, $i638);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $p639 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $p640 := $load.ref($M.0, $p639);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $i641 := $load.i64($M.0, $p634);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} $i642 := pci_dma_mapping_error($p640, $i641);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $i643 := $ne.i32($i642, 0);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $p55 := $p619;
    assume {:branchcond $i643} true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i643 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $i644 := $load.i64($M.0, $p634);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i645 := $trunc.i64.i32($i644);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $p646 := $add.ref($add.ref($p622, $mul.ref($i627, 12)), $mul.ref(8, 1));
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p646, $i645);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $p647 := $add.ref($add.ref($p622, $mul.ref($i627, 12)), $mul.ref(0, 1));
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p647, $sub.i32(0, 2147481295));
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} $p648 := dev_alloc_skb(2353);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $p649 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $p650 := $load.ref($M.0, $p649);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $p651 := $bitcast.ref.ref($p650);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $p652 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $i653 := $load.i8($M.0, $p652);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i654 := $zext.i8.i32($i653);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i655 := $mul.i32($i654, 21);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $i656 := $sext.i32.i64($i655);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $i658 := $p2i.ref.i64($p648);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $i659 := $eq.i64($i658, 0);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    assume {:branchcond $i659} true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i659 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $p661 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(21, 8));
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p661, $p648);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $p662 := $add.ref($add.ref($p648, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $p663 := $bitcast.ref.ref($p662);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} $p664 := skb_tail_pointer($p648);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $p665 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $p666 := $load.ref($M.0, $p665);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} $i667 := pci_map_single($p666, $p664, 2353, 2);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p663, $i667);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $p668 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $p669 := $load.ref($M.0, $p668);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $i670 := $load.i64($M.0, $p663);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} $i671 := pci_dma_mapping_error($p669, $i670);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $i672 := $ne.i32($i671, 0);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $p55 := $p648;
    assume {:branchcond $i672} true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i672 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $i673 := $load.i64($M.0, $p663);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i674 := $trunc.i64.i32($i673);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $p675 := $add.ref($add.ref($p651, $mul.ref($i656, 12)), $mul.ref(8, 1));
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p675, $i674);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($add.ref($p651, $mul.ref($i656, 12)), $mul.ref(0, 1));
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p676, $sub.i32(0, 2147481295));
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} $p677 := dev_alloc_skb(2353);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $p678 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $p679 := $load.ref($M.0, $p678);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $p680 := $bitcast.ref.ref($p679);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $p681 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $i682 := $load.i8($M.0, $p681);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $i683 := $zext.i8.i32($i682);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $i684 := $mul.i32($i683, 22);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $i685 := $sext.i32.i64($i684);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $i687 := $p2i.ref.i64($p677);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $i688 := $eq.i64($i687, 0);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i688} true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i688 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $p690 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(22, 8));
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p690, $p677);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $p691 := $add.ref($add.ref($p677, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $p692 := $bitcast.ref.ref($p691);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} $p693 := skb_tail_pointer($p677);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $p694 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $p695 := $load.ref($M.0, $p694);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} $i696 := pci_map_single($p695, $p693, 2353, 2);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p692, $i696);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $p697 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $p698 := $load.ref($M.0, $p697);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $i699 := $load.i64($M.0, $p692);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} $i700 := pci_dma_mapping_error($p698, $i699);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $i701 := $ne.i32($i700, 0);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $p55 := $p677;
    assume {:branchcond $i701} true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i701 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $i702 := $load.i64($M.0, $p692);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $i703 := $trunc.i64.i32($i702);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $p704 := $add.ref($add.ref($p680, $mul.ref($i685, 12)), $mul.ref(8, 1));
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p704, $i703);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $p705 := $add.ref($add.ref($p680, $mul.ref($i685, 12)), $mul.ref(0, 1));
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p705, $sub.i32(0, 2147481295));
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} $p706 := dev_alloc_skb(2353);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $p707 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $p708 := $load.ref($M.0, $p707);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $p709 := $bitcast.ref.ref($p708);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $p710 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $i711 := $load.i8($M.0, $p710);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $i712 := $zext.i8.i32($i711);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $i713 := $mul.i32($i712, 23);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $i714 := $sext.i32.i64($i713);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $i716 := $p2i.ref.i64($p706);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $i717 := $eq.i64($i716, 0);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    assume {:branchcond $i717} true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i717 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $p719 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(23, 8));
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p719, $p706);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $p720 := $add.ref($add.ref($p706, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $p721 := $bitcast.ref.ref($p720);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} $p722 := skb_tail_pointer($p706);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $p723 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $p724 := $load.ref($M.0, $p723);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} $i725 := pci_map_single($p724, $p722, 2353, 2);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p721, $i725);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $p726 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $p727 := $load.ref($M.0, $p726);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $i728 := $load.i64($M.0, $p721);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} $i729 := pci_dma_mapping_error($p727, $i728);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $i730 := $ne.i32($i729, 0);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $p55 := $p706;
    assume {:branchcond $i730} true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i730 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $i731 := $load.i64($M.0, $p721);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $i732 := $trunc.i64.i32($i731);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $p733 := $add.ref($add.ref($p709, $mul.ref($i714, 12)), $mul.ref(8, 1));
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p733, $i732);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $p734 := $add.ref($add.ref($p709, $mul.ref($i714, 12)), $mul.ref(0, 1));
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p734, $sub.i32(0, 2147481295));
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} $p735 := dev_alloc_skb(2353);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $p736 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $p737 := $load.ref($M.0, $p736);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $p738 := $bitcast.ref.ref($p737);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $p739 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $i740 := $load.i8($M.0, $p739);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $i741 := $zext.i8.i32($i740);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $i742 := $mul.i32($i741, 24);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $i743 := $sext.i32.i64($i742);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $i745 := $p2i.ref.i64($p735);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $i746 := $eq.i64($i745, 0);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    assume {:branchcond $i746} true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i746 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $p748 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(24, 8));
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p748, $p735);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $p749 := $add.ref($add.ref($p735, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $p750 := $bitcast.ref.ref($p749);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} $p751 := skb_tail_pointer($p735);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $p752 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $p753 := $load.ref($M.0, $p752);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} $i754 := pci_map_single($p753, $p751, 2353, 2);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p750, $i754);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $p755 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $p756 := $load.ref($M.0, $p755);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $i757 := $load.i64($M.0, $p750);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} $i758 := pci_dma_mapping_error($p756, $i757);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i759 := $ne.i32($i758, 0);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $p55 := $p735;
    assume {:branchcond $i759} true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i759 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $i760 := $load.i64($M.0, $p750);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $i761 := $trunc.i64.i32($i760);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $p762 := $add.ref($add.ref($p738, $mul.ref($i743, 12)), $mul.ref(8, 1));
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p762, $i761);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $p763 := $add.ref($add.ref($p738, $mul.ref($i743, 12)), $mul.ref(0, 1));
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p763, $sub.i32(0, 2147481295));
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} $p764 := dev_alloc_skb(2353);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $p765 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $p766 := $load.ref($M.0, $p765);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $p767 := $bitcast.ref.ref($p766);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $p768 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $i769 := $load.i8($M.0, $p768);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $i770 := $zext.i8.i32($i769);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $i771 := $mul.i32($i770, 25);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $i772 := $sext.i32.i64($i771);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $i774 := $p2i.ref.i64($p764);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $i775 := $eq.i64($i774, 0);
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    assume {:branchcond $i775} true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i775 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $p777 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(25, 8));
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p777, $p764);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $p778 := $add.ref($add.ref($p764, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $p779 := $bitcast.ref.ref($p778);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} $p780 := skb_tail_pointer($p764);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $p781 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $p782 := $load.ref($M.0, $p781);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} $i783 := pci_map_single($p782, $p780, 2353, 2);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p779, $i783);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $p784 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $p785 := $load.ref($M.0, $p784);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $i786 := $load.i64($M.0, $p779);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} $i787 := pci_dma_mapping_error($p785, $i786);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i788 := $ne.i32($i787, 0);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $p55 := $p764;
    assume {:branchcond $i788} true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i788 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $i789 := $load.i64($M.0, $p779);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i790 := $trunc.i64.i32($i789);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $p791 := $add.ref($add.ref($p767, $mul.ref($i772, 12)), $mul.ref(8, 1));
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p791, $i790);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $p792 := $add.ref($add.ref($p767, $mul.ref($i772, 12)), $mul.ref(0, 1));
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p792, $sub.i32(0, 2147481295));
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} $p793 := dev_alloc_skb(2353);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $p794 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $p795 := $load.ref($M.0, $p794);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $p796 := $bitcast.ref.ref($p795);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $p797 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $i798 := $load.i8($M.0, $p797);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $i799 := $zext.i8.i32($i798);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $i800 := $mul.i32($i799, 26);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $i801 := $sext.i32.i64($i800);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $i803 := $p2i.ref.i64($p793);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $i804 := $eq.i64($i803, 0);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i804} true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i804 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $p806 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(26, 8));
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p806, $p793);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $p807 := $add.ref($add.ref($p793, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $p808 := $bitcast.ref.ref($p807);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} $p809 := skb_tail_pointer($p793);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $p810 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $p811 := $load.ref($M.0, $p810);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} $i812 := pci_map_single($p811, $p809, 2353, 2);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p808, $i812);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $p813 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $p814 := $load.ref($M.0, $p813);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $i815 := $load.i64($M.0, $p808);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} $i816 := pci_dma_mapping_error($p814, $i815);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $i817 := $ne.i32($i816, 0);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $p55 := $p793;
    assume {:branchcond $i817} true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i817 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $i818 := $load.i64($M.0, $p808);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $i819 := $trunc.i64.i32($i818);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $p820 := $add.ref($add.ref($p796, $mul.ref($i801, 12)), $mul.ref(8, 1));
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p820, $i819);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $p821 := $add.ref($add.ref($p796, $mul.ref($i801, 12)), $mul.ref(0, 1));
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p821, $sub.i32(0, 2147481295));
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} $p822 := dev_alloc_skb(2353);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $p823 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $p824 := $load.ref($M.0, $p823);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $p825 := $bitcast.ref.ref($p824);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $p826 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i827 := $load.i8($M.0, $p826);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i828 := $zext.i8.i32($i827);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i829 := $mul.i32($i828, 27);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $i830 := $sext.i32.i64($i829);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $i832 := $p2i.ref.i64($p822);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $i833 := $eq.i64($i832, 0);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    assume {:branchcond $i833} true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i833 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $p835 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(27, 8));
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p835, $p822);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $p836 := $add.ref($add.ref($p822, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $p837 := $bitcast.ref.ref($p836);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} $p838 := skb_tail_pointer($p822);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $p839 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $p840 := $load.ref($M.0, $p839);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} $i841 := pci_map_single($p840, $p838, 2353, 2);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p837, $i841);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $p842 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $p843 := $load.ref($M.0, $p842);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i844 := $load.i64($M.0, $p837);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} $i845 := pci_dma_mapping_error($p843, $i844);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i846 := $ne.i32($i845, 0);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $p55 := $p822;
    assume {:branchcond $i846} true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i846 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $i847 := $load.i64($M.0, $p837);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $i848 := $trunc.i64.i32($i847);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $p849 := $add.ref($add.ref($p825, $mul.ref($i830, 12)), $mul.ref(8, 1));
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p849, $i848);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $p850 := $add.ref($add.ref($p825, $mul.ref($i830, 12)), $mul.ref(0, 1));
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p850, $sub.i32(0, 2147481295));
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} $p851 := dev_alloc_skb(2353);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $p852 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $p853 := $load.ref($M.0, $p852);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $p854 := $bitcast.ref.ref($p853);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $p855 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i856 := $load.i8($M.0, $p855);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $i857 := $zext.i8.i32($i856);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i858 := $mul.i32($i857, 28);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $i859 := $sext.i32.i64($i858);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $i861 := $p2i.ref.i64($p851);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i862 := $eq.i64($i861, 0);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i862} true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i862 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $p864 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(28, 8));
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p864, $p851);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $p865 := $add.ref($add.ref($p851, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $p866 := $bitcast.ref.ref($p865);
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} $p867 := skb_tail_pointer($p851);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $p868 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $p869 := $load.ref($M.0, $p868);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} $i870 := pci_map_single($p869, $p867, 2353, 2);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p866, $i870);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $p871 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $p872 := $load.ref($M.0, $p871);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $i873 := $load.i64($M.0, $p866);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} $i874 := pci_dma_mapping_error($p872, $i873);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i875 := $ne.i32($i874, 0);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $p55 := $p851;
    assume {:branchcond $i875} true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i875 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $i876 := $load.i64($M.0, $p866);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $i877 := $trunc.i64.i32($i876);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $p878 := $add.ref($add.ref($p854, $mul.ref($i859, 12)), $mul.ref(8, 1));
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p878, $i877);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $p879 := $add.ref($add.ref($p854, $mul.ref($i859, 12)), $mul.ref(0, 1));
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p879, $sub.i32(0, 2147481295));
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} $p880 := dev_alloc_skb(2353);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $p881 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $p882 := $load.ref($M.0, $p881);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $p883 := $bitcast.ref.ref($p882);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $p884 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $i885 := $load.i8($M.0, $p884);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $i886 := $zext.i8.i32($i885);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $i887 := $mul.i32($i886, 29);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $i888 := $sext.i32.i64($i887);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $i890 := $p2i.ref.i64($p880);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $i891 := $eq.i64($i890, 0);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i891} true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i891 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $p893 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(29, 8));
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p893, $p880);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $p894 := $add.ref($add.ref($p880, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $p895 := $bitcast.ref.ref($p894);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} $p896 := skb_tail_pointer($p880);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $p897 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $p898 := $load.ref($M.0, $p897);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $i899 := pci_map_single($p898, $p896, 2353, 2);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p895, $i899);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $p900 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $p901 := $load.ref($M.0, $p900);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $i902 := $load.i64($M.0, $p895);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} $i903 := pci_dma_mapping_error($p901, $i902);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $i904 := $ne.i32($i903, 0);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $p55 := $p880;
    assume {:branchcond $i904} true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i904 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $i905 := $load.i64($M.0, $p895);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $i906 := $trunc.i64.i32($i905);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $p907 := $add.ref($add.ref($p883, $mul.ref($i888, 12)), $mul.ref(8, 1));
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p907, $i906);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $p908 := $add.ref($add.ref($p883, $mul.ref($i888, 12)), $mul.ref(0, 1));
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p908, $sub.i32(0, 2147481295));
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} $p909 := dev_alloc_skb(2353);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $p910 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $p911 := $load.ref($M.0, $p910);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $p912 := $bitcast.ref.ref($p911);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $p913 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $i914 := $load.i8($M.0, $p913);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $i915 := $zext.i8.i32($i914);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $i916 := $mul.i32($i915, 30);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i917 := $sext.i32.i64($i916);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $i919 := $p2i.ref.i64($p909);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $i920 := $eq.i64($i919, 0);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    assume {:branchcond $i920} true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i920 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $p922 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(30, 8));
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p922, $p909);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $p923 := $add.ref($add.ref($p909, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $p924 := $bitcast.ref.ref($p923);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} $p925 := skb_tail_pointer($p909);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $p926 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $p927 := $load.ref($M.0, $p926);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} $i928 := pci_map_single($p927, $p925, 2353, 2);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p924, $i928);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $p929 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $p930 := $load.ref($M.0, $p929);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $i931 := $load.i64($M.0, $p924);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} $i932 := pci_dma_mapping_error($p930, $i931);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $i933 := $ne.i32($i932, 0);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $p55 := $p909;
    assume {:branchcond $i933} true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i933 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $i934 := $load.i64($M.0, $p924);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $i935 := $trunc.i64.i32($i934);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $p936 := $add.ref($add.ref($p912, $mul.ref($i917, 12)), $mul.ref(8, 1));
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p936, $i935);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $p937 := $add.ref($add.ref($p912, $mul.ref($i917, 12)), $mul.ref(0, 1));
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p937, $sub.i32(0, 2147481295));
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} $p938 := dev_alloc_skb(2353);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $p939 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $p940 := $load.ref($M.0, $p939);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p940);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $p941 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $i942 := $load.i8($M.0, $p941);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $i943 := $zext.i8.i32($i942);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $i944 := $mul.i32($i943, 31);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i944);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $i946 := $p2i.ref.i64($p938);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $i947 := $eq.i64($i946, 0);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i947} true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i947 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    $p949 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(31, 8));
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p949, $p938);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $p950 := $add.ref($add.ref($p938, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $p951 := $bitcast.ref.ref($p950);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} $p952 := skb_tail_pointer($p938);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $p953 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $p954 := $load.ref($M.0, $p953);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} $i955 := pci_map_single($p954, $p952, 2353, 2);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p951, $i955);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $p956 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $p957 := $load.ref($M.0, $p956);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $i958 := $load.i64($M.0, $p951);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} $i959 := pci_dma_mapping_error($p957, $i958);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $i960 := $ne.i32($i959, 0);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $p55 := $p938;
    assume {:branchcond $i960} true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i960 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $i961 := $load.i64($M.0, $p951);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $i962 := $trunc.i64.i32($i961);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $p963 := $add.ref($add.ref($p64, $mul.ref($i65, 12)), $mul.ref(8, 1));
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p963, $i962);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $p964 := $add.ref($add.ref($p64, $mul.ref($i65, 12)), $mul.ref(0, 1));
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p964, $sub.i32(0, 2147481295));
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p64, $mul.ref($i65, 12)), $mul.ref(0, 1));
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p63);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $i67 := $or.i32($i66, 1073741824);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p64, $mul.ref($i65, 12)), $mul.ref(0, 1));
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, $i67);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb236:
    assume {:verifier.code 0} true;
    assume $i960 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} kfree_skb($p55);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 1776)), $mul.ref(264, 1));
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} dev_err.ref.ref($p58, .str.15);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 12);
    goto $bb9;

  $bb233:
    assume {:verifier.code 0} true;
    assume $i947 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 1776)), $mul.ref(264, 1));
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} dev_err.ref.ref($p41, .str.14);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 12);
    goto $bb9;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb229:
    assume {:verifier.code 0} true;
    assume $i933 == 1;
    goto $bb18;

  $bb226:
    assume {:verifier.code 0} true;
    assume $i920 == 1;
    goto $bb14;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb222:
    assume {:verifier.code 0} true;
    assume $i904 == 1;
    goto $bb18;

  $bb219:
    assume {:verifier.code 0} true;
    assume $i891 == 1;
    goto $bb14;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb215:
    assume {:verifier.code 0} true;
    assume $i875 == 1;
    goto $bb18;

  $bb212:
    assume {:verifier.code 0} true;
    assume $i862 == 1;
    goto $bb14;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb208:
    assume {:verifier.code 0} true;
    assume $i846 == 1;
    goto $bb18;

  $bb205:
    assume {:verifier.code 0} true;
    assume $i833 == 1;
    goto $bb14;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb201:
    assume {:verifier.code 0} true;
    assume $i817 == 1;
    goto $bb18;

  $bb198:
    assume {:verifier.code 0} true;
    assume $i804 == 1;
    goto $bb14;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb194:
    assume {:verifier.code 0} true;
    assume $i788 == 1;
    goto $bb18;

  $bb191:
    assume {:verifier.code 0} true;
    assume $i775 == 1;
    goto $bb14;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb187:
    assume {:verifier.code 0} true;
    assume $i759 == 1;
    goto $bb18;

  $bb184:
    assume {:verifier.code 0} true;
    assume $i746 == 1;
    goto $bb14;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb180:
    assume {:verifier.code 0} true;
    assume $i730 == 1;
    goto $bb18;

  $bb177:
    assume {:verifier.code 0} true;
    assume $i717 == 1;
    goto $bb14;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb173:
    assume {:verifier.code 0} true;
    assume $i701 == 1;
    goto $bb18;

  $bb170:
    assume {:verifier.code 0} true;
    assume $i688 == 1;
    goto $bb14;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb166:
    assume {:verifier.code 0} true;
    assume $i672 == 1;
    goto $bb18;

  $bb163:
    assume {:verifier.code 0} true;
    assume $i659 == 1;
    goto $bb14;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb159:
    assume {:verifier.code 0} true;
    assume $i643 == 1;
    goto $bb18;

  $bb156:
    assume {:verifier.code 0} true;
    assume $i630 == 1;
    goto $bb14;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb152:
    assume {:verifier.code 0} true;
    assume $i614 == 1;
    goto $bb18;

  $bb149:
    assume {:verifier.code 0} true;
    assume $i601 == 1;
    goto $bb14;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb145:
    assume {:verifier.code 0} true;
    assume $i585 == 1;
    goto $bb18;

  $bb142:
    assume {:verifier.code 0} true;
    assume $i572 == 1;
    goto $bb14;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb138:
    assume {:verifier.code 0} true;
    assume $i556 == 1;
    goto $bb18;

  $bb135:
    assume {:verifier.code 0} true;
    assume $i543 == 1;
    goto $bb14;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb131:
    assume {:verifier.code 0} true;
    assume $i527 == 1;
    goto $bb18;

  $bb128:
    assume {:verifier.code 0} true;
    assume $i514 == 1;
    goto $bb14;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb124:
    assume {:verifier.code 0} true;
    assume $i498 == 1;
    goto $bb18;

  $bb121:
    assume {:verifier.code 0} true;
    assume $i485 == 1;
    goto $bb14;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb117:
    assume {:verifier.code 0} true;
    assume $i469 == 1;
    goto $bb18;

  $bb114:
    assume {:verifier.code 0} true;
    assume $i456 == 1;
    goto $bb14;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb110:
    assume {:verifier.code 0} true;
    assume $i440 == 1;
    goto $bb18;

  $bb107:
    assume {:verifier.code 0} true;
    assume $i427 == 1;
    goto $bb14;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb103:
    assume {:verifier.code 0} true;
    assume $i411 == 1;
    goto $bb18;

  $bb100:
    assume {:verifier.code 0} true;
    assume $i398 == 1;
    goto $bb14;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb96:
    assume {:verifier.code 0} true;
    assume $i382 == 1;
    goto $bb18;

  $bb93:
    assume {:verifier.code 0} true;
    assume $i369 == 1;
    goto $bb14;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb89:
    assume {:verifier.code 0} true;
    assume $i353 == 1;
    goto $bb18;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i340 == 1;
    goto $bb14;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb82:
    assume {:verifier.code 0} true;
    assume $i324 == 1;
    goto $bb18;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i311 == 1;
    goto $bb14;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb75:
    assume {:verifier.code 0} true;
    assume $i295 == 1;
    goto $bb18;

  $bb72:
    assume {:verifier.code 0} true;
    assume $i282 == 1;
    goto $bb14;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i266 == 1;
    goto $bb18;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i253 == 1;
    goto $bb14;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i237 == 1;
    goto $bb18;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i224 == 1;
    goto $bb14;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i208 == 1;
    goto $bb18;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i195 == 1;
    goto $bb14;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i179 == 1;
    goto $bb18;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i166 == 1;
    goto $bb14;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i150 == 1;
    goto $bb18;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i137 == 1;
    goto $bb14;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i121 == 1;
    goto $bb18;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i108 == 1;
    goto $bb14;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i92 == 1;
    goto $bb18;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb14;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb14;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 1776)), $mul.ref(264, 1));
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} dev_err.ref.ref($p30, .str.13);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 12);
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb5;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 32);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rtl8180_init_tx_ring: ref;

axiom rtl8180_init_tx_ring == $sub.ref(0, 328826);

procedure rtl8180_init_tx_ring($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation rtl8180_init_tx_ring($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i22: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p30: ref;
  var $i31: i64;
  var $p34: ref;
  var $i35: i64;
  var $p38: ref;
  var $i39: i64;
  var $p42: ref;
  var $i43: i1;
  var $i45: i64;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i64;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i44: i32;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1379} {:cexpr "rtl8180_init_tx_ring:arg:prio"} boogie_si_record_i32($i1);
    call {:si_unique_call 1380} {:cexpr "rtl8180_init_tx_ring:arg:entries"} boogie_si_record_i32($i2);
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i2);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $i10 := $mul.i64($i9, 32);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} $p11 := pci_zalloc_consistent($p8, $i10, $p3);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i14 == 1);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p12);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 255);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i1);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(392, 1)), $mul.ref($i22, 120)), $mul.ref(0, 1));
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p11);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.35, $p3);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i1);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(392, 1)), $mul.ref($i27, 120)), $mul.ref(8, 1));
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p30, $i26);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i1);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(392, 1)), $mul.ref($i31, 120)), $mul.ref(16, 1));
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 0);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i1);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(392, 1)), $mul.ref($i35, 120)), $mul.ref(20, 1));
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i2);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i1);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(392, 1)), $mul.ref($i39, 120)), $mul.ref(24, 1));
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} skb_queue_head_init($p42);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $i43 := $ult.i32(0, $i2);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb8:
    assume $i43 == 1;
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb11;

  $bb11:
    call $i45, $i46, $i47, $i48, $i49, $i50, $i51, $p53, $i54, $i55, $i44 := rtl8180_init_tx_ring_loop_$bb11($i2, $p3, $p12, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $p53, $i54, $i55, $i44);
    goto $bb11_last;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.35, $p3);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i64.i32($i45);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i44, 1);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $i48 := $urem.i32($i47, $i2);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $i49 := $mul.i32($i48, 32);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i46, $i49);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i44);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p12, $mul.ref($i51, 32)), $mul.ref(16, 1));
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i50);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i44, 1);
    call {:si_unique_call 1384} {:cexpr "i"} boogie_si_record_i32($i54);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $i55 := $ult.i32($i54, $i2);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i55 == 1);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i44 := $i54;
    goto $bb13_dummy;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 1776)), $mul.ref(264, 1));
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} dev_err.ref.ref.i32($p20, .str.16, $i1);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7493;
}



const rtl8180_init_hw: ref;

axiom rtl8180_init_hw == $sub.ref(0, 329858);

procedure rtl8180_init_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.41, $M.51, $M.27, $M.29, $M.31, $M.33, $M.20, $M.19, $M.22, $M.21, $M.24, $M.23, $M.26, $M.25, $CurrAddr;



implementation rtl8180_init_hw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i32;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p96: ref;
  var $i97: i64;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p105: ref;
  var $i106: i64;
  var $i107: i32;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p114: ref;
  var $i115: i64;
  var $i116: i32;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p122: ref;
  var $i123: i64;
  var $i124: i32;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p131: ref;
  var $i132: i64;
  var $i133: i32;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i8;
  var $i141: i16;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i8;
  var $i146: i32;
  var $i147: i32;
  var $i148: i8;
  var $p149: ref;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $i155: i8;
  var $i156: i16;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i8;
  var $i161: i32;
  var $i162: i32;
  var $i163: i8;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $i171: i32;
  var $i172: i1;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $i189: i32;
  var $i190: i1;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $i194: i8;
  var $i195: i16;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $i199: i8;
  var $i200: i32;
  var $i201: i32;
  var $i202: i8;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $i209: i8;
  var $i210: i16;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $i214: i8;
  var $i215: i32;
  var $i216: i32;
  var $i217: i8;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $i222: i8;
  var $i223: i1;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $i227: i8;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $i231: i32;
  var $i232: i32;
  var $i233: i8;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $i241: i32;
  var $i242: i8;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $i248: i32;
  var $i249: i1;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $p272: ref;
  var $p273: ref;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $p280: ref;
  var $p281: ref;
  var $p282: ref;
  var $i283: i8;
  var $p284: ref;
  var $p285: ref;
  var $p286: ref;
  var $i287: i32;
  var $i288: i32;
  var $i289: i8;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $i293: i8;
  var $p294: ref;
  var $p295: ref;
  var $p296: ref;
  var $i297: i32;
  var $i298: i32;
  var $i299: i8;
  var $p300: ref;
  var $p301: ref;
  var $p302: ref;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $p308: ref;
  var $p309: ref;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $p314: ref;
  var $i315: i32;
  var $i316: i32;
  var $i317: i32;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $p322: ref;
  var $p323: ref;
  var $p324: ref;
  var $p325: ref;
  var $p326: ref;
  var $p327: ref;
  var $p328: ref;
  var $i329: i32;
  var $i330: i1;
  var $p331: ref;
  var $i332: i32;
  var $i333: i1;
  var $p334: ref;
  var $i335: i8;
  var $i336: i32;
  var $i337: i8;
  var $p338: ref;
  var $i339: i8;
  var $i340: i32;
  var $i341: i1;
  var $i36: i32;
  var vslice_dummy_var_137: i8;
  var vslice_dummy_var_138: i8;
  var vslice_dummy_var_139: i8;
  var vslice_dummy_var_140: i8;
  var vslice_dummy_var_141: i16;
  var vslice_dummy_var_142: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 256)), $mul.ref(55, 1));
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} rtl818x_iowrite8($p3, $p6, 0);
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 256)), $mul.ref(55, 1));
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} vslice_dummy_var_137 := rtl818x_ioread8($p3, $p9);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} msleep(10);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} rtl8180_int_disable($p0);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 256)), $mul.ref(55, 1));
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} vslice_dummy_var_138 := rtl818x_ioread8($p3, $p13);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 256)), $mul.ref(55, 1));
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} $i18 := rtl818x_ioread8($p3, $p17);
    call {:si_unique_call 1391} {:cexpr "tmp"} boogie_si_record_i8($i18);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 256)), $mul.ref(55, 1));
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} rtl818x_iowrite8($p3, $p21, 16);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 256)), $mul.ref(55, 1));
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} vslice_dummy_var_139 := rtl818x_ioread8($p3, $p24);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} msleep(200);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 256)), $mul.ref(55, 1));
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $i29 := rtl818x_ioread8($p3, $p28);
    call {:si_unique_call 1396} {:cexpr "tmp___0"} boogie_si_record_i8($i29);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 16);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} rtl818x_iowrite8($p3, $p39, 64);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 256)), $mul.ref(55, 1));
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} vslice_dummy_var_140 := rtl818x_ioread8($p3, $p42);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} msleep(200);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} $i47 := rtl818x_ioread8($p3, $p46);
    call {:si_unique_call 1402} {:cexpr "tmp___1"} boogie_si_record_i8($i47);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 8);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 2);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i53 == 1);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 256)), $mul.ref(88, 1));
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} rtl818x_iowrite8($p3, $p59, 0);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 0);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 256)), $mul.ref(228, 1));
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(120, 1));
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.0, $p68);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i64.i32($i69);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} rtl818x_iowrite32($p3, $p67, $i70);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 2);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i73 == 1);
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 256)), $mul.ref(76, 1));
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(392, 1)), $mul.ref(4, 120)), $mul.ref(8, 1));
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $i97 := $load.i64($M.0, $p96);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i64.i32($i97);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} rtl818x_iowrite32($p3, $p93, $i98);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 256)), $mul.ref(36, 1));
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(392, 1)), $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $i106 := $load.i64($M.0, $p105);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i64.i32($i106);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} rtl818x_iowrite32($p3, $p102, $i107);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 256)), $mul.ref(32, 1));
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(392, 1)), $mul.ref(1, 120)), $mul.ref(8, 1));
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $i115 := $load.i64($M.0, $p114);
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i64.i32($i115);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} rtl818x_iowrite32($p3, $p111, $i116);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p118, $mul.ref(0, 256)), $mul.ref(20, 1));
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(392, 1)), $mul.ref(2, 120)), $mul.ref(8, 1));
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $i123 := $load.i64($M.0, $p122);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i64.i32($i123);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} rtl818x_iowrite32($p3, $p119, $i124);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p126, $mul.ref(0, 256)), $mul.ref(16, 1));
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $p128 := $bitcast.ref.ref($p127);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(392, 1)), $mul.ref(3, 120)), $mul.ref(8, 1));
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $i132 := $load.i64($M.0, $p131);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $i133 := $trunc.i64.i32($i132);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} rtl818x_iowrite32($p3, $p128, $i133);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p135, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} rtl818x_iowrite8($p3, $p136, $sub.i8(0, 64));
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p138, $mul.ref(0, 256)), $mul.ref(83, 1));
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} $i140 := rtl818x_ioread8($p3, $p139);
    call {:si_unique_call 1417} {:cexpr "tmp___2"} boogie_si_record_i8($i140);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $i141 := $zext.i8.i16($i140);
    call {:si_unique_call 1418} {:cexpr "reg"} boogie_si_record_i16($i141);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p143, $mul.ref(0, 256)), $mul.ref(83, 1));
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i16.i8($i141);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $i146 := $zext.i8.i32($i145);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $i147 := $and.i32($i146, 247);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $i148 := $trunc.i32.i8($i147);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} rtl818x_iowrite8($p3, $p144, $i148);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.0, $p149);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i150, 1);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.0, $p164);
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p165, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} rtl818x_iowrite8($p3, $p166, 0);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.0, $p167);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p168, $mul.ref(0, 256)), $mul.ref(72, 1));
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} rtl818x_iowrite32($p3, $p169, 0);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.0, $p170);
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $i172 := $ne.i32($i171, 0);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i172 == 1);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $p180 := $load.ref($M.0, $p179);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p180, $mul.ref(0, 256)), $mul.ref(95, 1));
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} rtl818x_iowrite8($p3, $p181, 0);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p183, $mul.ref(0, 256)), $mul.ref(120, 1));
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} rtl818x_iowrite8($p3, $p184, 6);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.0, $p185);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p186, $mul.ref(0, 256)), $mul.ref(121, 1));
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} rtl818x_iowrite8($p3, $p187, 76);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $i189 := $load.i32($M.0, $p188);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $i190 := $eq.i32($i189, 1);
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    assume {:branchcond $i190} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $i248 := $load.i32($M.0, $p247);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i248, 2);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i249 == 1);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $p322 := $load.ref($M.0, $p321);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($p322, $mul.ref(0, 256)), $mul.ref(217, 1));
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} rtl818x_iowrite8($p3, $p323, 6);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(8, 1));
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $p325 := $load.ref($M.0, $p324);
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p325, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $p327 := $load.ref($M.0, $p326);
    call {:si_unique_call 1475} devirtbounce.1($p327, $p0);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $i329 := $load.i32($M.0, $p328);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $i330 := $eq.i32($i329, 0);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    assume {:branchcond $i330} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i330 == 1);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} rtl8180_conf_basic_rates($p0, 499);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $i332 := $load.i32($M.0, $p331);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $i333 := $eq.i32($i332, 2);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i333} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  $bb35:
    assume $i333 == 1;
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2184, 1));
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $i335 := $load.i8($M.0, $p334);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    $i336 := $zext.i8.i32($i335);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $i337 := $trunc.i32.i8($i336);
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2183, 1));
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $i339 := $load.i8($M.0, $p338);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $i340 := $zext.i8.i32($i339);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $i341 := $ne.i32($i340, 0);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} rtl8187se_set_antenna_config($p0, $i337, $i341);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i330 == 1;
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} rtl8180_conf_basic_rates($p0, 3);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i249 == 1;
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $p251 := $load.ref($M.0, $p250);
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $p252 := $bitcast.ref.ref($p251);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($p252, $mul.ref(240, 2));
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} rtl818x_iowrite16($p3, $p253, 4095);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $p255 := $load.ref($M.0, $p254);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $p256 := $bitcast.ref.ref($p255);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($p256, $mul.ref(240, 2));
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} vslice_dummy_var_141 := rtl818x_ioread16($p3, $p257);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $p260 := $load.ref($M.0, $p259);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p260, $mul.ref(0, 256)), $mul.ref(147, 1));
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} rtl818x_iowrite8($p3, $p261, 66);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $p263 := $load.ref($M.0, $p262);
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p263, $mul.ref(0, 256)), $mul.ref(191, 1));
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} rtl818x_iowrite8($p3, $p264, 0);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $p266 := $load.ref($M.0, $p265);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p266, $mul.ref(0, 256)), $mul.ref(232, 1));
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} rtl818x_iowrite16($p3, $p267, $sub.i16(0, 1456));
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $p269 := $load.ref($M.0, $p268);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p269, $mul.ref(0, 256)), $mul.ref(226, 1));
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} rtl818x_iowrite16($p3, $p270, 0);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} rtl8187se_mac_config($p0);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $p272 := $load.ref($M.0, $p271);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $p273 := $bitcast.ref.ref($p272);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($p273, $mul.ref(313, 2));
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} rtl818x_iowrite16($p3, $p274, 22170);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $p276 := $load.ref($M.0, $p275);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $p277 := $bitcast.ref.ref($p276);
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($p277, $mul.ref(313, 2));
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} vslice_dummy_var_142 := rtl818x_ioread16($p3, $p278);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} rtl8180_set_anaparam($p3, $sub.i32(0, 1341829888));
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} rtl8180_set_anaparam2($p3, 1222);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} rtl8180_set_anaparam3($p3, 16);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $p281 := $load.ref($M.0, $p280);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p281, $mul.ref(0, 256)), $mul.ref(216, 1));
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} $i283 := rtl818x_ioread8($p3, $p282);
    call {:si_unique_call 1460} {:cexpr "tmp___6"} boogie_si_record_i8($i283);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $p285 := $load.ref($M.0, $p284);
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p285, $mul.ref(0, 256)), $mul.ref(216, 1));
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $i287 := $zext.i8.i32($i283);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $i288 := $and.i32($i287, 127);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $i289 := $trunc.i32.i8($i288);
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} rtl818x_iowrite8($p3, $p286, $i289);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $p291 := $load.ref($M.0, $p290);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p291, $mul.ref(0, 256)), $mul.ref(94, 1));
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} $i293 := rtl818x_ioread8($p3, $p292);
    call {:si_unique_call 1463} {:cexpr "tmp___7"} boogie_si_record_i8($i293);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $p295 := $load.ref($M.0, $p294);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p295, $mul.ref(0, 256)), $mul.ref(94, 1));
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $i297 := $zext.i8.i32($i293);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $i298 := $or.i32($i297, 8);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $i299 := $trunc.i32.i8($i298);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} rtl818x_iowrite8($p3, $p296, $i299);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $p301 := $load.ref($M.0, $p300);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p301, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} rtl818x_iowrite16($p3, $p302, 1152);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $p304 := $load.ref($M.0, $p303);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p304, $mul.ref(0, 256)), $mul.ref(130, 1));
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} rtl818x_iowrite16($p3, $p305, 7167);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $p307 := $load.ref($M.0, $p306);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p307, $mul.ref(0, 256)), $mul.ref(132, 1));
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} rtl818x_iowrite16($p3, $p308, 9352);
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $p310 := $load.ref($M.0, $p309);
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p310, $mul.ref(0, 256)), $mul.ref(140, 1));
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} rtl818x_iowrite32($p3, $p311, 16387);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $p313 := $load.ref($M.0, $p312);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p313, $mul.ref(0, 256)), $mul.ref(136, 1));
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} $i315 := rtl818x_ioread32($p3, $p314);
    call {:si_unique_call 1470} {:cexpr "reg32"} boogie_si_record_i32($i315);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $i316 := $and.i32($i315, 16776960);
    call {:si_unique_call 1471} {:cexpr "reg32"} boogie_si_record_i32($i316);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $i317 := $or.i32($i316, $sub.i32(0, 1207959468));
    call {:si_unique_call 1472} {:cexpr "reg32"} boogie_si_record_i32($i317);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $p319 := $load.ref($M.0, $p318);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p319, $mul.ref(0, 256)), $mul.ref(136, 1));
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} rtl818x_iowrite32($p3, $p320, $i317);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb23:
    assume $i190 == 1;
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.0, $p191);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p192, $mul.ref(0, 256)), $mul.ref(144, 1));
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} $i194 := rtl818x_ioread8($p3, $p193);
    call {:si_unique_call 1432} {:cexpr "tmp___4"} boogie_si_record_i8($i194);
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $i195 := $zext.i8.i16($i194);
    call {:si_unique_call 1433} {:cexpr "reg"} boogie_si_record_i16($i195);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $p197 := $load.ref($M.0, $p196);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p197, $mul.ref(0, 256)), $mul.ref(144, 1));
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $i199 := $trunc.i16.i8($i195);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $i200 := $zext.i8.i32($i199);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $i201 := $and.i32($i200, 191);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $i202 := $trunc.i32.i8($i201);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} rtl818x_iowrite8($p3, $p198, $i202);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $p204 := $load.ref($M.0, $p203);
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p204, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} rtl818x_iowrite8($p3, $p205, $sub.i8(0, 64));
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.0, $p206);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p207, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} $i209 := rtl818x_ioread8($p3, $p208);
    call {:si_unique_call 1437} {:cexpr "tmp___5"} boogie_si_record_i8($i209);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $i210 := $zext.i8.i16($i209);
    call {:si_unique_call 1438} {:cexpr "reg"} boogie_si_record_i16($i210);
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p212, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $i214 := $trunc.i16.i8($i210);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $i215 := $zext.i8.i32($i214);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $i216 := $or.i32($i215, 4);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $i217 := $trunc.i32.i8($i216);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} rtl818x_iowrite8($p3, $p213, $i217);
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $p219 := $load.ref($M.0, $p218);
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p219, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} rtl818x_iowrite8($p3, $p220, 0);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(24, 1));
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $i222 := $load.i8($M.0, $p221);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $i223 := $trunc.i8.i1($i222);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i223 == 1);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $p244 := $load.ref($M.0, $p243);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $p245 := $bitcast.ref.ref($p244);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($p245, $mul.ref(511, 1));
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} rtl818x_iowrite8($p3, $p246, 53);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i223 == 1;
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $p225 := $load.ref($M.0, $p224);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p225, $mul.ref(0, 256)), $mul.ref(94, 1));
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} $i227 := rtl818x_ioread8($p3, $p226);
    call {:si_unique_call 1442} {:cexpr "reg___0"} boogie_si_record_i8($i227);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $p229 := $load.ref($M.0, $p228);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p229, $mul.ref(0, 256)), $mul.ref(94, 1));
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $i231 := $zext.i8.i32($i227);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $i232 := $or.i32($i231, 1);
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $i233 := $trunc.i32.i8($i232);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} rtl818x_iowrite8($p3, $p230, $i233);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $p235 := $load.ref($M.0, $p234);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $p236 := $bitcast.ref.ref($p235);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($p236, $mul.ref(255, 1));
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} rtl818x_iowrite8($p3, $p237, 53);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.0, $p238);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p239, $mul.ref(0, 256)), $mul.ref(94, 1));
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $i241 := $zext.i8.i32($i227);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $i242 := $trunc.i32.i8($i241);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} rtl818x_iowrite8($p3, $p240, $i242);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb20:
    assume $i172 == 1;
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.0, $p173);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p174, $mul.ref(0, 256)), $mul.ref(176, 1));
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} rtl818x_iowrite8($p3, $p175, 0);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p177, $mul.ref(0, 256)), $mul.ref(190, 1));
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} rtl818x_iowrite8($p3, $p178, 0);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i151 == 1;
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p153, $mul.ref(0, 256)), $mul.ref(83, 1));
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} $i155 := rtl818x_ioread8($p3, $p154);
    call {:si_unique_call 1421} {:cexpr "tmp___3"} boogie_si_record_i8($i155);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $i156 := $zext.i8.i16($i155);
    call {:si_unique_call 1422} {:cexpr "reg"} boogie_si_record_i16($i156);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.0, $p157);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p158, $mul.ref(0, 256)), $mul.ref(83, 1));
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i16.i8($i156);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $i161 := $zext.i8.i32($i160);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $i162 := $or.i32($i161, 16);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i32.i8($i162);
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} rtl818x_iowrite8($p3, $p159, $i163);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i73 == 1;
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 256)), $mul.ref(76, 1));
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(392, 1)), $mul.ref(1, 120)), $mul.ref(8, 1));
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $i80 := $load.i64($M.0, $p79);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i64.i32($i80);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} rtl818x_iowrite32($p3, $p76, $i81);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 256)), $mul.ref(32, 1));
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(392, 1)), $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.0, $p88);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i64.i32($i89);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} rtl818x_iowrite32($p3, $p85, $i90);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i62 == 1;
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2164, 1));
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} rtl8180_set_anaparam($p3, $i64);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i53 == 1;
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 256)), $mul.ref(88, 1));
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} rtl818x_iowrite8($p3, $p56, 16);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i50 == 1;
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} rtl8180_config_cardbus($p0);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i32 == 1;
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 1776)), $mul.ref(264, 1));
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} dev_err.ref.ref($p35, .str.18);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 110);
    goto $bb3;
}



const rtl8187se_interrupt: ref;

axiom rtl8187se_interrupt == $sub.ref(0, 330890);

procedure rtl8187se_interrupt($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.0, $CurrAddr, assertsPassed;



implementation rtl8187se_interrupt($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} {:cexpr "rtl8187se_interrupt:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} ldv_spin_lock();
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 256)), $mul.ref(60, 1));
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} $i10 := rtl818x_ioread32($p5, $p9);
    call {:si_unique_call 1482} {:cexpr "reg"} boogie_si_record_i32($i10);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, $sub.i32(0, 1));
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 1484} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 256)), $mul.ref(60, 1));
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} rtl818x_iowrite32($p5, $p20, $i10);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i10, 2097152);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i10, 393216);
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i10, 24576);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i10, 1536);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i10, 96);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i10, 24);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i10, 2436);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i10, 2048);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} spin_unlock_irqrestore($p46, $u0);
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $i40 := $sgt.i32($u1, 2);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb28:
    assume $i40 == 1;
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} $i41 := net_ratelimit();
    call {:si_unique_call 1495} {:cexpr "tmp___0"} boogie_si_record_i32($i41);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i42 == 1;
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 1776)), $mul.ref(264, 1));
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} dev_err.ref.ref($p45, .str.8);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb23:
    assume $i37 == 1;
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} rtl8180_handle_rx($p2);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i35 == 1;
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} rtl8180_handle_tx($p2, 3);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i33 == 1;
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} rtl8180_handle_tx($p2, 2);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} rtl8180_handle_tx($p2, 1);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} rtl8180_handle_tx($p2, 0);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} rtl8180_handle_tx($p2, 4);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 256)), $mul.ref(72, 1));
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} rtl818x_iowrite32($p5, $p25, 0);
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} spin_unlock_irqrestore($p16, $u0);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_request_irq_42: ref;

axiom ldv_request_irq_42 == $sub.ref(0, 331922);

procedure ldv_request_irq_42($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $M.36, $M.27, $M.30, $M.37, $M.29, $M.32, $M.38, $M.31, $M.34, $M.39, $M.33;



implementation ldv_request_irq_42($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} {:cexpr "ldv_request_irq_42:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 1499} {:cexpr "ldv_request_irq_42:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 1501} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} $i6 := reg_check_2($p1);
    call {:si_unique_call 1503} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} activate_suitable_irq_2($i0, $p4);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const rtl8180_interrupt: ref;

axiom rtl8180_interrupt == $sub.ref(0, 332954);

procedure rtl8180_interrupt($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.41, $CurrAddr, assertsPassed;



implementation rtl8180_interrupt($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} {:cexpr "rtl8180_interrupt:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} spin_lock($p6);
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 256)), $mul.ref(60, 1));
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} $i12 := rtl818x_ioread16($p5, $p11);
    call {:si_unique_call 1508} {:cexpr "reg"} boogie_si_record_i16($i12);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 65535);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 1510} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 256)), $mul.ref(60, 1));
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i12);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} rtl818x_iowrite16($p5, $p24, $i26);
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i12);
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 3072);
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i12);
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 12);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i12);
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 3);
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} spin_unlock($p36);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb11:
    assume $i35 == 1;
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} rtl8180_handle_rx($p2);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} rtl8180_handle_tx($p2, 0);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i29 == 1;
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} rtl8180_handle_tx($p2, 1);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} spin_unlock($p19);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_request_irq_43: ref;

axiom ldv_request_irq_43 == $sub.ref(0, 333986);

procedure ldv_request_irq_43($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $M.36, $M.27, $M.30, $M.37, $M.29, $M.32, $M.38, $M.31, $M.34, $M.39, $M.33;



implementation ldv_request_irq_43($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} {:cexpr "ldv_request_irq_43:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 1518} {:cexpr "ldv_request_irq_43:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 1520} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} $i6 := reg_check_2($p1);
    call {:si_unique_call 1522} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} activate_suitable_irq_2($i0, $p4);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const rtl8180_int_enable: ref;

axiom rtl8180_int_enable == $sub.ref(0, 335018);

procedure rtl8180_int_enable($p0: ref);
  free requires assertsPassed;



implementation rtl8180_int_enable($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 2);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 256)), $mul.ref(60, 1));
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} rtl818x_iowrite16($p3, $p14, $sub.i16(0, 1));
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 256)), $mul.ref(108, 1));
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} rtl818x_iowrite32($p3, $p9, 421884);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 336050);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 1527} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 1529} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const reg_check_2: ref;

axiom reg_check_2 == $sub.ref(0, 337082);

procedure reg_check_2($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation reg_check_2($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, $p2i.ref.i64(rtl8180_interrupt));
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const activate_suitable_irq_2: ref;

axiom activate_suitable_irq_2 == $sub.ref(0, 338114);

procedure activate_suitable_irq_2($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.28, $M.36, $M.27, $M.30, $M.37, $M.29, $M.32, $M.38, $M.31, $M.34, $M.39, $M.33;



implementation activate_suitable_irq_2($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} {:cexpr "activate_suitable_irq_2:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $i2 := $M.27;
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.29;
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.31;
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.33;
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $M.34 := $i0;
    call {:si_unique_call 1537} {:cexpr "ldv_irq_line_2_3"} boogie_si_record_i32($i0);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $M.39 := $p1;
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 1538} {:cexpr "ldv_irq_2_3"} boogie_si_record_i32(1);
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $M.32 := $i0;
    call {:si_unique_call 1535} {:cexpr "ldv_irq_line_2_2"} boogie_si_record_i32($i0);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $M.38 := $p1;
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 1536} {:cexpr "ldv_irq_2_2"} boogie_si_record_i32(1);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $M.30 := $i0;
    call {:si_unique_call 1533} {:cexpr "ldv_irq_line_2_1"} boogie_si_record_i32($i0);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $M.37 := $p1;
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 1534} {:cexpr "ldv_irq_2_1"} boogie_si_record_i32(1);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $M.28 := $i0;
    call {:si_unique_call 1531} {:cexpr "ldv_irq_line_2_0"} boogie_si_record_i32($i0);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $M.36 := $p1;
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1532} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32(1);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 339146);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1539} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1540} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1541} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1542} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 340178);

procedure spin_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.41;



implementation spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} ldv_spin_lock();
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} ldv_spin_lock_5($p0);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 341210);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.41;



implementation spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} ldv_spin_unlock();
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} ldv_spin_unlock_9($p0);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    return;
}



const rtl8180_handle_tx: ref;

axiom rtl8180_handle_tx == $sub.ref(0, 342242);

procedure rtl8180_handle_tx($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rtl8180_handle_tx($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $i36: i32;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i8;
  var $p53: ref;
  var $p54: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i8;
  var $i60: i8;
  var $i61: i8;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} {:cexpr "rtl8180_handle_tx:arg:prio"} boogie_si_record_i32($i1);
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(392, 1));
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i1);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref($i7, 120)), $mul.ref(24, 1));
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} $i10 := skb_queue_len($p9);
    call {:si_unique_call 1549} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p12, $p13, $p14, $i15, $i16, $p18, $i19, $i20, $p21, $i22, $i23, $p24, $i25, $i26, $p27, $p28, $p29, $p30, $p31, $p32, $i33, $i34, $p35, $i36, $i37, $p38, $p39, $i40, $i41, $i42, $i43, $i44, $p45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $p53, $p54, $p57, $i58, $i59, $i60, $i61, $p62, $i63, $p64, $i65, $i66, $i67, $i68, $i69 := rtl8180_handle_tx_loop_$bb4($p0, $i1, $p4, $p6, $i7, $p9, $p12, $p13, $p14, $i15, $i16, $p18, $i19, $i20, $p21, $i22, $i23, $p24, $i25, $i26, $p27, $p28, $p29, $p30, $p31, $p32, $i33, $i34, $p35, $i36, $i37, $p38, $p39, $i40, $i41, $i42, $i43, $i44, $p45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $p53, $p54, $p57, $i58, $i59, $i60, $i61, $p62, $i63, $p64, $i65, $i66, $i67, $i68, $i69);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref($i7, 120)), $mul.ref(0, 1));
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref($i7, 120)), $mul.ref(16, 1));
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p13, $mul.ref($i16, 32)), $mul.ref(0, 1));
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    call {:si_unique_call 1550} {:cexpr "flags"} boogie_si_record_i32($i19);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref($i7, 120)), $mul.ref(16, 1));
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, 1);
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref($i7, 120)), $mul.ref(20, 1));
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $i26 := $urem.i32($i23, $i25);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref($i7, 120)), $mul.ref(16, 1));
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref($i7, 120)), $mul.ref(24, 1));
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} $p29 := __skb_dequeue($p28);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p13, $mul.ref($i16, 32)), $mul.ref(8, 1));
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i33);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p29, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i36);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} pci_unmap_single($p31, $i34, $i37, 1);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} $p38 := IEEE80211_SKB_CB($p29);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} ieee80211_tx_info_clear_status($p38);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 4);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i19);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i50, 1);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i51);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p38, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($add.ref($p54, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $i59 := $and.i8($i52, 31);
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $i60 := $and.i8($i58, $sub.i8(0, 32));
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $i61 := $or.i8($i60, $i59);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p57, $i61);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} ieee80211_tx_status_irqsafe($p0, $p29);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p6, $mul.ref($i7, 120)), $mul.ref(24, 1));
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} $i63 := skb_queue_len($p62);
    call {:si_unique_call 1557} {:cexpr "tmp"} boogie_si_record_i32($i63);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p6, $mul.ref($i7, 120)), $mul.ref(20, 1));
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $i66 := $sub.i32($i65, $i63);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 2);
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} $i68 := skb_queue_len($p9);
    call {:si_unique_call 1560} {:cexpr "tmp___0"} boogie_si_record_i32($i68);
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i69 == 1);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i69 == 1;
    goto $bb19_dummy;

  $bb16:
    assume $i67 == 1;
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} ieee80211_wake_queue($p0, $i1);
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume $i42 == 1;
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i19, 32768);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb12;

  $bb13:
    assume $i44 == 1;
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p38, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i46, 512);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p38, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb19_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const rtl8180_handle_rx: ref;

axiom rtl8180_handle_rx == $sub.ref(0, 343274);

procedure rtl8180_handle_rx($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation rtl8180_handle_rx($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $i45: i64;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i64;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $i80: i32;
  var $i81: i64;
  var $i82: i64;
  var $i83: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i32;
  var $i104: i32;
  var $i105: i8;
  var $i106: i32;
  var $i107: i32;
  var $i108: i8;
  var $p109: ref;
  var $i110: i32;
  var $i111: i8;
  var $i112: i32;
  var $i113: i32;
  var $i114: i8;
  var $p115: ref;
  var $i116: i32;
  var $i117: i8;
  var $i118: i32;
  var $i119: i32;
  var $i120: i8;
  var $p121: ref;
  var $i122: i32;
  var $i123: i1;
  var $i124: i1;
  var $i125: i1;
  var $i126: i1;
  var $p127: ref;
  var $i128: i8;
  var $i129: i32;
  var $i130: i1;
  var $i131: i32;
  var $i132: i32;
  var $i133: i1;
  var $i134: i32;
  var $i136: i32;
  var $i135: i32;
  var $i137: i8;
  var $i138: i32;
  var $i139: i32;
  var $i140: i1;
  var $i141: i32;
  var $i143: i32;
  var $i142: i32;
  var $i144: i8;
  var $i145: i32;
  var $i146: i32;
  var $i147: i8;
  var $i149: i32;
  var $i150: i32;
  var $i151: i1;
  var $i152: i32;
  var $i154: i32;
  var $i153: i32;
  var $i155: i8;
  var $i156: i32;
  var $i157: i32;
  var $i158: i1;
  var $i159: i32;
  var $i161: i32;
  var $i160: i32;
  var $i162: i8;
  var $i163: i32;
  var $i164: i32;
  var $i165: i8;
  var $i148: i8;
  var $i167: i8;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $i172: i32;
  var $i173: i8;
  var $i174: i32;
  var $i175: i8;
  var $i176: i8;
  var $p177: ref;
  var $i178: i8;
  var $i179: i32;
  var $i180: i1;
  var $i181: i32;
  var $i182: i8;
  var $i183: i32;
  var $i184: i32;
  var $i185: i8;
  var $i186: i32;
  var $i187: i32;
  var $i188: i8;
  var $i190: i32;
  var $i191: i32;
  var $i192: i32;
  var $i193: i32;
  var $i194: i32;
  var $i195: i32;
  var $i196: i8;
  var $i197: i32;
  var $i198: i32;
  var $i199: i64;
  var $p200: ref;
  var $i201: i8;
  var $i202: i32;
  var $i203: i32;
  var $i204: i32;
  var $i205: i8;
  var $i189: i8;
  var $i166: i8;
  var $p206: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $i212: i16;
  var $p213: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $i219: i32;
  var $i220: i8;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $i224: i32;
  var $i225: i32;
  var $p226: ref;
  var $i227: i32;
  var $i228: i1;
  var $p229: ref;
  var $i230: i32;
  var $i231: i32;
  var $p232: ref;
  var $i233: i32;
  var $i234: i1;
  var $p235: ref;
  var $i236: i32;
  var $i237: i32;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $i243: i32;
  var $i244: i64;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $i53: i8;
  var $p54: ref;
  var $i84: i8;
  var $p85: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $i252: i64;
  var $i253: i32;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $i257: i32;
  var $i258: i1;
  var $p259: ref;
  var $i260: i32;
  var $i261: i32;
  var $p262: ref;
  var $p263: ref;
  var $i264: i32;
  var $i265: i32;
  var $i266: i32;
  var $p267: ref;
  var $i268: i32;
  var $i269: i1;
  var $i5: i32;
  var $i6: i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var vslice_dummy_var_143: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $i5, $i6 := 31, 1;
    goto $bb1;

  $bb1:
    call $p7, $p8, $p9, $i10, $p11, $i12, $i13, $i14, $i15, $p16, $p17, $i18, $i19, $p21, $p22, $p23, $i24, $i25, $p26, $p27, $i28, $p29, $i30, $p31, $i32, $p33, $i34, $p39, $p40, $i41, $p42, $i43, $p44, $i45, $i35, $i36, $i37, $i38, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $p55, $p56, $p57, $p58, $p59, $p60, $p61, $p62, $p63, $p64, $p65, $p66, $p67, $p69, $p71, $p73, $p75, $p76, $p77, $i78, $i79, $i80, $i81, $i82, $i83, $p86, $p87, $p88, $i89, $p90, $p91, $i92, $i93, $p94, $p95, $p96, $p97, $p98, $p99, $p100, $i101, $i102, $i104, $i105, $i106, $i107, $i108, $p109, $i110, $i111, $i112, $i113, $i114, $p115, $i116, $i117, $i118, $i119, $i120, $p121, $i122, $i123, $i124, $i125, $i126, $p127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i136, $i135, $i137, $i138, $i139, $i140, $i141, $i143, $i142, $i144, $i145, $i146, $i147, $i149, $i150, $i151, $i152, $i154, $i153, $i155, $i156, $i157, $i158, $i159, $i161, $i160, $i162, $i163, $i164, $i165, $i148, $i167, $p168, $p169, $p170, $p171, $i172, $i173, $i174, $i175, $i176, $p177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $p200, $i201, $i202, $i203, $i204, $i205, $i189, $i166, $p206, $p209, $p210, $p211, $i212, $p213, $p216, $p217, $p218, $i219, $i220, $p221, $p222, $p223, $i224, $i225, $p226, $i227, $i228, $p229, $i230, $i231, $p232, $i233, $i234, $p235, $i236, $i237, $p238, $p239, $p240, $p241, $p242, $i243, $i244, $p246, $p247, $p248, $i53, $p54, $i84, $p85, $p249, $p250, $p251, $i252, $i253, $p254, $p255, $p256, $i257, $i258, $p259, $i260, $i261, $p262, $p263, $i264, $i265, $i266, $p267, $i268, $i269, $i5, $i6, cmdloc_dummy_var_15, cmdloc_dummy_var_16, cmdloc_dummy_var_17, vslice_dummy_var_143 := rtl8180_handle_rx_loop_$bb1($p0, $p1, $p4, $p7, $p8, $p9, $i10, $p11, $i12, $i13, $i14, $i15, $p16, $p17, $i18, $i19, $p21, $p22, $p23, $i24, $i25, $p26, $p27, $i28, $p29, $i30, $p31, $i32, $p33, $i34, $p39, $p40, $i41, $p42, $i43, $p44, $i45, $i35, $i36, $i37, $i38, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $p55, $p56, $p57, $p58, $p59, $p60, $p61, $p62, $p63, $p64, $p65, $p66, $p67, $p69, $p71, $p73, $p75, $p76, $p77, $i78, $i79, $i80, $i81, $i82, $i83, $p86, $p87, $p88, $i89, $p90, $p91, $i92, $i93, $p94, $p95, $p96, $p97, $p98, $p99, $p100, $i101, $i102, $i104, $i105, $i106, $i107, $i108, $p109, $i110, $i111, $i112, $i113, $i114, $p115, $i116, $i117, $i118, $i119, $i120, $p121, $i122, $i123, $i124, $i125, $i126, $p127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i136, $i135, $i137, $i138, $i139, $i140, $i141, $i143, $i142, $i144, $i145, $i146, $i147, $i149, $i150, $i151, $i152, $i154, $i153, $i155, $i156, $i157, $i158, $i159, $i161, $i160, $i162, $i163, $i164, $i165, $i148, $i167, $p168, $p169, $p170, $p171, $i172, $i173, $i174, $i175, $i176, $p177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $p200, $i201, $i202, $i203, $i204, $i205, $i189, $i166, $p206, $p209, $p210, $p211, $i212, $p213, $p216, $p217, $p218, $i219, $i220, $p221, $p222, $p223, $i224, $i225, $p226, $i227, $i228, $p229, $i230, $i231, $p232, $i233, $i234, $p235, $i236, $i237, $p238, $p239, $p240, $p241, $p242, $i243, $i244, $p246, $p247, $p248, $i53, $p54, $i84, $p85, $p249, $p250, $p251, $i252, $i253, $p254, $p255, $p256, $i257, $i258, $p259, $i260, $i261, $p262, $p263, $i264, $i265, $i266, $p267, $i268, $i269, $i5, $i6, cmdloc_dummy_var_15, cmdloc_dummy_var_16, cmdloc_dummy_var_17, vslice_dummy_var_143);
    goto $bb1_last;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(128, 1));
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $i14 := $mul.i32($i10, $i13);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i14);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p8, $mul.ref($i15, 1));
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(128, 1));
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i18);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref($i19, 8));
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 2);
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p16);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    call {:si_unique_call 1567} {:cexpr "flags"} boogie_si_record_i32($i41);
    call {:si_unique_call 1568} devirtbounce(0);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p39, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    call {:si_unique_call 1569} {:cexpr "flags2"} boogie_si_record_i32($i43);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p39, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    call {:si_unique_call 1570} {:cexpr "tsft"} boogie_si_record_i64($i45);
    assume {:verifier.code 0} true;
    $i35, $i36, $i37, $i38 := $i41, $i43, 0, $i45;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i35, 0);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i35, 201359360);
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i32($i48);
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i49);
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 1572} {:cexpr "tmp___5"} boogie_si_record_i64($i51);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i52 == 1);
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p55, 0);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, 0);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, 0);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, 0);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p59, 0);
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(22, 1));
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, 0);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(23, 1));
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, 0);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, 0);
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(25, 1));
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p63, 0);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, 0);
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(27, 1));
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p65, 0);
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p66, 0);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(29, 1));
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p67, 0);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(30, 1)), $mul.ref(0, 1));
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p69, 0);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(30, 1)), $mul.ref(1, 1));
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, 0);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(30, 1)), $mul.ref(2, 1));
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p73, 0);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(30, 1)), $mul.ref(3, 1));
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p75, 0);
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(34, 1));
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p76, 0);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} $p77 := dev_alloc_skb(2353);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $i79 := $eq.i64($i78, 0);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $i80 := $zext.i1.i32($i79);
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i80);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} $i82 := ldv__builtin_expect($i81, 0);
    call {:si_unique_call 1575} {:cexpr "tmp___0"} boogie_si_record_i64($i82);
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    $i83 := $ne.i64($i82, 0);
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} $p86 := skb_tail_pointer($p77);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} $i89 := pci_map_single($p88, $p86, 2353, 2);
    call {:si_unique_call 1578} {:cexpr "mapping"} boogie_si_record_i64($i89);
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} $i92 := pci_dma_mapping_error($p91, $i89);
    call {:si_unique_call 1580} {:cexpr "tmp___2"} boogie_si_record_i32($i92);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p22, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $i101 := $load.i64($M.0, $p100);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} pci_unmap_single($p98, $i101, 2353, 2);
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i35, 4095);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} vslice_dummy_var_143 := skb_put($p22, $i102);
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $i104 := $lshr.i32($i36, 15);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i32.i8($i104);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i105);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $i107 := $and.i32($i106, 1);
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i8($i107);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(27, 1));
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p109, $i108);
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $i110 := $lshr.i32($i35, 20);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i8($i110);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $i113 := $and.i32($i112, 15);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i32.i8($i113);
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(23, 1));
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p115, $i114);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $i116 := $lshr.i32($i36, 17);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i32.i8($i116);
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i117);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $i119 := $and.i32($i118, 127);
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i32.i8($i119);
    call {:si_unique_call 1585} {:cexpr "agc"} boogie_si_record_i8($i120);
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.0, $p121);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i123 := $slt.i32($i122, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i122, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i122, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i125 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i166 := $i6;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p206, $i166);
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $p210 := $load.ref($M.0, $p209);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p210, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $i212 := $load.i16($M.0, $p211);
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p213, $i212);
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.0, $p216);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p217, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $i219 := $load.i32($M.0, $p218);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $i220 := $trunc.i32.i8($i219);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p221, $i220);
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p222, $i38);
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $i224 := $load.i32($M.0, $p223);
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $i225 := $or.i32($i224, 128);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p226, $i225);
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    $i227 := $and.i32($i35, 33554432);
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $i228 := $ne.i32($i227, 0);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i233 := $and.i32($i35, 8192);
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $i234 := $ne.i32($i233, 0);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} $p239 := IEEE80211_SKB_RXCB($p22);
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $p240 := $bitcast.ref.ref($p239);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $p241 := $bitcast.ref.ref($p1);
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.0;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 1599} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p240, $p241, 40, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} ieee80211_rx_irqsafe($p0, $p22);
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(128, 1));
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $i243 := $load.i32($M.0, $p242);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $i244 := $zext.i32.i64($i243);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref($i244, 8));
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p246, $p77);
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p77, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $p248 := $bitcast.ref.ref($p247);
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p248, $i89);
    assume {:verifier.code 0} true;
    $i53, $p54 := $i166, $p77;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $i84, $p85 := $i53, $p54;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $p249 := $bitcast.ref.ref($p16);
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p85, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $p251 := $bitcast.ref.ref($p250);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $i252 := $load.i64($M.0, $p251);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $i253 := $trunc.i64.i32($i252);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p249, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p254, $i253);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p249, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p255, $sub.i32(0, 2147481295));
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(128, 1));
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $i257 := $load.i32($M.0, $p256);
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $i258 := $eq.i32($i257, 31);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(128, 1));
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $i264 := $load.i32($M.0, $p263);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $i265 := $add.i32($i264, 1);
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    $i266 := $and.i32($i265, 31);
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(128, 1));
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p267, $i266);
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $i268 := $sub.i32($i5, 1);
    call {:si_unique_call 1601} {:cexpr "count"} boogie_si_record_i32($i268);
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $i269 := $ne.i32($i5, 0);
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb59:
    assume $i269 == 1;
    assume {:verifier.code 0} true;
    $i5, $i6 := $i268, $i84;
    goto $bb59_dummy;

  $bb56:
    assume $i258 == 1;
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p249, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $i260 := $load.i32($M.0, $p259);
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    $i261 := $or.i32($i260, 1073741824);
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p249, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p262, $i261);
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb53:
    assume $i234 == 1;
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    $i236 := $load.i32($M.0, $p235);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $i237 := $or.i32($i236, 32);
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p238, $i237);
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb50:
    assume $i228 == 1;
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $i230 := $load.i32($M.0, $p229);
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $i231 := $or.i32($i230, 256);
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p232, $i231);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb25:
    assume $i125 == 1;
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(23, 1));
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $i178 := $load.i8($M.0, $p177);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $i179 := $zext.i8.i32($i178);
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $i180 := $ugt.i32($i179, 3);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i180 == 1);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $i190 := $zext.i8.i32($i120);
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $i191 := $and.i32($i190, 96);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $i192 := $ashr.i32($i191, 5);
    call {:si_unique_call 1595} {:cexpr "idx"} boogie_si_record_i32($i192);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $i193 := $zext.i8.i32($i120);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    $i194 := $and.i32($i193, 31);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $i195 := $mul.i32($i194, 2);
    call {:si_unique_call 1596} {:cexpr "bb"} boogie_si_record_i32($i195);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $i196 := $trunc.i32.i8($i195);
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $i197 := $zext.i8.i32($i196);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $i198 := $sub.i32(0, $i197);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $i199 := $sext.i32.i64($i192);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref(rtl8187se_lna_gain, $mul.ref(0, 4)), $mul.ref($i199, 1));
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $i201 := $load.i8($M.40, $p200);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $i202 := $zext.i8.i32($i201);
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $i203 := $sub.i32($i198, $i202);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $i204 := $add.i32($i203, 4);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $i205 := $trunc.i32.i8($i204);
    call {:si_unique_call 1597} {:cexpr "signal"} boogie_si_record_i8($i205);
    assume {:verifier.code 0} true;
    $i189 := $i205;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $i166 := $i189;
    goto $bb45;

  $bb46:
    assume $i180 == 1;
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $i181 := $lshr.i32($i37, 16);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $i182 := $trunc.i32.i8($i181);
    call {:si_unique_call 1593} {:cexpr "signal"} boogie_si_record_i8($i182);
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $i183 := $sext.i8.i32($i182);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $i184 := $sdiv.i32($i183, 2);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    $i185 := $trunc.i32.i8($i184);
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $i186 := $zext.i8.i32($i185);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $i187 := $add.i32($i186, 215);
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $i188 := $trunc.i32.i8($i187);
    call {:si_unique_call 1594} {:cexpr "signal"} boogie_si_record_i8($i188);
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $i189 := $i188;
    goto $bb48;

  $bb23:
    assume $i124 == 1;
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(23, 1));
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.0, $p127);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i32($i128);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $i130 := $ugt.i32($i129, 3);
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i130 == 1);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $i149 := $zext.i8.i32($i120);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $i150 := $zext.i8.i32(30);
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $i151 := $sgt.i32($i149, $i150);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i151 == 1);
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $i154 := $zext.i8.i32(30);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    $i153 := $i154;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $i155 := $trunc.i32.i8($i153);
    call {:si_unique_call 1591} {:cexpr "__min1___0"} boogie_si_record_i8($i155);
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $i156 := $zext.i8.i32($i155);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $i157 := $zext.i8.i32(95);
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $i158 := $slt.i32($i156, $i157);
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i158 == 1);
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $i161 := $zext.i8.i32(95);
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $i160 := $i161;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $i162 := $trunc.i32.i8($i160);
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $i163 := $zext.i8.i32($i162);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $i164 := $sub.i32(0, $i163);
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $i165 := $trunc.i32.i8($i164);
    call {:si_unique_call 1592} {:cexpr "signal"} boogie_si_record_i8($i165);
    assume {:verifier.code 0} true;
    $i148 := $i165;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $i166 := $i148;
    goto $bb45;

  $bb42:
    assume $i158 == 1;
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $i159 := $zext.i8.i32($i155);
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $i160 := $i159;
    goto $bb44;

  $bb39:
    assume $i151 == 1;
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $i152 := $zext.i8.i32($i120);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $i153 := $i152;
    goto $bb41;

  $bb30:
    assume $i130 == 1;
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $i131 := $zext.i8.i32($i120);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32(25);
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $i133 := $sgt.i32($i131, $i132);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i133 == 1);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i32(25);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $i135 := $i136;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $i137 := $trunc.i32.i8($i135);
    call {:si_unique_call 1589} {:cexpr "__min1"} boogie_si_record_i8($i137);
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i137);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i32(90);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $i140 := $slt.i32($i138, $i139);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i140 == 1);
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    $i143 := $zext.i8.i32(90);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $i142 := $i143;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $i144 := $trunc.i32.i8($i142);
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i32($i144);
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $i146 := $sub.i32(247, $i145);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i32.i8($i146);
    call {:si_unique_call 1590} {:cexpr "signal"} boogie_si_record_i8($i147);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $i148 := $i147;
    goto $bb38;

  $bb35:
    assume $i140 == 1;
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $i141 := $zext.i8.i32($i137);
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $i142 := $i141;
    goto $bb37;

  $bb32:
    assume $i133 == 1;
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i32($i120);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $i135 := $i134;
    goto $bb34;

  $bb21:
    assume $i123 == 1;
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i122, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i126 == 1);
    goto $bb27;

  $bb28:
    assume $i126 == 1;
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $i167 := $trunc.i32.i8($i36);
    call {:si_unique_call 1586} {:cexpr "sq"} boogie_si_record_i8($i167);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(8, 1));
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.0, $p168);
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p169, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.0, $p170);
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $i172 := $zext.i8.i32($i120);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $i173 := $trunc.i32.i8($i172);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $i174 := $zext.i8.i32($i167);
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $i175 := $trunc.i32.i8($i174);
    call {:si_unique_call 1587} $i176 := devirtbounce.6($p171, $i173, $i175);
    call {:si_unique_call 1588} {:cexpr "tmp___3"} boogie_si_record_i8($i176);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    $i166 := $i176;
    goto $bb45;

  $bb17:
    assume $i93 == 1;
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} kfree_skb($p77);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} dev_err.ref.ref($p96, .str.10);
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $i84, $p85 := $i6, $p22;
    goto $bb15;

  $bb13:
    assume $i83 == 1;
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $i84, $p85 := $i6, $p22;
    goto $bb15;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i52 == 1;
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $i53, $p54 := $i6, $p22;
    goto $bb12;

  $bb6:
    assume $i46 == 1;
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p16);
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    call {:si_unique_call 1562} {:cexpr "flags"} boogie_si_record_i32($i28);
    call {:si_unique_call 1563} devirtbounce(0);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p26, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    call {:si_unique_call 1564} {:cexpr "flags3"} boogie_si_record_i32($i30);
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p26, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    call {:si_unique_call 1565} {:cexpr "flags2"} boogie_si_record_i32($i32);
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p26, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    call {:si_unique_call 1566} {:cexpr "tsft"} boogie_si_record_i64($i34);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $i35, $i36, $i37, $i38 := $i28, $i32, $i30, $i34;
    goto $bb5;

  $bb59_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8279;
}



const dev_alloc_skb: ref;

axiom dev_alloc_skb == $sub.ref(0, 344306);

procedure dev_alloc_skb($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation dev_alloc_skb($i0: i32) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} {:cexpr "dev_alloc_skb:arg:length"} boogie_si_record_i32($i0);
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} $p1 := netdev_alloc_skb($0.ref, $i0);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;
}



const skb_tail_pointer: ref;

axiom skb_tail_pointer == $sub.ref(0, 345338);

procedure skb_tail_pointer($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_tail_pointer($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const pci_map_single: ref;

axiom pci_map_single == $sub.ref(0, 346370);

procedure pci_map_single($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64);
  free requires assertsPassed;



implementation pci_map_single($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} {:cexpr "pci_map_single:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 1605} {:cexpr "pci_map_single:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} $i8 := dma_map_single_attrs($p7, $p1, $i2, $i3, $0.ref);
    call {:si_unique_call 1607} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const pci_dma_mapping_error: ref;

axiom pci_dma_mapping_error == $sub.ref(0, 347402);

procedure pci_dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation pci_dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} {:cexpr "pci_dma_mapping_error:arg:dma_addr"} boogie_si_record_i64($i1);
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} $i3 := dma_mapping_error($p2, $i1);
    call {:si_unique_call 1610} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const skb_put: ref;

axiom skb_put == $sub.ref(0, 348434);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_put($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} {:cexpr "skb_put:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} $p2 := external_alloc();
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const IEEE80211_SKB_RXCB: ref;

axiom IEEE80211_SKB_RXCB == $sub.ref(0, 349466);

procedure IEEE80211_SKB_RXCB($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation IEEE80211_SKB_RXCB($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ieee80211_rx_irqsafe: ref;

axiom ieee80211_rx_irqsafe == $sub.ref(0, 350498);

procedure ieee80211_rx_irqsafe($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ieee80211_rx_irqsafe($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    return;
}



const dma_mapping_error: ref;

axiom dma_mapping_error == $sub.ref(0, 351530);

procedure dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i11: i1;
  var $i12: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} {:cexpr "dma_mapping_error:arg:dma_addr"} boogie_si_record_i64($i1);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} $p2 := get_dma_ops($p0);
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} debug_dma_mapping_error($p0, $i1);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i1, 0);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $i10 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    call {:si_unique_call 1616} $i9 := devirtbounce.7($p8, $p0, $i1);
    call {:si_unique_call 1617} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const debug_dma_mapping_error: ref;

axiom debug_dma_mapping_error == $sub.ref(0, 352562);

procedure debug_dma_mapping_error($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation debug_dma_mapping_error($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} {:cexpr "debug_dma_mapping_error:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    return;
}



const dma_map_single_attrs: ref;

axiom dma_map_single_attrs == $sub.ref(0, 353594);

procedure dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} {:cexpr "dma_map_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 1620} {:cexpr "dma_map_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} $p5 := get_dma_ops($p0);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} kmemcheck_mark_initialized($p1, $i6);
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} $i7 := valid_dma_direction($i3);
    call {:si_unique_call 1624} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 1626} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} $i14 := __phys_addr($i13);
    call {:si_unique_call 1629} {:cexpr "tmp___2"} boogie_si_record_i64($i14);
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i64($i14, 12);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i17, 64));
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p1);
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 4095);
    call {:si_unique_call 1630} $i21 := devirtbounce.8($p16, $p0, $p18, $i20, $i2, $i3, $p4);
    call {:si_unique_call 1631} {:cexpr "addr"} boogie_si_record_i64($i21);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p1);
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} $i23 := __phys_addr($i22);
    call {:si_unique_call 1633} {:cexpr "tmp___3"} boogie_si_record_i64($i23);
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i64($i23, 12);
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i24, 64));
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 4095);
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} debug_dma_map_page($p0, $p25, $i27, $i2, $i3, $i21, 1);
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i12 == 1;
    call {:si_unique_call 1627} devirtbounce.4(0, .str.9, 19, 12);
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_map_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 354626);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation kmemcheck_mark_initialized($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} {:cexpr "kmemcheck_mark_initialized:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    return;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 355658);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1636} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1637} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1638} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const debug_dma_map_page: ref;

axiom debug_dma_map_page == $sub.ref(0, 356690);

procedure debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1);
  free requires assertsPassed;



implementation debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} {:cexpr "debug_dma_map_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1640} {:cexpr "debug_dma_map_page:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 1641} {:cexpr "debug_dma_map_page:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1642} {:cexpr "debug_dma_map_page:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 1643} {:cexpr "debug_dma_map_page:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    return;
}



const netdev_alloc_skb: ref;

axiom netdev_alloc_skb == $sub.ref(0, 357722);

procedure netdev_alloc_skb($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation netdev_alloc_skb($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} {:cexpr "netdev_alloc_skb:arg:length"} boogie_si_record_i32($i1);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} $p2 := ldv___netdev_alloc_skb_36($p0, $i1, 32);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const ldv___netdev_alloc_skb_36: ref;

axiom ldv___netdev_alloc_skb_36 == $sub.ref(0, 358754);

procedure ldv___netdev_alloc_skb_36($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv___netdev_alloc_skb_36($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} {:cexpr "ldv___netdev_alloc_skb_36:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    call {:si_unique_call 1647} {:cexpr "ldv___netdev_alloc_skb_36:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} ldv_check_alloc_flags($i2);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} $p3 := ldv_undef_ptr();
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 359786);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $i1 := $M.41;
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} ldv_error();
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_127:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 360818);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1652} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 1653} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 361850);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1654} __VERIFIER_error();
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;
}



const IEEE80211_SKB_CB: ref;

axiom IEEE80211_SKB_CB == $sub.ref(0, 362882);

procedure IEEE80211_SKB_CB($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation IEEE80211_SKB_CB($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ieee80211_tx_info_clear_status: ref;

axiom ieee80211_tx_info_clear_status == $sub.ref(0, 363914);

procedure ieee80211_tx_info_clear_status($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ieee80211_tx_info_clear_status($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i8;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i8;
  var $p18: ref;
  var $p19: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i8;
  var $p25: ref;
  var $p26: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $i7 := $and.i8($i6, $sub.i8(0, 32));
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, $i7);
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(1, 4)), $mul.ref(1, 1));
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $i17 := $and.i8($i16, $sub.i8(0, 32));
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i17);
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p19, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(2, 4)), $mul.ref(1, 1));
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $i24 := $and.i8($i23, $sub.i8(0, 32));
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, $i24);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p26, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(3, 4)), $mul.ref(1, 1));
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    $i31 := $and.i8($i30, $sub.i8(0, 32));
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $i31);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 48)), $mul.ref(20, 1));
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    call {:si_unique_call 1655} cmdloc_dummy_var_19 := $memset.i8(cmdloc_dummy_var_18, $p10, 0, 24, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_19;
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    return;
}



const ieee80211_tx_status_irqsafe: ref;

axiom ieee80211_tx_status_irqsafe == $sub.ref(0, 364946);

procedure ieee80211_tx_status_irqsafe($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ieee80211_tx_status_irqsafe($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    return;
}



const ieee80211_wake_queue: ref;

axiom ieee80211_wake_queue == $sub.ref(0, 365978);

procedure ieee80211_wake_queue($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation ieee80211_wake_queue($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} {:cexpr "ieee80211_wake_queue:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 367010);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 368042);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.41;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    $M.41 := 0;
    call {:si_unique_call 1657} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_9: ref;

axiom ldv_spin_unlock_9 == $sub.ref(0, 369074);

procedure ldv_spin_unlock_9($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_9($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} _raw_spin_unlock($p2);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 370106);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 371138);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.41;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1659} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_5: ref;

axiom ldv_spin_lock_5 == $sub.ref(0, 372170);

procedure ldv_spin_lock_5($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_5($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} _raw_spin_lock($p2);
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 373202);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 374234);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.41;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} ldv_spin_unlock();
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} ldv_spin_unlock_irqrestore_12($p0, $i1);
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    return;
}



const net_ratelimit: ref;

axiom net_ratelimit == $sub.ref(0, 375266);

procedure net_ratelimit() returns ($r: i32);
  free requires assertsPassed;



implementation net_ratelimit() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1664} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1665} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_spin_unlock_irqrestore_12: ref;

axiom ldv_spin_unlock_irqrestore_12 == $sub.ref(0, 376298);

procedure ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} {:cexpr "ldv_spin_unlock_irqrestore_12:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 377330);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    return;
}



const rtl8180_config_cardbus: ref;

axiom rtl8180_config_cardbus == $sub.ref(0, 378362);

procedure rtl8180_config_cardbus($p0: ref);
  free requires assertsPassed;



implementation rtl8180_config_cardbus($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i16;
  var $i28: i32;
  var $i29: i32;
  var $i30: i16;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} $i7 := rtl818x_ioread8($p3, $p6);
    call {:si_unique_call 1670} {:cexpr "reg8"} boogie_si_record_i8($i7);
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i8, 2);
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    call {:si_unique_call 1671} {:cexpr "reg8"} boogie_si_record_i8($i10);
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i10);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} rtl818x_iowrite8($p3, $p13, $i15);
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 2);
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 256)), $mul.ref(244, 1));
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} $i27 := rtl818x_ioread16($p3, $p26);
    call {:si_unique_call 1675} {:cexpr "reg16"} boogie_si_record_i16($i27);
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i28, 49168);
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    call {:si_unique_call 1676} {:cexpr "reg16"} boogie_si_record_i16($i30);
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 256)), $mul.ref(244, 1));
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i30);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} rtl818x_iowrite16($p3, $p34, $i36);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(234, 2));
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} rtl818x_iowrite16($p3, $p22, $sub.i16(0, 1));
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rtl8187se_mac_config: ref;

axiom rtl8187se_mac_config == $sub.ref(0, 379394);

procedure rtl8187se_mac_config($p0: ref);
  free requires assertsPassed;



implementation rtl8187se_mac_config($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i8;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(124, 4));
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} rtl818x_iowrite32($p3, $p7, 0);
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(124, 4));
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} vslice_dummy_var_144 := rtl818x_ioread32($p3, $p11);
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref(125, 4));
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} rtl818x_iowrite32($p3, $p16, 0);
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref(125, 4));
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} vslice_dummy_var_145 := rtl818x_ioread32($p3, $p20);
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(504, 1));
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} rtl818x_iowrite8($p3, $p25, 0);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref(504, 1));
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} vslice_dummy_var_146 := rtl818x_ioread8($p3, $p29);
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 256)), $mul.ref(218, 1));
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} $i34 := rtl818x_ioread8($p3, $p33);
    call {:si_unique_call 1685} {:cexpr "reg"} boogie_si_record_i8($i34);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 256)), $mul.ref(218, 1));
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i34);
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i38, 4);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} rtl818x_iowrite8($p3, $p37, $i40);
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p43, $mul.ref(432, 2));
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} rtl818x_iowrite16($p3, $p44, 4096);
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p47, $mul.ref(433, 2));
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} rtl818x_iowrite16($p3, $p48, 4096);
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref(440, 2));
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} rtl818x_iowrite16($p3, $p52, 1376);
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p55, $mul.ref(441, 2));
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} rtl818x_iowrite16($p3, $p56, 1376);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p59, $mul.ref(442, 2));
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} rtl818x_iowrite16($p3, $p60, 3492);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p63, $mul.ref(443, 2));
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} rtl818x_iowrite16($p3, $p64, 3492);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p67, $mul.ref(444, 2));
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} rtl818x_iowrite16($p3, $p68, 1376);
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p71, $mul.ref(445, 2));
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} rtl818x_iowrite16($p3, $p72, 1376);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p75, $mul.ref(446, 2));
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} rtl818x_iowrite16($p3, $p76, 236);
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p79, $mul.ref(447, 2));
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} rtl818x_iowrite16($p3, $p80, 236);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p83, $mul.ref(590, 1));
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} rtl818x_iowrite8($p3, $p84, 1);
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p87, $mul.ref(10, 1));
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} rtl818x_iowrite8($p3, $p88, 114);
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    return;
}



const rtl8180_set_anaparam2: ref;

axiom rtl8180_set_anaparam2 == $sub.ref(0, 380426);

procedure rtl8180_set_anaparam2($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation rtl8180_set_anaparam2($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i8;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} {:cexpr "rtl8180_set_anaparam2:arg:anaparam2"} boogie_si_record_i32($i1);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} rtl818x_iowrite8($p0, $p4, $sub.i8(0, 64));
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} $i8 := rtl818x_ioread8($p0, $p7);
    call {:si_unique_call 1702} {:cexpr "reg"} boogie_si_record_i8($i8);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i8);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i12, 64);
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} rtl818x_iowrite8($p0, $p11, $i14);
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 256)), $mul.ref(96, 1));
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} rtl818x_iowrite32($p0, $p17, $i1);
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i8);
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 191);
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} rtl818x_iowrite8($p0, $p20, $i23);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} rtl818x_iowrite8($p0, $p26, 0);
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    return;
}



const rtl8180_set_anaparam3: ref;

axiom rtl8180_set_anaparam3 == $sub.ref(0, 381458);

procedure rtl8180_set_anaparam3($p0: ref, $i1: i16);
  free requires assertsPassed;



implementation rtl8180_set_anaparam3($p0: ref, $i1: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i16;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i8;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} {:cexpr "rtl8180_set_anaparam3:arg:anaparam3"} boogie_si_record_i16($i1);
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} rtl818x_iowrite8($p0, $p4, $sub.i8(0, 64));
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} $i8 := rtl818x_ioread8($p0, $p7);
    call {:si_unique_call 1710} {:cexpr "reg"} boogie_si_record_i8($i8);
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i8);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i12, 64);
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} rtl818x_iowrite8($p0, $p11, $i14);
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 256)), $mul.ref(238, 1));
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i1);
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} rtl818x_iowrite16($p0, $p18, $i20);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i8);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 191);
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} rtl818x_iowrite8($p0, $p23, $i26);
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} rtl818x_iowrite8($p0, $p29, 0);
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    return;
}



const rtl8187se_set_antenna_config: ref;

axiom rtl8187se_set_antenna_config == $sub.ref(0, 382490);

procedure rtl8187se_set_antenna_config($p0: ref, $i1: i8, $i2: i1);
  free requires assertsPassed;



implementation rtl8187se_set_antenna_config($p0: ref, $i1: i8, $i2: i1)
{
  var $i3: i8;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} {:cexpr "rtl8187se_set_antenna_config:arg:def_ant"} boogie_si_record_i8($i1);
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1716} {:cexpr "rtl8187se_set_antenna_config:arg:diversity"} boogie_si_record_i1($i2);
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} rtl8225_write_phy_cck($p0, 12, 9);
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i3);
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i1);
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 1);
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 256)), $mul.ref(159, 1));
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} rtl818x_iowrite8($p6, $p23, 3);
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} rtl8225_write_phy_cck($p0, 17, $sub.i8(0, 101));
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} rtl8225_write_phy_cck($p0, 1, 71);
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} rtl8225_write_phy_ofdm($p0, 13, 92);
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} rtl8225_write_phy_ofdm($p0, 24, 50);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 256)), $mul.ref(159, 1));
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} rtl818x_iowrite8($p6, $p20, 0);
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} rtl8225_write_phy_cck($p0, 17, $sub.i8(0, 69));
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} rtl8225_write_phy_cck($p0, 1, 71);
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} rtl8225_write_phy_ofdm($p0, 13, 84);
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} rtl8225_write_phy_ofdm($p0, 24, 50);
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 256)), $mul.ref(159, 1));
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} rtl818x_iowrite8($p6, $p15, 3);
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} rtl8225_write_phy_cck($p0, 17, $sub.i8(0, 101));
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} rtl8225_write_phy_cck($p0, 1, $sub.i8(0, 57));
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} rtl8225_write_phy_ofdm($p0, 13, 92);
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} rtl8225_write_phy_ofdm($p0, 24, $sub.i8(0, 78));
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 256)), $mul.ref(159, 1));
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} rtl818x_iowrite8($p6, $p12, 0);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} rtl8225_write_phy_cck($p0, 17, $sub.i8(0, 69));
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} rtl8225_write_phy_cck($p0, 1, $sub.i8(0, 57));
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} rtl8225_write_phy_ofdm($p0, 13, 84);
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} rtl8225_write_phy_ofdm($p0, 24, $sub.i8(0, 78));
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const rtl8225_write_phy_cck: ref;

axiom rtl8225_write_phy_cck == $sub.ref(0, 383522);

procedure rtl8225_write_phy_cck($p0: ref, $i1: i8, $i2: i8);
  free requires assertsPassed;



implementation rtl8225_write_phy_cck($p0: ref, $i1: i8, $i2: i8)
{
  var $i3: i32;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} {:cexpr "rtl8225_write_phy_cck:arg:addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 1739} {:cexpr "rtl8225_write_phy_cck:arg:data"} boogie_si_record_i8($i2);
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i1);
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i2);
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, 65536);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} rtl8180_write_phy($p0, $i4, $i6);
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    return;
}



const rtl8225_write_phy_ofdm: ref;

axiom rtl8225_write_phy_ofdm == $sub.ref(0, 384554);

procedure rtl8225_write_phy_ofdm($p0: ref, $i1: i8, $i2: i8);
  free requires assertsPassed;



implementation rtl8225_write_phy_ofdm($p0: ref, $i1: i8, $i2: i8)
{
  var $i3: i32;
  var $i4: i8;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} {:cexpr "rtl8225_write_phy_ofdm:arg:addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 1742} {:cexpr "rtl8225_write_phy_ofdm:arg:data"} boogie_si_record_i8($i2);
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i1);
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i2);
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} rtl8180_write_phy($p0, $i4, $i5);
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    return;
}



const pci_zalloc_consistent: ref;

axiom pci_zalloc_consistent == $sub.ref(0, 385586);

procedure pci_zalloc_consistent($p0: ref, $i1: i64, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation pci_zalloc_consistent($p0: ref, $i1: i64, $p2: ref) returns ($r: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} {:cexpr "pci_zalloc_consistent:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} $p7 := dma_zalloc_coherent($p6, $i1, $p2, 32);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $p6 := $p5;
    goto $bb3;
}



const skb_queue_head_init: ref;

axiom skb_queue_head_init == $sub.ref(0, 386618);

procedure skb_queue_head_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation skb_queue_head_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var vslice_dummy_var_147: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} vslice_dummy_var_147 := spinlock_check($p2);
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} __raw_spin_lock_init($p6, .str.17, $p1);
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} __skb_queue_head_init($p0);
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    return;
}



const __skb_queue_head_init: ref;

axiom __skb_queue_head_init == $sub.ref(0, 387650);

procedure __skb_queue_head_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_queue_head_init($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p0);
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    return;
}



const dma_zalloc_coherent: ref;

axiom dma_zalloc_coherent == $sub.ref(0, 388682);

procedure dma_zalloc_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation dma_zalloc_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i32) returns ($r: ref)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} {:cexpr "dma_zalloc_coherent:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1751} {:cexpr "dma_zalloc_coherent:arg:flags"} boogie_si_record_i32($i3);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} ldv_check_alloc_flags($i3);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} $p4 := ldv_undef_ptr();
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;
}



const skb_get_queue_mapping: ref;

axiom skb_get_queue_mapping == $sub.ref(0, 389714);

procedure skb_get_queue_mapping($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation skb_get_queue_mapping($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $i2: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(140, 1));
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ieee80211_get_tx_rate: ref;

axiom ieee80211_get_tx_rate == $sub.ref(0, 390746);

procedure ieee80211_get_tx_rate($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_get_tx_rate($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i64;
  var $p57: ref;
  var $p36: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 18)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i9);
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 1754} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i12);
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1756} {:cexpr "tmp___1"} boogie_si_record_i64($i16);
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i12, 0);
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} $i34 := ldv__builtin_expect($i33, 0);
    call {:si_unique_call 1764} {:cexpr "tmp___2"} boogie_si_record_i64($i34);
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p42, $mul.ref(0, 1776)), $mul.ref(224, 1)), $mul.ref($i40, 8));
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p51, $mul.ref(0, 18)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $i56 := $sext.i8.i64($i55);
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p47, $mul.ref($i56, 12));
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $p36 := $p57;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    $r := $p36;
    return;

  $bb10:
    assume $i35 == 1;
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $p36 := $0.ref;
    goto $bb12;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1(1);
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $i19 := $xor.i1($i18, 1);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    call {:si_unique_call 1757} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i20);
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1759} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i20, 0);
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 1762} {:cexpr "tmp___0"} boogie_si_record_i64($i29);
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i30 == 1;
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} warn_slowpath_null(.str.22, 2151);
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ieee80211_get_rts_cts_rate: ref;

axiom ieee80211_get_rts_cts_rate == $sub.ref(0, 391778);

procedure ieee80211_get_rts_cts_rate($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_get_rts_cts_rate($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i64;
  var $p29: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 18)), $mul.ref(16, 1));
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    $i8 := $sext.i8.i32($i7);
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 1776)), $mul.ref(224, 1)), $mul.ref($i14, 8));
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 18)), $mul.ref(16, 1));
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $i28 := $sext.i8.i64($i27);
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p21, $mul.ref($i28, 12));
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    $p10 := $p29;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $p10 := $0.ref;
    goto $bb3;
}



const ieee80211_rts_duration: ref;

axiom ieee80211_rts_duration == $sub.ref(0, 392810);

procedure ieee80211_rts_duration($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i16);
  free requires assertsPassed;



implementation ieee80211_rts_duration($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i16)
{
  var $i4: i16;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1765} {:cexpr "ieee80211_rts_duration:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1766} $i4 := __VERIFIER_nondet_ushort();
    call {:si_unique_call 1767} {:cexpr "smack:ext:__VERIFIER_nondet_ushort"} boogie_si_record_i16($i4);
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ieee80211_ctstoself_duration: ref;

axiom ieee80211_ctstoself_duration == $sub.ref(0, 393842);

procedure ieee80211_ctstoself_duration($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i16);
  free requires assertsPassed;



implementation ieee80211_ctstoself_duration($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i16)
{
  var $i4: i16;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1768} {:cexpr "ieee80211_ctstoself_duration:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1769} $i4 := __VERIFIER_nondet_ushort();
    call {:si_unique_call 1770} {:cexpr "smack:ext:__VERIFIER_nondet_ushort"} boogie_si_record_i16($i4);
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __skb_queue_tail: ref;

axiom __skb_queue_tail == $sub.ref(0, 394874);

procedure __skb_queue_tail($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_queue_tail($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} __skb_queue_before($p0, $p2, $p1);
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    return;
}



const ieee80211_stop_queue: ref;

axiom ieee80211_stop_queue == $sub.ref(0, 395906);

procedure ieee80211_stop_queue($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation ieee80211_stop_queue($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} {:cexpr "ieee80211_stop_queue:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    return;
}



const __skb_queue_before: ref;

axiom __skb_queue_before == $sub.ref(0, 396938);

procedure __skb_queue_before($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_queue_before($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} __skb_insert($p2, $p6, $p1, $p0);
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    return;
}



const __skb_insert: ref;

axiom __skb_insert == $sub.ref(0, 397970);

procedure __skb_insert($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_insert($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p2);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p1);
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p0);
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p0);
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 1);
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 399002);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    return;
}



const rtl8225_rf_init: ref;

axiom rtl8225_rf_init == $sub.ref(0, 400034);

procedure rtl8225_rf_init($p0: ref);
  free requires assertsPassed;



implementation rtl8225_rf_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i16;
  var $i49: i32;
  var $i50: i16;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i8;
  var $i70: i8;
  var $i71: i32;
  var $i72: i8;
  var $i73: i8;
  var $i74: i32;
  var $i75: i8;
  var $i76: i8;
  var $i77: i32;
  var $i78: i8;
  var $i79: i8;
  var $i80: i32;
  var $i81: i8;
  var vslice_dummy_var_148: i8;
  var vslice_dummy_var_149: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} rtl8180_set_anaparam($p3, $sub.i32(0, 1610609831));
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} rtl818x_iowrite16($p3, $p6, 1152);
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 256)), $mul.ref(130, 1));
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} rtl818x_iowrite16($p3, $p9, 8191);
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 256)), $mul.ref(132, 1));
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} rtl818x_iowrite16($p3, $p12, 1160);
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 256)), $mul.ref(144, 1));
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} rtl818x_iowrite8($p3, $p15, 0);
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} vslice_dummy_var_148 := rtl818x_ioread8($p3, $p18);
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} msleep(200);
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 256)), $mul.ref(144, 1));
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} rtl818x_iowrite8($p3, $p22, $sub.i8(0, 65));
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 256)), $mul.ref(140, 1));
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} rtl818x_iowrite32($p3, $p25, 688136);
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 256)), $mul.ref(44, 1));
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} vslice_dummy_var_149 := rtl818x_ioread16($p3, $p29);
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 256)), $mul.ref(44, 1));
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} rtl818x_iowrite16($p3, $p34, $sub.i16(0, 1));
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 256)), $mul.ref(136, 1));
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} rtl818x_iowrite32($p3, $p37, 1048644);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} rtl818x_iowrite8($p3, $p40, $sub.i8(0, 64));
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} rtl818x_iowrite8($p3, $p43, 68);
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} rtl818x_iowrite8($p3, $p46, 0);
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} rtl8225_write($p0, 0, 103);
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} rtl8225_write($p0, 1, 4064);
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} rtl8225_write($p0, 2, 1101);
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} rtl8225_write($p0, 3, 1089);
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} rtl8225_write($p0, 4, 2238);
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} rtl8225_write($p0, 5, 3056);
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} rtl8225_write($p0, 6, 2790);
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.42, rtl8225_chan);
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i49);
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} rtl8225_write($p0, 7, $i50);
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} rtl8225_write($p0, 8, 31);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} rtl8225_write($p0, 9, 820);
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} rtl8225_write($p0, 10, 4052);
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} rtl8225_write($p0, 11, 913);
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} rtl8225_write($p0, 12, 80);
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} rtl8225_write($p0, 13, 1755);
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} rtl8225_write($p0, 14, 41);
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} rtl8225_write($p0, 15, 2324);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} msleep(1);
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} rtl8225_write($p0, 2, 3149);
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} msleep(100);
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} rtl8225_write($p0, 0, 295);
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} rtl8225_write($p0, 1, 1);
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} rtl8225_write($p0, 2, 1024);
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} rtl8225_write($p0, 1, 2);
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} rtl8225_write($p0, 2, 1025);
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2470} rtl8225_write($p0, 1, 3);
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2471} rtl8225_write($p0, 2, 1026);
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2472} rtl8225_write($p0, 1, 4);
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2473} rtl8225_write($p0, 2, 1027);
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2474} rtl8225_write($p0, 1, 5);
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2475} rtl8225_write($p0, 2, 1028);
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2476} rtl8225_write($p0, 1, 6);
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2477} rtl8225_write($p0, 2, 1029);
    goto corral_source_split_10197;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2478} rtl8225_write($p0, 1, 7);
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2479} rtl8225_write($p0, 2, 1032);
    goto corral_source_split_10200;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2480} rtl8225_write($p0, 1, 8);
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2481} rtl8225_write($p0, 2, 1033);
    goto corral_source_split_10203;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2482} rtl8225_write($p0, 1, 9);
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2483} rtl8225_write($p0, 2, 1034);
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2484} rtl8225_write($p0, 1, 10);
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2485} rtl8225_write($p0, 2, 1035);
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2486} rtl8225_write($p0, 1, 11);
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2487} rtl8225_write($p0, 2, 1282);
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2488} rtl8225_write($p0, 1, 12);
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2489} rtl8225_write($p0, 2, 1283);
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2490} rtl8225_write($p0, 1, 13);
    goto corral_source_split_10217;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2491} rtl8225_write($p0, 2, 1284);
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2492} rtl8225_write($p0, 1, 14);
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2493} rtl8225_write($p0, 2, 1285);
    goto corral_source_split_10221;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2494} rtl8225_write($p0, 1, 15);
    goto corral_source_split_10223;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2495} rtl8225_write($p0, 2, 1344);
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2496} rtl8225_write($p0, 1, 16);
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2497} rtl8225_write($p0, 2, 1345);
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2498} rtl8225_write($p0, 1, 17);
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2499} rtl8225_write($p0, 2, 1346);
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2500} rtl8225_write($p0, 1, 18);
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2501} rtl8225_write($p0, 2, 1347);
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2502} rtl8225_write($p0, 1, 19);
    goto corral_source_split_10235;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2503} rtl8225_write($p0, 2, 1348);
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2504} rtl8225_write($p0, 1, 20);
    goto corral_source_split_10238;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2505} rtl8225_write($p0, 2, 1349);
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2506} rtl8225_write($p0, 1, 21);
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2507} rtl8225_write($p0, 2, 1408);
    goto corral_source_split_10242;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2508} rtl8225_write($p0, 1, 22);
    goto corral_source_split_10244;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2509} rtl8225_write($p0, 2, 1409);
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2510} rtl8225_write($p0, 1, 23);
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2511} rtl8225_write($p0, 2, 1410);
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2512} rtl8225_write($p0, 1, 24);
    goto corral_source_split_10250;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2513} rtl8225_write($p0, 2, 1411);
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2514} rtl8225_write($p0, 1, 25);
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2515} rtl8225_write($p0, 2, 1412);
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2516} rtl8225_write($p0, 1, 26);
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2517} rtl8225_write($p0, 2, 1413);
    goto corral_source_split_10257;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2518} rtl8225_write($p0, 1, 27);
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2519} rtl8225_write($p0, 2, 1416);
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2520} rtl8225_write($p0, 1, 28);
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2521} rtl8225_write($p0, 2, 1417);
    goto corral_source_split_10263;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2522} rtl8225_write($p0, 1, 29);
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2523} rtl8225_write($p0, 2, 1418);
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2524} rtl8225_write($p0, 1, 30);
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2525} rtl8225_write($p0, 2, 1419);
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2526} rtl8225_write($p0, 1, 31);
    goto corral_source_split_10271;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2527} rtl8225_write($p0, 2, 1603);
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2528} rtl8225_write($p0, 1, 32);
    goto corral_source_split_10274;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2529} rtl8225_write($p0, 2, 1604);
    goto corral_source_split_10275;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2530} rtl8225_write($p0, 1, 33);
    goto corral_source_split_10277;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2531} rtl8225_write($p0, 2, 1605);
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2532} rtl8225_write($p0, 1, 34);
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2533} rtl8225_write($p0, 2, 1664);
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2534} rtl8225_write($p0, 1, 35);
    goto corral_source_split_10283;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2535} rtl8225_write($p0, 2, 1665);
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2536} rtl8225_write($p0, 1, 36);
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2537} rtl8225_write($p0, 2, 1666);
    goto corral_source_split_10287;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2538} rtl8225_write($p0, 1, 37);
    goto corral_source_split_10289;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2539} rtl8225_write($p0, 2, 1667);
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2540} rtl8225_write($p0, 1, 38);
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2541} rtl8225_write($p0, 2, 1668);
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2542} rtl8225_write($p0, 1, 39);
    goto corral_source_split_10295;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2543} rtl8225_write($p0, 2, 1669);
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2544} rtl8225_write($p0, 1, 40);
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2545} rtl8225_write($p0, 2, 1672);
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2546} rtl8225_write($p0, 1, 41);
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2547} rtl8225_write($p0, 2, 1673);
    goto corral_source_split_10302;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2548} rtl8225_write($p0, 1, 42);
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2549} rtl8225_write($p0, 2, 1674);
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2550} rtl8225_write($p0, 1, 43);
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2551} rtl8225_write($p0, 2, 1675);
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2552} rtl8225_write($p0, 1, 44);
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2553} rtl8225_write($p0, 2, 1676);
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2554} rtl8225_write($p0, 1, 45);
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2555} rtl8225_write($p0, 2, 1858);
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2556} rtl8225_write($p0, 1, 46);
    goto corral_source_split_10316;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2557} rtl8225_write($p0, 2, 1859);
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2558} rtl8225_write($p0, 1, 47);
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2559} rtl8225_write($p0, 2, 1860);
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2560} rtl8225_write($p0, 1, 48);
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2561} rtl8225_write($p0, 2, 1861);
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2562} rtl8225_write($p0, 1, 49);
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2563} rtl8225_write($p0, 2, 1920);
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2564} rtl8225_write($p0, 1, 50);
    goto corral_source_split_10328;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2565} rtl8225_write($p0, 2, 1921);
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2566} rtl8225_write($p0, 1, 51);
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2567} rtl8225_write($p0, 2, 1922);
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2568} rtl8225_write($p0, 1, 52);
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2569} rtl8225_write($p0, 2, 1923);
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2570} rtl8225_write($p0, 1, 53);
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2571} rtl8225_write($p0, 2, 1924);
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2572} rtl8225_write($p0, 1, 54);
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2573} rtl8225_write($p0, 2, 1925);
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2574} rtl8225_write($p0, 1, 55);
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2575} rtl8225_write($p0, 2, 1928);
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2576} rtl8225_write($p0, 1, 56);
    goto corral_source_split_10346;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2577} rtl8225_write($p0, 2, 1929);
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2578} rtl8225_write($p0, 1, 57);
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2579} rtl8225_write($p0, 2, 1930);
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2580} rtl8225_write($p0, 1, 58);
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2581} rtl8225_write($p0, 2, 1931);
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2582} rtl8225_write($p0, 1, 59);
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2583} rtl8225_write($p0, 2, 1932);
    goto corral_source_split_10356;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2584} rtl8225_write($p0, 1, 60);
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2585} rtl8225_write($p0, 2, 1933);
    goto corral_source_split_10359;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2586} rtl8225_write($p0, 1, 61);
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2587} rtl8225_write($p0, 2, 1936);
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2588} rtl8225_write($p0, 1, 62);
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2589} rtl8225_write($p0, 2, 1937);
    goto corral_source_split_10365;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2590} rtl8225_write($p0, 1, 63);
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2591} rtl8225_write($p0, 2, 1938);
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2592} rtl8225_write($p0, 1, 64);
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2593} rtl8225_write($p0, 2, 1939);
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2594} rtl8225_write($p0, 1, 65);
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2595} rtl8225_write($p0, 2, 1940);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2596} rtl8225_write($p0, 1, 66);
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2597} rtl8225_write($p0, 2, 1941);
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2598} rtl8225_write($p0, 1, 67);
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2599} rtl8225_write($p0, 2, 1944);
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2600} rtl8225_write($p0, 1, 68);
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2601} rtl8225_write($p0, 2, 1945);
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2602} rtl8225_write($p0, 1, 69);
    goto corral_source_split_10385;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2603} rtl8225_write($p0, 2, 1946);
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2604} rtl8225_write($p0, 1, 70);
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2605} rtl8225_write($p0, 2, 1947);
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2606} rtl8225_write($p0, 1, 71);
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2607} rtl8225_write($p0, 2, 1948);
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2608} rtl8225_write($p0, 1, 72);
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2609} rtl8225_write($p0, 2, 1949);
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2610} rtl8225_write($p0, 1, 73);
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2611} rtl8225_write($p0, 2, 1952);
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2612} rtl8225_write($p0, 1, 74);
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2613} rtl8225_write($p0, 2, 1953);
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2614} rtl8225_write($p0, 1, 75);
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2615} rtl8225_write($p0, 2, 1954);
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2616} rtl8225_write($p0, 1, 76);
    goto corral_source_split_10406;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2617} rtl8225_write($p0, 2, 1955);
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2618} rtl8225_write($p0, 1, 77);
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2619} rtl8225_write($p0, 2, 1956);
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2620} rtl8225_write($p0, 1, 78);
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2621} rtl8225_write($p0, 2, 1957);
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2622} rtl8225_write($p0, 1, 79);
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2623} rtl8225_write($p0, 2, 1960);
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2624} rtl8225_write($p0, 1, 80);
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2625} rtl8225_write($p0, 2, 1961);
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2626} rtl8225_write($p0, 1, 81);
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2627} rtl8225_write($p0, 2, 1962);
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2628} rtl8225_write($p0, 1, 82);
    goto corral_source_split_10424;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2629} rtl8225_write($p0, 2, 1963);
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2630} rtl8225_write($p0, 1, 83);
    goto corral_source_split_10427;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2631} rtl8225_write($p0, 2, 1964);
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2632} rtl8225_write($p0, 1, 84);
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2633} rtl8225_write($p0, 2, 1965);
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2634} rtl8225_write($p0, 1, 85);
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2635} rtl8225_write($p0, 2, 1968);
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2636} rtl8225_write($p0, 1, 86);
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2637} rtl8225_write($p0, 2, 1969);
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2638} rtl8225_write($p0, 1, 87);
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2639} rtl8225_write($p0, 2, 1970);
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2640} rtl8225_write($p0, 1, 88);
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2641} rtl8225_write($p0, 2, 1971);
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2642} rtl8225_write($p0, 1, 89);
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2643} rtl8225_write($p0, 2, 1972);
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2644} rtl8225_write($p0, 1, 90);
    goto corral_source_split_10448;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2645} rtl8225_write($p0, 2, 1973);
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2646} rtl8225_write($p0, 1, 91);
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2647} rtl8225_write($p0, 2, 1976);
    goto corral_source_split_10452;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2648} rtl8225_write($p0, 1, 92);
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2649} rtl8225_write($p0, 2, 1977);
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2650} rtl8225_write($p0, 1, 93);
    goto corral_source_split_10457;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2651} rtl8225_write($p0, 2, 1978);
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2652} rtl8225_write($p0, 1, 94);
    goto corral_source_split_10460;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2653} rtl8225_write($p0, 2, 1979);
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2654} rtl8225_write($p0, 1, 95);
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2655} rtl8225_write($p0, 2, 1979);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} rtl8225_write($p0, 0, 39);
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} rtl8225_write($p0, 0, 559);
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 256)), $mul.ref(130, 1));
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} rtl818x_iowrite16($p3, $p53, 8191);
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 98));
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} msleep(1);
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 128));
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} msleep(1);
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 98));
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} msleep(1);
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 127));
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} msleep(1);
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 98));
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} msleep(1);
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1968} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 126));
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} msleep(1);
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1970} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 98));
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} msleep(1);
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1972} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 125));
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} msleep(1);
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1974} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 98));
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1975} msleep(1);
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1976} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 124));
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} msleep(1);
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1978} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 98));
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} msleep(1);
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 123));
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1981} msleep(1);
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 98));
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} msleep(1);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1984} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 122));
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1985} msleep(1);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 98));
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} msleep(1);
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 121));
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1989} msleep(1);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 99));
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1991} msleep(1);
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1992} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 120));
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} msleep(1);
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1994} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 100));
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} msleep(1);
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1996} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 119));
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1997} msleep(1);
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1998} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 101));
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1999} msleep(1);
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2000} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 118));
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2001} msleep(1);
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2002} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 102));
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2003} msleep(1);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2004} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 117));
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2005} msleep(1);
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2006} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 103));
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2007} msleep(1);
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2008} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 116));
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2009} msleep(1);
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2010} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 104));
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2011} msleep(1);
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2012} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 115));
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2013} msleep(1);
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2014} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 105));
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2015} msleep(1);
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 114));
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2017} msleep(1);
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2018} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 106));
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2019} msleep(1);
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2020} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 113));
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2021} msleep(1);
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2022} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 107));
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} msleep(1);
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2024} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 112));
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2025} msleep(1);
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2026} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 108));
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2027} msleep(1);
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2028} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 111));
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} msleep(1);
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2030} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 109));
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2031} msleep(1);
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2032} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 110));
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} msleep(1);
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2034} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 110));
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} msleep(1);
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 109));
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} msleep(1);
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2038} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 111));
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} msleep(1);
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2040} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 108));
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} msleep(1);
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 112));
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} msleep(1);
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2044} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 107));
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2045} msleep(1);
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2046} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 113));
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2047} msleep(1);
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 106));
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2049} msleep(1);
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2050} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 114));
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} msleep(1);
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 105));
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} msleep(1);
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 115));
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2055} msleep(1);
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 104));
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} msleep(1);
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2058} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 116));
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2059} msleep(1);
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2060} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 103));
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} msleep(1);
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2062} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 117));
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} msleep(1);
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2064} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 102));
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} msleep(1);
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2066} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 118));
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2067} msleep(1);
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2068} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 101));
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} msleep(1);
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2070} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 119));
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} msleep(1);
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2072} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 100));
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} msleep(1);
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2074} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 120));
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} msleep(1);
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2076} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 99));
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} msleep(1);
    goto corral_source_split_9696;

  corral_source_split_9696:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2078} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 121));
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} msleep(1);
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2080} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 98));
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} msleep(1);
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2082} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 122));
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2083} msleep(1);
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2084} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 97));
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2085} msleep(1);
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2086} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 123));
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} msleep(1);
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2088} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 96));
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2089} msleep(1);
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2090} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 124));
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2091} msleep(1);
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2092} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 95));
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2093} msleep(1);
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2094} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 125));
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} msleep(1);
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2096} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 94));
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2097} msleep(1);
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2098} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 126));
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} msleep(1);
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2100} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 93));
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} msleep(1);
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2102} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 127));
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2103} msleep(1);
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2104} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 92));
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} msleep(1);
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2106} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 128));
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2107} msleep(1);
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2108} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 91));
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} msleep(1);
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2110} rtl8225_write_phy_ofdm($p0, 11, 63);
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2111} msleep(1);
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2112} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 90));
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2113} msleep(1);
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2114} rtl8225_write_phy_ofdm($p0, 11, 62);
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} msleep(1);
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2116} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 89));
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} msleep(1);
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2118} rtl8225_write_phy_ofdm($p0, 11, 61);
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} msleep(1);
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2120} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 88));
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} msleep(1);
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2122} rtl8225_write_phy_ofdm($p0, 11, 60);
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} msleep(1);
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 87));
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} msleep(1);
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2126} rtl8225_write_phy_ofdm($p0, 11, 59);
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} msleep(1);
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2128} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 86));
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} msleep(1);
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2130} rtl8225_write_phy_ofdm($p0, 11, 58);
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} msleep(1);
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2132} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 85));
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2133} msleep(1);
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2134} rtl8225_write_phy_ofdm($p0, 11, 57);
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2135} msleep(1);
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2136} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 84));
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} msleep(1);
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2138} rtl8225_write_phy_ofdm($p0, 11, 56);
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2139} msleep(1);
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2140} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 83));
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2141} msleep(1);
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2142} rtl8225_write_phy_ofdm($p0, 11, 55);
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} msleep(1);
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2144} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 82));
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} msleep(1);
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2146} rtl8225_write_phy_ofdm($p0, 11, 54);
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} msleep(1);
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2148} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 81));
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2149} msleep(1);
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2150} rtl8225_write_phy_ofdm($p0, 11, 53);
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2151} msleep(1);
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2152} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 80));
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2153} msleep(1);
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2154} rtl8225_write_phy_ofdm($p0, 11, 52);
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2155} msleep(1);
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2156} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 79));
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2157} msleep(1);
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2158} rtl8225_write_phy_ofdm($p0, 11, 51);
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2159} msleep(1);
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2160} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 78));
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2161} msleep(1);
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2162} rtl8225_write_phy_ofdm($p0, 11, 50);
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2163} msleep(1);
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2164} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 77));
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2165} msleep(1);
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2166} rtl8225_write_phy_ofdm($p0, 11, 49);
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2167} msleep(1);
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2168} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 76));
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2169} msleep(1);
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2170} rtl8225_write_phy_ofdm($p0, 11, 48);
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2171} msleep(1);
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2172} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 75));
    goto corral_source_split_9815;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2173} msleep(1);
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2174} rtl8225_write_phy_ofdm($p0, 11, 47);
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} msleep(1);
    goto corral_source_split_9819;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 74));
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2177} msleep(1);
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2178} rtl8225_write_phy_ofdm($p0, 11, 46);
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2179} msleep(1);
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2180} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 73));
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2181} msleep(1);
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2182} rtl8225_write_phy_ofdm($p0, 11, 45);
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2183} msleep(1);
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2184} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 72));
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2185} msleep(1);
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2186} rtl8225_write_phy_ofdm($p0, 11, 44);
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2187} msleep(1);
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2188} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 71));
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2189} msleep(1);
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2190} rtl8225_write_phy_ofdm($p0, 11, 43);
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2191} msleep(1);
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2192} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 70));
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2193} msleep(1);
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2194} rtl8225_write_phy_ofdm($p0, 11, 42);
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2195} msleep(1);
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2196} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 69));
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2197} msleep(1);
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2198} rtl8225_write_phy_ofdm($p0, 11, 41);
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2199} msleep(1);
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2200} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 68));
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2201} msleep(1);
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2202} rtl8225_write_phy_ofdm($p0, 11, 40);
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2203} msleep(1);
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2204} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 67));
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2205} msleep(1);
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2206} rtl8225_write_phy_ofdm($p0, 11, 39);
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2207} msleep(1);
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2208} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 66));
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2209} msleep(1);
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2210} rtl8225_write_phy_ofdm($p0, 11, 38);
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2211} msleep(1);
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2212} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 65));
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2213} msleep(1);
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2214} rtl8225_write_phy_ofdm($p0, 11, 37);
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2215} msleep(1);
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2216} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 64));
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2217} msleep(1);
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2218} rtl8225_write_phy_ofdm($p0, 11, 36);
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2219} msleep(1);
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2220} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 63));
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2221} msleep(1);
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2222} rtl8225_write_phy_ofdm($p0, 11, 35);
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2223} msleep(1);
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2224} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 62));
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2225} msleep(1);
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2226} rtl8225_write_phy_ofdm($p0, 11, 34);
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2227} msleep(1);
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2228} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 61));
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2229} msleep(1);
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2230} rtl8225_write_phy_ofdm($p0, 11, 33);
    goto corral_source_split_9888;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2231} msleep(1);
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2232} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 60));
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2233} msleep(1);
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2234} rtl8225_write_phy_ofdm($p0, 11, 32);
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2235} msleep(1);
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2236} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 59));
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2237} msleep(1);
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2238} rtl8225_write_phy_ofdm($p0, 11, 31);
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2239} msleep(1);
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2240} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 58));
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2241} msleep(1);
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2242} rtl8225_write_phy_ofdm($p0, 11, 30);
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2243} msleep(1);
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2244} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 57));
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2245} msleep(1);
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2246} rtl8225_write_phy_ofdm($p0, 11, 29);
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2247} msleep(1);
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2248} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 56));
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2249} msleep(1);
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2250} rtl8225_write_phy_ofdm($p0, 11, 28);
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2251} msleep(1);
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2252} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 55));
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2253} msleep(1);
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2254} rtl8225_write_phy_ofdm($p0, 11, 27);
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2255} msleep(1);
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2256} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 54));
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2257} msleep(1);
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2258} rtl8225_write_phy_ofdm($p0, 11, 26);
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2259} msleep(1);
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2260} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 53));
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2261} msleep(1);
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2262} rtl8225_write_phy_ofdm($p0, 11, 25);
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2263} msleep(1);
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2264} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 52));
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2265} msleep(1);
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2266} rtl8225_write_phy_ofdm($p0, 11, 24);
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2267} msleep(1);
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2268} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 51));
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2269} msleep(1);
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2270} rtl8225_write_phy_ofdm($p0, 11, 23);
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2271} msleep(1);
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2272} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 50));
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2273} msleep(1);
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} rtl8225_write_phy_ofdm($p0, 11, 22);
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2275} msleep(1);
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2276} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 49));
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2277} msleep(1);
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2278} rtl8225_write_phy_ofdm($p0, 11, 21);
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2279} msleep(1);
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2280} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 48));
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2281} msleep(1);
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2282} rtl8225_write_phy_ofdm($p0, 11, 20);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2283} msleep(1);
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2284} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 47));
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2285} msleep(1);
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2286} rtl8225_write_phy_ofdm($p0, 11, 19);
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2287} msleep(1);
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2288} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 46));
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2289} msleep(1);
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2290} rtl8225_write_phy_ofdm($p0, 11, 18);
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2291} msleep(1);
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2292} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 45));
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2293} msleep(1);
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2294} rtl8225_write_phy_ofdm($p0, 11, 17);
    goto corral_source_split_9968;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2295} msleep(1);
    goto corral_source_split_9969;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2296} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 44));
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2297} msleep(1);
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2298} rtl8225_write_phy_ofdm($p0, 11, 16);
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2299} msleep(1);
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2300} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 43));
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2301} msleep(1);
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2302} rtl8225_write_phy_ofdm($p0, 11, 15);
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2303} msleep(1);
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2304} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 42));
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2305} msleep(1);
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2306} rtl8225_write_phy_ofdm($p0, 11, 14);
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2307} msleep(1);
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2308} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 41));
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2309} msleep(1);
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2310} rtl8225_write_phy_ofdm($p0, 11, 13);
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2311} msleep(1);
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2312} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 40));
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2313} msleep(1);
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2314} rtl8225_write_phy_ofdm($p0, 11, 12);
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2315} msleep(1);
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2316} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 39));
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2317} msleep(1);
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2318} rtl8225_write_phy_ofdm($p0, 11, 11);
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2319} msleep(1);
    goto corral_source_split_9999;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2320} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 38));
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2321} msleep(1);
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2322} rtl8225_write_phy_ofdm($p0, 11, 10);
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2323} msleep(1);
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2324} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 37));
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2325} msleep(1);
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2326} rtl8225_write_phy_ofdm($p0, 11, 9);
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2327} msleep(1);
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2328} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 36));
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2329} msleep(1);
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2330} rtl8225_write_phy_ofdm($p0, 11, 8);
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2331} msleep(1);
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2332} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 35));
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2333} msleep(1);
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2334} rtl8225_write_phy_ofdm($p0, 11, 7);
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2335} msleep(1);
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2336} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 34));
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2337} msleep(1);
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2338} rtl8225_write_phy_ofdm($p0, 11, 6);
    goto corral_source_split_10023;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2339} msleep(1);
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2340} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 33));
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2341} msleep(1);
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2342} rtl8225_write_phy_ofdm($p0, 11, 5);
    goto corral_source_split_10028;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2343} msleep(1);
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2344} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 32));
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2345} msleep(1);
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2346} rtl8225_write_phy_ofdm($p0, 11, 4);
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2347} msleep(1);
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2348} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 31));
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2349} msleep(1);
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2350} rtl8225_write_phy_ofdm($p0, 11, 3);
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2351} msleep(1);
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2352} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 30));
    goto corral_source_split_10040;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2353} msleep(1);
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2354} rtl8225_write_phy_ofdm($p0, 11, 2);
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2355} msleep(1);
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2356} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 29));
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2357} msleep(1);
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2358} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2359} msleep(1);
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2360} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 28));
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2361} msleep(1);
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2362} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2363} msleep(1);
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2364} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 27));
    goto corral_source_split_10055;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2365} msleep(1);
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2366} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2367} msleep(1);
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2368} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 26));
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2369} msleep(1);
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2370} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2371} msleep(1);
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2372} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 25));
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2373} msleep(1);
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2374} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2375} msleep(1);
    goto corral_source_split_10069;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2376} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 24));
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2377} msleep(1);
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2378} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10073;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2379} msleep(1);
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2380} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 23));
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2381} msleep(1);
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2382} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2383} msleep(1);
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2384} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 22));
    goto corral_source_split_10080;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2385} msleep(1);
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2386} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2387} msleep(1);
    goto corral_source_split_10084;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2388} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 21));
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2389} msleep(1);
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2390} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2391} msleep(1);
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2392} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 20));
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2393} msleep(1);
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2394} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2395} msleep(1);
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2396} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 19));
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2397} msleep(1);
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2398} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2399} msleep(1);
    goto corral_source_split_10099;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2400} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 18));
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2401} msleep(1);
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2402} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2403} msleep(1);
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2404} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 17));
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2405} msleep(1);
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2406} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2407} msleep(1);
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2408} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 16));
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2409} msleep(1);
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2410} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2411} msleep(1);
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2412} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 15));
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2413} msleep(1);
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2414} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2415} msleep(1);
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2416} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 14));
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2417} msleep(1);
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2418} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2419} msleep(1);
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2420} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 13));
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2421} msleep(1);
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2422} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2423} msleep(1);
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2424} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 12));
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2425} msleep(1);
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2426} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2427} msleep(1);
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2428} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 11));
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2429} msleep(1);
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2430} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2431} msleep(1);
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2432} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 10));
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2433} msleep(1);
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2434} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2435} msleep(1);
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2436} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 9));
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2437} msleep(1);
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2438} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2439} msleep(1);
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2440} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 8));
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2441} msleep(1);
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2442} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2443} msleep(1);
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2444} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 7));
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2445} msleep(1);
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2446} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2447} msleep(1);
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2448} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 6));
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2449} msleep(1);
    goto corral_source_split_10161;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2450} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2451} msleep(1);
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2452} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 5));
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2453} msleep(1);
    goto corral_source_split_10166;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2454} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2455} msleep(1);
    goto corral_source_split_10169;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2456} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 4));
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2457} msleep(1);
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2458} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10173;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2459} msleep(1);
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2460} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 3));
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2461} msleep(1);
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2462} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2463} msleep(1);
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2464} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 2));
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2465} msleep(1);
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2466} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2467} msleep(1);
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2468} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 1));
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2469} msleep(1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} msleep(1);
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} rtl8225_write_phy_ofdm($p0, 0, 1);
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} msleep(1);
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} rtl8225_write_phy_ofdm($p0, 1, 2);
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} msleep(1);
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1830} rtl8225_write_phy_ofdm($p0, 2, 98);
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} msleep(1);
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} rtl8225_write_phy_ofdm($p0, 3, 0);
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} msleep(1);
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} rtl8225_write_phy_ofdm($p0, 4, 0);
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} msleep(1);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} rtl8225_write_phy_ofdm($p0, 5, 0);
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} msleep(1);
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} rtl8225_write_phy_ofdm($p0, 6, 0);
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} msleep(1);
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} rtl8225_write_phy_ofdm($p0, 7, 0);
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} msleep(1);
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} rtl8225_write_phy_ofdm($p0, 8, 0);
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} msleep(1);
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} rtl8225_write_phy_ofdm($p0, 9, $sub.i8(0, 2));
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} msleep(1);
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} rtl8225_write_phy_ofdm($p0, 10, 9);
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} msleep(1);
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 128));
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} msleep(1);
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} rtl8225_write_phy_ofdm($p0, 12, 1);
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} msleep(1);
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 45));
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} msleep(1);
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} rtl8225_write_phy_ofdm($p0, 15, 56);
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} msleep(1);
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} rtl8225_write_phy_ofdm($p0, 16, $sub.i8(0, 124));
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} msleep(1);
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} rtl8225_write_phy_ofdm($p0, 17, 3);
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} msleep(1);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} rtl8225_write_phy_ofdm($p0, 18, 32);
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} msleep(1);
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} rtl8225_write_phy_ofdm($p0, 19, 32);
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1863} msleep(1);
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} rtl8225_write_phy_ofdm($p0, 20, 0);
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} msleep(1);
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} rtl8225_write_phy_ofdm($p0, 21, 64);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} msleep(1);
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} rtl8225_write_phy_ofdm($p0, 22, 0);
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1869} msleep(1);
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} rtl8225_write_phy_ofdm($p0, 23, 64);
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} msleep(1);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} rtl8225_write_phy_ofdm($p0, 24, $sub.i8(0, 17));
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} msleep(1);
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} rtl8225_write_phy_ofdm($p0, 25, 25);
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} msleep(1);
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} rtl8225_write_phy_ofdm($p0, 26, 32);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} msleep(1);
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1878} rtl8225_write_phy_ofdm($p0, 27, 118);
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} msleep(1);
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} rtl8225_write_phy_ofdm($p0, 28, 4);
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} msleep(1);
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} rtl8225_write_phy_ofdm($p0, 30, $sub.i8(0, 107));
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} msleep(1);
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} rtl8225_write_phy_ofdm($p0, 31, 117);
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} msleep(1);
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} rtl8225_write_phy_ofdm($p0, 32, 31);
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} msleep(1);
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} rtl8225_write_phy_ofdm($p0, 33, 39);
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} msleep(1);
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} rtl8225_write_phy_ofdm($p0, 34, 22);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} msleep(1);
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} rtl8225_write_phy_ofdm($p0, 36, 70);
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} msleep(1);
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} rtl8225_write_phy_ofdm($p0, 37, 32);
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} msleep(1);
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} rtl8225_write_phy_ofdm($p0, 38, $sub.i8(0, 112));
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} msleep(1);
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} rtl8225_write_phy_ofdm($p0, 39, $sub.i8(0, 120));
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} msleep(1);
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} rtl8225_write_phy_cck($p0, 0, $sub.i8(0, 104));
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} msleep(1);
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} rtl8225_write_phy_cck($p0, 3, 32);
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} msleep(1);
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} rtl8225_write_phy_cck($p0, 4, 126);
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} msleep(1);
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} rtl8225_write_phy_cck($p0, 5, 18);
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} msleep(1);
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} rtl8225_write_phy_cck($p0, 6, $sub.i8(0, 4));
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} msleep(1);
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} rtl8225_write_phy_cck($p0, 7, 120);
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} msleep(1);
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} rtl8225_write_phy_cck($p0, 8, 46);
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1913} msleep(1);
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} rtl8225_write_phy_cck($p0, 16, $sub.i8(0, 109));
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} msleep(1);
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} rtl8225_write_phy_cck($p0, 17, $sub.i8(0, 120));
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} msleep(1);
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} rtl8225_write_phy_cck($p0, 18, 71);
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} msleep(1);
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} rtl8225_write_phy_cck($p0, 19, $sub.i8(0, 48));
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1921} rtl8225_write_phy_cck($p0, 25, 0);
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} rtl8225_write_phy_cck($p0, 26, $sub.i8(0, 96));
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} rtl8225_write_phy_cck($p0, 27, 8);
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} rtl8225_write_phy_cck($p0, 64, $sub.i8(0, 122));
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1925} rtl8225_write_phy_cck($p0, 65, $sub.i8(0, 115));
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1926} msleep(1);
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1927} rtl8225_write_phy_cck($p0, 66, 21);
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} msleep(1);
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1929} rtl8225_write_phy_cck($p0, 67, 24);
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} msleep(1);
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} rtl8225_write_phy_cck($p0, 68, 31);
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} msleep(1);
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} rtl8225_write_phy_cck($p0, 69, 30);
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1934} msleep(1);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} rtl8225_write_phy_cck($p0, 70, 26);
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} msleep(1);
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1937} rtl8225_write_phy_cck($p0, 71, 21);
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1938} msleep(1);
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} rtl8225_write_phy_cck($p0, 72, 16);
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} msleep(1);
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1941} rtl8225_write_phy_cck($p0, 73, 10);
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1942} msleep(1);
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} rtl8225_write_phy_cck($p0, 74, 5);
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1944} msleep(1);
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} rtl8225_write_phy_cck($p0, 75, 2);
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} msleep(1);
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} rtl8225_write_phy_cck($p0, 76, 5);
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1948} msleep(1);
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 256)), $mul.ref(91, 1));
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} rtl818x_iowrite8($p3, $p56, 13);
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1950} msleep(1);
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} rtl8225_rf_set_tx_power($p0, 1);
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} rtl8225_write_phy_cck($p0, 16, $sub.i8(0, 101));
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1953} msleep(1);
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1954} rtl8225_write_phy_ofdm($p0, 38, $sub.i8(0, 112));
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} msleep(1);
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 256)), $mul.ref(159, 1));
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1956} rtl818x_iowrite8($p3, $p59, 3);
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} msleep(1);
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p62, $mul.ref(148, 4));
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} rtl818x_iowrite32($p3, $p63, 364904450);
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 256)), $mul.ref(130, 1));
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} rtl818x_iowrite16($p3, $p66, 8191);
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1960} rtl8225_write($p0, 12, 80);
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(16, 1)));
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i8($i68);
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} rtl8225_write_phy_ofdm($p0, 13, $i69);
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(17, 1)));
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i8($i71);
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1962} rtl8225_write_phy_ofdm($p0, 35, $i72);
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(18, 1)));
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i8($i74);
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1963} rtl8225_write_phy_ofdm($p0, 27, $i75);
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(19, 1)));
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i8($i77);
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} rtl8225_write_phy_ofdm($p0, 29, $i78);
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.44, rtl8225_threshold);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i8($i80);
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} rtl8225_write_phy_cck($p0, 65, $i81);
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    return;
}



const rtl8225_rf_stop: ref;

axiom rtl8225_rf_stop == $sub.ref(0, 401066);

procedure rtl8225_rf_stop($p0: ref);
  free requires assertsPassed;



implementation rtl8225_rf_stop($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i8;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10465;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2656} rtl8225_write($p0, 4, 31);
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2657} msleep(1);
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2658} rtl818x_iowrite8($p3, $p6, $sub.i8(0, 64));
    goto corral_source_split_10474;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_10477;

  corral_source_split_10477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2659} $i10 := rtl818x_ioread8($p3, $p9);
    call {:si_unique_call 2660} {:cexpr "reg"} boogie_si_record_i8($i10);
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i10);
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i14, 64);
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_10484;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2661} rtl818x_iowrite8($p3, $p13, $i16);
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 256)), $mul.ref(96, 1));
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2662} rtl818x_iowrite32($p3, $p19, $sub.i32(0, 2079462383));
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10490;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 256)), $mul.ref(84, 1));
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2663} rtl818x_iowrite32($p3, $p22, $sub.i32(0, 1609831591));
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_10496;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i10);
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 191);
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2664} rtl818x_iowrite8($p3, $p25, $i28);
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10501;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2665} rtl818x_iowrite8($p3, $p31, 0);
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    return;
}



const rtl8225_rf_set_channel: ref;

axiom rtl8225_rf_set_channel == $sub.ref(0, 402098);

procedure rtl8225_rf_set_channel($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation rtl8225_rf_set_channel($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i16;
  var $i23: i32;
  var $i24: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2666} $i11 := ieee80211_frequency_to_channel($i10);
    call {:si_unique_call 2667} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(8, 1));
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, $p2i.ref.i64(rtl8225_rf_init));
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2669} rtl8225z2_rf_set_tx_power($p0, $i11);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i11, $sub.i32(0, 1));
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref($i19, 4));
    goto corral_source_split_10530;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.42, $p20);
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2670} rtl8225_write($p0, 7, $i24);
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2671} msleep(10);
    goto corral_source_split_10536;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_10523;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2668} rtl8225_rf_set_tx_power($p0, $i11);
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rtl8225_rf_set_tx_power: ref;

axiom rtl8225_rf_set_tx_power == $sub.ref(0, 403130);

procedure rtl8225_rf_set_tx_power($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation rtl8225_rf_set_tx_power($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i64;
  var $p9: ref;
  var $i10: i16;
  var $i11: i8;
  var $i12: i32;
  var $i13: i64;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i26: i32;
  var $i25: i32;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i33: i32;
  var $i32: i32;
  var $i34: i8;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i64;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i32;
  var $i45: i8;
  var $i46: i1;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i64;
  var $p51: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i64;
  var $p57: ref;
  var $p52: ref;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i8;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i32;
  var $i76: i8;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i8;
  var $i84: i32;
  var $i85: i32;
  var $i86: i8;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $i95: i64;
  var $p96: ref;
  var $i97: i8;
  var $i98: i32;
  var $i99: i32;
  var $i100: i8;
  var $i101: i32;
  var $i102: i32;
  var $i103: i64;
  var $p104: ref;
  var $i105: i8;
  var $i106: i32;
  var $i107: i8;
  var $i108: i8;
  var $i109: i32;
  var $i110: i8;
  var $i111: i64;
  var $p112: ref;
  var $i113: i8;
  var $i114: i32;
  var $i115: i8;
  var $i116: i64;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;
  var $i120: i8;
  var $i121: i64;
  var $p122: ref;
  var $i123: i8;
  var $i124: i32;
  var $i125: i8;
  var $i126: i64;
  var $p127: ref;
  var $i128: i8;
  var $i129: i32;
  var $i130: i8;
  var $i131: i64;
  var $p132: ref;
  var $i133: i8;
  var $i134: i32;
  var $i135: i8;
  var $i136: i64;
  var $p137: ref;
  var $i138: i8;
  var $i139: i32;
  var $i140: i8;
  var $i141: i8;
  var $i142: i32;
  var $i143: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2672} {:cexpr "rtl8225_rf_set_tx_power:arg:channel"} boogie_si_record_i32($i1);
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_10543;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref($i6, 64)), $mul.ref(6, 1));
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i16.i8($i10);
    call {:si_unique_call 2673} {:cexpr "cck_power"} boogie_si_record_i8($i11);
    goto corral_source_split_10546;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref($i13, 64)), $mul.ref(6, 1));
    goto corral_source_split_10549;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    $i19 := $ashr.i32($i18, 8);
    goto corral_source_split_10552;

  corral_source_split_10552:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    call {:si_unique_call 2674} {:cexpr "ofdm_power"} boogie_si_record_i8($i20);
    goto corral_source_split_10553;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i11);
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32(35);
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i21, $i22);
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32(35);
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    $i25 := $i26;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i25);
    call {:si_unique_call 2675} {:cexpr "cck_power"} boogie_si_record_i8($i27);
    goto corral_source_split_10565;

  corral_source_split_10565:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i20);
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32(35);
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i28, $i29);
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32(35);
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    $i32 := $i33;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i32);
    call {:si_unique_call 2676} {:cexpr "ofdm_power"} boogie_si_record_i8($i34);
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 256)), $mul.ref(157, 1));
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i27);
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    $i39 := $udiv.i32($i38, 6);
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref(rtl8225_tx_gain_cck_ofdm, $mul.ref(0, 6)), $mul.ref($i40, 1));
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.45, $p41);
    goto corral_source_split_10585;

  corral_source_split_10585:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    $i44 := $ashr.i32($i43, 1);
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2677} rtl818x_iowrite8($p4, $p37, $i45);
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i1, 14);
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i46 == 1);
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i27);
    goto corral_source_split_10599;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    $i54 := $urem.i32($i53, 6);
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    $i55 := $mul.i32($i54, 8);
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i55);
    $p57 := $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref($i56, 1));
    assume {:verifier.code 0} true;
    $p52 := $p57;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p52, $mul.ref(1, 1));
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.46, $p52);
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_10607;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i8($i60);
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2678} rtl8225_write_phy_cck($p0, 68, $i61);
    goto corral_source_split_10609;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    $i111 := $add.i64(1, 1);
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($p52, $mul.ref($i111, 1));
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.46, $p58);
    goto corral_source_split_10613;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    $i114 := $zext.i8.i32($i113);
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i32.i8($i114);
    goto corral_source_split_10615;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2679} rtl8225_write_phy_cck($p0, 69, $i115);
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    $i116 := $add.i64($i111, 1);
    goto corral_source_split_10677;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p52, $mul.ref($i116, 1));
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.46, $p112);
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i32.i8($i119);
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2693} rtl8225_write_phy_cck($p0, 70, $i120);
    goto corral_source_split_10682;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    $i121 := $add.i64($i116, 1);
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($p52, $mul.ref($i121, 1));
    goto corral_source_split_10685;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.46, $p117);
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i32($i123);
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i32.i8($i124);
    goto corral_source_split_10688;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2694} rtl8225_write_phy_cck($p0, 71, $i125);
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    $i126 := $add.i64($i121, 1);
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p52, $mul.ref($i126, 1));
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.46, $p122);
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i32($i128);
    goto corral_source_split_10694;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    $i130 := $trunc.i32.i8($i129);
    goto corral_source_split_10695;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2695} rtl8225_write_phy_cck($p0, 72, $i130);
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    $i131 := $add.i64($i126, 1);
    goto corral_source_split_10698;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($p52, $mul.ref($i131, 1));
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    $i133 := $load.i8($M.46, $p127);
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i32($i133);
    goto corral_source_split_10701;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i32.i8($i134);
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2696} rtl8225_write_phy_cck($p0, 73, $i135);
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    $i136 := $add.i64($i131, 1);
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($p52, $mul.ref($i136, 1));
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.46, $p132);
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i32($i138);
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    $i140 := $trunc.i32.i8($i139);
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2697} rtl8225_write_phy_cck($p0, 74, $i140);
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i141 := $load.i8($M.46, $p137);
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    $i142 := $zext.i8.i32($i141);
    goto corral_source_split_10713;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    $i143 := $trunc.i32.i8($i142);
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2698} rtl8225_write_phy_cck($p0, 75, $i143);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2680} msleep(1);
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2681} rtl818x_iowrite8($p4, $p64, $sub.i8(0, 64));
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10623;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2682} $i68 := rtl818x_ioread8($p4, $p67);
    call {:si_unique_call 2683} {:cexpr "tmp___1"} boogie_si_record_i8($i68);
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    call {:si_unique_call 2684} {:cexpr "reg"} boogie_si_record_i32($i69);
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_10630;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i32.i8($i69);
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    $i75 := $or.i32($i74, 64);
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i8($i75);
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2685} rtl818x_iowrite8($p4, $p72, $i76);
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 256)), $mul.ref(96, 1));
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2686} rtl818x_iowrite32($p4, $p79, $sub.i32(0, 2045907951));
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i8($i69);
    goto corral_source_split_10643;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    $i85 := $and.i32($i84, 191);
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i8($i85);
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2687} rtl818x_iowrite8($p4, $p82, $i86);
    goto corral_source_split_10647;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2688} rtl818x_iowrite8($p4, $p89, 0);
    goto corral_source_split_10651;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10652;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 256)), $mul.ref(158, 1));
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i32($i34);
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    $i94 := $udiv.i32($i93, 6);
    goto corral_source_split_10656;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    $i95 := $sext.i32.i64($i94);
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref(rtl8225_tx_gain_cck_ofdm, $mul.ref(0, 6)), $mul.ref($i95, 1));
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.45, $p96);
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i97);
    goto corral_source_split_10660;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    $i99 := $ashr.i32($i98, 1);
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i32.i8($i99);
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2689} rtl818x_iowrite8($p4, $p92, $i100);
    goto corral_source_split_10663;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i34);
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    $i102 := $urem.i32($i101, 6);
    goto corral_source_split_10665;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    $i103 := $zext.i32.i64($i102);
    $p104 := $add.ref($add.ref(rtl8225_tx_power_ofdm, $mul.ref(0, 6)), $mul.ref($i103, 1));
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.47, $p104);
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i105);
    goto corral_source_split_10668;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i8($i106);
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2690} rtl8225_write_phy_ofdm($p0, 5, $i107);
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.47, $p104);
    goto corral_source_split_10671;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i108);
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i32.i8($i109);
    goto corral_source_split_10673;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2691} rtl8225_write_phy_ofdm($p0, 7, $i110);
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2692} msleep(1);
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i46 == 1;
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i27);
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    $i48 := $urem.i32($i47, 6);
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    $i49 := $mul.i32($i48, 8);
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i49);
    $p51 := $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref($i50, 1));
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    $p52 := $p51;
    goto $bb9;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i20);
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb6;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i11);
    goto corral_source_split_10559;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb3;
}



const rtl8225z2_rf_set_tx_power: ref;

axiom rtl8225z2_rf_set_tx_power == $sub.ref(0, 404162);

procedure rtl8225z2_rf_set_tx_power($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation rtl8225z2_rf_set_tx_power($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i64;
  var $p9: ref;
  var $i10: i16;
  var $i11: i8;
  var $i12: i32;
  var $i13: i64;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;
  var $i21: i1;
  var $i23: i32;
  var $i24: i1;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p25: ref;
  var $p22: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i38: i32;
  var $i37: i32;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i32;
  var $i49: i8;
  var $i50: i8;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i8;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i65: i32;
  var $i64: i32;
  var $i66: i8;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i8;
  var $i72: i64;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $i76: i8;
  var $i77: i64;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $i81: i8;
  var $i82: i64;
  var $p83: ref;
  var $i84: i8;
  var $i85: i32;
  var $i86: i8;
  var $i87: i64;
  var $p88: ref;
  var $i89: i8;
  var $i90: i32;
  var $i91: i8;
  var $i92: i64;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $i96: i8;
  var $i97: i64;
  var $p98: ref;
  var $i99: i8;
  var $i100: i32;
  var $i101: i8;
  var $i102: i8;
  var $i103: i32;
  var $i104: i8;
  var vslice_dummy_var_150: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2699} {:cexpr "rtl8225z2_rf_set_tx_power:arg:channel"} boogie_si_record_i32($i1);
    goto corral_source_split_10716;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10719;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref($i6, 64)), $mul.ref(6, 1));
    goto corral_source_split_10722;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i16.i8($i10);
    call {:si_unique_call 2700} {:cexpr "cck_power"} boogie_si_record_i8($i11);
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_10725;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref($i13, 64)), $mul.ref(6, 1));
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    $i19 := $ashr.i32($i18, 8);
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    call {:si_unique_call 2701} {:cexpr "ofdm_power"} boogie_si_record_i8($i20);
    goto corral_source_split_10731;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i1, 14);
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i11);
    goto corral_source_split_10737;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 12);
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i11);
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 13);
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $p28 := rtl8225z2_tx_power_cck;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p25 := $p28;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p22 := $p25;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10740;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p22, $mul.ref(1, 1));
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.48, $p22);
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_10752;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2702} rtl8225_write_phy_cck($p0, 68, $i32);
    goto corral_source_split_10754;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    $i72 := $add.i64(1, 1);
    goto corral_source_split_10756;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p22, $mul.ref($i72, 1));
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.48, $p29);
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i8($i75);
    goto corral_source_split_10760;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2703} rtl8225_write_phy_cck($p0, 69, $i76);
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    $i77 := $add.i64($i72, 1);
    goto corral_source_split_10828;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p22, $mul.ref($i77, 1));
    goto corral_source_split_10829;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.48, $p73);
    goto corral_source_split_10830;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i8($i80);
    goto corral_source_split_10832;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2717} rtl8225_write_phy_cck($p0, 70, $i81);
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    $i82 := $add.i64($i77, 1);
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p22, $mul.ref($i82, 1));
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.48, $p78);
    goto corral_source_split_10837;

  corral_source_split_10837:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i84);
    goto corral_source_split_10838;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i8($i85);
    goto corral_source_split_10839;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2718} rtl8225_write_phy_cck($p0, 71, $i86);
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    $i87 := $add.i64($i82, 1);
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p22, $mul.ref($i87, 1));
    goto corral_source_split_10843;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.48, $p83);
    goto corral_source_split_10844;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i89);
    goto corral_source_split_10845;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i32.i8($i90);
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2719} rtl8225_write_phy_cck($p0, 72, $i91);
    goto corral_source_split_10847;

  corral_source_split_10847:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    $i92 := $add.i64($i87, 1);
    goto corral_source_split_10849;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p22, $mul.ref($i92, 1));
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.48, $p88);
    goto corral_source_split_10851;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i8($i95);
    goto corral_source_split_10853;

  corral_source_split_10853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2720} rtl8225_write_phy_cck($p0, 73, $i96);
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    $i97 := $add.i64($i92, 1);
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($p22, $mul.ref($i97, 1));
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.48, $p93);
    goto corral_source_split_10858;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i99);
    goto corral_source_split_10859;

  corral_source_split_10859:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i8($i100);
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2721} rtl8225_write_phy_cck($p0, 74, $i101);
    goto corral_source_split_10861;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.48, $p98);
    goto corral_source_split_10863;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i32.i8($i103);
    goto corral_source_split_10865;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2722} rtl8225_write_phy_cck($p0, 75, $i104);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i11);
    goto corral_source_split_10763;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32(35);
    goto corral_source_split_10764;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i33, $i34);
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32(35);
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    $i37 := $i38;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_10773;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i8($i37);
    call {:si_unique_call 2704} {:cexpr "cck_power"} boogie_si_record_i8($i39);
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_10775;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 13);
    goto corral_source_split_10776;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i41 == 1);
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i39);
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 14);
    goto corral_source_split_10780;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $i39;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_10783;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    $i46 := $ugt.i32($i45, 14);
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i50 := $i44;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_10791;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_10793;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 256)), $mul.ref(157, 1));
    goto corral_source_split_10794;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i50);
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i8($i54);
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2706} rtl818x_iowrite8($p4, $p53, $i55);
    goto corral_source_split_10797;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 256)), $mul.ref(157, 1));
    goto corral_source_split_10800;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2707} vslice_dummy_var_150 := rtl818x_ioread8($p4, $p58);
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2708} msleep(1);
    goto corral_source_split_10802;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i20);
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32(35);
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i60, $i61);
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i62 == 1);
    goto corral_source_split_10810;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32(35);
    goto corral_source_split_10811;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    $i64 := $i65;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_10813;

  corral_source_split_10813:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i8($i64);
    call {:si_unique_call 2709} {:cexpr "ofdm_power"} boogie_si_record_i8($i66);
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10815;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 256)), $mul.ref(158, 1));
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i66);
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i8($i70);
    goto corral_source_split_10819;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2710} rtl818x_iowrite8($p4, $p69, $i71);
    goto corral_source_split_10820;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2711} rtl8225_write_phy_ofdm($p0, 2, 98);
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2712} rtl8225_write_phy_ofdm($p0, 5, 0);
    goto corral_source_split_10822;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2713} rtl8225_write_phy_ofdm($p0, 6, 64);
    goto corral_source_split_10823;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2714} rtl8225_write_phy_ofdm($p0, 7, 0);
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2715} rtl8225_write_phy_ofdm($p0, 8, 64);
    goto corral_source_split_10825;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2716} msleep(1);
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    return;

  $bb26:
    assume $i62 == 1;
    goto corral_source_split_10807;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i20);
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    $i64 := $i63;
    goto $bb28;

  $bb23:
    assume $i46 == 1;
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i44);
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i47, 254);
    goto corral_source_split_10788;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    call {:si_unique_call 2705} {:cexpr "cck_power"} boogie_si_record_i8($i49);
    goto corral_source_split_10789;

  corral_source_split_10789:
    assume {:verifier.code 0} true;
    $i50 := $i49;
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i44 := 12;
    goto $bb22;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb18;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_10767;

  corral_source_split_10767:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i11);
    goto corral_source_split_10768;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb16;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    $p28 := rtl8225z2_tx_power_cck_A;
    goto $bb9;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    $p25 := rtl8225z2_tx_power_cck_B;
    goto $bb6;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_10734;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    $p22 := rtl8225z2_tx_power_cck_ch14;
    goto $bb3;
}



const rtl8225z2_rf_init: ref;

axiom rtl8225z2_rf_init == $sub.ref(0, 405194);

procedure rtl8225z2_rf_init($p0: ref);
  free requires assertsPassed;



implementation rtl8225z2_rf_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i16;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var vslice_dummy_var_151: i8;
  var vslice_dummy_var_152: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10867;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_10868;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_10869;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_10870;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2723} rtl8180_set_anaparam($p3, $sub.i32(0, 1610609831));
    goto corral_source_split_10871;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10872;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_10873;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2724} rtl818x_iowrite16($p3, $p6, 1152);
    goto corral_source_split_10875;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10876;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_10877;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 256)), $mul.ref(130, 1));
    goto corral_source_split_10878;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2725} rtl818x_iowrite16($p3, $p9, 8191);
    goto corral_source_split_10879;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10880;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_10881;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 256)), $mul.ref(132, 1));
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2726} rtl818x_iowrite16($p3, $p12, 1160);
    goto corral_source_split_10883;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10884;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_10885;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 256)), $mul.ref(144, 1));
    goto corral_source_split_10886;

  corral_source_split_10886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2727} rtl818x_iowrite8($p3, $p15, 0);
    goto corral_source_split_10887;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10888;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2728} vslice_dummy_var_151 := rtl818x_ioread8($p3, $p18);
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2729} msleep(200);
    goto corral_source_split_10892;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10893;

  corral_source_split_10893:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_10894;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 256)), $mul.ref(144, 1));
    goto corral_source_split_10895;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2730} rtl818x_iowrite8($p3, $p22, $sub.i8(0, 65));
    goto corral_source_split_10896;

  corral_source_split_10896:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_10898;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 256)), $mul.ref(140, 1));
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2731} rtl818x_iowrite32($p3, $p25, 557064);
    goto corral_source_split_10900;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10901;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 256)), $mul.ref(44, 1));
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_10904;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2732} vslice_dummy_var_152 := rtl818x_ioread16($p3, $p29);
    goto corral_source_split_10905;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10906;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_10907;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 256)), $mul.ref(44, 1));
    goto corral_source_split_10908;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_10909;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2733} rtl818x_iowrite16($p3, $p34, $sub.i16(0, 1));
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10911;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_10912;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 256)), $mul.ref(136, 1));
    goto corral_source_split_10913;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2734} rtl818x_iowrite32($p3, $p37, 1048644);
    goto corral_source_split_10914;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10915;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_10916;

  corral_source_split_10916:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2735} rtl818x_iowrite8($p3, $p40, $sub.i8(0, 64));
    goto corral_source_split_10918;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10919;

  corral_source_split_10919:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 256)), $mul.ref(89, 1));
    goto corral_source_split_10921;

  corral_source_split_10921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2736} rtl818x_iowrite8($p3, $p43, 68);
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10923;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_10924;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 256)), $mul.ref(80, 1));
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2737} rtl818x_iowrite8($p3, $p46, 0);
    goto corral_source_split_10926;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_10928;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 256)), $mul.ref(130, 1));
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2738} rtl818x_iowrite16($p3, $p49, 8191);
    goto corral_source_split_10930;

  corral_source_split_10930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2739} rtl8225_write($p0, 0, 183);
    goto corral_source_split_10931;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2740} msleep(1);
    goto corral_source_split_10932;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2741} rtl8225_write($p0, 1, 3808);
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2742} msleep(1);
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2743} rtl8225_write($p0, 2, 1101);
    goto corral_source_split_10935;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2744} msleep(1);
    goto corral_source_split_10936;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2745} rtl8225_write($p0, 3, 1089);
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2746} msleep(1);
    goto corral_source_split_10938;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2747} rtl8225_write($p0, 4, 2243);
    goto corral_source_split_10939;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2748} msleep(1);
    goto corral_source_split_10940;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2749} rtl8225_write($p0, 5, 3186);
    goto corral_source_split_10941;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2750} msleep(1);
    goto corral_source_split_10942;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2751} rtl8225_write($p0, 6, 230);
    goto corral_source_split_10943;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2752} msleep(1);
    goto corral_source_split_10944;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2753} rtl8225_write($p0, 7, 2090);
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2754} msleep(1);
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2755} rtl8225_write($p0, 8, 63);
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2756} msleep(1);
    goto corral_source_split_10948;

  corral_source_split_10948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2757} rtl8225_write($p0, 9, 821);
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2758} msleep(1);
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2759} rtl8225_write($p0, 10, 2516);
    goto corral_source_split_10951;

  corral_source_split_10951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2760} msleep(1);
    goto corral_source_split_10952;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2761} rtl8225_write($p0, 11, 1979);
    goto corral_source_split_10953;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2762} msleep(1);
    goto corral_source_split_10954;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2763} rtl8225_write($p0, 12, 2128);
    goto corral_source_split_10955;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2764} msleep(1);
    goto corral_source_split_10956;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2765} rtl8225_write($p0, 13, 3295);
    goto corral_source_split_10957;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2766} msleep(1);
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2767} rtl8225_write($p0, 14, 43);
    goto corral_source_split_10959;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2768} msleep(1);
    goto corral_source_split_10960;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2769} rtl8225_write($p0, 15, 276);
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2770} msleep(100);
    goto corral_source_split_10962;

  corral_source_split_10962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2771} $i50 := rtl8225_read($p0, 6);
    call {:si_unique_call 2772} {:cexpr "tmp"} boogie_si_record_i16($i50);
    goto corral_source_split_10963;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_10964;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 128);
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 0);
    goto corral_source_split_10966;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2777} rtl8225_write($p0, 0, 439);
    goto corral_source_split_10974;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2778} rtl8225_write($p0, 3, 2);
    goto corral_source_split_10975;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2779} rtl8225_write($p0, 5, 4);
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2780} rtl8225_write($p0, 1, 1);
    goto corral_source_split_10978;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2781} rtl8225_write($p0, 2, 0);
    goto corral_source_split_10979;

  corral_source_split_10979:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2782} rtl8225_write($p0, 1, 2);
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2783} rtl8225_write($p0, 2, 1);
    goto corral_source_split_10982;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3447} rtl8225_write($p0, 1, 3);
    goto corral_source_split_11793;

  corral_source_split_11793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3448} rtl8225_write($p0, 2, 2);
    goto corral_source_split_11794;

  corral_source_split_11794:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3449} rtl8225_write($p0, 1, 4);
    goto corral_source_split_11796;

  corral_source_split_11796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3450} rtl8225_write($p0, 2, 3);
    goto corral_source_split_11797;

  corral_source_split_11797:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3451} rtl8225_write($p0, 1, 5);
    goto corral_source_split_11799;

  corral_source_split_11799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3452} rtl8225_write($p0, 2, 4);
    goto corral_source_split_11800;

  corral_source_split_11800:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3453} rtl8225_write($p0, 1, 6);
    goto corral_source_split_11802;

  corral_source_split_11802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3454} rtl8225_write($p0, 2, 5);
    goto corral_source_split_11803;

  corral_source_split_11803:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3455} rtl8225_write($p0, 1, 7);
    goto corral_source_split_11805;

  corral_source_split_11805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3456} rtl8225_write($p0, 2, 8);
    goto corral_source_split_11806;

  corral_source_split_11806:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3457} rtl8225_write($p0, 1, 8);
    goto corral_source_split_11808;

  corral_source_split_11808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3458} rtl8225_write($p0, 2, 9);
    goto corral_source_split_11809;

  corral_source_split_11809:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3459} rtl8225_write($p0, 1, 9);
    goto corral_source_split_11811;

  corral_source_split_11811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3460} rtl8225_write($p0, 2, 10);
    goto corral_source_split_11812;

  corral_source_split_11812:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3461} rtl8225_write($p0, 1, 10);
    goto corral_source_split_11814;

  corral_source_split_11814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3462} rtl8225_write($p0, 2, 11);
    goto corral_source_split_11815;

  corral_source_split_11815:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3463} rtl8225_write($p0, 1, 11);
    goto corral_source_split_11817;

  corral_source_split_11817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3464} rtl8225_write($p0, 2, 258);
    goto corral_source_split_11818;

  corral_source_split_11818:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3465} rtl8225_write($p0, 1, 12);
    goto corral_source_split_11820;

  corral_source_split_11820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3466} rtl8225_write($p0, 2, 259);
    goto corral_source_split_11821;

  corral_source_split_11821:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3467} rtl8225_write($p0, 1, 13);
    goto corral_source_split_11823;

  corral_source_split_11823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3468} rtl8225_write($p0, 2, 260);
    goto corral_source_split_11824;

  corral_source_split_11824:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3469} rtl8225_write($p0, 1, 14);
    goto corral_source_split_11826;

  corral_source_split_11826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3470} rtl8225_write($p0, 2, 261);
    goto corral_source_split_11827;

  corral_source_split_11827:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3471} rtl8225_write($p0, 1, 15);
    goto corral_source_split_11829;

  corral_source_split_11829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3472} rtl8225_write($p0, 2, 320);
    goto corral_source_split_11830;

  corral_source_split_11830:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3473} rtl8225_write($p0, 1, 16);
    goto corral_source_split_11832;

  corral_source_split_11832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3474} rtl8225_write($p0, 2, 321);
    goto corral_source_split_11833;

  corral_source_split_11833:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3475} rtl8225_write($p0, 1, 17);
    goto corral_source_split_11835;

  corral_source_split_11835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3476} rtl8225_write($p0, 2, 322);
    goto corral_source_split_11836;

  corral_source_split_11836:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3477} rtl8225_write($p0, 1, 18);
    goto corral_source_split_11838;

  corral_source_split_11838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3478} rtl8225_write($p0, 2, 323);
    goto corral_source_split_11839;

  corral_source_split_11839:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3479} rtl8225_write($p0, 1, 19);
    goto corral_source_split_11841;

  corral_source_split_11841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3480} rtl8225_write($p0, 2, 324);
    goto corral_source_split_11842;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3481} rtl8225_write($p0, 1, 20);
    goto corral_source_split_11844;

  corral_source_split_11844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3482} rtl8225_write($p0, 2, 325);
    goto corral_source_split_11845;

  corral_source_split_11845:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3483} rtl8225_write($p0, 1, 21);
    goto corral_source_split_11847;

  corral_source_split_11847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3484} rtl8225_write($p0, 2, 384);
    goto corral_source_split_11848;

  corral_source_split_11848:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3485} rtl8225_write($p0, 1, 22);
    goto corral_source_split_11850;

  corral_source_split_11850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3486} rtl8225_write($p0, 2, 385);
    goto corral_source_split_11851;

  corral_source_split_11851:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3487} rtl8225_write($p0, 1, 23);
    goto corral_source_split_11853;

  corral_source_split_11853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3488} rtl8225_write($p0, 2, 386);
    goto corral_source_split_11854;

  corral_source_split_11854:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3489} rtl8225_write($p0, 1, 24);
    goto corral_source_split_11856;

  corral_source_split_11856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3490} rtl8225_write($p0, 2, 387);
    goto corral_source_split_11857;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3491} rtl8225_write($p0, 1, 25);
    goto corral_source_split_11859;

  corral_source_split_11859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3492} rtl8225_write($p0, 2, 388);
    goto corral_source_split_11860;

  corral_source_split_11860:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3493} rtl8225_write($p0, 1, 26);
    goto corral_source_split_11862;

  corral_source_split_11862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3494} rtl8225_write($p0, 2, 389);
    goto corral_source_split_11863;

  corral_source_split_11863:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3495} rtl8225_write($p0, 1, 27);
    goto corral_source_split_11865;

  corral_source_split_11865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3496} rtl8225_write($p0, 2, 392);
    goto corral_source_split_11866;

  corral_source_split_11866:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3497} rtl8225_write($p0, 1, 28);
    goto corral_source_split_11868;

  corral_source_split_11868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3498} rtl8225_write($p0, 2, 393);
    goto corral_source_split_11869;

  corral_source_split_11869:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3499} rtl8225_write($p0, 1, 29);
    goto corral_source_split_11871;

  corral_source_split_11871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3500} rtl8225_write($p0, 2, 394);
    goto corral_source_split_11872;

  corral_source_split_11872:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3501} rtl8225_write($p0, 1, 30);
    goto corral_source_split_11874;

  corral_source_split_11874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3502} rtl8225_write($p0, 2, 395);
    goto corral_source_split_11875;

  corral_source_split_11875:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3503} rtl8225_write($p0, 1, 31);
    goto corral_source_split_11877;

  corral_source_split_11877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3504} rtl8225_write($p0, 2, 579);
    goto corral_source_split_11878;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3505} rtl8225_write($p0, 1, 32);
    goto corral_source_split_11880;

  corral_source_split_11880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3506} rtl8225_write($p0, 2, 580);
    goto corral_source_split_11881;

  corral_source_split_11881:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3507} rtl8225_write($p0, 1, 33);
    goto corral_source_split_11883;

  corral_source_split_11883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3508} rtl8225_write($p0, 2, 581);
    goto corral_source_split_11884;

  corral_source_split_11884:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3509} rtl8225_write($p0, 1, 34);
    goto corral_source_split_11886;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3510} rtl8225_write($p0, 2, 640);
    goto corral_source_split_11887;

  corral_source_split_11887:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3511} rtl8225_write($p0, 1, 35);
    goto corral_source_split_11889;

  corral_source_split_11889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3512} rtl8225_write($p0, 2, 641);
    goto corral_source_split_11890;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3513} rtl8225_write($p0, 1, 36);
    goto corral_source_split_11892;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3514} rtl8225_write($p0, 2, 642);
    goto corral_source_split_11893;

  corral_source_split_11893:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3515} rtl8225_write($p0, 1, 37);
    goto corral_source_split_11895;

  corral_source_split_11895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3516} rtl8225_write($p0, 2, 643);
    goto corral_source_split_11896;

  corral_source_split_11896:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3517} rtl8225_write($p0, 1, 38);
    goto corral_source_split_11898;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3518} rtl8225_write($p0, 2, 644);
    goto corral_source_split_11899;

  corral_source_split_11899:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3519} rtl8225_write($p0, 1, 39);
    goto corral_source_split_11901;

  corral_source_split_11901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3520} rtl8225_write($p0, 2, 645);
    goto corral_source_split_11902;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3521} rtl8225_write($p0, 1, 40);
    goto corral_source_split_11904;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3522} rtl8225_write($p0, 2, 648);
    goto corral_source_split_11905;

  corral_source_split_11905:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3523} rtl8225_write($p0, 1, 41);
    goto corral_source_split_11907;

  corral_source_split_11907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3524} rtl8225_write($p0, 2, 649);
    goto corral_source_split_11908;

  corral_source_split_11908:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3525} rtl8225_write($p0, 1, 42);
    goto corral_source_split_11910;

  corral_source_split_11910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3526} rtl8225_write($p0, 2, 650);
    goto corral_source_split_11911;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3527} rtl8225_write($p0, 1, 43);
    goto corral_source_split_11913;

  corral_source_split_11913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3528} rtl8225_write($p0, 2, 651);
    goto corral_source_split_11914;

  corral_source_split_11914:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3529} rtl8225_write($p0, 1, 44);
    goto corral_source_split_11916;

  corral_source_split_11916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3530} rtl8225_write($p0, 2, 652);
    goto corral_source_split_11917;

  corral_source_split_11917:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3531} rtl8225_write($p0, 1, 45);
    goto corral_source_split_11919;

  corral_source_split_11919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3532} rtl8225_write($p0, 2, 834);
    goto corral_source_split_11920;

  corral_source_split_11920:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3533} rtl8225_write($p0, 1, 46);
    goto corral_source_split_11922;

  corral_source_split_11922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3534} rtl8225_write($p0, 2, 835);
    goto corral_source_split_11923;

  corral_source_split_11923:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3535} rtl8225_write($p0, 1, 47);
    goto corral_source_split_11925;

  corral_source_split_11925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3536} rtl8225_write($p0, 2, 836);
    goto corral_source_split_11926;

  corral_source_split_11926:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3537} rtl8225_write($p0, 1, 48);
    goto corral_source_split_11928;

  corral_source_split_11928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3538} rtl8225_write($p0, 2, 837);
    goto corral_source_split_11929;

  corral_source_split_11929:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3539} rtl8225_write($p0, 1, 49);
    goto corral_source_split_11931;

  corral_source_split_11931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3540} rtl8225_write($p0, 2, 896);
    goto corral_source_split_11932;

  corral_source_split_11932:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3541} rtl8225_write($p0, 1, 50);
    goto corral_source_split_11934;

  corral_source_split_11934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3542} rtl8225_write($p0, 2, 897);
    goto corral_source_split_11935;

  corral_source_split_11935:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3543} rtl8225_write($p0, 1, 51);
    goto corral_source_split_11937;

  corral_source_split_11937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3544} rtl8225_write($p0, 2, 898);
    goto corral_source_split_11938;

  corral_source_split_11938:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3545} rtl8225_write($p0, 1, 52);
    goto corral_source_split_11940;

  corral_source_split_11940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3546} rtl8225_write($p0, 2, 899);
    goto corral_source_split_11941;

  corral_source_split_11941:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3547} rtl8225_write($p0, 1, 53);
    goto corral_source_split_11943;

  corral_source_split_11943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3548} rtl8225_write($p0, 2, 900);
    goto corral_source_split_11944;

  corral_source_split_11944:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3549} rtl8225_write($p0, 1, 54);
    goto corral_source_split_11946;

  corral_source_split_11946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3550} rtl8225_write($p0, 2, 901);
    goto corral_source_split_11947;

  corral_source_split_11947:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3551} rtl8225_write($p0, 1, 55);
    goto corral_source_split_11949;

  corral_source_split_11949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3552} rtl8225_write($p0, 2, 904);
    goto corral_source_split_11950;

  corral_source_split_11950:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3553} rtl8225_write($p0, 1, 56);
    goto corral_source_split_11952;

  corral_source_split_11952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3554} rtl8225_write($p0, 2, 905);
    goto corral_source_split_11953;

  corral_source_split_11953:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3555} rtl8225_write($p0, 1, 57);
    goto corral_source_split_11955;

  corral_source_split_11955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3556} rtl8225_write($p0, 2, 906);
    goto corral_source_split_11956;

  corral_source_split_11956:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3557} rtl8225_write($p0, 1, 58);
    goto corral_source_split_11958;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3558} rtl8225_write($p0, 2, 907);
    goto corral_source_split_11959;

  corral_source_split_11959:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3559} rtl8225_write($p0, 1, 59);
    goto corral_source_split_11961;

  corral_source_split_11961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3560} rtl8225_write($p0, 2, 908);
    goto corral_source_split_11962;

  corral_source_split_11962:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3561} rtl8225_write($p0, 1, 60);
    goto corral_source_split_11964;

  corral_source_split_11964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3562} rtl8225_write($p0, 2, 909);
    goto corral_source_split_11965;

  corral_source_split_11965:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3563} rtl8225_write($p0, 1, 61);
    goto corral_source_split_11967;

  corral_source_split_11967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3564} rtl8225_write($p0, 2, 912);
    goto corral_source_split_11968;

  corral_source_split_11968:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3565} rtl8225_write($p0, 1, 62);
    goto corral_source_split_11970;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3566} rtl8225_write($p0, 2, 913);
    goto corral_source_split_11971;

  corral_source_split_11971:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3567} rtl8225_write($p0, 1, 63);
    goto corral_source_split_11973;

  corral_source_split_11973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3568} rtl8225_write($p0, 2, 914);
    goto corral_source_split_11974;

  corral_source_split_11974:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3569} rtl8225_write($p0, 1, 64);
    goto corral_source_split_11976;

  corral_source_split_11976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3570} rtl8225_write($p0, 2, 915);
    goto corral_source_split_11977;

  corral_source_split_11977:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3571} rtl8225_write($p0, 1, 65);
    goto corral_source_split_11979;

  corral_source_split_11979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3572} rtl8225_write($p0, 2, 916);
    goto corral_source_split_11980;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3573} rtl8225_write($p0, 1, 66);
    goto corral_source_split_11982;

  corral_source_split_11982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3574} rtl8225_write($p0, 2, 917);
    goto corral_source_split_11983;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3575} rtl8225_write($p0, 1, 67);
    goto corral_source_split_11985;

  corral_source_split_11985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3576} rtl8225_write($p0, 2, 920);
    goto corral_source_split_11986;

  corral_source_split_11986:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3577} rtl8225_write($p0, 1, 68);
    goto corral_source_split_11988;

  corral_source_split_11988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3578} rtl8225_write($p0, 2, 921);
    goto corral_source_split_11989;

  corral_source_split_11989:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3579} rtl8225_write($p0, 1, 69);
    goto corral_source_split_11991;

  corral_source_split_11991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3580} rtl8225_write($p0, 2, 922);
    goto corral_source_split_11992;

  corral_source_split_11992:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3581} rtl8225_write($p0, 1, 70);
    goto corral_source_split_11994;

  corral_source_split_11994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3582} rtl8225_write($p0, 2, 923);
    goto corral_source_split_11995;

  corral_source_split_11995:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3583} rtl8225_write($p0, 1, 71);
    goto corral_source_split_11997;

  corral_source_split_11997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3584} rtl8225_write($p0, 2, 924);
    goto corral_source_split_11998;

  corral_source_split_11998:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3585} rtl8225_write($p0, 1, 72);
    goto corral_source_split_12000;

  corral_source_split_12000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3586} rtl8225_write($p0, 2, 925);
    goto corral_source_split_12001;

  corral_source_split_12001:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3587} rtl8225_write($p0, 1, 73);
    goto corral_source_split_12003;

  corral_source_split_12003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3588} rtl8225_write($p0, 2, 928);
    goto corral_source_split_12004;

  corral_source_split_12004:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3589} rtl8225_write($p0, 1, 74);
    goto corral_source_split_12006;

  corral_source_split_12006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3590} rtl8225_write($p0, 2, 929);
    goto corral_source_split_12007;

  corral_source_split_12007:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3591} rtl8225_write($p0, 1, 75);
    goto corral_source_split_12009;

  corral_source_split_12009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3592} rtl8225_write($p0, 2, 930);
    goto corral_source_split_12010;

  corral_source_split_12010:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3593} rtl8225_write($p0, 1, 76);
    goto corral_source_split_12012;

  corral_source_split_12012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3594} rtl8225_write($p0, 2, 931);
    goto corral_source_split_12013;

  corral_source_split_12013:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3595} rtl8225_write($p0, 1, 77);
    goto corral_source_split_12015;

  corral_source_split_12015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3596} rtl8225_write($p0, 2, 932);
    goto corral_source_split_12016;

  corral_source_split_12016:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3597} rtl8225_write($p0, 1, 78);
    goto corral_source_split_12018;

  corral_source_split_12018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3598} rtl8225_write($p0, 2, 933);
    goto corral_source_split_12019;

  corral_source_split_12019:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3599} rtl8225_write($p0, 1, 79);
    goto corral_source_split_12021;

  corral_source_split_12021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3600} rtl8225_write($p0, 2, 936);
    goto corral_source_split_12022;

  corral_source_split_12022:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3601} rtl8225_write($p0, 1, 80);
    goto corral_source_split_12024;

  corral_source_split_12024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3602} rtl8225_write($p0, 2, 937);
    goto corral_source_split_12025;

  corral_source_split_12025:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3603} rtl8225_write($p0, 1, 81);
    goto corral_source_split_12027;

  corral_source_split_12027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3604} rtl8225_write($p0, 2, 938);
    goto corral_source_split_12028;

  corral_source_split_12028:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3605} rtl8225_write($p0, 1, 82);
    goto corral_source_split_12030;

  corral_source_split_12030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3606} rtl8225_write($p0, 2, 939);
    goto corral_source_split_12031;

  corral_source_split_12031:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3607} rtl8225_write($p0, 1, 83);
    goto corral_source_split_12033;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3608} rtl8225_write($p0, 2, 940);
    goto corral_source_split_12034;

  corral_source_split_12034:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3609} rtl8225_write($p0, 1, 84);
    goto corral_source_split_12036;

  corral_source_split_12036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3610} rtl8225_write($p0, 2, 941);
    goto corral_source_split_12037;

  corral_source_split_12037:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3611} rtl8225_write($p0, 1, 85);
    goto corral_source_split_12039;

  corral_source_split_12039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3612} rtl8225_write($p0, 2, 944);
    goto corral_source_split_12040;

  corral_source_split_12040:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3613} rtl8225_write($p0, 1, 86);
    goto corral_source_split_12042;

  corral_source_split_12042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3614} rtl8225_write($p0, 2, 945);
    goto corral_source_split_12043;

  corral_source_split_12043:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3615} rtl8225_write($p0, 1, 87);
    goto corral_source_split_12045;

  corral_source_split_12045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3616} rtl8225_write($p0, 2, 946);
    goto corral_source_split_12046;

  corral_source_split_12046:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3617} rtl8225_write($p0, 1, 88);
    goto corral_source_split_12048;

  corral_source_split_12048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3618} rtl8225_write($p0, 2, 947);
    goto corral_source_split_12049;

  corral_source_split_12049:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3619} rtl8225_write($p0, 1, 89);
    goto corral_source_split_12051;

  corral_source_split_12051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3620} rtl8225_write($p0, 2, 948);
    goto corral_source_split_12052;

  corral_source_split_12052:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3621} rtl8225_write($p0, 1, 90);
    goto corral_source_split_12054;

  corral_source_split_12054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3622} rtl8225_write($p0, 2, 949);
    goto corral_source_split_12055;

  corral_source_split_12055:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3623} rtl8225_write($p0, 1, 91);
    goto corral_source_split_12057;

  corral_source_split_12057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3624} rtl8225_write($p0, 2, 952);
    goto corral_source_split_12058;

  corral_source_split_12058:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3625} rtl8225_write($p0, 1, 92);
    goto corral_source_split_12060;

  corral_source_split_12060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3626} rtl8225_write($p0, 2, 953);
    goto corral_source_split_12061;

  corral_source_split_12061:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3627} rtl8225_write($p0, 1, 93);
    goto corral_source_split_12063;

  corral_source_split_12063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3628} rtl8225_write($p0, 2, 954);
    goto corral_source_split_12064;

  corral_source_split_12064:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3629} rtl8225_write($p0, 1, 94);
    goto corral_source_split_12066;

  corral_source_split_12066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3630} rtl8225_write($p0, 2, 955);
    goto corral_source_split_12067;

  corral_source_split_12067:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3631} rtl8225_write($p0, 1, 95);
    goto corral_source_split_12069;

  corral_source_split_12069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3632} rtl8225_write($p0, 2, 955);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2784} rtl8225_write($p0, 0, 183);
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2785} msleep(100);
    goto corral_source_split_10985;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2786} rtl8225_write($p0, 2, 3149);
    goto corral_source_split_10986;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2787} msleep(200);
    goto corral_source_split_10987;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2788} rtl8225_write($p0, 2, 1101);
    goto corral_source_split_10988;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2789} msleep(100);
    goto corral_source_split_10989;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2790} rtl8225_write($p0, 0, 703);
    goto corral_source_split_10990;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2791} rtl8225_write($p0, $sub.i8(0, 1), $sub.i16(0, 1));
    goto corral_source_split_10991;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_10992;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_10993;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 256)), $mul.ref(130, 1));
    goto corral_source_split_10994;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2792} rtl818x_iowrite16($p3, $p56, 8191);
    goto corral_source_split_10995;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2793} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 98));
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2794} msleep(1);
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2795} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 128));
    goto corral_source_split_10999;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2796} msleep(1);
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2797} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 98));
    goto corral_source_split_11002;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2798} msleep(1);
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2799} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 127));
    goto corral_source_split_11004;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2800} msleep(1);
    goto corral_source_split_11005;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2943} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 98));
    goto corral_source_split_11164;

  corral_source_split_11164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2944} msleep(1);
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2945} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 126));
    goto corral_source_split_11166;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2946} msleep(1);
    goto corral_source_split_11167;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2947} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 98));
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2948} msleep(1);
    goto corral_source_split_11170;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2949} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 125));
    goto corral_source_split_11171;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2950} msleep(1);
    goto corral_source_split_11172;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2951} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 98));
    goto corral_source_split_11174;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2952} msleep(1);
    goto corral_source_split_11175;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2953} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 124));
    goto corral_source_split_11176;

  corral_source_split_11176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2954} msleep(1);
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2955} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 98));
    goto corral_source_split_11179;

  corral_source_split_11179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2956} msleep(1);
    goto corral_source_split_11180;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2957} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 123));
    goto corral_source_split_11181;

  corral_source_split_11181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2958} msleep(1);
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2959} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 98));
    goto corral_source_split_11184;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2960} msleep(1);
    goto corral_source_split_11185;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2961} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 122));
    goto corral_source_split_11186;

  corral_source_split_11186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2962} msleep(1);
    goto corral_source_split_11187;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2963} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 98));
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2964} msleep(1);
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2965} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 121));
    goto corral_source_split_11191;

  corral_source_split_11191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2966} msleep(1);
    goto corral_source_split_11192;

  corral_source_split_11192:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2967} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 99));
    goto corral_source_split_11194;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2968} msleep(1);
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2969} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 120));
    goto corral_source_split_11196;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2970} msleep(1);
    goto corral_source_split_11197;

  corral_source_split_11197:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2971} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 100));
    goto corral_source_split_11199;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2972} msleep(1);
    goto corral_source_split_11200;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2973} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 119));
    goto corral_source_split_11201;

  corral_source_split_11201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2974} msleep(1);
    goto corral_source_split_11202;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2975} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 101));
    goto corral_source_split_11204;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2976} msleep(1);
    goto corral_source_split_11205;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2977} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 118));
    goto corral_source_split_11206;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2978} msleep(1);
    goto corral_source_split_11207;

  corral_source_split_11207:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2979} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 102));
    goto corral_source_split_11209;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2980} msleep(1);
    goto corral_source_split_11210;

  corral_source_split_11210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2981} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 117));
    goto corral_source_split_11211;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2982} msleep(1);
    goto corral_source_split_11212;

  corral_source_split_11212:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2983} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 103));
    goto corral_source_split_11214;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2984} msleep(1);
    goto corral_source_split_11215;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2985} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 116));
    goto corral_source_split_11216;

  corral_source_split_11216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2986} msleep(1);
    goto corral_source_split_11217;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2987} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 104));
    goto corral_source_split_11219;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2988} msleep(1);
    goto corral_source_split_11220;

  corral_source_split_11220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2989} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 115));
    goto corral_source_split_11221;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2990} msleep(1);
    goto corral_source_split_11222;

  corral_source_split_11222:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2991} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 105));
    goto corral_source_split_11224;

  corral_source_split_11224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2992} msleep(1);
    goto corral_source_split_11225;

  corral_source_split_11225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2993} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 114));
    goto corral_source_split_11226;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2994} msleep(1);
    goto corral_source_split_11227;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2995} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 106));
    goto corral_source_split_11229;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2996} msleep(1);
    goto corral_source_split_11230;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2997} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 113));
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2998} msleep(1);
    goto corral_source_split_11232;

  corral_source_split_11232:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2999} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 107));
    goto corral_source_split_11234;

  corral_source_split_11234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3000} msleep(1);
    goto corral_source_split_11235;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3001} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 112));
    goto corral_source_split_11236;

  corral_source_split_11236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3002} msleep(1);
    goto corral_source_split_11237;

  corral_source_split_11237:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3003} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 108));
    goto corral_source_split_11239;

  corral_source_split_11239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3004} msleep(1);
    goto corral_source_split_11240;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3005} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 111));
    goto corral_source_split_11241;

  corral_source_split_11241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3006} msleep(1);
    goto corral_source_split_11242;

  corral_source_split_11242:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3007} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 109));
    goto corral_source_split_11244;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3008} msleep(1);
    goto corral_source_split_11245;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3009} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 110));
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3010} msleep(1);
    goto corral_source_split_11247;

  corral_source_split_11247:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3011} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 110));
    goto corral_source_split_11249;

  corral_source_split_11249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3012} msleep(1);
    goto corral_source_split_11250;

  corral_source_split_11250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3013} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 109));
    goto corral_source_split_11251;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3014} msleep(1);
    goto corral_source_split_11252;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3015} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 111));
    goto corral_source_split_11254;

  corral_source_split_11254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3016} msleep(1);
    goto corral_source_split_11255;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3017} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 108));
    goto corral_source_split_11256;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3018} msleep(1);
    goto corral_source_split_11257;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3019} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 112));
    goto corral_source_split_11259;

  corral_source_split_11259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3020} msleep(1);
    goto corral_source_split_11260;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3021} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 107));
    goto corral_source_split_11261;

  corral_source_split_11261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3022} msleep(1);
    goto corral_source_split_11262;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3023} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 113));
    goto corral_source_split_11264;

  corral_source_split_11264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3024} msleep(1);
    goto corral_source_split_11265;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3025} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 106));
    goto corral_source_split_11266;

  corral_source_split_11266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3026} msleep(1);
    goto corral_source_split_11267;

  corral_source_split_11267:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3027} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 114));
    goto corral_source_split_11269;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3028} msleep(1);
    goto corral_source_split_11270;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3029} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 105));
    goto corral_source_split_11271;

  corral_source_split_11271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3030} msleep(1);
    goto corral_source_split_11272;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3031} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 115));
    goto corral_source_split_11274;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3032} msleep(1);
    goto corral_source_split_11275;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3033} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 104));
    goto corral_source_split_11276;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3034} msleep(1);
    goto corral_source_split_11277;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3035} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 116));
    goto corral_source_split_11279;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3036} msleep(1);
    goto corral_source_split_11280;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3037} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 103));
    goto corral_source_split_11281;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3038} msleep(1);
    goto corral_source_split_11282;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3039} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 117));
    goto corral_source_split_11284;

  corral_source_split_11284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3040} msleep(1);
    goto corral_source_split_11285;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3041} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 102));
    goto corral_source_split_11286;

  corral_source_split_11286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3042} msleep(1);
    goto corral_source_split_11287;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3043} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 118));
    goto corral_source_split_11289;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3044} msleep(1);
    goto corral_source_split_11290;

  corral_source_split_11290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3045} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 101));
    goto corral_source_split_11291;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3046} msleep(1);
    goto corral_source_split_11292;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3047} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 119));
    goto corral_source_split_11294;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3048} msleep(1);
    goto corral_source_split_11295;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3049} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 100));
    goto corral_source_split_11296;

  corral_source_split_11296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3050} msleep(1);
    goto corral_source_split_11297;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3051} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 120));
    goto corral_source_split_11299;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3052} msleep(1);
    goto corral_source_split_11300;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3053} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 99));
    goto corral_source_split_11301;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3054} msleep(1);
    goto corral_source_split_11302;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3055} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 121));
    goto corral_source_split_11304;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3056} msleep(1);
    goto corral_source_split_11305;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3057} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 98));
    goto corral_source_split_11306;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3058} msleep(1);
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3059} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 122));
    goto corral_source_split_11309;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3060} msleep(1);
    goto corral_source_split_11310;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3061} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 97));
    goto corral_source_split_11311;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3062} msleep(1);
    goto corral_source_split_11312;

  corral_source_split_11312:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3063} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 123));
    goto corral_source_split_11314;

  corral_source_split_11314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3064} msleep(1);
    goto corral_source_split_11315;

  corral_source_split_11315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3065} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 96));
    goto corral_source_split_11316;

  corral_source_split_11316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3066} msleep(1);
    goto corral_source_split_11317;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3067} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 124));
    goto corral_source_split_11319;

  corral_source_split_11319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3068} msleep(1);
    goto corral_source_split_11320;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3069} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 95));
    goto corral_source_split_11321;

  corral_source_split_11321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3070} msleep(1);
    goto corral_source_split_11322;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3071} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 125));
    goto corral_source_split_11324;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3072} msleep(1);
    goto corral_source_split_11325;

  corral_source_split_11325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3073} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 94));
    goto corral_source_split_11326;

  corral_source_split_11326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3074} msleep(1);
    goto corral_source_split_11327;

  corral_source_split_11327:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3075} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 126));
    goto corral_source_split_11329;

  corral_source_split_11329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3076} msleep(1);
    goto corral_source_split_11330;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3077} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 93));
    goto corral_source_split_11331;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3078} msleep(1);
    goto corral_source_split_11332;

  corral_source_split_11332:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3079} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 127));
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3080} msleep(1);
    goto corral_source_split_11335;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3081} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 92));
    goto corral_source_split_11336;

  corral_source_split_11336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3082} msleep(1);
    goto corral_source_split_11337;

  corral_source_split_11337:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3083} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 128));
    goto corral_source_split_11339;

  corral_source_split_11339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3084} msleep(1);
    goto corral_source_split_11340;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3085} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 91));
    goto corral_source_split_11341;

  corral_source_split_11341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3086} msleep(1);
    goto corral_source_split_11342;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3087} rtl8225_write_phy_ofdm($p0, 11, 63);
    goto corral_source_split_11344;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3088} msleep(1);
    goto corral_source_split_11345;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3089} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 90));
    goto corral_source_split_11346;

  corral_source_split_11346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3090} msleep(1);
    goto corral_source_split_11347;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3091} rtl8225_write_phy_ofdm($p0, 11, 62);
    goto corral_source_split_11349;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3092} msleep(1);
    goto corral_source_split_11350;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3093} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 89));
    goto corral_source_split_11351;

  corral_source_split_11351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3094} msleep(1);
    goto corral_source_split_11352;

  corral_source_split_11352:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3095} rtl8225_write_phy_ofdm($p0, 11, 61);
    goto corral_source_split_11354;

  corral_source_split_11354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3096} msleep(1);
    goto corral_source_split_11355;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3097} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 88));
    goto corral_source_split_11356;

  corral_source_split_11356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3098} msleep(1);
    goto corral_source_split_11357;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3099} rtl8225_write_phy_ofdm($p0, 11, 60);
    goto corral_source_split_11359;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3100} msleep(1);
    goto corral_source_split_11360;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3101} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 87));
    goto corral_source_split_11361;

  corral_source_split_11361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3102} msleep(1);
    goto corral_source_split_11362;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3103} rtl8225_write_phy_ofdm($p0, 11, 59);
    goto corral_source_split_11364;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3104} msleep(1);
    goto corral_source_split_11365;

  corral_source_split_11365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3105} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 86));
    goto corral_source_split_11366;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3106} msleep(1);
    goto corral_source_split_11367;

  corral_source_split_11367:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3107} rtl8225_write_phy_ofdm($p0, 11, 58);
    goto corral_source_split_11369;

  corral_source_split_11369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3108} msleep(1);
    goto corral_source_split_11370;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3109} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 85));
    goto corral_source_split_11371;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3110} msleep(1);
    goto corral_source_split_11372;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3111} rtl8225_write_phy_ofdm($p0, 11, 57);
    goto corral_source_split_11374;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3112} msleep(1);
    goto corral_source_split_11375;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3113} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 84));
    goto corral_source_split_11376;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3114} msleep(1);
    goto corral_source_split_11377;

  corral_source_split_11377:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3115} rtl8225_write_phy_ofdm($p0, 11, 56);
    goto corral_source_split_11379;

  corral_source_split_11379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3116} msleep(1);
    goto corral_source_split_11380;

  corral_source_split_11380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3117} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 83));
    goto corral_source_split_11381;

  corral_source_split_11381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3118} msleep(1);
    goto corral_source_split_11382;

  corral_source_split_11382:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3119} rtl8225_write_phy_ofdm($p0, 11, 55);
    goto corral_source_split_11384;

  corral_source_split_11384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3120} msleep(1);
    goto corral_source_split_11385;

  corral_source_split_11385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3121} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 82));
    goto corral_source_split_11386;

  corral_source_split_11386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3122} msleep(1);
    goto corral_source_split_11387;

  corral_source_split_11387:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3123} rtl8225_write_phy_ofdm($p0, 11, 54);
    goto corral_source_split_11389;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3124} msleep(1);
    goto corral_source_split_11390;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3125} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 81));
    goto corral_source_split_11391;

  corral_source_split_11391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3126} msleep(1);
    goto corral_source_split_11392;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3127} rtl8225_write_phy_ofdm($p0, 11, 53);
    goto corral_source_split_11394;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3128} msleep(1);
    goto corral_source_split_11395;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3129} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 80));
    goto corral_source_split_11396;

  corral_source_split_11396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3130} msleep(1);
    goto corral_source_split_11397;

  corral_source_split_11397:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3131} rtl8225_write_phy_ofdm($p0, 11, 52);
    goto corral_source_split_11399;

  corral_source_split_11399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3132} msleep(1);
    goto corral_source_split_11400;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3133} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 79));
    goto corral_source_split_11401;

  corral_source_split_11401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3134} msleep(1);
    goto corral_source_split_11402;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3135} rtl8225_write_phy_ofdm($p0, 11, 51);
    goto corral_source_split_11404;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3136} msleep(1);
    goto corral_source_split_11405;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3137} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 78));
    goto corral_source_split_11406;

  corral_source_split_11406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3138} msleep(1);
    goto corral_source_split_11407;

  corral_source_split_11407:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3139} rtl8225_write_phy_ofdm($p0, 11, 50);
    goto corral_source_split_11409;

  corral_source_split_11409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3140} msleep(1);
    goto corral_source_split_11410;

  corral_source_split_11410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3141} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 77));
    goto corral_source_split_11411;

  corral_source_split_11411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3142} msleep(1);
    goto corral_source_split_11412;

  corral_source_split_11412:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3143} rtl8225_write_phy_ofdm($p0, 11, 49);
    goto corral_source_split_11414;

  corral_source_split_11414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3144} msleep(1);
    goto corral_source_split_11415;

  corral_source_split_11415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3145} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 76));
    goto corral_source_split_11416;

  corral_source_split_11416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3146} msleep(1);
    goto corral_source_split_11417;

  corral_source_split_11417:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3147} rtl8225_write_phy_ofdm($p0, 11, 48);
    goto corral_source_split_11419;

  corral_source_split_11419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3148} msleep(1);
    goto corral_source_split_11420;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3149} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 75));
    goto corral_source_split_11421;

  corral_source_split_11421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3150} msleep(1);
    goto corral_source_split_11422;

  corral_source_split_11422:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3151} rtl8225_write_phy_ofdm($p0, 11, 47);
    goto corral_source_split_11424;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3152} msleep(1);
    goto corral_source_split_11425;

  corral_source_split_11425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3153} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 74));
    goto corral_source_split_11426;

  corral_source_split_11426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3154} msleep(1);
    goto corral_source_split_11427;

  corral_source_split_11427:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3155} rtl8225_write_phy_ofdm($p0, 11, 46);
    goto corral_source_split_11429;

  corral_source_split_11429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3156} msleep(1);
    goto corral_source_split_11430;

  corral_source_split_11430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3157} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 73));
    goto corral_source_split_11431;

  corral_source_split_11431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3158} msleep(1);
    goto corral_source_split_11432;

  corral_source_split_11432:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3159} rtl8225_write_phy_ofdm($p0, 11, 45);
    goto corral_source_split_11434;

  corral_source_split_11434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3160} msleep(1);
    goto corral_source_split_11435;

  corral_source_split_11435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3161} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 72));
    goto corral_source_split_11436;

  corral_source_split_11436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3162} msleep(1);
    goto corral_source_split_11437;

  corral_source_split_11437:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3163} rtl8225_write_phy_ofdm($p0, 11, 44);
    goto corral_source_split_11439;

  corral_source_split_11439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3164} msleep(1);
    goto corral_source_split_11440;

  corral_source_split_11440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3165} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 71));
    goto corral_source_split_11441;

  corral_source_split_11441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3166} msleep(1);
    goto corral_source_split_11442;

  corral_source_split_11442:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3167} rtl8225_write_phy_ofdm($p0, 11, 43);
    goto corral_source_split_11444;

  corral_source_split_11444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3168} msleep(1);
    goto corral_source_split_11445;

  corral_source_split_11445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3169} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 70));
    goto corral_source_split_11446;

  corral_source_split_11446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3170} msleep(1);
    goto corral_source_split_11447;

  corral_source_split_11447:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3171} rtl8225_write_phy_ofdm($p0, 11, 42);
    goto corral_source_split_11449;

  corral_source_split_11449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3172} msleep(1);
    goto corral_source_split_11450;

  corral_source_split_11450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3173} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 69));
    goto corral_source_split_11451;

  corral_source_split_11451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3174} msleep(1);
    goto corral_source_split_11452;

  corral_source_split_11452:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3175} rtl8225_write_phy_ofdm($p0, 11, 41);
    goto corral_source_split_11454;

  corral_source_split_11454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3176} msleep(1);
    goto corral_source_split_11455;

  corral_source_split_11455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3177} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 68));
    goto corral_source_split_11456;

  corral_source_split_11456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3178} msleep(1);
    goto corral_source_split_11457;

  corral_source_split_11457:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3179} rtl8225_write_phy_ofdm($p0, 11, 40);
    goto corral_source_split_11459;

  corral_source_split_11459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3180} msleep(1);
    goto corral_source_split_11460;

  corral_source_split_11460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3181} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 67));
    goto corral_source_split_11461;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3182} msleep(1);
    goto corral_source_split_11462;

  corral_source_split_11462:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3183} rtl8225_write_phy_ofdm($p0, 11, 39);
    goto corral_source_split_11464;

  corral_source_split_11464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3184} msleep(1);
    goto corral_source_split_11465;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3185} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 66));
    goto corral_source_split_11466;

  corral_source_split_11466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3186} msleep(1);
    goto corral_source_split_11467;

  corral_source_split_11467:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3187} rtl8225_write_phy_ofdm($p0, 11, 38);
    goto corral_source_split_11469;

  corral_source_split_11469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3188} msleep(1);
    goto corral_source_split_11470;

  corral_source_split_11470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3189} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 65));
    goto corral_source_split_11471;

  corral_source_split_11471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3190} msleep(1);
    goto corral_source_split_11472;

  corral_source_split_11472:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3191} rtl8225_write_phy_ofdm($p0, 11, 37);
    goto corral_source_split_11474;

  corral_source_split_11474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3192} msleep(1);
    goto corral_source_split_11475;

  corral_source_split_11475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3193} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 64));
    goto corral_source_split_11476;

  corral_source_split_11476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3194} msleep(1);
    goto corral_source_split_11477;

  corral_source_split_11477:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3195} rtl8225_write_phy_ofdm($p0, 11, 36);
    goto corral_source_split_11479;

  corral_source_split_11479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3196} msleep(1);
    goto corral_source_split_11480;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3197} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 63));
    goto corral_source_split_11481;

  corral_source_split_11481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3198} msleep(1);
    goto corral_source_split_11482;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3199} rtl8225_write_phy_ofdm($p0, 11, 35);
    goto corral_source_split_11484;

  corral_source_split_11484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3200} msleep(1);
    goto corral_source_split_11485;

  corral_source_split_11485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3201} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 62));
    goto corral_source_split_11486;

  corral_source_split_11486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3202} msleep(1);
    goto corral_source_split_11487;

  corral_source_split_11487:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3203} rtl8225_write_phy_ofdm($p0, 11, 34);
    goto corral_source_split_11489;

  corral_source_split_11489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3204} msleep(1);
    goto corral_source_split_11490;

  corral_source_split_11490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3205} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 61));
    goto corral_source_split_11491;

  corral_source_split_11491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3206} msleep(1);
    goto corral_source_split_11492;

  corral_source_split_11492:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3207} rtl8225_write_phy_ofdm($p0, 11, 33);
    goto corral_source_split_11494;

  corral_source_split_11494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3208} msleep(1);
    goto corral_source_split_11495;

  corral_source_split_11495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3209} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 60));
    goto corral_source_split_11496;

  corral_source_split_11496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3210} msleep(1);
    goto corral_source_split_11497;

  corral_source_split_11497:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3211} rtl8225_write_phy_ofdm($p0, 11, 32);
    goto corral_source_split_11499;

  corral_source_split_11499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3212} msleep(1);
    goto corral_source_split_11500;

  corral_source_split_11500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3213} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 59));
    goto corral_source_split_11501;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3214} msleep(1);
    goto corral_source_split_11502;

  corral_source_split_11502:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3215} rtl8225_write_phy_ofdm($p0, 11, 31);
    goto corral_source_split_11504;

  corral_source_split_11504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3216} msleep(1);
    goto corral_source_split_11505;

  corral_source_split_11505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3217} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 58));
    goto corral_source_split_11506;

  corral_source_split_11506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3218} msleep(1);
    goto corral_source_split_11507;

  corral_source_split_11507:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3219} rtl8225_write_phy_ofdm($p0, 11, 30);
    goto corral_source_split_11509;

  corral_source_split_11509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3220} msleep(1);
    goto corral_source_split_11510;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3221} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 57));
    goto corral_source_split_11511;

  corral_source_split_11511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3222} msleep(1);
    goto corral_source_split_11512;

  corral_source_split_11512:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3223} rtl8225_write_phy_ofdm($p0, 11, 29);
    goto corral_source_split_11514;

  corral_source_split_11514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3224} msleep(1);
    goto corral_source_split_11515;

  corral_source_split_11515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3225} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 56));
    goto corral_source_split_11516;

  corral_source_split_11516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3226} msleep(1);
    goto corral_source_split_11517;

  corral_source_split_11517:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3227} rtl8225_write_phy_ofdm($p0, 11, 28);
    goto corral_source_split_11519;

  corral_source_split_11519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3228} msleep(1);
    goto corral_source_split_11520;

  corral_source_split_11520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3229} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 55));
    goto corral_source_split_11521;

  corral_source_split_11521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3230} msleep(1);
    goto corral_source_split_11522;

  corral_source_split_11522:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3231} rtl8225_write_phy_ofdm($p0, 11, 27);
    goto corral_source_split_11524;

  corral_source_split_11524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3232} msleep(1);
    goto corral_source_split_11525;

  corral_source_split_11525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3233} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 54));
    goto corral_source_split_11526;

  corral_source_split_11526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3234} msleep(1);
    goto corral_source_split_11527;

  corral_source_split_11527:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3235} rtl8225_write_phy_ofdm($p0, 11, 26);
    goto corral_source_split_11529;

  corral_source_split_11529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3236} msleep(1);
    goto corral_source_split_11530;

  corral_source_split_11530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3237} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 53));
    goto corral_source_split_11531;

  corral_source_split_11531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3238} msleep(1);
    goto corral_source_split_11532;

  corral_source_split_11532:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3239} rtl8225_write_phy_ofdm($p0, 11, 25);
    goto corral_source_split_11534;

  corral_source_split_11534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3240} msleep(1);
    goto corral_source_split_11535;

  corral_source_split_11535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3241} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 52));
    goto corral_source_split_11536;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3242} msleep(1);
    goto corral_source_split_11537;

  corral_source_split_11537:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3243} rtl8225_write_phy_ofdm($p0, 11, 24);
    goto corral_source_split_11539;

  corral_source_split_11539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3244} msleep(1);
    goto corral_source_split_11540;

  corral_source_split_11540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3245} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 51));
    goto corral_source_split_11541;

  corral_source_split_11541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3246} msleep(1);
    goto corral_source_split_11542;

  corral_source_split_11542:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3247} rtl8225_write_phy_ofdm($p0, 11, 23);
    goto corral_source_split_11544;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3248} msleep(1);
    goto corral_source_split_11545;

  corral_source_split_11545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3249} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 50));
    goto corral_source_split_11546;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3250} msleep(1);
    goto corral_source_split_11547;

  corral_source_split_11547:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3251} rtl8225_write_phy_ofdm($p0, 11, 22);
    goto corral_source_split_11549;

  corral_source_split_11549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3252} msleep(1);
    goto corral_source_split_11550;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3253} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 49));
    goto corral_source_split_11551;

  corral_source_split_11551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3254} msleep(1);
    goto corral_source_split_11552;

  corral_source_split_11552:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3255} rtl8225_write_phy_ofdm($p0, 11, 21);
    goto corral_source_split_11554;

  corral_source_split_11554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3256} msleep(1);
    goto corral_source_split_11555;

  corral_source_split_11555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3257} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 48));
    goto corral_source_split_11556;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3258} msleep(1);
    goto corral_source_split_11557;

  corral_source_split_11557:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3259} rtl8225_write_phy_ofdm($p0, 11, 20);
    goto corral_source_split_11559;

  corral_source_split_11559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3260} msleep(1);
    goto corral_source_split_11560;

  corral_source_split_11560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3261} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 47));
    goto corral_source_split_11561;

  corral_source_split_11561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3262} msleep(1);
    goto corral_source_split_11562;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3263} rtl8225_write_phy_ofdm($p0, 11, 19);
    goto corral_source_split_11564;

  corral_source_split_11564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3264} msleep(1);
    goto corral_source_split_11565;

  corral_source_split_11565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3265} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 46));
    goto corral_source_split_11566;

  corral_source_split_11566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3266} msleep(1);
    goto corral_source_split_11567;

  corral_source_split_11567:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3267} rtl8225_write_phy_ofdm($p0, 11, 18);
    goto corral_source_split_11569;

  corral_source_split_11569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3268} msleep(1);
    goto corral_source_split_11570;

  corral_source_split_11570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3269} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 45));
    goto corral_source_split_11571;

  corral_source_split_11571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3270} msleep(1);
    goto corral_source_split_11572;

  corral_source_split_11572:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3271} rtl8225_write_phy_ofdm($p0, 11, 17);
    goto corral_source_split_11574;

  corral_source_split_11574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3272} msleep(1);
    goto corral_source_split_11575;

  corral_source_split_11575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3273} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 44));
    goto corral_source_split_11576;

  corral_source_split_11576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3274} msleep(1);
    goto corral_source_split_11577;

  corral_source_split_11577:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3275} rtl8225_write_phy_ofdm($p0, 11, 16);
    goto corral_source_split_11579;

  corral_source_split_11579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3276} msleep(1);
    goto corral_source_split_11580;

  corral_source_split_11580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3277} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 43));
    goto corral_source_split_11581;

  corral_source_split_11581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3278} msleep(1);
    goto corral_source_split_11582;

  corral_source_split_11582:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3279} rtl8225_write_phy_ofdm($p0, 11, 15);
    goto corral_source_split_11584;

  corral_source_split_11584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3280} msleep(1);
    goto corral_source_split_11585;

  corral_source_split_11585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3281} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 42));
    goto corral_source_split_11586;

  corral_source_split_11586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3282} msleep(1);
    goto corral_source_split_11587;

  corral_source_split_11587:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3283} rtl8225_write_phy_ofdm($p0, 11, 14);
    goto corral_source_split_11589;

  corral_source_split_11589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3284} msleep(1);
    goto corral_source_split_11590;

  corral_source_split_11590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3285} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 41));
    goto corral_source_split_11591;

  corral_source_split_11591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3286} msleep(1);
    goto corral_source_split_11592;

  corral_source_split_11592:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3287} rtl8225_write_phy_ofdm($p0, 11, 13);
    goto corral_source_split_11594;

  corral_source_split_11594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3288} msleep(1);
    goto corral_source_split_11595;

  corral_source_split_11595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3289} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 40));
    goto corral_source_split_11596;

  corral_source_split_11596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3290} msleep(1);
    goto corral_source_split_11597;

  corral_source_split_11597:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3291} rtl8225_write_phy_ofdm($p0, 11, 12);
    goto corral_source_split_11599;

  corral_source_split_11599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3292} msleep(1);
    goto corral_source_split_11600;

  corral_source_split_11600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3293} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 39));
    goto corral_source_split_11601;

  corral_source_split_11601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3294} msleep(1);
    goto corral_source_split_11602;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3295} rtl8225_write_phy_ofdm($p0, 11, 11);
    goto corral_source_split_11604;

  corral_source_split_11604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3296} msleep(1);
    goto corral_source_split_11605;

  corral_source_split_11605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3297} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 38));
    goto corral_source_split_11606;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3298} msleep(1);
    goto corral_source_split_11607;

  corral_source_split_11607:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3299} rtl8225_write_phy_ofdm($p0, 11, 10);
    goto corral_source_split_11609;

  corral_source_split_11609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3300} msleep(1);
    goto corral_source_split_11610;

  corral_source_split_11610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3301} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 37));
    goto corral_source_split_11611;

  corral_source_split_11611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3302} msleep(1);
    goto corral_source_split_11612;

  corral_source_split_11612:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3303} rtl8225_write_phy_ofdm($p0, 11, 9);
    goto corral_source_split_11614;

  corral_source_split_11614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3304} msleep(1);
    goto corral_source_split_11615;

  corral_source_split_11615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3305} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 36));
    goto corral_source_split_11616;

  corral_source_split_11616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3306} msleep(1);
    goto corral_source_split_11617;

  corral_source_split_11617:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3307} rtl8225_write_phy_ofdm($p0, 11, 8);
    goto corral_source_split_11619;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3308} msleep(1);
    goto corral_source_split_11620;

  corral_source_split_11620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3309} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 35));
    goto corral_source_split_11621;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3310} msleep(1);
    goto corral_source_split_11622;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3311} rtl8225_write_phy_ofdm($p0, 11, 7);
    goto corral_source_split_11624;

  corral_source_split_11624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3312} msleep(1);
    goto corral_source_split_11625;

  corral_source_split_11625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3313} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 34));
    goto corral_source_split_11626;

  corral_source_split_11626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3314} msleep(1);
    goto corral_source_split_11627;

  corral_source_split_11627:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3315} rtl8225_write_phy_ofdm($p0, 11, 6);
    goto corral_source_split_11629;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3316} msleep(1);
    goto corral_source_split_11630;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3317} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 33));
    goto corral_source_split_11631;

  corral_source_split_11631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3318} msleep(1);
    goto corral_source_split_11632;

  corral_source_split_11632:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3319} rtl8225_write_phy_ofdm($p0, 11, 5);
    goto corral_source_split_11634;

  corral_source_split_11634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3320} msleep(1);
    goto corral_source_split_11635;

  corral_source_split_11635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3321} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 32));
    goto corral_source_split_11636;

  corral_source_split_11636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3322} msleep(1);
    goto corral_source_split_11637;

  corral_source_split_11637:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3323} rtl8225_write_phy_ofdm($p0, 11, 4);
    goto corral_source_split_11639;

  corral_source_split_11639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3324} msleep(1);
    goto corral_source_split_11640;

  corral_source_split_11640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3325} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 31));
    goto corral_source_split_11641;

  corral_source_split_11641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3326} msleep(1);
    goto corral_source_split_11642;

  corral_source_split_11642:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3327} rtl8225_write_phy_ofdm($p0, 11, 3);
    goto corral_source_split_11644;

  corral_source_split_11644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3328} msleep(1);
    goto corral_source_split_11645;

  corral_source_split_11645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3329} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 30));
    goto corral_source_split_11646;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3330} msleep(1);
    goto corral_source_split_11647;

  corral_source_split_11647:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3331} rtl8225_write_phy_ofdm($p0, 11, 2);
    goto corral_source_split_11649;

  corral_source_split_11649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3332} msleep(1);
    goto corral_source_split_11650;

  corral_source_split_11650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3333} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 29));
    goto corral_source_split_11651;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3334} msleep(1);
    goto corral_source_split_11652;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3335} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11654;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3336} msleep(1);
    goto corral_source_split_11655;

  corral_source_split_11655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3337} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 28));
    goto corral_source_split_11656;

  corral_source_split_11656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3338} msleep(1);
    goto corral_source_split_11657;

  corral_source_split_11657:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3339} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11659;

  corral_source_split_11659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3340} msleep(1);
    goto corral_source_split_11660;

  corral_source_split_11660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3341} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 27));
    goto corral_source_split_11661;

  corral_source_split_11661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3342} msleep(1);
    goto corral_source_split_11662;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3343} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11664;

  corral_source_split_11664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3344} msleep(1);
    goto corral_source_split_11665;

  corral_source_split_11665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3345} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 26));
    goto corral_source_split_11666;

  corral_source_split_11666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3346} msleep(1);
    goto corral_source_split_11667;

  corral_source_split_11667:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3347} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11669;

  corral_source_split_11669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3348} msleep(1);
    goto corral_source_split_11670;

  corral_source_split_11670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3349} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 25));
    goto corral_source_split_11671;

  corral_source_split_11671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3350} msleep(1);
    goto corral_source_split_11672;

  corral_source_split_11672:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3351} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11674;

  corral_source_split_11674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3352} msleep(1);
    goto corral_source_split_11675;

  corral_source_split_11675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3353} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 24));
    goto corral_source_split_11676;

  corral_source_split_11676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3354} msleep(1);
    goto corral_source_split_11677;

  corral_source_split_11677:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3355} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11679;

  corral_source_split_11679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3356} msleep(1);
    goto corral_source_split_11680;

  corral_source_split_11680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3357} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 23));
    goto corral_source_split_11681;

  corral_source_split_11681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3358} msleep(1);
    goto corral_source_split_11682;

  corral_source_split_11682:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3359} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11684;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3360} msleep(1);
    goto corral_source_split_11685;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3361} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 22));
    goto corral_source_split_11686;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3362} msleep(1);
    goto corral_source_split_11687;

  corral_source_split_11687:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3363} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11689;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3364} msleep(1);
    goto corral_source_split_11690;

  corral_source_split_11690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3365} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 21));
    goto corral_source_split_11691;

  corral_source_split_11691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3366} msleep(1);
    goto corral_source_split_11692;

  corral_source_split_11692:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3367} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11694;

  corral_source_split_11694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3368} msleep(1);
    goto corral_source_split_11695;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3369} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 20));
    goto corral_source_split_11696;

  corral_source_split_11696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3370} msleep(1);
    goto corral_source_split_11697;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3371} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11699;

  corral_source_split_11699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3372} msleep(1);
    goto corral_source_split_11700;

  corral_source_split_11700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3373} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 19));
    goto corral_source_split_11701;

  corral_source_split_11701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3374} msleep(1);
    goto corral_source_split_11702;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3375} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11704;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3376} msleep(1);
    goto corral_source_split_11705;

  corral_source_split_11705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3377} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 18));
    goto corral_source_split_11706;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3378} msleep(1);
    goto corral_source_split_11707;

  corral_source_split_11707:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3379} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11709;

  corral_source_split_11709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3380} msleep(1);
    goto corral_source_split_11710;

  corral_source_split_11710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3381} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 17));
    goto corral_source_split_11711;

  corral_source_split_11711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3382} msleep(1);
    goto corral_source_split_11712;

  corral_source_split_11712:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3383} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11714;

  corral_source_split_11714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3384} msleep(1);
    goto corral_source_split_11715;

  corral_source_split_11715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3385} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 16));
    goto corral_source_split_11716;

  corral_source_split_11716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3386} msleep(1);
    goto corral_source_split_11717;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3387} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11719;

  corral_source_split_11719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3388} msleep(1);
    goto corral_source_split_11720;

  corral_source_split_11720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3389} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 15));
    goto corral_source_split_11721;

  corral_source_split_11721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3390} msleep(1);
    goto corral_source_split_11722;

  corral_source_split_11722:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3391} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11724;

  corral_source_split_11724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3392} msleep(1);
    goto corral_source_split_11725;

  corral_source_split_11725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3393} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 14));
    goto corral_source_split_11726;

  corral_source_split_11726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3394} msleep(1);
    goto corral_source_split_11727;

  corral_source_split_11727:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3395} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11729;

  corral_source_split_11729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3396} msleep(1);
    goto corral_source_split_11730;

  corral_source_split_11730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3397} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 13));
    goto corral_source_split_11731;

  corral_source_split_11731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3398} msleep(1);
    goto corral_source_split_11732;

  corral_source_split_11732:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3399} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11734;

  corral_source_split_11734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3400} msleep(1);
    goto corral_source_split_11735;

  corral_source_split_11735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3401} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 12));
    goto corral_source_split_11736;

  corral_source_split_11736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3402} msleep(1);
    goto corral_source_split_11737;

  corral_source_split_11737:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3403} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11739;

  corral_source_split_11739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3404} msleep(1);
    goto corral_source_split_11740;

  corral_source_split_11740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3405} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 11));
    goto corral_source_split_11741;

  corral_source_split_11741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3406} msleep(1);
    goto corral_source_split_11742;

  corral_source_split_11742:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3407} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11744;

  corral_source_split_11744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3408} msleep(1);
    goto corral_source_split_11745;

  corral_source_split_11745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3409} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 10));
    goto corral_source_split_11746;

  corral_source_split_11746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3410} msleep(1);
    goto corral_source_split_11747;

  corral_source_split_11747:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3411} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11749;

  corral_source_split_11749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3412} msleep(1);
    goto corral_source_split_11750;

  corral_source_split_11750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3413} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 9));
    goto corral_source_split_11751;

  corral_source_split_11751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3414} msleep(1);
    goto corral_source_split_11752;

  corral_source_split_11752:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3415} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11754;

  corral_source_split_11754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3416} msleep(1);
    goto corral_source_split_11755;

  corral_source_split_11755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3417} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 8));
    goto corral_source_split_11756;

  corral_source_split_11756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3418} msleep(1);
    goto corral_source_split_11757;

  corral_source_split_11757:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3419} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11759;

  corral_source_split_11759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3420} msleep(1);
    goto corral_source_split_11760;

  corral_source_split_11760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3421} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 7));
    goto corral_source_split_11761;

  corral_source_split_11761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3422} msleep(1);
    goto corral_source_split_11762;

  corral_source_split_11762:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3423} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11764;

  corral_source_split_11764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3424} msleep(1);
    goto corral_source_split_11765;

  corral_source_split_11765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3425} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 6));
    goto corral_source_split_11766;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3426} msleep(1);
    goto corral_source_split_11767;

  corral_source_split_11767:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3427} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11769;

  corral_source_split_11769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3428} msleep(1);
    goto corral_source_split_11770;

  corral_source_split_11770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3429} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 5));
    goto corral_source_split_11771;

  corral_source_split_11771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3430} msleep(1);
    goto corral_source_split_11772;

  corral_source_split_11772:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3431} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11774;

  corral_source_split_11774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3432} msleep(1);
    goto corral_source_split_11775;

  corral_source_split_11775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3433} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 4));
    goto corral_source_split_11776;

  corral_source_split_11776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3434} msleep(1);
    goto corral_source_split_11777;

  corral_source_split_11777:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3435} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11779;

  corral_source_split_11779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3436} msleep(1);
    goto corral_source_split_11780;

  corral_source_split_11780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3437} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 3));
    goto corral_source_split_11781;

  corral_source_split_11781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3438} msleep(1);
    goto corral_source_split_11782;

  corral_source_split_11782:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3439} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11784;

  corral_source_split_11784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3440} msleep(1);
    goto corral_source_split_11785;

  corral_source_split_11785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3441} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 2));
    goto corral_source_split_11786;

  corral_source_split_11786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3442} msleep(1);
    goto corral_source_split_11787;

  corral_source_split_11787:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3443} rtl8225_write_phy_ofdm($p0, 11, 1);
    goto corral_source_split_11789;

  corral_source_split_11789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3444} msleep(1);
    goto corral_source_split_11790;

  corral_source_split_11790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3445} rtl8225_write_phy_ofdm($p0, 10, $sub.i8(0, 1));
    goto corral_source_split_11791;

  corral_source_split_11791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3446} msleep(1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2801} msleep(1);
    goto corral_source_split_11007;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2802} rtl8225_write_phy_ofdm($p0, 0, 1);
    goto corral_source_split_11008;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2803} msleep(1);
    goto corral_source_split_11009;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2804} rtl8225_write_phy_ofdm($p0, 1, 2);
    goto corral_source_split_11010;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2805} msleep(1);
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2806} rtl8225_write_phy_ofdm($p0, 2, 98);
    goto corral_source_split_11012;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2807} msleep(1);
    goto corral_source_split_11013;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2808} rtl8225_write_phy_ofdm($p0, 3, 0);
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2809} msleep(1);
    goto corral_source_split_11015;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2810} rtl8225_write_phy_ofdm($p0, 4, 0);
    goto corral_source_split_11016;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2811} msleep(1);
    goto corral_source_split_11017;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2812} rtl8225_write_phy_ofdm($p0, 5, 0);
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2813} msleep(1);
    goto corral_source_split_11019;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2814} rtl8225_write_phy_ofdm($p0, 6, 64);
    goto corral_source_split_11020;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2815} msleep(1);
    goto corral_source_split_11021;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2816} rtl8225_write_phy_ofdm($p0, 7, 0);
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2817} msleep(1);
    goto corral_source_split_11023;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2818} rtl8225_write_phy_ofdm($p0, 8, 64);
    goto corral_source_split_11024;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2819} msleep(1);
    goto corral_source_split_11025;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2820} rtl8225_write_phy_ofdm($p0, 9, $sub.i8(0, 2));
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2821} msleep(1);
    goto corral_source_split_11027;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2822} rtl8225_write_phy_ofdm($p0, 10, 9);
    goto corral_source_split_11028;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2823} msleep(1);
    goto corral_source_split_11029;

  corral_source_split_11029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2824} rtl8225_write_phy_ofdm($p0, 24, $sub.i8(0, 17));
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2825} msleep(1);
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2826} rtl8225_write_phy_ofdm($p0, 11, $sub.i8(0, 128));
    goto corral_source_split_11032;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2827} msleep(1);
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2828} rtl8225_write_phy_ofdm($p0, 12, 1);
    goto corral_source_split_11034;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2829} msleep(1);
    goto corral_source_split_11035;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2830} rtl8225_write_phy_ofdm($p0, 13, 67);
    goto corral_source_split_11036;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2831} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 45));
    goto corral_source_split_11037;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2832} msleep(1);
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2833} rtl8225_write_phy_ofdm($p0, 15, 56);
    goto corral_source_split_11039;

  corral_source_split_11039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2834} msleep(1);
    goto corral_source_split_11040;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2835} rtl8225_write_phy_ofdm($p0, 16, $sub.i8(0, 124));
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2836} msleep(1);
    goto corral_source_split_11042;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2837} rtl8225_write_phy_ofdm($p0, 17, 6);
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2838} msleep(1);
    goto corral_source_split_11044;

  corral_source_split_11044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2839} rtl8225_write_phy_ofdm($p0, 18, 32);
    goto corral_source_split_11045;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2840} msleep(1);
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2841} rtl8225_write_phy_ofdm($p0, 19, 32);
    goto corral_source_split_11047;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2842} msleep(1);
    goto corral_source_split_11048;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2843} rtl8225_write_phy_ofdm($p0, 20, 0);
    goto corral_source_split_11049;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2844} msleep(1);
    goto corral_source_split_11050;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2845} rtl8225_write_phy_ofdm($p0, 21, 64);
    goto corral_source_split_11051;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2846} msleep(1);
    goto corral_source_split_11052;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2847} rtl8225_write_phy_ofdm($p0, 22, 0);
    goto corral_source_split_11053;

  corral_source_split_11053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2848} msleep(1);
    goto corral_source_split_11054;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2849} rtl8225_write_phy_ofdm($p0, 23, 64);
    goto corral_source_split_11055;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2850} msleep(1);
    goto corral_source_split_11056;

  corral_source_split_11056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2851} rtl8225_write_phy_ofdm($p0, 24, $sub.i8(0, 17));
    goto corral_source_split_11057;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2852} msleep(1);
    goto corral_source_split_11058;

  corral_source_split_11058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2853} rtl8225_write_phy_ofdm($p0, 25, 25);
    goto corral_source_split_11059;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2854} msleep(1);
    goto corral_source_split_11060;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2855} rtl8225_write_phy_ofdm($p0, 26, 32);
    goto corral_source_split_11061;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2856} msleep(1);
    goto corral_source_split_11062;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2857} rtl8225_write_phy_ofdm($p0, 27, 17);
    goto corral_source_split_11063;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2858} msleep(1);
    goto corral_source_split_11064;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2859} rtl8225_write_phy_ofdm($p0, 28, 4);
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2860} msleep(1);
    goto corral_source_split_11066;

  corral_source_split_11066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2861} rtl8225_write_phy_ofdm($p0, 29, $sub.i8(0, 59));
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2862} msleep(1);
    goto corral_source_split_11068;

  corral_source_split_11068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2863} rtl8225_write_phy_ofdm($p0, 30, $sub.i8(0, 77));
    goto corral_source_split_11069;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2864} msleep(1);
    goto corral_source_split_11070;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2865} rtl8225_write_phy_ofdm($p0, 31, 117);
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2866} msleep(1);
    goto corral_source_split_11072;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2867} rtl8225_write_phy_ofdm($p0, 32, 31);
    goto corral_source_split_11073;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2868} msleep(1);
    goto corral_source_split_11074;

  corral_source_split_11074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2869} rtl8225_write_phy_ofdm($p0, 33, 39);
    goto corral_source_split_11075;

  corral_source_split_11075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2870} msleep(1);
    goto corral_source_split_11076;

  corral_source_split_11076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2871} rtl8225_write_phy_ofdm($p0, 34, 22);
    goto corral_source_split_11077;

  corral_source_split_11077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2872} msleep(1);
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2873} rtl8225_write_phy_ofdm($p0, 35, $sub.i8(0, 128));
    goto corral_source_split_11079;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2874} msleep(1);
    goto corral_source_split_11080;

  corral_source_split_11080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2875} rtl8225_write_phy_ofdm($p0, 36, 70);
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2876} msleep(1);
    goto corral_source_split_11082;

  corral_source_split_11082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2877} rtl8225_write_phy_ofdm($p0, 37, 32);
    goto corral_source_split_11083;

  corral_source_split_11083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2878} msleep(1);
    goto corral_source_split_11084;

  corral_source_split_11084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2879} rtl8225_write_phy_ofdm($p0, 38, $sub.i8(0, 112));
    goto corral_source_split_11085;

  corral_source_split_11085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2880} msleep(1);
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2881} rtl8225_write_phy_ofdm($p0, 39, $sub.i8(0, 120));
    goto corral_source_split_11087;

  corral_source_split_11087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2882} msleep(1);
    goto corral_source_split_11088;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2883} rtl8225_write_phy_cck($p0, 0, $sub.i8(0, 104));
    goto corral_source_split_11089;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2884} msleep(1);
    goto corral_source_split_11090;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2885} rtl8225_write_phy_cck($p0, 3, 32);
    goto corral_source_split_11091;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2886} msleep(1);
    goto corral_source_split_11092;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2887} rtl8225_write_phy_cck($p0, 4, 126);
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2888} msleep(1);
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2889} rtl8225_write_phy_cck($p0, 5, 18);
    goto corral_source_split_11095;

  corral_source_split_11095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2890} msleep(1);
    goto corral_source_split_11096;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2891} rtl8225_write_phy_cck($p0, 6, $sub.i8(0, 4));
    goto corral_source_split_11097;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2892} msleep(1);
    goto corral_source_split_11098;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2893} rtl8225_write_phy_cck($p0, 7, 120);
    goto corral_source_split_11099;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2894} msleep(1);
    goto corral_source_split_11100;

  corral_source_split_11100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2895} rtl8225_write_phy_cck($p0, 8, 46);
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2896} msleep(1);
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2897} rtl8225_write_phy_cck($p0, 16, $sub.i8(0, 109));
    goto corral_source_split_11103;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2898} msleep(1);
    goto corral_source_split_11104;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2899} rtl8225_write_phy_cck($p0, 17, $sub.i8(0, 120));
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2900} msleep(1);
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2901} rtl8225_write_phy_cck($p0, 18, 71);
    goto corral_source_split_11107;

  corral_source_split_11107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2902} msleep(1);
    goto corral_source_split_11108;

  corral_source_split_11108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2903} rtl8225_write_phy_cck($p0, 19, $sub.i8(0, 48));
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2904} rtl8225_write_phy_cck($p0, 25, 0);
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2905} rtl8225_write_phy_cck($p0, 26, $sub.i8(0, 96));
    goto corral_source_split_11111;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2906} rtl8225_write_phy_cck($p0, 27, 8);
    goto corral_source_split_11112;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2907} rtl8225_write_phy_cck($p0, 64, $sub.i8(0, 122));
    goto corral_source_split_11113;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2908} rtl8225_write_phy_cck($p0, 65, $sub.i8(0, 118));
    goto corral_source_split_11114;

  corral_source_split_11114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2909} msleep(1);
    goto corral_source_split_11115;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2910} rtl8225_write_phy_cck($p0, 66, 21);
    goto corral_source_split_11116;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2911} msleep(1);
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2912} rtl8225_write_phy_cck($p0, 67, 24);
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2913} msleep(1);
    goto corral_source_split_11119;

  corral_source_split_11119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2914} rtl8225_write_phy_cck($p0, 68, 54);
    goto corral_source_split_11120;

  corral_source_split_11120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2915} msleep(1);
    goto corral_source_split_11121;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2916} rtl8225_write_phy_cck($p0, 69, 53);
    goto corral_source_split_11122;

  corral_source_split_11122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2917} msleep(1);
    goto corral_source_split_11123;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2918} rtl8225_write_phy_cck($p0, 70, 46);
    goto corral_source_split_11124;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2919} msleep(1);
    goto corral_source_split_11125;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2920} rtl8225_write_phy_cck($p0, 71, 37);
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2921} msleep(1);
    goto corral_source_split_11127;

  corral_source_split_11127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2922} rtl8225_write_phy_cck($p0, 72, 28);
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2923} msleep(1);
    goto corral_source_split_11129;

  corral_source_split_11129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2924} rtl8225_write_phy_cck($p0, 73, 18);
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2925} msleep(1);
    goto corral_source_split_11131;

  corral_source_split_11131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2926} rtl8225_write_phy_cck($p0, 74, 9);
    goto corral_source_split_11132;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2927} msleep(1);
    goto corral_source_split_11133;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2928} rtl8225_write_phy_cck($p0, 75, 4);
    goto corral_source_split_11134;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2929} msleep(1);
    goto corral_source_split_11135;

  corral_source_split_11135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2930} rtl8225_write_phy_cck($p0, 76, 5);
    goto corral_source_split_11136;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2931} msleep(1);
    goto corral_source_split_11137;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_11138;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_11139;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_11140;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p59, $mul.ref(91, 1));
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2932} rtl818x_iowrite8($p3, $p60, 13);
    goto corral_source_split_11142;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2933} msleep(1);
    goto corral_source_split_11143;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2934} rtl8225z2_rf_set_tx_power($p0, 1);
    goto corral_source_split_11144;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2935} rtl8225_write_phy_cck($p0, 16, $sub.i8(0, 101));
    goto corral_source_split_11145;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2936} msleep(1);
    goto corral_source_split_11146;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2937} rtl8225_write_phy_ofdm($p0, 38, $sub.i8(0, 112));
    goto corral_source_split_11147;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2938} msleep(1);
    goto corral_source_split_11148;

  corral_source_split_11148:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_11150;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 256)), $mul.ref(159, 1));
    goto corral_source_split_11151;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2939} rtl818x_iowrite8($p3, $p63, 3);
    goto corral_source_split_11152;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2940} msleep(1);
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_11154;

  corral_source_split_11154:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_11155;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_11156;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref(148, 4));
    goto corral_source_split_11157;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2941} rtl818x_iowrite32($p3, $p67, 364904450);
    goto corral_source_split_11158;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_11159;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 256)), $mul.ref(130, 1));
    goto corral_source_split_11161;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2942} rtl818x_iowrite16($p3, $p70, 8191);
    goto corral_source_split_11162;

  corral_source_split_11162:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i53 == 1;
    goto corral_source_split_10968;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2773} rtl8225_write($p0, 2, 3149);
    goto corral_source_split_10969;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2774} msleep(200);
    goto corral_source_split_10970;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2775} rtl8225_write($p0, 2, 1101);
    goto corral_source_split_10971;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2776} msleep(100);
    goto corral_source_split_10972;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rtl8225se_rf_init: ref;

axiom rtl8225se_rf_init == $sub.ref(0, 406226);

procedure rtl8225se_rf_init($p0: ref);
  free requires assertsPassed;
  modifies $M.51, $CurrAddr;



implementation rtl8225se_rf_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i8;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i8;
  var $i26: i32;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i8;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i8;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12071;

  corral_source_split_12071:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_12072;

  corral_source_split_12072:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_12073;

  corral_source_split_12073:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_12074;

  corral_source_split_12074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3633} rtl8187se_rf_writereg($p0, 0, 319);
    goto corral_source_split_12075;

  corral_source_split_12075:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !(1 == 1);
    goto corral_source_split_12080;

  corral_source_split_12080:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3637} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3635} $i4 := rtl8187se_rf_readreg($p0, 8);
    call {:si_unique_call 3636} {:cexpr "rf23"} boogie_si_record_i32($i4);
    goto corral_source_split_12082;

  corral_source_split_12082:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb7, $bb8;

  $bb8:
    assume !(1 == 1);
    goto corral_source_split_12087;

  corral_source_split_12087:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3641} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3639} $i5 := rtl8187se_rf_readreg($p0, 9);
    call {:si_unique_call 3640} {:cexpr "rf24"} boogie_si_record_i32($i5);
    goto corral_source_split_12089;

  corral_source_split_12089:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb13, $bb14;

  $bb14:
    assume !(1 == 1);
    goto corral_source_split_12094;

  corral_source_split_12094:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3643} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i4, 2072);
    goto corral_source_split_12096;

  corral_source_split_12096:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_12103;

  corral_source_split_12103:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_12104;

  corral_source_split_12104:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_12105;

  corral_source_split_12105:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1776)), $mul.ref(264, 1));
    goto corral_source_split_12106;

  corral_source_split_12106:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i8);
    goto corral_source_split_12107;

  corral_source_split_12107:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_12108;

  corral_source_split_12108:
    assume {:verifier.code 0} true;
    $p14 := (if $i13 == 1 then .str.4 else .str.5);
    goto corral_source_split_12109;

  corral_source_split_12109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3644} _dev_info.ref.ref.ref($p11, .str.3, $p14);
    goto corral_source_split_12110;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3645} rtl8187se_rf_writereg($p0, 0, 159);
    goto corral_source_split_12111;

  corral_source_split_12111:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb25, $bb26;

  $bb26:
    assume !(1 == 1);
    goto corral_source_split_12116;

  corral_source_split_12116:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3648} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3647} rtl8187se_rf_writereg($p0, 1, 1760);
    goto corral_source_split_12118;

  corral_source_split_12118:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb31, $bb32;

  $bb32:
    assume !(1 == 1);
    goto corral_source_split_12123;

  corral_source_split_12123:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3651} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3650} rtl8187se_rf_writereg($p0, 2, 77);
    goto corral_source_split_12125;

  corral_source_split_12125:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb37, $bb38;

  $bb38:
    assume !(1 == 1);
    goto corral_source_split_12130;

  corral_source_split_12130:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3654} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3653} rtl8187se_rf_writereg($p0, 3, 2033);
    goto corral_source_split_12132;

  corral_source_split_12132:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb43, $bb44;

  $bb44:
    assume !(1 == 1);
    goto corral_source_split_12137;

  corral_source_split_12137:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3657} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3656} rtl8187se_rf_writereg($p0, 4, 2421);
    goto corral_source_split_12139;

  corral_source_split_12139:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb49, $bb50;

  $bb50:
    assume !(1 == 1);
    goto corral_source_split_12144;

  corral_source_split_12144:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3660} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3659} rtl8187se_rf_writereg($p0, 5, 3186);
    goto corral_source_split_12146;

  corral_source_split_12146:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb55, $bb56;

  $bb56:
    assume !(1 == 1);
    goto corral_source_split_12151;

  corral_source_split_12151:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3663} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3662} rtl8187se_rf_writereg($p0, 6, 2790);
    goto corral_source_split_12153;

  corral_source_split_12153:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb61, $bb62;

  $bb62:
    assume !(1 == 1);
    goto corral_source_split_12158;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3666} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3665} rtl8187se_rf_writereg($p0, 7, 202);
    goto corral_source_split_12160;

  corral_source_split_12160:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb67, $bb68;

  $bb68:
    assume !(1 == 1);
    goto corral_source_split_12165;

  corral_source_split_12165:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3669} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3668} rtl8187se_rf_writereg($p0, 8, 3612);
    goto corral_source_split_12167;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb73, $bb74;

  $bb74:
    assume !(1 == 1);
    goto corral_source_split_12172;

  corral_source_split_12172:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3672} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3671} rtl8187se_rf_writereg($p0, 9, 752);
    goto corral_source_split_12174;

  corral_source_split_12174:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb79, $bb80;

  $bb80:
    assume !(1 == 1);
    goto corral_source_split_12179;

  corral_source_split_12179:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3675} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3674} rtl8187se_rf_writereg($p0, 10, 2512);
    goto corral_source_split_12181;

  corral_source_split_12181:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb85, $bb86;

  $bb86:
    assume !(1 == 1);
    goto corral_source_split_12186;

  corral_source_split_12186:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3678} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3677} rtl8187se_rf_writereg($p0, 11, 442);
    goto corral_source_split_12188;

  corral_source_split_12188:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb91, $bb92;

  $bb92:
    assume !(1 == 1);
    goto corral_source_split_12193;

  corral_source_split_12193:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3681} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3680} rtl8187se_rf_writereg($p0, 12, 1600);
    goto corral_source_split_12195;

  corral_source_split_12195:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb97, $bb98;

  $bb98:
    assume !(1 == 1);
    goto corral_source_split_12200;

  corral_source_split_12200:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3684} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3683} rtl8187se_rf_writereg($p0, 13, 2271);
    goto corral_source_split_12202;

  corral_source_split_12202:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb103, $bb104;

  $bb104:
    assume !(1 == 1);
    goto corral_source_split_12207;

  corral_source_split_12207:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3687} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3686} rtl8187se_rf_writereg($p0, 14, 32);
    goto corral_source_split_12209;

  corral_source_split_12209:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb109, $bb110;

  $bb110:
    assume !(1 == 1);
    goto corral_source_split_12214;

  corral_source_split_12214:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3690} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3689} rtl8187se_rf_writereg($p0, 15, 2448);
    goto corral_source_split_12216;

  corral_source_split_12216:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb115, $bb116;

  $bb116:
    assume !(1 == 1);
    goto corral_source_split_12221;

  corral_source_split_12221:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3693} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3692} rtl8187se_rf_writereg($p0, 0, 319);
    goto corral_source_split_12223;

  corral_source_split_12223:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb121, $bb122;

  $bb122:
    assume !(1 == 1);
    goto corral_source_split_12228;

  corral_source_split_12228:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3696} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3695} rtl8187se_rf_writereg($p0, 3, 2054);
    goto corral_source_split_12230;

  corral_source_split_12230:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb127, $bb128;

  $bb128:
    assume !(1 == 1);
    goto corral_source_split_12235;

  corral_source_split_12235:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3699} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3698} rtl8187se_rf_writereg($p0, 4, 935);
    goto corral_source_split_12237;

  corral_source_split_12237:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb133, $bb134;

  $bb134:
    assume !(1 == 1);
    goto corral_source_split_12242;

  corral_source_split_12242:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3702} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3701} rtl8187se_rf_writereg($p0, 5, 1435);
    goto corral_source_split_12244;

  corral_source_split_12244:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb139, $bb140;

  $bb140:
    assume !(1 == 1);
    goto corral_source_split_12249;

  corral_source_split_12249:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3705} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3704} rtl8187se_rf_writereg($p0, 6, 129);
    goto corral_source_split_12251;

  corral_source_split_12251:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb145, $bb146;

  $bb146:
    assume !(1 == 1);
    goto corral_source_split_12256;

  corral_source_split_12256:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3708} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3707} rtl8187se_rf_writereg($p0, 7, 416);
    goto corral_source_split_12258;

  corral_source_split_12258:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb151, $bb152;

  $bb152:
    assume !(1 == 1);
    goto corral_source_split_12263;

  corral_source_split_12263:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3711} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3710} rtl8187se_rf_writereg($p0, 10, 1);
    goto corral_source_split_12265;

  corral_source_split_12265:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb157, $bb158;

  $bb158:
    assume !(1 == 1);
    goto corral_source_split_12270;

  corral_source_split_12270:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3714} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3713} rtl8187se_rf_writereg($p0, 11, 1048);
    goto corral_source_split_12272;

  corral_source_split_12272:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb163, $bb164;

  $bb164:
    assume !(1 == 1);
    goto corral_source_split_12277;

  corral_source_split_12277:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3717} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3716} rtl8187se_rf_writereg($p0, 12, 4030);
    goto corral_source_split_12279;

  corral_source_split_12279:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb169, $bb170;

  $bb170:
    assume !(1 == 1);
    goto corral_source_split_12284;

  corral_source_split_12284:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3720} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3719} rtl8187se_rf_writereg($p0, 13, 8);
    goto corral_source_split_12286;

  corral_source_split_12286:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb175, $bb176;

  $bb176:
    assume !(1 == 1);
    goto corral_source_split_12291;

  corral_source_split_12291:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3722} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i8);
    goto corral_source_split_12293;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_12294;

  corral_source_split_12294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i16 == 1);
    goto corral_source_split_12299;

  corral_source_split_12299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3724} rtl8187se_rf_writereg($p0, 14, 2054);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb184, $bb185;

  $bb185:
    assume !(1 == 1);
    goto corral_source_split_12304;

  corral_source_split_12304:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3727} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3726} rtl8187se_rf_writereg($p0, 15, 2764);
    goto corral_source_split_12306;

  corral_source_split_12306:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb190, $bb191;

  $bb191:
    assume !(1 == 1);
    goto corral_source_split_12311;

  corral_source_split_12311:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3730} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3729} rtl8187se_rf_writereg($p0, 0, 471);
    goto corral_source_split_12313;

  corral_source_split_12313:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb196, $bb197;

  $bb197:
    assume !(1 == 1);
    goto corral_source_split_12318;

  corral_source_split_12318:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3733} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3732} rtl8187se_rf_writereg($p0, 3, 3584);
    goto corral_source_split_12320;

  corral_source_split_12320:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb202, $bb203;

  $bb203:
    assume !(1 == 1);
    goto corral_source_split_12325;

  corral_source_split_12325:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3736} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3735} rtl8187se_rf_writereg($p0, 4, 3664);
    goto corral_source_split_12327;

  corral_source_split_12327:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb208, $bb209;

  $bb209:
    assume !(1 == 1);
    goto corral_source_split_12332;

  corral_source_split_12332:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3740} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3738} rtl8187se_write_rf_gain($p0);
    goto corral_source_split_12334;

  corral_source_split_12334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3739} rtl8187se_rf_writereg($p0, 5, 515);
    goto corral_source_split_12335;

  corral_source_split_12335:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb214, $bb215;

  $bb215:
    assume !(1 == 1);
    goto corral_source_split_12340;

  corral_source_split_12340:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3743} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3742} rtl8187se_rf_writereg($p0, 6, 512);
    goto corral_source_split_12342;

  corral_source_split_12342:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb220, $bb221;

  $bb221:
    assume !(1 == 1);
    goto corral_source_split_12347;

  corral_source_split_12347:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3746} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3745} rtl8187se_rf_writereg($p0, 0, 311);
    goto corral_source_split_12349;

  corral_source_split_12349:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3747} __const_udelay(4295000);
    goto corral_source_split_12351;

  corral_source_split_12351:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3748} __const_udelay(4295000);
    goto corral_source_split_12353;

  corral_source_split_12353:
    assume {:verifier.code 0} true;
    goto $bb650;

  $bb650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4141} __const_udelay(4295000);
    goto corral_source_split_13158;

  corral_source_split_13158:
    assume {:verifier.code 0} true;
    goto $bb651;

  $bb651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4142} __const_udelay(4295000);
    goto corral_source_split_13160;

  corral_source_split_13160:
    assume {:verifier.code 0} true;
    goto $bb652;

  $bb652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4143} __const_udelay(4295000);
    goto corral_source_split_13162;

  corral_source_split_13162:
    assume {:verifier.code 0} true;
    goto $bb653;

  $bb653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4144} __const_udelay(4295000);
    goto corral_source_split_13164;

  corral_source_split_13164:
    assume {:verifier.code 0} true;
    goto $bb654;

  $bb654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4145} __const_udelay(4295000);
    goto corral_source_split_13166;

  corral_source_split_13166:
    assume {:verifier.code 0} true;
    goto $bb655;

  $bb655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4146} __const_udelay(4295000);
    goto corral_source_split_13168;

  corral_source_split_13168:
    assume {:verifier.code 0} true;
    goto $bb656;

  $bb656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4147} __const_udelay(4295000);
    goto corral_source_split_13170;

  corral_source_split_13170:
    assume {:verifier.code 0} true;
    goto $bb657;

  $bb657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4148} __const_udelay(4295000);
    goto corral_source_split_13172;

  corral_source_split_13172:
    assume {:verifier.code 0} true;
    goto $bb658;

  $bb658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4149} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3749} rtl8187se_rf_writereg($p0, 13, 8);
    goto corral_source_split_12355;

  corral_source_split_12355:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3750} __const_udelay(4295000);
    goto corral_source_split_12357;

  corral_source_split_12357:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3751} __const_udelay(4295000);
    goto corral_source_split_12359;

  corral_source_split_12359:
    assume {:verifier.code 0} true;
    goto $bb641;

  $bb641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4132} __const_udelay(4295000);
    goto corral_source_split_13142;

  corral_source_split_13142:
    assume {:verifier.code 0} true;
    goto $bb642;

  $bb642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4133} __const_udelay(4295000);
    goto corral_source_split_13144;

  corral_source_split_13144:
    assume {:verifier.code 0} true;
    goto $bb643;

  $bb643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4134} __const_udelay(4295000);
    goto corral_source_split_13146;

  corral_source_split_13146:
    assume {:verifier.code 0} true;
    goto $bb644;

  $bb644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4135} __const_udelay(4295000);
    goto corral_source_split_13148;

  corral_source_split_13148:
    assume {:verifier.code 0} true;
    goto $bb645;

  $bb645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4136} __const_udelay(4295000);
    goto corral_source_split_13150;

  corral_source_split_13150:
    assume {:verifier.code 0} true;
    goto $bb646;

  $bb646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4137} __const_udelay(4295000);
    goto corral_source_split_13152;

  corral_source_split_13152:
    assume {:verifier.code 0} true;
    goto $bb647;

  $bb647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4138} __const_udelay(4295000);
    goto corral_source_split_13154;

  corral_source_split_13154:
    assume {:verifier.code 0} true;
    goto $bb648;

  $bb648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4139} __const_udelay(4295000);
    goto corral_source_split_13156;

  corral_source_split_13156:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4140} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3752} rtl8187se_rf_writereg($p0, 0, 55);
    goto corral_source_split_12361;

  corral_source_split_12361:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3753} __const_udelay(4295000);
    goto corral_source_split_12363;

  corral_source_split_12363:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3754} __const_udelay(4295000);
    goto corral_source_split_12365;

  corral_source_split_12365:
    assume {:verifier.code 0} true;
    goto $bb632;

  $bb632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4123} __const_udelay(4295000);
    goto corral_source_split_13126;

  corral_source_split_13126:
    assume {:verifier.code 0} true;
    goto $bb633;

  $bb633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4124} __const_udelay(4295000);
    goto corral_source_split_13128;

  corral_source_split_13128:
    assume {:verifier.code 0} true;
    goto $bb634;

  $bb634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4125} __const_udelay(4295000);
    goto corral_source_split_13130;

  corral_source_split_13130:
    assume {:verifier.code 0} true;
    goto $bb635;

  $bb635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4126} __const_udelay(4295000);
    goto corral_source_split_13132;

  corral_source_split_13132:
    assume {:verifier.code 0} true;
    goto $bb636;

  $bb636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4127} __const_udelay(4295000);
    goto corral_source_split_13134;

  corral_source_split_13134:
    assume {:verifier.code 0} true;
    goto $bb637;

  $bb637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4128} __const_udelay(4295000);
    goto corral_source_split_13136;

  corral_source_split_13136:
    assume {:verifier.code 0} true;
    goto $bb638;

  $bb638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4129} __const_udelay(4295000);
    goto corral_source_split_13138;

  corral_source_split_13138:
    assume {:verifier.code 0} true;
    goto $bb639;

  $bb639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4130} __const_udelay(4295000);
    goto corral_source_split_13140;

  corral_source_split_13140:
    assume {:verifier.code 0} true;
    goto $bb640;

  $bb640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4131} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3755} rtl8187se_rf_writereg($p0, 4, 352);
    goto corral_source_split_12367;

  corral_source_split_12367:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3756} __const_udelay(4295000);
    goto corral_source_split_12369;

  corral_source_split_12369:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3757} __const_udelay(4295000);
    goto corral_source_split_12371;

  corral_source_split_12371:
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4114} __const_udelay(4295000);
    goto corral_source_split_13110;

  corral_source_split_13110:
    assume {:verifier.code 0} true;
    goto $bb624;

  $bb624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4115} __const_udelay(4295000);
    goto corral_source_split_13112;

  corral_source_split_13112:
    assume {:verifier.code 0} true;
    goto $bb625;

  $bb625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4116} __const_udelay(4295000);
    goto corral_source_split_13114;

  corral_source_split_13114:
    assume {:verifier.code 0} true;
    goto $bb626;

  $bb626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4117} __const_udelay(4295000);
    goto corral_source_split_13116;

  corral_source_split_13116:
    assume {:verifier.code 0} true;
    goto $bb627;

  $bb627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4118} __const_udelay(4295000);
    goto corral_source_split_13118;

  corral_source_split_13118:
    assume {:verifier.code 0} true;
    goto $bb628;

  $bb628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4119} __const_udelay(4295000);
    goto corral_source_split_13120;

  corral_source_split_13120:
    assume {:verifier.code 0} true;
    goto $bb629;

  $bb629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4120} __const_udelay(4295000);
    goto corral_source_split_13122;

  corral_source_split_13122:
    assume {:verifier.code 0} true;
    goto $bb630;

  $bb630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4121} __const_udelay(4295000);
    goto corral_source_split_13124;

  corral_source_split_13124:
    assume {:verifier.code 0} true;
    goto $bb631;

  $bb631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4122} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3758} rtl8187se_rf_writereg($p0, 7, 128);
    goto corral_source_split_12373;

  corral_source_split_12373:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3759} __const_udelay(4295000);
    goto corral_source_split_12375;

  corral_source_split_12375:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3760} __const_udelay(4295000);
    goto corral_source_split_12377;

  corral_source_split_12377:
    assume {:verifier.code 0} true;
    goto $bb614;

  $bb614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4105} __const_udelay(4295000);
    goto corral_source_split_13094;

  corral_source_split_13094:
    assume {:verifier.code 0} true;
    goto $bb615;

  $bb615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4106} __const_udelay(4295000);
    goto corral_source_split_13096;

  corral_source_split_13096:
    assume {:verifier.code 0} true;
    goto $bb616;

  $bb616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4107} __const_udelay(4295000);
    goto corral_source_split_13098;

  corral_source_split_13098:
    assume {:verifier.code 0} true;
    goto $bb617;

  $bb617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4108} __const_udelay(4295000);
    goto corral_source_split_13100;

  corral_source_split_13100:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4109} __const_udelay(4295000);
    goto corral_source_split_13102;

  corral_source_split_13102:
    assume {:verifier.code 0} true;
    goto $bb619;

  $bb619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4110} __const_udelay(4295000);
    goto corral_source_split_13104;

  corral_source_split_13104:
    assume {:verifier.code 0} true;
    goto $bb620;

  $bb620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4111} __const_udelay(4295000);
    goto corral_source_split_13106;

  corral_source_split_13106:
    assume {:verifier.code 0} true;
    goto $bb621;

  $bb621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4112} __const_udelay(4295000);
    goto corral_source_split_13108;

  corral_source_split_13108:
    assume {:verifier.code 0} true;
    goto $bb622;

  $bb622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4113} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3761} rtl8187se_rf_writereg($p0, 2, 2189);
    goto corral_source_split_12379;

  corral_source_split_12379:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3762} __const_udelay(4295000);
    goto corral_source_split_12381;

  corral_source_split_12381:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3763} __const_udelay(4295000);
    goto corral_source_split_12383;

  corral_source_split_12383:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3886} __const_udelay(4295000);
    goto corral_source_split_12658;

  corral_source_split_12658:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3887} __const_udelay(4295000);
    goto corral_source_split_12660;

  corral_source_split_12660:
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3888} __const_udelay(4295000);
    goto corral_source_split_12662;

  corral_source_split_12662:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3889} __const_udelay(4295000);
    goto corral_source_split_12664;

  corral_source_split_12664:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3890} __const_udelay(4295000);
    goto corral_source_split_12666;

  corral_source_split_12666:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3891} __const_udelay(4295000);
    goto corral_source_split_12668;

  corral_source_split_12668:
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3892} __const_udelay(4295000);
    goto corral_source_split_12670;

  corral_source_split_12670:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3893} __const_udelay(4295000);
    goto corral_source_split_12672;

  corral_source_split_12672:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3894} __const_udelay(4295000);
    goto corral_source_split_12674;

  corral_source_split_12674:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3895} __const_udelay(4295000);
    goto corral_source_split_12676;

  corral_source_split_12676:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3896} __const_udelay(4295000);
    goto corral_source_split_12678;

  corral_source_split_12678:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3897} __const_udelay(4295000);
    goto corral_source_split_12680;

  corral_source_split_12680:
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3898} __const_udelay(4295000);
    goto corral_source_split_12682;

  corral_source_split_12682:
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3899} __const_udelay(4295000);
    goto corral_source_split_12684;

  corral_source_split_12684:
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3900} __const_udelay(4295000);
    goto corral_source_split_12686;

  corral_source_split_12686:
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3901} __const_udelay(4295000);
    goto corral_source_split_12688;

  corral_source_split_12688:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3902} __const_udelay(4295000);
    goto corral_source_split_12690;

  corral_source_split_12690:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3903} __const_udelay(4295000);
    goto corral_source_split_12692;

  corral_source_split_12692:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3904} __const_udelay(4295000);
    goto corral_source_split_12694;

  corral_source_split_12694:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3905} __const_udelay(4295000);
    goto corral_source_split_12696;

  corral_source_split_12696:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3906} __const_udelay(4295000);
    goto corral_source_split_12698;

  corral_source_split_12698:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3907} __const_udelay(4295000);
    goto corral_source_split_12700;

  corral_source_split_12700:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3908} __const_udelay(4295000);
    goto corral_source_split_12702;

  corral_source_split_12702:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3909} __const_udelay(4295000);
    goto corral_source_split_12704;

  corral_source_split_12704:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3910} __const_udelay(4295000);
    goto corral_source_split_12706;

  corral_source_split_12706:
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3911} __const_udelay(4295000);
    goto corral_source_split_12708;

  corral_source_split_12708:
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3912} __const_udelay(4295000);
    goto corral_source_split_12710;

  corral_source_split_12710:
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3913} __const_udelay(4295000);
    goto corral_source_split_12712;

  corral_source_split_12712:
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3914} __const_udelay(4295000);
    goto corral_source_split_12714;

  corral_source_split_12714:
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3915} __const_udelay(4295000);
    goto corral_source_split_12716;

  corral_source_split_12716:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3916} __const_udelay(4295000);
    goto corral_source_split_12718;

  corral_source_split_12718:
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3917} __const_udelay(4295000);
    goto corral_source_split_12720;

  corral_source_split_12720:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3918} __const_udelay(4295000);
    goto corral_source_split_12722;

  corral_source_split_12722:
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3919} __const_udelay(4295000);
    goto corral_source_split_12724;

  corral_source_split_12724:
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3920} __const_udelay(4295000);
    goto corral_source_split_12726;

  corral_source_split_12726:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3921} __const_udelay(4295000);
    goto corral_source_split_12728;

  corral_source_split_12728:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3922} __const_udelay(4295000);
    goto corral_source_split_12730;

  corral_source_split_12730:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3923} __const_udelay(4295000);
    goto corral_source_split_12732;

  corral_source_split_12732:
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3924} __const_udelay(4295000);
    goto corral_source_split_12734;

  corral_source_split_12734:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3925} __const_udelay(4295000);
    goto corral_source_split_12736;

  corral_source_split_12736:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3926} __const_udelay(4295000);
    goto corral_source_split_12738;

  corral_source_split_12738:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3927} __const_udelay(4295000);
    goto corral_source_split_12740;

  corral_source_split_12740:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3928} __const_udelay(4295000);
    goto corral_source_split_12742;

  corral_source_split_12742:
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3929} __const_udelay(4295000);
    goto corral_source_split_12744;

  corral_source_split_12744:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3930} __const_udelay(4295000);
    goto corral_source_split_12746;

  corral_source_split_12746:
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3931} __const_udelay(4295000);
    goto corral_source_split_12748;

  corral_source_split_12748:
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3932} __const_udelay(4295000);
    goto corral_source_split_12750;

  corral_source_split_12750:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3933} __const_udelay(4295000);
    goto corral_source_split_12752;

  corral_source_split_12752:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3934} __const_udelay(4295000);
    goto corral_source_split_12754;

  corral_source_split_12754:
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3935} __const_udelay(4295000);
    goto corral_source_split_12756;

  corral_source_split_12756:
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3936} __const_udelay(4295000);
    goto corral_source_split_12758;

  corral_source_split_12758:
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3937} __const_udelay(4295000);
    goto corral_source_split_12760;

  corral_source_split_12760:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3938} __const_udelay(4295000);
    goto corral_source_split_12762;

  corral_source_split_12762:
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3939} __const_udelay(4295000);
    goto corral_source_split_12764;

  corral_source_split_12764:
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3940} __const_udelay(4295000);
    goto corral_source_split_12766;

  corral_source_split_12766:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3941} __const_udelay(4295000);
    goto corral_source_split_12768;

  corral_source_split_12768:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3942} __const_udelay(4295000);
    goto corral_source_split_12770;

  corral_source_split_12770:
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3943} __const_udelay(4295000);
    goto corral_source_split_12772;

  corral_source_split_12772:
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3944} __const_udelay(4295000);
    goto corral_source_split_12774;

  corral_source_split_12774:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3945} __const_udelay(4295000);
    goto corral_source_split_12776;

  corral_source_split_12776:
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3946} __const_udelay(4295000);
    goto corral_source_split_12778;

  corral_source_split_12778:
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3947} __const_udelay(4295000);
    goto corral_source_split_12780;

  corral_source_split_12780:
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3948} __const_udelay(4295000);
    goto corral_source_split_12782;

  corral_source_split_12782:
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3949} __const_udelay(4295000);
    goto corral_source_split_12784;

  corral_source_split_12784:
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3950} __const_udelay(4295000);
    goto corral_source_split_12786;

  corral_source_split_12786:
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3951} __const_udelay(4295000);
    goto corral_source_split_12788;

  corral_source_split_12788:
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3952} __const_udelay(4295000);
    goto corral_source_split_12790;

  corral_source_split_12790:
    assume {:verifier.code 0} true;
    goto $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3953} __const_udelay(4295000);
    goto corral_source_split_12792;

  corral_source_split_12792:
    assume {:verifier.code 0} true;
    goto $bb463;

  $bb463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3954} __const_udelay(4295000);
    goto corral_source_split_12794;

  corral_source_split_12794:
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3955} __const_udelay(4295000);
    goto corral_source_split_12796;

  corral_source_split_12796:
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3956} __const_udelay(4295000);
    goto corral_source_split_12798;

  corral_source_split_12798:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3957} __const_udelay(4295000);
    goto corral_source_split_12800;

  corral_source_split_12800:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3958} __const_udelay(4295000);
    goto corral_source_split_12802;

  corral_source_split_12802:
    assume {:verifier.code 0} true;
    goto $bb468;

  $bb468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3959} __const_udelay(4295000);
    goto corral_source_split_12804;

  corral_source_split_12804:
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3960} __const_udelay(4295000);
    goto corral_source_split_12806;

  corral_source_split_12806:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3961} __const_udelay(4295000);
    goto corral_source_split_12808;

  corral_source_split_12808:
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3962} __const_udelay(4295000);
    goto corral_source_split_12810;

  corral_source_split_12810:
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3963} __const_udelay(4295000);
    goto corral_source_split_12812;

  corral_source_split_12812:
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3964} __const_udelay(4295000);
    goto corral_source_split_12814;

  corral_source_split_12814:
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3965} __const_udelay(4295000);
    goto corral_source_split_12816;

  corral_source_split_12816:
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3966} __const_udelay(4295000);
    goto corral_source_split_12818;

  corral_source_split_12818:
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3967} __const_udelay(4295000);
    goto corral_source_split_12820;

  corral_source_split_12820:
    assume {:verifier.code 0} true;
    goto $bb477;

  $bb477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3968} __const_udelay(4295000);
    goto corral_source_split_12822;

  corral_source_split_12822:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3969} __const_udelay(4295000);
    goto corral_source_split_12824;

  corral_source_split_12824:
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3970} __const_udelay(4295000);
    goto corral_source_split_12826;

  corral_source_split_12826:
    assume {:verifier.code 0} true;
    goto $bb480;

  $bb480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3971} __const_udelay(4295000);
    goto corral_source_split_12828;

  corral_source_split_12828:
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3972} __const_udelay(4295000);
    goto corral_source_split_12830;

  corral_source_split_12830:
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3973} __const_udelay(4295000);
    goto corral_source_split_12832;

  corral_source_split_12832:
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3974} __const_udelay(4295000);
    goto corral_source_split_12834;

  corral_source_split_12834:
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3975} __const_udelay(4295000);
    goto corral_source_split_12836;

  corral_source_split_12836:
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3976} __const_udelay(4295000);
    goto corral_source_split_12838;

  corral_source_split_12838:
    assume {:verifier.code 0} true;
    goto $bb486;

  $bb486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3977} __const_udelay(4295000);
    goto corral_source_split_12840;

  corral_source_split_12840:
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3978} __const_udelay(4295000);
    goto corral_source_split_12842;

  corral_source_split_12842:
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3979} __const_udelay(4295000);
    goto corral_source_split_12844;

  corral_source_split_12844:
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3980} __const_udelay(4295000);
    goto corral_source_split_12846;

  corral_source_split_12846:
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3981} __const_udelay(4295000);
    goto corral_source_split_12848;

  corral_source_split_12848:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3982} __const_udelay(4295000);
    goto corral_source_split_12850;

  corral_source_split_12850:
    assume {:verifier.code 0} true;
    goto $bb492;

  $bb492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3983} __const_udelay(4295000);
    goto corral_source_split_12852;

  corral_source_split_12852:
    assume {:verifier.code 0} true;
    goto $bb493;

  $bb493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3984} __const_udelay(4295000);
    goto corral_source_split_12854;

  corral_source_split_12854:
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3985} __const_udelay(4295000);
    goto corral_source_split_12856;

  corral_source_split_12856:
    assume {:verifier.code 0} true;
    goto $bb495;

  $bb495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3986} __const_udelay(4295000);
    goto corral_source_split_12858;

  corral_source_split_12858:
    assume {:verifier.code 0} true;
    goto $bb496;

  $bb496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3987} __const_udelay(4295000);
    goto corral_source_split_12860;

  corral_source_split_12860:
    assume {:verifier.code 0} true;
    goto $bb497;

  $bb497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3988} __const_udelay(4295000);
    goto corral_source_split_12862;

  corral_source_split_12862:
    assume {:verifier.code 0} true;
    goto $bb498;

  $bb498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3989} __const_udelay(4295000);
    goto corral_source_split_12864;

  corral_source_split_12864:
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3990} __const_udelay(4295000);
    goto corral_source_split_12866;

  corral_source_split_12866:
    assume {:verifier.code 0} true;
    goto $bb500;

  $bb500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3991} __const_udelay(4295000);
    goto corral_source_split_12868;

  corral_source_split_12868:
    assume {:verifier.code 0} true;
    goto $bb501;

  $bb501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3992} __const_udelay(4295000);
    goto corral_source_split_12870;

  corral_source_split_12870:
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3993} __const_udelay(4295000);
    goto corral_source_split_12872;

  corral_source_split_12872:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3994} __const_udelay(4295000);
    goto corral_source_split_12874;

  corral_source_split_12874:
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3995} __const_udelay(4295000);
    goto corral_source_split_12876;

  corral_source_split_12876:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3996} __const_udelay(4295000);
    goto corral_source_split_12878;

  corral_source_split_12878:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3997} __const_udelay(4295000);
    goto corral_source_split_12880;

  corral_source_split_12880:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3998} __const_udelay(4295000);
    goto corral_source_split_12882;

  corral_source_split_12882:
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3999} __const_udelay(4295000);
    goto corral_source_split_12884;

  corral_source_split_12884:
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4000} __const_udelay(4295000);
    goto corral_source_split_12886;

  corral_source_split_12886:
    assume {:verifier.code 0} true;
    goto $bb510;

  $bb510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4001} __const_udelay(4295000);
    goto corral_source_split_12888;

  corral_source_split_12888:
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4002} __const_udelay(4295000);
    goto corral_source_split_12890;

  corral_source_split_12890:
    assume {:verifier.code 0} true;
    goto $bb512;

  $bb512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4003} __const_udelay(4295000);
    goto corral_source_split_12892;

  corral_source_split_12892:
    assume {:verifier.code 0} true;
    goto $bb513;

  $bb513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4004} __const_udelay(4295000);
    goto corral_source_split_12894;

  corral_source_split_12894:
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4005} __const_udelay(4295000);
    goto corral_source_split_12896;

  corral_source_split_12896:
    assume {:verifier.code 0} true;
    goto $bb515;

  $bb515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4006} __const_udelay(4295000);
    goto corral_source_split_12898;

  corral_source_split_12898:
    assume {:verifier.code 0} true;
    goto $bb516;

  $bb516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4007} __const_udelay(4295000);
    goto corral_source_split_12900;

  corral_source_split_12900:
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4008} __const_udelay(4295000);
    goto corral_source_split_12902;

  corral_source_split_12902:
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4009} __const_udelay(4295000);
    goto corral_source_split_12904;

  corral_source_split_12904:
    assume {:verifier.code 0} true;
    goto $bb519;

  $bb519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4010} __const_udelay(4295000);
    goto corral_source_split_12906;

  corral_source_split_12906:
    assume {:verifier.code 0} true;
    goto $bb520;

  $bb520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4011} __const_udelay(4295000);
    goto corral_source_split_12908;

  corral_source_split_12908:
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4012} __const_udelay(4295000);
    goto corral_source_split_12910;

  corral_source_split_12910:
    assume {:verifier.code 0} true;
    goto $bb522;

  $bb522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4013} __const_udelay(4295000);
    goto corral_source_split_12912;

  corral_source_split_12912:
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4014} __const_udelay(4295000);
    goto corral_source_split_12914;

  corral_source_split_12914:
    assume {:verifier.code 0} true;
    goto $bb524;

  $bb524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4015} __const_udelay(4295000);
    goto corral_source_split_12916;

  corral_source_split_12916:
    assume {:verifier.code 0} true;
    goto $bb525;

  $bb525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4016} __const_udelay(4295000);
    goto corral_source_split_12918;

  corral_source_split_12918:
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4017} __const_udelay(4295000);
    goto corral_source_split_12920;

  corral_source_split_12920:
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4018} __const_udelay(4295000);
    goto corral_source_split_12922;

  corral_source_split_12922:
    assume {:verifier.code 0} true;
    goto $bb528;

  $bb528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4019} __const_udelay(4295000);
    goto corral_source_split_12924;

  corral_source_split_12924:
    assume {:verifier.code 0} true;
    goto $bb529;

  $bb529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4020} __const_udelay(4295000);
    goto corral_source_split_12926;

  corral_source_split_12926:
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4021} __const_udelay(4295000);
    goto corral_source_split_12928;

  corral_source_split_12928:
    assume {:verifier.code 0} true;
    goto $bb531;

  $bb531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4022} __const_udelay(4295000);
    goto corral_source_split_12930;

  corral_source_split_12930:
    assume {:verifier.code 0} true;
    goto $bb532;

  $bb532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4023} __const_udelay(4295000);
    goto corral_source_split_12932;

  corral_source_split_12932:
    assume {:verifier.code 0} true;
    goto $bb533;

  $bb533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4024} __const_udelay(4295000);
    goto corral_source_split_12934;

  corral_source_split_12934:
    assume {:verifier.code 0} true;
    goto $bb534;

  $bb534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4025} __const_udelay(4295000);
    goto corral_source_split_12936;

  corral_source_split_12936:
    assume {:verifier.code 0} true;
    goto $bb535;

  $bb535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4026} __const_udelay(4295000);
    goto corral_source_split_12938;

  corral_source_split_12938:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4027} __const_udelay(4295000);
    goto corral_source_split_12940;

  corral_source_split_12940:
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4028} __const_udelay(4295000);
    goto corral_source_split_12942;

  corral_source_split_12942:
    assume {:verifier.code 0} true;
    goto $bb538;

  $bb538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4029} __const_udelay(4295000);
    goto corral_source_split_12944;

  corral_source_split_12944:
    assume {:verifier.code 0} true;
    goto $bb539;

  $bb539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4030} __const_udelay(4295000);
    goto corral_source_split_12946;

  corral_source_split_12946:
    assume {:verifier.code 0} true;
    goto $bb540;

  $bb540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4031} __const_udelay(4295000);
    goto corral_source_split_12948;

  corral_source_split_12948:
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4032} __const_udelay(4295000);
    goto corral_source_split_12950;

  corral_source_split_12950:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4033} __const_udelay(4295000);
    goto corral_source_split_12952;

  corral_source_split_12952:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4034} __const_udelay(4295000);
    goto corral_source_split_12954;

  corral_source_split_12954:
    assume {:verifier.code 0} true;
    goto $bb544;

  $bb544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4035} __const_udelay(4295000);
    goto corral_source_split_12956;

  corral_source_split_12956:
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4036} __const_udelay(4295000);
    goto corral_source_split_12958;

  corral_source_split_12958:
    assume {:verifier.code 0} true;
    goto $bb546;

  $bb546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4037} __const_udelay(4295000);
    goto corral_source_split_12960;

  corral_source_split_12960:
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4038} __const_udelay(4295000);
    goto corral_source_split_12962;

  corral_source_split_12962:
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4039} __const_udelay(4295000);
    goto corral_source_split_12964;

  corral_source_split_12964:
    assume {:verifier.code 0} true;
    goto $bb549;

  $bb549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4040} __const_udelay(4295000);
    goto corral_source_split_12966;

  corral_source_split_12966:
    assume {:verifier.code 0} true;
    goto $bb550;

  $bb550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4041} __const_udelay(4295000);
    goto corral_source_split_12968;

  corral_source_split_12968:
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4042} __const_udelay(4295000);
    goto corral_source_split_12970;

  corral_source_split_12970:
    assume {:verifier.code 0} true;
    goto $bb552;

  $bb552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4043} __const_udelay(4295000);
    goto corral_source_split_12972;

  corral_source_split_12972:
    assume {:verifier.code 0} true;
    goto $bb553;

  $bb553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4044} __const_udelay(4295000);
    goto corral_source_split_12974;

  corral_source_split_12974:
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4045} __const_udelay(4295000);
    goto corral_source_split_12976;

  corral_source_split_12976:
    assume {:verifier.code 0} true;
    goto $bb555;

  $bb555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4046} __const_udelay(4295000);
    goto corral_source_split_12978;

  corral_source_split_12978:
    assume {:verifier.code 0} true;
    goto $bb556;

  $bb556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4047} __const_udelay(4295000);
    goto corral_source_split_12980;

  corral_source_split_12980:
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4048} __const_udelay(4295000);
    goto corral_source_split_12982;

  corral_source_split_12982:
    assume {:verifier.code 0} true;
    goto $bb558;

  $bb558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4049} __const_udelay(4295000);
    goto corral_source_split_12984;

  corral_source_split_12984:
    assume {:verifier.code 0} true;
    goto $bb559;

  $bb559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4050} __const_udelay(4295000);
    goto corral_source_split_12986;

  corral_source_split_12986:
    assume {:verifier.code 0} true;
    goto $bb560;

  $bb560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4051} __const_udelay(4295000);
    goto corral_source_split_12988;

  corral_source_split_12988:
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4052} __const_udelay(4295000);
    goto corral_source_split_12990;

  corral_source_split_12990:
    assume {:verifier.code 0} true;
    goto $bb562;

  $bb562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4053} __const_udelay(4295000);
    goto corral_source_split_12992;

  corral_source_split_12992:
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4054} __const_udelay(4295000);
    goto corral_source_split_12994;

  corral_source_split_12994:
    assume {:verifier.code 0} true;
    goto $bb564;

  $bb564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4055} __const_udelay(4295000);
    goto corral_source_split_12996;

  corral_source_split_12996:
    assume {:verifier.code 0} true;
    goto $bb565;

  $bb565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4056} __const_udelay(4295000);
    goto corral_source_split_12998;

  corral_source_split_12998:
    assume {:verifier.code 0} true;
    goto $bb566;

  $bb566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4057} __const_udelay(4295000);
    goto corral_source_split_13000;

  corral_source_split_13000:
    assume {:verifier.code 0} true;
    goto $bb567;

  $bb567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4058} __const_udelay(4295000);
    goto corral_source_split_13002;

  corral_source_split_13002:
    assume {:verifier.code 0} true;
    goto $bb568;

  $bb568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4059} __const_udelay(4295000);
    goto corral_source_split_13004;

  corral_source_split_13004:
    assume {:verifier.code 0} true;
    goto $bb569;

  $bb569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4060} __const_udelay(4295000);
    goto corral_source_split_13006;

  corral_source_split_13006:
    assume {:verifier.code 0} true;
    goto $bb570;

  $bb570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4061} __const_udelay(4295000);
    goto corral_source_split_13008;

  corral_source_split_13008:
    assume {:verifier.code 0} true;
    goto $bb571;

  $bb571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4062} __const_udelay(4295000);
    goto corral_source_split_13010;

  corral_source_split_13010:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4063} __const_udelay(4295000);
    goto corral_source_split_13012;

  corral_source_split_13012:
    assume {:verifier.code 0} true;
    goto $bb573;

  $bb573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4064} __const_udelay(4295000);
    goto corral_source_split_13014;

  corral_source_split_13014:
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4065} __const_udelay(4295000);
    goto corral_source_split_13016;

  corral_source_split_13016:
    assume {:verifier.code 0} true;
    goto $bb575;

  $bb575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4066} __const_udelay(4295000);
    goto corral_source_split_13018;

  corral_source_split_13018:
    assume {:verifier.code 0} true;
    goto $bb576;

  $bb576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4067} __const_udelay(4295000);
    goto corral_source_split_13020;

  corral_source_split_13020:
    assume {:verifier.code 0} true;
    goto $bb577;

  $bb577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4068} __const_udelay(4295000);
    goto corral_source_split_13022;

  corral_source_split_13022:
    assume {:verifier.code 0} true;
    goto $bb578;

  $bb578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4069} __const_udelay(4295000);
    goto corral_source_split_13024;

  corral_source_split_13024:
    assume {:verifier.code 0} true;
    goto $bb579;

  $bb579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4070} __const_udelay(4295000);
    goto corral_source_split_13026;

  corral_source_split_13026:
    assume {:verifier.code 0} true;
    goto $bb580;

  $bb580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4071} __const_udelay(4295000);
    goto corral_source_split_13028;

  corral_source_split_13028:
    assume {:verifier.code 0} true;
    goto $bb581;

  $bb581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4072} __const_udelay(4295000);
    goto corral_source_split_13030;

  corral_source_split_13030:
    assume {:verifier.code 0} true;
    goto $bb582;

  $bb582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4073} __const_udelay(4295000);
    goto corral_source_split_13032;

  corral_source_split_13032:
    assume {:verifier.code 0} true;
    goto $bb583;

  $bb583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4074} __const_udelay(4295000);
    goto corral_source_split_13034;

  corral_source_split_13034:
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4075} __const_udelay(4295000);
    goto corral_source_split_13036;

  corral_source_split_13036:
    assume {:verifier.code 0} true;
    goto $bb585;

  $bb585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4076} __const_udelay(4295000);
    goto corral_source_split_13038;

  corral_source_split_13038:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4077} __const_udelay(4295000);
    goto corral_source_split_13040;

  corral_source_split_13040:
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4078} __const_udelay(4295000);
    goto corral_source_split_13042;

  corral_source_split_13042:
    assume {:verifier.code 0} true;
    goto $bb588;

  $bb588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4079} __const_udelay(4295000);
    goto corral_source_split_13044;

  corral_source_split_13044:
    assume {:verifier.code 0} true;
    goto $bb589;

  $bb589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4080} __const_udelay(4295000);
    goto corral_source_split_13046;

  corral_source_split_13046:
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4081} __const_udelay(4295000);
    goto corral_source_split_13048;

  corral_source_split_13048:
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4082} __const_udelay(4295000);
    goto corral_source_split_13050;

  corral_source_split_13050:
    assume {:verifier.code 0} true;
    goto $bb592;

  $bb592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4083} __const_udelay(4295000);
    goto corral_source_split_13052;

  corral_source_split_13052:
    assume {:verifier.code 0} true;
    goto $bb593;

  $bb593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4084} __const_udelay(4295000);
    goto corral_source_split_13054;

  corral_source_split_13054:
    assume {:verifier.code 0} true;
    goto $bb594;

  $bb594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4085} __const_udelay(4295000);
    goto corral_source_split_13056;

  corral_source_split_13056:
    assume {:verifier.code 0} true;
    goto $bb595;

  $bb595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4086} __const_udelay(4295000);
    goto corral_source_split_13058;

  corral_source_split_13058:
    assume {:verifier.code 0} true;
    goto $bb596;

  $bb596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4087} __const_udelay(4295000);
    goto corral_source_split_13060;

  corral_source_split_13060:
    assume {:verifier.code 0} true;
    goto $bb597;

  $bb597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4088} __const_udelay(4295000);
    goto corral_source_split_13062;

  corral_source_split_13062:
    assume {:verifier.code 0} true;
    goto $bb598;

  $bb598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4089} __const_udelay(4295000);
    goto corral_source_split_13064;

  corral_source_split_13064:
    assume {:verifier.code 0} true;
    goto $bb599;

  $bb599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4090} __const_udelay(4295000);
    goto corral_source_split_13066;

  corral_source_split_13066:
    assume {:verifier.code 0} true;
    goto $bb600;

  $bb600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4091} __const_udelay(4295000);
    goto corral_source_split_13068;

  corral_source_split_13068:
    assume {:verifier.code 0} true;
    goto $bb601;

  $bb601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4092} __const_udelay(4295000);
    goto corral_source_split_13070;

  corral_source_split_13070:
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4093} __const_udelay(4295000);
    goto corral_source_split_13072;

  corral_source_split_13072:
    assume {:verifier.code 0} true;
    goto $bb603;

  $bb603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4094} __const_udelay(4295000);
    goto corral_source_split_13074;

  corral_source_split_13074:
    assume {:verifier.code 0} true;
    goto $bb604;

  $bb604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4095} __const_udelay(4295000);
    goto corral_source_split_13076;

  corral_source_split_13076:
    assume {:verifier.code 0} true;
    goto $bb605;

  $bb605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4096} __const_udelay(4295000);
    goto corral_source_split_13078;

  corral_source_split_13078:
    assume {:verifier.code 0} true;
    goto $bb606;

  $bb606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4097} __const_udelay(4295000);
    goto corral_source_split_13080;

  corral_source_split_13080:
    assume {:verifier.code 0} true;
    goto $bb607;

  $bb607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4098} __const_udelay(4295000);
    goto corral_source_split_13082;

  corral_source_split_13082:
    assume {:verifier.code 0} true;
    goto $bb608;

  $bb608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4099} __const_udelay(4295000);
    goto corral_source_split_13084;

  corral_source_split_13084:
    assume {:verifier.code 0} true;
    goto $bb609;

  $bb609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4100} __const_udelay(4295000);
    goto corral_source_split_13086;

  corral_source_split_13086:
    assume {:verifier.code 0} true;
    goto $bb610;

  $bb610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4101} __const_udelay(4295000);
    goto corral_source_split_13088;

  corral_source_split_13088:
    assume {:verifier.code 0} true;
    goto $bb611;

  $bb611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4102} __const_udelay(4295000);
    goto corral_source_split_13090;

  corral_source_split_13090:
    assume {:verifier.code 0} true;
    goto $bb612;

  $bb612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4103} __const_udelay(4295000);
    goto corral_source_split_13092;

  corral_source_split_13092:
    assume {:verifier.code 0} true;
    goto $bb613;

  $bb613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4104} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3764} rtl8187se_rf_writereg($p0, 0, 311);
    goto corral_source_split_12385;

  corral_source_split_12385:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3765} __const_udelay(4295000);
    goto corral_source_split_12387;

  corral_source_split_12387:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3766} __const_udelay(4295000);
    goto corral_source_split_12389;

  corral_source_split_12389:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3877} __const_udelay(4295000);
    goto corral_source_split_12642;

  corral_source_split_12642:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3878} __const_udelay(4295000);
    goto corral_source_split_12644;

  corral_source_split_12644:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3879} __const_udelay(4295000);
    goto corral_source_split_12646;

  corral_source_split_12646:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3880} __const_udelay(4295000);
    goto corral_source_split_12648;

  corral_source_split_12648:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3881} __const_udelay(4295000);
    goto corral_source_split_12650;

  corral_source_split_12650:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3882} __const_udelay(4295000);
    goto corral_source_split_12652;

  corral_source_split_12652:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3883} __const_udelay(4295000);
    goto corral_source_split_12654;

  corral_source_split_12654:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3884} __const_udelay(4295000);
    goto corral_source_split_12656;

  corral_source_split_12656:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3885} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3767} rtl8187se_rf_writereg($p0, 7, 0);
    goto corral_source_split_12391;

  corral_source_split_12391:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb254, $bb255;

  $bb255:
    assume !(1 == 1);
    goto corral_source_split_12396;

  corral_source_split_12396:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3770} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3769} rtl8187se_rf_writereg($p0, 7, 384);
    goto corral_source_split_12398;

  corral_source_split_12398:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb260, $bb261;

  $bb261:
    assume !(1 == 1);
    goto corral_source_split_12403;

  corral_source_split_12403:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3773} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3772} rtl8187se_rf_writereg($p0, 7, 544);
    goto corral_source_split_12405;

  corral_source_split_12405:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb266, $bb267;

  $bb267:
    assume !(1 == 1);
    goto corral_source_split_12410;

  corral_source_split_12410:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3776} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3775} rtl8187se_rf_writereg($p0, 7, 992);
    goto corral_source_split_12412;

  corral_source_split_12412:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb272, $bb273;

  $bb273:
    assume !(1 == 1);
    goto corral_source_split_12417;

  corral_source_split_12417:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3779} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3778} rtl8187se_rf_writereg($p0, 6, 193);
    goto corral_source_split_12419;

  corral_source_split_12419:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb278, $bb279;

  $bb279:
    assume !(1 == 1);
    goto corral_source_split_12424;

  corral_source_split_12424:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3782} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3781} rtl8187se_rf_writereg($p0, 10, 1);
    goto corral_source_split_12426;

  corral_source_split_12426:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb284, $bb285;

  $bb285:
    assume !(1 == 1);
    goto corral_source_split_12431;

  corral_source_split_12431:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3784} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2180, 1));
    goto corral_source_split_12433;

  corral_source_split_12433:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_12434;

  corral_source_split_12434:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_12435;

  corral_source_split_12435:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_12436;

  corral_source_split_12436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  $bb291:
    assume !($i20 == 1);
    goto corral_source_split_12460;

  corral_source_split_12460:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_12461;

  corral_source_split_12461:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_12462;

  corral_source_split_12462:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 1776)), $mul.ref(264, 1));
    goto corral_source_split_12463;

  corral_source_split_12463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3788} _dev_info.ref.ref($p41, .str.7);
    goto corral_source_split_12464;

  corral_source_split_12464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3789} rtl8187se_rf_writereg($p0, 15, 2764);
    goto corral_source_split_12465;

  corral_source_split_12465:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb299, $bb300;

  $bb300:
    assume !(1 == 1);
    goto corral_source_split_12477;

  corral_source_split_12477:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3794} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3792} rtl8187se_rf_writereg($p0, 0, 191);
    goto corral_source_split_12472;

  corral_source_split_12472:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb305, $bb306;

  $bb306:
    assume !(1 == 1);
    goto corral_source_split_12482;

  corral_source_split_12482:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3797} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3796} rtl8187se_rf_writereg($p0, 13, 2271);
    goto corral_source_split_12484;

  corral_source_split_12484:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb311, $bb312;

  $bb312:
    assume !(1 == 1);
    goto corral_source_split_12489;

  corral_source_split_12489:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3800} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3799} rtl8187se_rf_writereg($p0, 2, 77);
    goto corral_source_split_12491;

  corral_source_split_12491:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb317, $bb318;

  $bb318:
    assume !(1 == 1);
    goto corral_source_split_12496;

  corral_source_split_12496:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3803} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3802} rtl8187se_rf_writereg($p0, 4, 2421);
    goto corral_source_split_12498;

  corral_source_split_12498:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3804} __const_udelay(4295000);
    goto corral_source_split_12500;

  corral_source_split_12500:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3805} __const_udelay(4295000);
    goto corral_source_split_12502;

  corral_source_split_12502:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3848} __const_udelay(4295000);
    goto corral_source_split_12586;

  corral_source_split_12586:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3849} __const_udelay(4295000);
    goto corral_source_split_12588;

  corral_source_split_12588:
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3850} __const_udelay(4295000);
    goto corral_source_split_12590;

  corral_source_split_12590:
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3851} __const_udelay(4295000);
    goto corral_source_split_12592;

  corral_source_split_12592:
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3852} __const_udelay(4295000);
    goto corral_source_split_12594;

  corral_source_split_12594:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3853} __const_udelay(4295000);
    goto corral_source_split_12596;

  corral_source_split_12596:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3854} __const_udelay(4295000);
    goto corral_source_split_12598;

  corral_source_split_12598:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3855} __const_udelay(4295000);
    goto corral_source_split_12600;

  corral_source_split_12600:
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3856} __const_udelay(4295000);
    goto corral_source_split_12602;

  corral_source_split_12602:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3857} __const_udelay(4295000);
    goto corral_source_split_12604;

  corral_source_split_12604:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3858} __const_udelay(4295000);
    goto corral_source_split_12606;

  corral_source_split_12606:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3859} __const_udelay(4295000);
    goto corral_source_split_12608;

  corral_source_split_12608:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3860} __const_udelay(4295000);
    goto corral_source_split_12610;

  corral_source_split_12610:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3861} __const_udelay(4295000);
    goto corral_source_split_12612;

  corral_source_split_12612:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3862} __const_udelay(4295000);
    goto corral_source_split_12614;

  corral_source_split_12614:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3863} __const_udelay(4295000);
    goto corral_source_split_12616;

  corral_source_split_12616:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3864} __const_udelay(4295000);
    goto corral_source_split_12618;

  corral_source_split_12618:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3865} __const_udelay(4295000);
    goto corral_source_split_12620;

  corral_source_split_12620:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3866} __const_udelay(4295000);
    goto corral_source_split_12622;

  corral_source_split_12622:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3867} __const_udelay(4295000);
    goto corral_source_split_12624;

  corral_source_split_12624:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3868} __const_udelay(4295000);
    goto corral_source_split_12626;

  corral_source_split_12626:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3869} __const_udelay(4295000);
    goto corral_source_split_12628;

  corral_source_split_12628:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3870} __const_udelay(4295000);
    goto corral_source_split_12630;

  corral_source_split_12630:
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3871} __const_udelay(4295000);
    goto corral_source_split_12632;

  corral_source_split_12632:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3872} __const_udelay(4295000);
    goto corral_source_split_12634;

  corral_source_split_12634:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3873} __const_udelay(4295000);
    goto corral_source_split_12636;

  corral_source_split_12636:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3874} __const_udelay(4295000);
    goto corral_source_split_12638;

  corral_source_split_12638:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3875} __const_udelay(4295000);
    goto corral_source_split_12640;

  corral_source_split_12640:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3876} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3806} rtl8187se_rf_writereg($p0, 0, 407);
    goto corral_source_split_12504;

  corral_source_split_12504:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb327, $bb328;

  $bb328:
    assume !(1 == 1);
    goto corral_source_split_12509;

  corral_source_split_12509:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3809} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3808} rtl8187se_rf_writereg($p0, 5, 1451);
    goto corral_source_split_12511;

  corral_source_split_12511:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb333, $bb334;

  $bb334:
    assume !(1 == 1);
    goto corral_source_split_12516;

  corral_source_split_12516:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3812} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3811} rtl8187se_rf_writereg($p0, 0, 159);
    goto corral_source_split_12518;

  corral_source_split_12518:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb339, $bb340;

  $bb340:
    assume !(1 == 1);
    goto corral_source_split_12523;

  corral_source_split_12523:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3815} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3814} rtl8187se_rf_writereg($p0, 1, 0);
    goto corral_source_split_12525;

  corral_source_split_12525:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb345, $bb346;

  $bb346:
    assume !(1 == 1);
    goto corral_source_split_12530;

  corral_source_split_12530:
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3818} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3817} rtl8187se_rf_writereg($p0, 2, 0);
    goto corral_source_split_12532;

  corral_source_split_12532:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb351, $bb352;

  $bb352:
    assume !(1 == 1);
    goto corral_source_split_12537;

  corral_source_split_12537:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3847} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_12539;

  corral_source_split_12539:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_12540;

  corral_source_split_12540:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_12541;

  corral_source_split_12541:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p44, $mul.ref(590, 1));
    goto corral_source_split_12542;

  corral_source_split_12542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3820} $i46 := rtl818x_ioread8($p3, $p45);
    call {:si_unique_call 3821} {:cexpr "tmp___60"} boogie_si_record_i8($i46);
    goto corral_source_split_12543;

  corral_source_split_12543:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_12544;

  corral_source_split_12544:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_12545;

  corral_source_split_12545:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_12546;

  corral_source_split_12546:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p49, $mul.ref(590, 1));
    goto corral_source_split_12547;

  corral_source_split_12547:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i46);
    goto corral_source_split_12548;

  corral_source_split_12548:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 159);
    goto corral_source_split_12549;

  corral_source_split_12549:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_12550;

  corral_source_split_12550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3822} rtl818x_iowrite8($p3, $p50, $i53);
    goto corral_source_split_12551;

  corral_source_split_12551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3823} rtl8225_write_phy_cck($p0, 0, $sub.i8(0, 56));
    goto corral_source_split_12552;

  corral_source_split_12552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3824} rtl8225_write_phy_cck($p0, 6, 28);
    goto corral_source_split_12553;

  corral_source_split_12553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3825} rtl8225_write_phy_cck($p0, 16, 120);
    goto corral_source_split_12554;

  corral_source_split_12554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3826} rtl8225_write_phy_cck($p0, 46, $sub.i8(0, 48));
    goto corral_source_split_12555;

  corral_source_split_12555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3827} rtl8225_write_phy_cck($p0, 47, 6);
    goto corral_source_split_12556;

  corral_source_split_12556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3828} rtl8225_write_phy_cck($p0, 1, 70);
    goto corral_source_split_12557;

  corral_source_split_12557:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_12558;

  corral_source_split_12558:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_12559;

  corral_source_split_12559:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 256)), $mul.ref(157, 1));
    goto corral_source_split_12560;

  corral_source_split_12560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3829} rtl818x_iowrite8($p3, $p56, 16);
    goto corral_source_split_12561;

  corral_source_split_12561:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_12562;

  corral_source_split_12562:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_12563;

  corral_source_split_12563:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 256)), $mul.ref(158, 1));
    goto corral_source_split_12564;

  corral_source_split_12564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3830} rtl818x_iowrite8($p3, $p59, 27);
    goto corral_source_split_12565;

  corral_source_split_12565:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_12566;

  corral_source_split_12566:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_12567;

  corral_source_split_12567:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 256)), $mul.ref(159, 1));
    goto corral_source_split_12568;

  corral_source_split_12568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3831} rtl818x_iowrite8($p3, $p62, 3);
    goto corral_source_split_12569;

  corral_source_split_12569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3832} rtl8225_write_phy_ofdm($p0, 0, 18);
    goto corral_source_split_12570;

  corral_source_split_12570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3833} rtl8225se_write_zebra_agc($p0);
    goto corral_source_split_12571;

  corral_source_split_12571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3834} rtl8225_write_phy_ofdm($p0, 16, 0);
    goto corral_source_split_12572;

  corral_source_split_12572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3835} rtl8187se_write_ofdm_config($p0);
    goto corral_source_split_12573;

  corral_source_split_12573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3836} rtl8187se_rf_writereg($p0, 0, 159);
    goto corral_source_split_12574;

  corral_source_split_12574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3837} __const_udelay(2147500);
    goto corral_source_split_12575;

  corral_source_split_12575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3838} rtl8187se_rf_writereg($p0, 4, 2418);
    goto corral_source_split_12576;

  corral_source_split_12576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3839} __const_udelay(2147500);
    goto corral_source_split_12577;

  corral_source_split_12577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3840} rtl8187se_rf_writereg($p0, 0, 159);
    goto corral_source_split_12578;

  corral_source_split_12578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3841} __const_udelay(2147500);
    goto corral_source_split_12579;

  corral_source_split_12579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3842} rtl8187se_rf_writereg($p0, 4, 2418);
    goto corral_source_split_12580;

  corral_source_split_12580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3843} __const_udelay(2147500);
    goto corral_source_split_12581;

  corral_source_split_12581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3844} rtl8225_write_phy_ofdm($p0, 16, 64);
    goto corral_source_split_12582;

  corral_source_split_12582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3845} rtl8225_write_phy_ofdm($p0, 18, 64);
    goto corral_source_split_12583;

  corral_source_split_12583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3846} rtl8187se_write_initial_gain($p0, 4);
    goto corral_source_split_12584;

  corral_source_split_12584:
    assume {:verifier.code 0} true;
    return;

  $bb351:
    assume 1 == 1;
    goto corral_source_split_12534;

  corral_source_split_12534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3819} __const_udelay(4295000);
    goto corral_source_split_12535;

  corral_source_split_12535:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb345:
    assume 1 == 1;
    goto corral_source_split_12527;

  corral_source_split_12527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3816} __const_udelay(4295000);
    goto corral_source_split_12528;

  corral_source_split_12528:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb339:
    assume 1 == 1;
    goto corral_source_split_12520;

  corral_source_split_12520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3813} __const_udelay(4295000);
    goto corral_source_split_12521;

  corral_source_split_12521:
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb333:
    assume 1 == 1;
    goto corral_source_split_12513;

  corral_source_split_12513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3810} __const_udelay(4295000);
    goto corral_source_split_12514;

  corral_source_split_12514:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb327:
    assume 1 == 1;
    goto corral_source_split_12506;

  corral_source_split_12506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3807} __const_udelay(4295000);
    goto corral_source_split_12507;

  corral_source_split_12507:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb317:
    assume 1 == 1;
    goto corral_source_split_12493;

  corral_source_split_12493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3801} __const_udelay(4295000);
    goto corral_source_split_12494;

  corral_source_split_12494:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb311:
    assume 1 == 1;
    goto corral_source_split_12486;

  corral_source_split_12486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3798} __const_udelay(4295000);
    goto corral_source_split_12487;

  corral_source_split_12487:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb305:
    assume 1 == 1;
    goto corral_source_split_12479;

  corral_source_split_12479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3795} __const_udelay(4295000);
    goto corral_source_split_12480;

  corral_source_split_12480:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb299:
    assume 1 == 1;
    goto corral_source_split_12474;

  corral_source_split_12474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3793} __const_udelay(4295000);
    goto corral_source_split_12475;

  corral_source_split_12475:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb290:
    assume $i20 == 1;
    goto corral_source_split_12438;

  corral_source_split_12438:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2179, 1));
    goto corral_source_split_12439;

  corral_source_split_12439:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_12440;

  corral_source_split_12440:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_12441;

  corral_source_split_12441:
    assume {:verifier.code 0} true;
    $i24 := $shl.i32($i23, 4);
    goto corral_source_split_12442;

  corral_source_split_12442:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_12443;

  corral_source_split_12443:
    assume {:verifier.code 0} true;
    $i26 := $sext.i8.i32($i25);
    goto corral_source_split_12444;

  corral_source_split_12444:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 2192)), $mul.ref(2178, 1));
    goto corral_source_split_12445;

  corral_source_split_12445:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_12446;

  corral_source_split_12446:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_12447;

  corral_source_split_12447:
    assume {:verifier.code 0} true;
    $i30 := $shl.i32($i29, 1);
    goto corral_source_split_12448;

  corral_source_split_12448:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    goto corral_source_split_12449;

  corral_source_split_12449:
    assume {:verifier.code 0} true;
    $i32 := $sext.i8.i32($i31);
    goto corral_source_split_12450;

  corral_source_split_12450:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i26, $i32);
    goto corral_source_split_12451;

  corral_source_split_12451:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    call {:si_unique_call 3785} {:cexpr "tmp"} boogie_si_record_i8($i34);
    goto corral_source_split_12452;

  corral_source_split_12452:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_12453;

  corral_source_split_12453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3786} rtl8187se_rf_writereg($p0, 15, $i35);
    goto corral_source_split_12454;

  corral_source_split_12454:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_12455;

  corral_source_split_12455:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_12456;

  corral_source_split_12456:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 1776)), $mul.ref(264, 1));
    goto corral_source_split_12457;

  corral_source_split_12457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3787} _dev_info.ref.ref($p38, .str.6);
    goto corral_source_split_12458;

  corral_source_split_12458:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb292, $bb293;

  $bb293:
    assume !(1 == 1);
    goto corral_source_split_12470;

  corral_source_split_12470:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3791} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb292:
    assume 1 == 1;
    goto corral_source_split_12467;

  corral_source_split_12467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3790} __const_udelay(4295000);
    goto corral_source_split_12468;

  corral_source_split_12468:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb284:
    assume 1 == 1;
    goto corral_source_split_12428;

  corral_source_split_12428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3783} __const_udelay(4295000);
    goto corral_source_split_12429;

  corral_source_split_12429:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb278:
    assume 1 == 1;
    goto corral_source_split_12421;

  corral_source_split_12421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3780} __const_udelay(4295000);
    goto corral_source_split_12422;

  corral_source_split_12422:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb272:
    assume 1 == 1;
    goto corral_source_split_12414;

  corral_source_split_12414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3777} __const_udelay(4295000);
    goto corral_source_split_12415;

  corral_source_split_12415:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb266:
    assume 1 == 1;
    goto corral_source_split_12407;

  corral_source_split_12407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3774} __const_udelay(4295000);
    goto corral_source_split_12408;

  corral_source_split_12408:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb260:
    assume 1 == 1;
    goto corral_source_split_12400;

  corral_source_split_12400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3771} __const_udelay(4295000);
    goto corral_source_split_12401;

  corral_source_split_12401:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb254:
    assume 1 == 1;
    goto corral_source_split_12393;

  corral_source_split_12393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3768} __const_udelay(4295000);
    goto corral_source_split_12394;

  corral_source_split_12394:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb220:
    assume 1 == 1;
    goto corral_source_split_12344;

  corral_source_split_12344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3744} __const_udelay(4295000);
    goto corral_source_split_12345;

  corral_source_split_12345:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb214:
    assume 1 == 1;
    goto corral_source_split_12337;

  corral_source_split_12337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3741} __const_udelay(4295000);
    goto corral_source_split_12338;

  corral_source_split_12338:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb208:
    assume 1 == 1;
    goto corral_source_split_12329;

  corral_source_split_12329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3737} __const_udelay(4295000);
    goto corral_source_split_12330;

  corral_source_split_12330:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb202:
    assume 1 == 1;
    goto corral_source_split_12322;

  corral_source_split_12322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3734} __const_udelay(4295000);
    goto corral_source_split_12323;

  corral_source_split_12323:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb196:
    assume 1 == 1;
    goto corral_source_split_12315;

  corral_source_split_12315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3731} __const_udelay(4295000);
    goto corral_source_split_12316;

  corral_source_split_12316:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb190:
    assume 1 == 1;
    goto corral_source_split_12308;

  corral_source_split_12308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3728} __const_udelay(4295000);
    goto corral_source_split_12309;

  corral_source_split_12309:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb184:
    assume 1 == 1;
    goto corral_source_split_12301;

  corral_source_split_12301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3725} __const_udelay(4295000);
    goto corral_source_split_12302;

  corral_source_split_12302:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb181:
    assume $i16 == 1;
    goto corral_source_split_12296;

  corral_source_split_12296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3723} rtl8187se_rf_writereg($p0, 14, 2055);
    goto corral_source_split_12297;

  corral_source_split_12297:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb175:
    assume 1 == 1;
    goto corral_source_split_12288;

  corral_source_split_12288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3721} __const_udelay(4295000);
    goto corral_source_split_12289;

  corral_source_split_12289:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb169:
    assume 1 == 1;
    goto corral_source_split_12281;

  corral_source_split_12281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3718} __const_udelay(4295000);
    goto corral_source_split_12282;

  corral_source_split_12282:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb163:
    assume 1 == 1;
    goto corral_source_split_12274;

  corral_source_split_12274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3715} __const_udelay(4295000);
    goto corral_source_split_12275;

  corral_source_split_12275:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb157:
    assume 1 == 1;
    goto corral_source_split_12267;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3712} __const_udelay(4295000);
    goto corral_source_split_12268;

  corral_source_split_12268:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb151:
    assume 1 == 1;
    goto corral_source_split_12260;

  corral_source_split_12260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3709} __const_udelay(4295000);
    goto corral_source_split_12261;

  corral_source_split_12261:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb145:
    assume 1 == 1;
    goto corral_source_split_12253;

  corral_source_split_12253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3706} __const_udelay(4295000);
    goto corral_source_split_12254;

  corral_source_split_12254:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb139:
    assume 1 == 1;
    goto corral_source_split_12246;

  corral_source_split_12246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3703} __const_udelay(4295000);
    goto corral_source_split_12247;

  corral_source_split_12247:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb133:
    assume 1 == 1;
    goto corral_source_split_12239;

  corral_source_split_12239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3700} __const_udelay(4295000);
    goto corral_source_split_12240;

  corral_source_split_12240:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb127:
    assume 1 == 1;
    goto corral_source_split_12232;

  corral_source_split_12232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3697} __const_udelay(4295000);
    goto corral_source_split_12233;

  corral_source_split_12233:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb121:
    assume 1 == 1;
    goto corral_source_split_12225;

  corral_source_split_12225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3694} __const_udelay(4295000);
    goto corral_source_split_12226;

  corral_source_split_12226:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb115:
    assume 1 == 1;
    goto corral_source_split_12218;

  corral_source_split_12218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3691} __const_udelay(4295000);
    goto corral_source_split_12219;

  corral_source_split_12219:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb109:
    assume 1 == 1;
    goto corral_source_split_12211;

  corral_source_split_12211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3688} __const_udelay(4295000);
    goto corral_source_split_12212;

  corral_source_split_12212:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb103:
    assume 1 == 1;
    goto corral_source_split_12204;

  corral_source_split_12204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3685} __const_udelay(4295000);
    goto corral_source_split_12205;

  corral_source_split_12205:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb97:
    assume 1 == 1;
    goto corral_source_split_12197;

  corral_source_split_12197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3682} __const_udelay(4295000);
    goto corral_source_split_12198;

  corral_source_split_12198:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb91:
    assume 1 == 1;
    goto corral_source_split_12190;

  corral_source_split_12190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3679} __const_udelay(4295000);
    goto corral_source_split_12191;

  corral_source_split_12191:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb85:
    assume 1 == 1;
    goto corral_source_split_12183;

  corral_source_split_12183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3676} __const_udelay(4295000);
    goto corral_source_split_12184;

  corral_source_split_12184:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb79:
    assume 1 == 1;
    goto corral_source_split_12176;

  corral_source_split_12176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3673} __const_udelay(4295000);
    goto corral_source_split_12177;

  corral_source_split_12177:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb73:
    assume 1 == 1;
    goto corral_source_split_12169;

  corral_source_split_12169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3670} __const_udelay(4295000);
    goto corral_source_split_12170;

  corral_source_split_12170:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb67:
    assume 1 == 1;
    goto corral_source_split_12162;

  corral_source_split_12162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3667} __const_udelay(4295000);
    goto corral_source_split_12163;

  corral_source_split_12163:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb61:
    assume 1 == 1;
    goto corral_source_split_12155;

  corral_source_split_12155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3664} __const_udelay(4295000);
    goto corral_source_split_12156;

  corral_source_split_12156:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb55:
    assume 1 == 1;
    goto corral_source_split_12148;

  corral_source_split_12148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3661} __const_udelay(4295000);
    goto corral_source_split_12149;

  corral_source_split_12149:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb49:
    assume 1 == 1;
    goto corral_source_split_12141;

  corral_source_split_12141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3658} __const_udelay(4295000);
    goto corral_source_split_12142;

  corral_source_split_12142:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb43:
    assume 1 == 1;
    goto corral_source_split_12134;

  corral_source_split_12134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3655} __const_udelay(4295000);
    goto corral_source_split_12135;

  corral_source_split_12135:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb37:
    assume 1 == 1;
    goto corral_source_split_12127;

  corral_source_split_12127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3652} __const_udelay(4295000);
    goto corral_source_split_12128;

  corral_source_split_12128:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb31:
    assume 1 == 1;
    goto corral_source_split_12120;

  corral_source_split_12120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3649} __const_udelay(4295000);
    goto corral_source_split_12121;

  corral_source_split_12121:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb25:
    assume 1 == 1;
    goto corral_source_split_12113;

  corral_source_split_12113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3646} __const_udelay(4295000);
    goto corral_source_split_12114;

  corral_source_split_12114:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume $i6 == 1;
    goto corral_source_split_12098;

  corral_source_split_12098:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i5, 1804);
    goto corral_source_split_12099;

  corral_source_split_12099:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb21;

  $bb22:
    assume $i7 == 1;
    goto corral_source_split_12101;

  corral_source_split_12101:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb24;

  $bb13:
    assume 1 == 1;
    goto corral_source_split_12091;

  corral_source_split_12091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3642} __const_udelay(4295000);
    goto corral_source_split_12092;

  corral_source_split_12092:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume 1 == 1;
    goto corral_source_split_12084;

  corral_source_split_12084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3638} __const_udelay(4295000);
    goto corral_source_split_12085;

  corral_source_split_12085:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume 1 == 1;
    goto corral_source_split_12077;

  corral_source_split_12077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3634} __const_udelay(4295000);
    goto corral_source_split_12078;

  corral_source_split_12078:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rtl8225se_rf_stop: ref;

axiom rtl8225se_rf_stop == $sub.ref(0, 407258);

procedure rtl8225se_rf_stop($p0: ref);
  free requires assertsPassed;
  modifies $M.51, $CurrAddr;



implementation rtl8225se_rf_stop($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13174;

  corral_source_split_13174:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_13175;

  corral_source_split_13175:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_13176;

  corral_source_split_13176:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_13177;

  corral_source_split_13177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4150} rtl8225_write_phy_ofdm($p0, 16, 0);
    goto corral_source_split_13178;

  corral_source_split_13178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4151} rtl8225_write_phy_ofdm($p0, 18, 0);
    goto corral_source_split_13179;

  corral_source_split_13179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4152} rtl8187se_rf_writereg($p0, 4, 0);
    goto corral_source_split_13180;

  corral_source_split_13180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4153} rtl8187se_rf_writereg($p0, 0, 0);
    goto corral_source_split_13181;

  corral_source_split_13181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4154} usleep_range(1000, 5000);
    goto corral_source_split_13182;

  corral_source_split_13182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4155} rtl8180_set_anaparam($p3, $sub.i32(0, 1341829652));
    goto corral_source_split_13183;

  corral_source_split_13183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4156} rtl8180_set_anaparam2($p3, 16712902);
    goto corral_source_split_13184;

  corral_source_split_13184:
    assume {:verifier.code 0} true;
    return;
}



const rtl8225se_rf_set_channel: ref;

axiom rtl8225se_rf_set_channel == $sub.ref(0, 408290);

procedure rtl8225se_rf_set_channel($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.51, $CurrAddr;



implementation rtl8225se_rf_set_channel($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13186;

  corral_source_split_13186:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_13187;

  corral_source_split_13187:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_13188;

  corral_source_split_13188:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_13189;

  corral_source_split_13189:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_13190;

  corral_source_split_13190:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_13191;

  corral_source_split_13191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4157} $i8 := ieee80211_frequency_to_channel($i7);
    call {:si_unique_call 4158} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_13192;

  corral_source_split_13192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4159} rtl8225sez2_rf_set_tx_power($p0, $i8);
    goto corral_source_split_13193;

  corral_source_split_13193:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, $sub.i32(0, 1));
    goto corral_source_split_13194;

  corral_source_split_13194:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_13195;

  corral_source_split_13195:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref(rtl8225se_chan, $mul.ref(0, 56)), $mul.ref($i10, 4));
    goto corral_source_split_13196;

  corral_source_split_13196:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.49, $p11);
    goto corral_source_split_13197;

  corral_source_split_13197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4160} rtl8187se_rf_writereg($p0, 7, $i12);
    goto corral_source_split_13198;

  corral_source_split_13198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4161} $i13 := rtl8187se_rf_readreg($p0, 7);
    call {:si_unique_call 4162} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_13199;

  corral_source_split_13199:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 3968);
    goto corral_source_split_13200;

  corral_source_split_13200:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i8, $sub.i32(0, 1));
    goto corral_source_split_13201;

  corral_source_split_13201:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_13202;

  corral_source_split_13202:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(rtl8225se_chan, $mul.ref(0, 56)), $mul.ref($i16, 4));
    goto corral_source_split_13203;

  corral_source_split_13203:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.49, $p17);
    goto corral_source_split_13204;

  corral_source_split_13204:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i14, $i18);
    goto corral_source_split_13205;

  corral_source_split_13205:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4164} usleep_range(10000, 20000);
    goto corral_source_split_13214;

  corral_source_split_13214:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_13207;

  corral_source_split_13207:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i8, $sub.i32(0, 1));
    goto corral_source_split_13208;

  corral_source_split_13208:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_13209;

  corral_source_split_13209:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref(rtl8225se_chan, $mul.ref(0, 56)), $mul.ref($i21, 4));
    goto corral_source_split_13210;

  corral_source_split_13210:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.49, $p22);
    goto corral_source_split_13211;

  corral_source_split_13211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4163} rtl8187se_rf_writereg($p0, 7, $i23);
    goto corral_source_split_13212;

  corral_source_split_13212:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rtl8225sez2_rf_set_tx_power: ref;

axiom rtl8225sez2_rf_set_tx_power == $sub.ref(0, 409322);

procedure rtl8225sez2_rf_set_tx_power($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation rtl8225sez2_rf_set_tx_power($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i64;
  var $p9: ref;
  var $i10: i16;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i8;
  var $i24: i32;
  var $i25: i64;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i32;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $i35: i8;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4165} {:cexpr "rtl8225sez2_rf_set_tx_power:arg:channel"} boogie_si_record_i32($i1);
    goto corral_source_split_13216;

  corral_source_split_13216:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_13217;

  corral_source_split_13217:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_13218;

  corral_source_split_13218:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_13219;

  corral_source_split_13219:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_13220;

  corral_source_split_13220:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_13221;

  corral_source_split_13221:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref($i6, 64)), $mul.ref(6, 1));
    goto corral_source_split_13222;

  corral_source_split_13222:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_13223;

  corral_source_split_13223:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i16.i8($i10);
    call {:si_unique_call 4166} {:cexpr "cck_power"} boogie_si_record_i8($i11);
    goto corral_source_split_13224;

  corral_source_split_13224:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_13225;

  corral_source_split_13225:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, 35);
    goto corral_source_split_13226;

  corral_source_split_13226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13230;

  corral_source_split_13230:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_13231;

  corral_source_split_13231:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_13232;

  corral_source_split_13232:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 256)), $mul.ref(157, 1));
    goto corral_source_split_13233;

  corral_source_split_13233:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i14);
    goto corral_source_split_13234;

  corral_source_split_13234:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_13235;

  corral_source_split_13235:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref($i19, 1));
    goto corral_source_split_13236;

  corral_source_split_13236:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.50, $p20);
    goto corral_source_split_13237;

  corral_source_split_13237:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_13238;

  corral_source_split_13238:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_13239;

  corral_source_split_13239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4167} rtl818x_iowrite8($p4, $p17, $i23);
    goto corral_source_split_13240;

  corral_source_split_13240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4168} usleep_range(1000, 5000);
    goto corral_source_split_13241;

  corral_source_split_13241:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_13242;

  corral_source_split_13242:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_13243;

  corral_source_split_13243:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(992, 1)), $mul.ref($i25, 64)), $mul.ref(6, 1));
    goto corral_source_split_13244;

  corral_source_split_13244:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p28);
    goto corral_source_split_13245;

  corral_source_split_13245:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_13246;

  corral_source_split_13246:
    assume {:verifier.code 0} true;
    $i31 := $ashr.i32($i30, 8);
    goto corral_source_split_13247;

  corral_source_split_13247:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    call {:si_unique_call 4169} {:cexpr "ofdm_power"} boogie_si_record_i8($i32);
    goto corral_source_split_13248;

  corral_source_split_13248:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_13249;

  corral_source_split_13249:
    assume {:verifier.code 0} true;
    $i34 := $ugt.i32($i33, 35);
    goto corral_source_split_13250;

  corral_source_split_13250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $i32;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_13254;

  corral_source_split_13254:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_13255;

  corral_source_split_13255:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_13256;

  corral_source_split_13256:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 256)), $mul.ref(158, 1));
    goto corral_source_split_13257;

  corral_source_split_13257:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i35);
    goto corral_source_split_13258;

  corral_source_split_13258:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_13259;

  corral_source_split_13259:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref($i40, 1));
    goto corral_source_split_13260;

  corral_source_split_13260:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.50, $p41);
    goto corral_source_split_13261;

  corral_source_split_13261:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_13262;

  corral_source_split_13262:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    goto corral_source_split_13263;

  corral_source_split_13263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4170} rtl818x_iowrite8($p4, $p38, $i44);
    goto corral_source_split_13264;

  corral_source_split_13264:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i35);
    goto corral_source_split_13265;

  corral_source_split_13265:
    assume {:verifier.code 0} true;
    $i46 := $ule.i32($i45, 11);
    goto corral_source_split_13266;

  corral_source_split_13266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i35);
    goto corral_source_split_13272;

  corral_source_split_13272:
    assume {:verifier.code 0} true;
    $i48 := $ule.i32($i47, 17);
    goto corral_source_split_13273;

  corral_source_split_13273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i48 == 1);
    goto corral_source_split_13279;

  corral_source_split_13279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4175} rtl8225_write_phy_ofdm($p0, 7, 80);
    goto corral_source_split_13280;

  corral_source_split_13280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4176} rtl8225_write_phy_ofdm($p0, 9, 80);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4177} usleep_range(1000, 5000);
    goto corral_source_split_13282;

  corral_source_split_13282:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i48 == 1;
    goto corral_source_split_13275;

  corral_source_split_13275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4173} rtl8225_write_phy_ofdm($p0, 7, 84);
    goto corral_source_split_13276;

  corral_source_split_13276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4174} rtl8225_write_phy_ofdm($p0, 9, 84);
    goto corral_source_split_13277;

  corral_source_split_13277:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i46 == 1;
    goto corral_source_split_13268;

  corral_source_split_13268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4171} rtl8225_write_phy_ofdm($p0, 7, 92);
    goto corral_source_split_13269;

  corral_source_split_13269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4172} rtl8225_write_phy_ofdm($p0, 9, 92);
    goto corral_source_split_13270;

  corral_source_split_13270:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i34 == 1;
    goto corral_source_split_13252;

  corral_source_split_13252:
    assume {:verifier.code 0} true;
    $i35 := 35;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_13228;

  corral_source_split_13228:
    assume {:verifier.code 0} true;
    $i14 := 35;
    goto $bb3;
}



const rtl8187se_rf_writereg: ref;

axiom rtl8187se_rf_writereg == $sub.ref(0, 410354);

procedure rtl8187se_rf_writereg($p0: ref, $i1: i8, $i2: i32);
  free requires assertsPassed;
  modifies $M.51, $CurrAddr;



implementation rtl8187se_rf_writereg($p0: ref, $i1: i8, $i2: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 4178} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 4179} {:cexpr "rtl8187se_rf_writereg:arg:addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 4180} {:cexpr "rtl8187se_rf_writereg:arg:data"} boogie_si_record_i32($i2);
    goto corral_source_split_13284;

  corral_source_split_13284:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i2, 4);
    goto corral_source_split_13285;

  corral_source_split_13285:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i1);
    goto corral_source_split_13286;

  corral_source_split_13286:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 15);
    goto corral_source_split_13287;

  corral_source_split_13287:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i4, $i6);
    goto corral_source_split_13288;

  corral_source_split_13288:
    assume {:verifier.code 0} true;
    $M.51 := $store.i32($M.51, $p3, $i7);
    goto corral_source_split_13289;

  corral_source_split_13289:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p3);
    goto corral_source_split_13290;

  corral_source_split_13290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4181} rtl8187se_three_wire_io($p0, $p8, 16, 1);
    goto corral_source_split_13291;

  corral_source_split_13291:
    assume {:verifier.code 0} true;
    return;
}



const rtl8187se_rf_readreg: ref;

axiom rtl8187se_rf_readreg == $sub.ref(0, 411386);

procedure rtl8187se_rf_readreg($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.51, $CurrAddr;



implementation rtl8187se_rf_readreg($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 4182} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 4183} {:cexpr "rtl8187se_rf_readreg:arg:addr"} boogie_si_record_i8($i1);
    goto corral_source_split_13293;

  corral_source_split_13293:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i1);
    goto corral_source_split_13294;

  corral_source_split_13294:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 15);
    goto corral_source_split_13295;

  corral_source_split_13295:
    assume {:verifier.code 0} true;
    $M.51 := $store.i32($M.51, $p2, $i4);
    goto corral_source_split_13296;

  corral_source_split_13296:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_13297;

  corral_source_split_13297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4184} rtl8187se_three_wire_io($p0, $p5, 16, 0);
    goto corral_source_split_13298;

  corral_source_split_13298:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.51, $p2);
    goto corral_source_split_13299;

  corral_source_split_13299:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usleep_range: ref;

axiom usleep_range == $sub.ref(0, 412418);

procedure usleep_range($i0: i64, $i1: i64);
  free requires assertsPassed;



implementation usleep_range($i0: i64, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4185} {:cexpr "usleep_range:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 4186} {:cexpr "usleep_range:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_13301;

  corral_source_split_13301:
    assume {:verifier.code 0} true;
    return;
}



const rtl8187se_three_wire_io: ref;

axiom rtl8187se_three_wire_io == $sub.ref(0, 413450);

procedure rtl8187se_three_wire_io($p0: ref, $p1: ref, $i2: i8, $i3: i1);
  free requires assertsPassed;
  modifies $M.51;



implementation rtl8187se_three_wire_io($p0: ref, $p1: ref, $i2: i8, $i3: i1)
{
  var $i4: i8;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i8;
  var $i18: i32;
  var $i19: i8;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i8;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i8;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i8;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i8;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i16;
  var $i65: i32;
  var $i66: i16;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i16;
  var $i91: i32;
  var $i92: i16;
  var $i93: i1;
  var $i94: i8;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i8;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i8;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i1;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i16;
  var $p119: ref;
  var $p120: ref;
  var $i121: i16;
  var $i122: i32;
  var $i123: i32;
  var $i124: i16;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i8;
  var $i131: i32;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i8;
  var $i139: i32;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i8;
  var $i147: i32;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $i154: i8;
  var $i155: i32;
  var $i156: i32;
  var $i157: i1;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i8;
  var $i163: i32;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $i170: i8;
  var $i171: i32;
  var $i172: i32;
  var $i173: i1;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $i178: i8;
  var $i179: i32;
  var $i180: i32;
  var $i181: i1;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $i20: i8;
  var $i186: i32;
  var $i187: i32;
  var $i188: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4187} {:cexpr "rtl8187se_three_wire_io:arg:len"} boogie_si_record_i8($i2);
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 4188} {:cexpr "rtl8187se_three_wire_io:arg:write"} boogie_si_record_i1($i3);
    goto corral_source_split_13303;

  corral_source_split_13303:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_13304;

  corral_source_split_13304:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_13305;

  corral_source_split_13305:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_13306;

  corral_source_split_13306:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_13308;

  corral_source_split_13308:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_13309;

  corral_source_split_13309:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_13310;

  corral_source_split_13310:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(637, 1));
    goto corral_source_split_13311;

  corral_source_split_13311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4189} $i12 := rtl818x_ioread8($p7, $p11);
    call {:si_unique_call 4190} {:cexpr "tmp"} boogie_si_record_i8($i12);
    goto corral_source_split_13312;

  corral_source_split_13312:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_13313;

  corral_source_split_13313:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 3);
    goto corral_source_split_13314;

  corral_source_split_13314:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_13315;

  corral_source_split_13315:
    assume {:verifier.code 0} true;
    $i16, $i17 := 0, $i12;
    assume {:branchcond $i15} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4191} __const_udelay(42950);
    goto corral_source_split_13322;

  corral_source_split_13322:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_13324;

  corral_source_split_13324:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.0, $p158);
    goto corral_source_split_13325;

  corral_source_split_13325:
    assume {:verifier.code 0} true;
    $p160 := $bitcast.ref.ref($p159);
    goto corral_source_split_13326;

  corral_source_split_13326:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($p160, $mul.ref(637, 1));
    goto corral_source_split_13327;

  corral_source_split_13327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4192} $i162 := rtl818x_ioread8($p7, $p161);
    goto corral_source_split_13328;

  corral_source_split_13328:
    assume {:verifier.code 0} true;
    $i163 := $zext.i8.i32($i162);
    goto corral_source_split_13329;

  corral_source_split_13329:
    assume {:verifier.code 0} true;
    $i164 := $and.i32($i163, 3);
    goto corral_source_split_13330;

  corral_source_split_13330:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, 0);
    goto corral_source_split_13331;

  corral_source_split_13331:
    assume {:verifier.code 0} true;
    $i16, $i17 := 1, $i162;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4221} __const_udelay(42950);
    goto corral_source_split_13514;

  corral_source_split_13514:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_13516;

  corral_source_split_13516:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.0, $p166);
    goto corral_source_split_13517;

  corral_source_split_13517:
    assume {:verifier.code 0} true;
    $p168 := $bitcast.ref.ref($p167);
    goto corral_source_split_13518;

  corral_source_split_13518:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($p168, $mul.ref(637, 1));
    goto corral_source_split_13519;

  corral_source_split_13519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4222} $i170 := rtl818x_ioread8($p7, $p169);
    goto corral_source_split_13520;

  corral_source_split_13520:
    assume {:verifier.code 0} true;
    $i171 := $zext.i8.i32($i170);
    goto corral_source_split_13521;

  corral_source_split_13521:
    assume {:verifier.code 0} true;
    $i172 := $and.i32($i171, 3);
    goto corral_source_split_13522;

  corral_source_split_13522:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 0);
    goto corral_source_split_13523;

  corral_source_split_13523:
    assume {:verifier.code 0} true;
    $i16, $i17 := 2, $i170;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4223} __const_udelay(42950);
    goto corral_source_split_13525;

  corral_source_split_13525:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_13527;

  corral_source_split_13527:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.0, $p174);
    goto corral_source_split_13528;

  corral_source_split_13528:
    assume {:verifier.code 0} true;
    $p176 := $bitcast.ref.ref($p175);
    goto corral_source_split_13529;

  corral_source_split_13529:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($p176, $mul.ref(637, 1));
    goto corral_source_split_13530;

  corral_source_split_13530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4224} $i178 := rtl818x_ioread8($p7, $p177);
    goto corral_source_split_13531;

  corral_source_split_13531:
    assume {:verifier.code 0} true;
    $i179 := $zext.i8.i32($i178);
    goto corral_source_split_13532;

  corral_source_split_13532:
    assume {:verifier.code 0} true;
    $i180 := $and.i32($i179, 3);
    goto corral_source_split_13533;

  corral_source_split_13533:
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i180, 0);
    goto corral_source_split_13534;

  corral_source_split_13534:
    assume {:verifier.code 0} true;
    $i16, $i17 := 3, $i178;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4225} __const_udelay(42950);
    goto corral_source_split_13536;

  corral_source_split_13536:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_13538;

  corral_source_split_13538:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_13539;

  corral_source_split_13539:
    assume {:verifier.code 0} true;
    $p184 := $bitcast.ref.ref($p183);
    goto corral_source_split_13540;

  corral_source_split_13540:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($p184, $mul.ref(637, 1));
    goto corral_source_split_13541;

  corral_source_split_13541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4226} $i20 := rtl818x_ioread8($p7, $p185);
    goto corral_source_split_13542;

  corral_source_split_13542:
    assume {:verifier.code 0} true;
    $i186 := $zext.i8.i32($i20);
    goto corral_source_split_13543;

  corral_source_split_13543:
    assume {:verifier.code 0} true;
    $i187 := $and.i32($i186, 3);
    goto corral_source_split_13544;

  corral_source_split_13544:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 0);
    goto corral_source_split_13545;

  corral_source_split_13545:
    assume {:verifier.code 0} true;
    $i16, $i17 := 4, $i20;
    assume {:branchcond $i188} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4227} __const_udelay(42950);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i18, $i19 := 5, $i20;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_13319;

  corral_source_split_13319:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i18, 5);
    goto corral_source_split_13320;

  corral_source_split_13320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_13340;

  corral_source_split_13340:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_13341;

  corral_source_split_13341:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 256)), $mul.ref(8, 1));
    goto corral_source_split_13342;

  corral_source_split_13342:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_13343;

  corral_source_split_13343:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_13344;

  corral_source_split_13344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4194} $i31 := rtl818x_ioread8($p7, $p30);
    call {:si_unique_call 4195} {:cexpr "tmp___0"} boogie_si_record_i8($i31);
    goto corral_source_split_13345;

  corral_source_split_13345:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_13346;

  corral_source_split_13346:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i32, 2);
    goto corral_source_split_13347;

  corral_source_split_13347:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    call {:si_unique_call 4196} {:cexpr "tmp"} boogie_si_record_i8($i34);
    goto corral_source_split_13348;

  corral_source_split_13348:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_13349;

  corral_source_split_13349:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_13350;

  corral_source_split_13350:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 256)), $mul.ref(8, 1));
    goto corral_source_split_13351;

  corral_source_split_13351:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_13352;

  corral_source_split_13352:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_13353;

  corral_source_split_13353:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i34);
    goto corral_source_split_13354;

  corral_source_split_13354:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_13355;

  corral_source_split_13355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4197} rtl818x_iowrite8($p7, $p39, $i41);
    goto corral_source_split_13356;

  corral_source_split_13356:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_13357;

  corral_source_split_13357:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_13358;

  corral_source_split_13358:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_13359;

  corral_source_split_13359:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p44, $mul.ref(132, 1));
    goto corral_source_split_13360;

  corral_source_split_13360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4198} $i46 := rtl818x_ioread8($p7, $p45);
    call {:si_unique_call 4199} {:cexpr "tmp___1"} boogie_si_record_i8($i46);
    goto corral_source_split_13361;

  corral_source_split_13361:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_13362;

  corral_source_split_13362:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 247);
    goto corral_source_split_13363;

  corral_source_split_13363:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    call {:si_unique_call 4200} {:cexpr "tmp"} boogie_si_record_i8($i49);
    goto corral_source_split_13364;

  corral_source_split_13364:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_13365;

  corral_source_split_13365:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_13366;

  corral_source_split_13366:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_13367;

  corral_source_split_13367:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p52, $mul.ref(132, 1));
    goto corral_source_split_13368;

  corral_source_split_13368:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i49);
    goto corral_source_split_13369;

  corral_source_split_13369:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i8($i54);
    goto corral_source_split_13370;

  corral_source_split_13370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4201} rtl818x_iowrite8($p7, $p53, $i55);
    goto corral_source_split_13371;

  corral_source_split_13371:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i8.i1($i4);
    goto corral_source_split_13372;

  corral_source_split_13372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i56 == 1);
    goto corral_source_split_13378;

  corral_source_split_13378:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_13379;

  corral_source_split_13379:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_13380;

  corral_source_split_13380:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_13381;

  corral_source_split_13381:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p87, $mul.ref(314, 2));
    goto corral_source_split_13382;

  corral_source_split_13382:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p1);
    goto corral_source_split_13383;

  corral_source_split_13383:
    assume {:verifier.code 0} true;
    $i90 := $load.i16($M.51, $p89);
    goto corral_source_split_13384;

  corral_source_split_13384:
    assume {:verifier.code 0} true;
    $i91 := $zext.i16.i32($i90);
    goto corral_source_split_13385;

  corral_source_split_13385:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i32.i16($i91);
    goto corral_source_split_13386;

  corral_source_split_13386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4202} rtl818x_iowrite16($p7, $p88, $i92);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i8.i1($i4);
    goto corral_source_split_13425;

  corral_source_split_13425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94 := 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_13429;

  corral_source_split_13429:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_13430;

  corral_source_split_13430:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_13431;

  corral_source_split_13431:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_13432;

  corral_source_split_13432:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($p97, $mul.ref(637, 1));
    goto corral_source_split_13433;

  corral_source_split_13433:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i94);
    goto corral_source_split_13434;

  corral_source_split_13434:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i32.i8($i99);
    goto corral_source_split_13435;

  corral_source_split_13435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4207} rtl818x_iowrite8($p7, $p98, $i100);
    goto corral_source_split_13436;

  corral_source_split_13436:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_13438;

  corral_source_split_13438:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_13439;

  corral_source_split_13439:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_13440;

  corral_source_split_13440:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($p103, $mul.ref(637, 1));
    goto corral_source_split_13441;

  corral_source_split_13441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4208} $i105 := rtl818x_ioread8($p7, $p104);
    call {:si_unique_call 4209} {:cexpr "tmp"} boogie_si_record_i8($i105);
    goto corral_source_split_13442;

  corral_source_split_13442:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i105);
    goto corral_source_split_13443;

  corral_source_split_13443:
    assume {:verifier.code 0} true;
    $i107 := $and.i32($i106, 3);
    goto corral_source_split_13444;

  corral_source_split_13444:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 0);
    goto corral_source_split_13445;

  corral_source_split_13445:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb27, $bb29;

  $bb29:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4211} __const_udelay(42950);
    goto corral_source_split_13454;

  corral_source_split_13454:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_13456;

  corral_source_split_13456:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_13457;

  corral_source_split_13457:
    assume {:verifier.code 0} true;
    $p128 := $bitcast.ref.ref($p127);
    goto corral_source_split_13458;

  corral_source_split_13458:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($p128, $mul.ref(637, 1));
    goto corral_source_split_13459;

  corral_source_split_13459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4212} $i130 := rtl818x_ioread8($p7, $p129);
    goto corral_source_split_13460;

  corral_source_split_13460:
    assume {:verifier.code 0} true;
    $i131 := $zext.i8.i32($i130);
    goto corral_source_split_13461;

  corral_source_split_13461:
    assume {:verifier.code 0} true;
    $i132 := $and.i32($i131, 3);
    goto corral_source_split_13462;

  corral_source_split_13462:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i132, 0);
    goto corral_source_split_13463;

  corral_source_split_13463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4214} __const_udelay(42950);
    goto corral_source_split_13481;

  corral_source_split_13481:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_13483;

  corral_source_split_13483:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_13484;

  corral_source_split_13484:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p135);
    goto corral_source_split_13485;

  corral_source_split_13485:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($p136, $mul.ref(637, 1));
    goto corral_source_split_13486;

  corral_source_split_13486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4215} $i138 := rtl818x_ioread8($p7, $p137);
    goto corral_source_split_13487;

  corral_source_split_13487:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i32($i138);
    goto corral_source_split_13488;

  corral_source_split_13488:
    assume {:verifier.code 0} true;
    $i140 := $and.i32($i139, 3);
    goto corral_source_split_13489;

  corral_source_split_13489:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 0);
    goto corral_source_split_13490;

  corral_source_split_13490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4216} __const_udelay(42950);
    goto corral_source_split_13492;

  corral_source_split_13492:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_13494;

  corral_source_split_13494:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_13495;

  corral_source_split_13495:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p143);
    goto corral_source_split_13496;

  corral_source_split_13496:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($p144, $mul.ref(637, 1));
    goto corral_source_split_13497;

  corral_source_split_13497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4217} $i146 := rtl818x_ioread8($p7, $p145);
    goto corral_source_split_13498;

  corral_source_split_13498:
    assume {:verifier.code 0} true;
    $i147 := $zext.i8.i32($i146);
    goto corral_source_split_13499;

  corral_source_split_13499:
    assume {:verifier.code 0} true;
    $i148 := $and.i32($i147, 3);
    goto corral_source_split_13500;

  corral_source_split_13500:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 0);
    goto corral_source_split_13501;

  corral_source_split_13501:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4218} __const_udelay(42950);
    goto corral_source_split_13503;

  corral_source_split_13503:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_13505;

  corral_source_split_13505:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    goto corral_source_split_13506;

  corral_source_split_13506:
    assume {:verifier.code 0} true;
    $p152 := $bitcast.ref.ref($p151);
    goto corral_source_split_13507;

  corral_source_split_13507:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($p152, $mul.ref(637, 1));
    goto corral_source_split_13508;

  corral_source_split_13508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4219} $i154 := rtl818x_ioread8($p7, $p153);
    goto corral_source_split_13509;

  corral_source_split_13509:
    assume {:verifier.code 0} true;
    $i155 := $zext.i8.i32($i154);
    goto corral_source_split_13510;

  corral_source_split_13510:
    assume {:verifier.code 0} true;
    $i156 := $and.i32($i155, 3);
    goto corral_source_split_13511;

  corral_source_split_13511:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i156, 0);
    goto corral_source_split_13512;

  corral_source_split_13512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4220} __const_udelay(42950);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_13447;

  corral_source_split_13447:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_13448;

  corral_source_split_13448:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_13449;

  corral_source_split_13449:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($p111, $mul.ref(637, 1));
    goto corral_source_split_13450;

  corral_source_split_13450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4210} rtl818x_iowrite8($p7, $p112, 0);
    goto corral_source_split_13451;

  corral_source_split_13451:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i8.i1($i4);
    goto corral_source_split_13452;

  corral_source_split_13452:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i113 == 1);
    goto corral_source_split_13465;

  corral_source_split_13465:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_13466;

  corral_source_split_13466:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_13467;

  corral_source_split_13467:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_13468;

  corral_source_split_13468:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p116, $mul.ref(433, 2));
    goto corral_source_split_13469;

  corral_source_split_13469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4213} $i118 := rtl818x_ioread16($p7, $p117);
    goto corral_source_split_13470;

  corral_source_split_13470:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p1);
    goto corral_source_split_13471;

  corral_source_split_13471:
    assume {:verifier.code 0} true;
    $M.51 := $store.i16($M.51, $p119, $i118);
    goto corral_source_split_13472;

  corral_source_split_13472:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p1);
    goto corral_source_split_13473;

  corral_source_split_13473:
    assume {:verifier.code 0} true;
    $i121 := $load.i16($M.51, $p120);
    goto corral_source_split_13474;

  corral_source_split_13474:
    assume {:verifier.code 0} true;
    $i122 := $zext.i16.i32($i121);
    goto corral_source_split_13475;

  corral_source_split_13475:
    assume {:verifier.code 0} true;
    $i123 := $and.i32($i122, 4095);
    goto corral_source_split_13476;

  corral_source_split_13476:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i32.i16($i123);
    goto corral_source_split_13477;

  corral_source_split_13477:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p1);
    goto corral_source_split_13478;

  corral_source_split_13478:
    assume {:verifier.code 0} true;
    $M.51 := $store.i16($M.51, $p125, $i124);
    goto corral_source_split_13479;

  corral_source_split_13479:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb34:
    assume $i113 == 1;
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i157 == 1;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i149 == 1;
    goto $bb28;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i141 == 1;
    goto $bb28;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i133 == 1;
    goto $bb28;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i108 == 1;
    goto $bb28;

  $bb22:
    assume $i93 == 1;
    goto corral_source_split_13427;

  corral_source_split_13427:
    assume {:verifier.code 0} true;
    $i94 := 2;
    goto $bb24;

  $bb13:
    assume $i56 == 1;
    goto corral_source_split_13374;

  corral_source_split_13374:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i2);
    goto corral_source_split_13375;

  corral_source_split_13375:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 16);
    goto corral_source_split_13376;

  corral_source_split_13376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i58 == 1);
    goto corral_source_split_13399;

  corral_source_split_13399:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i2);
    goto corral_source_split_13400;

  corral_source_split_13400:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 64);
    goto corral_source_split_13401;

  corral_source_split_13401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i68 == 1);
    goto corral_source_split_13420;

  corral_source_split_13420:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_13421;

  corral_source_split_13421:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_13422;

  corral_source_split_13422:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 1776)), $mul.ref(264, 1));
    goto corral_source_split_13423;

  corral_source_split_13423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4206} dev_err.ref.ref($p84, .str.48);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i68 == 1;
    goto corral_source_split_13403;

  corral_source_split_13403:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_13404;

  corral_source_split_13404:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_13405;

  corral_source_split_13405:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_13406;

  corral_source_split_13406:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p71, $mul.ref(157, 4));
    goto corral_source_split_13407;

  corral_source_split_13407:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p1);
    goto corral_source_split_13408;

  corral_source_split_13408:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.51, $p73);
    goto corral_source_split_13409;

  corral_source_split_13409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4204} rtl818x_iowrite32($p7, $p72, $i74);
    goto corral_source_split_13410;

  corral_source_split_13410:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_13411;

  corral_source_split_13411:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_13412;

  corral_source_split_13412:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_13413;

  corral_source_split_13413:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p77, $mul.ref(158, 4));
    goto corral_source_split_13414;

  corral_source_split_13414:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p1);
    goto corral_source_split_13415;

  corral_source_split_13415:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p79, $mul.ref(4, 4));
    goto corral_source_split_13416;

  corral_source_split_13416:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.51, $p80);
    goto corral_source_split_13417;

  corral_source_split_13417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4205} rtl818x_iowrite32($p7, $p78, $i81);
    goto corral_source_split_13418;

  corral_source_split_13418:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i58 == 1;
    goto corral_source_split_13388;

  corral_source_split_13388:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p7, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_13389;

  corral_source_split_13389:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_13390;

  corral_source_split_13390:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_13391;

  corral_source_split_13391:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(314, 2));
    goto corral_source_split_13392;

  corral_source_split_13392:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p1);
    goto corral_source_split_13393;

  corral_source_split_13393:
    assume {:verifier.code 0} true;
    $i64 := $load.i16($M.51, $p63);
    goto corral_source_split_13394;

  corral_source_split_13394:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i64);
    goto corral_source_split_13395;

  corral_source_split_13395:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i16($i65);
    goto corral_source_split_13396;

  corral_source_split_13396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4203} rtl818x_iowrite16($p7, $p62, $i66);
    goto corral_source_split_13397;

  corral_source_split_13397:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_13333;

  corral_source_split_13333:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_13334;

  corral_source_split_13334:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_13335;

  corral_source_split_13335:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 1776)), $mul.ref(264, 1));
    goto corral_source_split_13336;

  corral_source_split_13336:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i19);
    goto corral_source_split_13337;

  corral_source_split_13337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4193} dev_err.ref.ref.i32($p24, .str.47, $i25);
    goto corral_source_split_13338;

  corral_source_split_13338:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i188 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_13317;

  corral_source_split_13317:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i16, $i17;
    goto $bb6;

  $bb60:
    assume {:verifier.code 0} true;
    assume $i181 == 1;
    goto $bb4;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i173 == 1;
    goto $bb4;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i165 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb4;
}



const rtl8187se_write_rf_gain: ref;

axiom rtl8187se_write_rf_gain == $sub.ref(0, 414482);

procedure rtl8187se_write_rf_gain($p0: ref);
  free requires assertsPassed;
  modifies $M.51, $CurrAddr;



implementation rtl8187se_write_rf_gain($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13547;

  corral_source_split_13547:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4228} rtl8187se_rf_writereg($p0, 1, 0);
    goto corral_source_split_13549;

  corral_source_split_13549:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb3, $bb4;

  $bb4:
    assume !(1 == 1);
    goto corral_source_split_13554;

  corral_source_split_13554:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4231} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4230} rtl8187se_rf_writereg($p0, 2, 150);
    goto corral_source_split_13556;

  corral_source_split_13556:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb9, $bb10;

  $bb10:
    assume !(1 == 1);
    goto corral_source_split_13561;

  corral_source_split_13561:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4233} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4234} rtl8187se_rf_writereg($p0, 1, 1);
    goto corral_source_split_13563;

  corral_source_split_13563:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb17, $bb18;

  $bb18:
    assume !(1 == 1);
    goto corral_source_split_13568;

  corral_source_split_13568:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4236} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4237} rtl8187se_rf_writereg($p0, 2, 118);
    goto corral_source_split_13570;

  corral_source_split_13570:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb23, $bb24;

  $bb24:
    assume !(1 == 1);
    goto corral_source_split_13575;

  corral_source_split_13575:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4239} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4240} rtl8187se_rf_writereg($p0, 1, 2);
    goto corral_source_split_13577;

  corral_source_split_13577:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb30, $bb31;

  $bb31:
    assume !(1 == 1);
    goto corral_source_split_13582;

  corral_source_split_13582:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4242} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4243} rtl8187se_rf_writereg($p0, 2, 86);
    goto corral_source_split_13584;

  corral_source_split_13584:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb36, $bb37;

  $bb37:
    assume !(1 == 1);
    goto corral_source_split_13589;

  corral_source_split_13589:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4245} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4246} rtl8187se_rf_writereg($p0, 1, 3);
    goto corral_source_split_13591;

  corral_source_split_13591:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb43, $bb44;

  $bb44:
    assume !(1 == 1);
    goto corral_source_split_13596;

  corral_source_split_13596:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4248} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4249} rtl8187se_rf_writereg($p0, 2, 54);
    goto corral_source_split_13598;

  corral_source_split_13598:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb49, $bb50;

  $bb50:
    assume !(1 == 1);
    goto corral_source_split_13603;

  corral_source_split_13603:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4251} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4252} rtl8187se_rf_writereg($p0, 1, 4);
    goto corral_source_split_13605;

  corral_source_split_13605:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb56, $bb57;

  $bb57:
    assume !(1 == 1);
    goto corral_source_split_13610;

  corral_source_split_13610:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4254} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4255} rtl8187se_rf_writereg($p0, 2, 22);
    goto corral_source_split_13612;

  corral_source_split_13612:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb62, $bb63;

  $bb63:
    assume !(1 == 1);
    goto corral_source_split_13617;

  corral_source_split_13617:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4257} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4258} rtl8187se_rf_writereg($p0, 1, 5);
    goto corral_source_split_13619;

  corral_source_split_13619:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb69, $bb70;

  $bb70:
    assume !(1 == 1);
    goto corral_source_split_13624;

  corral_source_split_13624:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4260} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4261} rtl8187se_rf_writereg($p0, 2, 502);
    goto corral_source_split_13626;

  corral_source_split_13626:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb75, $bb76;

  $bb76:
    assume !(1 == 1);
    goto corral_source_split_13631;

  corral_source_split_13631:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4263} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4264} rtl8187se_rf_writereg($p0, 1, 6);
    goto corral_source_split_13633;

  corral_source_split_13633:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb82, $bb83;

  $bb83:
    assume !(1 == 1);
    goto corral_source_split_13638;

  corral_source_split_13638:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4266} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4267} rtl8187se_rf_writereg($p0, 2, 470);
    goto corral_source_split_13640;

  corral_source_split_13640:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb88, $bb89;

  $bb89:
    assume !(1 == 1);
    goto corral_source_split_13645;

  corral_source_split_13645:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4269} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4270} rtl8187se_rf_writereg($p0, 1, 7);
    goto corral_source_split_13647;

  corral_source_split_13647:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb95, $bb96;

  $bb96:
    assume !(1 == 1);
    goto corral_source_split_13652;

  corral_source_split_13652:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4272} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4273} rtl8187se_rf_writereg($p0, 2, 438);
    goto corral_source_split_13654;

  corral_source_split_13654:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb101, $bb102;

  $bb102:
    assume !(1 == 1);
    goto corral_source_split_13659;

  corral_source_split_13659:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4275} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4276} rtl8187se_rf_writereg($p0, 1, 8);
    goto corral_source_split_13661;

  corral_source_split_13661:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb108, $bb109;

  $bb109:
    assume !(1 == 1);
    goto corral_source_split_13666;

  corral_source_split_13666:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4278} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4279} rtl8187se_rf_writereg($p0, 2, 406);
    goto corral_source_split_13668;

  corral_source_split_13668:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb114, $bb115;

  $bb115:
    assume !(1 == 1);
    goto corral_source_split_13673;

  corral_source_split_13673:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4281} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4282} rtl8187se_rf_writereg($p0, 1, 9);
    goto corral_source_split_13675;

  corral_source_split_13675:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb121, $bb122;

  $bb122:
    assume !(1 == 1);
    goto corral_source_split_13680;

  corral_source_split_13680:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4284} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4285} rtl8187se_rf_writereg($p0, 2, 374);
    goto corral_source_split_13682;

  corral_source_split_13682:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb127, $bb128;

  $bb128:
    assume !(1 == 1);
    goto corral_source_split_13687;

  corral_source_split_13687:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4287} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4288} rtl8187se_rf_writereg($p0, 1, 10);
    goto corral_source_split_13689;

  corral_source_split_13689:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb134, $bb135;

  $bb135:
    assume !(1 == 1);
    goto corral_source_split_13694;

  corral_source_split_13694:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4290} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4291} rtl8187se_rf_writereg($p0, 2, 247);
    goto corral_source_split_13696;

  corral_source_split_13696:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb140, $bb141;

  $bb141:
    assume !(1 == 1);
    goto corral_source_split_13701;

  corral_source_split_13701:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4293} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4294} rtl8187se_rf_writereg($p0, 1, 11);
    goto corral_source_split_13703;

  corral_source_split_13703:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb147, $bb148;

  $bb148:
    assume !(1 == 1);
    goto corral_source_split_13708;

  corral_source_split_13708:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4296} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4297} rtl8187se_rf_writereg($p0, 2, 215);
    goto corral_source_split_13710;

  corral_source_split_13710:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb153, $bb154;

  $bb154:
    assume !(1 == 1);
    goto corral_source_split_13715;

  corral_source_split_13715:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4299} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4300} rtl8187se_rf_writereg($p0, 1, 12);
    goto corral_source_split_13717;

  corral_source_split_13717:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb160, $bb161;

  $bb161:
    assume !(1 == 1);
    goto corral_source_split_13722;

  corral_source_split_13722:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4302} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4303} rtl8187se_rf_writereg($p0, 2, 183);
    goto corral_source_split_13724;

  corral_source_split_13724:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb166, $bb167;

  $bb167:
    assume !(1 == 1);
    goto corral_source_split_13729;

  corral_source_split_13729:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4305} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4306} rtl8187se_rf_writereg($p0, 1, 13);
    goto corral_source_split_13731;

  corral_source_split_13731:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb173, $bb174;

  $bb174:
    assume !(1 == 1);
    goto corral_source_split_13736;

  corral_source_split_13736:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4308} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4309} rtl8187se_rf_writereg($p0, 2, 151);
    goto corral_source_split_13738;

  corral_source_split_13738:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb179, $bb180;

  $bb180:
    assume !(1 == 1);
    goto corral_source_split_13743;

  corral_source_split_13743:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4311} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4312} rtl8187se_rf_writereg($p0, 1, 14);
    goto corral_source_split_13745;

  corral_source_split_13745:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb186, $bb187;

  $bb187:
    assume !(1 == 1);
    goto corral_source_split_13750;

  corral_source_split_13750:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4314} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4315} rtl8187se_rf_writereg($p0, 2, 119);
    goto corral_source_split_13752;

  corral_source_split_13752:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb192, $bb193;

  $bb193:
    assume !(1 == 1);
    goto corral_source_split_13757;

  corral_source_split_13757:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4317} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4318} rtl8187se_rf_writereg($p0, 1, 15);
    goto corral_source_split_13759;

  corral_source_split_13759:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb199, $bb200;

  $bb200:
    assume !(1 == 1);
    goto corral_source_split_13764;

  corral_source_split_13764:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4320} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4321} rtl8187se_rf_writereg($p0, 2, 87);
    goto corral_source_split_13766;

  corral_source_split_13766:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb205, $bb206;

  $bb206:
    assume !(1 == 1);
    goto corral_source_split_13771;

  corral_source_split_13771:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4323} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4324} rtl8187se_rf_writereg($p0, 1, 16);
    goto corral_source_split_13773;

  corral_source_split_13773:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb212, $bb213;

  $bb213:
    assume !(1 == 1);
    goto corral_source_split_13778;

  corral_source_split_13778:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4326} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4327} rtl8187se_rf_writereg($p0, 2, 55);
    goto corral_source_split_13780;

  corral_source_split_13780:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb218, $bb219;

  $bb219:
    assume !(1 == 1);
    goto corral_source_split_13785;

  corral_source_split_13785:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4329} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4330} rtl8187se_rf_writereg($p0, 1, 17);
    goto corral_source_split_13787;

  corral_source_split_13787:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb225, $bb226;

  $bb226:
    assume !(1 == 1);
    goto corral_source_split_13792;

  corral_source_split_13792:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4332} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4333} rtl8187se_rf_writereg($p0, 2, 251);
    goto corral_source_split_13794;

  corral_source_split_13794:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb231, $bb232;

  $bb232:
    assume !(1 == 1);
    goto corral_source_split_13799;

  corral_source_split_13799:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4335} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4336} rtl8187se_rf_writereg($p0, 1, 18);
    goto corral_source_split_13801;

  corral_source_split_13801:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb238, $bb239;

  $bb239:
    assume !(1 == 1);
    goto corral_source_split_13806;

  corral_source_split_13806:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4338} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4339} rtl8187se_rf_writereg($p0, 2, 219);
    goto corral_source_split_13808;

  corral_source_split_13808:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb244, $bb245;

  $bb245:
    assume !(1 == 1);
    goto corral_source_split_13813;

  corral_source_split_13813:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4341} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4342} rtl8187se_rf_writereg($p0, 1, 19);
    goto corral_source_split_13815;

  corral_source_split_13815:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb251, $bb252;

  $bb252:
    assume !(1 == 1);
    goto corral_source_split_13820;

  corral_source_split_13820:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4344} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4345} rtl8187se_rf_writereg($p0, 2, 187);
    goto corral_source_split_13822;

  corral_source_split_13822:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb257, $bb258;

  $bb258:
    assume !(1 == 1);
    goto corral_source_split_13827;

  corral_source_split_13827:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4347} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4348} rtl8187se_rf_writereg($p0, 1, 20);
    goto corral_source_split_13829;

  corral_source_split_13829:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb264, $bb265;

  $bb265:
    assume !(1 == 1);
    goto corral_source_split_13834;

  corral_source_split_13834:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4350} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4351} rtl8187se_rf_writereg($p0, 2, 255);
    goto corral_source_split_13836;

  corral_source_split_13836:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb270, $bb271;

  $bb271:
    assume !(1 == 1);
    goto corral_source_split_13841;

  corral_source_split_13841:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4353} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4354} rtl8187se_rf_writereg($p0, 1, 21);
    goto corral_source_split_13843;

  corral_source_split_13843:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb277, $bb278;

  $bb278:
    assume !(1 == 1);
    goto corral_source_split_13848;

  corral_source_split_13848:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4356} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4357} rtl8187se_rf_writereg($p0, 2, 227);
    goto corral_source_split_13850;

  corral_source_split_13850:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb283, $bb284;

  $bb284:
    assume !(1 == 1);
    goto corral_source_split_13855;

  corral_source_split_13855:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4359} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4360} rtl8187se_rf_writereg($p0, 1, 22);
    goto corral_source_split_13857;

  corral_source_split_13857:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb290, $bb291;

  $bb291:
    assume !(1 == 1);
    goto corral_source_split_13862;

  corral_source_split_13862:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4362} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4363} rtl8187se_rf_writereg($p0, 2, 195);
    goto corral_source_split_13864;

  corral_source_split_13864:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb296, $bb297;

  $bb297:
    assume !(1 == 1);
    goto corral_source_split_13869;

  corral_source_split_13869:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4365} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4366} rtl8187se_rf_writereg($p0, 1, 23);
    goto corral_source_split_13871;

  corral_source_split_13871:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb303, $bb304;

  $bb304:
    assume !(1 == 1);
    goto corral_source_split_13876;

  corral_source_split_13876:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4368} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4369} rtl8187se_rf_writereg($p0, 2, 163);
    goto corral_source_split_13878;

  corral_source_split_13878:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb309, $bb310;

  $bb310:
    assume !(1 == 1);
    goto corral_source_split_13883;

  corral_source_split_13883:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4371} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4372} rtl8187se_rf_writereg($p0, 1, 24);
    goto corral_source_split_13885;

  corral_source_split_13885:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb316, $bb317;

  $bb317:
    assume !(1 == 1);
    goto corral_source_split_13890;

  corral_source_split_13890:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4374} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4375} rtl8187se_rf_writereg($p0, 2, 131);
    goto corral_source_split_13892;

  corral_source_split_13892:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb322, $bb323;

  $bb323:
    assume !(1 == 1);
    goto corral_source_split_13897;

  corral_source_split_13897:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4377} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4378} rtl8187se_rf_writereg($p0, 1, 25);
    goto corral_source_split_13899;

  corral_source_split_13899:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb329, $bb330;

  $bb330:
    assume !(1 == 1);
    goto corral_source_split_13904;

  corral_source_split_13904:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4380} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4381} rtl8187se_rf_writereg($p0, 2, 99);
    goto corral_source_split_13906;

  corral_source_split_13906:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb335, $bb336;

  $bb336:
    assume !(1 == 1);
    goto corral_source_split_13911;

  corral_source_split_13911:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4383} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4384} rtl8187se_rf_writereg($p0, 1, 26);
    goto corral_source_split_13913;

  corral_source_split_13913:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb342, $bb343;

  $bb343:
    assume !(1 == 1);
    goto corral_source_split_13918;

  corral_source_split_13918:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4386} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4387} rtl8187se_rf_writereg($p0, 2, 67);
    goto corral_source_split_13920;

  corral_source_split_13920:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb348, $bb349;

  $bb349:
    assume !(1 == 1);
    goto corral_source_split_13925;

  corral_source_split_13925:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4389} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4390} rtl8187se_rf_writereg($p0, 1, 27);
    goto corral_source_split_13927;

  corral_source_split_13927:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb355, $bb356;

  $bb356:
    assume !(1 == 1);
    goto corral_source_split_13932;

  corral_source_split_13932:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4392} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4393} rtl8187se_rf_writereg($p0, 2, 35);
    goto corral_source_split_13934;

  corral_source_split_13934:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb361, $bb362;

  $bb362:
    assume !(1 == 1);
    goto corral_source_split_13939;

  corral_source_split_13939:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4395} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4396} rtl8187se_rf_writereg($p0, 1, 28);
    goto corral_source_split_13941;

  corral_source_split_13941:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb368, $bb369;

  $bb369:
    assume !(1 == 1);
    goto corral_source_split_13946;

  corral_source_split_13946:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4398} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4399} rtl8187se_rf_writereg($p0, 2, 3);
    goto corral_source_split_13948;

  corral_source_split_13948:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb374, $bb375;

  $bb375:
    assume !(1 == 1);
    goto corral_source_split_13953;

  corral_source_split_13953:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4401} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4402} rtl8187se_rf_writereg($p0, 1, 29);
    goto corral_source_split_13955;

  corral_source_split_13955:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb381, $bb382;

  $bb382:
    assume !(1 == 1);
    goto corral_source_split_13960;

  corral_source_split_13960:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4404} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4405} rtl8187se_rf_writereg($p0, 2, 483);
    goto corral_source_split_13962;

  corral_source_split_13962:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb387, $bb388;

  $bb388:
    assume !(1 == 1);
    goto corral_source_split_13967;

  corral_source_split_13967:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4407} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4408} rtl8187se_rf_writereg($p0, 1, 30);
    goto corral_source_split_13969;

  corral_source_split_13969:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb394, $bb395;

  $bb395:
    assume !(1 == 1);
    goto corral_source_split_13974;

  corral_source_split_13974:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4410} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4411} rtl8187se_rf_writereg($p0, 2, 451);
    goto corral_source_split_13976;

  corral_source_split_13976:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb400, $bb401;

  $bb401:
    assume !(1 == 1);
    goto corral_source_split_13981;

  corral_source_split_13981:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4413} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4414} rtl8187se_rf_writereg($p0, 1, 31);
    goto corral_source_split_13983;

  corral_source_split_13983:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb407, $bb408;

  $bb408:
    assume !(1 == 1);
    goto corral_source_split_13988;

  corral_source_split_13988:
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb409:
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4416} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4417} rtl8187se_rf_writereg($p0, 2, 419);
    goto corral_source_split_13990;

  corral_source_split_13990:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb413, $bb414;

  $bb414:
    assume !(1 == 1);
    goto corral_source_split_13995;

  corral_source_split_13995:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4419} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4420} rtl8187se_rf_writereg($p0, 1, 32);
    goto corral_source_split_13997;

  corral_source_split_13997:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb420, $bb421;

  $bb421:
    assume !(1 == 1);
    goto corral_source_split_14002;

  corral_source_split_14002:
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4422} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4423} rtl8187se_rf_writereg($p0, 2, 387);
    goto corral_source_split_14004;

  corral_source_split_14004:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb426, $bb427;

  $bb427:
    assume !(1 == 1);
    goto corral_source_split_14009;

  corral_source_split_14009:
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4425} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4426} rtl8187se_rf_writereg($p0, 1, 33);
    goto corral_source_split_14011;

  corral_source_split_14011:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb433, $bb434;

  $bb434:
    assume !(1 == 1);
    goto corral_source_split_14016;

  corral_source_split_14016:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4428} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb437:
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4429} rtl8187se_rf_writereg($p0, 2, 355);
    goto corral_source_split_14018;

  corral_source_split_14018:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb439, $bb440;

  $bb440:
    assume !(1 == 1);
    goto corral_source_split_14023;

  corral_source_split_14023:
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4431} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb444:
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4432} rtl8187se_rf_writereg($p0, 1, 34);
    goto corral_source_split_14025;

  corral_source_split_14025:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb446, $bb447;

  $bb447:
    assume !(1 == 1);
    goto corral_source_split_14030;

  corral_source_split_14030:
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4434} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4435} rtl8187se_rf_writereg($p0, 2, 323);
    goto corral_source_split_14032;

  corral_source_split_14032:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb452, $bb453;

  $bb453:
    assume !(1 == 1);
    goto corral_source_split_14037;

  corral_source_split_14037:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4437} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb456:
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4438} rtl8187se_rf_writereg($p0, 1, 35);
    goto corral_source_split_14039;

  corral_source_split_14039:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb459, $bb460;

  $bb460:
    assume !(1 == 1);
    goto corral_source_split_14044;

  corral_source_split_14044:
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb461:
    assume {:verifier.code 0} true;
    goto $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4440} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb463;

  $bb463:
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4441} rtl8187se_rf_writereg($p0, 2, 291);
    goto corral_source_split_14046;

  corral_source_split_14046:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb465, $bb466;

  $bb466:
    assume !(1 == 1);
    goto corral_source_split_14051;

  corral_source_split_14051:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    goto $bb468;

  $bb468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4443} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb469:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4444} rtl8187se_rf_writereg($p0, 1, 36);
    goto corral_source_split_14053;

  corral_source_split_14053:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb472, $bb473;

  $bb473:
    assume !(1 == 1);
    goto corral_source_split_14058;

  corral_source_split_14058:
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4446} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb476:
    assume {:verifier.code 0} true;
    goto $bb477;

  $bb477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4447} rtl8187se_rf_writereg($p0, 2, 259);
    goto corral_source_split_14060;

  corral_source_split_14060:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb478, $bb479;

  $bb479:
    assume !(1 == 1);
    goto corral_source_split_14065;

  corral_source_split_14065:
    assume {:verifier.code 0} true;
    goto $bb480;

  $bb480:
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4449} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb483:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb478:
    assume 1 == 1;
    goto corral_source_split_14062;

  corral_source_split_14062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4448} __const_udelay(4295000);
    goto corral_source_split_14063;

  corral_source_split_14063:
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb472:
    assume 1 == 1;
    goto corral_source_split_14055;

  corral_source_split_14055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4445} __const_udelay(4295000);
    goto corral_source_split_14056;

  corral_source_split_14056:
    assume {:verifier.code 0} true;
    goto $bb477;

  $bb465:
    assume 1 == 1;
    goto corral_source_split_14048;

  corral_source_split_14048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4442} __const_udelay(4295000);
    goto corral_source_split_14049;

  corral_source_split_14049:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb459:
    assume 1 == 1;
    goto corral_source_split_14041;

  corral_source_split_14041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4439} __const_udelay(4295000);
    goto corral_source_split_14042;

  corral_source_split_14042:
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb452:
    assume 1 == 1;
    goto corral_source_split_14034;

  corral_source_split_14034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4436} __const_udelay(4295000);
    goto corral_source_split_14035;

  corral_source_split_14035:
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb446:
    assume 1 == 1;
    goto corral_source_split_14027;

  corral_source_split_14027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4433} __const_udelay(4295000);
    goto corral_source_split_14028;

  corral_source_split_14028:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb439:
    assume 1 == 1;
    goto corral_source_split_14020;

  corral_source_split_14020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4430} __const_udelay(4295000);
    goto corral_source_split_14021;

  corral_source_split_14021:
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb433:
    assume 1 == 1;
    goto corral_source_split_14013;

  corral_source_split_14013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4427} __const_udelay(4295000);
    goto corral_source_split_14014;

  corral_source_split_14014:
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb426:
    assume 1 == 1;
    goto corral_source_split_14006;

  corral_source_split_14006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4424} __const_udelay(4295000);
    goto corral_source_split_14007;

  corral_source_split_14007:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb420:
    assume 1 == 1;
    goto corral_source_split_13999;

  corral_source_split_13999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4421} __const_udelay(4295000);
    goto corral_source_split_14000;

  corral_source_split_14000:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb413:
    assume 1 == 1;
    goto corral_source_split_13992;

  corral_source_split_13992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4418} __const_udelay(4295000);
    goto corral_source_split_13993;

  corral_source_split_13993:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb407:
    assume 1 == 1;
    goto corral_source_split_13985;

  corral_source_split_13985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4415} __const_udelay(4295000);
    goto corral_source_split_13986;

  corral_source_split_13986:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb400:
    assume 1 == 1;
    goto corral_source_split_13978;

  corral_source_split_13978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4412} __const_udelay(4295000);
    goto corral_source_split_13979;

  corral_source_split_13979:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb394:
    assume 1 == 1;
    goto corral_source_split_13971;

  corral_source_split_13971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4409} __const_udelay(4295000);
    goto corral_source_split_13972;

  corral_source_split_13972:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb387:
    assume 1 == 1;
    goto corral_source_split_13964;

  corral_source_split_13964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4406} __const_udelay(4295000);
    goto corral_source_split_13965;

  corral_source_split_13965:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb381:
    assume 1 == 1;
    goto corral_source_split_13957;

  corral_source_split_13957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4403} __const_udelay(4295000);
    goto corral_source_split_13958;

  corral_source_split_13958:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb374:
    assume 1 == 1;
    goto corral_source_split_13950;

  corral_source_split_13950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4400} __const_udelay(4295000);
    goto corral_source_split_13951;

  corral_source_split_13951:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb368:
    assume 1 == 1;
    goto corral_source_split_13943;

  corral_source_split_13943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4397} __const_udelay(4295000);
    goto corral_source_split_13944;

  corral_source_split_13944:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb361:
    assume 1 == 1;
    goto corral_source_split_13936;

  corral_source_split_13936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4394} __const_udelay(4295000);
    goto corral_source_split_13937;

  corral_source_split_13937:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb355:
    assume 1 == 1;
    goto corral_source_split_13929;

  corral_source_split_13929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4391} __const_udelay(4295000);
    goto corral_source_split_13930;

  corral_source_split_13930:
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb348:
    assume 1 == 1;
    goto corral_source_split_13922;

  corral_source_split_13922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4388} __const_udelay(4295000);
    goto corral_source_split_13923;

  corral_source_split_13923:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb342:
    assume 1 == 1;
    goto corral_source_split_13915;

  corral_source_split_13915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4385} __const_udelay(4295000);
    goto corral_source_split_13916;

  corral_source_split_13916:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb335:
    assume 1 == 1;
    goto corral_source_split_13908;

  corral_source_split_13908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4382} __const_udelay(4295000);
    goto corral_source_split_13909;

  corral_source_split_13909:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb329:
    assume 1 == 1;
    goto corral_source_split_13901;

  corral_source_split_13901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4379} __const_udelay(4295000);
    goto corral_source_split_13902;

  corral_source_split_13902:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb322:
    assume 1 == 1;
    goto corral_source_split_13894;

  corral_source_split_13894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4376} __const_udelay(4295000);
    goto corral_source_split_13895;

  corral_source_split_13895:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb316:
    assume 1 == 1;
    goto corral_source_split_13887;

  corral_source_split_13887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4373} __const_udelay(4295000);
    goto corral_source_split_13888;

  corral_source_split_13888:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb309:
    assume 1 == 1;
    goto corral_source_split_13880;

  corral_source_split_13880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4370} __const_udelay(4295000);
    goto corral_source_split_13881;

  corral_source_split_13881:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb303:
    assume 1 == 1;
    goto corral_source_split_13873;

  corral_source_split_13873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4367} __const_udelay(4295000);
    goto corral_source_split_13874;

  corral_source_split_13874:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb296:
    assume 1 == 1;
    goto corral_source_split_13866;

  corral_source_split_13866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4364} __const_udelay(4295000);
    goto corral_source_split_13867;

  corral_source_split_13867:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb290:
    assume 1 == 1;
    goto corral_source_split_13859;

  corral_source_split_13859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4361} __const_udelay(4295000);
    goto corral_source_split_13860;

  corral_source_split_13860:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb283:
    assume 1 == 1;
    goto corral_source_split_13852;

  corral_source_split_13852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4358} __const_udelay(4295000);
    goto corral_source_split_13853;

  corral_source_split_13853:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb277:
    assume 1 == 1;
    goto corral_source_split_13845;

  corral_source_split_13845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4355} __const_udelay(4295000);
    goto corral_source_split_13846;

  corral_source_split_13846:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb270:
    assume 1 == 1;
    goto corral_source_split_13838;

  corral_source_split_13838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4352} __const_udelay(4295000);
    goto corral_source_split_13839;

  corral_source_split_13839:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb264:
    assume 1 == 1;
    goto corral_source_split_13831;

  corral_source_split_13831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4349} __const_udelay(4295000);
    goto corral_source_split_13832;

  corral_source_split_13832:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb257:
    assume 1 == 1;
    goto corral_source_split_13824;

  corral_source_split_13824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4346} __const_udelay(4295000);
    goto corral_source_split_13825;

  corral_source_split_13825:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb251:
    assume 1 == 1;
    goto corral_source_split_13817;

  corral_source_split_13817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4343} __const_udelay(4295000);
    goto corral_source_split_13818;

  corral_source_split_13818:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb244:
    assume 1 == 1;
    goto corral_source_split_13810;

  corral_source_split_13810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4340} __const_udelay(4295000);
    goto corral_source_split_13811;

  corral_source_split_13811:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb238:
    assume 1 == 1;
    goto corral_source_split_13803;

  corral_source_split_13803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4337} __const_udelay(4295000);
    goto corral_source_split_13804;

  corral_source_split_13804:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb231:
    assume 1 == 1;
    goto corral_source_split_13796;

  corral_source_split_13796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4334} __const_udelay(4295000);
    goto corral_source_split_13797;

  corral_source_split_13797:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb225:
    assume 1 == 1;
    goto corral_source_split_13789;

  corral_source_split_13789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4331} __const_udelay(4295000);
    goto corral_source_split_13790;

  corral_source_split_13790:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb218:
    assume 1 == 1;
    goto corral_source_split_13782;

  corral_source_split_13782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4328} __const_udelay(4295000);
    goto corral_source_split_13783;

  corral_source_split_13783:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb212:
    assume 1 == 1;
    goto corral_source_split_13775;

  corral_source_split_13775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4325} __const_udelay(4295000);
    goto corral_source_split_13776;

  corral_source_split_13776:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb205:
    assume 1 == 1;
    goto corral_source_split_13768;

  corral_source_split_13768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4322} __const_udelay(4295000);
    goto corral_source_split_13769;

  corral_source_split_13769:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb199:
    assume 1 == 1;
    goto corral_source_split_13761;

  corral_source_split_13761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4319} __const_udelay(4295000);
    goto corral_source_split_13762;

  corral_source_split_13762:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb192:
    assume 1 == 1;
    goto corral_source_split_13754;

  corral_source_split_13754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4316} __const_udelay(4295000);
    goto corral_source_split_13755;

  corral_source_split_13755:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb186:
    assume 1 == 1;
    goto corral_source_split_13747;

  corral_source_split_13747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4313} __const_udelay(4295000);
    goto corral_source_split_13748;

  corral_source_split_13748:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb179:
    assume 1 == 1;
    goto corral_source_split_13740;

  corral_source_split_13740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4310} __const_udelay(4295000);
    goto corral_source_split_13741;

  corral_source_split_13741:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb173:
    assume 1 == 1;
    goto corral_source_split_13733;

  corral_source_split_13733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4307} __const_udelay(4295000);
    goto corral_source_split_13734;

  corral_source_split_13734:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb166:
    assume 1 == 1;
    goto corral_source_split_13726;

  corral_source_split_13726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4304} __const_udelay(4295000);
    goto corral_source_split_13727;

  corral_source_split_13727:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb160:
    assume 1 == 1;
    goto corral_source_split_13719;

  corral_source_split_13719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4301} __const_udelay(4295000);
    goto corral_source_split_13720;

  corral_source_split_13720:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb153:
    assume 1 == 1;
    goto corral_source_split_13712;

  corral_source_split_13712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4298} __const_udelay(4295000);
    goto corral_source_split_13713;

  corral_source_split_13713:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb147:
    assume 1 == 1;
    goto corral_source_split_13705;

  corral_source_split_13705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4295} __const_udelay(4295000);
    goto corral_source_split_13706;

  corral_source_split_13706:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb140:
    assume 1 == 1;
    goto corral_source_split_13698;

  corral_source_split_13698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4292} __const_udelay(4295000);
    goto corral_source_split_13699;

  corral_source_split_13699:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb134:
    assume 1 == 1;
    goto corral_source_split_13691;

  corral_source_split_13691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4289} __const_udelay(4295000);
    goto corral_source_split_13692;

  corral_source_split_13692:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb127:
    assume 1 == 1;
    goto corral_source_split_13684;

  corral_source_split_13684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4286} __const_udelay(4295000);
    goto corral_source_split_13685;

  corral_source_split_13685:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb121:
    assume 1 == 1;
    goto corral_source_split_13677;

  corral_source_split_13677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4283} __const_udelay(4295000);
    goto corral_source_split_13678;

  corral_source_split_13678:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb114:
    assume 1 == 1;
    goto corral_source_split_13670;

  corral_source_split_13670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4280} __const_udelay(4295000);
    goto corral_source_split_13671;

  corral_source_split_13671:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb108:
    assume 1 == 1;
    goto corral_source_split_13663;

  corral_source_split_13663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4277} __const_udelay(4295000);
    goto corral_source_split_13664;

  corral_source_split_13664:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb101:
    assume 1 == 1;
    goto corral_source_split_13656;

  corral_source_split_13656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4274} __const_udelay(4295000);
    goto corral_source_split_13657;

  corral_source_split_13657:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb95:
    assume 1 == 1;
    goto corral_source_split_13649;

  corral_source_split_13649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4271} __const_udelay(4295000);
    goto corral_source_split_13650;

  corral_source_split_13650:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb88:
    assume 1 == 1;
    goto corral_source_split_13642;

  corral_source_split_13642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4268} __const_udelay(4295000);
    goto corral_source_split_13643;

  corral_source_split_13643:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb82:
    assume 1 == 1;
    goto corral_source_split_13635;

  corral_source_split_13635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4265} __const_udelay(4295000);
    goto corral_source_split_13636;

  corral_source_split_13636:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb75:
    assume 1 == 1;
    goto corral_source_split_13628;

  corral_source_split_13628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4262} __const_udelay(4295000);
    goto corral_source_split_13629;

  corral_source_split_13629:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb69:
    assume 1 == 1;
    goto corral_source_split_13621;

  corral_source_split_13621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4259} __const_udelay(4295000);
    goto corral_source_split_13622;

  corral_source_split_13622:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb62:
    assume 1 == 1;
    goto corral_source_split_13614;

  corral_source_split_13614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4256} __const_udelay(4295000);
    goto corral_source_split_13615;

  corral_source_split_13615:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb56:
    assume 1 == 1;
    goto corral_source_split_13607;

  corral_source_split_13607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4253} __const_udelay(4295000);
    goto corral_source_split_13608;

  corral_source_split_13608:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb49:
    assume 1 == 1;
    goto corral_source_split_13600;

  corral_source_split_13600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4250} __const_udelay(4295000);
    goto corral_source_split_13601;

  corral_source_split_13601:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb43:
    assume 1 == 1;
    goto corral_source_split_13593;

  corral_source_split_13593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4247} __const_udelay(4295000);
    goto corral_source_split_13594;

  corral_source_split_13594:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb36:
    assume 1 == 1;
    goto corral_source_split_13586;

  corral_source_split_13586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4244} __const_udelay(4295000);
    goto corral_source_split_13587;

  corral_source_split_13587:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb30:
    assume 1 == 1;
    goto corral_source_split_13579;

  corral_source_split_13579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4241} __const_udelay(4295000);
    goto corral_source_split_13580;

  corral_source_split_13580:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb23:
    assume 1 == 1;
    goto corral_source_split_13572;

  corral_source_split_13572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4238} __const_udelay(4295000);
    goto corral_source_split_13573;

  corral_source_split_13573:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb17:
    assume 1 == 1;
    goto corral_source_split_13565;

  corral_source_split_13565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4235} __const_udelay(4295000);
    goto corral_source_split_13566;

  corral_source_split_13566:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume 1 == 1;
    goto corral_source_split_13558;

  corral_source_split_13558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4232} __const_udelay(4295000);
    goto corral_source_split_13559;

  corral_source_split_13559:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume 1 == 1;
    goto corral_source_split_13551;

  corral_source_split_13551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4229} __const_udelay(4295000);
    goto corral_source_split_13552;

  corral_source_split_13552:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const rtl8225se_write_zebra_agc: ref;

axiom rtl8225se_write_zebra_agc == $sub.ref(0, 415514);

procedure rtl8225se_write_zebra_agc($p0: ref);
  free requires assertsPassed;



implementation rtl8225se_write_zebra_agc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14067;

  corral_source_split_14067:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4450} rtl8225_write_phy_ofdm($p0, 15, 126);
    goto corral_source_split_14069;

  corral_source_split_14069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4451} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 128));
    goto corral_source_split_14070;

  corral_source_split_14070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4452} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14071;

  corral_source_split_14071:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4453} rtl8225_write_phy_ofdm($p0, 15, 126);
    goto corral_source_split_14073;

  corral_source_split_14073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4454} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 127));
    goto corral_source_split_14074;

  corral_source_split_14074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4455} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14075;

  corral_source_split_14075:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4456} rtl8225_write_phy_ofdm($p0, 15, 126);
    goto corral_source_split_14077;

  corral_source_split_14077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4457} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 126));
    goto corral_source_split_14078;

  corral_source_split_14078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4458} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14079;

  corral_source_split_14079:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4459} rtl8225_write_phy_ofdm($p0, 15, 126);
    goto corral_source_split_14081;

  corral_source_split_14081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4460} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 125));
    goto corral_source_split_14082;

  corral_source_split_14082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4461} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14083;

  corral_source_split_14083:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4462} rtl8225_write_phy_ofdm($p0, 15, 125);
    goto corral_source_split_14085;

  corral_source_split_14085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4463} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 124));
    goto corral_source_split_14086;

  corral_source_split_14086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4464} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14087;

  corral_source_split_14087:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4465} rtl8225_write_phy_ofdm($p0, 15, 124);
    goto corral_source_split_14089;

  corral_source_split_14089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4466} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 123));
    goto corral_source_split_14090;

  corral_source_split_14090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4467} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14091;

  corral_source_split_14091:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4468} rtl8225_write_phy_ofdm($p0, 15, 123);
    goto corral_source_split_14093;

  corral_source_split_14093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4469} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 122));
    goto corral_source_split_14094;

  corral_source_split_14094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4470} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14095;

  corral_source_split_14095:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4471} rtl8225_write_phy_ofdm($p0, 15, 122);
    goto corral_source_split_14097;

  corral_source_split_14097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4472} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 121));
    goto corral_source_split_14098;

  corral_source_split_14098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4473} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14099;

  corral_source_split_14099:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4474} rtl8225_write_phy_ofdm($p0, 15, 121);
    goto corral_source_split_14101;

  corral_source_split_14101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4475} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 120));
    goto corral_source_split_14102;

  corral_source_split_14102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4476} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14103;

  corral_source_split_14103:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4477} rtl8225_write_phy_ofdm($p0, 15, 120);
    goto corral_source_split_14105;

  corral_source_split_14105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4478} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 119));
    goto corral_source_split_14106;

  corral_source_split_14106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4479} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14107;

  corral_source_split_14107:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4480} rtl8225_write_phy_ofdm($p0, 15, 119);
    goto corral_source_split_14109;

  corral_source_split_14109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4481} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 118));
    goto corral_source_split_14110;

  corral_source_split_14110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4482} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14111;

  corral_source_split_14111:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4483} rtl8225_write_phy_ofdm($p0, 15, 118);
    goto corral_source_split_14113;

  corral_source_split_14113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4484} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 117));
    goto corral_source_split_14114;

  corral_source_split_14114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4485} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14115;

  corral_source_split_14115:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4486} rtl8225_write_phy_ofdm($p0, 15, 117);
    goto corral_source_split_14117;

  corral_source_split_14117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4487} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 116));
    goto corral_source_split_14118;

  corral_source_split_14118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4488} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14119;

  corral_source_split_14119:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4489} rtl8225_write_phy_ofdm($p0, 15, 116);
    goto corral_source_split_14121;

  corral_source_split_14121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4490} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 115));
    goto corral_source_split_14122;

  corral_source_split_14122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4491} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14123;

  corral_source_split_14123:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4492} rtl8225_write_phy_ofdm($p0, 15, 115);
    goto corral_source_split_14125;

  corral_source_split_14125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4493} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 114));
    goto corral_source_split_14126;

  corral_source_split_14126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4494} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14127;

  corral_source_split_14127:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4495} rtl8225_write_phy_ofdm($p0, 15, 114);
    goto corral_source_split_14129;

  corral_source_split_14129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4496} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 113));
    goto corral_source_split_14130;

  corral_source_split_14130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4497} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14131;

  corral_source_split_14131:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4498} rtl8225_write_phy_ofdm($p0, 15, 113);
    goto corral_source_split_14133;

  corral_source_split_14133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4499} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 112));
    goto corral_source_split_14134;

  corral_source_split_14134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4500} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14135;

  corral_source_split_14135:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4501} rtl8225_write_phy_ofdm($p0, 15, 112);
    goto corral_source_split_14137;

  corral_source_split_14137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4502} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 111));
    goto corral_source_split_14138;

  corral_source_split_14138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4503} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14139;

  corral_source_split_14139:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4504} rtl8225_write_phy_ofdm($p0, 15, 111);
    goto corral_source_split_14141;

  corral_source_split_14141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4505} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 110));
    goto corral_source_split_14142;

  corral_source_split_14142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4506} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14143;

  corral_source_split_14143:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4507} rtl8225_write_phy_ofdm($p0, 15, 110);
    goto corral_source_split_14145;

  corral_source_split_14145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4508} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 109));
    goto corral_source_split_14146;

  corral_source_split_14146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4509} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14147;

  corral_source_split_14147:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4510} rtl8225_write_phy_ofdm($p0, 15, 109);
    goto corral_source_split_14149;

  corral_source_split_14149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4511} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 108));
    goto corral_source_split_14150;

  corral_source_split_14150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4512} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14151;

  corral_source_split_14151:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4513} rtl8225_write_phy_ofdm($p0, 15, 108);
    goto corral_source_split_14153;

  corral_source_split_14153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4514} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 107));
    goto corral_source_split_14154;

  corral_source_split_14154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4515} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14155;

  corral_source_split_14155:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4516} rtl8225_write_phy_ofdm($p0, 15, 107);
    goto corral_source_split_14157;

  corral_source_split_14157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4517} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 106));
    goto corral_source_split_14158;

  corral_source_split_14158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4518} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14159;

  corral_source_split_14159:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4519} rtl8225_write_phy_ofdm($p0, 15, 106);
    goto corral_source_split_14161;

  corral_source_split_14161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4520} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 105));
    goto corral_source_split_14162;

  corral_source_split_14162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4521} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14163;

  corral_source_split_14163:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4522} rtl8225_write_phy_ofdm($p0, 15, 105);
    goto corral_source_split_14165;

  corral_source_split_14165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4523} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 104));
    goto corral_source_split_14166;

  corral_source_split_14166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4524} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14167;

  corral_source_split_14167:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4525} rtl8225_write_phy_ofdm($p0, 15, 104);
    goto corral_source_split_14169;

  corral_source_split_14169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4526} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 103));
    goto corral_source_split_14170;

  corral_source_split_14170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4527} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14171;

  corral_source_split_14171:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4528} rtl8225_write_phy_ofdm($p0, 15, 103);
    goto corral_source_split_14173;

  corral_source_split_14173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4529} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 102));
    goto corral_source_split_14174;

  corral_source_split_14174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4530} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14175;

  corral_source_split_14175:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4531} rtl8225_write_phy_ofdm($p0, 15, 102);
    goto corral_source_split_14177;

  corral_source_split_14177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4532} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 101));
    goto corral_source_split_14178;

  corral_source_split_14178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4533} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14179;

  corral_source_split_14179:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4534} rtl8225_write_phy_ofdm($p0, 15, 101);
    goto corral_source_split_14181;

  corral_source_split_14181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4535} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 100));
    goto corral_source_split_14182;

  corral_source_split_14182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4536} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14183;

  corral_source_split_14183:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4537} rtl8225_write_phy_ofdm($p0, 15, 100);
    goto corral_source_split_14185;

  corral_source_split_14185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4538} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 99));
    goto corral_source_split_14186;

  corral_source_split_14186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4539} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14187;

  corral_source_split_14187:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4540} rtl8225_write_phy_ofdm($p0, 15, 99);
    goto corral_source_split_14189;

  corral_source_split_14189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4541} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 98));
    goto corral_source_split_14190;

  corral_source_split_14190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4542} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14191;

  corral_source_split_14191:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4543} rtl8225_write_phy_ofdm($p0, 15, 98);
    goto corral_source_split_14193;

  corral_source_split_14193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4544} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 97));
    goto corral_source_split_14194;

  corral_source_split_14194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4545} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14195;

  corral_source_split_14195:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4546} rtl8225_write_phy_ofdm($p0, 15, 72);
    goto corral_source_split_14197;

  corral_source_split_14197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4547} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 96));
    goto corral_source_split_14198;

  corral_source_split_14198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4548} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14199;

  corral_source_split_14199:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4549} rtl8225_write_phy_ofdm($p0, 15, 71);
    goto corral_source_split_14201;

  corral_source_split_14201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4550} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 95));
    goto corral_source_split_14202;

  corral_source_split_14202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4551} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14203;

  corral_source_split_14203:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4552} rtl8225_write_phy_ofdm($p0, 15, 70);
    goto corral_source_split_14205;

  corral_source_split_14205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4553} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 94));
    goto corral_source_split_14206;

  corral_source_split_14206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4554} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14207;

  corral_source_split_14207:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4555} rtl8225_write_phy_ofdm($p0, 15, 69);
    goto corral_source_split_14209;

  corral_source_split_14209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4556} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 93));
    goto corral_source_split_14210;

  corral_source_split_14210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4557} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14211;

  corral_source_split_14211:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4558} rtl8225_write_phy_ofdm($p0, 15, 68);
    goto corral_source_split_14213;

  corral_source_split_14213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4559} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 92));
    goto corral_source_split_14214;

  corral_source_split_14214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4560} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14215;

  corral_source_split_14215:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4561} rtl8225_write_phy_ofdm($p0, 15, 41);
    goto corral_source_split_14217;

  corral_source_split_14217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4562} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 91));
    goto corral_source_split_14218;

  corral_source_split_14218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4563} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14219;

  corral_source_split_14219:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4564} rtl8225_write_phy_ofdm($p0, 15, 40);
    goto corral_source_split_14221;

  corral_source_split_14221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4565} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 90));
    goto corral_source_split_14222;

  corral_source_split_14222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4566} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14223;

  corral_source_split_14223:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4567} rtl8225_write_phy_ofdm($p0, 15, 39);
    goto corral_source_split_14225;

  corral_source_split_14225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4568} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 89));
    goto corral_source_split_14226;

  corral_source_split_14226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4569} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14227;

  corral_source_split_14227:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4570} rtl8225_write_phy_ofdm($p0, 15, 38);
    goto corral_source_split_14229;

  corral_source_split_14229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4571} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 88));
    goto corral_source_split_14230;

  corral_source_split_14230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4572} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14231;

  corral_source_split_14231:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4573} rtl8225_write_phy_ofdm($p0, 15, 37);
    goto corral_source_split_14233;

  corral_source_split_14233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4574} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 87));
    goto corral_source_split_14234;

  corral_source_split_14234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4575} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14235;

  corral_source_split_14235:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4576} rtl8225_write_phy_ofdm($p0, 15, 36);
    goto corral_source_split_14237;

  corral_source_split_14237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4577} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 86));
    goto corral_source_split_14238;

  corral_source_split_14238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4578} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14239;

  corral_source_split_14239:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4579} rtl8225_write_phy_ofdm($p0, 15, 35);
    goto corral_source_split_14241;

  corral_source_split_14241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4580} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 85));
    goto corral_source_split_14242;

  corral_source_split_14242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4581} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14243;

  corral_source_split_14243:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4582} rtl8225_write_phy_ofdm($p0, 15, 34);
    goto corral_source_split_14245;

  corral_source_split_14245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4583} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 84));
    goto corral_source_split_14246;

  corral_source_split_14246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4584} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14247;

  corral_source_split_14247:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4585} rtl8225_write_phy_ofdm($p0, 15, 33);
    goto corral_source_split_14249;

  corral_source_split_14249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4586} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 83));
    goto corral_source_split_14250;

  corral_source_split_14250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4587} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14251;

  corral_source_split_14251:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4588} rtl8225_write_phy_ofdm($p0, 15, 8);
    goto corral_source_split_14253;

  corral_source_split_14253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4589} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 82));
    goto corral_source_split_14254;

  corral_source_split_14254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4590} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14255;

  corral_source_split_14255:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4591} rtl8225_write_phy_ofdm($p0, 15, 7);
    goto corral_source_split_14257;

  corral_source_split_14257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4592} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 81));
    goto corral_source_split_14258;

  corral_source_split_14258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4593} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14259;

  corral_source_split_14259:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4594} rtl8225_write_phy_ofdm($p0, 15, 6);
    goto corral_source_split_14261;

  corral_source_split_14261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4595} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 80));
    goto corral_source_split_14262;

  corral_source_split_14262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4596} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14263;

  corral_source_split_14263:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4597} rtl8225_write_phy_ofdm($p0, 15, 5);
    goto corral_source_split_14265;

  corral_source_split_14265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4598} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 79));
    goto corral_source_split_14266;

  corral_source_split_14266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4599} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14267;

  corral_source_split_14267:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4600} rtl8225_write_phy_ofdm($p0, 15, 4);
    goto corral_source_split_14269;

  corral_source_split_14269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4601} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 78));
    goto corral_source_split_14270;

  corral_source_split_14270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4602} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14271;

  corral_source_split_14271:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4603} rtl8225_write_phy_ofdm($p0, 15, 3);
    goto corral_source_split_14273;

  corral_source_split_14273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4604} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 77));
    goto corral_source_split_14274;

  corral_source_split_14274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4605} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14275;

  corral_source_split_14275:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4606} rtl8225_write_phy_ofdm($p0, 15, 2);
    goto corral_source_split_14277;

  corral_source_split_14277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4607} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 76));
    goto corral_source_split_14278;

  corral_source_split_14278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4608} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14279;

  corral_source_split_14279:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4609} rtl8225_write_phy_ofdm($p0, 15, 1);
    goto corral_source_split_14281;

  corral_source_split_14281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4610} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 75));
    goto corral_source_split_14282;

  corral_source_split_14282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4611} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14283;

  corral_source_split_14283:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4612} rtl8225_write_phy_ofdm($p0, 15, 0);
    goto corral_source_split_14285;

  corral_source_split_14285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4613} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 74));
    goto corral_source_split_14286;

  corral_source_split_14286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4614} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14287;

  corral_source_split_14287:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4615} rtl8225_write_phy_ofdm($p0, 15, 0);
    goto corral_source_split_14289;

  corral_source_split_14289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4616} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 73));
    goto corral_source_split_14290;

  corral_source_split_14290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4617} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14291;

  corral_source_split_14291:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4618} rtl8225_write_phy_ofdm($p0, 15, 0);
    goto corral_source_split_14293;

  corral_source_split_14293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4619} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 72));
    goto corral_source_split_14294;

  corral_source_split_14294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4620} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14295;

  corral_source_split_14295:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4621} rtl8225_write_phy_ofdm($p0, 15, 0);
    goto corral_source_split_14297;

  corral_source_split_14297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4622} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 71));
    goto corral_source_split_14298;

  corral_source_split_14298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4623} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14299;

  corral_source_split_14299:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4624} rtl8225_write_phy_ofdm($p0, 15, 0);
    goto corral_source_split_14301;

  corral_source_split_14301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4625} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 70));
    goto corral_source_split_14302;

  corral_source_split_14302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4626} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14303;

  corral_source_split_14303:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4627} rtl8225_write_phy_ofdm($p0, 15, 0);
    goto corral_source_split_14305;

  corral_source_split_14305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4628} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 69));
    goto corral_source_split_14306;

  corral_source_split_14306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4629} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14307;

  corral_source_split_14307:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4630} rtl8225_write_phy_ofdm($p0, 15, 0);
    goto corral_source_split_14309;

  corral_source_split_14309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4631} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 68));
    goto corral_source_split_14310;

  corral_source_split_14310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4632} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14311;

  corral_source_split_14311:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4633} rtl8225_write_phy_ofdm($p0, 15, 0);
    goto corral_source_split_14313;

  corral_source_split_14313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4634} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 67));
    goto corral_source_split_14314;

  corral_source_split_14314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4635} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14315;

  corral_source_split_14315:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4636} rtl8225_write_phy_ofdm($p0, 15, 0);
    goto corral_source_split_14317;

  corral_source_split_14317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4637} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 66));
    goto corral_source_split_14318;

  corral_source_split_14318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4638} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14319;

  corral_source_split_14319:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4639} rtl8225_write_phy_ofdm($p0, 15, 0);
    goto corral_source_split_14321;

  corral_source_split_14321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4640} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 65));
    goto corral_source_split_14322;

  corral_source_split_14322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4641} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14323;

  corral_source_split_14323:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4642} rtl8225_write_phy_ofdm($p0, 15, 15);
    goto corral_source_split_14325;

  corral_source_split_14325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4643} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 64));
    goto corral_source_split_14326;

  corral_source_split_14326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4644} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14327;

  corral_source_split_14327:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4645} rtl8225_write_phy_ofdm($p0, 15, 15);
    goto corral_source_split_14329;

  corral_source_split_14329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4646} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 63));
    goto corral_source_split_14330;

  corral_source_split_14330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4647} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14331;

  corral_source_split_14331:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4648} rtl8225_write_phy_ofdm($p0, 15, 15);
    goto corral_source_split_14333;

  corral_source_split_14333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4649} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 62));
    goto corral_source_split_14334;

  corral_source_split_14334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4650} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14335;

  corral_source_split_14335:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4651} rtl8225_write_phy_ofdm($p0, 15, 15);
    goto corral_source_split_14337;

  corral_source_split_14337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4652} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 61));
    goto corral_source_split_14338;

  corral_source_split_14338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4653} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14339;

  corral_source_split_14339:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4654} rtl8225_write_phy_ofdm($p0, 15, 15);
    goto corral_source_split_14341;

  corral_source_split_14341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4655} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 60));
    goto corral_source_split_14342;

  corral_source_split_14342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4656} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14343;

  corral_source_split_14343:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4657} rtl8225_write_phy_ofdm($p0, 15, 15);
    goto corral_source_split_14345;

  corral_source_split_14345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4658} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 59));
    goto corral_source_split_14346;

  corral_source_split_14346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4659} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14347;

  corral_source_split_14347:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4660} rtl8225_write_phy_ofdm($p0, 15, 15);
    goto corral_source_split_14349;

  corral_source_split_14349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4661} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 58));
    goto corral_source_split_14350;

  corral_source_split_14350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4662} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14351;

  corral_source_split_14351:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4663} rtl8225_write_phy_ofdm($p0, 15, 15);
    goto corral_source_split_14353;

  corral_source_split_14353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4664} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 57));
    goto corral_source_split_14354;

  corral_source_split_14354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4665} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14355;

  corral_source_split_14355:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4666} rtl8225_write_phy_ofdm($p0, 15, 15);
    goto corral_source_split_14357;

  corral_source_split_14357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4667} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 56));
    goto corral_source_split_14358;

  corral_source_split_14358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4668} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14359;

  corral_source_split_14359:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4669} rtl8225_write_phy_ofdm($p0, 15, 15);
    goto corral_source_split_14361;

  corral_source_split_14361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4670} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 55));
    goto corral_source_split_14362;

  corral_source_split_14362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4671} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14363;

  corral_source_split_14363:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4672} rtl8225_write_phy_ofdm($p0, 15, 16);
    goto corral_source_split_14365;

  corral_source_split_14365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4673} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 54));
    goto corral_source_split_14366;

  corral_source_split_14366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4674} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14367;

  corral_source_split_14367:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4675} rtl8225_write_phy_ofdm($p0, 15, 17);
    goto corral_source_split_14369;

  corral_source_split_14369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4676} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 53));
    goto corral_source_split_14370;

  corral_source_split_14370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4677} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14371;

  corral_source_split_14371:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4678} rtl8225_write_phy_ofdm($p0, 15, 18);
    goto corral_source_split_14373;

  corral_source_split_14373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4679} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 52));
    goto corral_source_split_14374;

  corral_source_split_14374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4680} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14375;

  corral_source_split_14375:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4681} rtl8225_write_phy_ofdm($p0, 15, 19);
    goto corral_source_split_14377;

  corral_source_split_14377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4682} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 51));
    goto corral_source_split_14378;

  corral_source_split_14378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4683} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14379;

  corral_source_split_14379:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4684} rtl8225_write_phy_ofdm($p0, 15, 21);
    goto corral_source_split_14381;

  corral_source_split_14381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4685} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 50));
    goto corral_source_split_14382;

  corral_source_split_14382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4686} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14383;

  corral_source_split_14383:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4687} rtl8225_write_phy_ofdm($p0, 15, 22);
    goto corral_source_split_14385;

  corral_source_split_14385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4688} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 49));
    goto corral_source_split_14386;

  corral_source_split_14386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4689} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14387;

  corral_source_split_14387:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4690} rtl8225_write_phy_ofdm($p0, 15, 23);
    goto corral_source_split_14389;

  corral_source_split_14389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4691} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 48));
    goto corral_source_split_14390;

  corral_source_split_14390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4692} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14391;

  corral_source_split_14391:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4693} rtl8225_write_phy_ofdm($p0, 15, 23);
    goto corral_source_split_14393;

  corral_source_split_14393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4694} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 47));
    goto corral_source_split_14394;

  corral_source_split_14394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4695} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14395;

  corral_source_split_14395:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4696} rtl8225_write_phy_ofdm($p0, 15, 24);
    goto corral_source_split_14397;

  corral_source_split_14397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4697} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 46));
    goto corral_source_split_14398;

  corral_source_split_14398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4698} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14399;

  corral_source_split_14399:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4699} rtl8225_write_phy_ofdm($p0, 15, 24);
    goto corral_source_split_14401;

  corral_source_split_14401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4700} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 45));
    goto corral_source_split_14402;

  corral_source_split_14402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4701} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14403;

  corral_source_split_14403:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4702} rtl8225_write_phy_ofdm($p0, 15, 25);
    goto corral_source_split_14405;

  corral_source_split_14405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4703} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 44));
    goto corral_source_split_14406;

  corral_source_split_14406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4704} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14407;

  corral_source_split_14407:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4705} rtl8225_write_phy_ofdm($p0, 15, 26);
    goto corral_source_split_14409;

  corral_source_split_14409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4706} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 43));
    goto corral_source_split_14410;

  corral_source_split_14410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4707} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14411;

  corral_source_split_14411:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4708} rtl8225_write_phy_ofdm($p0, 15, 26);
    goto corral_source_split_14413;

  corral_source_split_14413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4709} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 42));
    goto corral_source_split_14414;

  corral_source_split_14414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4710} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14415;

  corral_source_split_14415:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4711} rtl8225_write_phy_ofdm($p0, 15, 27);
    goto corral_source_split_14417;

  corral_source_split_14417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4712} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 41));
    goto corral_source_split_14418;

  corral_source_split_14418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4713} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14419;

  corral_source_split_14419:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4714} rtl8225_write_phy_ofdm($p0, 15, 27);
    goto corral_source_split_14421;

  corral_source_split_14421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4715} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 40));
    goto corral_source_split_14422;

  corral_source_split_14422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4716} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14423;

  corral_source_split_14423:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4717} rtl8225_write_phy_ofdm($p0, 15, 28);
    goto corral_source_split_14425;

  corral_source_split_14425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4718} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 39));
    goto corral_source_split_14426;

  corral_source_split_14426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4719} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14427;

  corral_source_split_14427:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4720} rtl8225_write_phy_ofdm($p0, 15, 28);
    goto corral_source_split_14429;

  corral_source_split_14429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4721} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 38));
    goto corral_source_split_14430;

  corral_source_split_14430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4722} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14431;

  corral_source_split_14431:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4723} rtl8225_write_phy_ofdm($p0, 15, 29);
    goto corral_source_split_14433;

  corral_source_split_14433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4724} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 37));
    goto corral_source_split_14434;

  corral_source_split_14434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4725} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14435;

  corral_source_split_14435:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4726} rtl8225_write_phy_ofdm($p0, 15, 29);
    goto corral_source_split_14437;

  corral_source_split_14437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4727} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 36));
    goto corral_source_split_14438;

  corral_source_split_14438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4728} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14439;

  corral_source_split_14439:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4729} rtl8225_write_phy_ofdm($p0, 15, 29);
    goto corral_source_split_14441;

  corral_source_split_14441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4730} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 35));
    goto corral_source_split_14442;

  corral_source_split_14442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4731} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14443;

  corral_source_split_14443:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4732} rtl8225_write_phy_ofdm($p0, 15, 30);
    goto corral_source_split_14445;

  corral_source_split_14445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4733} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 34));
    goto corral_source_split_14446;

  corral_source_split_14446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4734} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14447;

  corral_source_split_14447:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4735} rtl8225_write_phy_ofdm($p0, 15, 30);
    goto corral_source_split_14449;

  corral_source_split_14449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4736} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 33));
    goto corral_source_split_14450;

  corral_source_split_14450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4737} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14451;

  corral_source_split_14451:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4738} rtl8225_write_phy_ofdm($p0, 15, 31);
    goto corral_source_split_14453;

  corral_source_split_14453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4739} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 32));
    goto corral_source_split_14454;

  corral_source_split_14454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4740} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14455;

  corral_source_split_14455:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4741} rtl8225_write_phy_ofdm($p0, 15, 31);
    goto corral_source_split_14457;

  corral_source_split_14457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4742} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 31));
    goto corral_source_split_14458;

  corral_source_split_14458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4743} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14459;

  corral_source_split_14459:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4744} rtl8225_write_phy_ofdm($p0, 15, 31);
    goto corral_source_split_14461;

  corral_source_split_14461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4745} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 30));
    goto corral_source_split_14462;

  corral_source_split_14462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4746} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14463;

  corral_source_split_14463:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4747} rtl8225_write_phy_ofdm($p0, 15, 32);
    goto corral_source_split_14465;

  corral_source_split_14465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4748} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 29));
    goto corral_source_split_14466;

  corral_source_split_14466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4749} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14467;

  corral_source_split_14467:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4750} rtl8225_write_phy_ofdm($p0, 15, 32);
    goto corral_source_split_14469;

  corral_source_split_14469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4751} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 28));
    goto corral_source_split_14470;

  corral_source_split_14470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4752} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14471;

  corral_source_split_14471:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4753} rtl8225_write_phy_ofdm($p0, 15, 32);
    goto corral_source_split_14473;

  corral_source_split_14473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4754} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 27));
    goto corral_source_split_14474;

  corral_source_split_14474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4755} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14475;

  corral_source_split_14475:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4756} rtl8225_write_phy_ofdm($p0, 15, 32);
    goto corral_source_split_14477;

  corral_source_split_14477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4757} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 26));
    goto corral_source_split_14478;

  corral_source_split_14478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4758} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14479;

  corral_source_split_14479:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4759} rtl8225_write_phy_ofdm($p0, 15, 33);
    goto corral_source_split_14481;

  corral_source_split_14481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4760} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 25));
    goto corral_source_split_14482;

  corral_source_split_14482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4761} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14483;

  corral_source_split_14483:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4762} rtl8225_write_phy_ofdm($p0, 15, 33);
    goto corral_source_split_14485;

  corral_source_split_14485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4763} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 24));
    goto corral_source_split_14486;

  corral_source_split_14486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4764} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14487;

  corral_source_split_14487:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4765} rtl8225_write_phy_ofdm($p0, 15, 33);
    goto corral_source_split_14489;

  corral_source_split_14489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4766} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 23));
    goto corral_source_split_14490;

  corral_source_split_14490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4767} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14491;

  corral_source_split_14491:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4768} rtl8225_write_phy_ofdm($p0, 15, 34);
    goto corral_source_split_14493;

  corral_source_split_14493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4769} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 22));
    goto corral_source_split_14494;

  corral_source_split_14494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4770} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14495;

  corral_source_split_14495:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4771} rtl8225_write_phy_ofdm($p0, 15, 34);
    goto corral_source_split_14497;

  corral_source_split_14497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4772} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 21));
    goto corral_source_split_14498;

  corral_source_split_14498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4773} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14499;

  corral_source_split_14499:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4774} rtl8225_write_phy_ofdm($p0, 15, 34);
    goto corral_source_split_14501;

  corral_source_split_14501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4775} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 20));
    goto corral_source_split_14502;

  corral_source_split_14502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4776} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14503;

  corral_source_split_14503:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4777} rtl8225_write_phy_ofdm($p0, 15, 35);
    goto corral_source_split_14505;

  corral_source_split_14505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4778} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 19));
    goto corral_source_split_14506;

  corral_source_split_14506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4779} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14507;

  corral_source_split_14507:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4780} rtl8225_write_phy_ofdm($p0, 15, 35);
    goto corral_source_split_14509;

  corral_source_split_14509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4781} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 18));
    goto corral_source_split_14510;

  corral_source_split_14510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4782} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14511;

  corral_source_split_14511:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4783} rtl8225_write_phy_ofdm($p0, 15, 36);
    goto corral_source_split_14513;

  corral_source_split_14513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4784} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 17));
    goto corral_source_split_14514;

  corral_source_split_14514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4785} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14515;

  corral_source_split_14515:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4786} rtl8225_write_phy_ofdm($p0, 15, 36);
    goto corral_source_split_14517;

  corral_source_split_14517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4787} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 16));
    goto corral_source_split_14518;

  corral_source_split_14518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4788} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14519;

  corral_source_split_14519:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4789} rtl8225_write_phy_ofdm($p0, 15, 37);
    goto corral_source_split_14521;

  corral_source_split_14521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4790} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 15));
    goto corral_source_split_14522;

  corral_source_split_14522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4791} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14523;

  corral_source_split_14523:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4792} rtl8225_write_phy_ofdm($p0, 15, 37);
    goto corral_source_split_14525;

  corral_source_split_14525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4793} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 14));
    goto corral_source_split_14526;

  corral_source_split_14526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4794} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14527;

  corral_source_split_14527:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4795} rtl8225_write_phy_ofdm($p0, 15, 37);
    goto corral_source_split_14529;

  corral_source_split_14529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4796} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 13));
    goto corral_source_split_14530;

  corral_source_split_14530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4797} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14531;

  corral_source_split_14531:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4798} rtl8225_write_phy_ofdm($p0, 15, 38);
    goto corral_source_split_14533;

  corral_source_split_14533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4799} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 12));
    goto corral_source_split_14534;

  corral_source_split_14534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4800} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14535;

  corral_source_split_14535:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4801} rtl8225_write_phy_ofdm($p0, 15, 38);
    goto corral_source_split_14537;

  corral_source_split_14537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4802} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 11));
    goto corral_source_split_14538;

  corral_source_split_14538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4803} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14539;

  corral_source_split_14539:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4804} rtl8225_write_phy_ofdm($p0, 15, 39);
    goto corral_source_split_14541;

  corral_source_split_14541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4805} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 10));
    goto corral_source_split_14542;

  corral_source_split_14542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4806} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14543;

  corral_source_split_14543:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4807} rtl8225_write_phy_ofdm($p0, 15, 39);
    goto corral_source_split_14545;

  corral_source_split_14545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4808} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 9));
    goto corral_source_split_14546;

  corral_source_split_14546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4809} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14547;

  corral_source_split_14547:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4810} rtl8225_write_phy_ofdm($p0, 15, 47);
    goto corral_source_split_14549;

  corral_source_split_14549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4811} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 8));
    goto corral_source_split_14550;

  corral_source_split_14550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4812} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14551;

  corral_source_split_14551:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4813} rtl8225_write_phy_ofdm($p0, 15, 47);
    goto corral_source_split_14553;

  corral_source_split_14553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4814} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 7));
    goto corral_source_split_14554;

  corral_source_split_14554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4815} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14555;

  corral_source_split_14555:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4816} rtl8225_write_phy_ofdm($p0, 15, 47);
    goto corral_source_split_14557;

  corral_source_split_14557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4817} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 6));
    goto corral_source_split_14558;

  corral_source_split_14558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4818} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14559;

  corral_source_split_14559:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4819} rtl8225_write_phy_ofdm($p0, 15, 47);
    goto corral_source_split_14561;

  corral_source_split_14561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4820} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 5));
    goto corral_source_split_14562;

  corral_source_split_14562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4821} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14563;

  corral_source_split_14563:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4822} rtl8225_write_phy_ofdm($p0, 15, 47);
    goto corral_source_split_14565;

  corral_source_split_14565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4823} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 4));
    goto corral_source_split_14566;

  corral_source_split_14566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4824} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14567;

  corral_source_split_14567:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4825} rtl8225_write_phy_ofdm($p0, 15, 47);
    goto corral_source_split_14569;

  corral_source_split_14569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4826} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 3));
    goto corral_source_split_14570;

  corral_source_split_14570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4827} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14571;

  corral_source_split_14571:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4828} rtl8225_write_phy_ofdm($p0, 15, 47);
    goto corral_source_split_14573;

  corral_source_split_14573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4829} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 2));
    goto corral_source_split_14574;

  corral_source_split_14574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4830} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14575;

  corral_source_split_14575:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4831} rtl8225_write_phy_ofdm($p0, 15, 47);
    goto corral_source_split_14577;

  corral_source_split_14577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4832} rtl8225_write_phy_ofdm($p0, 14, $sub.i8(0, 1));
    goto corral_source_split_14578;

  corral_source_split_14578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4833} rtl8225_write_phy_ofdm($p0, 14, 0);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;
}



const rtl8187se_write_ofdm_config: ref;

axiom rtl8187se_write_ofdm_config == $sub.ref(0, 416546);

procedure rtl8187se_write_ofdm_config($p0: ref);
  free requires assertsPassed;



implementation rtl8187se_write_ofdm_config($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14580;

  corral_source_split_14580:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4834} rtl8225_write_phy_ofdm($p0, 0, 16);
    goto corral_source_split_14582;

  corral_source_split_14582:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4835} rtl8225_write_phy_ofdm($p0, 1, 15);
    goto corral_source_split_14584;

  corral_source_split_14584:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4836} rtl8225_write_phy_ofdm($p0, 2, 10);
    goto corral_source_split_14586;

  corral_source_split_14586:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4837} rtl8225_write_phy_ofdm($p0, 3, 12);
    goto corral_source_split_14588;

  corral_source_split_14588:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4838} rtl8225_write_phy_ofdm($p0, 4, 20);
    goto corral_source_split_14590;

  corral_source_split_14590:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4839} rtl8225_write_phy_ofdm($p0, 5, $sub.i8(0, 6));
    goto corral_source_split_14592;

  corral_source_split_14592:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4840} rtl8225_write_phy_ofdm($p0, 6, $sub.i8(0, 1));
    goto corral_source_split_14594;

  corral_source_split_14594:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4841} rtl8225_write_phy_ofdm($p0, 7, 80);
    goto corral_source_split_14596;

  corral_source_split_14596:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4842} rtl8225_write_phy_ofdm($p0, 8, 0);
    goto corral_source_split_14598;

  corral_source_split_14598:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4843} rtl8225_write_phy_ofdm($p0, 9, 80);
    goto corral_source_split_14600;

  corral_source_split_14600:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4844} rtl8225_write_phy_ofdm($p0, 10, 0);
    goto corral_source_split_14602;

  corral_source_split_14602:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4845} rtl8225_write_phy_ofdm($p0, 11, 0);
    goto corral_source_split_14604;

  corral_source_split_14604:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4846} rtl8225_write_phy_ofdm($p0, 12, 0);
    goto corral_source_split_14606;

  corral_source_split_14606:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4847} rtl8225_write_phy_ofdm($p0, 13, 92);
    goto corral_source_split_14608;

  corral_source_split_14608:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4848} rtl8225_write_phy_ofdm($p0, 14, 0);
    goto corral_source_split_14610;

  corral_source_split_14610:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4849} rtl8225_write_phy_ofdm($p0, 15, 0);
    goto corral_source_split_14612;

  corral_source_split_14612:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4850} rtl8225_write_phy_ofdm($p0, 16, 64);
    goto corral_source_split_14614;

  corral_source_split_14614:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4851} rtl8225_write_phy_ofdm($p0, 17, 0);
    goto corral_source_split_14616;

  corral_source_split_14616:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4852} rtl8225_write_phy_ofdm($p0, 18, 64);
    goto corral_source_split_14618;

  corral_source_split_14618:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4853} rtl8225_write_phy_ofdm($p0, 19, 0);
    goto corral_source_split_14620;

  corral_source_split_14620:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4854} rtl8225_write_phy_ofdm($p0, 20, 0);
    goto corral_source_split_14622;

  corral_source_split_14622:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4855} rtl8225_write_phy_ofdm($p0, 21, 0);
    goto corral_source_split_14624;

  corral_source_split_14624:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4856} rtl8225_write_phy_ofdm($p0, 22, $sub.i8(0, 88));
    goto corral_source_split_14626;

  corral_source_split_14626:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4857} rtl8225_write_phy_ofdm($p0, 23, 38);
    goto corral_source_split_14628;

  corral_source_split_14628:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4858} rtl8225_write_phy_ofdm($p0, 24, 50);
    goto corral_source_split_14630;

  corral_source_split_14630:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4859} rtl8225_write_phy_ofdm($p0, 25, 51);
    goto corral_source_split_14632;

  corral_source_split_14632:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4860} rtl8225_write_phy_ofdm($p0, 26, 6);
    goto corral_source_split_14634;

  corral_source_split_14634:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4861} rtl8225_write_phy_ofdm($p0, 27, $sub.i8(0, 91));
    goto corral_source_split_14636;

  corral_source_split_14636:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4862} rtl8225_write_phy_ofdm($p0, 28, 111);
    goto corral_source_split_14638;

  corral_source_split_14638:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4863} rtl8225_write_phy_ofdm($p0, 29, 85);
    goto corral_source_split_14640;

  corral_source_split_14640:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4864} rtl8225_write_phy_ofdm($p0, 30, $sub.i8(0, 56));
    goto corral_source_split_14642;

  corral_source_split_14642:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4865} rtl8225_write_phy_ofdm($p0, 31, $sub.i8(0, 69));
    goto corral_source_split_14644;

  corral_source_split_14644:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4866} rtl8225_write_phy_ofdm($p0, 32, 10);
    goto corral_source_split_14646;

  corral_source_split_14646:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4867} rtl8225_write_phy_ofdm($p0, 33, $sub.i8(0, 31));
    goto corral_source_split_14648;

  corral_source_split_14648:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4868} rtl8225_write_phy_ofdm($p0, 34, 44);
    goto corral_source_split_14650;

  corral_source_split_14650:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4869} rtl8225_write_phy_ofdm($p0, 35, 74);
    goto corral_source_split_14652;

  corral_source_split_14652:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4870} rtl8225_write_phy_ofdm($p0, 36, $sub.i8(0, 122));
    goto corral_source_split_14654;

  corral_source_split_14654:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4871} rtl8225_write_phy_ofdm($p0, 37, $sub.i8(0, 125));
    goto corral_source_split_14656;

  corral_source_split_14656:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4872} rtl8225_write_phy_ofdm($p0, 38, 52);
    goto corral_source_split_14658;

  corral_source_split_14658:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4873} rtl8225_write_phy_ofdm($p0, 39, 0);
    goto corral_source_split_14660;

  corral_source_split_14660:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4874} rtl8225_write_phy_ofdm($p0, 40, 79);
    goto corral_source_split_14662;

  corral_source_split_14662:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4875} rtl8225_write_phy_ofdm($p0, 41, 36);
    goto corral_source_split_14664;

  corral_source_split_14664:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4876} rtl8225_write_phy_ofdm($p0, 42, 111);
    goto corral_source_split_14666;

  corral_source_split_14666:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4877} rtl8225_write_phy_ofdm($p0, 43, $sub.i8(0, 62));
    goto corral_source_split_14668;

  corral_source_split_14668:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4878} rtl8225_write_phy_ofdm($p0, 44, 3);
    goto corral_source_split_14670;

  corral_source_split_14670:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4879} rtl8225_write_phy_ofdm($p0, 45, 64);
    goto corral_source_split_14672;

  corral_source_split_14672:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4880} rtl8225_write_phy_ofdm($p0, 46, $sub.i8(0, 128));
    goto corral_source_split_14674;

  corral_source_split_14674:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4881} rtl8225_write_phy_ofdm($p0, 47, 0);
    goto corral_source_split_14676;

  corral_source_split_14676:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4882} rtl8225_write_phy_ofdm($p0, 48, $sub.i8(0, 64));
    goto corral_source_split_14678;

  corral_source_split_14678:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4883} rtl8225_write_phy_ofdm($p0, 49, $sub.i8(0, 63));
    goto corral_source_split_14680;

  corral_source_split_14680:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4884} rtl8225_write_phy_ofdm($p0, 50, 88);
    goto corral_source_split_14682;

  corral_source_split_14682:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4885} rtl8225_write_phy_ofdm($p0, 51, $sub.i8(0, 15));
    goto corral_source_split_14684;

  corral_source_split_14684:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4886} rtl8225_write_phy_ofdm($p0, 52, 0);
    goto corral_source_split_14686;

  corral_source_split_14686:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4887} rtl8225_write_phy_ofdm($p0, 53, $sub.i8(0, 60));
    goto corral_source_split_14688;

  corral_source_split_14688:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4888} rtl8225_write_phy_ofdm($p0, 54, $sub.i8(0, 112));
    goto corral_source_split_14690;

  corral_source_split_14690:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4889} rtl8225_write_phy_ofdm($p0, 55, 62);
    goto corral_source_split_14692;

  corral_source_split_14692:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4890} rtl8225_write_phy_ofdm($p0, 56, $sub.i8(0, 40));
    goto corral_source_split_14694;

  corral_source_split_14694:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4891} rtl8225_write_phy_ofdm($p0, 57, 60);
    goto corral_source_split_14696;

  corral_source_split_14696:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4892} rtl8225_write_phy_ofdm($p0, 58, 123);
    goto corral_source_split_14698;

  corral_source_split_14698:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4893} rtl8225_write_phy_ofdm($p0, 59, 16);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;
}



const rtl8187se_write_initial_gain: ref;

axiom rtl8187se_write_initial_gain == $sub.ref(0, 417578);

procedure rtl8187se_write_initial_gain($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation rtl8187se_write_initial_gain($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    call {:si_unique_call 4894} {:cexpr "rtl8187se_write_initial_gain:arg:init_gain"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i1, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4902} rtl8225_write_phy_ofdm($p0, 23, 38);
    goto corral_source_split_14721;

  corral_source_split_14721:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb20, $bb21;

  $bb21:
    assume !(1 == 1);
    goto corral_source_split_14726;

  corral_source_split_14726:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4905} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4904} rtl8225_write_phy_ofdm($p0, 36, $sub.i8(0, 122));
    goto corral_source_split_14728;

  corral_source_split_14728:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb26, $bb27;

  $bb27:
    assume !(1 == 1);
    goto corral_source_split_14733;

  corral_source_split_14733:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4908} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4907} rtl8225_write_phy_ofdm($p0, 5, $sub.i8(0, 6));
    goto corral_source_split_14735;

  corral_source_split_14735:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb32, $bb33;

  $bb33:
    assume !(1 == 1);
    goto corral_source_split_14740;

  corral_source_split_14740:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4910} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume 1 == 1;
    goto corral_source_split_14737;

  corral_source_split_14737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4909} __const_udelay(4295000);
    goto corral_source_split_14738;

  corral_source_split_14738:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb26:
    assume 1 == 1;
    goto corral_source_split_14730;

  corral_source_split_14730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4906} __const_udelay(4295000);
    goto corral_source_split_14731;

  corral_source_split_14731:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb20:
    assume 1 == 1;
    goto corral_source_split_14723;

  corral_source_split_14723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4903} __const_udelay(4295000);
    goto corral_source_split_14724;

  corral_source_split_14724:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb8:
    assume $i5 == 1;
    goto corral_source_split_14703;

  corral_source_split_14703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4896} rtl8225_write_phy_ofdm($p0, 23, 102);
    goto corral_source_split_14704;

  corral_source_split_14704:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb147, $bb148;

  $bb148:
    assume !(1 == 1);
    goto corral_source_split_14859;

  corral_source_split_14859:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4961} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4960} rtl8225_write_phy_ofdm($p0, 36, $sub.i8(0, 74));
    goto corral_source_split_14861;

  corral_source_split_14861:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb153, $bb154;

  $bb154:
    assume !(1 == 1);
    goto corral_source_split_14866;

  corral_source_split_14866:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4964} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4963} rtl8225_write_phy_ofdm($p0, 5, $sub.i8(0, 4));
    goto corral_source_split_14868;

  corral_source_split_14868:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb159, $bb160;

  $bb160:
    assume !(1 == 1);
    goto corral_source_split_14873;

  corral_source_split_14873:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4966} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb159:
    assume 1 == 1;
    goto corral_source_split_14870;

  corral_source_split_14870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4965} __const_udelay(4295000);
    goto corral_source_split_14871;

  corral_source_split_14871:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb153:
    assume 1 == 1;
    goto corral_source_split_14863;

  corral_source_split_14863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4962} __const_udelay(4295000);
    goto corral_source_split_14864;

  corral_source_split_14864:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb147:
    assume 1 == 1;
    goto corral_source_split_14856;

  corral_source_split_14856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4959} __const_udelay(4295000);
    goto corral_source_split_14857;

  corral_source_split_14857:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb6:
    assume $i4 == 1;
    goto corral_source_split_14700;

  corral_source_split_14700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4895} rtl8225_write_phy_ofdm($p0, 23, 86);
    goto corral_source_split_14701;

  corral_source_split_14701:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb129, $bb130;

  $bb130:
    assume !(1 == 1);
    goto corral_source_split_14840;

  corral_source_split_14840:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4953} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4952} rtl8225_write_phy_ofdm($p0, 36, $sub.i8(0, 90));
    goto corral_source_split_14842;

  corral_source_split_14842:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb135, $bb136;

  $bb136:
    assume !(1 == 1);
    goto corral_source_split_14847;

  corral_source_split_14847:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4956} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4955} rtl8225_write_phy_ofdm($p0, 5, $sub.i8(0, 4));
    goto corral_source_split_14849;

  corral_source_split_14849:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb141, $bb142;

  $bb142:
    assume !(1 == 1);
    goto corral_source_split_14854;

  corral_source_split_14854:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4958} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb141:
    assume 1 == 1;
    goto corral_source_split_14851;

  corral_source_split_14851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4957} __const_udelay(4295000);
    goto corral_source_split_14852;

  corral_source_split_14852:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb135:
    assume 1 == 1;
    goto corral_source_split_14844;

  corral_source_split_14844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4954} __const_udelay(4295000);
    goto corral_source_split_14845;

  corral_source_split_14845:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb129:
    assume 1 == 1;
    goto corral_source_split_14837;

  corral_source_split_14837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4951} __const_udelay(4295000);
    goto corral_source_split_14838;

  corral_source_split_14838:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb4:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i1, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i6 == 1);
    goto corral_source_split_14709;

  corral_source_split_14709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4898} rtl8225_write_phy_ofdm($p0, 23, 86);
    goto corral_source_split_14710;

  corral_source_split_14710:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb111, $bb112;

  $bb112:
    assume !(1 == 1);
    goto corral_source_split_14821;

  corral_source_split_14821:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4945} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4944} rtl8225_write_phy_ofdm($p0, 36, $sub.i8(0, 106));
    goto corral_source_split_14823;

  corral_source_split_14823:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb117, $bb118;

  $bb118:
    assume !(1 == 1);
    goto corral_source_split_14828;

  corral_source_split_14828:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4948} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4947} rtl8225_write_phy_ofdm($p0, 5, $sub.i8(0, 4));
    goto corral_source_split_14830;

  corral_source_split_14830:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb123, $bb124;

  $bb124:
    assume !(1 == 1);
    goto corral_source_split_14835;

  corral_source_split_14835:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4950} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb123:
    assume 1 == 1;
    goto corral_source_split_14832;

  corral_source_split_14832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4949} __const_udelay(4295000);
    goto corral_source_split_14833;

  corral_source_split_14833:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb117:
    assume 1 == 1;
    goto corral_source_split_14825;

  corral_source_split_14825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4946} __const_udelay(4295000);
    goto corral_source_split_14826;

  corral_source_split_14826:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb111:
    assume 1 == 1;
    goto corral_source_split_14818;

  corral_source_split_14818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4943} __const_udelay(4295000);
    goto corral_source_split_14819;

  corral_source_split_14819:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb11:
    assume $i6 == 1;
    goto corral_source_split_14706;

  corral_source_split_14706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4897} rtl8225_write_phy_ofdm($p0, 23, 70);
    goto corral_source_split_14707;

  corral_source_split_14707:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb93, $bb94;

  $bb94:
    assume !(1 == 1);
    goto corral_source_split_14802;

  corral_source_split_14802:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4937} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4936} rtl8225_write_phy_ofdm($p0, 36, $sub.i8(0, 106));
    goto corral_source_split_14804;

  corral_source_split_14804:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb99, $bb100;

  $bb100:
    assume !(1 == 1);
    goto corral_source_split_14809;

  corral_source_split_14809:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4940} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4939} rtl8225_write_phy_ofdm($p0, 5, $sub.i8(0, 5));
    goto corral_source_split_14811;

  corral_source_split_14811:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb105, $bb106;

  $bb106:
    assume !(1 == 1);
    goto corral_source_split_14816;

  corral_source_split_14816:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4942} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb105:
    assume 1 == 1;
    goto corral_source_split_14813;

  corral_source_split_14813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4941} __const_udelay(4295000);
    goto corral_source_split_14814;

  corral_source_split_14814:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb99:
    assume 1 == 1;
    goto corral_source_split_14806;

  corral_source_split_14806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4938} __const_udelay(4295000);
    goto corral_source_split_14807;

  corral_source_split_14807:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb93:
    assume 1 == 1;
    goto corral_source_split_14799;

  corral_source_split_14799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4935} __const_udelay(4295000);
    goto corral_source_split_14800;

  corral_source_split_14800:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb2:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i8 == 1);
    goto corral_source_split_14715;

  corral_source_split_14715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4900} rtl8225_write_phy_ofdm($p0, 23, 70);
    goto corral_source_split_14716;

  corral_source_split_14716:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb75, $bb76;

  $bb76:
    assume !(1 == 1);
    goto corral_source_split_14783;

  corral_source_split_14783:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4929} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4928} rtl8225_write_phy_ofdm($p0, 36, $sub.i8(0, 122));
    goto corral_source_split_14785;

  corral_source_split_14785:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb81, $bb82;

  $bb82:
    assume !(1 == 1);
    goto corral_source_split_14790;

  corral_source_split_14790:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4932} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4931} rtl8225_write_phy_ofdm($p0, 5, $sub.i8(0, 5));
    goto corral_source_split_14792;

  corral_source_split_14792:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb87, $bb88;

  $bb88:
    assume !(1 == 1);
    goto corral_source_split_14797;

  corral_source_split_14797:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4934} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb87:
    assume 1 == 1;
    goto corral_source_split_14794;

  corral_source_split_14794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4933} __const_udelay(4295000);
    goto corral_source_split_14795;

  corral_source_split_14795:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb81:
    assume 1 == 1;
    goto corral_source_split_14787;

  corral_source_split_14787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4930} __const_udelay(4295000);
    goto corral_source_split_14788;

  corral_source_split_14788:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb75:
    assume 1 == 1;
    goto corral_source_split_14780;

  corral_source_split_14780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4927} __const_udelay(4295000);
    goto corral_source_split_14781;

  corral_source_split_14781:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb15:
    assume $i8 == 1;
    goto corral_source_split_14712;

  corral_source_split_14712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4899} rtl8225_write_phy_ofdm($p0, 23, 54);
    goto corral_source_split_14713;

  corral_source_split_14713:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb57, $bb58;

  $bb58:
    assume !(1 == 1);
    goto corral_source_split_14764;

  corral_source_split_14764:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4921} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4920} rtl8225_write_phy_ofdm($p0, 36, $sub.i8(0, 122));
    goto corral_source_split_14766;

  corral_source_split_14766:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb63, $bb64;

  $bb64:
    assume !(1 == 1);
    goto corral_source_split_14771;

  corral_source_split_14771:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4924} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4923} rtl8225_write_phy_ofdm($p0, 5, $sub.i8(0, 5));
    goto corral_source_split_14773;

  corral_source_split_14773:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb69, $bb70;

  $bb70:
    assume !(1 == 1);
    goto corral_source_split_14778;

  corral_source_split_14778:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4926} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb69:
    assume 1 == 1;
    goto corral_source_split_14775;

  corral_source_split_14775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4925} __const_udelay(4295000);
    goto corral_source_split_14776;

  corral_source_split_14776:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb63:
    assume 1 == 1;
    goto corral_source_split_14768;

  corral_source_split_14768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4922} __const_udelay(4295000);
    goto corral_source_split_14769;

  corral_source_split_14769:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb57:
    assume 1 == 1;
    goto corral_source_split_14761;

  corral_source_split_14761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4919} __const_udelay(4295000);
    goto corral_source_split_14762;

  corral_source_split_14762:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb13:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb17:
    assume $i9 == 1;
    goto corral_source_split_14718;

  corral_source_split_14718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4901} rtl8225_write_phy_ofdm($p0, 23, 54);
    goto corral_source_split_14719;

  corral_source_split_14719:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb39, $bb40;

  $bb40:
    assume !(1 == 1);
    goto corral_source_split_14745;

  corral_source_split_14745:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4913} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4912} rtl8225_write_phy_ofdm($p0, 36, $sub.i8(0, 122));
    goto corral_source_split_14747;

  corral_source_split_14747:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb45, $bb46;

  $bb46:
    assume !(1 == 1);
    goto corral_source_split_14752;

  corral_source_split_14752:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4916} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4915} rtl8225_write_phy_ofdm($p0, 5, $sub.i8(0, 6));
    goto corral_source_split_14754;

  corral_source_split_14754:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb51, $bb52;

  $bb52:
    assume !(1 == 1);
    goto corral_source_split_14759;

  corral_source_split_14759:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4918} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb51:
    assume 1 == 1;
    goto corral_source_split_14756;

  corral_source_split_14756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4917} __const_udelay(4295000);
    goto corral_source_split_14757;

  corral_source_split_14757:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb45:
    assume 1 == 1;
    goto corral_source_split_14749;

  corral_source_split_14749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4914} __const_udelay(4295000);
    goto corral_source_split_14750;

  corral_source_split_14750:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb39:
    assume 1 == 1;
    goto corral_source_split_14742;

  corral_source_split_14742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4911} __const_udelay(4295000);
    goto corral_source_split_14743;

  corral_source_split_14743:
    assume {:verifier.code 0} true;
    goto $bb41;
}



const write_sa2400: ref;

axiom write_sa2400 == $sub.ref(0, 418610);

procedure write_sa2400($p0: ref, $i1: i8, $i2: i32);
  free requires assertsPassed;



implementation write_sa2400($p0: ref, $i1: i8, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4967} {:cexpr "write_sa2400:arg:addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 4968} {:cexpr "write_sa2400:arg:data"} boogie_si_record_i32($i2);
    goto corral_source_split_14875;

  corral_source_split_14875:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_14876;

  corral_source_split_14876:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_14877;

  corral_source_split_14877:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_14878;

  corral_source_split_14878:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i1);
    goto corral_source_split_14879;

  corral_source_split_14879:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 15);
    goto corral_source_split_14880;

  corral_source_split_14880:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32($i7, 24);
    goto corral_source_split_14881;

  corral_source_split_14881:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i8, $sub.i32(0, 1342177280));
    call {:si_unique_call 4969} {:cexpr "phy_config"} boogie_si_record_i32($i9);
    goto corral_source_split_14882;

  corral_source_split_14882:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i2, 16777215);
    goto corral_source_split_14883;

  corral_source_split_14883:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, $i9);
    call {:si_unique_call 4970} {:cexpr "phy_config"} boogie_si_record_i32($i11);
    goto corral_source_split_14884;

  corral_source_split_14884:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_14885;

  corral_source_split_14885:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_14886;

  corral_source_split_14886:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 256)), $mul.ref(128, 1));
    goto corral_source_split_14887;

  corral_source_split_14887:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_14888;

  corral_source_split_14888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4971} rtl818x_iowrite32($p5, $p15, $i11);
    goto corral_source_split_14889;

  corral_source_split_14889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4972} msleep(3);
    goto corral_source_split_14890;

  corral_source_split_14890:
    assume {:verifier.code 0} true;
    return;
}



const sa2400_write_phy_antenna: ref;

axiom sa2400_write_phy_antenna == $sub.ref(0, 419642);

procedure sa2400_write_phy_antenna($p0: ref, $i1: i16);
  free requires assertsPassed;



implementation sa2400_write_phy_antenna($p0: ref, $i1: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $i19: i8;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4973} {:cexpr "sa2400_write_phy_antenna:arg:chan"} boogie_si_record_i16($i1);
    goto corral_source_split_14892;

  corral_source_split_14892:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_14893;

  corral_source_split_14893:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_14894;

  corral_source_split_14894:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_14895;

  corral_source_split_14895:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2192)), $mul.ref(2168, 1));
    goto corral_source_split_14896;

  corral_source_split_14896:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_14897;

  corral_source_split_14897:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_14898;

  corral_source_split_14898:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 2);
    goto corral_source_split_14899;

  corral_source_split_14899:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_14900;

  corral_source_split_14900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i13 := $sub.i8(0, 111);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14907;

  corral_source_split_14907:
    assume {:verifier.code 0} true;
    $i14 := $sext.i16.i32($i1);
    goto corral_source_split_14908;

  corral_source_split_14908:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 14);
    goto corral_source_split_14909;

  corral_source_split_14909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i19 := $i13;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_14916;

  corral_source_split_14916:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_14917;

  corral_source_split_14917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4976} rtl8180_write_phy($p0, 16, $i20);
    goto corral_source_split_14918;

  corral_source_split_14918:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_14911;

  corral_source_split_14911:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i13);
    goto corral_source_split_14912;

  corral_source_split_14912:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i16, 12);
    goto corral_source_split_14913;

  corral_source_split_14913:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    call {:si_unique_call 4975} {:cexpr "ant"} boogie_si_record_i8($i18);
    goto corral_source_split_14914;

  corral_source_split_14914:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_14902;

  corral_source_split_14902:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($sub.i8(0, 111));
    goto corral_source_split_14903;

  corral_source_split_14903:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 64);
    goto corral_source_split_14904;

  corral_source_split_14904:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    call {:si_unique_call 4974} {:cexpr "ant"} boogie_si_record_i8($i12);
    goto corral_source_split_14905;

  corral_source_split_14905:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 420674);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 4977} $r := $malloc($i0);
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 421706);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.52;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4978} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 4979} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_14920;

  corral_source_split_14920:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_14921;

  corral_source_split_14921:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.52;
    call {:si_unique_call 4980} cmdloc_dummy_var_21 := $memset.i8(cmdloc_dummy_var_20, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.52 := cmdloc_dummy_var_21;
    goto corral_source_split_14922;

  corral_source_split_14922:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const work_init_3: ref;

axiom work_init_3 == $sub.ref(0, 422738);

procedure work_init_3();
  free requires assertsPassed;
  modifies $M.19, $M.21, $M.23, $M.25;



implementation work_init_3()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14924;

  corral_source_split_14924:
    assume {:verifier.code 0} true;
    $M.19 := 0;
    call {:si_unique_call 4981} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(0);
    goto corral_source_split_14925;

  corral_source_split_14925:
    assume {:verifier.code 0} true;
    $M.21 := 0;
    call {:si_unique_call 4982} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(0);
    goto corral_source_split_14926;

  corral_source_split_14926:
    assume {:verifier.code 0} true;
    $M.23 := 0;
    call {:si_unique_call 4983} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(0);
    goto corral_source_split_14927;

  corral_source_split_14927:
    assume {:verifier.code 0} true;
    $M.25 := 0;
    call {:si_unique_call 4984} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(0);
    goto corral_source_split_14928;

  corral_source_split_14928:
    assume {:verifier.code 0} true;
    return;
}



const choose_interrupt_2: ref;

axiom choose_interrupt_2 == $sub.ref(0, 423770);

procedure choose_interrupt_2();
  free requires assertsPassed;
  modifies $M.27, $M.0, $M.41, $CurrAddr, assertsPassed;



implementation choose_interrupt_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14930;

  corral_source_split_14930:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4985} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4986} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 4987} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4996} ldv_stop();
    goto corral_source_split_14960;

  corral_source_split_14960:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_14939;

  corral_source_split_14939:
    assume {:verifier.code 0} true;
    $i18 := $M.33;
    goto corral_source_split_14940;

  corral_source_split_14940:
    assume {:verifier.code 0} true;
    $i19 := $M.34;
    goto corral_source_split_14941;

  corral_source_split_14941:
    assume {:verifier.code 0} true;
    $p20 := $M.39;
    goto corral_source_split_14942;

  corral_source_split_14942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4990} $i21 := ldv_irq_2($i18, $i19, $p20);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_14943;

  corral_source_split_14943:
    assume {:verifier.code 0} true;
    $M.27 := $i21;
    call {:si_unique_call 4991} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i21);
    goto corral_source_split_14944;

  corral_source_split_14944:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_14932;

  corral_source_split_14932:
    assume {:verifier.code 0} true;
    $i14 := $M.31;
    goto corral_source_split_14933;

  corral_source_split_14933:
    assume {:verifier.code 0} true;
    $i15 := $M.32;
    goto corral_source_split_14934;

  corral_source_split_14934:
    assume {:verifier.code 0} true;
    $p16 := $M.38;
    goto corral_source_split_14935;

  corral_source_split_14935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4988} $i17 := ldv_irq_2($i14, $i15, $p16);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_14936;

  corral_source_split_14936:
    assume {:verifier.code 0} true;
    $M.27 := $i17;
    call {:si_unique_call 4989} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i17);
    goto corral_source_split_14937;

  corral_source_split_14937:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_14946;

  corral_source_split_14946:
    assume {:verifier.code 0} true;
    $i10 := $M.29;
    goto corral_source_split_14947;

  corral_source_split_14947:
    assume {:verifier.code 0} true;
    $i11 := $M.30;
    goto corral_source_split_14948;

  corral_source_split_14948:
    assume {:verifier.code 0} true;
    $p12 := $M.37;
    goto corral_source_split_14949;

  corral_source_split_14949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4992} $i13 := ldv_irq_2($i10, $i11, $p12);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_14950;

  corral_source_split_14950:
    assume {:verifier.code 0} true;
    $M.27 := $i13;
    call {:si_unique_call 4993} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i13);
    goto corral_source_split_14951;

  corral_source_split_14951:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_14953;

  corral_source_split_14953:
    assume {:verifier.code 0} true;
    $i6 := $M.27;
    goto corral_source_split_14954;

  corral_source_split_14954:
    assume {:verifier.code 0} true;
    $i7 := $M.28;
    goto corral_source_split_14955;

  corral_source_split_14955:
    assume {:verifier.code 0} true;
    $p8 := $M.36;
    goto corral_source_split_14956;

  corral_source_split_14956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4994} $i9 := ldv_irq_2($i6, $i7, $p8);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_14957;

  corral_source_split_14957:
    assume {:verifier.code 0} true;
    $M.27 := $i9;
    call {:si_unique_call 4995} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i9);
    goto corral_source_split_14958;

  corral_source_split_14958:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_148:
    assume !assertsPassed;
    return;
}



const ldv_irq_2: ref;

axiom ldv_irq_2 == $sub.ref(0, 424802);

procedure ldv_irq_2($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.41, $CurrAddr, assertsPassed;



implementation ldv_irq_2($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4997} {:cexpr "ldv_irq_2:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 4998} {:cexpr "ldv_irq_2:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_14962;

  corral_source_split_14962:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4999} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 5000} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 5001} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_14963;

  corral_source_split_14963:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i0, 0);
    goto corral_source_split_14964;

  corral_source_split_14964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_14966;

  corral_source_split_14966:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5002} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 5003} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 5004} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5009} ldv_stop();
    goto corral_source_split_14976;

  corral_source_split_14976:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_14968;

  corral_source_split_14968:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 1);
    goto corral_source_split_14969;

  corral_source_split_14969:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_14971;

  corral_source_split_14971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5005} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_14972;

  corral_source_split_14972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5006} $i8 := rtl8180_interrupt($i1, $p2);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    call {:si_unique_call 5007} {:cexpr "irq_retval"} boogie_si_record_i32($i8);
    goto corral_source_split_14973;

  corral_source_split_14973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5008} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_14974;

  corral_source_split_14974:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_151:
    assume !assertsPassed;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 425834);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14978;

  corral_source_split_14978:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const choose_interrupt_1: ref;

axiom choose_interrupt_1 == $sub.ref(0, 426866);

procedure choose_interrupt_1();
  free requires assertsPassed;
  modifies $M.54, $M.41, $M.0, $CurrAddr, assertsPassed;



implementation choose_interrupt_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14980;

  corral_source_split_14980:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5010} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5011} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 5012} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5021} ldv_stop();
    goto corral_source_split_15010;

  corral_source_split_15010:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_14989;

  corral_source_split_14989:
    assume {:verifier.code 0} true;
    $i18 := $M.63;
    goto corral_source_split_14990;

  corral_source_split_14990:
    assume {:verifier.code 0} true;
    $i19 := $M.64;
    goto corral_source_split_14991;

  corral_source_split_14991:
    assume {:verifier.code 0} true;
    $p20 := $M.65;
    goto corral_source_split_14992;

  corral_source_split_14992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5015} $i21 := ldv_irq_1($i18, $i19, $p20);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_14993;

  corral_source_split_14993:
    assume {:verifier.code 0} true;
    $M.54 := $i21;
    call {:si_unique_call 5016} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i21);
    goto corral_source_split_14994;

  corral_source_split_14994:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_14982;

  corral_source_split_14982:
    assume {:verifier.code 0} true;
    $i14 := $M.60;
    goto corral_source_split_14983;

  corral_source_split_14983:
    assume {:verifier.code 0} true;
    $i15 := $M.61;
    goto corral_source_split_14984;

  corral_source_split_14984:
    assume {:verifier.code 0} true;
    $p16 := $M.62;
    goto corral_source_split_14985;

  corral_source_split_14985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5013} $i17 := ldv_irq_1($i14, $i15, $p16);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_14986;

  corral_source_split_14986:
    assume {:verifier.code 0} true;
    $M.54 := $i17;
    call {:si_unique_call 5014} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i17);
    goto corral_source_split_14987;

  corral_source_split_14987:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_14996;

  corral_source_split_14996:
    assume {:verifier.code 0} true;
    $i10 := $M.57;
    goto corral_source_split_14997;

  corral_source_split_14997:
    assume {:verifier.code 0} true;
    $i11 := $M.58;
    goto corral_source_split_14998;

  corral_source_split_14998:
    assume {:verifier.code 0} true;
    $p12 := $M.59;
    goto corral_source_split_14999;

  corral_source_split_14999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5017} $i13 := ldv_irq_1($i10, $i11, $p12);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_15000;

  corral_source_split_15000:
    assume {:verifier.code 0} true;
    $M.54 := $i13;
    call {:si_unique_call 5018} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i13);
    goto corral_source_split_15001;

  corral_source_split_15001:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_15003;

  corral_source_split_15003:
    assume {:verifier.code 0} true;
    $i6 := $M.54;
    goto corral_source_split_15004;

  corral_source_split_15004:
    assume {:verifier.code 0} true;
    $i7 := $M.55;
    goto corral_source_split_15005;

  corral_source_split_15005:
    assume {:verifier.code 0} true;
    $p8 := $M.56;
    goto corral_source_split_15006;

  corral_source_split_15006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5019} $i9 := ldv_irq_1($i6, $i7, $p8);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_15007;

  corral_source_split_15007:
    assume {:verifier.code 0} true;
    $M.54 := $i9;
    call {:si_unique_call 5020} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i9);
    goto corral_source_split_15008;

  corral_source_split_15008:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_163:
    assume !assertsPassed;
    return;
}



const ldv_irq_1: ref;

axiom ldv_irq_1 == $sub.ref(0, 427898);

procedure ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.0, $CurrAddr, assertsPassed;



implementation ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5022} {:cexpr "ldv_irq_1:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 5023} {:cexpr "ldv_irq_1:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_15012;

  corral_source_split_15012:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5024} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 5025} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 5026} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_15013;

  corral_source_split_15013:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i0, 0);
    goto corral_source_split_15014;

  corral_source_split_15014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_15016;

  corral_source_split_15016:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5027} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 5028} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 5029} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5034} ldv_stop();
    goto corral_source_split_15026;

  corral_source_split_15026:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_15018;

  corral_source_split_15018:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 1);
    goto corral_source_split_15019;

  corral_source_split_15019:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_15021;

  corral_source_split_15021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5030} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_15022;

  corral_source_split_15022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5031} $i8 := rtl8187se_interrupt($i1, $p2);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    call {:si_unique_call 5032} {:cexpr "irq_retval"} boogie_si_record_i32($i8);
    goto corral_source_split_15023;

  corral_source_split_15023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5033} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_15024;

  corral_source_split_15024:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_166:
    assume !assertsPassed;
    return;
}



const ldv_pci_driver_10: ref;

axiom ldv_pci_driver_10 == $sub.ref(0, 428930);

procedure ldv_pci_driver_10();
  free requires assertsPassed;
  modifies $M.66, $M.0, $CurrAddr;



implementation ldv_pci_driver_10()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15028;

  corral_source_split_15028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5035} $p0 := ldv_init_zalloc(2976);
    goto corral_source_split_15029;

  corral_source_split_15029:
    assume {:verifier.code 0} true;
    goto corral_source_split_15030;

  corral_source_split_15030:
    assume {:verifier.code 0} true;
    $M.66 := $p0;
    goto corral_source_split_15031;

  corral_source_split_15031:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_3: ref;

axiom invoke_work_3 == $sub.ref(0, 429962);

procedure invoke_work_3();
  free requires assertsPassed;
  modifies $M.19, $M.0, $M.21, $M.23, $M.25, $M.41, $M.20, $M.22, $M.24, $M.26;



implementation invoke_work_3()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15033;

  corral_source_split_15033:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5036} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5037} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 5038} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5051} ldv_stop();
    goto corral_source_split_15087;

  corral_source_split_15087:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_15039;

  corral_source_split_15039:
    assume {:verifier.code 0} true;
    $i21 := $M.25;
    goto corral_source_split_15040;

  corral_source_split_15040:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_15041;

  corral_source_split_15041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_15083;

  corral_source_split_15083:
    assume {:verifier.code 0} true;
    $i23 := $M.25;
    goto corral_source_split_15084;

  corral_source_split_15084:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_15085;

  corral_source_split_15085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.25 := 4;
    call {:si_unique_call 5048} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(4);
    goto corral_source_split_15078;

  corral_source_split_15078:
    assume {:verifier.code 0} true;
    $p25 := $M.20;
    goto corral_source_split_15079;

  corral_source_split_15079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5049} rtl8180_beacon_work($p25);
    goto corral_source_split_15080;

  corral_source_split_15080:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 5050} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(1);
    goto corral_source_split_15081;

  corral_source_split_15081:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_15035;

  corral_source_split_15035:
    assume {:verifier.code 0} true;
    $i16 := $M.23;
    goto corral_source_split_15036;

  corral_source_split_15036:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_15037;

  corral_source_split_15037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_15074;

  corral_source_split_15074:
    assume {:verifier.code 0} true;
    $i18 := $M.23;
    goto corral_source_split_15075;

  corral_source_split_15075:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_15076;

  corral_source_split_15076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.23 := 4;
    call {:si_unique_call 5045} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(4);
    goto corral_source_split_15069;

  corral_source_split_15069:
    assume {:verifier.code 0} true;
    $p20 := $M.20;
    goto corral_source_split_15070;

  corral_source_split_15070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5046} rtl8180_beacon_work($p20);
    goto corral_source_split_15071;

  corral_source_split_15071:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 5047} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(1);
    goto corral_source_split_15072;

  corral_source_split_15072:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_15043;

  corral_source_split_15043:
    assume {:verifier.code 0} true;
    $i11 := $M.21;
    goto corral_source_split_15044;

  corral_source_split_15044:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_15045;

  corral_source_split_15045:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_15065;

  corral_source_split_15065:
    assume {:verifier.code 0} true;
    $i13 := $M.21;
    goto corral_source_split_15066;

  corral_source_split_15066:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_15067;

  corral_source_split_15067:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.21 := 4;
    call {:si_unique_call 5042} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(4);
    goto corral_source_split_15060;

  corral_source_split_15060:
    assume {:verifier.code 0} true;
    $p15 := $M.20;
    goto corral_source_split_15061;

  corral_source_split_15061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5043} rtl8180_beacon_work($p15);
    goto corral_source_split_15062;

  corral_source_split_15062:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 5044} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(1);
    goto corral_source_split_15063;

  corral_source_split_15063:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_15047;

  corral_source_split_15047:
    assume {:verifier.code 0} true;
    $i6 := $M.19;
    goto corral_source_split_15048;

  corral_source_split_15048:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_15049;

  corral_source_split_15049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_15056;

  corral_source_split_15056:
    assume {:verifier.code 0} true;
    $i8 := $M.19;
    goto corral_source_split_15057;

  corral_source_split_15057:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_15058;

  corral_source_split_15058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.19 := 4;
    call {:si_unique_call 5039} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(4);
    goto corral_source_split_15051;

  corral_source_split_15051:
    assume {:verifier.code 0} true;
    $p10 := $M.20;
    goto corral_source_split_15052;

  corral_source_split_15052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5040} rtl8180_beacon_work($p10);
    goto corral_source_split_15053;

  corral_source_split_15053:
    assume {:verifier.code 0} true;
    $M.19 := 1;
    call {:si_unique_call 5041} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(1);
    goto corral_source_split_15054;

  corral_source_split_15054:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const main: ref;

axiom main == $sub.ref(0, 430994);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.52, $M.67, $M.8, $M.19, $M.21, $M.23, $M.25, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.0, $M.79, $M.27, $M.54, $M.80, $M.81, $M.5, $M.83, $M.84, $M.85, $M.86, $M.31, $M.29, $M.63, $M.60, $M.57, $M.33, $M.7, $M.28, $M.36, $M.30, $M.37, $M.32, $M.38, $M.34, $M.39, $M.20, $M.22, $M.24, $M.26, $M.55, $M.56, $M.58, $M.59, $M.61, $M.62, $M.64, $M.65, $M.66, $M.82, $M.90, $M.89, $M.49, $M.50, $M.93, $M.94, $M.95, $M.4, $M.3, $M.2, $M.1, $M.44, $M.43, $M.96, $M.97, $M.98, $M.42, $M.48, $M.47, $M.46, $M.45, $M.187, $M.188, $M.18, $M.17, $M.40, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.195, $M.87, $M.88, $M.92, $M.91, $M.41, $CurrAddr, $M.9, $M.10, $M.11, $M.12, $M.13, $M.6, $M.51, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;
  var $p40: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i84: i32;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $i102: i32;
  var $i103: i64;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i107: i32;
  var $i108: i64;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $i120: i32;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $i124: i32;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $i136: i16;
  var $i137: i32;
  var $i138: i16;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $i143: i16;
  var $i144: i32;
  var $i145: i16;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $i150: i32;
  var $i151: i32;
  var $i152: i32;
  var $i153: i1;
  var $p154: ref;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $i158: i32;
  var $i159: i1;
  var $p160: ref;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $i164: i32;
  var $i165: i1;
  var $i166: i32;
  var $i167: i1;
  var $i168: i32;
  var $i169: i1;
  var $i170: i32;
  var $i171: i1;
  var $i172: i32;
  var $i173: i1;
  var $i174: i32;
  var $i175: i1;
  var $i176: i32;
  var $i177: i1;
  var $i178: i32;
  var $i179: i1;
  var $i180: i32;
  var $i181: i1;
  var $i182: i1;
  var $i183: i1;
  var $i184: i32;
  var $i185: i1;
  var $i186: i32;
  var $i187: i1;
  var $i188: i32;
  var $i189: i1;
  var $i190: i32;
  var $i191: i32;
  var $i192: i1;
  var $i193: i32;
  var $i194: i1;
  var $i195: i32;
  var $i196: i1;
  var $i197: i32;
  var $i198: i1;
  var $i199: i1;
  var $i200: i1;
  var $i201: i1;
  var $i202: i1;
  var $i203: i1;
  var $i204: i1;
  var $i205: i1;
  var $i206: i32;
  var $i207: i1;
  var $p208: ref;
  var $i209: i32;
  var $i210: i32;
  var $i211: i1;
  var $i212: i32;
  var $i213: i32;
  var $i214: i32;
  var $i215: i1;
  var $i216: i32;
  var $i217: i1;
  var $p218: ref;
  var $p219: ref;
  var $i220: i32;
  var $i221: i32;
  var $i222: i32;
  var $i223: i1;
  var $i224: i32;
  var $i225: i1;
  var $p226: ref;
  var $i227: i32;
  var $i228: i1;
  var $p229: ref;
  var $i230: i32;
  var $i231: i1;
  var $p232: ref;
  var $i233: i32;
  var $i234: i1;
  var $p235: ref;
  var $i236: i32;
  var $i237: i1;
  var $p238: ref;
  var $i239: i32;
  var $i240: i32;
  var $i241: i1;
  var $i242: i32;
  var $i243: i1;
  var $p244: ref;
  var $i245: i32;
  var $i246: i32;
  var $i247: i1;
  var $i248: i32;
  var $i249: i1;
  var $p250: ref;
  var $i251: i32;
  var $i252: i32;
  var $i253: i1;
  var $i254: i32;
  var $i255: i1;
  var $i256: i32;
  var $i257: i32;
  var $i258: i1;
  var $i259: i32;
  var $i260: i1;
  var $i261: i32;
  var $i262: i32;
  var $i263: i1;
  var $i264: i32;
  var $i265: i1;
  var $i266: i32;
  var $i267: i32;
  var $i268: i1;
  var $i269: i32;
  var $i270: i1;
  var $i272: i32;
  var $i273: i1;
  var $i275: i32;
  var $i276: i1;
  var $i278: i32;
  var $i279: i1;
  var $i281: i32;
  var $i282: i1;
  var vslice_dummy_var_153: ref;
  var vslice_dummy_var_154: ref;
  var vslice_dummy_var_155: ref;
  var vslice_dummy_var_156: ref;
  var vslice_dummy_var_157: ref;
  var vslice_dummy_var_158: ref;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i64;
  var vslice_dummy_var_162: i64;
  var vslice_dummy_var_163: i64;
  var vslice_dummy_var_164: i64;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;

  $bb0:
    call {:si_unique_call 5052} $initialize();
    goto corral_source_split_15089;

  corral_source_split_15089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5053} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 5054} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 5055} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 5056} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 5057} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 5058} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 5059} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_15090;

  corral_source_split_15090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5060} $p6 := ldv_init_zalloc(240);
    goto corral_source_split_15091;

  corral_source_split_15091:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_15092;

  corral_source_split_15092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5061} $p8 := ldv_init_zalloc(296);
    goto corral_source_split_15093;

  corral_source_split_15093:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_15094;

  corral_source_split_15094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5062} $p10 := ldv_init_zalloc(296);
    goto corral_source_split_15095;

  corral_source_split_15095:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_15096;

  corral_source_split_15096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5063} $p12 := ldv_init_zalloc(296);
    goto corral_source_split_15097;

  corral_source_split_15097:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_15098;

  corral_source_split_15098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5064} $p14 := ldv_init_zalloc(296);
    goto corral_source_split_15099;

  corral_source_split_15099:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_15100;

  corral_source_split_15100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5065} $p16 := ldv_init_zalloc(296);
    goto corral_source_split_15101;

  corral_source_split_15101:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_15102;

  corral_source_split_15102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5066} $p18 := ldv_init_zalloc(8);
    goto corral_source_split_15103;

  corral_source_split_15103:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_15104;

  corral_source_split_15104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5067} $p20 := ldv_init_zalloc(10);
    goto corral_source_split_15105;

  corral_source_split_15105:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_15106;

  corral_source_split_15106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5068} $p22 := ldv_init_zalloc(4);
    goto corral_source_split_15107;

  corral_source_split_15107:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_15108;

  corral_source_split_15108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5069} $p24 := ldv_init_zalloc(232);
    goto corral_source_split_15109;

  corral_source_split_15109:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_15110;

  corral_source_split_15110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5070} $p26 := ldv_init_zalloc(24);
    goto corral_source_split_15111;

  corral_source_split_15111:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_15112;

  corral_source_split_15112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5071} $p28 := ldv_init_zalloc(32);
    goto corral_source_split_15113;

  corral_source_split_15113:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_15114;

  corral_source_split_15114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5072} ldv_initialize();
    goto corral_source_split_15115;

  corral_source_split_15115:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p0);
    goto corral_source_split_15116;

  corral_source_split_15116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5073} vslice_dummy_var_153 := ldv_memset($p30, 0, 4);
    goto corral_source_split_15117;

  corral_source_split_15117:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p1);
    goto corral_source_split_15118;

  corral_source_split_15118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5074} vslice_dummy_var_154 := ldv_memset($p32, 0, 2);
    goto corral_source_split_15119;

  corral_source_split_15119:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p2);
    goto corral_source_split_15120;

  corral_source_split_15120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5075} vslice_dummy_var_155 := ldv_memset($p34, 0, 4);
    goto corral_source_split_15121;

  corral_source_split_15121:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p3);
    goto corral_source_split_15122;

  corral_source_split_15122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5076} vslice_dummy_var_156 := ldv_memset($p36, 0, 4);
    goto corral_source_split_15123;

  corral_source_split_15123:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p4);
    goto corral_source_split_15124;

  corral_source_split_15124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5077} vslice_dummy_var_157 := ldv_memset($p38, 0, 8);
    goto corral_source_split_15125;

  corral_source_split_15125:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p5);
    goto corral_source_split_15126;

  corral_source_split_15126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5078} vslice_dummy_var_158 := ldv_memset($p40, 0, 4);
    goto corral_source_split_15127;

  corral_source_split_15127:
    assume {:verifier.code 0} true;
    $M.67 := 0;
    call {:si_unique_call 5079} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_15128;

  corral_source_split_15128:
    assume {:verifier.code 0} true;
    $M.8 := 0;
    call {:si_unique_call 5080} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    goto corral_source_split_15129;

  corral_source_split_15129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5081} work_init_3();
    goto corral_source_split_15130;

  corral_source_split_15130:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 5082} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_15131;

  corral_source_split_15131:
    assume {:verifier.code 0} true;
    $M.69 := 0;
    call {:si_unique_call 5083} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_15132;

  corral_source_split_15132:
    assume {:verifier.code 0} true;
    $M.70 := 0;
    call {:si_unique_call 5084} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_15133;

  corral_source_split_15133:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 5085} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_15134;

  corral_source_split_15134:
    assume {:verifier.code 0} true;
    $M.72 := 0;
    call {:si_unique_call 5086} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_15135;

  corral_source_split_15135:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 5087} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_15136;

  corral_source_split_15136:
    assume {:verifier.code 0} true;
    $M.74 := 0;
    call {:si_unique_call 5088} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_15137;

  corral_source_split_15137:
    assume {:verifier.code 0} true;
    $M.75 := 0;
    call {:si_unique_call 5089} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_15138;

  corral_source_split_15138:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 5090} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_15139;

  corral_source_split_15139:
    assume {:verifier.code 0} true;
    $M.77 := 0;
    call {:si_unique_call 5091} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_15140;

  corral_source_split_15140:
    assume {:verifier.code 0} true;
    $M.78 := 0;
    call {:si_unique_call 5092} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_15141;

  corral_source_split_15141:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $p75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $p83, $i84, $i86, $i87, $p88, $i89, $i91, $i92, $p93, $i95, $i96, $p97, $i99, $i100, $p101, $i102, $i103, $i104, $i105, $p106, $i107, $i108, $i109, $i110, $p111, $i113, $i114, $p115, $i117, $i118, $p119, $i120, $i121, $i122, $p123, $i124, $i125, $i126, $p127, $i129, $i130, $p131, $i133, $i134, $p135, $i136, $i137, $i138, $i140, $i141, $p142, $i143, $i144, $i145, $i147, $i148, $p149, $i150, $i151, $i152, $i153, $p154, $i155, $i156, $p157, $i158, $i159, $p160, $i161, $i162, $p163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $p208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $p218, $p219, $i220, $i221, $i222, $i223, $i224, $i225, $p226, $i227, $i228, $p229, $i230, $i231, $p232, $i233, $i234, $p235, $i236, $i237, $p238, $i239, $i240, $i241, $i242, $i243, $p244, $i245, $i246, $i247, $i248, $i249, $p250, $i251, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i272, $i273, $i275, $i276, $i278, $i279, $i281, $i282, vslice_dummy_var_159, vslice_dummy_var_160, vslice_dummy_var_161, vslice_dummy_var_162, vslice_dummy_var_163, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170, vslice_dummy_var_171, vslice_dummy_var_172 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p7, $p9, $p11, $p13, $p15, $p17, $p19, $p21, $p23, $p25, $p27, $p29, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $p75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $p83, $i84, $i86, $i87, $p88, $i89, $i91, $i92, $p93, $i95, $i96, $p97, $i99, $i100, $p101, $i102, $i103, $i104, $i105, $p106, $i107, $i108, $i109, $i110, $p111, $i113, $i114, $p115, $i117, $i118, $p119, $i120, $i121, $i122, $p123, $i124, $i125, $i126, $p127, $i129, $i130, $p131, $i133, $i134, $p135, $i136, $i137, $i138, $i140, $i141, $p142, $i143, $i144, $i145, $i147, $i148, $p149, $i150, $i151, $i152, $i153, $p154, $i155, $i156, $p157, $i158, $i159, $p160, $i161, $i162, $p163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $p208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $p218, $p219, $i220, $i221, $i222, $i223, $i224, $i225, $p226, $i227, $i228, $p229, $i230, $i231, $p232, $i233, $i234, $p235, $i236, $i237, $p238, $i239, $i240, $i241, $i242, $i243, $p244, $i245, $i246, $i247, $i248, $i249, $p250, $i251, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i272, $i273, $i275, $i276, $i278, $i279, $i281, $i282, vslice_dummy_var_159, vslice_dummy_var_160, vslice_dummy_var_161, vslice_dummy_var_162, vslice_dummy_var_163, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170, vslice_dummy_var_171, vslice_dummy_var_172);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i42, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i42, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i42, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i42, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i42, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5220} ldv_stop();
    goto corral_source_split_15648;

  corral_source_split_15648:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb33_dummy;

  $bb11:
    assume $i47 == 1;
    goto corral_source_split_15151;

  corral_source_split_15151:
    assume {:verifier.code 0} true;
    $i281 := $M.78;
    goto corral_source_split_15152;

  corral_source_split_15152:
    assume {:verifier.code 0} true;
    $i282 := $ne.i32($i281, 0);
    goto corral_source_split_15153;

  corral_source_split_15153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb279:
    assume $i282 == 1;
    goto corral_source_split_15645;

  corral_source_split_15645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5219} ldv_main_exported_5();
    goto corral_source_split_15646;

  corral_source_split_15646:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb9:
    assume $i46 == 1;
    goto corral_source_split_15147;

  corral_source_split_15147:
    assume {:verifier.code 0} true;
    $i195 := $M.77;
    goto corral_source_split_15148;

  corral_source_split_15148:
    assume {:verifier.code 0} true;
    $i196 := $ne.i32($i195, 0);
    goto corral_source_split_15149;

  corral_source_split_15149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb180:
    assume $i196 == 1;
    goto corral_source_split_15464;

  corral_source_split_15464:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5174} $i197 := __VERIFIER_nondet_int();
    call {:si_unique_call 5175} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i197);
    call {:si_unique_call 5176} {:cexpr "tmp___14"} boogie_si_record_i32($i197);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $i198 := $slt.i32($i197, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    $i199 := $slt.i32($i197, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    $i200 := $slt.i32($i197, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    $i201 := $eq.i32($i197, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    assume !($i201 == 1);
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5218} ldv_stop();
    goto corral_source_split_15643;

  corral_source_split_15643:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb189:
    assume $i201 == 1;
    goto corral_source_split_15470;

  corral_source_split_15470:
    assume {:verifier.code 0} true;
    $i269 := $M.77;
    goto corral_source_split_15471;

  corral_source_split_15471:
    assume {:verifier.code 0} true;
    $i270 := $eq.i32($i269, 4);
    goto corral_source_split_15472;

  corral_source_split_15472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264, $bb265;

  $bb265:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    $i272 := $M.77;
    goto corral_source_split_15622;

  corral_source_split_15622:
    assume {:verifier.code 0} true;
    $i273 := $eq.i32($i272, 3);
    goto corral_source_split_15623;

  corral_source_split_15623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  $bb268:
    assume !($i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    $i275 := $M.77;
    goto corral_source_split_15629;

  corral_source_split_15629:
    assume {:verifier.code 0} true;
    $i276 := $eq.i32($i275, 2);
    goto corral_source_split_15630;

  corral_source_split_15630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb270, $bb271;

  $bb271:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    $i278 := $M.77;
    goto corral_source_split_15636;

  corral_source_split_15636:
    assume {:verifier.code 0} true;
    $i279 := $eq.i32($i278, 5);
    goto corral_source_split_15637;

  corral_source_split_15637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb273, $bb274;

  $bb274:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb273:
    assume $i279 == 1;
    goto corral_source_split_15639;

  corral_source_split_15639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5216} vslice_dummy_var_172 := ldv_shutdown_10();
    goto corral_source_split_15640;

  corral_source_split_15640:
    assume {:verifier.code 0} true;
    $M.77 := 5;
    call {:si_unique_call 5217} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(5);
    goto corral_source_split_15641;

  corral_source_split_15641:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb270:
    assume $i276 == 1;
    goto corral_source_split_15632;

  corral_source_split_15632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5214} vslice_dummy_var_171 := ldv_shutdown_10();
    goto corral_source_split_15633;

  corral_source_split_15633:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 5215} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_15634;

  corral_source_split_15634:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb267:
    assume $i273 == 1;
    goto corral_source_split_15625;

  corral_source_split_15625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5212} vslice_dummy_var_170 := ldv_shutdown_10();
    goto corral_source_split_15626;

  corral_source_split_15626:
    assume {:verifier.code 0} true;
    $M.77 := 3;
    call {:si_unique_call 5213} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(3);
    goto corral_source_split_15627;

  corral_source_split_15627:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb264:
    assume $i270 == 1;
    goto corral_source_split_15618;

  corral_source_split_15618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5210} vslice_dummy_var_169 := ldv_shutdown_10();
    goto corral_source_split_15619;

  corral_source_split_15619:
    assume {:verifier.code 0} true;
    $M.77 := 4;
    call {:si_unique_call 5211} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(4);
    goto corral_source_split_15620;

  corral_source_split_15620:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb187:
    assume $i200 == 1;
    goto corral_source_split_15466;

  corral_source_split_15466:
    assume {:verifier.code 0} true;
    $i259 := $M.77;
    goto corral_source_split_15467;

  corral_source_split_15467:
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i259, 4);
    goto corral_source_split_15468;

  corral_source_split_15468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $i264 := $M.77;
    goto corral_source_split_15606;

  corral_source_split_15606:
    assume {:verifier.code 0} true;
    $i265 := $eq.i32($i264, 3);
    goto corral_source_split_15607;

  corral_source_split_15607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  $bb259:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb258:
    assume $i265 == 1;
    goto corral_source_split_15609;

  corral_source_split_15609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5207} $i266 := ldv_resume_early_10();
    goto corral_source_split_15610;

  corral_source_split_15610:
    assume {:verifier.code 0} true;
    $M.86 := $i266;
    call {:si_unique_call 5208} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i266);
    goto corral_source_split_15611;

  corral_source_split_15611:
    assume {:verifier.code 0} true;
    $i267 := $M.86;
    goto corral_source_split_15612;

  corral_source_split_15612:
    assume {:verifier.code 0} true;
    $i268 := $eq.i32($i267, 0);
    goto corral_source_split_15613;

  corral_source_split_15613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb260:
    assume $i268 == 1;
    goto corral_source_split_15615;

  corral_source_split_15615:
    assume {:verifier.code 0} true;
    $M.77 := 5;
    call {:si_unique_call 5209} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(5);
    goto corral_source_split_15616;

  corral_source_split_15616:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb252:
    assume $i260 == 1;
    goto corral_source_split_15597;

  corral_source_split_15597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5204} $i261 := ldv_resume_early_10();
    goto corral_source_split_15598;

  corral_source_split_15598:
    assume {:verifier.code 0} true;
    $M.86 := $i261;
    call {:si_unique_call 5205} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i261);
    goto corral_source_split_15599;

  corral_source_split_15599:
    assume {:verifier.code 0} true;
    $i262 := $M.86;
    goto corral_source_split_15600;

  corral_source_split_15600:
    assume {:verifier.code 0} true;
    $i263 := $eq.i32($i262, 0);
    goto corral_source_split_15601;

  corral_source_split_15601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb254:
    assume $i263 == 1;
    goto corral_source_split_15603;

  corral_source_split_15603:
    assume {:verifier.code 0} true;
    $M.77 := 5;
    call {:si_unique_call 5206} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(5);
    goto corral_source_split_15604;

  corral_source_split_15604:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb185:
    assume $i199 == 1;
    assume {:verifier.code 0} true;
    $i202 := $slt.i32($i197, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i202 == 1);
    goto corral_source_split_15478;

  corral_source_split_15478:
    assume {:verifier.code 0} true;
    $i254 := $M.77;
    goto corral_source_split_15479;

  corral_source_split_15479:
    assume {:verifier.code 0} true;
    $i255 := $eq.i32($i254, 3);
    goto corral_source_split_15480;

  corral_source_split_15480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  $bb247:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb246:
    assume $i255 == 1;
    goto corral_source_split_15588;

  corral_source_split_15588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5201} $i256 := ldv_suspend_late_10();
    goto corral_source_split_15589;

  corral_source_split_15589:
    assume {:verifier.code 0} true;
    $M.85 := $i256;
    call {:si_unique_call 5202} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i256);
    goto corral_source_split_15590;

  corral_source_split_15590:
    assume {:verifier.code 0} true;
    $i257 := $M.85;
    goto corral_source_split_15591;

  corral_source_split_15591:
    assume {:verifier.code 0} true;
    $i258 := $eq.i32($i257, 0);
    goto corral_source_split_15592;

  corral_source_split_15592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb248:
    assume $i258 == 1;
    goto corral_source_split_15594;

  corral_source_split_15594:
    assume {:verifier.code 0} true;
    $M.77 := 4;
    call {:si_unique_call 5203} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(4);
    goto corral_source_split_15595;

  corral_source_split_15595:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb192:
    assume $i202 == 1;
    goto corral_source_split_15474;

  corral_source_split_15474:
    assume {:verifier.code 0} true;
    $i236 := $M.77;
    goto corral_source_split_15475;

  corral_source_split_15475:
    assume {:verifier.code 0} true;
    $i237 := $eq.i32($i236, 4);
    goto corral_source_split_15476;

  corral_source_split_15476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    $i242 := $M.77;
    goto corral_source_split_15562;

  corral_source_split_15562:
    assume {:verifier.code 0} true;
    $i243 := $eq.i32($i242, 3);
    goto corral_source_split_15563;

  corral_source_split_15563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    $i248 := $M.77;
    goto corral_source_split_15575;

  corral_source_split_15575:
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i248, 5);
    goto corral_source_split_15576;

  corral_source_split_15576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb240:
    assume $i249 == 1;
    goto corral_source_split_15578;

  corral_source_split_15578:
    assume {:verifier.code 0} true;
    $p250 := $M.66;
    goto corral_source_split_15579;

  corral_source_split_15579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5198} $i251 := rtl8180_resume($p250);
    goto corral_source_split_15580;

  corral_source_split_15580:
    assume {:verifier.code 0} true;
    $M.84 := $i251;
    call {:si_unique_call 5199} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i251);
    goto corral_source_split_15581;

  corral_source_split_15581:
    assume {:verifier.code 0} true;
    $i252 := $M.84;
    goto corral_source_split_15582;

  corral_source_split_15582:
    assume {:verifier.code 0} true;
    $i253 := $eq.i32($i252, 0);
    goto corral_source_split_15583;

  corral_source_split_15583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb242:
    assume $i253 == 1;
    goto corral_source_split_15585;

  corral_source_split_15585:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 5200} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_15586;

  corral_source_split_15586:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb234:
    assume $i243 == 1;
    goto corral_source_split_15565;

  corral_source_split_15565:
    assume {:verifier.code 0} true;
    $p244 := $M.66;
    goto corral_source_split_15566;

  corral_source_split_15566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5195} $i245 := rtl8180_resume($p244);
    goto corral_source_split_15567;

  corral_source_split_15567:
    assume {:verifier.code 0} true;
    $M.84 := $i245;
    call {:si_unique_call 5196} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i245);
    goto corral_source_split_15568;

  corral_source_split_15568:
    assume {:verifier.code 0} true;
    $i246 := $M.84;
    goto corral_source_split_15569;

  corral_source_split_15569:
    assume {:verifier.code 0} true;
    $i247 := $eq.i32($i246, 0);
    goto corral_source_split_15570;

  corral_source_split_15570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb236:
    assume $i247 == 1;
    goto corral_source_split_15572;

  corral_source_split_15572:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 5197} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_15573;

  corral_source_split_15573:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb228:
    assume $i237 == 1;
    goto corral_source_split_15552;

  corral_source_split_15552:
    assume {:verifier.code 0} true;
    $p238 := $M.66;
    goto corral_source_split_15553;

  corral_source_split_15553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5192} $i239 := rtl8180_resume($p238);
    goto corral_source_split_15554;

  corral_source_split_15554:
    assume {:verifier.code 0} true;
    $M.84 := $i239;
    call {:si_unique_call 5193} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i239);
    goto corral_source_split_15555;

  corral_source_split_15555:
    assume {:verifier.code 0} true;
    $i240 := $M.84;
    goto corral_source_split_15556;

  corral_source_split_15556:
    assume {:verifier.code 0} true;
    $i241 := $eq.i32($i240, 0);
    goto corral_source_split_15557;

  corral_source_split_15557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb230:
    assume $i241 == 1;
    goto corral_source_split_15559;

  corral_source_split_15559:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 5194} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_15560;

  corral_source_split_15560:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb183:
    assume $i198 == 1;
    assume {:verifier.code 0} true;
    $i203 := $slt.i32($i197, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    $i204 := $slt.i32($i197, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i204 == 1);
    goto corral_source_split_15486;

  corral_source_split_15486:
    assume {:verifier.code 0} true;
    $i224 := $M.77;
    goto corral_source_split_15487;

  corral_source_split_15487:
    assume {:verifier.code 0} true;
    $i225 := $eq.i32($i224, 4);
    goto corral_source_split_15488;

  corral_source_split_15488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    $i227 := $M.77;
    goto corral_source_split_15528;

  corral_source_split_15528:
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i227, 3);
    goto corral_source_split_15529;

  corral_source_split_15529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $i230 := $M.77;
    goto corral_source_split_15536;

  corral_source_split_15536:
    assume {:verifier.code 0} true;
    $i231 := $eq.i32($i230, 2);
    goto corral_source_split_15537;

  corral_source_split_15537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $i233 := $M.77;
    goto corral_source_split_15544;

  corral_source_split_15544:
    assume {:verifier.code 0} true;
    $i234 := $eq.i32($i233, 5);
    goto corral_source_split_15545;

  corral_source_split_15545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb225:
    assume $i234 == 1;
    goto corral_source_split_15547;

  corral_source_split_15547:
    assume {:verifier.code 0} true;
    $p235 := $M.66;
    goto corral_source_split_15548;

  corral_source_split_15548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5190} rtl8180_remove($p235);
    goto corral_source_split_15549;

  corral_source_split_15549:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 5191} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_15550;

  corral_source_split_15550:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb222:
    assume $i231 == 1;
    goto corral_source_split_15539;

  corral_source_split_15539:
    assume {:verifier.code 0} true;
    $p232 := $M.66;
    goto corral_source_split_15540;

  corral_source_split_15540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5188} rtl8180_remove($p232);
    goto corral_source_split_15541;

  corral_source_split_15541:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 5189} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_15542;

  corral_source_split_15542:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb219:
    assume $i228 == 1;
    goto corral_source_split_15531;

  corral_source_split_15531:
    assume {:verifier.code 0} true;
    $p229 := $M.66;
    goto corral_source_split_15532;

  corral_source_split_15532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5186} rtl8180_remove($p229);
    goto corral_source_split_15533;

  corral_source_split_15533:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 5187} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_15534;

  corral_source_split_15534:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb216:
    assume $i225 == 1;
    goto corral_source_split_15523;

  corral_source_split_15523:
    assume {:verifier.code 0} true;
    $p226 := $M.66;
    goto corral_source_split_15524;

  corral_source_split_15524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5184} rtl8180_remove($p226);
    goto corral_source_split_15525;

  corral_source_split_15525:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 5185} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_15526;

  corral_source_split_15526:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb196:
    assume $i204 == 1;
    goto corral_source_split_15482;

  corral_source_split_15482:
    assume {:verifier.code 0} true;
    $i214 := $M.77;
    goto corral_source_split_15483;

  corral_source_split_15483:
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i214, 2);
    goto corral_source_split_15484;

  corral_source_split_15484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    assume !($i215 == 1);
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb207:
    assume $i215 == 1;
    goto corral_source_split_15507;

  corral_source_split_15507:
    assume {:verifier.code 0} true;
    $i216 := $M.82;
    goto corral_source_split_15508;

  corral_source_split_15508:
    assume {:verifier.code 0} true;
    $i217 := $eq.i32($i216, 0);
    goto corral_source_split_15509;

  corral_source_split_15509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    assume !($i217 == 1);
    goto $bb209;

  $bb210:
    assume $i217 == 1;
    goto corral_source_split_15511;

  corral_source_split_15511:
    assume {:verifier.code 0} true;
    $p218 := $M.66;
    goto corral_source_split_15512;

  corral_source_split_15512:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_15513;

  corral_source_split_15513:
    assume {:verifier.code 0} true;
    $i220 := $load.i32($M.52, $p219);
    goto corral_source_split_15514;

  corral_source_split_15514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5181} $i221 := rtl8180_suspend($p218, $i220);
    goto corral_source_split_15515;

  corral_source_split_15515:
    assume {:verifier.code 0} true;
    $M.83 := $i221;
    call {:si_unique_call 5182} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i221);
    goto corral_source_split_15516;

  corral_source_split_15516:
    assume {:verifier.code 0} true;
    $i222 := $M.83;
    goto corral_source_split_15517;

  corral_source_split_15517:
    assume {:verifier.code 0} true;
    $i223 := $eq.i32($i222, 0);
    goto corral_source_split_15518;

  corral_source_split_15518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb212:
    assume $i223 == 1;
    goto corral_source_split_15520;

  corral_source_split_15520:
    assume {:verifier.code 0} true;
    $M.77 := 3;
    call {:si_unique_call 5183} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(3);
    goto corral_source_split_15521;

  corral_source_split_15521:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb194:
    assume $i203 == 1;
    assume {:verifier.code 0} true;
    $i205 := $eq.i32($i197, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    assume !($i205 == 1);
    goto $bb191;

  $bb198:
    assume $i205 == 1;
    goto corral_source_split_15490;

  corral_source_split_15490:
    assume {:verifier.code 0} true;
    $i206 := $M.77;
    goto corral_source_split_15491;

  corral_source_split_15491:
    assume {:verifier.code 0} true;
    $i207 := $eq.i32($i206, 1);
    goto corral_source_split_15492;

  corral_source_split_15492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb200:
    assume $i207 == 1;
    goto corral_source_split_15494;

  corral_source_split_15494:
    assume {:verifier.code 0} true;
    $p208 := $M.66;
    goto corral_source_split_15495;

  corral_source_split_15495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5177} $i209 := rtl8180_probe($p208, $p29);
    goto corral_source_split_15496;

  corral_source_split_15496:
    assume {:verifier.code 0} true;
    $M.81 := $i209;
    call {:si_unique_call 5178} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i209);
    goto corral_source_split_15497;

  corral_source_split_15497:
    assume {:verifier.code 0} true;
    $i210 := $M.81;
    goto corral_source_split_15498;

  corral_source_split_15498:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i210, 0);
    goto corral_source_split_15499;

  corral_source_split_15499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb202:
    assume $i211 == 1;
    goto corral_source_split_15501;

  corral_source_split_15501:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 5179} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_15502;

  corral_source_split_15502:
    assume {:verifier.code 0} true;
    $i212 := $M.75;
    goto corral_source_split_15503;

  corral_source_split_15503:
    assume {:verifier.code 0} true;
    $i213 := $add.i32($i212, 1);
    goto corral_source_split_15504;

  corral_source_split_15504:
    assume {:verifier.code 0} true;
    $M.75 := $i213;
    call {:si_unique_call 5180} {:cexpr "ref_cnt"} boogie_si_record_i32($i213);
    goto corral_source_split_15505;

  corral_source_split_15505:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb7:
    assume $i45 == 1;
    goto corral_source_split_15143;

  corral_source_split_15143:
    assume {:verifier.code 0} true;
    $i178 := $M.76;
    goto corral_source_split_15144;

  corral_source_split_15144:
    assume {:verifier.code 0} true;
    $i179 := $ne.i32($i178, 0);
    goto corral_source_split_15145;

  corral_source_split_15145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb150:
    assume $i179 == 1;
    goto corral_source_split_15415;

  corral_source_split_15415:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5151} $i180 := __VERIFIER_nondet_int();
    call {:si_unique_call 5152} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i180);
    call {:si_unique_call 5153} {:cexpr "tmp___13"} boogie_si_record_i32($i180);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $i181 := $slt.i32($i180, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i180, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    assume !($i182 == 1);
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5173} ldv_stop();
    goto corral_source_split_15462;

  corral_source_split_15462:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb155:
    assume $i182 == 1;
    goto corral_source_split_15417;

  corral_source_split_15417:
    assume {:verifier.code 0} true;
    $i188 := $M.76;
    goto corral_source_split_15418;

  corral_source_split_15418:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i188, 1);
    goto corral_source_split_15419;

  corral_source_split_15419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb168:
    assume $i189 == 1;
    goto corral_source_split_15435;

  corral_source_split_15435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5157} $i190 := rtl8180_driver_init();
    goto corral_source_split_15436;

  corral_source_split_15436:
    assume {:verifier.code 0} true;
    $M.80 := $i190;
    call {:si_unique_call 5158} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i190);
    goto corral_source_split_15437;

  corral_source_split_15437:
    assume {:verifier.code 0} true;
    $i191 := $M.80;
    goto corral_source_split_15438;

  corral_source_split_15438:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i191, 0);
    goto corral_source_split_15439;

  corral_source_split_15439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $i193 := $M.80;
    goto corral_source_split_15456;

  corral_source_split_15456:
    assume {:verifier.code 0} true;
    $i194 := $ne.i32($i193, 0);
    goto corral_source_split_15457;

  corral_source_split_15457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb173:
    assume $i194 == 1;
    goto corral_source_split_15459;

  corral_source_split_15459:
    assume {:verifier.code 0} true;
    $M.76 := 2;
    call {:si_unique_call 5172} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_15460;

  corral_source_split_15460:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5156} ldv_check_final_state();
    goto corral_source_split_15433;

  corral_source_split_15433:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb170:
    assume $i192 == 1;
    goto corral_source_split_15441;

  corral_source_split_15441:
    assume {:verifier.code 0} true;
    $M.76 := 3;
    call {:si_unique_call 5159} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_15442;

  corral_source_split_15442:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 5160} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_15443;

  corral_source_split_15443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5161} ldv_initialize_rtl818x_rf_ops_5();
    goto corral_source_split_15444;

  corral_source_split_15444:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 5162} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_15445;

  corral_source_split_15445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5163} ldv_initialize_rtl818x_rf_ops_9();
    goto corral_source_split_15446;

  corral_source_split_15446:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 5164} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_15447;

  corral_source_split_15447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5165} ldv_initialize_rtl818x_rf_ops_7();
    goto corral_source_split_15448;

  corral_source_split_15448:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 5166} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_15449;

  corral_source_split_15449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5167} ldv_initialize_rtl818x_rf_ops_4();
    goto corral_source_split_15450;

  corral_source_split_15450:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 5168} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_15451;

  corral_source_split_15451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5169} ldv_initialize_rtl818x_rf_ops_6();
    goto corral_source_split_15452;

  corral_source_split_15452:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 5170} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_15453;

  corral_source_split_15453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5171} ldv_initialize_rtl818x_rf_ops_8();
    goto corral_source_split_15454;

  corral_source_split_15454:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb153:
    assume $i181 == 1;
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i180, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    assume !($i183 == 1);
    goto $bb157;

  $bb158:
    assume $i183 == 1;
    goto corral_source_split_15421;

  corral_source_split_15421:
    assume {:verifier.code 0} true;
    $i184 := $M.76;
    goto corral_source_split_15422;

  corral_source_split_15422:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i184, 3);
    goto corral_source_split_15423;

  corral_source_split_15423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    assume !($i185 == 1);
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb160:
    assume $i185 == 1;
    goto corral_source_split_15425;

  corral_source_split_15425:
    assume {:verifier.code 0} true;
    $i186 := $M.75;
    goto corral_source_split_15426;

  corral_source_split_15426:
    assume {:verifier.code 0} true;
    $i187 := $eq.i32($i186, 0);
    goto corral_source_split_15427;

  corral_source_split_15427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    assume !($i187 == 1);
    goto $bb162;

  $bb163:
    assume $i187 == 1;
    goto corral_source_split_15429;

  corral_source_split_15429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5154} rtl8180_driver_exit();
    goto corral_source_split_15430;

  corral_source_split_15430:
    assume {:verifier.code 0} true;
    $M.76 := 2;
    call {:si_unique_call 5155} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_15431;

  corral_source_split_15431:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb5:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i42, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i42, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i49 == 1);
    goto corral_source_split_15163;

  corral_source_split_15163:
    assume {:verifier.code 0} true;
    $i176 := $M.74;
    goto corral_source_split_15164;

  corral_source_split_15164:
    assume {:verifier.code 0} true;
    $i177 := $ne.i32($i176, 0);
    goto corral_source_split_15165;

  corral_source_split_15165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb147:
    assume $i177 == 1;
    goto corral_source_split_15412;

  corral_source_split_15412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5150} ldv_main_exported_4();
    goto corral_source_split_15413;

  corral_source_split_15413:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb16:
    assume $i49 == 1;
    goto corral_source_split_15159;

  corral_source_split_15159:
    assume {:verifier.code 0} true;
    $i174 := $M.73;
    goto corral_source_split_15160;

  corral_source_split_15160:
    assume {:verifier.code 0} true;
    $i175 := $ne.i32($i174, 0);
    goto corral_source_split_15161;

  corral_source_split_15161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb144:
    assume $i175 == 1;
    goto corral_source_split_15409;

  corral_source_split_15409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5149} choose_interrupt_1();
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_15410;

  corral_source_split_15410:
    assume {:verifier.code 0} true;
    goto $bb146;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i48 == 1;
    goto corral_source_split_15155;

  corral_source_split_15155:
    assume {:verifier.code 0} true;
    $i172 := $M.72;
    goto corral_source_split_15156;

  corral_source_split_15156:
    assume {:verifier.code 0} true;
    $i173 := $ne.i32($i172, 0);
    goto corral_source_split_15157;

  corral_source_split_15157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb141:
    assume $i173 == 1;
    goto corral_source_split_15406;

  corral_source_split_15406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5148} ldv_main_exported_8();
    goto corral_source_split_15407;

  corral_source_split_15407:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb3:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i42, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i42, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i42, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i52 == 1);
    goto corral_source_split_15175;

  corral_source_split_15175:
    assume {:verifier.code 0} true;
    $i170 := $M.71;
    goto corral_source_split_15176;

  corral_source_split_15176:
    assume {:verifier.code 0} true;
    $i171 := $ne.i32($i170, 0);
    goto corral_source_split_15177;

  corral_source_split_15177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb138:
    assume $i171 == 1;
    goto corral_source_split_15403;

  corral_source_split_15403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5147} choose_interrupt_2();
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_15404;

  corral_source_split_15404:
    assume {:verifier.code 0} true;
    goto $bb140;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i52 == 1;
    goto corral_source_split_15171;

  corral_source_split_15171:
    assume {:verifier.code 0} true;
    $i168 := $M.70;
    goto corral_source_split_15172;

  corral_source_split_15172:
    assume {:verifier.code 0} true;
    $i169 := $ne.i32($i168, 0);
    goto corral_source_split_15173;

  corral_source_split_15173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb135:
    assume $i169 == 1;
    goto corral_source_split_15400;

  corral_source_split_15400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5146} ldv_main_exported_9();
    goto corral_source_split_15401;

  corral_source_split_15401:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb20:
    assume $i51 == 1;
    goto corral_source_split_15167;

  corral_source_split_15167:
    assume {:verifier.code 0} true;
    $i166 := $M.69;
    goto corral_source_split_15168;

  corral_source_split_15168:
    assume {:verifier.code 0} true;
    $i167 := $ne.i32($i166, 0);
    goto corral_source_split_15169;

  corral_source_split_15169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb132:
    assume $i167 == 1;
    goto corral_source_split_15397;

  corral_source_split_15397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5145} ldv_main_exported_7();
    goto corral_source_split_15398;

  corral_source_split_15398:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb18:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i42, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i42, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i54 == 1);
    goto corral_source_split_15183;

  corral_source_split_15183:
    assume {:verifier.code 0} true;
    $i164 := $M.68;
    goto corral_source_split_15184;

  corral_source_split_15184:
    assume {:verifier.code 0} true;
    $i165 := $ne.i32($i164, 0);
    goto corral_source_split_15185;

  corral_source_split_15185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb129:
    assume $i165 == 1;
    goto corral_source_split_15394;

  corral_source_split_15394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5144} invoke_work_3();
    goto corral_source_split_15395;

  corral_source_split_15395:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb26:
    assume $i54 == 1;
    goto corral_source_split_15179;

  corral_source_split_15179:
    assume {:verifier.code 0} true;
    $i58 := $M.8;
    goto corral_source_split_15180;

  corral_source_split_15180:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_15181;

  corral_source_split_15181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb34:
    assume $i59 == 1;
    goto corral_source_split_15194;

  corral_source_split_15194:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5097} $i60 := __VERIFIER_nondet_int();
    call {:si_unique_call 5098} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i60);
    call {:si_unique_call 5099} {:cexpr "tmp___12"} boogie_si_record_i32($i60);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i60, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i60, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i60, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i60, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i60, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5143} ldv_stop();
    goto corral_source_split_15392;

  corral_source_split_15392:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb45:
    assume $i65 == 1;
    goto corral_source_split_15204;

  corral_source_split_15204:
    assume {:verifier.code 0} true;
    $i158 := $M.8;
    goto corral_source_split_15205;

  corral_source_split_15205:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 1);
    goto corral_source_split_15206;

  corral_source_split_15206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $i161 := $M.8;
    goto corral_source_split_15384;

  corral_source_split_15384:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 2);
    goto corral_source_split_15385;

  corral_source_split_15385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb123:
    assume $i162 == 1;
    goto corral_source_split_15387;

  corral_source_split_15387:
    assume {:verifier.code 0} true;
    $p163 := $M.7;
    goto corral_source_split_15388;

  corral_source_split_15388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5141} rtl8180_remove_interface($p163, $p9);
    goto corral_source_split_15389;

  corral_source_split_15389:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 5142} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_15390;

  corral_source_split_15390:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb120:
    assume $i159 == 1;
    goto corral_source_split_15379;

  corral_source_split_15379:
    assume {:verifier.code 0} true;
    $p160 := $M.7;
    goto corral_source_split_15380;

  corral_source_split_15380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5139} rtl8180_remove_interface($p160, $p9);
    goto corral_source_split_15381;

  corral_source_split_15381:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 5140} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_15382;

  corral_source_split_15382:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb43:
    assume $i64 == 1;
    goto corral_source_split_15200;

  corral_source_split_15200:
    assume {:verifier.code 0} true;
    $i152 := $M.8;
    goto corral_source_split_15201;

  corral_source_split_15201:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i152, 1);
    goto corral_source_split_15202;

  corral_source_split_15202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $i155 := $M.8;
    goto corral_source_split_15371;

  corral_source_split_15371:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i155, 2);
    goto corral_source_split_15372;

  corral_source_split_15372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb117:
    assume $i156 == 1;
    goto corral_source_split_15374;

  corral_source_split_15374:
    assume {:verifier.code 0} true;
    $p157 := $M.7;
    goto corral_source_split_15375;

  corral_source_split_15375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5137} rtl8180_tx($p157, $p19, $p25);
    goto corral_source_split_15376;

  corral_source_split_15376:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 5138} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_15377;

  corral_source_split_15377:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb114:
    assume $i153 == 1;
    goto corral_source_split_15366;

  corral_source_split_15366:
    assume {:verifier.code 0} true;
    $p154 := $M.7;
    goto corral_source_split_15367;

  corral_source_split_15367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5135} rtl8180_tx($p154, $p19, $p25);
    goto corral_source_split_15368;

  corral_source_split_15368:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 5136} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_15369;

  corral_source_split_15369:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb41:
    assume $i63 == 1;
    goto corral_source_split_15196;

  corral_source_split_15196:
    assume {:verifier.code 0} true;
    $i147 := $M.8;
    goto corral_source_split_15197;

  corral_source_split_15197:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 2);
    goto corral_source_split_15198;

  corral_source_split_15198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb111:
    assume $i148 == 1;
    goto corral_source_split_15358;

  corral_source_split_15358:
    assume {:verifier.code 0} true;
    $p149 := $M.7;
    goto corral_source_split_15359;

  corral_source_split_15359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5132} rtl8180_stop($p149);
    goto corral_source_split_15360;

  corral_source_split_15360:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 5133} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_15361;

  corral_source_split_15361:
    assume {:verifier.code 0} true;
    $i150 := $M.75;
    goto corral_source_split_15362;

  corral_source_split_15362:
    assume {:verifier.code 0} true;
    $i151 := $sub.i32($i150, 1);
    goto corral_source_split_15363;

  corral_source_split_15363:
    assume {:verifier.code 0} true;
    $M.75 := $i151;
    call {:si_unique_call 5134} {:cexpr "ref_cnt"} boogie_si_record_i32($i151);
    goto corral_source_split_15364;

  corral_source_split_15364:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb39:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i60, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i60, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i67 == 1);
    goto corral_source_split_15216;

  corral_source_split_15216:
    assume {:verifier.code 0} true;
    $i133 := $M.8;
    goto corral_source_split_15217;

  corral_source_split_15217:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, 1);
    goto corral_source_split_15218;

  corral_source_split_15218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i140 := $M.8;
    goto corral_source_split_15347;

  corral_source_split_15347:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 2);
    goto corral_source_split_15348;

  corral_source_split_15348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb108:
    assume $i141 == 1;
    goto corral_source_split_15350;

  corral_source_split_15350:
    assume {:verifier.code 0} true;
    $p142 := $M.7;
    goto corral_source_split_15351;

  corral_source_split_15351:
    assume {:verifier.code 0} true;
    $i143 := $load.i16($M.52, $p1);
    goto corral_source_split_15352;

  corral_source_split_15352:
    assume {:verifier.code 0} true;
    $i144 := $zext.i16.i32($i143);
    goto corral_source_split_15353;

  corral_source_split_15353:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i32.i16($i144);
    goto corral_source_split_15354;

  corral_source_split_15354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5130} vslice_dummy_var_168 := rtl8180_conf_tx($p142, $p13, $i145, $p21);
    goto corral_source_split_15355;

  corral_source_split_15355:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 5131} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_15356;

  corral_source_split_15356:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb105:
    assume $i134 == 1;
    goto corral_source_split_15339;

  corral_source_split_15339:
    assume {:verifier.code 0} true;
    $p135 := $M.7;
    goto corral_source_split_15340;

  corral_source_split_15340:
    assume {:verifier.code 0} true;
    $i136 := $load.i16($M.52, $p1);
    goto corral_source_split_15341;

  corral_source_split_15341:
    assume {:verifier.code 0} true;
    $i137 := $zext.i16.i32($i136);
    goto corral_source_split_15342;

  corral_source_split_15342:
    assume {:verifier.code 0} true;
    $i138 := $trunc.i32.i16($i137);
    goto corral_source_split_15343;

  corral_source_split_15343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5128} vslice_dummy_var_167 := rtl8180_conf_tx($p135, $p13, $i138, $p21);
    goto corral_source_split_15344;

  corral_source_split_15344:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 5129} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_15345;

  corral_source_split_15345:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb50:
    assume $i67 == 1;
    goto corral_source_split_15212;

  corral_source_split_15212:
    assume {:verifier.code 0} true;
    $i125 := $M.8;
    goto corral_source_split_15213;

  corral_source_split_15213:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i125, 1);
    goto corral_source_split_15214;

  corral_source_split_15214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $i129 := $M.8;
    goto corral_source_split_15331;

  corral_source_split_15331:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 2);
    goto corral_source_split_15332;

  corral_source_split_15332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb102:
    assume $i130 == 1;
    goto corral_source_split_15334;

  corral_source_split_15334:
    assume {:verifier.code 0} true;
    $p131 := $M.7;
    goto corral_source_split_15335;

  corral_source_split_15335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5126} vslice_dummy_var_166 := rtl8180_add_interface($p131, $p17);
    goto corral_source_split_15336;

  corral_source_split_15336:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 5127} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_15337;

  corral_source_split_15337:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb99:
    assume $i126 == 1;
    goto corral_source_split_15326;

  corral_source_split_15326:
    assume {:verifier.code 0} true;
    $p127 := $M.7;
    goto corral_source_split_15327;

  corral_source_split_15327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5124} vslice_dummy_var_165 := rtl8180_add_interface($p127, $p17);
    goto corral_source_split_15328;

  corral_source_split_15328:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 5125} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_15329;

  corral_source_split_15329:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb48:
    assume $i66 == 1;
    goto corral_source_split_15208;

  corral_source_split_15208:
    assume {:verifier.code 0} true;
    $i117 := $M.8;
    goto corral_source_split_15209;

  corral_source_split_15209:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 1);
    goto corral_source_split_15210;

  corral_source_split_15210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i121 := $M.8;
    goto corral_source_split_15317;

  corral_source_split_15317:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 2);
    goto corral_source_split_15318;

  corral_source_split_15318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb96:
    assume $i122 == 1;
    goto corral_source_split_15320;

  corral_source_split_15320:
    assume {:verifier.code 0} true;
    $p123 := $M.7;
    goto corral_source_split_15321;

  corral_source_split_15321:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.52, $p2);
    goto corral_source_split_15322;

  corral_source_split_15322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5122} rtl8180_bss_info_changed($p123, $p11, $p7, $i124);
    goto corral_source_split_15323;

  corral_source_split_15323:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 5123} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_15324;

  corral_source_split_15324:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb93:
    assume $i118 == 1;
    goto corral_source_split_15311;

  corral_source_split_15311:
    assume {:verifier.code 0} true;
    $p119 := $M.7;
    goto corral_source_split_15312;

  corral_source_split_15312:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.52, $p2);
    goto corral_source_split_15313;

  corral_source_split_15313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5120} rtl8180_bss_info_changed($p119, $p11, $p7, $i120);
    goto corral_source_split_15314;

  corral_source_split_15314:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 5121} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_15315;

  corral_source_split_15315:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb37:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i60, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i60, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i60, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i70 == 1);
    goto corral_source_split_15228;

  corral_source_split_15228:
    assume {:verifier.code 0} true;
    $i109 := $M.8;
    goto corral_source_split_15229;

  corral_source_split_15229:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 1);
    goto corral_source_split_15230;

  corral_source_split_15230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $i113 := $M.8;
    goto corral_source_split_15303;

  corral_source_split_15303:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 2);
    goto corral_source_split_15304;

  corral_source_split_15304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb90:
    assume $i114 == 1;
    goto corral_source_split_15306;

  corral_source_split_15306:
    assume {:verifier.code 0} true;
    $p115 := $M.7;
    goto corral_source_split_15307;

  corral_source_split_15307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5118} vslice_dummy_var_164 := rtl8180_get_tsf($p115, $p15);
    goto corral_source_split_15308;

  corral_source_split_15308:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 5119} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_15309;

  corral_source_split_15309:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb87:
    assume $i110 == 1;
    goto corral_source_split_15298;

  corral_source_split_15298:
    assume {:verifier.code 0} true;
    $p111 := $M.7;
    goto corral_source_split_15299;

  corral_source_split_15299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5116} vslice_dummy_var_163 := rtl8180_get_tsf($p111, $p15);
    goto corral_source_split_15300;

  corral_source_split_15300:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 5117} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_15301;

  corral_source_split_15301:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb56:
    assume $i70 == 1;
    goto corral_source_split_15224;

  corral_source_split_15224:
    assume {:verifier.code 0} true;
    $i99 := $M.8;
    goto corral_source_split_15225;

  corral_source_split_15225:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 1);
    goto corral_source_split_15226;

  corral_source_split_15226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i104 := $M.8;
    goto corral_source_split_15288;

  corral_source_split_15288:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 2);
    goto corral_source_split_15289;

  corral_source_split_15289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb84:
    assume $i105 == 1;
    goto corral_source_split_15291;

  corral_source_split_15291:
    assume {:verifier.code 0} true;
    $p106 := $M.7;
    goto corral_source_split_15292;

  corral_source_split_15292:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.52, $p3);
    goto corral_source_split_15293;

  corral_source_split_15293:
    assume {:verifier.code 0} true;
    $i108 := $load.i64($M.52, $p4);
    goto corral_source_split_15294;

  corral_source_split_15294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5114} rtl8180_configure_filter($p106, $i107, $p23, $i108);
    goto corral_source_split_15295;

  corral_source_split_15295:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 5115} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_15296;

  corral_source_split_15296:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb81:
    assume $i100 == 1;
    goto corral_source_split_15281;

  corral_source_split_15281:
    assume {:verifier.code 0} true;
    $p101 := $M.7;
    goto corral_source_split_15282;

  corral_source_split_15282:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.52, $p3);
    goto corral_source_split_15283;

  corral_source_split_15283:
    assume {:verifier.code 0} true;
    $i103 := $load.i64($M.52, $p4);
    goto corral_source_split_15284;

  corral_source_split_15284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5112} rtl8180_configure_filter($p101, $i102, $p23, $i103);
    goto corral_source_split_15285;

  corral_source_split_15285:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 5113} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_15286;

  corral_source_split_15286:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb54:
    assume $i69 == 1;
    goto corral_source_split_15220;

  corral_source_split_15220:
    assume {:verifier.code 0} true;
    $i91 := $M.8;
    goto corral_source_split_15221;

  corral_source_split_15221:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 1);
    goto corral_source_split_15222;

  corral_source_split_15222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i95 := $M.8;
    goto corral_source_split_15273;

  corral_source_split_15273:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 2);
    goto corral_source_split_15274;

  corral_source_split_15274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb78:
    assume $i96 == 1;
    goto corral_source_split_15276;

  corral_source_split_15276:
    assume {:verifier.code 0} true;
    $p97 := $M.7;
    goto corral_source_split_15277;

  corral_source_split_15277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5110} vslice_dummy_var_162 := rtl8180_prepare_multicast($p97, $p27);
    goto corral_source_split_15278;

  corral_source_split_15278:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 5111} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_15279;

  corral_source_split_15279:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb75:
    assume $i92 == 1;
    goto corral_source_split_15268;

  corral_source_split_15268:
    assume {:verifier.code 0} true;
    $p93 := $M.7;
    goto corral_source_split_15269;

  corral_source_split_15269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5108} vslice_dummy_var_161 := rtl8180_prepare_multicast($p93, $p27);
    goto corral_source_split_15270;

  corral_source_split_15270:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 5109} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_15271;

  corral_source_split_15271:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb52:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i60, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i71 == 1);
    goto corral_source_split_15232;

  corral_source_split_15232:
    assume {:verifier.code 0} true;
    $i81 := $M.8;
    goto corral_source_split_15233;

  corral_source_split_15233:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 1);
    goto corral_source_split_15234;

  corral_source_split_15234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i86 := $M.8;
    goto corral_source_split_15259;

  corral_source_split_15259:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 2);
    goto corral_source_split_15260;

  corral_source_split_15260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb72:
    assume $i87 == 1;
    goto corral_source_split_15262;

  corral_source_split_15262:
    assume {:verifier.code 0} true;
    $p88 := $M.7;
    goto corral_source_split_15263;

  corral_source_split_15263:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.52, $p0);
    goto corral_source_split_15264;

  corral_source_split_15264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5106} vslice_dummy_var_160 := rtl8180_config($p88, $i89);
    goto corral_source_split_15265;

  corral_source_split_15265:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 5107} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_15266;

  corral_source_split_15266:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb69:
    assume $i82 == 1;
    goto corral_source_split_15253;

  corral_source_split_15253:
    assume {:verifier.code 0} true;
    $p83 := $M.7;
    goto corral_source_split_15254;

  corral_source_split_15254:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.52, $p0);
    goto corral_source_split_15255;

  corral_source_split_15255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5104} vslice_dummy_var_159 := rtl8180_config($p83, $i84);
    goto corral_source_split_15256;

  corral_source_split_15256:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 5105} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_15257;

  corral_source_split_15257:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb58:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i60, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb47;

  $bb60:
    assume $i72 == 1;
    goto corral_source_split_15236;

  corral_source_split_15236:
    assume {:verifier.code 0} true;
    $i73 := $M.8;
    goto corral_source_split_15237;

  corral_source_split_15237:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 1);
    goto corral_source_split_15238;

  corral_source_split_15238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb62:
    assume $i74 == 1;
    goto corral_source_split_15240;

  corral_source_split_15240:
    assume {:verifier.code 0} true;
    $p75 := $M.7;
    goto corral_source_split_15241;

  corral_source_split_15241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5100} $i76 := rtl8180_start($p75);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_15242;

  corral_source_split_15242:
    assume {:verifier.code 0} true;
    $M.79 := $i76;
    call {:si_unique_call 5101} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i76);
    goto corral_source_split_15243;

  corral_source_split_15243:
    assume {:verifier.code 0} true;
    $i77 := $M.79;
    goto corral_source_split_15244;

  corral_source_split_15244:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 0);
    goto corral_source_split_15245;

  corral_source_split_15245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb64:
    assume $i78 == 1;
    goto corral_source_split_15247;

  corral_source_split_15247:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 5102} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_15248;

  corral_source_split_15248:
    assume {:verifier.code 0} true;
    $i79 := $M.75;
    goto corral_source_split_15249;

  corral_source_split_15249:
    assume {:verifier.code 0} true;
    $i80 := $add.i32($i79, 1);
    goto corral_source_split_15250;

  corral_source_split_15250:
    assume {:verifier.code 0} true;
    $M.75 := $i80;
    call {:si_unique_call 5103} {:cexpr "ref_cnt"} boogie_si_record_i32($i80);
    goto corral_source_split_15251;

  corral_source_split_15251:
    assume {:verifier.code 0} true;
    goto $bb66;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i42, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb13;

  $bb28:
    assume $i55 == 1;
    goto corral_source_split_15187;

  corral_source_split_15187:
    assume {:verifier.code 0} true;
    $i56 := $M.67;
    goto corral_source_split_15188;

  corral_source_split_15188:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_15189;

  corral_source_split_15189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i57 == 1;
    goto corral_source_split_15191;

  corral_source_split_15191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5096} ldv_main_exported_6();
    goto corral_source_split_15192;

  corral_source_split_15192:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb33_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5093} $i42 := __VERIFIER_nondet_int();
    call {:si_unique_call 5094} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i42);
    call {:si_unique_call 5095} {:cexpr "tmp___11"} boogie_si_record_i32($i42);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 432026);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15650;

  corral_source_split_15650:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_6: ref;

axiom ldv_main_exported_6 == $sub.ref(0, 433058);

procedure ldv_main_exported_6();
  free requires assertsPassed;
  modifies $M.52, $M.67, $M.75, $M.0, $CurrAddr;



implementation ldv_main_exported_6()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i8;
  var $i37: i32;
  var $i38: i8;
  var $i39: i8;
  var $i40: i32;
  var $i41: i8;
  var $i43: i32;
  var $i44: i1;
  var $i45: i8;
  var $i46: i32;
  var $i47: i8;
  var $i48: i8;
  var $i49: i32;
  var $i50: i8;
  var $i52: i32;
  var $i53: i1;
  var $i54: i8;
  var $i55: i32;
  var $i56: i8;
  var $i57: i8;
  var $i58: i32;
  var $i59: i8;
  var $i61: i32;
  var $i62: i1;
  var $i63: i8;
  var $i64: i32;
  var $i65: i8;
  var $i66: i8;
  var $i67: i32;
  var $i68: i8;
  var $i70: i32;
  var $i71: i1;
  var $i73: i32;
  var $i74: i1;
  var $i76: i32;
  var $i77: i1;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var vslice_dummy_var_173: ref;
  var vslice_dummy_var_174: ref;
  var vslice_dummy_var_175: i8;
  var vslice_dummy_var_176: i8;
  var vslice_dummy_var_177: i8;
  var vslice_dummy_var_178: i8;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 5221} $p0 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 5222} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_15652;

  corral_source_split_15652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5223} $p2 := ldv_init_zalloc(56);
    goto corral_source_split_15653;

  corral_source_split_15653:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_15654;

  corral_source_split_15654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5224} vslice_dummy_var_173 := ldv_memset($p0, 0, 1);
    goto corral_source_split_15655;

  corral_source_split_15655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5225} vslice_dummy_var_174 := ldv_memset($p1, 0, 1);
    goto corral_source_split_15656;

  corral_source_split_15656:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5226} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 5227} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    call {:si_unique_call 5228} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i6, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i6, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i6, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5261} ldv_stop();
    goto corral_source_split_15807;

  corral_source_split_15807:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_15662;

  corral_source_split_15662:
    assume {:verifier.code 0} true;
    $i86 := $M.67;
    goto corral_source_split_15663;

  corral_source_split_15663:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 3);
    goto corral_source_split_15664;

  corral_source_split_15664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb64:
    assume $i87 == 1;
    goto corral_source_split_15803;

  corral_source_split_15803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5259} vslice_dummy_var_183 := ldv_start_6();
    goto corral_source_split_15804;

  corral_source_split_15804:
    assume {:verifier.code 0} true;
    $M.67 := 4;
    call {:si_unique_call 5260} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_15805;

  corral_source_split_15805:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_15658;

  corral_source_split_15658:
    assume {:verifier.code 0} true;
    $i81 := $M.67;
    goto corral_source_split_15659;

  corral_source_split_15659:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 1);
    goto corral_source_split_15660;

  corral_source_split_15660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb61:
    assume $i82 == 1;
    goto corral_source_split_15796;

  corral_source_split_15796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5256} vslice_dummy_var_182 := ldv_bind_6();
    goto corral_source_split_15797;

  corral_source_split_15797:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 5257} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_15798;

  corral_source_split_15798:
    assume {:verifier.code 0} true;
    $i84 := $M.75;
    goto corral_source_split_15799;

  corral_source_split_15799:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i84, 1);
    goto corral_source_split_15800;

  corral_source_split_15800:
    assume {:verifier.code 0} true;
    $M.75 := $i85;
    call {:si_unique_call 5258} {:cexpr "ref_cnt"} boogie_si_record_i32($i85);
    goto corral_source_split_15801;

  corral_source_split_15801:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb4:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i6, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    goto corral_source_split_15670;

  corral_source_split_15670:
    assume {:verifier.code 0} true;
    $i76 := $M.67;
    goto corral_source_split_15671;

  corral_source_split_15671:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 2);
    goto corral_source_split_15672;

  corral_source_split_15672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb58:
    assume $i77 == 1;
    goto corral_source_split_15789;

  corral_source_split_15789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5253} vslice_dummy_var_181 := ldv_release_6();
    goto corral_source_split_15790;

  corral_source_split_15790:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 5254} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_15791;

  corral_source_split_15791:
    assume {:verifier.code 0} true;
    $i79 := $M.75;
    goto corral_source_split_15792;

  corral_source_split_15792:
    assume {:verifier.code 0} true;
    $i80 := $sub.i32($i79, 1);
    goto corral_source_split_15793;

  corral_source_split_15793:
    assume {:verifier.code 0} true;
    $M.75 := $i80;
    call {:si_unique_call 5255} {:cexpr "ref_cnt"} boogie_si_record_i32($i80);
    goto corral_source_split_15794;

  corral_source_split_15794:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb11:
    assume $i11 == 1;
    goto corral_source_split_15666;

  corral_source_split_15666:
    assume {:verifier.code 0} true;
    $i70 := $M.67;
    goto corral_source_split_15667;

  corral_source_split_15667:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 4);
    goto corral_source_split_15668;

  corral_source_split_15668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i73 := $M.67;
    goto corral_source_split_15782;

  corral_source_split_15782:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 3);
    goto corral_source_split_15783;

  corral_source_split_15783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb55:
    assume $i74 == 1;
    goto corral_source_split_15785;

  corral_source_split_15785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5251} vslice_dummy_var_180 := ldv_disconnect_6();
    goto corral_source_split_15786;

  corral_source_split_15786:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 5252} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_15787;

  corral_source_split_15787:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb52:
    assume $i71 == 1;
    goto corral_source_split_15778;

  corral_source_split_15778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5249} vslice_dummy_var_179 := ldv_disconnect_6();
    goto corral_source_split_15779;

  corral_source_split_15779:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 5250} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_15780;

  corral_source_split_15780:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i6, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i6, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i13 == 1);
    goto corral_source_split_15678;

  corral_source_split_15678:
    assume {:verifier.code 0} true;
    $i34 := $M.67;
    goto corral_source_split_15679;

  corral_source_split_15679:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 4);
    goto corral_source_split_15680;

  corral_source_split_15680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i43 := $M.67;
    goto corral_source_split_15739;

  corral_source_split_15739:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 1);
    goto corral_source_split_15740;

  corral_source_split_15740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i52 := $M.67;
    goto corral_source_split_15752;

  corral_source_split_15752:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 3);
    goto corral_source_split_15753;

  corral_source_split_15753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i61 := $M.67;
    goto corral_source_split_15765;

  corral_source_split_15765:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 2);
    goto corral_source_split_15766;

  corral_source_split_15766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb49:
    assume $i62 == 1;
    goto corral_source_split_15768;

  corral_source_split_15768:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.52, $p0);
    goto corral_source_split_15769;

  corral_source_split_15769:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_15770;

  corral_source_split_15770:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i8($i64);
    goto corral_source_split_15771;

  corral_source_split_15771:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.52, $p1);
    goto corral_source_split_15772;

  corral_source_split_15772:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_15773;

  corral_source_split_15773:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i67);
    goto corral_source_split_15774;

  corral_source_split_15774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5247} vslice_dummy_var_178 := max2820_rf_calc_rssi($i65, $i68);
    goto corral_source_split_15775;

  corral_source_split_15775:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 5248} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_15776;

  corral_source_split_15776:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i53 == 1;
    goto corral_source_split_15755;

  corral_source_split_15755:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.52, $p0);
    goto corral_source_split_15756;

  corral_source_split_15756:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_15757;

  corral_source_split_15757:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    goto corral_source_split_15758;

  corral_source_split_15758:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.52, $p1);
    goto corral_source_split_15759;

  corral_source_split_15759:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_15760;

  corral_source_split_15760:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i8($i58);
    goto corral_source_split_15761;

  corral_source_split_15761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5245} vslice_dummy_var_177 := max2820_rf_calc_rssi($i56, $i59);
    goto corral_source_split_15762;

  corral_source_split_15762:
    assume {:verifier.code 0} true;
    $M.67 := 3;
    call {:si_unique_call 5246} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_15763;

  corral_source_split_15763:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i44 == 1;
    goto corral_source_split_15742;

  corral_source_split_15742:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.52, $p0);
    goto corral_source_split_15743;

  corral_source_split_15743:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_15744;

  corral_source_split_15744:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    goto corral_source_split_15745;

  corral_source_split_15745:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.52, $p1);
    goto corral_source_split_15746;

  corral_source_split_15746:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_15747;

  corral_source_split_15747:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    goto corral_source_split_15748;

  corral_source_split_15748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5243} vslice_dummy_var_176 := max2820_rf_calc_rssi($i47, $i50);
    goto corral_source_split_15749;

  corral_source_split_15749:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 5244} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_15750;

  corral_source_split_15750:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i35 == 1;
    goto corral_source_split_15729;

  corral_source_split_15729:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.52, $p0);
    goto corral_source_split_15730;

  corral_source_split_15730:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_15731;

  corral_source_split_15731:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    goto corral_source_split_15732;

  corral_source_split_15732:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.52, $p1);
    goto corral_source_split_15733;

  corral_source_split_15733:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_15734;

  corral_source_split_15734:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_15735;

  corral_source_split_15735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5241} vslice_dummy_var_175 := max2820_rf_calc_rssi($i38, $i41);
    goto corral_source_split_15736;

  corral_source_split_15736:
    assume {:verifier.code 0} true;
    $M.67 := 4;
    call {:si_unique_call 5242} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_15737;

  corral_source_split_15737:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb15:
    assume $i13 == 1;
    goto corral_source_split_15674;

  corral_source_split_15674:
    assume {:verifier.code 0} true;
    $i31 := $M.67;
    goto corral_source_split_15675;

  corral_source_split_15675:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 4);
    goto corral_source_split_15676;

  corral_source_split_15676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb37:
    assume $i32 == 1;
    goto corral_source_split_15724;

  corral_source_split_15724:
    assume {:verifier.code 0} true;
    $p33 := $M.87;
    goto corral_source_split_15725;

  corral_source_split_15725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5239} max2820_rf_stop($p33);
    goto corral_source_split_15726;

  corral_source_split_15726:
    assume {:verifier.code 0} true;
    $M.67 := 3;
    call {:si_unique_call 5240} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_15727;

  corral_source_split_15727:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb13:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i6, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i14 == 1);
    goto corral_source_split_15682;

  corral_source_split_15682:
    assume {:verifier.code 0} true;
    $i28 := $M.67;
    goto corral_source_split_15683;

  corral_source_split_15683:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 2);
    goto corral_source_split_15684;

  corral_source_split_15684:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb34:
    assume $i29 == 1;
    goto corral_source_split_15719;

  corral_source_split_15719:
    assume {:verifier.code 0} true;
    $p30 := $M.87;
    goto corral_source_split_15720;

  corral_source_split_15720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5237} max2820_rf_init($p30);
    goto corral_source_split_15721;

  corral_source_split_15721:
    assume {:verifier.code 0} true;
    $M.67 := 3;
    call {:si_unique_call 5238} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_15722;

  corral_source_split_15722:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb17:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i6, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb19:
    assume $i15 == 1;
    goto corral_source_split_15686;

  corral_source_split_15686:
    assume {:verifier.code 0} true;
    $i16 := $M.67;
    goto corral_source_split_15687;

  corral_source_split_15687:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 4);
    goto corral_source_split_15688;

  corral_source_split_15688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i19 := $M.67;
    goto corral_source_split_15695;

  corral_source_split_15695:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 1);
    goto corral_source_split_15696;

  corral_source_split_15696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i22 := $M.67;
    goto corral_source_split_15703;

  corral_source_split_15703:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 3);
    goto corral_source_split_15704;

  corral_source_split_15704:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i25 := $M.67;
    goto corral_source_split_15711;

  corral_source_split_15711:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_15712;

  corral_source_split_15712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i26 == 1;
    goto corral_source_split_15714;

  corral_source_split_15714:
    assume {:verifier.code 0} true;
    $p27 := $M.87;
    goto corral_source_split_15715;

  corral_source_split_15715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5235} max2820_rf_set_channel($p27, $p3);
    goto corral_source_split_15716;

  corral_source_split_15716:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 5236} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_15717;

  corral_source_split_15717:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i23 == 1;
    goto corral_source_split_15706;

  corral_source_split_15706:
    assume {:verifier.code 0} true;
    $p24 := $M.87;
    goto corral_source_split_15707;

  corral_source_split_15707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5233} max2820_rf_set_channel($p24, $p3);
    goto corral_source_split_15708;

  corral_source_split_15708:
    assume {:verifier.code 0} true;
    $M.67 := 3;
    call {:si_unique_call 5234} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_15709;

  corral_source_split_15709:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i20 == 1;
    goto corral_source_split_15698;

  corral_source_split_15698:
    assume {:verifier.code 0} true;
    $p21 := $M.87;
    goto corral_source_split_15699;

  corral_source_split_15699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5231} max2820_rf_set_channel($p21, $p3);
    goto corral_source_split_15700;

  corral_source_split_15700:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 5232} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_15701;

  corral_source_split_15701:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i17 == 1;
    goto corral_source_split_15690;

  corral_source_split_15690:
    assume {:verifier.code 0} true;
    $p18 := $M.87;
    goto corral_source_split_15691;

  corral_source_split_15691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5229} max2820_rf_set_channel($p18, $p3);
    goto corral_source_split_15692;

  corral_source_split_15692:
    assume {:verifier.code 0} true;
    $M.67 := 4;
    call {:si_unique_call 5230} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_15693;

  corral_source_split_15693:
    assume {:verifier.code 0} true;
    goto $bb23;
}



const ldv_main_exported_7: ref;

axiom ldv_main_exported_7 == $sub.ref(0, 434090);

procedure ldv_main_exported_7();
  free requires assertsPassed;
  modifies $M.52, $M.69, $M.75, $M.0, $CurrAddr;



implementation ldv_main_exported_7()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i8;
  var $i37: i32;
  var $i38: i8;
  var $i39: i8;
  var $i40: i32;
  var $i41: i8;
  var $i43: i32;
  var $i44: i1;
  var $i45: i8;
  var $i46: i32;
  var $i47: i8;
  var $i48: i8;
  var $i49: i32;
  var $i50: i8;
  var $i52: i32;
  var $i53: i1;
  var $i54: i8;
  var $i55: i32;
  var $i56: i8;
  var $i57: i8;
  var $i58: i32;
  var $i59: i8;
  var $i61: i32;
  var $i62: i1;
  var $i63: i8;
  var $i64: i32;
  var $i65: i8;
  var $i66: i8;
  var $i67: i32;
  var $i68: i8;
  var $i70: i32;
  var $i71: i1;
  var $i73: i32;
  var $i74: i1;
  var $i76: i32;
  var $i77: i1;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var vslice_dummy_var_184: ref;
  var vslice_dummy_var_185: ref;
  var vslice_dummy_var_186: i8;
  var vslice_dummy_var_187: i8;
  var vslice_dummy_var_188: i8;
  var vslice_dummy_var_189: i8;
  var vslice_dummy_var_190: i32;
  var vslice_dummy_var_191: i32;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i32;
  var vslice_dummy_var_194: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 5262} $p0 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 5263} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_15809;

  corral_source_split_15809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5264} $p2 := ldv_init_zalloc(56);
    goto corral_source_split_15810;

  corral_source_split_15810:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_15811;

  corral_source_split_15811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5265} vslice_dummy_var_184 := ldv_memset($p0, 0, 1);
    goto corral_source_split_15812;

  corral_source_split_15812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5266} vslice_dummy_var_185 := ldv_memset($p1, 0, 1);
    goto corral_source_split_15813;

  corral_source_split_15813:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5267} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 5268} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    call {:si_unique_call 5269} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i6, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i6, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i6, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5302} ldv_stop();
    goto corral_source_split_15964;

  corral_source_split_15964:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_15819;

  corral_source_split_15819:
    assume {:verifier.code 0} true;
    $i86 := $M.69;
    goto corral_source_split_15820;

  corral_source_split_15820:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 3);
    goto corral_source_split_15821;

  corral_source_split_15821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb64:
    assume $i87 == 1;
    goto corral_source_split_15960;

  corral_source_split_15960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5300} vslice_dummy_var_194 := ldv_start_7();
    goto corral_source_split_15961;

  corral_source_split_15961:
    assume {:verifier.code 0} true;
    $M.69 := 4;
    call {:si_unique_call 5301} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_15962;

  corral_source_split_15962:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_15815;

  corral_source_split_15815:
    assume {:verifier.code 0} true;
    $i81 := $M.69;
    goto corral_source_split_15816;

  corral_source_split_15816:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 1);
    goto corral_source_split_15817;

  corral_source_split_15817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb61:
    assume $i82 == 1;
    goto corral_source_split_15953;

  corral_source_split_15953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5297} vslice_dummy_var_193 := ldv_bind_7();
    goto corral_source_split_15954;

  corral_source_split_15954:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 5298} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_15955;

  corral_source_split_15955:
    assume {:verifier.code 0} true;
    $i84 := $M.75;
    goto corral_source_split_15956;

  corral_source_split_15956:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i84, 1);
    goto corral_source_split_15957;

  corral_source_split_15957:
    assume {:verifier.code 0} true;
    $M.75 := $i85;
    call {:si_unique_call 5299} {:cexpr "ref_cnt"} boogie_si_record_i32($i85);
    goto corral_source_split_15958;

  corral_source_split_15958:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb4:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i6, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    goto corral_source_split_15827;

  corral_source_split_15827:
    assume {:verifier.code 0} true;
    $i76 := $M.69;
    goto corral_source_split_15828;

  corral_source_split_15828:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 2);
    goto corral_source_split_15829;

  corral_source_split_15829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb58:
    assume $i77 == 1;
    goto corral_source_split_15946;

  corral_source_split_15946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5294} vslice_dummy_var_192 := ldv_release_7();
    goto corral_source_split_15947;

  corral_source_split_15947:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 5295} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_15948;

  corral_source_split_15948:
    assume {:verifier.code 0} true;
    $i79 := $M.75;
    goto corral_source_split_15949;

  corral_source_split_15949:
    assume {:verifier.code 0} true;
    $i80 := $sub.i32($i79, 1);
    goto corral_source_split_15950;

  corral_source_split_15950:
    assume {:verifier.code 0} true;
    $M.75 := $i80;
    call {:si_unique_call 5296} {:cexpr "ref_cnt"} boogie_si_record_i32($i80);
    goto corral_source_split_15951;

  corral_source_split_15951:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb11:
    assume $i11 == 1;
    goto corral_source_split_15823;

  corral_source_split_15823:
    assume {:verifier.code 0} true;
    $i70 := $M.69;
    goto corral_source_split_15824;

  corral_source_split_15824:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 4);
    goto corral_source_split_15825;

  corral_source_split_15825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i73 := $M.69;
    goto corral_source_split_15939;

  corral_source_split_15939:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 3);
    goto corral_source_split_15940;

  corral_source_split_15940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb55:
    assume $i74 == 1;
    goto corral_source_split_15942;

  corral_source_split_15942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5292} vslice_dummy_var_191 := ldv_disconnect_7();
    goto corral_source_split_15943;

  corral_source_split_15943:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 5293} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_15944;

  corral_source_split_15944:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb52:
    assume $i71 == 1;
    goto corral_source_split_15935;

  corral_source_split_15935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5290} vslice_dummy_var_190 := ldv_disconnect_7();
    goto corral_source_split_15936;

  corral_source_split_15936:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 5291} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_15937;

  corral_source_split_15937:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i6, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i6, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i13 == 1);
    goto corral_source_split_15835;

  corral_source_split_15835:
    assume {:verifier.code 0} true;
    $i34 := $M.69;
    goto corral_source_split_15836;

  corral_source_split_15836:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 4);
    goto corral_source_split_15837;

  corral_source_split_15837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i43 := $M.69;
    goto corral_source_split_15896;

  corral_source_split_15896:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 1);
    goto corral_source_split_15897;

  corral_source_split_15897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i52 := $M.69;
    goto corral_source_split_15909;

  corral_source_split_15909:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 3);
    goto corral_source_split_15910;

  corral_source_split_15910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i61 := $M.69;
    goto corral_source_split_15922;

  corral_source_split_15922:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 2);
    goto corral_source_split_15923;

  corral_source_split_15923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb49:
    assume $i62 == 1;
    goto corral_source_split_15925;

  corral_source_split_15925:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.52, $p0);
    goto corral_source_split_15926;

  corral_source_split_15926:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_15927;

  corral_source_split_15927:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i8($i64);
    goto corral_source_split_15928;

  corral_source_split_15928:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.52, $p1);
    goto corral_source_split_15929;

  corral_source_split_15929:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_15930;

  corral_source_split_15930:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i67);
    goto corral_source_split_15931;

  corral_source_split_15931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5288} vslice_dummy_var_189 := sa2400_rf_calc_rssi($i65, $i68);
    goto corral_source_split_15932;

  corral_source_split_15932:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 5289} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_15933;

  corral_source_split_15933:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i53 == 1;
    goto corral_source_split_15912;

  corral_source_split_15912:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.52, $p0);
    goto corral_source_split_15913;

  corral_source_split_15913:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_15914;

  corral_source_split_15914:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    goto corral_source_split_15915;

  corral_source_split_15915:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.52, $p1);
    goto corral_source_split_15916;

  corral_source_split_15916:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_15917;

  corral_source_split_15917:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i8($i58);
    goto corral_source_split_15918;

  corral_source_split_15918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5286} vslice_dummy_var_188 := sa2400_rf_calc_rssi($i56, $i59);
    goto corral_source_split_15919;

  corral_source_split_15919:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 5287} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_15920;

  corral_source_split_15920:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i44 == 1;
    goto corral_source_split_15899;

  corral_source_split_15899:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.52, $p0);
    goto corral_source_split_15900;

  corral_source_split_15900:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_15901;

  corral_source_split_15901:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    goto corral_source_split_15902;

  corral_source_split_15902:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.52, $p1);
    goto corral_source_split_15903;

  corral_source_split_15903:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_15904;

  corral_source_split_15904:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    goto corral_source_split_15905;

  corral_source_split_15905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5284} vslice_dummy_var_187 := sa2400_rf_calc_rssi($i47, $i50);
    goto corral_source_split_15906;

  corral_source_split_15906:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 5285} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_15907;

  corral_source_split_15907:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i35 == 1;
    goto corral_source_split_15886;

  corral_source_split_15886:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.52, $p0);
    goto corral_source_split_15887;

  corral_source_split_15887:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_15888;

  corral_source_split_15888:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    goto corral_source_split_15889;

  corral_source_split_15889:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.52, $p1);
    goto corral_source_split_15890;

  corral_source_split_15890:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_15891;

  corral_source_split_15891:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_15892;

  corral_source_split_15892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5282} vslice_dummy_var_186 := sa2400_rf_calc_rssi($i38, $i41);
    goto corral_source_split_15893;

  corral_source_split_15893:
    assume {:verifier.code 0} true;
    $M.69 := 4;
    call {:si_unique_call 5283} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_15894;

  corral_source_split_15894:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb15:
    assume $i13 == 1;
    goto corral_source_split_15831;

  corral_source_split_15831:
    assume {:verifier.code 0} true;
    $i31 := $M.69;
    goto corral_source_split_15832;

  corral_source_split_15832:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 4);
    goto corral_source_split_15833;

  corral_source_split_15833:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb37:
    assume $i32 == 1;
    goto corral_source_split_15881;

  corral_source_split_15881:
    assume {:verifier.code 0} true;
    $p33 := $M.88;
    goto corral_source_split_15882;

  corral_source_split_15882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5280} sa2400_rf_stop($p33);
    goto corral_source_split_15883;

  corral_source_split_15883:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 5281} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_15884;

  corral_source_split_15884:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb13:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i6, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i14 == 1);
    goto corral_source_split_15839;

  corral_source_split_15839:
    assume {:verifier.code 0} true;
    $i28 := $M.69;
    goto corral_source_split_15840;

  corral_source_split_15840:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 2);
    goto corral_source_split_15841;

  corral_source_split_15841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb34:
    assume $i29 == 1;
    goto corral_source_split_15876;

  corral_source_split_15876:
    assume {:verifier.code 0} true;
    $p30 := $M.88;
    goto corral_source_split_15877;

  corral_source_split_15877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5278} sa2400_rf_init($p30);
    goto corral_source_split_15878;

  corral_source_split_15878:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 5279} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_15879;

  corral_source_split_15879:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb17:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i6, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb19:
    assume $i15 == 1;
    goto corral_source_split_15843;

  corral_source_split_15843:
    assume {:verifier.code 0} true;
    $i16 := $M.69;
    goto corral_source_split_15844;

  corral_source_split_15844:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 4);
    goto corral_source_split_15845;

  corral_source_split_15845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i19 := $M.69;
    goto corral_source_split_15852;

  corral_source_split_15852:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 1);
    goto corral_source_split_15853;

  corral_source_split_15853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i22 := $M.69;
    goto corral_source_split_15860;

  corral_source_split_15860:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 3);
    goto corral_source_split_15861;

  corral_source_split_15861:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i25 := $M.69;
    goto corral_source_split_15868;

  corral_source_split_15868:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_15869;

  corral_source_split_15869:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i26 == 1;
    goto corral_source_split_15871;

  corral_source_split_15871:
    assume {:verifier.code 0} true;
    $p27 := $M.88;
    goto corral_source_split_15872;

  corral_source_split_15872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5276} sa2400_rf_set_channel($p27, $p3);
    goto corral_source_split_15873;

  corral_source_split_15873:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 5277} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_15874;

  corral_source_split_15874:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i23 == 1;
    goto corral_source_split_15863;

  corral_source_split_15863:
    assume {:verifier.code 0} true;
    $p24 := $M.88;
    goto corral_source_split_15864;

  corral_source_split_15864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5274} sa2400_rf_set_channel($p24, $p3);
    goto corral_source_split_15865;

  corral_source_split_15865:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 5275} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_15866;

  corral_source_split_15866:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i20 == 1;
    goto corral_source_split_15855;

  corral_source_split_15855:
    assume {:verifier.code 0} true;
    $p21 := $M.88;
    goto corral_source_split_15856;

  corral_source_split_15856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5272} sa2400_rf_set_channel($p21, $p3);
    goto corral_source_split_15857;

  corral_source_split_15857:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 5273} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_15858;

  corral_source_split_15858:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i17 == 1;
    goto corral_source_split_15847;

  corral_source_split_15847:
    assume {:verifier.code 0} true;
    $p18 := $M.88;
    goto corral_source_split_15848;

  corral_source_split_15848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5270} sa2400_rf_set_channel($p18, $p3);
    goto corral_source_split_15849;

  corral_source_split_15849:
    assume {:verifier.code 0} true;
    $M.69 := 4;
    call {:si_unique_call 5271} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_15850;

  corral_source_split_15850:
    assume {:verifier.code 0} true;
    goto $bb23;
}



const ldv_main_exported_9: ref;

axiom ldv_main_exported_9 == $sub.ref(0, 435122);

procedure ldv_main_exported_9();
  free requires assertsPassed;
  modifies $M.70, $M.75, $M.0, $CurrAddr;



implementation ldv_main_exported_9()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i32: i32;
  var $i33: i1;
  var $i35: i32;
  var $i36: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var vslice_dummy_var_195: i32;
  var vslice_dummy_var_196: i32;
  var vslice_dummy_var_197: i32;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15966;

  corral_source_split_15966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5303} $p0 := ldv_init_zalloc(56);
    goto corral_source_split_15967;

  corral_source_split_15967:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_15968;

  corral_source_split_15968:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5304} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 5305} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 5306} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i2, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5331} ldv_stop();
    goto corral_source_split_16066;

  corral_source_split_16066:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i6 == 1;
    goto corral_source_split_15974;

  corral_source_split_15974:
    assume {:verifier.code 0} true;
    $i45 := $M.70;
    goto corral_source_split_15975;

  corral_source_split_15975:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 3);
    goto corral_source_split_15976;

  corral_source_split_15976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb50:
    assume $i46 == 1;
    goto corral_source_split_16062;

  corral_source_split_16062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5329} vslice_dummy_var_199 := ldv_start_9();
    goto corral_source_split_16063;

  corral_source_split_16063:
    assume {:verifier.code 0} true;
    $M.70 := 4;
    call {:si_unique_call 5330} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(4);
    goto corral_source_split_16064;

  corral_source_split_16064:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_15970;

  corral_source_split_15970:
    assume {:verifier.code 0} true;
    $i40 := $M.70;
    goto corral_source_split_15971;

  corral_source_split_15971:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 1);
    goto corral_source_split_15972;

  corral_source_split_15972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb47:
    assume $i41 == 1;
    goto corral_source_split_16055;

  corral_source_split_16055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5326} vslice_dummy_var_198 := ldv_bind_9();
    goto corral_source_split_16056;

  corral_source_split_16056:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 5327} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_16057;

  corral_source_split_16057:
    assume {:verifier.code 0} true;
    $i43 := $M.75;
    goto corral_source_split_16058;

  corral_source_split_16058:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 1);
    goto corral_source_split_16059;

  corral_source_split_16059:
    assume {:verifier.code 0} true;
    $M.75 := $i44;
    call {:si_unique_call 5328} {:cexpr "ref_cnt"} boogie_si_record_i32($i44);
    goto corral_source_split_16060;

  corral_source_split_16060:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i7 == 1);
    goto corral_source_split_15982;

  corral_source_split_15982:
    assume {:verifier.code 0} true;
    $i35 := $M.70;
    goto corral_source_split_15983;

  corral_source_split_15983:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 2);
    goto corral_source_split_15984;

  corral_source_split_15984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb44:
    assume $i36 == 1;
    goto corral_source_split_16048;

  corral_source_split_16048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5323} vslice_dummy_var_197 := ldv_release_9();
    goto corral_source_split_16049;

  corral_source_split_16049:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 5324} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_16050;

  corral_source_split_16050:
    assume {:verifier.code 0} true;
    $i38 := $M.75;
    goto corral_source_split_16051;

  corral_source_split_16051:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32($i38, 1);
    goto corral_source_split_16052;

  corral_source_split_16052:
    assume {:verifier.code 0} true;
    $M.75 := $i39;
    call {:si_unique_call 5325} {:cexpr "ref_cnt"} boogie_si_record_i32($i39);
    goto corral_source_split_16053;

  corral_source_split_16053:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb11:
    assume $i7 == 1;
    goto corral_source_split_15978;

  corral_source_split_15978:
    assume {:verifier.code 0} true;
    $i29 := $M.70;
    goto corral_source_split_15979;

  corral_source_split_15979:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 4);
    goto corral_source_split_15980;

  corral_source_split_15980:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i32 := $M.70;
    goto corral_source_split_16041;

  corral_source_split_16041:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 3);
    goto corral_source_split_16042;

  corral_source_split_16042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb41:
    assume $i33 == 1;
    goto corral_source_split_16044;

  corral_source_split_16044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5321} vslice_dummy_var_196 := ldv_disconnect_9();
    goto corral_source_split_16045;

  corral_source_split_16045:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 5322} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_16046;

  corral_source_split_16046:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i30 == 1;
    goto corral_source_split_16037;

  corral_source_split_16037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5319} vslice_dummy_var_195 := ldv_disconnect_9();
    goto corral_source_split_16038;

  corral_source_split_16038:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 5320} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_16039;

  corral_source_split_16039:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i9 == 1);
    goto corral_source_split_15990;

  corral_source_split_15990:
    assume {:verifier.code 0} true;
    $i26 := $M.70;
    goto corral_source_split_15991;

  corral_source_split_15991:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 4);
    goto corral_source_split_15992;

  corral_source_split_15992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb35:
    assume $i27 == 1;
    goto corral_source_split_16032;

  corral_source_split_16032:
    assume {:verifier.code 0} true;
    $p28 := $M.89;
    goto corral_source_split_16033;

  corral_source_split_16033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5317} rtl8225_rf_stop($p28);
    goto corral_source_split_16034;

  corral_source_split_16034:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 5318} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_16035;

  corral_source_split_16035:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb15:
    assume $i9 == 1;
    goto corral_source_split_15986;

  corral_source_split_15986:
    assume {:verifier.code 0} true;
    $i23 := $M.70;
    goto corral_source_split_15987;

  corral_source_split_15987:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 2);
    goto corral_source_split_15988;

  corral_source_split_15988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb32:
    assume $i24 == 1;
    goto corral_source_split_16027;

  corral_source_split_16027:
    assume {:verifier.code 0} true;
    $p25 := $M.89;
    goto corral_source_split_16028;

  corral_source_split_16028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5315} rtl8225_rf_init($p25);
    goto corral_source_split_16029;

  corral_source_split_16029:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 5316} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_16030;

  corral_source_split_16030:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb13:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb17:
    assume $i10 == 1;
    goto corral_source_split_15994;

  corral_source_split_15994:
    assume {:verifier.code 0} true;
    $i11 := $M.70;
    goto corral_source_split_15995;

  corral_source_split_15995:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 4);
    goto corral_source_split_15996;

  corral_source_split_15996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i14 := $M.70;
    goto corral_source_split_16003;

  corral_source_split_16003:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_16004;

  corral_source_split_16004:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i17 := $M.70;
    goto corral_source_split_16011;

  corral_source_split_16011:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 3);
    goto corral_source_split_16012;

  corral_source_split_16012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i20 := $M.70;
    goto corral_source_split_16019;

  corral_source_split_16019:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 2);
    goto corral_source_split_16020;

  corral_source_split_16020:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i21 == 1;
    goto corral_source_split_16022;

  corral_source_split_16022:
    assume {:verifier.code 0} true;
    $p22 := $M.89;
    goto corral_source_split_16023;

  corral_source_split_16023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5313} rtl8225_rf_set_channel($p22, $p1);
    goto corral_source_split_16024;

  corral_source_split_16024:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 5314} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_16025;

  corral_source_split_16025:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i18 == 1;
    goto corral_source_split_16014;

  corral_source_split_16014:
    assume {:verifier.code 0} true;
    $p19 := $M.89;
    goto corral_source_split_16015;

  corral_source_split_16015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5311} rtl8225_rf_set_channel($p19, $p1);
    goto corral_source_split_16016;

  corral_source_split_16016:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 5312} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_16017;

  corral_source_split_16017:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i15 == 1;
    goto corral_source_split_16006;

  corral_source_split_16006:
    assume {:verifier.code 0} true;
    $p16 := $M.89;
    goto corral_source_split_16007;

  corral_source_split_16007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5309} rtl8225_rf_set_channel($p16, $p1);
    goto corral_source_split_16008;

  corral_source_split_16008:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 5310} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_16009;

  corral_source_split_16009:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i12 == 1;
    goto corral_source_split_15998;

  corral_source_split_15998:
    assume {:verifier.code 0} true;
    $p13 := $M.89;
    goto corral_source_split_15999;

  corral_source_split_15999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5307} rtl8225_rf_set_channel($p13, $p1);
    goto corral_source_split_16000;

  corral_source_split_16000:
    assume {:verifier.code 0} true;
    $M.70 := 4;
    call {:si_unique_call 5308} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(4);
    goto corral_source_split_16001;

  corral_source_split_16001:
    assume {:verifier.code 0} true;
    goto $bb21;
}



const ldv_main_exported_8: ref;

axiom ldv_main_exported_8 == $sub.ref(0, 436154);

procedure ldv_main_exported_8();
  free requires assertsPassed;
  modifies $M.72, $M.75, $M.0, $CurrAddr;



implementation ldv_main_exported_8()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i32: i32;
  var $i33: i1;
  var $i35: i32;
  var $i36: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var vslice_dummy_var_200: i32;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i32;
  var vslice_dummy_var_204: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16068;

  corral_source_split_16068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5332} $p0 := ldv_init_zalloc(56);
    goto corral_source_split_16069;

  corral_source_split_16069:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_16070;

  corral_source_split_16070:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5333} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 5334} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 5335} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i2, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5360} ldv_stop();
    goto corral_source_split_16168;

  corral_source_split_16168:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i6 == 1;
    goto corral_source_split_16076;

  corral_source_split_16076:
    assume {:verifier.code 0} true;
    $i45 := $M.72;
    goto corral_source_split_16077;

  corral_source_split_16077:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 3);
    goto corral_source_split_16078;

  corral_source_split_16078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb50:
    assume $i46 == 1;
    goto corral_source_split_16164;

  corral_source_split_16164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5358} vslice_dummy_var_204 := ldv_start_8();
    goto corral_source_split_16165;

  corral_source_split_16165:
    assume {:verifier.code 0} true;
    $M.72 := 4;
    call {:si_unique_call 5359} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(4);
    goto corral_source_split_16166;

  corral_source_split_16166:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_16072;

  corral_source_split_16072:
    assume {:verifier.code 0} true;
    $i40 := $M.72;
    goto corral_source_split_16073;

  corral_source_split_16073:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 1);
    goto corral_source_split_16074;

  corral_source_split_16074:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb47:
    assume $i41 == 1;
    goto corral_source_split_16157;

  corral_source_split_16157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5355} vslice_dummy_var_203 := ldv_bind_8();
    goto corral_source_split_16158;

  corral_source_split_16158:
    assume {:verifier.code 0} true;
    $M.72 := 2;
    call {:si_unique_call 5356} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_16159;

  corral_source_split_16159:
    assume {:verifier.code 0} true;
    $i43 := $M.75;
    goto corral_source_split_16160;

  corral_source_split_16160:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 1);
    goto corral_source_split_16161;

  corral_source_split_16161:
    assume {:verifier.code 0} true;
    $M.75 := $i44;
    call {:si_unique_call 5357} {:cexpr "ref_cnt"} boogie_si_record_i32($i44);
    goto corral_source_split_16162;

  corral_source_split_16162:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i7 == 1);
    goto corral_source_split_16084;

  corral_source_split_16084:
    assume {:verifier.code 0} true;
    $i35 := $M.72;
    goto corral_source_split_16085;

  corral_source_split_16085:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 2);
    goto corral_source_split_16086;

  corral_source_split_16086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb44:
    assume $i36 == 1;
    goto corral_source_split_16150;

  corral_source_split_16150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5352} vslice_dummy_var_202 := ldv_release_8();
    goto corral_source_split_16151;

  corral_source_split_16151:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 5353} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_16152;

  corral_source_split_16152:
    assume {:verifier.code 0} true;
    $i38 := $M.75;
    goto corral_source_split_16153;

  corral_source_split_16153:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32($i38, 1);
    goto corral_source_split_16154;

  corral_source_split_16154:
    assume {:verifier.code 0} true;
    $M.75 := $i39;
    call {:si_unique_call 5354} {:cexpr "ref_cnt"} boogie_si_record_i32($i39);
    goto corral_source_split_16155;

  corral_source_split_16155:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb11:
    assume $i7 == 1;
    goto corral_source_split_16080;

  corral_source_split_16080:
    assume {:verifier.code 0} true;
    $i29 := $M.72;
    goto corral_source_split_16081;

  corral_source_split_16081:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 4);
    goto corral_source_split_16082;

  corral_source_split_16082:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i32 := $M.72;
    goto corral_source_split_16143;

  corral_source_split_16143:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 3);
    goto corral_source_split_16144;

  corral_source_split_16144:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb41:
    assume $i33 == 1;
    goto corral_source_split_16146;

  corral_source_split_16146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5350} vslice_dummy_var_201 := ldv_disconnect_8();
    goto corral_source_split_16147;

  corral_source_split_16147:
    assume {:verifier.code 0} true;
    $M.72 := 2;
    call {:si_unique_call 5351} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_16148;

  corral_source_split_16148:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i30 == 1;
    goto corral_source_split_16139;

  corral_source_split_16139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5348} vslice_dummy_var_200 := ldv_disconnect_8();
    goto corral_source_split_16140;

  corral_source_split_16140:
    assume {:verifier.code 0} true;
    $M.72 := 2;
    call {:si_unique_call 5349} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_16141;

  corral_source_split_16141:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i9 == 1);
    goto corral_source_split_16092;

  corral_source_split_16092:
    assume {:verifier.code 0} true;
    $i26 := $M.72;
    goto corral_source_split_16093;

  corral_source_split_16093:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 4);
    goto corral_source_split_16094;

  corral_source_split_16094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb35:
    assume $i27 == 1;
    goto corral_source_split_16134;

  corral_source_split_16134:
    assume {:verifier.code 0} true;
    $p28 := $M.90;
    goto corral_source_split_16135;

  corral_source_split_16135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5346} rtl8225_rf_stop($p28);
    goto corral_source_split_16136;

  corral_source_split_16136:
    assume {:verifier.code 0} true;
    $M.72 := 3;
    call {:si_unique_call 5347} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(3);
    goto corral_source_split_16137;

  corral_source_split_16137:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb15:
    assume $i9 == 1;
    goto corral_source_split_16088;

  corral_source_split_16088:
    assume {:verifier.code 0} true;
    $i23 := $M.72;
    goto corral_source_split_16089;

  corral_source_split_16089:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 2);
    goto corral_source_split_16090;

  corral_source_split_16090:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb32:
    assume $i24 == 1;
    goto corral_source_split_16129;

  corral_source_split_16129:
    assume {:verifier.code 0} true;
    $p25 := $M.90;
    goto corral_source_split_16130;

  corral_source_split_16130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5344} rtl8225z2_rf_init($p25);
    goto corral_source_split_16131;

  corral_source_split_16131:
    assume {:verifier.code 0} true;
    $M.72 := 3;
    call {:si_unique_call 5345} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(3);
    goto corral_source_split_16132;

  corral_source_split_16132:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb13:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb17:
    assume $i10 == 1;
    goto corral_source_split_16096;

  corral_source_split_16096:
    assume {:verifier.code 0} true;
    $i11 := $M.72;
    goto corral_source_split_16097;

  corral_source_split_16097:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 4);
    goto corral_source_split_16098;

  corral_source_split_16098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i14 := $M.72;
    goto corral_source_split_16105;

  corral_source_split_16105:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_16106;

  corral_source_split_16106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i17 := $M.72;
    goto corral_source_split_16113;

  corral_source_split_16113:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 3);
    goto corral_source_split_16114;

  corral_source_split_16114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i20 := $M.72;
    goto corral_source_split_16121;

  corral_source_split_16121:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 2);
    goto corral_source_split_16122;

  corral_source_split_16122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i21 == 1;
    goto corral_source_split_16124;

  corral_source_split_16124:
    assume {:verifier.code 0} true;
    $p22 := $M.90;
    goto corral_source_split_16125;

  corral_source_split_16125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5342} rtl8225_rf_set_channel($p22, $p1);
    goto corral_source_split_16126;

  corral_source_split_16126:
    assume {:verifier.code 0} true;
    $M.72 := 2;
    call {:si_unique_call 5343} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_16127;

  corral_source_split_16127:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i18 == 1;
    goto corral_source_split_16116;

  corral_source_split_16116:
    assume {:verifier.code 0} true;
    $p19 := $M.90;
    goto corral_source_split_16117;

  corral_source_split_16117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5340} rtl8225_rf_set_channel($p19, $p1);
    goto corral_source_split_16118;

  corral_source_split_16118:
    assume {:verifier.code 0} true;
    $M.72 := 3;
    call {:si_unique_call 5341} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(3);
    goto corral_source_split_16119;

  corral_source_split_16119:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i15 == 1;
    goto corral_source_split_16108;

  corral_source_split_16108:
    assume {:verifier.code 0} true;
    $p16 := $M.90;
    goto corral_source_split_16109;

  corral_source_split_16109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5338} rtl8225_rf_set_channel($p16, $p1);
    goto corral_source_split_16110;

  corral_source_split_16110:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 5339} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_16111;

  corral_source_split_16111:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i12 == 1;
    goto corral_source_split_16100;

  corral_source_split_16100:
    assume {:verifier.code 0} true;
    $p13 := $M.90;
    goto corral_source_split_16101;

  corral_source_split_16101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5336} rtl8225_rf_set_channel($p13, $p1);
    goto corral_source_split_16102;

  corral_source_split_16102:
    assume {:verifier.code 0} true;
    $M.72 := 4;
    call {:si_unique_call 5337} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(4);
    goto corral_source_split_16103;

  corral_source_split_16103:
    assume {:verifier.code 0} true;
    goto $bb21;
}



const ldv_main_exported_4: ref;

axiom ldv_main_exported_4 == $sub.ref(0, 437186);

procedure ldv_main_exported_4();
  free requires assertsPassed;
  modifies $M.74, $M.75, $M.0, $M.51, $CurrAddr;



implementation ldv_main_exported_4()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i32: i32;
  var $i33: i1;
  var $i35: i32;
  var $i36: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var vslice_dummy_var_205: i32;
  var vslice_dummy_var_206: i32;
  var vslice_dummy_var_207: i32;
  var vslice_dummy_var_208: i32;
  var vslice_dummy_var_209: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16170;

  corral_source_split_16170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5361} $p0 := ldv_init_zalloc(56);
    goto corral_source_split_16171;

  corral_source_split_16171:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_16172;

  corral_source_split_16172:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5362} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 5363} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 5364} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i2, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5389} ldv_stop();
    goto corral_source_split_16270;

  corral_source_split_16270:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i6 == 1;
    goto corral_source_split_16178;

  corral_source_split_16178:
    assume {:verifier.code 0} true;
    $i45 := $M.74;
    goto corral_source_split_16179;

  corral_source_split_16179:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 3);
    goto corral_source_split_16180;

  corral_source_split_16180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb50:
    assume $i46 == 1;
    goto corral_source_split_16266;

  corral_source_split_16266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5387} vslice_dummy_var_209 := ldv_start_4();
    goto corral_source_split_16267;

  corral_source_split_16267:
    assume {:verifier.code 0} true;
    $M.74 := 4;
    call {:si_unique_call 5388} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_16268;

  corral_source_split_16268:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_16174;

  corral_source_split_16174:
    assume {:verifier.code 0} true;
    $i40 := $M.74;
    goto corral_source_split_16175;

  corral_source_split_16175:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 1);
    goto corral_source_split_16176;

  corral_source_split_16176:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb47:
    assume $i41 == 1;
    goto corral_source_split_16259;

  corral_source_split_16259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5384} vslice_dummy_var_208 := ldv_bind_4();
    goto corral_source_split_16260;

  corral_source_split_16260:
    assume {:verifier.code 0} true;
    $M.74 := 2;
    call {:si_unique_call 5385} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_16261;

  corral_source_split_16261:
    assume {:verifier.code 0} true;
    $i43 := $M.75;
    goto corral_source_split_16262;

  corral_source_split_16262:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 1);
    goto corral_source_split_16263;

  corral_source_split_16263:
    assume {:verifier.code 0} true;
    $M.75 := $i44;
    call {:si_unique_call 5386} {:cexpr "ref_cnt"} boogie_si_record_i32($i44);
    goto corral_source_split_16264;

  corral_source_split_16264:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i7 == 1);
    goto corral_source_split_16186;

  corral_source_split_16186:
    assume {:verifier.code 0} true;
    $i35 := $M.74;
    goto corral_source_split_16187;

  corral_source_split_16187:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 2);
    goto corral_source_split_16188;

  corral_source_split_16188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb44:
    assume $i36 == 1;
    goto corral_source_split_16252;

  corral_source_split_16252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5381} vslice_dummy_var_207 := ldv_release_4();
    goto corral_source_split_16253;

  corral_source_split_16253:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 5382} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_16254;

  corral_source_split_16254:
    assume {:verifier.code 0} true;
    $i38 := $M.75;
    goto corral_source_split_16255;

  corral_source_split_16255:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32($i38, 1);
    goto corral_source_split_16256;

  corral_source_split_16256:
    assume {:verifier.code 0} true;
    $M.75 := $i39;
    call {:si_unique_call 5383} {:cexpr "ref_cnt"} boogie_si_record_i32($i39);
    goto corral_source_split_16257;

  corral_source_split_16257:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb11:
    assume $i7 == 1;
    goto corral_source_split_16182;

  corral_source_split_16182:
    assume {:verifier.code 0} true;
    $i29 := $M.74;
    goto corral_source_split_16183;

  corral_source_split_16183:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 4);
    goto corral_source_split_16184;

  corral_source_split_16184:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i32 := $M.74;
    goto corral_source_split_16245;

  corral_source_split_16245:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 3);
    goto corral_source_split_16246;

  corral_source_split_16246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb41:
    assume $i33 == 1;
    goto corral_source_split_16248;

  corral_source_split_16248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5379} vslice_dummy_var_206 := ldv_disconnect_4();
    goto corral_source_split_16249;

  corral_source_split_16249:
    assume {:verifier.code 0} true;
    $M.74 := 2;
    call {:si_unique_call 5380} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_16250;

  corral_source_split_16250:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i30 == 1;
    goto corral_source_split_16241;

  corral_source_split_16241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5377} vslice_dummy_var_205 := ldv_disconnect_4();
    goto corral_source_split_16242;

  corral_source_split_16242:
    assume {:verifier.code 0} true;
    $M.74 := 2;
    call {:si_unique_call 5378} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_16243;

  corral_source_split_16243:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i9 == 1);
    goto corral_source_split_16194;

  corral_source_split_16194:
    assume {:verifier.code 0} true;
    $i26 := $M.74;
    goto corral_source_split_16195;

  corral_source_split_16195:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 4);
    goto corral_source_split_16196;

  corral_source_split_16196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb35:
    assume $i27 == 1;
    goto corral_source_split_16236;

  corral_source_split_16236:
    assume {:verifier.code 0} true;
    $p28 := $M.91;
    goto corral_source_split_16237;

  corral_source_split_16237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5375} rtl8225se_rf_stop($p28);
    goto corral_source_split_16238;

  corral_source_split_16238:
    assume {:verifier.code 0} true;
    $M.74 := 3;
    call {:si_unique_call 5376} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_16239;

  corral_source_split_16239:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb15:
    assume $i9 == 1;
    goto corral_source_split_16190;

  corral_source_split_16190:
    assume {:verifier.code 0} true;
    $i23 := $M.74;
    goto corral_source_split_16191;

  corral_source_split_16191:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 2);
    goto corral_source_split_16192;

  corral_source_split_16192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb32:
    assume $i24 == 1;
    goto corral_source_split_16231;

  corral_source_split_16231:
    assume {:verifier.code 0} true;
    $p25 := $M.91;
    goto corral_source_split_16232;

  corral_source_split_16232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5373} rtl8225se_rf_init($p25);
    goto corral_source_split_16233;

  corral_source_split_16233:
    assume {:verifier.code 0} true;
    $M.74 := 3;
    call {:si_unique_call 5374} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_16234;

  corral_source_split_16234:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb13:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb17:
    assume $i10 == 1;
    goto corral_source_split_16198;

  corral_source_split_16198:
    assume {:verifier.code 0} true;
    $i11 := $M.74;
    goto corral_source_split_16199;

  corral_source_split_16199:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 4);
    goto corral_source_split_16200;

  corral_source_split_16200:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i14 := $M.74;
    goto corral_source_split_16207;

  corral_source_split_16207:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_16208;

  corral_source_split_16208:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i17 := $M.74;
    goto corral_source_split_16215;

  corral_source_split_16215:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 3);
    goto corral_source_split_16216;

  corral_source_split_16216:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i20 := $M.74;
    goto corral_source_split_16223;

  corral_source_split_16223:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 2);
    goto corral_source_split_16224;

  corral_source_split_16224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i21 == 1;
    goto corral_source_split_16226;

  corral_source_split_16226:
    assume {:verifier.code 0} true;
    $p22 := $M.91;
    goto corral_source_split_16227;

  corral_source_split_16227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5371} rtl8225se_rf_set_channel($p22, $p1);
    goto corral_source_split_16228;

  corral_source_split_16228:
    assume {:verifier.code 0} true;
    $M.74 := 2;
    call {:si_unique_call 5372} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_16229;

  corral_source_split_16229:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i18 == 1;
    goto corral_source_split_16218;

  corral_source_split_16218:
    assume {:verifier.code 0} true;
    $p19 := $M.91;
    goto corral_source_split_16219;

  corral_source_split_16219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5369} rtl8225se_rf_set_channel($p19, $p1);
    goto corral_source_split_16220;

  corral_source_split_16220:
    assume {:verifier.code 0} true;
    $M.74 := 3;
    call {:si_unique_call 5370} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_16221;

  corral_source_split_16221:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i15 == 1;
    goto corral_source_split_16210;

  corral_source_split_16210:
    assume {:verifier.code 0} true;
    $p16 := $M.91;
    goto corral_source_split_16211;

  corral_source_split_16211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5367} rtl8225se_rf_set_channel($p16, $p1);
    goto corral_source_split_16212;

  corral_source_split_16212:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 5368} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_16213;

  corral_source_split_16213:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i12 == 1;
    goto corral_source_split_16202;

  corral_source_split_16202:
    assume {:verifier.code 0} true;
    $p13 := $M.91;
    goto corral_source_split_16203;

  corral_source_split_16203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5365} rtl8225se_rf_set_channel($p13, $p1);
    goto corral_source_split_16204;

  corral_source_split_16204:
    assume {:verifier.code 0} true;
    $M.74 := 4;
    call {:si_unique_call 5366} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_16205;

  corral_source_split_16205:
    assume {:verifier.code 0} true;
    goto $bb21;
}



const rtl8180_driver_exit: ref;

axiom rtl8180_driver_exit == $sub.ref(0, 438218);

procedure rtl8180_driver_exit();
  free requires assertsPassed;
  modifies $M.77;



implementation rtl8180_driver_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16272;

  corral_source_split_16272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5390} ldv_pci_unregister_driver_50(rtl8180_driver);
    goto corral_source_split_16273;

  corral_source_split_16273:
    assume {:verifier.code 0} true;
    return;
}



const rtl8180_driver_init: ref;

axiom rtl8180_driver_init == $sub.ref(0, 439250);

procedure rtl8180_driver_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.77, $M.66, $M.0, $CurrAddr;



implementation rtl8180_driver_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16275;

  corral_source_split_16275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5391} $i0 := ldv___pci_register_driver_49(rtl8180_driver, __this_module, .str.11);
    call {:si_unique_call 5392} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_16276;

  corral_source_split_16276:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_initialize_rtl818x_rf_ops_5: ref;

axiom ldv_initialize_rtl818x_rf_ops_5 == $sub.ref(0, 440282);

procedure ldv_initialize_rtl818x_rf_ops_5();
  free requires assertsPassed;
  modifies $M.92, $M.0, $CurrAddr;



implementation ldv_initialize_rtl818x_rf_ops_5()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16278;

  corral_source_split_16278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5393} $p0 := ldv_init_zalloc(160);
    goto corral_source_split_16279;

  corral_source_split_16279:
    assume {:verifier.code 0} true;
    goto corral_source_split_16280;

  corral_source_split_16280:
    assume {:verifier.code 0} true;
    $M.92 := $p0;
    goto corral_source_split_16281;

  corral_source_split_16281:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_rtl818x_rf_ops_9: ref;

axiom ldv_initialize_rtl818x_rf_ops_9 == $sub.ref(0, 441314);

procedure ldv_initialize_rtl818x_rf_ops_9();
  free requires assertsPassed;
  modifies $M.89, $M.0, $CurrAddr;



implementation ldv_initialize_rtl818x_rf_ops_9()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16283;

  corral_source_split_16283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5394} $p0 := ldv_init_zalloc(160);
    goto corral_source_split_16284;

  corral_source_split_16284:
    assume {:verifier.code 0} true;
    goto corral_source_split_16285;

  corral_source_split_16285:
    assume {:verifier.code 0} true;
    $M.89 := $p0;
    goto corral_source_split_16286;

  corral_source_split_16286:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_rtl818x_rf_ops_7: ref;

axiom ldv_initialize_rtl818x_rf_ops_7 == $sub.ref(0, 442346);

procedure ldv_initialize_rtl818x_rf_ops_7();
  free requires assertsPassed;
  modifies $M.88, $M.0, $CurrAddr;



implementation ldv_initialize_rtl818x_rf_ops_7()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16288;

  corral_source_split_16288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5395} $p0 := ldv_init_zalloc(160);
    goto corral_source_split_16289;

  corral_source_split_16289:
    assume {:verifier.code 0} true;
    goto corral_source_split_16290;

  corral_source_split_16290:
    assume {:verifier.code 0} true;
    $M.88 := $p0;
    goto corral_source_split_16291;

  corral_source_split_16291:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_rtl818x_rf_ops_4: ref;

axiom ldv_initialize_rtl818x_rf_ops_4 == $sub.ref(0, 443378);

procedure ldv_initialize_rtl818x_rf_ops_4();
  free requires assertsPassed;
  modifies $M.91, $M.0, $CurrAddr;



implementation ldv_initialize_rtl818x_rf_ops_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16293;

  corral_source_split_16293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5396} $p0 := ldv_init_zalloc(160);
    goto corral_source_split_16294;

  corral_source_split_16294:
    assume {:verifier.code 0} true;
    goto corral_source_split_16295;

  corral_source_split_16295:
    assume {:verifier.code 0} true;
    $M.91 := $p0;
    goto corral_source_split_16296;

  corral_source_split_16296:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_rtl818x_rf_ops_6: ref;

axiom ldv_initialize_rtl818x_rf_ops_6 == $sub.ref(0, 444410);

procedure ldv_initialize_rtl818x_rf_ops_6();
  free requires assertsPassed;
  modifies $M.87, $M.0, $CurrAddr;



implementation ldv_initialize_rtl818x_rf_ops_6()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16298;

  corral_source_split_16298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5397} $p0 := ldv_init_zalloc(160);
    goto corral_source_split_16299;

  corral_source_split_16299:
    assume {:verifier.code 0} true;
    goto corral_source_split_16300;

  corral_source_split_16300:
    assume {:verifier.code 0} true;
    $M.87 := $p0;
    goto corral_source_split_16301;

  corral_source_split_16301:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_rtl818x_rf_ops_8: ref;

axiom ldv_initialize_rtl818x_rf_ops_8 == $sub.ref(0, 445442);

procedure ldv_initialize_rtl818x_rf_ops_8();
  free requires assertsPassed;
  modifies $M.90, $M.0, $CurrAddr;



implementation ldv_initialize_rtl818x_rf_ops_8()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16303;

  corral_source_split_16303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5398} $p0 := ldv_init_zalloc(160);
    goto corral_source_split_16304;

  corral_source_split_16304:
    assume {:verifier.code 0} true;
    goto corral_source_split_16305;

  corral_source_split_16305:
    assume {:verifier.code 0} true;
    $M.90 := $p0;
    goto corral_source_split_16306;

  corral_source_split_16306:
    assume {:verifier.code 0} true;
    return;
}



const ldv_suspend_late_10: ref;

axiom ldv_suspend_late_10 == $sub.ref(0, 446474);

procedure ldv_suspend_late_10() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_late_10() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16308;

  corral_source_split_16308:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5399} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5400} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16309;

  corral_source_split_16309:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_early_10: ref;

axiom ldv_resume_early_10 == $sub.ref(0, 447506);

procedure ldv_resume_early_10() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_early_10() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16311;

  corral_source_split_16311:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5401} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5402} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16312;

  corral_source_split_16312:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_shutdown_10: ref;

axiom ldv_shutdown_10 == $sub.ref(0, 448538);

procedure ldv_shutdown_10() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_shutdown_10() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16314;

  corral_source_split_16314:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5403} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5404} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16315;

  corral_source_split_16315:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_main_exported_5: ref;

axiom ldv_main_exported_5 == $sub.ref(0, 449570);

procedure ldv_main_exported_5();
  free requires assertsPassed;
  modifies $M.52, $M.78, $M.75, $M.0, $CurrAddr;



implementation ldv_main_exported_5()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i8;
  var $i37: i32;
  var $i38: i8;
  var $i39: i8;
  var $i40: i32;
  var $i41: i8;
  var $i43: i32;
  var $i44: i1;
  var $i45: i8;
  var $i46: i32;
  var $i47: i8;
  var $i48: i8;
  var $i49: i32;
  var $i50: i8;
  var $i52: i32;
  var $i53: i1;
  var $i54: i8;
  var $i55: i32;
  var $i56: i8;
  var $i57: i8;
  var $i58: i32;
  var $i59: i8;
  var $i61: i32;
  var $i62: i1;
  var $i63: i8;
  var $i64: i32;
  var $i65: i8;
  var $i66: i8;
  var $i67: i32;
  var $i68: i8;
  var $i70: i32;
  var $i71: i1;
  var $i73: i32;
  var $i74: i1;
  var $i76: i32;
  var $i77: i1;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var vslice_dummy_var_210: ref;
  var vslice_dummy_var_211: ref;
  var vslice_dummy_var_212: i8;
  var vslice_dummy_var_213: i8;
  var vslice_dummy_var_214: i8;
  var vslice_dummy_var_215: i8;
  var vslice_dummy_var_216: i32;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: i32;
  var vslice_dummy_var_219: i32;
  var vslice_dummy_var_220: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 5405} $p0 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 5406} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_16317;

  corral_source_split_16317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5407} $p2 := ldv_init_zalloc(56);
    goto corral_source_split_16318;

  corral_source_split_16318:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_16319;

  corral_source_split_16319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5408} vslice_dummy_var_210 := ldv_memset($p0, 0, 1);
    goto corral_source_split_16320;

  corral_source_split_16320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5409} vslice_dummy_var_211 := ldv_memset($p1, 0, 1);
    goto corral_source_split_16321;

  corral_source_split_16321:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5410} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 5411} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    call {:si_unique_call 5412} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i6, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i6, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i6, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5445} ldv_stop();
    goto corral_source_split_16472;

  corral_source_split_16472:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_16327;

  corral_source_split_16327:
    assume {:verifier.code 0} true;
    $i86 := $M.78;
    goto corral_source_split_16328;

  corral_source_split_16328:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 3);
    goto corral_source_split_16329;

  corral_source_split_16329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb64:
    assume $i87 == 1;
    goto corral_source_split_16468;

  corral_source_split_16468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5443} vslice_dummy_var_220 := ldv_start_5();
    goto corral_source_split_16469;

  corral_source_split_16469:
    assume {:verifier.code 0} true;
    $M.78 := 4;
    call {:si_unique_call 5444} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_16470;

  corral_source_split_16470:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_16323;

  corral_source_split_16323:
    assume {:verifier.code 0} true;
    $i81 := $M.78;
    goto corral_source_split_16324;

  corral_source_split_16324:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 1);
    goto corral_source_split_16325;

  corral_source_split_16325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb61:
    assume $i82 == 1;
    goto corral_source_split_16461;

  corral_source_split_16461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5440} vslice_dummy_var_219 := ldv_bind_5();
    goto corral_source_split_16462;

  corral_source_split_16462:
    assume {:verifier.code 0} true;
    $M.78 := 2;
    call {:si_unique_call 5441} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_16463;

  corral_source_split_16463:
    assume {:verifier.code 0} true;
    $i84 := $M.75;
    goto corral_source_split_16464;

  corral_source_split_16464:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i84, 1);
    goto corral_source_split_16465;

  corral_source_split_16465:
    assume {:verifier.code 0} true;
    $M.75 := $i85;
    call {:si_unique_call 5442} {:cexpr "ref_cnt"} boogie_si_record_i32($i85);
    goto corral_source_split_16466;

  corral_source_split_16466:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb4:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i6, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    goto corral_source_split_16335;

  corral_source_split_16335:
    assume {:verifier.code 0} true;
    $i76 := $M.78;
    goto corral_source_split_16336;

  corral_source_split_16336:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 2);
    goto corral_source_split_16337;

  corral_source_split_16337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb58:
    assume $i77 == 1;
    goto corral_source_split_16454;

  corral_source_split_16454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5437} vslice_dummy_var_218 := ldv_release_5();
    goto corral_source_split_16455;

  corral_source_split_16455:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 5438} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_16456;

  corral_source_split_16456:
    assume {:verifier.code 0} true;
    $i79 := $M.75;
    goto corral_source_split_16457;

  corral_source_split_16457:
    assume {:verifier.code 0} true;
    $i80 := $sub.i32($i79, 1);
    goto corral_source_split_16458;

  corral_source_split_16458:
    assume {:verifier.code 0} true;
    $M.75 := $i80;
    call {:si_unique_call 5439} {:cexpr "ref_cnt"} boogie_si_record_i32($i80);
    goto corral_source_split_16459;

  corral_source_split_16459:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb11:
    assume $i11 == 1;
    goto corral_source_split_16331;

  corral_source_split_16331:
    assume {:verifier.code 0} true;
    $i70 := $M.78;
    goto corral_source_split_16332;

  corral_source_split_16332:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 4);
    goto corral_source_split_16333;

  corral_source_split_16333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i73 := $M.78;
    goto corral_source_split_16447;

  corral_source_split_16447:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 3);
    goto corral_source_split_16448;

  corral_source_split_16448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb55:
    assume $i74 == 1;
    goto corral_source_split_16450;

  corral_source_split_16450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5435} vslice_dummy_var_217 := ldv_disconnect_5();
    goto corral_source_split_16451;

  corral_source_split_16451:
    assume {:verifier.code 0} true;
    $M.78 := 2;
    call {:si_unique_call 5436} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_16452;

  corral_source_split_16452:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb52:
    assume $i71 == 1;
    goto corral_source_split_16443;

  corral_source_split_16443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5433} vslice_dummy_var_216 := ldv_disconnect_5();
    goto corral_source_split_16444;

  corral_source_split_16444:
    assume {:verifier.code 0} true;
    $M.78 := 2;
    call {:si_unique_call 5434} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_16445;

  corral_source_split_16445:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i6, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i6, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i13 == 1);
    goto corral_source_split_16343;

  corral_source_split_16343:
    assume {:verifier.code 0} true;
    $i34 := $M.78;
    goto corral_source_split_16344;

  corral_source_split_16344:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 4);
    goto corral_source_split_16345;

  corral_source_split_16345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i43 := $M.78;
    goto corral_source_split_16404;

  corral_source_split_16404:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 1);
    goto corral_source_split_16405;

  corral_source_split_16405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i52 := $M.78;
    goto corral_source_split_16417;

  corral_source_split_16417:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 3);
    goto corral_source_split_16418;

  corral_source_split_16418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i61 := $M.78;
    goto corral_source_split_16430;

  corral_source_split_16430:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 2);
    goto corral_source_split_16431;

  corral_source_split_16431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb49:
    assume $i62 == 1;
    goto corral_source_split_16433;

  corral_source_split_16433:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.52, $p1);
    goto corral_source_split_16434;

  corral_source_split_16434:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_16435;

  corral_source_split_16435:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i8($i64);
    goto corral_source_split_16436;

  corral_source_split_16436:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.52, $p0);
    goto corral_source_split_16437;

  corral_source_split_16437:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_16438;

  corral_source_split_16438:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i67);
    goto corral_source_split_16439;

  corral_source_split_16439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5431} vslice_dummy_var_215 := grf5101_rf_calc_rssi($i65, $i68);
    goto corral_source_split_16440;

  corral_source_split_16440:
    assume {:verifier.code 0} true;
    $M.78 := 2;
    call {:si_unique_call 5432} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_16441;

  corral_source_split_16441:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i53 == 1;
    goto corral_source_split_16420;

  corral_source_split_16420:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.52, $p1);
    goto corral_source_split_16421;

  corral_source_split_16421:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_16422;

  corral_source_split_16422:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    goto corral_source_split_16423;

  corral_source_split_16423:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.52, $p0);
    goto corral_source_split_16424;

  corral_source_split_16424:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_16425;

  corral_source_split_16425:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i8($i58);
    goto corral_source_split_16426;

  corral_source_split_16426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5429} vslice_dummy_var_214 := grf5101_rf_calc_rssi($i56, $i59);
    goto corral_source_split_16427;

  corral_source_split_16427:
    assume {:verifier.code 0} true;
    $M.78 := 3;
    call {:si_unique_call 5430} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_16428;

  corral_source_split_16428:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i44 == 1;
    goto corral_source_split_16407;

  corral_source_split_16407:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.52, $p1);
    goto corral_source_split_16408;

  corral_source_split_16408:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_16409;

  corral_source_split_16409:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    goto corral_source_split_16410;

  corral_source_split_16410:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.52, $p0);
    goto corral_source_split_16411;

  corral_source_split_16411:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_16412;

  corral_source_split_16412:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    goto corral_source_split_16413;

  corral_source_split_16413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5427} vslice_dummy_var_213 := grf5101_rf_calc_rssi($i47, $i50);
    goto corral_source_split_16414;

  corral_source_split_16414:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 5428} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_16415;

  corral_source_split_16415:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i35 == 1;
    goto corral_source_split_16394;

  corral_source_split_16394:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.52, $p1);
    goto corral_source_split_16395;

  corral_source_split_16395:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_16396;

  corral_source_split_16396:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    goto corral_source_split_16397;

  corral_source_split_16397:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.52, $p0);
    goto corral_source_split_16398;

  corral_source_split_16398:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_16399;

  corral_source_split_16399:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_16400;

  corral_source_split_16400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5425} vslice_dummy_var_212 := grf5101_rf_calc_rssi($i38, $i41);
    goto corral_source_split_16401;

  corral_source_split_16401:
    assume {:verifier.code 0} true;
    $M.78 := 4;
    call {:si_unique_call 5426} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_16402;

  corral_source_split_16402:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb15:
    assume $i13 == 1;
    goto corral_source_split_16339;

  corral_source_split_16339:
    assume {:verifier.code 0} true;
    $i31 := $M.78;
    goto corral_source_split_16340;

  corral_source_split_16340:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 4);
    goto corral_source_split_16341;

  corral_source_split_16341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb37:
    assume $i32 == 1;
    goto corral_source_split_16389;

  corral_source_split_16389:
    assume {:verifier.code 0} true;
    $p33 := $M.92;
    goto corral_source_split_16390;

  corral_source_split_16390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5423} grf5101_rf_stop($p33);
    goto corral_source_split_16391;

  corral_source_split_16391:
    assume {:verifier.code 0} true;
    $M.78 := 3;
    call {:si_unique_call 5424} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_16392;

  corral_source_split_16392:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb13:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i6, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i14 == 1);
    goto corral_source_split_16347;

  corral_source_split_16347:
    assume {:verifier.code 0} true;
    $i28 := $M.78;
    goto corral_source_split_16348;

  corral_source_split_16348:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 2);
    goto corral_source_split_16349;

  corral_source_split_16349:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb34:
    assume $i29 == 1;
    goto corral_source_split_16384;

  corral_source_split_16384:
    assume {:verifier.code 0} true;
    $p30 := $M.92;
    goto corral_source_split_16385;

  corral_source_split_16385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5421} grf5101_rf_init($p30);
    goto corral_source_split_16386;

  corral_source_split_16386:
    assume {:verifier.code 0} true;
    $M.78 := 3;
    call {:si_unique_call 5422} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_16387;

  corral_source_split_16387:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb17:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i6, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb19:
    assume $i15 == 1;
    goto corral_source_split_16351;

  corral_source_split_16351:
    assume {:verifier.code 0} true;
    $i16 := $M.78;
    goto corral_source_split_16352;

  corral_source_split_16352:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 4);
    goto corral_source_split_16353;

  corral_source_split_16353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i19 := $M.78;
    goto corral_source_split_16360;

  corral_source_split_16360:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 1);
    goto corral_source_split_16361;

  corral_source_split_16361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i22 := $M.78;
    goto corral_source_split_16368;

  corral_source_split_16368:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 3);
    goto corral_source_split_16369;

  corral_source_split_16369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i25 := $M.78;
    goto corral_source_split_16376;

  corral_source_split_16376:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_16377;

  corral_source_split_16377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i26 == 1;
    goto corral_source_split_16379;

  corral_source_split_16379:
    assume {:verifier.code 0} true;
    $p27 := $M.92;
    goto corral_source_split_16380;

  corral_source_split_16380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5419} grf5101_rf_set_channel($p27, $p3);
    goto corral_source_split_16381;

  corral_source_split_16381:
    assume {:verifier.code 0} true;
    $M.78 := 2;
    call {:si_unique_call 5420} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_16382;

  corral_source_split_16382:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i23 == 1;
    goto corral_source_split_16371;

  corral_source_split_16371:
    assume {:verifier.code 0} true;
    $p24 := $M.92;
    goto corral_source_split_16372;

  corral_source_split_16372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5417} grf5101_rf_set_channel($p24, $p3);
    goto corral_source_split_16373;

  corral_source_split_16373:
    assume {:verifier.code 0} true;
    $M.78 := 3;
    call {:si_unique_call 5418} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_16374;

  corral_source_split_16374:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i20 == 1;
    goto corral_source_split_16363;

  corral_source_split_16363:
    assume {:verifier.code 0} true;
    $p21 := $M.92;
    goto corral_source_split_16364;

  corral_source_split_16364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5415} grf5101_rf_set_channel($p21, $p3);
    goto corral_source_split_16365;

  corral_source_split_16365:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 5416} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_16366;

  corral_source_split_16366:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i17 == 1;
    goto corral_source_split_16355;

  corral_source_split_16355:
    assume {:verifier.code 0} true;
    $p18 := $M.92;
    goto corral_source_split_16356;

  corral_source_split_16356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5413} grf5101_rf_set_channel($p18, $p3);
    goto corral_source_split_16357;

  corral_source_split_16357:
    assume {:verifier.code 0} true;
    $M.78 := 4;
    call {:si_unique_call 5414} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_16358;

  corral_source_split_16358:
    assume {:verifier.code 0} true;
    goto $bb23;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 450602);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16474;

  corral_source_split_16474:
    assume {:verifier.code 0} true;
    return;
}



const ldv_disconnect_5: ref;

axiom ldv_disconnect_5 == $sub.ref(0, 451634);

procedure ldv_disconnect_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_disconnect_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16476;

  corral_source_split_16476:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5446} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5447} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16477;

  corral_source_split_16477:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_5: ref;

axiom ldv_release_5 == $sub.ref(0, 452666);

procedure ldv_release_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16479;

  corral_source_split_16479:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5448} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5449} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16480;

  corral_source_split_16480:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_bind_5: ref;

axiom ldv_bind_5 == $sub.ref(0, 453698);

procedure ldv_bind_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_bind_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16482;

  corral_source_split_16482:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5450} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5451} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16483;

  corral_source_split_16483:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_start_5: ref;

axiom ldv_start_5 == $sub.ref(0, 454730);

procedure ldv_start_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_start_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16485;

  corral_source_split_16485:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5452} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5453} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16486;

  corral_source_split_16486:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv___pci_register_driver_49: ref;

axiom ldv___pci_register_driver_49 == $sub.ref(0, 455762);

procedure ldv___pci_register_driver_49($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.77, $M.66, $M.0, $CurrAddr;



implementation ldv___pci_register_driver_49($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16488;

  corral_source_split_16488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5454} $i3 := __pci_register_driver($p0, $p1, $p2);
    call {:si_unique_call 5455} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_16489;

  corral_source_split_16489:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 5456} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_16490;

  corral_source_split_16490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5457} ldv_pci_driver_10();
    goto corral_source_split_16491;

  corral_source_split_16491:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 456794);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16493;

  corral_source_split_16493:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5458} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 5459} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_16494;

  corral_source_split_16494:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_pci_unregister_driver_50: ref;

axiom ldv_pci_unregister_driver_50 == $sub.ref(0, 457826);

procedure ldv_pci_unregister_driver_50($p0: ref);
  free requires assertsPassed;
  modifies $M.77;



implementation ldv_pci_unregister_driver_50($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16496;

  corral_source_split_16496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5460} pci_unregister_driver($p0);
    goto corral_source_split_16497;

  corral_source_split_16497:
    assume {:verifier.code 0} true;
    $M.77 := 0;
    call {:si_unique_call 5461} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_16498;

  corral_source_split_16498:
    assume {:verifier.code 0} true;
    return;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 458858);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16500;

  corral_source_split_16500:
    assume {:verifier.code 0} true;
    return;
}



const ldv_disconnect_4: ref;

axiom ldv_disconnect_4 == $sub.ref(0, 459890);

procedure ldv_disconnect_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_disconnect_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16502;

  corral_source_split_16502:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5462} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5463} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16503;

  corral_source_split_16503:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_4: ref;

axiom ldv_release_4 == $sub.ref(0, 460922);

procedure ldv_release_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16505;

  corral_source_split_16505:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5464} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5465} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16506;

  corral_source_split_16506:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_bind_4: ref;

axiom ldv_bind_4 == $sub.ref(0, 461954);

procedure ldv_bind_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_bind_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16508;

  corral_source_split_16508:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5466} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5467} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16509;

  corral_source_split_16509:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_start_4: ref;

axiom ldv_start_4 == $sub.ref(0, 462986);

procedure ldv_start_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_start_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16511;

  corral_source_split_16511:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5468} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5469} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16512;

  corral_source_split_16512:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_disconnect_8: ref;

axiom ldv_disconnect_8 == $sub.ref(0, 464018);

procedure ldv_disconnect_8() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_disconnect_8() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16514;

  corral_source_split_16514:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5470} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5471} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16515;

  corral_source_split_16515:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_8: ref;

axiom ldv_release_8 == $sub.ref(0, 465050);

procedure ldv_release_8() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_8() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16517;

  corral_source_split_16517:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5472} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5473} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16518;

  corral_source_split_16518:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_bind_8: ref;

axiom ldv_bind_8 == $sub.ref(0, 466082);

procedure ldv_bind_8() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_bind_8() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16520;

  corral_source_split_16520:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5474} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5475} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16521;

  corral_source_split_16521:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_start_8: ref;

axiom ldv_start_8 == $sub.ref(0, 467114);

procedure ldv_start_8() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_start_8() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16523;

  corral_source_split_16523:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5476} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5477} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16524;

  corral_source_split_16524:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_disconnect_9: ref;

axiom ldv_disconnect_9 == $sub.ref(0, 468146);

procedure ldv_disconnect_9() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_disconnect_9() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16526;

  corral_source_split_16526:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5478} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5479} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16527;

  corral_source_split_16527:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_9: ref;

axiom ldv_release_9 == $sub.ref(0, 469178);

procedure ldv_release_9() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_9() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16529;

  corral_source_split_16529:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5480} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5481} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16530;

  corral_source_split_16530:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_bind_9: ref;

axiom ldv_bind_9 == $sub.ref(0, 470210);

procedure ldv_bind_9() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_bind_9() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16532;

  corral_source_split_16532:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5482} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5483} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16533;

  corral_source_split_16533:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_start_9: ref;

axiom ldv_start_9 == $sub.ref(0, 471242);

procedure ldv_start_9() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_start_9() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16535;

  corral_source_split_16535:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5484} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5485} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16536;

  corral_source_split_16536:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_disconnect_7: ref;

axiom ldv_disconnect_7 == $sub.ref(0, 472274);

procedure ldv_disconnect_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_disconnect_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16538;

  corral_source_split_16538:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5486} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5487} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16539;

  corral_source_split_16539:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_7: ref;

axiom ldv_release_7 == $sub.ref(0, 473306);

procedure ldv_release_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16541;

  corral_source_split_16541:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5488} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5489} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16542;

  corral_source_split_16542:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_bind_7: ref;

axiom ldv_bind_7 == $sub.ref(0, 474338);

procedure ldv_bind_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_bind_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16544;

  corral_source_split_16544:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5490} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5491} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16545;

  corral_source_split_16545:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_start_7: ref;

axiom ldv_start_7 == $sub.ref(0, 475370);

procedure ldv_start_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_start_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16547;

  corral_source_split_16547:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5492} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5493} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16548;

  corral_source_split_16548:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_disconnect_6: ref;

axiom ldv_disconnect_6 == $sub.ref(0, 476402);

procedure ldv_disconnect_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_disconnect_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16550;

  corral_source_split_16550:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5494} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5495} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16551;

  corral_source_split_16551:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_6: ref;

axiom ldv_release_6 == $sub.ref(0, 477434);

procedure ldv_release_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16553;

  corral_source_split_16553:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5496} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5497} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16554;

  corral_source_split_16554:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_bind_6: ref;

axiom ldv_bind_6 == $sub.ref(0, 478466);

procedure ldv_bind_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_bind_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16556;

  corral_source_split_16556:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5498} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5499} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16557;

  corral_source_split_16557:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_start_6: ref;

axiom ldv_start_6 == $sub.ref(0, 479498);

procedure ldv_start_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_start_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16559;

  corral_source_split_16559:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5500} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5501} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16560;

  corral_source_split_16560:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 480530);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5502} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_16562;

  corral_source_split_16562:
    assume {:verifier.code 1} true;
    goto corral_source_split_16563;

  corral_source_split_16563:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_16564;

  corral_source_split_16564:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 481562);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 482594);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 483626);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16566;

  corral_source_split_16566:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_16567;

  corral_source_split_16567:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 484658);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 485690);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 486722);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 487754);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 488786);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 489818);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 490850);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __VERIFIER_nondet_unsigned_short: ref;

axiom __VERIFIER_nondet_unsigned_short == $sub.ref(0, 491882);

procedure __VERIFIER_nondet_unsigned_short() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_short() returns ($r: i16)
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16569;

  corral_source_split_16569:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5503} $i0 := __SMACK_nondet_unsigned_short();
    call {:si_unique_call 5504} {:cexpr "smack:ext:__SMACK_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 5505} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_16570;

  corral_source_split_16570:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_16571;

  corral_source_split_16571:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_16572;

  corral_source_split_16572:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_16577;

  corral_source_split_16577:
    assume {:verifier.code 1} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_16578;

  corral_source_split_16578:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5506} __VERIFIER_assume($i6);
    goto corral_source_split_16579;

  corral_source_split_16579:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_16574;

  corral_source_split_16574:
    assume {:verifier.code 1} true;
    $i4 := $zext.i16.i32($i0);
    goto corral_source_split_16575;

  corral_source_split_16575:
    assume {:verifier.code 1} true;
    $i5 := $sle.i32($i4, 65535);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 492914);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 493946);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 494978);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16581;

  corral_source_split_16581:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5507} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 5508} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 5509} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_16582;

  corral_source_split_16582:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_16583;

  corral_source_split_16583:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_16587;

  corral_source_split_16587:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_16588;

  corral_source_split_16588:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5510} __VERIFIER_assume($i4);
    goto corral_source_split_16589;

  corral_source_split_16589:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_16585;

  corral_source_split_16585:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 496010);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 497042);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 498074);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 499106);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16591;

  corral_source_split_16591:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5511} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 5512} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 5513} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_16592;

  corral_source_split_16592:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5514} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 5515} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 5516} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_16593;

  corral_source_split_16593:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5517} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 5518} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 5519} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_16594;

  corral_source_split_16594:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_16595;

  corral_source_split_16595:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_16600;

  corral_source_split_16600:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_16601;

  corral_source_split_16601:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5520} __VERIFIER_assume($i7);
    goto corral_source_split_16602;

  corral_source_split_16602:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_16603;

  corral_source_split_16603:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_16609;

  corral_source_split_16609:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_16610;

  corral_source_split_16610:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5521} __VERIFIER_assume($i11);
    goto corral_source_split_16611;

  corral_source_split_16611:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_16607;

  corral_source_split_16607:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_16597;

  corral_source_split_16597:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_16598;

  corral_source_split_16598:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_16605;

  corral_source_split_16605:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 500138);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 501170);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 502202);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 503234);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 504266);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 505298);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16613;

  corral_source_split_16613:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5522} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 5523} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 5524} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_16614;

  corral_source_split_16614:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5525} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 5526} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 5527} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_16615;

  corral_source_split_16615:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5528} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 5529} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 5530} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_16616;

  corral_source_split_16616:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_16617;

  corral_source_split_16617:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_16622;

  corral_source_split_16622:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_16623;

  corral_source_split_16623:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5531} __VERIFIER_assume($i7);
    goto corral_source_split_16624;

  corral_source_split_16624:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_16625;

  corral_source_split_16625:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_16631;

  corral_source_split_16631:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_16632;

  corral_source_split_16632:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5532} __VERIFIER_assume($i11);
    goto corral_source_split_16633;

  corral_source_split_16633:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_16629;

  corral_source_split_16629:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_16619;

  corral_source_split_16619:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_16620;

  corral_source_split_16620:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_16627;

  corral_source_split_16627:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 506330);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 507362);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 508394);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 509426);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 510458);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 511490);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 512522);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 513554);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 514586);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16635;

  corral_source_split_16635:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5533} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5534} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16636;

  corral_source_split_16636:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_16637;

  corral_source_split_16637:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 5535} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_16638;

  corral_source_split_16638:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_16639;

  corral_source_split_16639:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_16640;

  corral_source_split_16640:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_16641;

  corral_source_split_16641:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_16648;

  corral_source_split_16648:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_16649;

  corral_source_split_16649:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_16650;

  corral_source_split_16650:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_16651;

  corral_source_split_16651:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_16643;

  corral_source_split_16643:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_16644;

  corral_source_split_16644:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5536} __VERIFIER_assume($i10);
    goto corral_source_split_16645;

  corral_source_split_16645:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_16646;

  corral_source_split_16646:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ushort: ref;

axiom __VERIFIER_nondet_ushort == $sub.ref(0, 515618);

procedure __VERIFIER_nondet_ushort() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ushort() returns ($r: i16)
{
  var $i0: i16;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16653;

  corral_source_split_16653:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5537} $i0 := __VERIFIER_nondet_unsigned_short();
    call {:si_unique_call 5538} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 5539} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_16654;

  corral_source_split_16654:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 516650);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16656;

  corral_source_split_16656:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5540} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 5541} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 5542} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_16657;

  corral_source_split_16657:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 517682);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16659;

  corral_source_split_16659:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5543} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 5544} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 5545} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_16660;

  corral_source_split_16660:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 518714);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16662;

  corral_source_split_16662:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5546} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 5547} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_16663;

  corral_source_split_16663:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 519746);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 520778);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 5548} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 5549} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 521810);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 522842);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16665;

  corral_source_split_16665:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_16666;

  corral_source_split_16666:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 523874);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5550} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 5551} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_16668;

  corral_source_split_16668:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5552} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 5553} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_16669;

  corral_source_split_16669:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_16670;

  corral_source_split_16670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_16674;

  corral_source_split_16674:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_16675;

  corral_source_split_16675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5554} $p6 := malloc($i5);
    goto corral_source_split_16676;

  corral_source_split_16676:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_16677;

  corral_source_split_16677:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 5555} cmdloc_dummy_var_23 := $memset.i8(cmdloc_dummy_var_22, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_23;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_16679;

  corral_source_split_16679:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_16672;

  corral_source_split_16672:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 524906);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 525938);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.27, $M.31, $M.29, $M.63, $M.54, $M.60, $M.57, $M.33, $M.7, $M.19, $M.21, $M.23, $M.25, $M.28, $M.36, $M.30, $M.37, $M.32, $M.38, $M.34, $M.39, $M.20, $M.22, $M.24, $M.26, $M.55, $M.56, $M.58, $M.59, $M.61, $M.62, $M.64, $M.65, $M.66, $M.67, $M.8, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.90, $M.89, $M.0, $M.49, $M.50, $M.93, $M.94, $M.95, $M.4, $M.3, $M.2, $M.1, $M.44, $M.43, $M.96, $M.97, $M.98, $M.42, $M.48, $M.47, $M.46, $M.45, $M.187, $M.188, $M.18, $M.17, $M.40, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.195, $M.87, $M.88, $M.92, $M.91, $M.41;



implementation __SMACK_static_init()
{

  $bb0:
    $M.27 := 0;
    call {:si_unique_call 5556} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32(0);
    $M.31 := 0;
    call {:si_unique_call 5557} {:cexpr "ldv_irq_2_2"} boogie_si_record_i32(0);
    $M.29 := 0;
    call {:si_unique_call 5558} {:cexpr "ldv_irq_2_1"} boogie_si_record_i32(0);
    $M.63 := 0;
    call {:si_unique_call 5559} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    $M.54 := 0;
    call {:si_unique_call 5560} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    $M.60 := 0;
    call {:si_unique_call 5561} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    call {:si_unique_call 5562} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.57 := 0;
    call {:si_unique_call 5563} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    $M.33 := 0;
    call {:si_unique_call 5564} {:cexpr "ldv_irq_2_3"} boogie_si_record_i32(0);
    $M.7 := $0.ref;
    $M.19 := 0;
    call {:si_unique_call 5565} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(0);
    $M.21 := 0;
    call {:si_unique_call 5566} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(0);
    $M.23 := 0;
    call {:si_unique_call 5567} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(0);
    $M.25 := 0;
    call {:si_unique_call 5568} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(0);
    $M.28 := 0;
    call {:si_unique_call 5569} {:cexpr "ldv_irq_line_2_0"} boogie_si_record_i32(0);
    $M.36 := $0.ref;
    $M.30 := 0;
    call {:si_unique_call 5570} {:cexpr "ldv_irq_line_2_1"} boogie_si_record_i32(0);
    $M.37 := $0.ref;
    $M.32 := 0;
    call {:si_unique_call 5571} {:cexpr "ldv_irq_line_2_2"} boogie_si_record_i32(0);
    $M.38 := $0.ref;
    $M.34 := 0;
    call {:si_unique_call 5572} {:cexpr "ldv_irq_line_2_3"} boogie_si_record_i32(0);
    $M.39 := $0.ref;
    $M.20 := $0.ref;
    $M.22 := $0.ref;
    $M.24 := $0.ref;
    $M.26 := $0.ref;
    $M.55 := 0;
    call {:si_unique_call 5573} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32(0);
    $M.56 := $0.ref;
    $M.58 := 0;
    call {:si_unique_call 5574} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32(0);
    $M.59 := $0.ref;
    $M.61 := 0;
    call {:si_unique_call 5575} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32(0);
    $M.62 := $0.ref;
    $M.64 := 0;
    call {:si_unique_call 5576} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32(0);
    $M.65 := $0.ref;
    $M.66 := $0.ref;
    $M.67 := 0;
    call {:si_unique_call 5577} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.8 := 0;
    call {:si_unique_call 5578} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    $M.68 := 0;
    call {:si_unique_call 5579} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.69 := 0;
    call {:si_unique_call 5580} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.70 := 0;
    call {:si_unique_call 5581} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.71 := 0;
    call {:si_unique_call 5582} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.72 := 0;
    call {:si_unique_call 5583} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.73 := 0;
    call {:si_unique_call 5584} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.74 := 0;
    call {:si_unique_call 5585} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.75 := 0;
    call {:si_unique_call 5586} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.76 := 0;
    call {:si_unique_call 5587} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.77 := 0;
    call {:si_unique_call 5588} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    $M.78 := 0;
    call {:si_unique_call 5589} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.79 := 0;
    call {:si_unique_call 5590} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.80 := 0;
    call {:si_unique_call 5591} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.81 := 0;
    call {:si_unique_call 5592} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.82 := 0;
    call {:si_unique_call 5593} {:cexpr "pci_counter"} boogie_si_record_i32(0);
    $M.83 := 0;
    call {:si_unique_call 5594} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.84 := 0;
    call {:si_unique_call 5595} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.85 := 0;
    call {:si_unique_call 5596} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.86 := 0;
    call {:si_unique_call 5597} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.90 := $0.ref;
    $M.89 := $0.ref;
    $M.0 := $store.ref($M.0, sa2400_rf_ops, .str);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sa2400_rf_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), sa2400_rf_init);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sa2400_rf_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), sa2400_rf_stop);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sa2400_rf_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), sa2400_rf_set_channel);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sa2400_rf_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), sa2400_rf_calc_rssi);
    $M.0 := $store.ref($M.0, rtl8225se_ops, .str.49);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rtl8225se_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), rtl8225se_rf_init);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rtl8225se_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), rtl8225se_rf_stop);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rtl8225se_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), rtl8225se_rf_set_channel);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rtl8225se_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), $0.ref);
    $M.49 := $store.i32($M.49, rtl8225se_chan, 128);
    $M.49 := $store.i32($M.49, $add.ref($add.ref(rtl8225se_chan, $mul.ref(0, 56)), $mul.ref(1, 4)), 256);
    $M.49 := $store.i32($M.49, $add.ref($add.ref(rtl8225se_chan, $mul.ref(0, 56)), $mul.ref(2, 4)), 384);
    $M.49 := $store.i32($M.49, $add.ref($add.ref(rtl8225se_chan, $mul.ref(0, 56)), $mul.ref(3, 4)), 512);
    $M.49 := $store.i32($M.49, $add.ref($add.ref(rtl8225se_chan, $mul.ref(0, 56)), $mul.ref(4, 4)), 640);
    $M.49 := $store.i32($M.49, $add.ref($add.ref(rtl8225se_chan, $mul.ref(0, 56)), $mul.ref(5, 4)), 768);
    $M.49 := $store.i32($M.49, $add.ref($add.ref(rtl8225se_chan, $mul.ref(0, 56)), $mul.ref(6, 4)), 896);
    $M.49 := $store.i32($M.49, $add.ref($add.ref(rtl8225se_chan, $mul.ref(0, 56)), $mul.ref(7, 4)), 1024);
    $M.49 := $store.i32($M.49, $add.ref($add.ref(rtl8225se_chan, $mul.ref(0, 56)), $mul.ref(8, 4)), 1152);
    $M.49 := $store.i32($M.49, $add.ref($add.ref(rtl8225se_chan, $mul.ref(0, 56)), $mul.ref(9, 4)), 1280);
    $M.49 := $store.i32($M.49, $add.ref($add.ref(rtl8225se_chan, $mul.ref(0, 56)), $mul.ref(10, 4)), 1408);
    $M.49 := $store.i32($M.49, $add.ref($add.ref(rtl8225se_chan, $mul.ref(0, 56)), $mul.ref(11, 4)), 1536);
    $M.49 := $store.i32($M.49, $add.ref($add.ref(rtl8225se_chan, $mul.ref(0, 56)), $mul.ref(12, 4)), 1664);
    $M.49 := $store.i32($M.49, $add.ref($add.ref(rtl8225se_chan, $mul.ref(0, 56)), $mul.ref(13, 4)), 1866);
    $M.50 := $store.i8($M.50, cck_ofdm_gain_settings, 0);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(1, 1)), 1);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(2, 1)), 2);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(3, 1)), 3);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(4, 1)), 4);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(5, 1)), 5);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(6, 1)), 6);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(7, 1)), 7);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(8, 1)), 8);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(9, 1)), 9);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(10, 1)), 10);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(11, 1)), 11);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(12, 1)), 12);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(13, 1)), 13);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(14, 1)), 14);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(15, 1)), 15);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(16, 1)), 16);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(17, 1)), 17);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(18, 1)), 18);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(19, 1)), 19);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(20, 1)), 20);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(21, 1)), 21);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(22, 1)), 22);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(23, 1)), 23);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(24, 1)), 24);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(25, 1)), 25);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(26, 1)), 26);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(27, 1)), 27);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(28, 1)), 28);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(29, 1)), 29);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(30, 1)), 30);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(31, 1)), 31);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(32, 1)), 32);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(33, 1)), 33);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(34, 1)), 34);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(cck_ofdm_gain_settings, $mul.ref(0, 36)), $mul.ref(35, 1)), 35);
    $M.93 := $store.i8($M.93, OFDM_CONFIG, 16);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(1, 1)), 15);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(2, 1)), 10);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(3, 1)), 12);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(4, 1)), 20);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(5, 1)), $sub.i8(0, 6));
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(6, 1)), $sub.i8(0, 1));
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(7, 1)), 80);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(8, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(9, 1)), 80);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(10, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(11, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(12, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(13, 1)), 92);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(14, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(15, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(16, 1)), 64);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(17, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(18, 1)), 64);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(19, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(20, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(21, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(22, 1)), $sub.i8(0, 88));
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(23, 1)), 38);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(24, 1)), 50);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(25, 1)), 51);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(26, 1)), 6);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(27, 1)), $sub.i8(0, 91));
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(28, 1)), 111);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(29, 1)), 85);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(30, 1)), $sub.i8(0, 56));
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(31, 1)), $sub.i8(0, 69));
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(32, 1)), 10);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(33, 1)), $sub.i8(0, 31));
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(34, 1)), 44);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(35, 1)), 74);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(36, 1)), $sub.i8(0, 122));
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(37, 1)), $sub.i8(0, 125));
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(38, 1)), 52);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(39, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(40, 1)), 79);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(41, 1)), 36);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(42, 1)), 111);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(43, 1)), $sub.i8(0, 62));
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(44, 1)), 3);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(45, 1)), 64);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(46, 1)), $sub.i8(0, 128));
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(47, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(48, 1)), $sub.i8(0, 64));
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(49, 1)), $sub.i8(0, 63));
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(50, 1)), 88);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(51, 1)), $sub.i8(0, 15));
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(52, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(53, 1)), $sub.i8(0, 60));
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(54, 1)), $sub.i8(0, 112));
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(55, 1)), 62);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(56, 1)), $sub.i8(0, 40));
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(57, 1)), 60);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(58, 1)), 123);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(59, 1)), 16);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(OFDM_CONFIG, $mul.ref(0, 61)), $mul.ref(60, 1)), 16);
    $M.94 := $store.i8($M.94, ZEBRA_AGC, 126);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(1, 1)), 126);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(2, 1)), 126);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(3, 1)), 126);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(4, 1)), 125);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(5, 1)), 124);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(6, 1)), 123);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(7, 1)), 122);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(8, 1)), 121);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(9, 1)), 120);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(10, 1)), 119);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(11, 1)), 118);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(12, 1)), 117);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(13, 1)), 116);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(14, 1)), 115);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(15, 1)), 114);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(16, 1)), 113);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(17, 1)), 112);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(18, 1)), 111);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(19, 1)), 110);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(20, 1)), 109);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(21, 1)), 108);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(22, 1)), 107);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(23, 1)), 106);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(24, 1)), 105);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(25, 1)), 104);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(26, 1)), 103);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(27, 1)), 102);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(28, 1)), 101);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(29, 1)), 100);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(30, 1)), 99);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(31, 1)), 98);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(32, 1)), 72);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(33, 1)), 71);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(34, 1)), 70);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(35, 1)), 69);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(36, 1)), 68);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(37, 1)), 41);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(38, 1)), 40);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(39, 1)), 39);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(40, 1)), 38);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(41, 1)), 37);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(42, 1)), 36);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(43, 1)), 35);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(44, 1)), 34);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(45, 1)), 33);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(46, 1)), 8);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(47, 1)), 7);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(48, 1)), 6);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(49, 1)), 5);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(50, 1)), 4);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(51, 1)), 3);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(52, 1)), 2);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(53, 1)), 1);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(54, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(55, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(56, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(57, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(58, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(59, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(60, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(61, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(62, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(63, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(64, 1)), 15);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(65, 1)), 15);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(66, 1)), 15);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(67, 1)), 15);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(68, 1)), 15);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(69, 1)), 15);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(70, 1)), 15);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(71, 1)), 15);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(72, 1)), 15);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(73, 1)), 15);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(74, 1)), 16);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(75, 1)), 17);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(76, 1)), 18);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(77, 1)), 19);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(78, 1)), 21);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(79, 1)), 22);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(80, 1)), 23);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(81, 1)), 23);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(82, 1)), 24);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(83, 1)), 24);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(84, 1)), 25);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(85, 1)), 26);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(86, 1)), 26);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(87, 1)), 27);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(88, 1)), 27);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(89, 1)), 28);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(90, 1)), 28);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(91, 1)), 29);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(92, 1)), 29);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(93, 1)), 29);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(94, 1)), 30);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(95, 1)), 30);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(96, 1)), 31);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(97, 1)), 31);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(98, 1)), 31);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(99, 1)), 32);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(100, 1)), 32);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(101, 1)), 32);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(102, 1)), 32);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(103, 1)), 33);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(104, 1)), 33);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(105, 1)), 33);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(106, 1)), 34);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(107, 1)), 34);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(108, 1)), 34);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(109, 1)), 35);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(110, 1)), 35);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(111, 1)), 36);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(112, 1)), 36);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(113, 1)), 37);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(114, 1)), 37);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(115, 1)), 37);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(116, 1)), 38);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(117, 1)), 38);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(118, 1)), 39);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(119, 1)), 39);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(120, 1)), 47);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(121, 1)), 47);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(122, 1)), 47);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(123, 1)), 47);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(124, 1)), 47);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(125, 1)), 47);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(126, 1)), 47);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(ZEBRA_AGC, $mul.ref(0, 128)), $mul.ref(127, 1)), 47);
    $M.95 := $store.i32($M.95, RF_GAIN_TABLE, 150);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(1, 4)), 118);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(2, 4)), 86);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(3, 4)), 54);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(4, 4)), 22);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(5, 4)), 502);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(6, 4)), 470);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(7, 4)), 438);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(8, 4)), 406);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(9, 4)), 374);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(10, 4)), 247);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(11, 4)), 215);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(12, 4)), 183);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(13, 4)), 151);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(14, 4)), 119);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(15, 4)), 87);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(16, 4)), 55);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(17, 4)), 251);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(18, 4)), 219);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(19, 4)), 187);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(20, 4)), 255);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(21, 4)), 227);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(22, 4)), 195);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(23, 4)), 163);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(24, 4)), 131);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(25, 4)), 99);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(26, 4)), 67);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(27, 4)), 35);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(28, 4)), 3);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(29, 4)), 483);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(30, 4)), 451);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(31, 4)), 419);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(32, 4)), 387);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(33, 4)), 355);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(34, 4)), 323);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(35, 4)), 291);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(RF_GAIN_TABLE, $mul.ref(0, 148)), $mul.ref(36, 4)), 259);
    $M.4 := $store.i32($M.4, grf5101_encode, 0);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(grf5101_encode, $mul.ref(0, 64)), $mul.ref(1, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(grf5101_encode, $mul.ref(0, 64)), $mul.ref(2, 4)), 4);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(grf5101_encode, $mul.ref(0, 64)), $mul.ref(3, 4)), 12);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(grf5101_encode, $mul.ref(0, 64)), $mul.ref(4, 4)), 2);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(grf5101_encode, $mul.ref(0, 64)), $mul.ref(5, 4)), 10);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(grf5101_encode, $mul.ref(0, 64)), $mul.ref(6, 4)), 6);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(grf5101_encode, $mul.ref(0, 64)), $mul.ref(7, 4)), 14);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(grf5101_encode, $mul.ref(0, 64)), $mul.ref(8, 4)), 1);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(grf5101_encode, $mul.ref(0, 64)), $mul.ref(9, 4)), 9);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(grf5101_encode, $mul.ref(0, 64)), $mul.ref(10, 4)), 5);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(grf5101_encode, $mul.ref(0, 64)), $mul.ref(11, 4)), 13);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(grf5101_encode, $mul.ref(0, 64)), $mul.ref(12, 4)), 3);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(grf5101_encode, $mul.ref(0, 64)), $mul.ref(13, 4)), 11);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(grf5101_encode, $mul.ref(0, 64)), $mul.ref(14, 4)), 7);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(grf5101_encode, $mul.ref(0, 64)), $mul.ref(15, 4)), 15);
    $M.3 := $store.i32($M.3, max2820_chan, 12);
    $M.3 := $store.i32($M.3, $add.ref($add.ref(max2820_chan, $mul.ref(0, 56)), $mul.ref(1, 4)), 17);
    $M.3 := $store.i32($M.3, $add.ref($add.ref(max2820_chan, $mul.ref(0, 56)), $mul.ref(2, 4)), 22);
    $M.3 := $store.i32($M.3, $add.ref($add.ref(max2820_chan, $mul.ref(0, 56)), $mul.ref(3, 4)), 27);
    $M.3 := $store.i32($M.3, $add.ref($add.ref(max2820_chan, $mul.ref(0, 56)), $mul.ref(4, 4)), 32);
    $M.3 := $store.i32($M.3, $add.ref($add.ref(max2820_chan, $mul.ref(0, 56)), $mul.ref(5, 4)), 37);
    $M.3 := $store.i32($M.3, $add.ref($add.ref(max2820_chan, $mul.ref(0, 56)), $mul.ref(6, 4)), 42);
    $M.3 := $store.i32($M.3, $add.ref($add.ref(max2820_chan, $mul.ref(0, 56)), $mul.ref(7, 4)), 47);
    $M.3 := $store.i32($M.3, $add.ref($add.ref(max2820_chan, $mul.ref(0, 56)), $mul.ref(8, 4)), 52);
    $M.3 := $store.i32($M.3, $add.ref($add.ref(max2820_chan, $mul.ref(0, 56)), $mul.ref(9, 4)), 57);
    $M.3 := $store.i32($M.3, $add.ref($add.ref(max2820_chan, $mul.ref(0, 56)), $mul.ref(10, 4)), 62);
    $M.3 := $store.i32($M.3, $add.ref($add.ref(max2820_chan, $mul.ref(0, 56)), $mul.ref(11, 4)), 67);
    $M.3 := $store.i32($M.3, $add.ref($add.ref(max2820_chan, $mul.ref(0, 56)), $mul.ref(12, 4)), 72);
    $M.3 := $store.i32($M.3, $add.ref($add.ref(max2820_chan, $mul.ref(0, 56)), $mul.ref(13, 4)), 84);
    $M.2 := $store.i8($M.2, sa2400_rf_rssi_map, 100);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(1, 1)), 100);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(2, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(3, 1)), 98);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(4, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(5, 1)), 96);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(6, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(7, 1)), 94);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(8, 1)), 93);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(9, 1)), 92);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(10, 1)), 91);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(11, 1)), 90);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(12, 1)), 87);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(13, 1)), 84);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(14, 1)), 82);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(15, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(16, 1)), 78);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(17, 1)), 76);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(18, 1)), 74);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(19, 1)), 72);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(20, 1)), 70);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(21, 1)), 68);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(22, 1)), 65);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(23, 1)), 63);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(24, 1)), 60);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(25, 1)), 58);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(26, 1)), 55);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(27, 1)), 54);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(28, 1)), 54);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(29, 1)), 28);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(30, 1)), 28);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(31, 1)), 27);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(32, 1)), 27);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(33, 1)), 26);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(34, 1)), 26);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(35, 1)), 25);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(36, 1)), 25);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(37, 1)), 24);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(38, 1)), 24);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(39, 1)), 23);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(40, 1)), 23);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(41, 1)), 22);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(42, 1)), 22);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(43, 1)), 21);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(44, 1)), 21);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(45, 1)), 20);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(46, 1)), 20);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(47, 1)), 19);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(48, 1)), 19);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(49, 1)), 18);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(50, 1)), 18);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(51, 1)), 17);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(52, 1)), 17);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(53, 1)), 16);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(54, 1)), 16);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(55, 1)), 15);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(56, 1)), 15);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(57, 1)), 14);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(58, 1)), 14);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(59, 1)), 13);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(60, 1)), 13);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(61, 1)), 12);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(62, 1)), 12);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(63, 1)), 11);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(64, 1)), 11);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(65, 1)), 10);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(66, 1)), 10);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(67, 1)), 9);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(68, 1)), 9);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(69, 1)), 8);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(70, 1)), 8);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(71, 1)), 7);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(72, 1)), 7);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(73, 1)), 6);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(74, 1)), 6);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(75, 1)), 5);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(76, 1)), 4);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(77, 1)), 3);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(sa2400_rf_rssi_map, $mul.ref(0, 79)), $mul.ref(78, 1)), 2);
    $M.1 := $store.i32($M.1, sa2400_chan, 2412);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(sa2400_chan, $mul.ref(0, 56)), $mul.ref(1, 4)), 526704);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(sa2400_chan, $mul.ref(0, 56)), $mul.ref(2, 4)), 1050996);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(sa2400_chan, $mul.ref(0, 56)), $mul.ref(3, 4)), 1575288);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(sa2400_chan, $mul.ref(0, 56)), $mul.ref(4, 4)), 2432);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(sa2400_chan, $mul.ref(0, 56)), $mul.ref(5, 4)), 526724);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(sa2400_chan, $mul.ref(0, 56)), $mul.ref(6, 4)), 1051016);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(sa2400_chan, $mul.ref(0, 56)), $mul.ref(7, 4)), 1575308);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(sa2400_chan, $mul.ref(0, 56)), $mul.ref(8, 4)), 2452);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(sa2400_chan, $mul.ref(0, 56)), $mul.ref(9, 4)), 526744);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(sa2400_chan, $mul.ref(0, 56)), $mul.ref(10, 4)), 1051036);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(sa2400_chan, $mul.ref(0, 56)), $mul.ref(11, 4)), 1575328);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(sa2400_chan, $mul.ref(0, 56)), $mul.ref(12, 4)), 2472);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(sa2400_chan, $mul.ref(0, 56)), $mul.ref(13, 4)), 2484);
    $M.44 := $store.i8($M.44, rtl8225_threshold, $sub.i8(0, 115));
    $M.44 := $store.i8($M.44, $add.ref($add.ref(rtl8225_threshold, $mul.ref(0, 7)), $mul.ref(1, 1)), $sub.i8(0, 115));
    $M.44 := $store.i8($M.44, $add.ref($add.ref(rtl8225_threshold, $mul.ref(0, 7)), $mul.ref(2, 1)), $sub.i8(0, 115));
    $M.44 := $store.i8($M.44, $add.ref($add.ref(rtl8225_threshold, $mul.ref(0, 7)), $mul.ref(3, 1)), $sub.i8(0, 115));
    $M.44 := $store.i8($M.44, $add.ref($add.ref(rtl8225_threshold, $mul.ref(0, 7)), $mul.ref(4, 1)), $sub.i8(0, 99));
    $M.44 := $store.i8($M.44, $add.ref($add.ref(rtl8225_threshold, $mul.ref(0, 7)), $mul.ref(5, 1)), $sub.i8(0, 83));
    $M.44 := $store.i8($M.44, $add.ref($add.ref(rtl8225_threshold, $mul.ref(0, 7)), $mul.ref(6, 1)), $sub.i8(0, 67));
    $M.43 := $store.i8($M.43, rtl8225_gain, 35);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(1, 1)), $sub.i8(0, 120));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(2, 1)), 124);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(3, 1)), $sub.i8(0, 91));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(4, 1)), 35);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(5, 1)), $sub.i8(0, 120));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(6, 1)), 124);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(7, 1)), $sub.i8(0, 75));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(8, 1)), 35);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(9, 1)), $sub.i8(0, 120));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(10, 1)), 124);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(11, 1)), $sub.i8(0, 59));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(12, 1)), 51);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(13, 1)), $sub.i8(0, 128));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(14, 1)), 121);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(15, 1)), $sub.i8(0, 59));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(16, 1)), 67);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(17, 1)), 120);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(18, 1)), 118);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(19, 1)), $sub.i8(0, 59));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(20, 1)), 83);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(21, 1)), 96);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(22, 1)), 115);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(23, 1)), $sub.i8(0, 59));
    $M.43 := $store.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(24, 1)), 99);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(25, 1)), 88);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(26, 1)), 112);
    $M.43 := $store.i8($M.43, $add.ref($add.ref(rtl8225_gain, $mul.ref(0, 28)), $mul.ref(27, 1)), $sub.i8(0, 59));
    $M.96 := $store.i16($M.96, rtl8225bcd_rxgain, 1024);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(1, 2)), 1025);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(2, 2)), 1026);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(3, 2)), 1027);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(4, 2)), 1028);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(5, 2)), 1029);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(6, 2)), 1032);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(7, 2)), 1033);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(8, 2)), 1034);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(9, 2)), 1035);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(10, 2)), 1282);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(11, 2)), 1283);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(12, 2)), 1284);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(13, 2)), 1285);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(14, 2)), 1344);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(15, 2)), 1345);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(16, 2)), 1346);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(17, 2)), 1347);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(18, 2)), 1348);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(19, 2)), 1349);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(20, 2)), 1408);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(21, 2)), 1409);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(22, 2)), 1410);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(23, 2)), 1411);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(24, 2)), 1412);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(25, 2)), 1413);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(26, 2)), 1416);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(27, 2)), 1417);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(28, 2)), 1418);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(29, 2)), 1419);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(30, 2)), 1603);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(31, 2)), 1604);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(32, 2)), 1605);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(33, 2)), 1664);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(34, 2)), 1665);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(35, 2)), 1666);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(36, 2)), 1667);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(37, 2)), 1668);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(38, 2)), 1669);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(39, 2)), 1672);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(40, 2)), 1673);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(41, 2)), 1674);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(42, 2)), 1675);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(43, 2)), 1676);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(44, 2)), 1858);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(45, 2)), 1859);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(46, 2)), 1860);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(47, 2)), 1861);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(48, 2)), 1920);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(49, 2)), 1921);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(50, 2)), 1922);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(51, 2)), 1923);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(52, 2)), 1924);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(53, 2)), 1925);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(54, 2)), 1928);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(55, 2)), 1929);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(56, 2)), 1930);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(57, 2)), 1931);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(58, 2)), 1932);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(59, 2)), 1933);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(60, 2)), 1936);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(61, 2)), 1937);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(62, 2)), 1938);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(63, 2)), 1939);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(64, 2)), 1940);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(65, 2)), 1941);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(66, 2)), 1944);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(67, 2)), 1945);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(68, 2)), 1946);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(69, 2)), 1947);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(70, 2)), 1948);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(71, 2)), 1949);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(72, 2)), 1952);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(73, 2)), 1953);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(74, 2)), 1954);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(75, 2)), 1955);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(76, 2)), 1956);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(77, 2)), 1957);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(78, 2)), 1960);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(79, 2)), 1961);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(80, 2)), 1962);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(81, 2)), 1963);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(82, 2)), 1964);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(83, 2)), 1965);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(84, 2)), 1968);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(85, 2)), 1969);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(86, 2)), 1970);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(87, 2)), 1971);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(88, 2)), 1972);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(89, 2)), 1973);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(90, 2)), 1976);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(91, 2)), 1977);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(92, 2)), 1978);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(93, 2)), 1979);
    $M.96 := $store.i16($M.96, $add.ref($add.ref(rtl8225bcd_rxgain, $mul.ref(0, 190)), $mul.ref(94, 2)), 1979);
    $M.97 := $store.i8($M.97, rtl8225_agc, $sub.i8(0, 98));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(1, 1)), $sub.i8(0, 98));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(2, 1)), $sub.i8(0, 98));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(3, 1)), $sub.i8(0, 98));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(4, 1)), $sub.i8(0, 98));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(5, 1)), $sub.i8(0, 98));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(6, 1)), $sub.i8(0, 98));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(7, 1)), $sub.i8(0, 98));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(8, 1)), $sub.i8(0, 99));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(9, 1)), $sub.i8(0, 100));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(10, 1)), $sub.i8(0, 101));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(11, 1)), $sub.i8(0, 102));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(12, 1)), $sub.i8(0, 103));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(13, 1)), $sub.i8(0, 104));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(14, 1)), $sub.i8(0, 105));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(15, 1)), $sub.i8(0, 106));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(16, 1)), $sub.i8(0, 107));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(17, 1)), $sub.i8(0, 108));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(18, 1)), $sub.i8(0, 109));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(19, 1)), $sub.i8(0, 110));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(20, 1)), $sub.i8(0, 111));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(21, 1)), $sub.i8(0, 112));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(22, 1)), $sub.i8(0, 113));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(23, 1)), $sub.i8(0, 114));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(24, 1)), $sub.i8(0, 115));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(25, 1)), $sub.i8(0, 116));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(26, 1)), $sub.i8(0, 117));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(27, 1)), $sub.i8(0, 118));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(28, 1)), $sub.i8(0, 119));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(29, 1)), $sub.i8(0, 120));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(30, 1)), $sub.i8(0, 121));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(31, 1)), $sub.i8(0, 122));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(32, 1)), $sub.i8(0, 123));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(33, 1)), $sub.i8(0, 124));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(34, 1)), $sub.i8(0, 125));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(35, 1)), $sub.i8(0, 126));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(36, 1)), $sub.i8(0, 127));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(37, 1)), $sub.i8(0, 128));
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(38, 1)), 63);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(39, 1)), 62);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(40, 1)), 61);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(41, 1)), 60);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(42, 1)), 59);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(43, 1)), 58);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(44, 1)), 57);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(45, 1)), 56);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(46, 1)), 55);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(47, 1)), 54);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(48, 1)), 53);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(49, 1)), 52);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(50, 1)), 51);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(51, 1)), 50);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(52, 1)), 49);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(53, 1)), 48);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(54, 1)), 47);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(55, 1)), 46);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(56, 1)), 45);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(57, 1)), 44);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(58, 1)), 43);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(59, 1)), 42);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(60, 1)), 41);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(61, 1)), 40);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(62, 1)), 39);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(63, 1)), 38);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(64, 1)), 37);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(65, 1)), 36);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(66, 1)), 35);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(67, 1)), 34);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(68, 1)), 33);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(69, 1)), 32);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(70, 1)), 31);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(71, 1)), 30);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(72, 1)), 29);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(73, 1)), 28);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(74, 1)), 27);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(75, 1)), 26);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(76, 1)), 25);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(77, 1)), 24);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(78, 1)), 23);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(79, 1)), 22);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(80, 1)), 21);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(81, 1)), 20);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(82, 1)), 19);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(83, 1)), 18);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(84, 1)), 17);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(85, 1)), 16);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(86, 1)), 15);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(87, 1)), 14);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(88, 1)), 13);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(89, 1)), 12);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(90, 1)), 11);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(91, 1)), 10);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(92, 1)), 9);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(93, 1)), 8);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(94, 1)), 7);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(95, 1)), 6);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(96, 1)), 5);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(97, 1)), 4);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(98, 1)), 3);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(99, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(100, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(101, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(102, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(103, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(104, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(105, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(106, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(107, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(108, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(109, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(110, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(111, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(112, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(113, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(114, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(115, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(116, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(117, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(118, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(119, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(120, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(121, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(122, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(123, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(124, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(125, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(126, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(rtl8225_agc, $mul.ref(0, 128)), $mul.ref(127, 1)), 1);
    $M.98 := $store.i16($M.98, rtl8225z2_rxgain, 0);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(1, 2)), 1);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(2, 2)), 2);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(3, 2)), 3);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(4, 2)), 4);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(5, 2)), 5);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(6, 2)), 8);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(7, 2)), 9);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(8, 2)), 10);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(9, 2)), 11);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(10, 2)), 258);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(11, 2)), 259);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(12, 2)), 260);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(13, 2)), 261);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(14, 2)), 320);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(15, 2)), 321);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(16, 2)), 322);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(17, 2)), 323);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(18, 2)), 324);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(19, 2)), 325);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(20, 2)), 384);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(21, 2)), 385);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(22, 2)), 386);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(23, 2)), 387);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(24, 2)), 388);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(25, 2)), 389);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(26, 2)), 392);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(27, 2)), 393);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(28, 2)), 394);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(29, 2)), 395);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(30, 2)), 579);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(31, 2)), 580);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(32, 2)), 581);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(33, 2)), 640);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(34, 2)), 641);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(35, 2)), 642);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(36, 2)), 643);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(37, 2)), 644);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(38, 2)), 645);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(39, 2)), 648);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(40, 2)), 649);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(41, 2)), 650);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(42, 2)), 651);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(43, 2)), 652);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(44, 2)), 834);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(45, 2)), 835);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(46, 2)), 836);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(47, 2)), 837);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(48, 2)), 896);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(49, 2)), 897);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(50, 2)), 898);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(51, 2)), 899);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(52, 2)), 900);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(53, 2)), 901);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(54, 2)), 904);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(55, 2)), 905);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(56, 2)), 906);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(57, 2)), 907);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(58, 2)), 908);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(59, 2)), 909);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(60, 2)), 912);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(61, 2)), 913);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(62, 2)), 914);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(63, 2)), 915);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(64, 2)), 916);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(65, 2)), 917);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(66, 2)), 920);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(67, 2)), 921);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(68, 2)), 922);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(69, 2)), 923);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(70, 2)), 924);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(71, 2)), 925);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(72, 2)), 928);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(73, 2)), 929);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(74, 2)), 930);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(75, 2)), 931);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(76, 2)), 932);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(77, 2)), 933);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(78, 2)), 936);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(79, 2)), 937);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(80, 2)), 938);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(81, 2)), 939);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(82, 2)), 940);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(83, 2)), 941);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(84, 2)), 944);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(85, 2)), 945);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(86, 2)), 946);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(87, 2)), 947);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(88, 2)), 948);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(89, 2)), 949);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(90, 2)), 952);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(91, 2)), 953);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(92, 2)), 954);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(93, 2)), 955);
    $M.98 := $store.i16($M.98, $add.ref($add.ref(rtl8225z2_rxgain, $mul.ref(0, 190)), $mul.ref(94, 2)), 955);
    $M.42 := $store.i32($M.42, rtl8225_chan, 2140);
    $M.42 := $store.i32($M.42, $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref(1, 4)), 2268);
    $M.42 := $store.i32($M.42, $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref(2, 4)), 2396);
    $M.42 := $store.i32($M.42, $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref(3, 4)), 2524);
    $M.42 := $store.i32($M.42, $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref(4, 4)), 2652);
    $M.42 := $store.i32($M.42, $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref(5, 4)), 2780);
    $M.42 := $store.i32($M.42, $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref(6, 4)), 2908);
    $M.42 := $store.i32($M.42, $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref(7, 4)), 3036);
    $M.42 := $store.i32($M.42, $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref(8, 4)), 3164);
    $M.42 := $store.i32($M.42, $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref(9, 4)), 3292);
    $M.42 := $store.i32($M.42, $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref(10, 4)), 3420);
    $M.42 := $store.i32($M.42, $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref(11, 4)), 3548);
    $M.42 := $store.i32($M.42, $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref(12, 4)), 3676);
    $M.42 := $store.i32($M.42, $add.ref($add.ref(rtl8225_chan, $mul.ref(0, 56)), $mul.ref(13, 4)), 3954);
    $M.48 := $store.i8($M.48, rtl8225z2_tx_power_cck, 54);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 8)), $mul.ref(1, 1)), 53);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 8)), $mul.ref(2, 1)), 46);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 8)), $mul.ref(3, 1)), 37);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 8)), $mul.ref(4, 1)), 28);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 8)), $mul.ref(5, 1)), 18);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 8)), $mul.ref(6, 1)), 9);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck, $mul.ref(0, 8)), $mul.ref(7, 1)), 4);
    $M.48 := $store.i8($M.48, rtl8225z2_tx_power_cck_A, 51);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck_A, $mul.ref(0, 8)), $mul.ref(1, 1)), 50);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck_A, $mul.ref(0, 8)), $mul.ref(2, 1)), 43);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck_A, $mul.ref(0, 8)), $mul.ref(3, 1)), 35);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck_A, $mul.ref(0, 8)), $mul.ref(4, 1)), 26);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck_A, $mul.ref(0, 8)), $mul.ref(5, 1)), 17);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck_A, $mul.ref(0, 8)), $mul.ref(6, 1)), 8);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck_A, $mul.ref(0, 8)), $mul.ref(7, 1)), 4);
    $M.48 := $store.i8($M.48, rtl8225z2_tx_power_cck_B, 48);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck_B, $mul.ref(0, 8)), $mul.ref(1, 1)), 47);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck_B, $mul.ref(0, 8)), $mul.ref(2, 1)), 41);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck_B, $mul.ref(0, 8)), $mul.ref(3, 1)), 33);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck_B, $mul.ref(0, 8)), $mul.ref(4, 1)), 25);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck_B, $mul.ref(0, 8)), $mul.ref(5, 1)), 16);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck_B, $mul.ref(0, 8)), $mul.ref(6, 1)), 8);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck_B, $mul.ref(0, 8)), $mul.ref(7, 1)), 4);
    $M.48 := $store.i8($M.48, rtl8225z2_tx_power_cck_ch14, 54);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 8)), $mul.ref(1, 1)), 53);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 8)), $mul.ref(2, 1)), 46);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 8)), $mul.ref(3, 1)), 27);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 8)), $mul.ref(4, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 8)), $mul.ref(5, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 8)), $mul.ref(6, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(rtl8225z2_tx_power_cck_ch14, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.47 := $store.i8($M.47, rtl8225_tx_power_ofdm, $sub.i8(0, 128));
    $M.47 := $store.i8($M.47, $add.ref($add.ref(rtl8225_tx_power_ofdm, $mul.ref(0, 6)), $mul.ref(1, 1)), $sub.i8(0, 112));
    $M.47 := $store.i8($M.47, $add.ref($add.ref(rtl8225_tx_power_ofdm, $mul.ref(0, 6)), $mul.ref(2, 1)), $sub.i8(0, 94));
    $M.47 := $store.i8($M.47, $add.ref($add.ref(rtl8225_tx_power_ofdm, $mul.ref(0, 6)), $mul.ref(3, 1)), $sub.i8(0, 75));
    $M.47 := $store.i8($M.47, $add.ref($add.ref(rtl8225_tx_power_ofdm, $mul.ref(0, 6)), $mul.ref(4, 1)), $sub.i8(0, 53));
    $M.47 := $store.i8($M.47, $add.ref($add.ref(rtl8225_tx_power_ofdm, $mul.ref(0, 6)), $mul.ref(5, 1)), $sub.i8(0, 28));
    $M.46 := $store.i8($M.46, rtl8225_tx_power_cck, 24);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(1, 1)), 23);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(2, 1)), 21);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(3, 1)), 17);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(4, 1)), 12);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(5, 1)), 8);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(6, 1)), 4);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(7, 1)), 2);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(8, 1)), 27);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(9, 1)), 26);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(10, 1)), 23);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(11, 1)), 19);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(12, 1)), 14);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(13, 1)), 9);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(14, 1)), 4);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(15, 1)), 2);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(16, 1)), 31);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(17, 1)), 30);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(18, 1)), 26);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(19, 1)), 21);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(20, 1)), 16);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(21, 1)), 10);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(22, 1)), 5);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(23, 1)), 2);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(24, 1)), 34);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(25, 1)), 33);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(26, 1)), 29);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(27, 1)), 24);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(28, 1)), 17);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(29, 1)), 11);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(30, 1)), 6);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(31, 1)), 2);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(32, 1)), 38);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(33, 1)), 37);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(34, 1)), 33);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(35, 1)), 27);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(36, 1)), 20);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(37, 1)), 13);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(38, 1)), 6);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(39, 1)), 3);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(40, 1)), 43);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(41, 1)), 42);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(42, 1)), 37);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(43, 1)), 30);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(44, 1)), 22);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(45, 1)), 14);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(46, 1)), 7);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck, $mul.ref(0, 48)), $mul.ref(47, 1)), 3);
    $M.46 := $store.i8($M.46, rtl8225_tx_power_cck_ch14, 24);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(1, 1)), 23);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(2, 1)), 21);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(3, 1)), 12);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(4, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(5, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(6, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(7, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(8, 1)), 27);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(9, 1)), 26);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(10, 1)), 23);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(11, 1)), 14);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(12, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(13, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(14, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(15, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(16, 1)), 31);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(17, 1)), 30);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(18, 1)), 26);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(19, 1)), 15);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(20, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(21, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(22, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(23, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(24, 1)), 34);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(25, 1)), 33);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(26, 1)), 29);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(27, 1)), 17);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(28, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(29, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(30, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(31, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(32, 1)), 38);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(33, 1)), 37);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(34, 1)), 33);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(35, 1)), 19);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(36, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(37, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(38, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(39, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(40, 1)), 43);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(41, 1)), 42);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(42, 1)), 37);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(43, 1)), 21);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(44, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(45, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(46, 1)), 0);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(rtl8225_tx_power_cck_ch14, $mul.ref(0, 48)), $mul.ref(47, 1)), 0);
    $M.45 := $store.i8($M.45, rtl8225_tx_gain_cck_ofdm, 2);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(rtl8225_tx_gain_cck_ofdm, $mul.ref(0, 6)), $mul.ref(1, 1)), 6);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(rtl8225_tx_gain_cck_ofdm, $mul.ref(0, 6)), $mul.ref(2, 1)), 14);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(rtl8225_tx_gain_cck_ofdm, $mul.ref(0, 6)), $mul.ref(3, 1)), 30);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(rtl8225_tx_gain_cck_ofdm, $mul.ref(0, 6)), $mul.ref(4, 1)), 62);
    $M.45 := $store.i8($M.45, $add.ref($add.ref(rtl8225_tx_gain_cck_ofdm, $mul.ref(0, 6)), $mul.ref(5, 1)), 126);
    $M.0 := $store.ref($M.0, rtl8225z2_ops, .str.46);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rtl8225z2_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), rtl8225z2_rf_init);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rtl8225z2_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), rtl8225_rf_stop);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rtl8225z2_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), rtl8225_rf_set_channel);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rtl8225z2_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, rtl8225_ops, .str.45);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rtl8225_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), rtl8225_rf_init);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rtl8225_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), rtl8225_rf_stop);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rtl8225_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), rtl8225_rf_set_channel);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rtl8225_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i32($M.0, rtl818x_rates, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(4, 1)), 10);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(4, 1)), 20);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(6, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(6, 1)), 2);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(6, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(4, 1)), 60);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(6, 1)), 4);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(4, 1)), 90);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(6, 1)), 5);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(4, 1)), 120);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(6, 1)), 6);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(4, 1)), 180);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(6, 1)), 7);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(4, 1)), 240);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(6, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(4, 1)), 360);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(6, 1)), 9);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(4, 1)), 480);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(6, 1)), 10);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(4, 1)), 540);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(6, 1)), 11);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_rates, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, rtl818x_channels, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(4, 1)), 2412);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(4, 1)), 2417);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(4, 1)), 2422);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(4, 1)), 2427);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(4, 1)), 2432);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(4, 1)), 2437);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(4, 1)), 2442);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(4, 1)), 2447);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(4, 1)), 2452);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(4, 1)), 2457);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(4, 1)), 2462);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(4, 1)), 2467);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(4, 1)), 2472);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(4, 1)), 2484);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rtl818x_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(56, 1)), 0);
    $M.187 := $store.i32($M.187, rtl8180_table, 4332);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(4, 1)), 33177);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.187 := $store.i64($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(0, 1)), 4332);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(4, 1)), 33157);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.187 := $store.i64($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(0, 1)), 6041);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(4, 1)), 28687);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.187 := $store.i64($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(0, 1)), 6041);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(4, 1)), 28703);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(20, 1)), 0);
    $M.187 := $store.i64($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(0, 1)), 4332);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(4, 1)), 33152);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(20, 1)), 0);
    $M.187 := $store.i64($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(0, 1)), 6041);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(4, 1)), 24577);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(20, 1)), 0);
    $M.187 := $store.i64($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(0, 1)), 6041);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(4, 1)), 24608);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(20, 1)), 0);
    $M.187 := $store.i64($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(0, 1)), 4486);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(4, 1)), 13056);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(20, 1)), 0);
    $M.187 := $store.i64($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(0, 1)), 4486);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(4, 1)), 13057);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(20, 1)), 0);
    $M.187 := $store.i64($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(0, 1)), 5170);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(4, 1)), 28934);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(20, 1)), 0);
    $M.187 := $store.i64($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(24, 1)), 0);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(0, 1)), 0);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(4, 1)), 0);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.187 := $store.i32($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(20, 1)), 0);
    $M.187 := $store.i64($M.187, $add.ref($add.ref($add.ref(rtl8180_table, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(24, 1)), 0);
    $M.188 := $store.ref($M.188, rtl8180_driver, $0.ref);
    $M.188 := $store.ref($M.188, $add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.188 := $store.ref($M.188, $add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), .str.11);
    $M.188 := $store.ref($M.188, $add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), rtl8180_table);
    $M.188 := $store.ref($M.188, $add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), rtl8180_probe);
    $M.188 := $store.ref($M.188, $add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), rtl8180_remove);
    $M.188 := $store.ref($M.188, $add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), rtl8180_suspend);
    $M.188 := $store.ref($M.188, $add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.188 := $store.ref($M.188, $add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.188 := $store.ref($M.188, $add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), rtl8180_resume);
    $M.188 := $store.ref($M.188, $add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), $0.ref);
    $M.188 := $store.ref($M.188, $add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.188 := $store.ref($M.188, $add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), $0.ref);
    $M.188 := $store.ref($M.188, $add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.188 := $store.ref($M.188, $add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.188 := $store.ref($M.188, $add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.188 := $store.ref($M.188, $add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.188 := $store.i8($M.188, $add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.188 := $store.i32($M.188, $add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(36, 1)), 0);
    $M.188 := $store.ref($M.188, $add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.188 := $store.ref($M.188, $add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.188 := $store.ref($M.188, $add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.188 := $store.ref($M.188, $add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.188 := $store.ref($M.188, $add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.188 := $store.ref($M.188, $add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.188 := $store.ref($M.188, $add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.188 := $store.ref($M.188, $add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.188 := $store.ref($M.188, $add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), $0.ref);
    $M.188 := $store.ref($M.188, $add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.188 := $store.i32($M.188, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.188 := $store.i32($M.188, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.188 := $store.i32($M.188, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.188 := $store.ref($M.188, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.188 := $store.ref($M.188, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.188 := $store.ref($M.188, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.188 := $store.ref($M.188, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.188 := $store.ref($M.188, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.188 := $store.i32($M.188, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.188 := $store.i64($M.188, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.188 := $store.ref($M.188, $add.ref($add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.188 := $store.ref($M.188, $add.ref($add.ref($add.ref($add.ref(rtl8180_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.18 := $store.i32($M.18, rtl8180_queues_map, 4);
    $M.18 := $store.i32($M.18, $add.ref($add.ref(rtl8180_queues_map, $mul.ref(0, 8)), $mul.ref(1, 4)), 7);
    $M.17 := $store.i32($M.17, rtl8187se_queues_map, 5);
    $M.17 := $store.i32($M.17, $add.ref($add.ref(rtl8187se_queues_map, $mul.ref(0, 20)), $mul.ref(1, 4)), 4);
    $M.17 := $store.i32($M.17, $add.ref($add.ref(rtl8187se_queues_map, $mul.ref(0, 20)), $mul.ref(2, 4)), 3);
    $M.17 := $store.i32($M.17, $add.ref($add.ref(rtl8187se_queues_map, $mul.ref(0, 20)), $mul.ref(3, 4)), 2);
    $M.17 := $store.i32($M.17, $add.ref($add.ref(rtl8187se_queues_map, $mul.ref(0, 20)), $mul.ref(4, 4)), 7);
    $M.40 := $store.i8($M.40, rtl8187se_lna_gain, 2);
    $M.40 := $store.i8($M.40, $add.ref($add.ref(rtl8187se_lna_gain, $mul.ref(0, 4)), $mul.ref(1, 1)), 17);
    $M.40 := $store.i8($M.40, $add.ref($add.ref(rtl8187se_lna_gain, $mul.ref(0, 4)), $mul.ref(2, 1)), 29);
    $M.40 := $store.i8($M.40, $add.ref($add.ref(rtl8187se_lna_gain, $mul.ref(0, 4)), $mul.ref(3, 1)), 39);
    $M.189 := $store.i32($M.189, __mod_pci__rtl8180_table_device_table, 0);
    $M.190 := $store.i32($M.190, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.191 := $store.i32($M.191, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.192 := $store.i32($M.192, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.193 := $store.i32($M.193, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.194 := $store.i32($M.194, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.195 := $store.i64($M.195, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.189 := $store.i32($M.189, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.190 := $store.i32($M.190, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.191 := $store.i32($M.191, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.192 := $store.i32($M.192, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.193 := $store.i32($M.193, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.194 := $store.i32($M.194, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.195 := $store.i64($M.195, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.189 := $store.i32($M.189, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.190 := $store.i32($M.190, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.191 := $store.i32($M.191, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.192 := $store.i32($M.192, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.193 := $store.i32($M.193, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.194 := $store.i32($M.194, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.195 := $store.i64($M.195, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.189 := $store.i32($M.189, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(0, 1)), 0);
    $M.190 := $store.i32($M.190, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(4, 1)), 0);
    $M.191 := $store.i32($M.191, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.192 := $store.i32($M.192, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.193 := $store.i32($M.193, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.194 := $store.i32($M.194, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(20, 1)), 0);
    $M.195 := $store.i64($M.195, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.189 := $store.i32($M.189, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(0, 1)), 0);
    $M.190 := $store.i32($M.190, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(4, 1)), 0);
    $M.191 := $store.i32($M.191, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.192 := $store.i32($M.192, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.193 := $store.i32($M.193, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.194 := $store.i32($M.194, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(20, 1)), 0);
    $M.195 := $store.i64($M.195, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.189 := $store.i32($M.189, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(0, 1)), 0);
    $M.190 := $store.i32($M.190, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(4, 1)), 0);
    $M.191 := $store.i32($M.191, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.192 := $store.i32($M.192, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.193 := $store.i32($M.193, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.194 := $store.i32($M.194, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(20, 1)), 0);
    $M.195 := $store.i64($M.195, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.189 := $store.i32($M.189, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(0, 1)), 0);
    $M.190 := $store.i32($M.190, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(4, 1)), 0);
    $M.191 := $store.i32($M.191, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.192 := $store.i32($M.192, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.193 := $store.i32($M.193, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.194 := $store.i32($M.194, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(20, 1)), 0);
    $M.195 := $store.i64($M.195, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.189 := $store.i32($M.189, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(0, 1)), 0);
    $M.190 := $store.i32($M.190, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(4, 1)), 0);
    $M.191 := $store.i32($M.191, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.192 := $store.i32($M.192, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.193 := $store.i32($M.193, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.194 := $store.i32($M.194, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(20, 1)), 0);
    $M.195 := $store.i64($M.195, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.189 := $store.i32($M.189, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(0, 1)), 0);
    $M.190 := $store.i32($M.190, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(4, 1)), 0);
    $M.191 := $store.i32($M.191, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.192 := $store.i32($M.192, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.193 := $store.i32($M.193, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.194 := $store.i32($M.194, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(20, 1)), 0);
    $M.195 := $store.i64($M.195, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.189 := $store.i32($M.189, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(0, 1)), 0);
    $M.190 := $store.i32($M.190, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(4, 1)), 0);
    $M.191 := $store.i32($M.191, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.192 := $store.i32($M.192, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.193 := $store.i32($M.193, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.194 := $store.i32($M.194, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(20, 1)), 0);
    $M.195 := $store.i64($M.195, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(24, 1)), 0);
    $M.189 := $store.i32($M.189, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(0, 1)), 0);
    $M.190 := $store.i32($M.190, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(4, 1)), 0);
    $M.191 := $store.i32($M.191, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.192 := $store.i32($M.192, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.193 := $store.i32($M.193, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.194 := $store.i32($M.194, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(20, 1)), 0);
    $M.195 := $store.i64($M.195, $add.ref($add.ref($add.ref(__mod_pci__rtl8180_table_device_table, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(24, 1)), 0);
    $M.87 := $0.ref;
    $M.88 := $0.ref;
    $M.92 := $0.ref;
    $M.91 := $0.ref;
    $M.41 := 0;
    call {:si_unique_call 5598} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, grf5101_rf_ops, .str.2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(grf5101_rf_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), grf5101_rf_init);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(grf5101_rf_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), grf5101_rf_stop);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(grf5101_rf_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), grf5101_rf_set_channel);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(grf5101_rf_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), grf5101_rf_calc_rssi);
    $M.0 := $store.ref($M.0, max2820_rf_ops, .str.1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(max2820_rf_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), max2820_rf_init);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(max2820_rf_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), max2820_rf_stop);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(max2820_rf_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), max2820_rf_set_channel);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(max2820_rf_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), max2820_rf_calc_rssi);
    call {:si_unique_call 5599} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 526970);

procedure devirtbounce(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 528002);

procedure devirtbounce.1(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.41, $M.51, $M.27, $M.29, $M.31, $M.33, $M.20, $M.19, $M.22, $M.21, $M.24, $M.23, $M.26, $M.25, $CurrAddr;



implementation devirtbounce.1(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i20 := $eq.ref(rtl8225se_rf_stop, $p0);
    assume true;
    goto $bb17, $bb33;

  $bb33:
    assume !($i20 == 1);
    $i19 := $eq.ref(rtl8225se_rf_init, $p0);
    assume {:branchcond $i19} true;
    goto $bb16, $bb32;

  $bb32:
    assume !($i19 == 1);
    $i18 := $eq.ref(rtl8225z2_rf_init, $p0);
    assume {:branchcond $i18} true;
    goto $bb15, $bb31;

  $bb31:
    assume !($i18 == 1);
    $i17 := $eq.ref(rtl8225_rf_stop, $p0);
    assume true;
    goto $bb14, $bb30;

  $bb30:
    assume !($i17 == 1);
    $i16 := $eq.ref(rtl8225_rf_init, $p0);
    assume {:branchcond $i16} true;
    goto $bb13, $bb29;

  $bb29:
    assume !($i16 == 1);
    $i15 := $eq.ref(rtl8180_beacon_work, $p0);
    assume {:branchcond $i15} true;
    goto $bb12, $bb28;

  $bb28:
    assume !($i15 == 1);
    $i14 := $eq.ref(rtl8180_stop, $p0);
    assume {:branchcond $i14} true;
    goto $bb11, $bb27;

  $bb27:
    assume !($i14 == 1);
    $i13 := $eq.ref(rtl8180_eeprom_register_write, $p0);
    assume {:branchcond $i13} true;
    goto $bb10, $bb26;

  $bb26:
    assume !($i13 == 1);
    $i12 := $eq.ref(rtl8180_eeprom_register_read, $p0);
    assume {:branchcond $i12} true;
    goto $bb9, $bb25;

  $bb25:
    assume !($i12 == 1);
    $i11 := $eq.ref(rtl8180_remove, $p0);
    assume {:branchcond $i11} true;
    goto $bb8, $bb24;

  $bb24:
    assume !($i11 == 1);
    $i10 := $eq.ref(grf5101_rf_stop, $p0);
    assume true;
    goto $bb7, $bb23;

  $bb23:
    assume !($i10 == 1);
    $i9 := $eq.ref(grf5101_rf_init, $p0);
    assume {:branchcond $i9} true;
    goto $bb6, $bb22;

  $bb22:
    assume !($i9 == 1);
    $i8 := $eq.ref(max2820_rf_stop, $p0);
    assume {:branchcond $i8} true;
    goto $bb5, $bb21;

  $bb21:
    assume !($i8 == 1);
    $i7 := $eq.ref(max2820_rf_init, $p0);
    assume {:branchcond $i7} true;
    goto $bb4, $bb20;

  $bb20:
    assume !($i7 == 1);
    $i6 := $eq.ref(sa2400_rf_stop, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb19;

  $bb19:
    assume !($i6 == 1);
    $i5 := $eq.ref(sa2400_rf_init, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb18;

  $bb18:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    call {:si_unique_call 5600} sa2400_rf_init(arg);
    return;

  $bb3:
    assume $i6 == 1;
    call {:si_unique_call 5601} sa2400_rf_stop(arg);
    return;

  $bb4:
    assume $i7 == 1;
    call {:si_unique_call 5602} max2820_rf_init(arg);
    return;

  $bb5:
    assume $i8 == 1;
    call {:si_unique_call 5603} max2820_rf_stop(arg);
    return;

  $bb6:
    assume $i9 == 1;
    call {:si_unique_call 5604} grf5101_rf_init(arg);
    return;

  $bb7:
    assume $i10 == 1;
    call {:si_unique_call 5605} grf5101_rf_stop(arg);
    return;

  $bb8:
    assume $i11 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5606} rtl8180_remove($p1);
    return;

  $bb9:
    assume $i12 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5607} rtl8180_eeprom_register_read($p2);
    return;

  $bb10:
    assume $i13 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5608} rtl8180_eeprom_register_write($p3);
    return;

  $bb11:
    assume $i14 == 1;
    call {:si_unique_call 5609} rtl8180_stop(arg);
    return;

  $bb12:
    assume $i15 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5610} rtl8180_beacon_work($p4);
    return;

  $bb13:
    assume $i16 == 1;
    call {:si_unique_call 5611} rtl8225_rf_init(arg);
    return;

  $bb14:
    assume $i17 == 1;
    call {:si_unique_call 5612} rtl8225_rf_stop(arg);
    return;

  $bb15:
    assume $i18 == 1;
    call {:si_unique_call 5613} rtl8225z2_rf_init(arg);
    return;

  $bb16:
    assume $i19 == 1;
    call {:si_unique_call 5614} rtl8225se_rf_init(arg);
    return;

  $bb17:
    assume $i20 == 1;
    call {:si_unique_call 5615} rtl8225se_rf_stop(arg);
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 529034);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.51, $CurrAddr;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i7 := $eq.ref(rtl8225se_rf_set_channel, $p0);
    assume {:branchcond $i7} true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i7 == 1);
    $i6 := $eq.ref(rtl8225_rf_set_channel, $p0);
    assume {:branchcond $i6} true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i6 == 1);
    $i5 := $eq.ref(rtl8180_remove_interface, $p0);
    assume {:branchcond $i5} true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i5 == 1);
    $i4 := $eq.ref(grf5101_rf_set_channel, $p0);
    assume {:branchcond $i4} true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i4 == 1);
    $i3 := $eq.ref(max2820_rf_set_channel, $p0);
    assume {:branchcond $i3} true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i3 == 1);
    $i2 := $eq.ref(sa2400_rf_set_channel, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 5616} sa2400_rf_set_channel(arg, arg1);
    return;

  $bb3:
    assume $i3 == 1;
    call {:si_unique_call 5617} max2820_rf_set_channel(arg, arg1);
    return;

  $bb4:
    assume $i4 == 1;
    call {:si_unique_call 5618} grf5101_rf_set_channel(arg, arg1);
    return;

  $bb5:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 5619} rtl8180_remove_interface(arg, $p1);
    return;

  $bb6:
    assume $i6 == 1;
    call {:si_unique_call 5620} rtl8225_rf_set_channel(arg, arg1);
    return;

  $bb7:
    assume $i7 == 1;
    call {:si_unique_call 5621} rtl8225se_rf_set_channel(arg, arg1);
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 530066);

procedure devirtbounce.3(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 531098);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 532130);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 533162);

procedure devirtbounce.6(funcPtr: ref, arg: i8, arg1: i8) returns ($r: i8);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: i8, arg1: i8) returns ($r: i8)
{
  var $p0: ref;
  var $i1: i8;
  var $i2: i8;
  var $i3: i8;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(grf5101_rf_calc_rssi, $p0);
    assume {:branchcond $i6} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i6 == 1);
    $i5 := $eq.ref(max2820_rf_calc_rssi, $p0);
    assume {:branchcond $i5} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i5 == 1);
    $i4 := $eq.ref(sa2400_rf_calc_rssi, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    call {:si_unique_call 5622} $i1 := sa2400_rf_calc_rssi(arg, arg1);
    $r := $i1;
    return;

  $bb3:
    assume $i5 == 1;
    call {:si_unique_call 5623} $i2 := max2820_rf_calc_rssi(arg, arg1);
    $r := $i2;
    return;

  $bb4:
    assume $i6 == 1;
    call {:si_unique_call 5624} $i3 := grf5101_rf_calc_rssi(arg, arg1);
    $r := $i3;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 534194);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 535226);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

const $u1: i32;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.27, $M.31, $M.29, $M.63, $M.54, $M.60, $M.57, $M.33, $M.7, $M.19, $M.21, $M.23, $M.25, $M.28, $M.36, $M.30, $M.37, $M.32, $M.38, $M.34, $M.39, $M.20, $M.22, $M.24, $M.26, $M.55, $M.56, $M.58, $M.59, $M.61, $M.62, $M.64, $M.65, $M.66, $M.67, $M.8, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.90, $M.89, $M.0, $M.49, $M.50, $M.93, $M.94, $M.95, $M.4, $M.3, $M.2, $M.1, $M.44, $M.43, $M.96, $M.97, $M.98, $M.42, $M.48, $M.47, $M.46, $M.45, $M.187, $M.188, $M.18, $M.17, $M.40, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.195, $M.87, $M.88, $M.92, $M.91, $M.41, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 5625} __SMACK_static_init();
    call {:si_unique_call 5626} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.52, $M.67, $M.8, $M.19, $M.21, $M.23, $M.25, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.0, $M.79, $M.27, $M.54, $M.80, $M.81, $M.5, $M.83, $M.84, $M.85, $M.86, $M.31, $M.29, $M.63, $M.60, $M.57, $M.33, $M.7, $M.28, $M.36, $M.30, $M.37, $M.32, $M.38, $M.34, $M.39, $M.20, $M.22, $M.24, $M.26, $M.55, $M.56, $M.58, $M.59, $M.61, $M.62, $M.64, $M.65, $M.66, $M.82, $M.90, $M.89, $M.49, $M.50, $M.93, $M.94, $M.95, $M.4, $M.3, $M.2, $M.1, $M.44, $M.43, $M.96, $M.97, $M.98, $M.42, $M.48, $M.47, $M.46, $M.45, $M.187, $M.188, $M.18, $M.17, $M.40, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.195, $M.87, $M.88, $M.92, $M.91, $M.41, $CurrAddr, $M.9, $M.10, $M.11, $M.12, $M.13, $M.6, $M.51;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation rtl8180_start_loop_$bb41(in_$p0: ref, in_$p3: ref, in_$p150: ref, in_$i152: i64, in_$p155: ref, in_$p156: ref, in_$i157: i64, in_$i158: i1, in_$i159: i32, in_$i160: i16, in_$i161: i32, in_$i162: i32, in_$i163: i1, in_$i151: i32) returns (out_$i152: i64, out_$p155: ref, out_$p156: ref, out_$i157: i64, out_$i158: i1, out_$i159: i32, out_$i160: i16, out_$i161: i32, out_$i162: i32, out_$i163: i1, out_$i151: i32)
{

  entry:
    out_$i152, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i151 := in_$i152, in_$p155, in_$p156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i151;
    goto $bb41, exit;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_4548;

  $bb46:
    assume out_$i163 == 1;
    assume {:verifier.code 0} true;
    out_$i151 := out_$i159;
    goto $bb46_dummy;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    out_$i163 := $sgt.i32(out_$i162, out_$i159);
    goto corral_source_split_4563;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    out_$i162 := $add.i32(out_$i161, 1);
    goto corral_source_split_4562;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    out_$i161 := $zext.i16.i32(out_$i160);
    goto corral_source_split_4561;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    out_$i160 := $load.i16($M.0, in_$p150);
    goto corral_source_split_4560;

  $bb45:
    assume {:verifier.code 0} true;
    out_$i159 := $add.i32(out_$i151, 1);
    call {:si_unique_call 942} {:cexpr "i"} boogie_si_record_i32(out_$i159);
    goto corral_source_split_4559;

  $bb44:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} rtl8180_free_tx_ring(in_$p0, out_$i151);
    goto corral_source_split_4557;

  $bb43:
    assume out_$i158 == 1;
    goto corral_source_split_4556;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    out_$i158 := $ne.i64(out_$i157, 0);
    goto corral_source_split_4554;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    out_$i157 := $p2i.ref.i64(out_$p156);
    goto corral_source_split_4553;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    out_$p156 := $load.ref($M.0, out_$p155);
    goto corral_source_split_4552;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 2192)), $mul.ref(392, 1)), $mul.ref(out_$i152, 120)), $mul.ref(0, 1));
    goto corral_source_split_4551;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i152 := $sext.i32.i64(out_$i151);
    goto corral_source_split_4550;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb46_dummy:
    call {:si_unique_call 1} out_$i152, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i151 := rtl8180_start_loop_$bb41(in_$p0, in_$p3, in_$p150, out_$i152, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i151);
    return;

  exit:
    return;
}



procedure rtl8180_start_loop_$bb41(in_$p0: ref, in_$p3: ref, in_$p150: ref, in_$i152: i64, in_$p155: ref, in_$p156: ref, in_$i157: i64, in_$i158: i1, in_$i159: i32, in_$i160: i16, in_$i161: i32, in_$i162: i32, in_$i163: i1, in_$i151: i32) returns (out_$i152: i64, out_$p155: ref, out_$p156: ref, out_$i157: i64, out_$i158: i1, out_$i159: i32, out_$i160: i16, out_$i161: i32, out_$i162: i32, out_$i163: i1, out_$i151: i32);
  modifies $M.0;



implementation rtl8180_start_loop_$bb5(in_$p0: ref, in_$p7: ref, in_$i9: i32, in_$i10: i1, in_$i11: i32, in_$i13: i32, in_$i14: i16, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i8: i32) returns (out_$i9: i32, out_$i10: i1, out_$i11: i32, out_$i13: i32, out_$i14: i16, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i8: i32)
{

  entry:
    out_$i9, out_$i10, out_$i11, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i8 := in_$i9, in_$i10, in_$i11, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i8;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4357;

  $bb11:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i13;
    goto $bb11_dummy;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    out_$i17 := $sgt.i32(out_$i16, out_$i13);
    goto corral_source_split_4372;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i15, 1);
    goto corral_source_split_4371;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i16.i32(out_$i14);
    goto corral_source_split_4370;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i16($M.0, in_$p7);
    goto corral_source_split_4369;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i8, 1);
    call {:si_unique_call 896} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_4368;

  $bb8:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i9;
    assume true;
    goto $bb8;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_4360;

  SeqInstr_6:
    call {:si_unique_call 894} {:cexpr "ret"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_4359;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} out_$i9 := rtl8180_init_tx_ring(in_$p0, out_$i8, 16);
    goto SeqInstr_5;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i9, out_$i10, out_$i11, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i8 := rtl8180_start_loop_$bb5(in_$p0, in_$p7, out_$i9, out_$i10, out_$i11, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i8);
    return;

  exit:
    return;
}



procedure rtl8180_start_loop_$bb5(in_$p0: ref, in_$p7: ref, in_$i9: i32, in_$i10: i1, in_$i11: i32, in_$i13: i32, in_$i14: i16, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i8: i32) returns (out_$i9: i32, out_$i10: i1, out_$i11: i32, out_$i13: i32, out_$i14: i16, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i8: i32);
  modifies $M.0, $CurrAddr, assertsPassed;



implementation rtl8180_stop_loop_$bb1(in_$p0: ref, in_$p44: ref, in_$i46: i32, in_$i47: i16, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i45: i32) returns (out_$i46: i32, out_$i47: i16, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i45: i32)
{

  entry:
    out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i45 := in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i45;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_4618;

  $bb3:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$i45 := out_$i46;
    goto $bb3_dummy;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    out_$i50 := $sgt.i32(out_$i49, out_$i46);
    goto corral_source_split_4625;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i48, 1);
    goto corral_source_split_4624;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i16.i32(out_$i47);
    goto corral_source_split_4623;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i16($M.0, in_$p44);
    goto corral_source_split_4622;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i45, 1);
    call {:si_unique_call 958} {:cexpr "i"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_4621;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} rtl8180_free_tx_ring(in_$p0, out_$i45);
    goto corral_source_split_4620;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb3_dummy:
    call {:si_unique_call 1} out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i45 := rtl8180_stop_loop_$bb1(in_$p0, in_$p44, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i45);
    return;

  exit:
    return;
}



procedure rtl8180_stop_loop_$bb1(in_$p0: ref, in_$p44: ref, in_$i46: i32, in_$i47: i16, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i45: i32) returns (out_$i46: i32, out_$i47: i16, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i45: i32);
  modifies $M.0;



implementation rtl8180_free_tx_ring_loop_$bb4(in_$p4: ref, in_$p6: ref, in_$i7: i64, in_$p9: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i64, in_$p25: ref, in_$i26: i32, in_$i27: i64, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$p31: ref, in_$i32: i32, in_$i33: i32, in_$p34: ref, in_$i35: i32, in_$i36: i1) returns (out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i64, out_$p25: ref, out_$i26: i32, out_$i27: i64, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$p31: ref, out_$i32: i32, out_$i33: i32, out_$p34: ref, out_$i35: i32, out_$i36: i1)
{

  entry:
    out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36 := in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$p25, in_$i26, in_$i27, in_$p28, in_$i29, in_$i30, in_$p31, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i36 == 1;
    goto $bb6_dummy;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_6065;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} out_$i35 := skb_queue_len(in_$p9);
    call {:si_unique_call 1205} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_6064;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p34, out_$i33);
    goto corral_source_split_6063;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p6, $mul.ref(in_$i7, 120)), $mul.ref(16, 1));
    goto corral_source_split_6062;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    out_$i33 := $urem.i32(out_$i30, out_$i32);
    goto corral_source_split_6061;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.0, out_$p31);
    goto corral_source_split_6060;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p6, $mul.ref(in_$i7, 120)), $mul.ref(20, 1));
    goto corral_source_split_6059;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i29, 1);
    goto corral_source_split_6058;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.0, out_$p28);
    goto corral_source_split_6057;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p6, $mul.ref(in_$i7, 120)), $mul.ref(16, 1));
    goto corral_source_split_6056;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} kfree_skb(out_$p19);
    goto corral_source_split_6055;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} pci_unmap_single(out_$p21, out_$i24, out_$i27, 1);
    goto corral_source_split_6054;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i32.i64(out_$i26);
    goto corral_source_split_6053;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, out_$p25);
    goto corral_source_split_6052;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p19, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_6051;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i32.i64(out_$i23);
    goto corral_source_split_6050;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.0, out_$p22);
    goto corral_source_split_6049;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p13, $mul.ref(out_$i16, 32)), $mul.ref(8, 1));
    goto corral_source_split_6048;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_6047;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_6046;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} out_$p19 := __skb_dequeue(out_$p18);
    goto corral_source_split_6045;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p6, $mul.ref(in_$i7, 120)), $mul.ref(24, 1));
    goto corral_source_split_6044;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    goto corral_source_split_6043;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i32.i64(out_$i15);
    goto corral_source_split_6042;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.0, out_$p14);
    goto corral_source_split_6041;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p6, $mul.ref(in_$i7, 120)), $mul.ref(16, 1));
    goto corral_source_split_6040;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_6039;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p6, $mul.ref(in_$i7, 120)), $mul.ref(0, 1));
    goto corral_source_split_6038;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36 := rtl8180_free_tx_ring_loop_$bb4(in_$p4, in_$p6, in_$i7, in_$p9, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36);
    return;

  exit:
    return;
}



procedure rtl8180_free_tx_ring_loop_$bb4(in_$p4: ref, in_$p6: ref, in_$i7: i64, in_$p9: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i64, in_$p25: ref, in_$i26: i32, in_$i27: i64, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$p31: ref, in_$i32: i32, in_$i33: i32, in_$p34: ref, in_$i35: i32, in_$i36: i1) returns (out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i64, out_$p25: ref, out_$i26: i32, out_$i27: i64, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$p31: ref, out_$i32: i32, out_$i33: i32, out_$p34: ref, out_$i35: i32, out_$i36: i1);
  modifies $M.0;



implementation dma_unmap_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_unmap_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_unmap_single_attrs_loop_$bb3();



implementation rtl8180_init_tx_ring_loop_$bb11(in_$i2: i32, in_$p3: ref, in_$p12: ref, in_$i45: i64, in_$i46: i32, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$i51: i64, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$i44: i32) returns (out_$i45: i64, out_$i46: i32, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$i51: i64, out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$i44: i32)
{

  entry:
    out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p53, out_$i54, out_$i55, out_$i44 := in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$p53, in_$i54, in_$i55, in_$i44;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_7493;

  $bb13:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$i44 := out_$i54;
    goto $bb13_dummy;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    out_$i55 := $ult.i32(out_$i54, in_$i2);
    goto corral_source_split_7506;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i44, 1);
    call {:si_unique_call 1384} {:cexpr "i"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_7505;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p53, out_$i50);
    goto corral_source_split_7504;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p12, $mul.ref(out_$i51, 32)), $mul.ref(16, 1));
    goto corral_source_split_7503;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    goto corral_source_split_7502;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i32.i64(out_$i44);
    goto corral_source_split_7501;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i32(out_$i46, out_$i49);
    goto corral_source_split_7500;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    out_$i49 := $mul.i32(out_$i48, 32);
    goto corral_source_split_7499;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    out_$i48 := $urem.i32(out_$i47, in_$i2);
    goto corral_source_split_7498;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i44, 1);
    goto corral_source_split_7497;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    out_$i46 := $trunc.i64.i32(out_$i45);
    goto corral_source_split_7496;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i64($M.35, in_$p3);
    goto corral_source_split_7495;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p53, out_$i54, out_$i55, out_$i44 := rtl8180_init_tx_ring_loop_$bb11(in_$i2, in_$p3, in_$p12, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p53, out_$i54, out_$i55, out_$i44);
    return;

  exit:
    return;
}



procedure rtl8180_init_tx_ring_loop_$bb11(in_$i2: i32, in_$p3: ref, in_$p12: ref, in_$i45: i64, in_$i46: i32, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$i51: i64, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$i44: i32) returns (out_$i45: i64, out_$i46: i32, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$i51: i64, out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$i44: i32);
  modifies $M.0;



implementation rtl8180_handle_tx_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p4: ref, in_$p6: ref, in_$i7: i64, in_$p9: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i64, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i34: i64, in_$p35: ref, in_$i36: i32, in_$i37: i64, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i32, in_$i52: i8, in_$p53: ref, in_$p54: ref, in_$p57: ref, in_$i58: i8, in_$i59: i8, in_$i60: i8, in_$i61: i8, in_$p62: ref, in_$i63: i32, in_$p64: ref, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i69: i1) returns (out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i64, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i34: i64, out_$p35: ref, out_$i36: i32, out_$i37: i64, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i32, out_$i52: i8, out_$p53: ref, out_$p54: ref, out_$p57: ref, out_$i58: i8, out_$i59: i8, out_$i60: i8, out_$i61: i8, out_$p62: ref, out_$i63: i32, out_$p64: ref, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i69: i1)
{

  entry:
    out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69 := in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$p18, in_$i19, in_$i20, in_$p21, in_$i22, in_$i23, in_$p24, in_$i25, in_$i26, in_$p27, in_$p28, in_$p29, in_$p30, in_$p31, in_$p32, in_$i33, in_$i34, in_$p35, in_$i36, in_$i37, in_$p38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$p53, in_$p54, in_$p57, in_$i58, in_$i59, in_$i60, in_$i61, in_$p62, in_$i63, in_$p64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb19:
    assume {:verifier.code 0} true;
    assume out_$i69 == 1;
    goto $bb19_dummy;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_8270;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} out_$i68 := skb_queue_len(in_$p9);
    call {:si_unique_call 1560} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_8269;

  $bb17:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} ieee80211_wake_queue(in_$p0, in_$i1);
    goto corral_source_split_8267;

  $bb16:
    assume out_$i67 == 1;
    goto corral_source_split_8266;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i32(out_$i66, 2);
    goto corral_source_split_8264;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    out_$i66 := $sub.i32(out_$i65, out_$i63);
    goto corral_source_split_8263;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.0, out_$p64);
    goto corral_source_split_8262;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p6, $mul.ref(in_$i7, 120)), $mul.ref(20, 1));
    goto corral_source_split_8261;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} out_$i63 := skb_queue_len(out_$p62);
    call {:si_unique_call 1557} {:cexpr "tmp"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_8260;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p6, $mul.ref(in_$i7, 120)), $mul.ref(24, 1));
    goto corral_source_split_8259;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} ieee80211_tx_status_irqsafe(in_$p0, out_$p29);
    goto corral_source_split_8258;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p57, out_$i61);
    goto corral_source_split_8257;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    out_$i61 := $or.i8(out_$i60, out_$i59);
    goto corral_source_split_8256;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    out_$i60 := $and.i8(out_$i58, $sub.i8(0, 32));
    goto corral_source_split_8255;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    out_$i59 := $and.i8(out_$i52, 31);
    goto corral_source_split_8254;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i8($M.0, out_$p57);
    goto corral_source_split_8253;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref($add.ref($add.ref(out_$p54, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_8252;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    out_$p54 := $bitcast.ref.ref(out_$p53);
    goto corral_source_split_8251;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p38, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_8250;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    out_$i52 := $trunc.i32.i8(out_$i51);
    goto corral_source_split_8249;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    out_$i51 := $add.i32(out_$i50, 1);
    goto corral_source_split_8248;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i8.i32(out_$i49);
    goto corral_source_split_8247;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i49 := $trunc.i32.i8(out_$i19);
    goto corral_source_split_8246;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p48, out_$i47);
    goto corral_source_split_8244;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p38, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_8243;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    out_$i47 := $or.i32(out_$i46, 512);
    goto corral_source_split_8242;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.0, out_$p45);
    goto corral_source_split_8241;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p38, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_8240;

  $bb13:
    assume out_$i44 == 1;
    goto corral_source_split_8239;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i32(out_$i43, 0);
    goto corral_source_split_8237;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    out_$i43 := $and.i32(out_$i19, 32768);
    goto corral_source_split_8236;

  $bb10:
    assume out_$i42 == 1;
    goto corral_source_split_8235;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i41, 0);
    goto corral_source_split_8233;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    out_$i41 := $and.i32(out_$i40, 4);
    goto corral_source_split_8232;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.0, out_$p39);
    goto corral_source_split_8231;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p38, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_8230;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} ieee80211_tx_info_clear_status(out_$p38);
    goto corral_source_split_8229;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} out_$p38 := IEEE80211_SKB_CB(out_$p29);
    goto corral_source_split_8228;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} pci_unmap_single(out_$p31, out_$i34, out_$i37, 1);
    goto corral_source_split_8227;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i32.i64(out_$i36);
    goto corral_source_split_8226;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.0, out_$p35);
    goto corral_source_split_8225;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p29, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_8224;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i32.i64(out_$i33);
    goto corral_source_split_8223;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, out_$p32);
    goto corral_source_split_8222;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p13, $mul.ref(out_$i16, 32)), $mul.ref(8, 1));
    goto corral_source_split_8221;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_8220;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_8219;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} out_$p29 := __skb_dequeue(out_$p28);
    goto corral_source_split_8218;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p6, $mul.ref(in_$i7, 120)), $mul.ref(24, 1));
    goto corral_source_split_8217;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p27, out_$i26);
    goto corral_source_split_8216;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p6, $mul.ref(in_$i7, 120)), $mul.ref(16, 1));
    goto corral_source_split_8215;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    out_$i26 := $urem.i32(out_$i23, out_$i25);
    goto corral_source_split_8214;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, out_$p24);
    goto corral_source_split_8213;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p6, $mul.ref(in_$i7, 120)), $mul.ref(20, 1));
    goto corral_source_split_8212;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i22, 1);
    goto corral_source_split_8211;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.0, out_$p21);
    goto corral_source_split_8210;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p6, $mul.ref(in_$i7, 120)), $mul.ref(16, 1));
    goto corral_source_split_8209;

  $bb7:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    out_$i20 := $slt.i32(out_$i19, 0);
    goto corral_source_split_8205;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    call {:si_unique_call 1550} {:cexpr "flags"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_8204;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p13, $mul.ref(out_$i16, 32)), $mul.ref(0, 1));
    goto corral_source_split_8203;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    goto corral_source_split_8202;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i32.i64(out_$i15);
    goto corral_source_split_8201;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.0, out_$p14);
    goto corral_source_split_8200;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p6, $mul.ref(in_$i7, 120)), $mul.ref(16, 1));
    goto corral_source_split_8199;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_8198;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p6, $mul.ref(in_$i7, 120)), $mul.ref(0, 1));
    goto corral_source_split_8197;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i42 == 1);
    goto $bb12;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i44 == 1);
    goto $bb12;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69 := rtl8180_handle_tx_loop_$bb4(in_$p0, in_$i1, in_$p4, in_$p6, in_$i7, in_$p9, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69);
    return;

  exit:
    return;
}



procedure rtl8180_handle_tx_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p4: ref, in_$p6: ref, in_$i7: i64, in_$p9: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i64, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i34: i64, in_$p35: ref, in_$i36: i32, in_$i37: i64, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i32, in_$i52: i8, in_$p53: ref, in_$p54: ref, in_$p57: ref, in_$i58: i8, in_$i59: i8, in_$i60: i8, in_$i61: i8, in_$p62: ref, in_$i63: i32, in_$p64: ref, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i69: i1) returns (out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i64, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i34: i64, out_$p35: ref, out_$i36: i32, out_$i37: i64, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i32, out_$i52: i8, out_$p53: ref, out_$p54: ref, out_$p57: ref, out_$i58: i8, out_$i59: i8, out_$i60: i8, out_$i61: i8, out_$p62: ref, out_$i63: i32, out_$p64: ref, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i69: i1);
  modifies $M.0;



implementation rtl8180_handle_rx_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$i14: i32, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i64, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$p29: ref, in_$i30: i32, in_$p31: ref, in_$i32: i32, in_$p33: ref, in_$i34: i64, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$p42: ref, in_$i43: i32, in_$p44: ref, in_$i45: i64, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i64, in_$i46: i1, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i64, in_$i51: i64, in_$i52: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p69: ref, in_$p71: ref, in_$p73: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$i80: i32, in_$i81: i64, in_$i82: i64, in_$i83: i1, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$p90: ref, in_$p91: ref, in_$i92: i32, in_$i93: i1, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i32, in_$i104: i32, in_$i105: i8, in_$i106: i32, in_$i107: i32, in_$i108: i8, in_$p109: ref, in_$i110: i32, in_$i111: i8, in_$i112: i32, in_$i113: i32, in_$i114: i8, in_$p115: ref, in_$i116: i32, in_$i117: i8, in_$i118: i32, in_$i119: i32, in_$i120: i8, in_$p121: ref, in_$i122: i32, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$p127: ref, in_$i128: i8, in_$i129: i32, in_$i130: i1, in_$i131: i32, in_$i132: i32, in_$i133: i1, in_$i134: i32, in_$i136: i32, in_$i135: i32, in_$i137: i8, in_$i138: i32, in_$i139: i32, in_$i140: i1, in_$i141: i32, in_$i143: i32, in_$i142: i32, in_$i144: i8, in_$i145: i32, in_$i146: i32, in_$i147: i8, in_$i149: i32, in_$i150: i32, in_$i151: i1, in_$i152: i32, in_$i154: i32, in_$i153: i32, in_$i155: i8, in_$i156: i32, in_$i157: i32, in_$i158: i1, in_$i159: i32, in_$i161: i32, in_$i160: i32, in_$i162: i8, in_$i163: i32, in_$i164: i32, in_$i165: i8, in_$i148: i8, in_$i167: i8, in_$p168: ref, in_$p169: ref, in_$p170: ref, in_$p171: ref, in_$i172: i32, in_$i173: i8, in_$i174: i32, in_$i175: i8, in_$i176: i8, in_$p177: ref, in_$i178: i8, in_$i179: i32, in_$i180: i1, in_$i181: i32, in_$i182: i8, in_$i183: i32, in_$i184: i32, in_$i185: i8, in_$i186: i32, in_$i187: i32, in_$i188: i8, in_$i190: i32, in_$i191: i32, in_$i192: i32, in_$i193: i32, in_$i194: i32, in_$i195: i32, in_$i196: i8, in_$i197: i32, in_$i198: i32, in_$i199: i64, in_$p200: ref, in_$i201: i8, in_$i202: i32, in_$i203: i32, in_$i204: i32, in_$i205: i8, in_$i189: i8, in_$i166: i8, in_$p206: ref, in_$p209: ref, in_$p210: ref, in_$p211: ref, in_$i212: i16, in_$p213: ref, in_$p216: ref, in_$p217: ref, in_$p218: ref, in_$i219: i32, in_$i220: i8, in_$p221: ref, in_$p222: ref, in_$p223: ref, in_$i224: i32, in_$i225: i32, in_$p226: ref, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$i230: i32, in_$i231: i32, in_$p232: ref, in_$i233: i32, in_$i234: i1, in_$p235: ref, in_$i236: i32, in_$i237: i32, in_$p238: ref, in_$p239: ref, in_$p240: ref, in_$p241: ref, in_$p242: ref, in_$i243: i32, in_$i244: i64, in_$p246: ref, in_$p247: ref, in_$p248: ref, in_$i53: i8, in_$p54: ref, in_$i84: i8, in_$p85: ref, in_$p249: ref, in_$p250: ref, in_$p251: ref, in_$i252: i64, in_$i253: i32, in_$p254: ref, in_$p255: ref, in_$p256: ref, in_$i257: i32, in_$i258: i1, in_$p259: ref, in_$i260: i32, in_$i261: i32, in_$p262: ref, in_$p263: ref, in_$i264: i32, in_$i265: i32, in_$i266: i32, in_$p267: ref, in_$i268: i32, in_$i269: i1, in_$i5: i32, in_$i6: i8, in_cmdloc_dummy_var_15: [ref]i8, in_cmdloc_dummy_var_16: [ref]i8, in_cmdloc_dummy_var_17: [ref]i8, in_vslice_dummy_var_143: ref) returns (out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$i14: i32, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i64, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$p29: ref, out_$i30: i32, out_$p31: ref, out_$i32: i32, out_$p33: ref, out_$i34: i64, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$p42: ref, out_$i43: i32, out_$p44: ref, out_$i45: i64, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i64, out_$i46: i1, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i64, out_$i51: i64, out_$i52: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p69: ref, out_$p71: ref, out_$p73: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$i80: i32, out_$i81: i64, out_$i82: i64, out_$i83: i1, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$p90: ref, out_$p91: ref, out_$i92: i32, out_$i93: i1, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i32, out_$i104: i32, out_$i105: i8, out_$i106: i32, out_$i107: i32, out_$i108: i8, out_$p109: ref, out_$i110: i32, out_$i111: i8, out_$i112: i32, out_$i113: i32, out_$i114: i8, out_$p115: ref, out_$i116: i32, out_$i117: i8, out_$i118: i32, out_$i119: i32, out_$i120: i8, out_$p121: ref, out_$i122: i32, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$p127: ref, out_$i128: i8, out_$i129: i32, out_$i130: i1, out_$i131: i32, out_$i132: i32, out_$i133: i1, out_$i134: i32, out_$i136: i32, out_$i135: i32, out_$i137: i8, out_$i138: i32, out_$i139: i32, out_$i140: i1, out_$i141: i32, out_$i143: i32, out_$i142: i32, out_$i144: i8, out_$i145: i32, out_$i146: i32, out_$i147: i8, out_$i149: i32, out_$i150: i32, out_$i151: i1, out_$i152: i32, out_$i154: i32, out_$i153: i32, out_$i155: i8, out_$i156: i32, out_$i157: i32, out_$i158: i1, out_$i159: i32, out_$i161: i32, out_$i160: i32, out_$i162: i8, out_$i163: i32, out_$i164: i32, out_$i165: i8, out_$i148: i8, out_$i167: i8, out_$p168: ref, out_$p169: ref, out_$p170: ref, out_$p171: ref, out_$i172: i32, out_$i173: i8, out_$i174: i32, out_$i175: i8, out_$i176: i8, out_$p177: ref, out_$i178: i8, out_$i179: i32, out_$i180: i1, out_$i181: i32, out_$i182: i8, out_$i183: i32, out_$i184: i32, out_$i185: i8, out_$i186: i32, out_$i187: i32, out_$i188: i8, out_$i190: i32, out_$i191: i32, out_$i192: i32, out_$i193: i32, out_$i194: i32, out_$i195: i32, out_$i196: i8, out_$i197: i32, out_$i198: i32, out_$i199: i64, out_$p200: ref, out_$i201: i8, out_$i202: i32, out_$i203: i32, out_$i204: i32, out_$i205: i8, out_$i189: i8, out_$i166: i8, out_$p206: ref, out_$p209: ref, out_$p210: ref, out_$p211: ref, out_$i212: i16, out_$p213: ref, out_$p216: ref, out_$p217: ref, out_$p218: ref, out_$i219: i32, out_$i220: i8, out_$p221: ref, out_$p222: ref, out_$p223: ref, out_$i224: i32, out_$i225: i32, out_$p226: ref, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$i230: i32, out_$i231: i32, out_$p232: ref, out_$i233: i32, out_$i234: i1, out_$p235: ref, out_$i236: i32, out_$i237: i32, out_$p238: ref, out_$p239: ref, out_$p240: ref, out_$p241: ref, out_$p242: ref, out_$i243: i32, out_$i244: i64, out_$p246: ref, out_$p247: ref, out_$p248: ref, out_$i53: i8, out_$p54: ref, out_$i84: i8, out_$p85: ref, out_$p249: ref, out_$p250: ref, out_$p251: ref, out_$i252: i64, out_$i253: i32, out_$p254: ref, out_$p255: ref, out_$p256: ref, out_$i257: i32, out_$i258: i1, out_$p259: ref, out_$i260: i32, out_$i261: i32, out_$p262: ref, out_$p263: ref, out_$i264: i32, out_$i265: i32, out_$i266: i32, out_$p267: ref, out_$i268: i32, out_$i269: i1, out_$i5: i32, out_$i6: i8, out_cmdloc_dummy_var_15: [ref]i8, out_cmdloc_dummy_var_16: [ref]i8, out_cmdloc_dummy_var_17: [ref]i8, out_vslice_dummy_var_143: ref)
{

  entry:
    out_$p7, out_$p8, out_$p9, out_$i10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$p39, out_$p40, out_$i41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i35, out_$i36, out_$i37, out_$i38, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p69, out_$p71, out_$p73, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p86, out_$p87, out_$p88, out_$i89, out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i136, out_$i135, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i143, out_$i142, out_$i144, out_$i145, out_$i146, out_$i147, out_$i149, out_$i150, out_$i151, out_$i152, out_$i154, out_$i153, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i161, out_$i160, out_$i162, out_$i163, out_$i164, out_$i165, out_$i148, out_$i167, out_$p168, out_$p169, out_$p170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$p200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i189, out_$i166, out_$p206, out_$p209, out_$p210, out_$p211, out_$i212, out_$p213, out_$p216, out_$p217, out_$p218, out_$i219, out_$i220, out_$p221, out_$p222, out_$p223, out_$i224, out_$i225, out_$p226, out_$i227, out_$i228, out_$p229, out_$i230, out_$i231, out_$p232, out_$i233, out_$i234, out_$p235, out_$i236, out_$i237, out_$p238, out_$p239, out_$p240, out_$p241, out_$p242, out_$i243, out_$i244, out_$p246, out_$p247, out_$p248, out_$i53, out_$p54, out_$i84, out_$p85, out_$p249, out_$p250, out_$p251, out_$i252, out_$i253, out_$p254, out_$p255, out_$p256, out_$i257, out_$i258, out_$p259, out_$i260, out_$i261, out_$p262, out_$p263, out_$i264, out_$i265, out_$i266, out_$p267, out_$i268, out_$i269, out_$i5, out_$i6, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_vslice_dummy_var_143 := in_$p7, in_$p8, in_$p9, in_$i10, in_$p11, in_$i12, in_$i13, in_$i14, in_$i15, in_$p16, in_$p17, in_$i18, in_$i19, in_$p21, in_$p22, in_$p23, in_$i24, in_$i25, in_$p26, in_$p27, in_$i28, in_$p29, in_$i30, in_$p31, in_$i32, in_$p33, in_$i34, in_$p39, in_$p40, in_$i41, in_$p42, in_$i43, in_$p44, in_$i45, in_$i35, in_$i36, in_$i37, in_$i38, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$p55, in_$p56, in_$p57, in_$p58, in_$p59, in_$p60, in_$p61, in_$p62, in_$p63, in_$p64, in_$p65, in_$p66, in_$p67, in_$p69, in_$p71, in_$p73, in_$p75, in_$p76, in_$p77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$p86, in_$p87, in_$p88, in_$i89, in_$p90, in_$p91, in_$i92, in_$i93, in_$p94, in_$p95, in_$p96, in_$p97, in_$p98, in_$p99, in_$p100, in_$i101, in_$i102, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$p109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$p115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$p121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$p127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i136, in_$i135, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i143, in_$i142, in_$i144, in_$i145, in_$i146, in_$i147, in_$i149, in_$i150, in_$i151, in_$i152, in_$i154, in_$i153, in_$i155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i161, in_$i160, in_$i162, in_$i163, in_$i164, in_$i165, in_$i148, in_$i167, in_$p168, in_$p169, in_$p170, in_$p171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$p177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i187, in_$i188, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i199, in_$p200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i189, in_$i166, in_$p206, in_$p209, in_$p210, in_$p211, in_$i212, in_$p213, in_$p216, in_$p217, in_$p218, in_$i219, in_$i220, in_$p221, in_$p222, in_$p223, in_$i224, in_$i225, in_$p226, in_$i227, in_$i228, in_$p229, in_$i230, in_$i231, in_$p232, in_$i233, in_$i234, in_$p235, in_$i236, in_$i237, in_$p238, in_$p239, in_$p240, in_$p241, in_$p242, in_$i243, in_$i244, in_$p246, in_$p247, in_$p248, in_$i53, in_$p54, in_$i84, in_$p85, in_$p249, in_$p250, in_$p251, in_$i252, in_$i253, in_$p254, in_$p255, in_$p256, in_$i257, in_$i258, in_$p259, in_$i260, in_$i261, in_$p262, in_$p263, in_$i264, in_$i265, in_$i266, in_$p267, in_$i268, in_$i269, in_$i5, in_$i6, in_cmdloc_dummy_var_15, in_cmdloc_dummy_var_16, in_cmdloc_dummy_var_17, in_vslice_dummy_var_143;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8279;

  $bb59:
    assume out_$i269 == 1;
    assume {:verifier.code 0} true;
    out_$i5, out_$i6 := out_$i268, out_$i84;
    goto $bb59_dummy;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    out_$i269 := $ne.i32(out_$i5, 0);
    goto corral_source_split_8622;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    out_$i268 := $sub.i32(out_$i5, 1);
    call {:si_unique_call 1601} {:cexpr "count"} boogie_si_record_i32(out_$i268);
    goto corral_source_split_8621;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p267, out_$i266);
    goto corral_source_split_8620;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    out_$p267 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2192)), $mul.ref(128, 1));
    goto corral_source_split_8619;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    out_$i266 := $and.i32(out_$i265, 31);
    goto corral_source_split_8618;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    out_$i265 := $add.i32(out_$i264, 1);
    goto corral_source_split_8617;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    out_$i264 := $load.i32($M.0, out_$p263);
    goto corral_source_split_8616;

  $bb58:
    assume {:verifier.code 0} true;
    out_$p263 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2192)), $mul.ref(128, 1));
    goto corral_source_split_8615;

  $bb57:
    assume !(out_$i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p262, out_$i261);
    goto corral_source_split_8613;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    out_$p262 := $add.ref($add.ref(out_$p249, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_8612;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    out_$i261 := $or.i32(out_$i260, 1073741824);
    goto corral_source_split_8611;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    out_$i260 := $load.i32($M.0, out_$p259);
    goto corral_source_split_8610;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    out_$p259 := $add.ref($add.ref(out_$p249, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_8609;

  $bb56:
    assume out_$i258 == 1;
    goto corral_source_split_8608;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    out_$i258 := $eq.i32(out_$i257, 31);
    goto corral_source_split_8394;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    out_$i257 := $load.i32($M.0, out_$p256);
    goto corral_source_split_8393;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    out_$p256 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2192)), $mul.ref(128, 1));
    goto corral_source_split_8392;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p255, $sub.i32(0, 2147481295));
    goto corral_source_split_8391;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    out_$p255 := $add.ref($add.ref(out_$p249, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_8390;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p254, out_$i253);
    goto corral_source_split_8389;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    out_$p254 := $add.ref($add.ref(out_$p249, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_8388;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    out_$i253 := $trunc.i64.i32(out_$i252);
    goto corral_source_split_8387;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    out_$i252 := $load.i64($M.0, out_$p251);
    goto corral_source_split_8386;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    out_$p251 := $bitcast.ref.ref(out_$p250);
    goto corral_source_split_8385;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    out_$p250 := $add.ref($add.ref(out_$p85, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_8384;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    out_$p249 := $bitcast.ref.ref(out_$p16);
    goto corral_source_split_8383;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8382;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    out_$i84, out_$p85 := out_$i53, out_$p54;
    goto $bb15;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    out_$i84, out_$p85 := out_$i6, out_$p22;
    goto $bb15;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    out_$i84, out_$p85 := out_$i6, out_$p22;
    goto $bb15;

  $bb13:
    assume out_$i83 == 1;
    goto corral_source_split_8380;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    out_$i83 := $ne.i64(out_$i82, 0);
    goto corral_source_split_8376;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} out_$i82 := ldv__builtin_expect(out_$i81, 0);
    call {:si_unique_call 1575} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i82);
    goto corral_source_split_8375;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    out_$i81 := $sext.i32.i64(out_$i80);
    goto corral_source_split_8374;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    out_$i80 := $zext.i1.i32(out_$i79);
    goto corral_source_split_8373;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i64(out_$i78, 0);
    goto corral_source_split_8372;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    out_$i78 := $p2i.ref.i64(out_$p77);
    goto corral_source_split_8371;

  SeqInstr_117:
    goto corral_source_split_8370;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} out_$p77 := dev_alloc_skb(2353);
    goto SeqInstr_116;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p76, 0);
    goto corral_source_split_8369;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(34, 1));
    goto corral_source_split_8368;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p75, 0);
    goto corral_source_split_8367;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(30, 1)), $mul.ref(3, 1));
    goto corral_source_split_8366;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p73, 0);
    goto corral_source_split_8365;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(30, 1)), $mul.ref(2, 1));
    goto corral_source_split_8364;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p71, 0);
    goto corral_source_split_8363;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(30, 1)), $mul.ref(1, 1));
    goto corral_source_split_8362;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p69, 0);
    goto corral_source_split_8361;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(30, 1)), $mul.ref(0, 1));
    goto corral_source_split_8360;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p67, 0);
    goto corral_source_split_8359;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(29, 1));
    goto corral_source_split_8358;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p66, 0);
    goto corral_source_split_8357;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_8356;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p65, 0);
    goto corral_source_split_8355;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(27, 1));
    goto corral_source_split_8354;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p64, 0);
    goto corral_source_split_8353;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_8352;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p63, 0);
    goto corral_source_split_8351;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(25, 1));
    goto corral_source_split_8350;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p62, 0);
    goto corral_source_split_8349;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8348;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p61, 0);
    goto corral_source_split_8347;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(23, 1));
    goto corral_source_split_8346;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p60, 0);
    goto corral_source_split_8345;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(22, 1));
    goto corral_source_split_8344;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p59, 0);
    goto corral_source_split_8343;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_8342;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p58, 0);
    goto corral_source_split_8341;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8340;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p57, 0);
    goto corral_source_split_8339;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_8338;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p56, 0);
    goto corral_source_split_8337;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8336;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p55, 0);
    goto corral_source_split_8335;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8334;

  $bb11:
    assume !(out_$i52 == 1);
    goto corral_source_split_8333;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, 0);
    goto corral_source_split_8329;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} out_$i51 := ldv__builtin_expect(out_$i50, 0);
    call {:si_unique_call 1572} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i51);
    goto corral_source_split_8328;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i49);
    goto corral_source_split_8327;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i1.i32(out_$i48);
    goto corral_source_split_8326;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_8325;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i47 := $and.i32(out_$i35, 201359360);
    goto corral_source_split_8324;

  $bb7:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i35, 0);
    goto corral_source_split_8320;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8319;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i64($M.0, out_$p44);
    call {:si_unique_call 1570} {:cexpr "tsft"} boogie_si_record_i64(out_$i45);
    assume {:verifier.code 0} true;
    out_$i35, out_$i36, out_$i37, out_$i38 := out_$i41, out_$i43, 0, out_$i45;
    goto $bb5;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    out_$i35, out_$i36, out_$i37, out_$i38 := out_$i28, out_$i32, out_$i30, out_$i34;
    goto $bb5;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i64($M.0, out_$p33);
    call {:si_unique_call 1566} {:cexpr "tsft"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_8309;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p26, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8308;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.0, out_$p31);
    call {:si_unique_call 1565} {:cexpr "flags2"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_8307;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p26, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8306;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, out_$p29);
    call {:si_unique_call 1564} {:cexpr "flags3"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_8305;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p26, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_8304;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    call {:si_unique_call 1562} {:cexpr "flags"} boogie_si_record_i32(out_$i28);
    call {:si_unique_call 1563} devirtbounce(0);
    goto corral_source_split_8303;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8302;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(out_$p16);
    goto corral_source_split_8301;

  $bb3:
    assume out_$i25 == 1;
    goto corral_source_split_8300;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 2);
    goto corral_source_split_8298;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, out_$p23);
    goto corral_source_split_8297;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_8296;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_8295;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(out_$i19, 8));
    goto corral_source_split_8294;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i32.i64(out_$i18);
    goto corral_source_split_8293;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, out_$p17);
    goto corral_source_split_8292;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2192)), $mul.ref(128, 1));
    goto corral_source_split_8291;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref(out_$p8, $mul.ref(out_$i15, 1));
    goto corral_source_split_8290;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i32.i64(out_$i14);
    goto corral_source_split_8289;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    out_$i14 := $mul.i32(out_$i10, out_$i13);
    goto corral_source_split_8288;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i8.i32(out_$i12);
    goto corral_source_split_8287;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i8($M.0, out_$p11);
    goto corral_source_split_8286;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2192)), $mul.ref(112, 1));
    goto corral_source_split_8285;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.0, out_$p9);
    goto corral_source_split_8284;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2192)), $mul.ref(128, 1));
    goto corral_source_split_8283;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.0, out_$p7);
    goto corral_source_split_8282;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2192)), $mul.ref(104, 1));
    goto corral_source_split_8281;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p39, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8317;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.0, out_$p42);
    call {:si_unique_call 1569} {:cexpr "flags2"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_8316;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p39, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_8315;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.0, out_$p40);
    call {:si_unique_call 1567} {:cexpr "flags"} boogie_si_record_i32(out_$i41);
    call {:si_unique_call 1568} devirtbounce(0);
    goto corral_source_split_8314;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p39, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8313;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    out_$p39 := $bitcast.ref.ref(out_$p16);
    goto corral_source_split_8312;

  $bb4:
    assume !(out_$i25 == 1);
    goto corral_source_split_8311;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} dev_err.ref.ref(out_$p96, .str.10);
    goto corral_source_split_8410;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p95, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_8409;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.0, out_$p94);
    goto corral_source_split_8408;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_8407;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} kfree_skb(out_$p77);
    goto corral_source_split_8406;

  $bb17:
    assume out_$i93 == 1;
    goto corral_source_split_8405;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    out_$i93 := $ne.i32(out_$i92, 0);
    goto corral_source_split_8403;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} out_$i92 := pci_dma_mapping_error(out_$p91, out_$i89);
    call {:si_unique_call 1580} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_8402;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    out_$p91 := $load.ref($M.0, out_$p90);
    goto corral_source_split_8401;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_8400;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} out_$i89 := pci_map_single(out_$p88, out_$p86, 2353, 2);
    call {:si_unique_call 1578} {:cexpr "mapping"} boogie_si_record_i64(out_$i89);
    goto corral_source_split_8399;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.0, out_$p87);
    goto corral_source_split_8398;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_8397;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} out_$p86 := skb_tail_pointer(out_$p77);
    goto corral_source_split_8396;

  $bb14:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8378;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p248, out_$i89);
    assume {:verifier.code 0} true;
    out_$i53, out_$p54 := out_$i166, out_$p77;
    goto $bb12;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    out_$i53, out_$p54 := out_$i6, out_$p22;
    goto $bb12;

  $bb10:
    assume out_$i52 == 1;
    goto corral_source_split_8331;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    out_$p248 := $bitcast.ref.ref(out_$p247);
    goto corral_source_split_8606;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    out_$p247 := $add.ref($add.ref(out_$p77, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_8605;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p246, out_$p77);
    goto corral_source_split_8604;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    out_$p246 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 2192)), $mul.ref(136, 1)), $mul.ref(out_$i244, 8));
    goto corral_source_split_8603;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    out_$i244 := $zext.i32.i64(out_$i243);
    goto corral_source_split_8602;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    out_$i243 := $load.i32($M.0, out_$p242);
    goto corral_source_split_8601;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    out_$p242 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2192)), $mul.ref(128, 1));
    goto corral_source_split_8600;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} ieee80211_rx_irqsafe(in_$p0, out_$p22);
    goto corral_source_split_8599;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_15 := $M.0;
    out_cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 1599} out_cmdloc_dummy_var_17 := $memcpy.i8(out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16, out_$p240, out_$p241, 40, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_17;
    goto corral_source_split_8598;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    out_$p241 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_8597;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    out_$p240 := $bitcast.ref.ref(out_$p239);
    goto corral_source_split_8596;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} out_$p239 := IEEE80211_SKB_RXCB(out_$p22);
    goto corral_source_split_8595;

  $bb54:
    assume !(out_$i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p238, out_$i237);
    goto corral_source_split_8593;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    out_$p238 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8592;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    out_$i237 := $or.i32(out_$i236, 32);
    goto corral_source_split_8591;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    out_$i236 := $load.i32($M.0, out_$p235);
    goto corral_source_split_8590;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    out_$p235 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8589;

  $bb53:
    assume out_$i234 == 1;
    goto corral_source_split_8588;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    out_$i234 := $ne.i32(out_$i233, 0);
    goto corral_source_split_8586;

  $bb52:
    assume {:verifier.code 0} true;
    out_$i233 := $and.i32(out_$i35, 8192);
    goto corral_source_split_8585;

  $bb51:
    assume !(out_$i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p232, out_$i231);
    goto corral_source_split_8583;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    out_$p232 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8582;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    out_$i231 := $or.i32(out_$i230, 256);
    goto corral_source_split_8581;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    out_$i230 := $load.i32($M.0, out_$p229);
    goto corral_source_split_8580;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    out_$p229 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8579;

  $bb50:
    assume out_$i228 == 1;
    goto corral_source_split_8578;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    out_$i228 := $ne.i32(out_$i227, 0);
    goto corral_source_split_8547;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    out_$i227 := $and.i32(out_$i35, 33554432);
    goto corral_source_split_8546;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p226, out_$i225);
    goto corral_source_split_8545;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    out_$p226 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8544;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    out_$i225 := $or.i32(out_$i224, 128);
    goto corral_source_split_8543;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    out_$i224 := $load.i32($M.0, out_$p223);
    goto corral_source_split_8542;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    out_$p223 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8541;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p222, out_$i38);
    goto corral_source_split_8540;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    out_$p222 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8539;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p221, out_$i220);
    goto corral_source_split_8538;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    out_$p221 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_8537;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    out_$i220 := $trunc.i32.i8(out_$i219);
    goto corral_source_split_8536;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    out_$i219 := $load.i32($M.0, out_$p218);
    goto corral_source_split_8535;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    out_$p218 := $add.ref($add.ref(out_$p217, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_8534;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    out_$p217 := $load.ref($M.0, out_$p216);
    goto corral_source_split_8533;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    out_$p216 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_8532;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p213, out_$i212);
    goto corral_source_split_8531;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    out_$p213 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_8530;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    out_$i212 := $load.i16($M.0, out_$p211);
    goto corral_source_split_8529;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    out_$p211 := $add.ref($add.ref(out_$p210, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_8528;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    out_$p210 := $load.ref($M.0, out_$p209);
    goto corral_source_split_8527;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    out_$p209 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_8526;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p206, out_$i166);
    goto corral_source_split_8525;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    out_$p206 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_8524;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_8523;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i166 := out_$i6;
    goto $bb45;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    out_$i166 := out_$i189;
    goto $bb45;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    out_$i166 := out_$i148;
    goto $bb45;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    out_$i166 := out_$i176;
    goto $bb45;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    out_$i175 := $trunc.i32.i8(out_$i174);
    call {:si_unique_call 1587} out_$i176 := devirtbounce.6(out_$p171, out_$i173, out_$i175);
    call {:si_unique_call 1588} {:cexpr "tmp___3"} boogie_si_record_i8(out_$i176);
    goto corral_source_split_8462;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    out_$i174 := $zext.i8.i32(out_$i167);
    goto corral_source_split_8461;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    out_$i173 := $trunc.i32.i8(out_$i172);
    goto corral_source_split_8460;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    out_$i172 := $zext.i8.i32(out_$i120);
    goto corral_source_split_8459;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    out_$p171 := $load.ref($M.0, out_$p170);
    goto corral_source_split_8458;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref($add.ref(out_$p169, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8457;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    out_$p169 := $load.ref($M.0, out_$p168);
    goto corral_source_split_8456;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    out_$p168 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2192)), $mul.ref(8, 1));
    goto corral_source_split_8455;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    out_$i167 := $trunc.i32.i8(out_$i36);
    call {:si_unique_call 1586} {:cexpr "sq"} boogie_si_record_i8(out_$i167);
    goto corral_source_split_8454;

  $bb28:
    assume out_$i126 == 1;
    goto corral_source_split_8453;

  $bb21:
    assume out_$i123 == 1;
    assume {:verifier.code 0} true;
    out_$i126 := $eq.i32(out_$i122, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i123 := $slt.i32(out_$i122, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    out_$i122 := $load.i32($M.0, out_$p121);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2192)), $mul.ref(2160, 1));
    goto corral_source_split_8439;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    out_$i120 := $trunc.i32.i8(out_$i119);
    call {:si_unique_call 1585} {:cexpr "agc"} boogie_si_record_i8(out_$i120);
    goto corral_source_split_8438;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    out_$i119 := $and.i32(out_$i118, 127);
    goto corral_source_split_8437;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    out_$i118 := $zext.i8.i32(out_$i117);
    goto corral_source_split_8436;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    out_$i117 := $trunc.i32.i8(out_$i116);
    goto corral_source_split_8435;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    out_$i116 := $lshr.i32(out_$i36, 17);
    goto corral_source_split_8434;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p115, out_$i114);
    goto corral_source_split_8433;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(23, 1));
    goto corral_source_split_8432;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    out_$i114 := $trunc.i32.i8(out_$i113);
    goto corral_source_split_8431;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    out_$i113 := $and.i32(out_$i112, 15);
    goto corral_source_split_8430;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    out_$i112 := $zext.i8.i32(out_$i111);
    goto corral_source_split_8429;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    out_$i111 := $trunc.i32.i8(out_$i110);
    goto corral_source_split_8428;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    out_$i110 := $lshr.i32(out_$i35, 20);
    goto corral_source_split_8427;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p109, out_$i108);
    goto corral_source_split_8426;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(27, 1));
    goto corral_source_split_8425;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    out_$i108 := $trunc.i32.i8(out_$i107);
    goto corral_source_split_8424;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    out_$i107 := $and.i32(out_$i106, 1);
    goto corral_source_split_8423;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    out_$i106 := $zext.i8.i32(out_$i105);
    goto corral_source_split_8422;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    out_$i105 := $trunc.i32.i8(out_$i104);
    goto corral_source_split_8421;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    out_$i104 := $lshr.i32(out_$i36, 15);
    goto corral_source_split_8420;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} out_vslice_dummy_var_143 := skb_put(out_$p22, out_$i102);
    goto corral_source_split_8419;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    out_$i102 := $and.i32(out_$i35, 4095);
    goto corral_source_split_8418;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} pci_unmap_single(out_$p98, out_$i101, 2353, 2);
    goto corral_source_split_8417;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i64($M.0, out_$p100);
    goto corral_source_split_8416;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    out_$p100 := $bitcast.ref.ref(out_$p99);
    goto corral_source_split_8415;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(out_$p22, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_8414;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    out_$p98 := $load.ref($M.0, out_$p97);
    goto corral_source_split_8413;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2192)), $mul.ref(2144, 1));
    goto corral_source_split_8412;

  $bb18:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_8498;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    out_$i165 := $trunc.i32.i8(out_$i164);
    call {:si_unique_call 1592} {:cexpr "signal"} boogie_si_record_i8(out_$i165);
    assume {:verifier.code 0} true;
    out_$i148 := out_$i165;
    goto $bb38;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    out_$i148 := out_$i147;
    goto $bb38;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    out_$i147 := $trunc.i32.i8(out_$i146);
    call {:si_unique_call 1590} {:cexpr "signal"} boogie_si_record_i8(out_$i147);
    goto corral_source_split_8496;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    out_$i146 := $sub.i32(247, out_$i145);
    goto corral_source_split_8495;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    out_$i145 := $zext.i8.i32(out_$i144);
    goto corral_source_split_8494;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    out_$i144 := $trunc.i32.i8(out_$i142);
    goto corral_source_split_8493;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_8492;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    out_$i142 := out_$i143;
    goto $bb37;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    out_$i142 := out_$i141;
    goto $bb37;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    out_$i141 := $zext.i8.i32(out_$i137);
    goto corral_source_split_8487;

  $bb35:
    assume out_$i140 == 1;
    goto corral_source_split_8486;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    out_$i140 := $slt.i32(out_$i138, out_$i139);
    goto corral_source_split_8484;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    out_$i139 := $zext.i8.i32(90);
    goto corral_source_split_8483;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    out_$i138 := $zext.i8.i32(out_$i137);
    goto corral_source_split_8482;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    out_$i137 := $trunc.i32.i8(out_$i135);
    call {:si_unique_call 1589} {:cexpr "__min1"} boogie_si_record_i8(out_$i137);
    goto corral_source_split_8481;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_8480;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    out_$i135 := out_$i136;
    goto $bb34;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    out_$i135 := out_$i134;
    goto $bb34;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    out_$i134 := $zext.i8.i32(out_$i120);
    goto corral_source_split_8475;

  $bb32:
    assume out_$i133 == 1;
    goto corral_source_split_8474;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    out_$i133 := $sgt.i32(out_$i131, out_$i132);
    goto corral_source_split_8467;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    out_$i132 := $zext.i8.i32(25);
    goto corral_source_split_8466;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    out_$i131 := $zext.i8.i32(out_$i120);
    goto corral_source_split_8465;

  $bb30:
    assume out_$i130 == 1;
    goto corral_source_split_8464;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    out_$i130 := $ugt.i32(out_$i129, 3);
    goto corral_source_split_8445;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    out_$i129 := $zext.i8.i32(out_$i128);
    goto corral_source_split_8444;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    out_$i128 := $load.i8($M.0, out_$p127);
    goto corral_source_split_8443;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(23, 1));
    goto corral_source_split_8442;

  $bb23:
    assume out_$i124 == 1;
    goto corral_source_split_8441;

  $bb22:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    out_$i124 := $slt.i32(out_$i122, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    out_$i136 := $zext.i8.i32(25);
    goto corral_source_split_8478;

  $bb33:
    assume !(out_$i133 == 1);
    goto corral_source_split_8477;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    out_$i143 := $zext.i8.i32(90);
    goto corral_source_split_8490;

  $bb36:
    assume !(out_$i140 == 1);
    goto corral_source_split_8489;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    out_$i164 := $sub.i32(0, out_$i163);
    goto corral_source_split_8521;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    out_$i163 := $zext.i8.i32(out_$i162);
    goto corral_source_split_8520;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    out_$i162 := $trunc.i32.i8(out_$i160);
    goto corral_source_split_8519;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_8518;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    out_$i160 := out_$i161;
    goto $bb44;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    out_$i160 := out_$i159;
    goto $bb44;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    out_$i159 := $zext.i8.i32(out_$i155);
    goto corral_source_split_8513;

  $bb42:
    assume out_$i158 == 1;
    goto corral_source_split_8512;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    out_$i158 := $slt.i32(out_$i156, out_$i157);
    goto corral_source_split_8510;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    out_$i157 := $zext.i8.i32(95);
    goto corral_source_split_8509;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    out_$i156 := $zext.i8.i32(out_$i155);
    goto corral_source_split_8508;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    out_$i155 := $trunc.i32.i8(out_$i153);
    call {:si_unique_call 1591} {:cexpr "__min1___0"} boogie_si_record_i8(out_$i155);
    goto corral_source_split_8507;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_8506;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    out_$i153 := out_$i154;
    goto $bb41;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    out_$i153 := out_$i152;
    goto $bb41;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    out_$i152 := $zext.i8.i32(out_$i120);
    goto corral_source_split_8501;

  $bb39:
    assume out_$i151 == 1;
    goto corral_source_split_8500;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    out_$i151 := $sgt.i32(out_$i149, out_$i150);
    goto corral_source_split_8472;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    out_$i150 := $zext.i8.i32(30);
    goto corral_source_split_8471;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    out_$i149 := $zext.i8.i32(out_$i120);
    goto corral_source_split_8470;

  $bb31:
    assume !(out_$i130 == 1);
    goto corral_source_split_8469;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    out_$i154 := $zext.i8.i32(30);
    goto corral_source_split_8504;

  $bb40:
    assume !(out_$i151 == 1);
    goto corral_source_split_8503;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    out_$i161 := $zext.i8.i32(95);
    goto corral_source_split_8516;

  $bb43:
    assume !(out_$i158 == 1);
    goto corral_source_split_8515;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_8576;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    out_$i205 := $trunc.i32.i8(out_$i204);
    call {:si_unique_call 1597} {:cexpr "signal"} boogie_si_record_i8(out_$i205);
    assume {:verifier.code 0} true;
    out_$i189 := out_$i205;
    goto $bb48;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    out_$i189 := out_$i188;
    goto $bb48;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    out_$i188 := $trunc.i32.i8(out_$i187);
    call {:si_unique_call 1594} {:cexpr "signal"} boogie_si_record_i8(out_$i188);
    goto corral_source_split_8557;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    out_$i187 := $add.i32(out_$i186, 215);
    goto corral_source_split_8556;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    out_$i186 := $zext.i8.i32(out_$i185);
    goto corral_source_split_8555;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    out_$i185 := $trunc.i32.i8(out_$i184);
    goto corral_source_split_8554;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    out_$i184 := $sdiv.i32(out_$i183, 2);
    goto corral_source_split_8553;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    out_$i183 := $sext.i8.i32(out_$i182);
    goto corral_source_split_8552;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    out_$i182 := $trunc.i32.i8(out_$i181);
    call {:si_unique_call 1593} {:cexpr "signal"} boogie_si_record_i8(out_$i182);
    goto corral_source_split_8551;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    out_$i181 := $lshr.i32(out_$i37, 16);
    goto corral_source_split_8550;

  $bb46:
    assume out_$i180 == 1;
    goto corral_source_split_8549;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    out_$i180 := $ugt.i32(out_$i179, 3);
    goto corral_source_split_8451;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    out_$i179 := $zext.i8.i32(out_$i178);
    goto corral_source_split_8450;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    out_$i178 := $load.i8($M.0, out_$p177);
    goto corral_source_split_8449;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    out_$p177 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(23, 1));
    goto corral_source_split_8448;

  $bb25:
    assume out_$i125 == 1;
    goto corral_source_split_8447;

  $bb24:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i32(out_$i122, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    out_$i204 := $add.i32(out_$i203, 4);
    goto corral_source_split_8574;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    out_$i203 := $sub.i32(out_$i198, out_$i202);
    goto corral_source_split_8573;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    out_$i202 := $zext.i8.i32(out_$i201);
    goto corral_source_split_8572;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    out_$i201 := $load.i8($M.40, out_$p200);
    goto corral_source_split_8571;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    out_$p200 := $add.ref($add.ref(rtl8187se_lna_gain, $mul.ref(0, 4)), $mul.ref(out_$i199, 1));
    goto corral_source_split_8570;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    out_$i199 := $sext.i32.i64(out_$i192);
    goto corral_source_split_8569;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    out_$i198 := $sub.i32(0, out_$i197);
    goto corral_source_split_8568;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    out_$i197 := $zext.i8.i32(out_$i196);
    goto corral_source_split_8567;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    out_$i196 := $trunc.i32.i8(out_$i195);
    goto corral_source_split_8566;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    out_$i195 := $mul.i32(out_$i194, 2);
    call {:si_unique_call 1596} {:cexpr "bb"} boogie_si_record_i32(out_$i195);
    goto corral_source_split_8565;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    out_$i194 := $and.i32(out_$i193, 31);
    goto corral_source_split_8564;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    out_$i193 := $zext.i8.i32(out_$i120);
    goto corral_source_split_8563;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    out_$i192 := $ashr.i32(out_$i191, 5);
    call {:si_unique_call 1595} {:cexpr "idx"} boogie_si_record_i32(out_$i192);
    goto corral_source_split_8562;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    out_$i191 := $and.i32(out_$i190, 96);
    goto corral_source_split_8561;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    out_$i190 := $zext.i8.i32(out_$i120);
    goto corral_source_split_8560;

  $bb47:
    assume !(out_$i180 == 1);
    goto corral_source_split_8559;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i125 == 1);
    goto $bb27;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i126 == 1);
    goto $bb27;

  $bb59_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$p9, out_$i10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$p39, out_$p40, out_$i41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i35, out_$i36, out_$i37, out_$i38, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p69, out_$p71, out_$p73, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p86, out_$p87, out_$p88, out_$i89, out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i136, out_$i135, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i143, out_$i142, out_$i144, out_$i145, out_$i146, out_$i147, out_$i149, out_$i150, out_$i151, out_$i152, out_$i154, out_$i153, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i161, out_$i160, out_$i162, out_$i163, out_$i164, out_$i165, out_$i148, out_$i167, out_$p168, out_$p169, out_$p170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$p200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i189, out_$i166, out_$p206, out_$p209, out_$p210, out_$p211, out_$i212, out_$p213, out_$p216, out_$p217, out_$p218, out_$i219, out_$i220, out_$p221, out_$p222, out_$p223, out_$i224, out_$i225, out_$p226, out_$i227, out_$i228, out_$p229, out_$i230, out_$i231, out_$p232, out_$i233, out_$i234, out_$p235, out_$i236, out_$i237, out_$p238, out_$p239, out_$p240, out_$p241, out_$p242, out_$i243, out_$i244, out_$p246, out_$p247, out_$p248, out_$i53, out_$p54, out_$i84, out_$p85, out_$p249, out_$p250, out_$p251, out_$i252, out_$i253, out_$p254, out_$p255, out_$p256, out_$i257, out_$i258, out_$p259, out_$i260, out_$i261, out_$p262, out_$p263, out_$i264, out_$i265, out_$i266, out_$p267, out_$i268, out_$i269, out_$i5, out_$i6, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_vslice_dummy_var_143 := rtl8180_handle_rx_loop_$bb1(in_$p0, in_$p1, in_$p4, out_$p7, out_$p8, out_$p9, out_$i10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$p39, out_$p40, out_$i41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i35, out_$i36, out_$i37, out_$i38, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p69, out_$p71, out_$p73, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p86, out_$p87, out_$p88, out_$i89, out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i136, out_$i135, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i143, out_$i142, out_$i144, out_$i145, out_$i146, out_$i147, out_$i149, out_$i150, out_$i151, out_$i152, out_$i154, out_$i153, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i161, out_$i160, out_$i162, out_$i163, out_$i164, out_$i165, out_$i148, out_$i167, out_$p168, out_$p169, out_$p170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$p200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i189, out_$i166, out_$p206, out_$p209, out_$p210, out_$p211, out_$i212, out_$p213, out_$p216, out_$p217, out_$p218, out_$i219, out_$i220, out_$p221, out_$p222, out_$p223, out_$i224, out_$i225, out_$p226, out_$i227, out_$i228, out_$p229, out_$i230, out_$i231, out_$p232, out_$i233, out_$i234, out_$p235, out_$i236, out_$i237, out_$p238, out_$p239, out_$p240, out_$p241, out_$p242, out_$i243, out_$i244, out_$p246, out_$p247, out_$p248, out_$i53, out_$p54, out_$i84, out_$p85, out_$p249, out_$p250, out_$p251, out_$i252, out_$i253, out_$p254, out_$p255, out_$p256, out_$i257, out_$i258, out_$p259, out_$i260, out_$i261, out_$p262, out_$p263, out_$i264, out_$i265, out_$i266, out_$p267, out_$i268, out_$i269, out_$i5, out_$i6, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_vslice_dummy_var_143);
    return;

  exit:
    return;
}



procedure rtl8180_handle_rx_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$i14: i32, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i64, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$p29: ref, in_$i30: i32, in_$p31: ref, in_$i32: i32, in_$p33: ref, in_$i34: i64, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$p42: ref, in_$i43: i32, in_$p44: ref, in_$i45: i64, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i64, in_$i46: i1, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i64, in_$i51: i64, in_$i52: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p69: ref, in_$p71: ref, in_$p73: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$i80: i32, in_$i81: i64, in_$i82: i64, in_$i83: i1, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$p90: ref, in_$p91: ref, in_$i92: i32, in_$i93: i1, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i32, in_$i104: i32, in_$i105: i8, in_$i106: i32, in_$i107: i32, in_$i108: i8, in_$p109: ref, in_$i110: i32, in_$i111: i8, in_$i112: i32, in_$i113: i32, in_$i114: i8, in_$p115: ref, in_$i116: i32, in_$i117: i8, in_$i118: i32, in_$i119: i32, in_$i120: i8, in_$p121: ref, in_$i122: i32, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$p127: ref, in_$i128: i8, in_$i129: i32, in_$i130: i1, in_$i131: i32, in_$i132: i32, in_$i133: i1, in_$i134: i32, in_$i136: i32, in_$i135: i32, in_$i137: i8, in_$i138: i32, in_$i139: i32, in_$i140: i1, in_$i141: i32, in_$i143: i32, in_$i142: i32, in_$i144: i8, in_$i145: i32, in_$i146: i32, in_$i147: i8, in_$i149: i32, in_$i150: i32, in_$i151: i1, in_$i152: i32, in_$i154: i32, in_$i153: i32, in_$i155: i8, in_$i156: i32, in_$i157: i32, in_$i158: i1, in_$i159: i32, in_$i161: i32, in_$i160: i32, in_$i162: i8, in_$i163: i32, in_$i164: i32, in_$i165: i8, in_$i148: i8, in_$i167: i8, in_$p168: ref, in_$p169: ref, in_$p170: ref, in_$p171: ref, in_$i172: i32, in_$i173: i8, in_$i174: i32, in_$i175: i8, in_$i176: i8, in_$p177: ref, in_$i178: i8, in_$i179: i32, in_$i180: i1, in_$i181: i32, in_$i182: i8, in_$i183: i32, in_$i184: i32, in_$i185: i8, in_$i186: i32, in_$i187: i32, in_$i188: i8, in_$i190: i32, in_$i191: i32, in_$i192: i32, in_$i193: i32, in_$i194: i32, in_$i195: i32, in_$i196: i8, in_$i197: i32, in_$i198: i32, in_$i199: i64, in_$p200: ref, in_$i201: i8, in_$i202: i32, in_$i203: i32, in_$i204: i32, in_$i205: i8, in_$i189: i8, in_$i166: i8, in_$p206: ref, in_$p209: ref, in_$p210: ref, in_$p211: ref, in_$i212: i16, in_$p213: ref, in_$p216: ref, in_$p217: ref, in_$p218: ref, in_$i219: i32, in_$i220: i8, in_$p221: ref, in_$p222: ref, in_$p223: ref, in_$i224: i32, in_$i225: i32, in_$p226: ref, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$i230: i32, in_$i231: i32, in_$p232: ref, in_$i233: i32, in_$i234: i1, in_$p235: ref, in_$i236: i32, in_$i237: i32, in_$p238: ref, in_$p239: ref, in_$p240: ref, in_$p241: ref, in_$p242: ref, in_$i243: i32, in_$i244: i64, in_$p246: ref, in_$p247: ref, in_$p248: ref, in_$i53: i8, in_$p54: ref, in_$i84: i8, in_$p85: ref, in_$p249: ref, in_$p250: ref, in_$p251: ref, in_$i252: i64, in_$i253: i32, in_$p254: ref, in_$p255: ref, in_$p256: ref, in_$i257: i32, in_$i258: i1, in_$p259: ref, in_$i260: i32, in_$i261: i32, in_$p262: ref, in_$p263: ref, in_$i264: i32, in_$i265: i32, in_$i266: i32, in_$p267: ref, in_$i268: i32, in_$i269: i1, in_$i5: i32, in_$i6: i8, in_cmdloc_dummy_var_15: [ref]i8, in_cmdloc_dummy_var_16: [ref]i8, in_cmdloc_dummy_var_17: [ref]i8, in_vslice_dummy_var_143: ref) returns (out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$i14: i32, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i64, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$p29: ref, out_$i30: i32, out_$p31: ref, out_$i32: i32, out_$p33: ref, out_$i34: i64, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$p42: ref, out_$i43: i32, out_$p44: ref, out_$i45: i64, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i64, out_$i46: i1, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i64, out_$i51: i64, out_$i52: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p69: ref, out_$p71: ref, out_$p73: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$i80: i32, out_$i81: i64, out_$i82: i64, out_$i83: i1, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$p90: ref, out_$p91: ref, out_$i92: i32, out_$i93: i1, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i32, out_$i104: i32, out_$i105: i8, out_$i106: i32, out_$i107: i32, out_$i108: i8, out_$p109: ref, out_$i110: i32, out_$i111: i8, out_$i112: i32, out_$i113: i32, out_$i114: i8, out_$p115: ref, out_$i116: i32, out_$i117: i8, out_$i118: i32, out_$i119: i32, out_$i120: i8, out_$p121: ref, out_$i122: i32, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$p127: ref, out_$i128: i8, out_$i129: i32, out_$i130: i1, out_$i131: i32, out_$i132: i32, out_$i133: i1, out_$i134: i32, out_$i136: i32, out_$i135: i32, out_$i137: i8, out_$i138: i32, out_$i139: i32, out_$i140: i1, out_$i141: i32, out_$i143: i32, out_$i142: i32, out_$i144: i8, out_$i145: i32, out_$i146: i32, out_$i147: i8, out_$i149: i32, out_$i150: i32, out_$i151: i1, out_$i152: i32, out_$i154: i32, out_$i153: i32, out_$i155: i8, out_$i156: i32, out_$i157: i32, out_$i158: i1, out_$i159: i32, out_$i161: i32, out_$i160: i32, out_$i162: i8, out_$i163: i32, out_$i164: i32, out_$i165: i8, out_$i148: i8, out_$i167: i8, out_$p168: ref, out_$p169: ref, out_$p170: ref, out_$p171: ref, out_$i172: i32, out_$i173: i8, out_$i174: i32, out_$i175: i8, out_$i176: i8, out_$p177: ref, out_$i178: i8, out_$i179: i32, out_$i180: i1, out_$i181: i32, out_$i182: i8, out_$i183: i32, out_$i184: i32, out_$i185: i8, out_$i186: i32, out_$i187: i32, out_$i188: i8, out_$i190: i32, out_$i191: i32, out_$i192: i32, out_$i193: i32, out_$i194: i32, out_$i195: i32, out_$i196: i8, out_$i197: i32, out_$i198: i32, out_$i199: i64, out_$p200: ref, out_$i201: i8, out_$i202: i32, out_$i203: i32, out_$i204: i32, out_$i205: i8, out_$i189: i8, out_$i166: i8, out_$p206: ref, out_$p209: ref, out_$p210: ref, out_$p211: ref, out_$i212: i16, out_$p213: ref, out_$p216: ref, out_$p217: ref, out_$p218: ref, out_$i219: i32, out_$i220: i8, out_$p221: ref, out_$p222: ref, out_$p223: ref, out_$i224: i32, out_$i225: i32, out_$p226: ref, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$i230: i32, out_$i231: i32, out_$p232: ref, out_$i233: i32, out_$i234: i1, out_$p235: ref, out_$i236: i32, out_$i237: i32, out_$p238: ref, out_$p239: ref, out_$p240: ref, out_$p241: ref, out_$p242: ref, out_$i243: i32, out_$i244: i64, out_$p246: ref, out_$p247: ref, out_$p248: ref, out_$i53: i8, out_$p54: ref, out_$i84: i8, out_$p85: ref, out_$p249: ref, out_$p250: ref, out_$p251: ref, out_$i252: i64, out_$i253: i32, out_$p254: ref, out_$p255: ref, out_$p256: ref, out_$i257: i32, out_$i258: i1, out_$p259: ref, out_$i260: i32, out_$i261: i32, out_$p262: ref, out_$p263: ref, out_$i264: i32, out_$i265: i32, out_$i266: i32, out_$p267: ref, out_$i268: i32, out_$i269: i1, out_$i5: i32, out_$i6: i8, out_cmdloc_dummy_var_15: [ref]i8, out_cmdloc_dummy_var_16: [ref]i8, out_cmdloc_dummy_var_17: [ref]i8, out_vslice_dummy_var_143: ref);
  modifies $M.0, assertsPassed;



implementation dma_map_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_map_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_map_single_attrs_loop_$bb3();



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$p15: ref, in_$p17: ref, in_$p19: ref, in_$p21: ref, in_$p23: ref, in_$p25: ref, in_$p27: ref, in_$p29: ref, in_$i42: i32, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i32, in_$i74: i1, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$i78: i1, in_$i79: i32, in_$i80: i32, in_$i81: i32, in_$i82: i1, in_$p83: ref, in_$i84: i32, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$i89: i32, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$i102: i32, in_$i103: i64, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i107: i32, in_$i108: i64, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$i120: i32, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i136: i16, in_$i137: i32, in_$i138: i16, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$i143: i16, in_$i144: i32, in_$i145: i16, in_$i147: i32, in_$i148: i1, in_$p149: ref, in_$i150: i32, in_$i151: i32, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$i164: i32, in_$i165: i1, in_$i166: i32, in_$i167: i1, in_$i168: i32, in_$i169: i1, in_$i170: i32, in_$i171: i1, in_$i172: i32, in_$i173: i1, in_$i174: i32, in_$i175: i1, in_$i176: i32, in_$i177: i1, in_$i178: i32, in_$i179: i1, in_$i180: i32, in_$i181: i1, in_$i182: i1, in_$i183: i1, in_$i184: i32, in_$i185: i1, in_$i186: i32, in_$i187: i1, in_$i188: i32, in_$i189: i1, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$i193: i32, in_$i194: i1, in_$i195: i32, in_$i196: i1, in_$i197: i32, in_$i198: i1, in_$i199: i1, in_$i200: i1, in_$i201: i1, in_$i202: i1, in_$i203: i1, in_$i204: i1, in_$i205: i1, in_$i206: i32, in_$i207: i1, in_$p208: ref, in_$i209: i32, in_$i210: i32, in_$i211: i1, in_$i212: i32, in_$i213: i32, in_$i214: i32, in_$i215: i1, in_$i216: i32, in_$i217: i1, in_$p218: ref, in_$p219: ref, in_$i220: i32, in_$i221: i32, in_$i222: i32, in_$i223: i1, in_$i224: i32, in_$i225: i1, in_$p226: ref, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$i230: i32, in_$i231: i1, in_$p232: ref, in_$i233: i32, in_$i234: i1, in_$p235: ref, in_$i236: i32, in_$i237: i1, in_$p238: ref, in_$i239: i32, in_$i240: i32, in_$i241: i1, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$i245: i32, in_$i246: i32, in_$i247: i1, in_$i248: i32, in_$i249: i1, in_$p250: ref, in_$i251: i32, in_$i252: i32, in_$i253: i1, in_$i254: i32, in_$i255: i1, in_$i256: i32, in_$i257: i32, in_$i258: i1, in_$i259: i32, in_$i260: i1, in_$i261: i32, in_$i262: i32, in_$i263: i1, in_$i264: i32, in_$i265: i1, in_$i266: i32, in_$i267: i32, in_$i268: i1, in_$i269: i32, in_$i270: i1, in_$i272: i32, in_$i273: i1, in_$i275: i32, in_$i276: i1, in_$i278: i32, in_$i279: i1, in_$i281: i32, in_$i282: i1, in_vslice_dummy_var_159: i32, in_vslice_dummy_var_160: i32, in_vslice_dummy_var_161: i64, in_vslice_dummy_var_162: i64, in_vslice_dummy_var_163: i64, in_vslice_dummy_var_164: i64, in_vslice_dummy_var_165: i32, in_vslice_dummy_var_166: i32, in_vslice_dummy_var_167: i32, in_vslice_dummy_var_168: i32, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i32, in_vslice_dummy_var_171: i32, in_vslice_dummy_var_172: i32) returns (out_$i42: i32, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i32, out_$i74: i1, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$i78: i1, out_$i79: i32, out_$i80: i32, out_$i81: i32, out_$i82: i1, out_$p83: ref, out_$i84: i32, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$i89: i32, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$i102: i32, out_$i103: i64, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i107: i32, out_$i108: i64, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$i120: i32, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i136: i16, out_$i137: i32, out_$i138: i16, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$i143: i16, out_$i144: i32, out_$i145: i16, out_$i147: i32, out_$i148: i1, out_$p149: ref, out_$i150: i32, out_$i151: i32, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$i164: i32, out_$i165: i1, out_$i166: i32, out_$i167: i1, out_$i168: i32, out_$i169: i1, out_$i170: i32, out_$i171: i1, out_$i172: i32, out_$i173: i1, out_$i174: i32, out_$i175: i1, out_$i176: i32, out_$i177: i1, out_$i178: i32, out_$i179: i1, out_$i180: i32, out_$i181: i1, out_$i182: i1, out_$i183: i1, out_$i184: i32, out_$i185: i1, out_$i186: i32, out_$i187: i1, out_$i188: i32, out_$i189: i1, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$i193: i32, out_$i194: i1, out_$i195: i32, out_$i196: i1, out_$i197: i32, out_$i198: i1, out_$i199: i1, out_$i200: i1, out_$i201: i1, out_$i202: i1, out_$i203: i1, out_$i204: i1, out_$i205: i1, out_$i206: i32, out_$i207: i1, out_$p208: ref, out_$i209: i32, out_$i210: i32, out_$i211: i1, out_$i212: i32, out_$i213: i32, out_$i214: i32, out_$i215: i1, out_$i216: i32, out_$i217: i1, out_$p218: ref, out_$p219: ref, out_$i220: i32, out_$i221: i32, out_$i222: i32, out_$i223: i1, out_$i224: i32, out_$i225: i1, out_$p226: ref, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$i230: i32, out_$i231: i1, out_$p232: ref, out_$i233: i32, out_$i234: i1, out_$p235: ref, out_$i236: i32, out_$i237: i1, out_$p238: ref, out_$i239: i32, out_$i240: i32, out_$i241: i1, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$i245: i32, out_$i246: i32, out_$i247: i1, out_$i248: i32, out_$i249: i1, out_$p250: ref, out_$i251: i32, out_$i252: i32, out_$i253: i1, out_$i254: i32, out_$i255: i1, out_$i256: i32, out_$i257: i32, out_$i258: i1, out_$i259: i32, out_$i260: i1, out_$i261: i32, out_$i262: i32, out_$i263: i1, out_$i264: i32, out_$i265: i1, out_$i266: i32, out_$i267: i32, out_$i268: i1, out_$i269: i32, out_$i270: i1, out_$i272: i32, out_$i273: i1, out_$i275: i32, out_$i276: i1, out_$i278: i32, out_$i279: i1, out_$i281: i32, out_$i282: i1, out_vslice_dummy_var_159: i32, out_vslice_dummy_var_160: i32, out_vslice_dummy_var_161: i64, out_vslice_dummy_var_162: i64, out_vslice_dummy_var_163: i64, out_vslice_dummy_var_164: i64, out_vslice_dummy_var_165: i32, out_vslice_dummy_var_166: i32, out_vslice_dummy_var_167: i32, out_vslice_dummy_var_168: i32, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i32, out_vslice_dummy_var_171: i32, out_vslice_dummy_var_172: i32)
{

  entry:
    out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i86, out_$i87, out_$p88, out_$i89, out_$i91, out_$i92, out_$p93, out_$i95, out_$i96, out_$p97, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$p127, out_$i129, out_$i130, out_$p131, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i140, out_$i141, out_$p142, out_$i143, out_$i144, out_$i145, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$p160, out_$i161, out_$i162, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$p208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$p218, out_$p219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$p226, out_$i227, out_$i228, out_$p229, out_$i230, out_$i231, out_$p232, out_$i233, out_$i234, out_$p235, out_$i236, out_$i237, out_$p238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$p250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i272, out_$i273, out_$i275, out_$i276, out_$i278, out_$i279, out_$i281, out_$i282, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172 := in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$p75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$p83, in_$i84, in_$i86, in_$i87, in_$p88, in_$i89, in_$i91, in_$i92, in_$p93, in_$i95, in_$i96, in_$p97, in_$i99, in_$i100, in_$p101, in_$i102, in_$i103, in_$i104, in_$i105, in_$p106, in_$i107, in_$i108, in_$i109, in_$i110, in_$p111, in_$i113, in_$i114, in_$p115, in_$i117, in_$i118, in_$p119, in_$i120, in_$i121, in_$i122, in_$p123, in_$i124, in_$i125, in_$i126, in_$p127, in_$i129, in_$i130, in_$p131, in_$i133, in_$i134, in_$p135, in_$i136, in_$i137, in_$i138, in_$i140, in_$i141, in_$p142, in_$i143, in_$i144, in_$i145, in_$i147, in_$i148, in_$p149, in_$i150, in_$i151, in_$i152, in_$i153, in_$p154, in_$i155, in_$i156, in_$p157, in_$i158, in_$i159, in_$p160, in_$i161, in_$i162, in_$p163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$p208, in_$i209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$i217, in_$p218, in_$p219, in_$i220, in_$i221, in_$i222, in_$i223, in_$i224, in_$i225, in_$p226, in_$i227, in_$i228, in_$p229, in_$i230, in_$i231, in_$p232, in_$i233, in_$i234, in_$p235, in_$i236, in_$i237, in_$p238, in_$i239, in_$i240, in_$i241, in_$i242, in_$i243, in_$p244, in_$i245, in_$i246, in_$i247, in_$i248, in_$i249, in_$p250, in_$i251, in_$i252, in_$i253, in_$i254, in_$i255, in_$i256, in_$i257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i272, in_$i273, in_$i275, in_$i276, in_$i278, in_$i279, in_$i281, in_$i282, in_vslice_dummy_var_159, in_vslice_dummy_var_160, in_vslice_dummy_var_161, in_vslice_dummy_var_162, in_vslice_dummy_var_163, in_vslice_dummy_var_164, in_vslice_dummy_var_165, in_vslice_dummy_var_166, in_vslice_dummy_var_167, in_vslice_dummy_var_168, in_vslice_dummy_var_169, in_vslice_dummy_var_170, in_vslice_dummy_var_171, in_vslice_dummy_var_172;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5093} out_$i42 := __VERIFIER_nondet_int();
    call {:si_unique_call 5094} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i42);
    call {:si_unique_call 5095} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i42);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb33_dummy;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_15192:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_15191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5096} ldv_main_exported_6();
    goto corral_source_split_15192;

  $bb30:
    assume out_$i57 == 1;
    goto corral_source_split_15191;

  corral_source_split_15189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_15188:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i32(out_$i56, 0);
    goto corral_source_split_15189;

  corral_source_split_15187:
    assume {:verifier.code 0} true;
    out_$i56 := $M.67;
    goto corral_source_split_15188;

  $bb28:
    assume out_$i55 == 1;
    goto corral_source_split_15187;

  $bb24:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i42, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb18:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i32(out_$i42, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb3:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$i50 := $slt.i32(out_$i42, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i43 := $slt.i32(out_$i42, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb35:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb63:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb65:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_15251:
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_15250:
    assume {:verifier.code 0} true;
    $M.75 := out_$i80;
    call {:si_unique_call 5103} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i80);
    goto corral_source_split_15251;

  corral_source_split_15249:
    assume {:verifier.code 0} true;
    out_$i80 := $add.i32(out_$i79, 1);
    goto corral_source_split_15250;

  corral_source_split_15248:
    assume {:verifier.code 0} true;
    out_$i79 := $M.75;
    goto corral_source_split_15249;

  corral_source_split_15247:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 5102} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_15248;

  $bb64:
    assume out_$i78 == 1;
    goto corral_source_split_15247;

  corral_source_split_15245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_15244:
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i32(out_$i77, 0);
    goto corral_source_split_15245;

  corral_source_split_15243:
    assume {:verifier.code 0} true;
    out_$i77 := $M.79;
    goto corral_source_split_15244;

  corral_source_split_15242:
    assume {:verifier.code 0} true;
    $M.79 := out_$i76;
    call {:si_unique_call 5101} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i76);
    goto corral_source_split_15243;

  SeqInstr_171:
    goto corral_source_split_15242;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  corral_source_split_15241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5100} out_$i76 := rtl8180_start(out_$p75);
    goto SeqInstr_170;

  corral_source_split_15240:
    assume {:verifier.code 0} true;
    out_$p75 := $M.7;
    goto corral_source_split_15241;

  $bb62:
    assume out_$i74 == 1;
    goto corral_source_split_15240;

  corral_source_split_15238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_15237:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i73, 1);
    goto corral_source_split_15238;

  corral_source_split_15236:
    assume {:verifier.code 0} true;
    out_$i73 := $M.8;
    goto corral_source_split_15237;

  $bb60:
    assume out_$i72 == 1;
    goto corral_source_split_15236;

  $bb58:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i60, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb52:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i32(out_$i60, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb37:
    assume out_$i61 == 1;
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i60, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i61 := $slt.i32(out_$i60, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_15194:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5097} out_$i60 := __VERIFIER_nondet_int();
    call {:si_unique_call 5098} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i60);
    call {:si_unique_call 5099} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i60);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb34:
    assume out_$i59 == 1;
    goto corral_source_split_15194;

  corral_source_split_15181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_15180:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i32(out_$i58, 0);
    goto corral_source_split_15181;

  corral_source_split_15179:
    assume {:verifier.code 0} true;
    out_$i58 := $M.8;
    goto corral_source_split_15180;

  $bb26:
    assume out_$i54 == 1;
    goto corral_source_split_15179;

  $bb25:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i32(out_$i42, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb73:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_15266:
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_15265:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 5107} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_15266;

  corral_source_split_15264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5106} out_vslice_dummy_var_160 := rtl8180_config(out_$p88, out_$i89);
    goto corral_source_split_15265;

  corral_source_split_15263:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i32($M.52, in_$p0);
    goto corral_source_split_15264;

  corral_source_split_15262:
    assume {:verifier.code 0} true;
    out_$p88 := $M.7;
    goto corral_source_split_15263;

  $bb72:
    assume out_$i87 == 1;
    goto corral_source_split_15262;

  corral_source_split_15260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_15259:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i86, 2);
    goto corral_source_split_15260;

  $bb71:
    assume {:verifier.code 0} true;
    out_$i86 := $M.8;
    goto corral_source_split_15259;

  $bb70:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_15257:
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_15256:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 5105} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_15257;

  corral_source_split_15255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5104} out_vslice_dummy_var_159 := rtl8180_config(out_$p83, out_$i84);
    goto corral_source_split_15256;

  corral_source_split_15254:
    assume {:verifier.code 0} true;
    out_$i84 := $load.i32($M.52, in_$p0);
    goto corral_source_split_15255;

  corral_source_split_15253:
    assume {:verifier.code 0} true;
    out_$p83 := $M.7;
    goto corral_source_split_15254;

  $bb69:
    assume out_$i82 == 1;
    goto corral_source_split_15253;

  corral_source_split_15234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_15233:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i81, 1);
    goto corral_source_split_15234;

  corral_source_split_15232:
    assume {:verifier.code 0} true;
    out_$i81 := $M.8;
    goto corral_source_split_15233;

  $bb59:
    assume !(out_$i71 == 1);
    goto corral_source_split_15232;

  $bb79:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_15279:
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_15278:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 5111} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_15279;

  corral_source_split_15277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5110} out_vslice_dummy_var_162 := rtl8180_prepare_multicast(out_$p97, in_$p27);
    goto corral_source_split_15278;

  corral_source_split_15276:
    assume {:verifier.code 0} true;
    out_$p97 := $M.7;
    goto corral_source_split_15277;

  $bb78:
    assume out_$i96 == 1;
    goto corral_source_split_15276;

  corral_source_split_15274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_15273:
    assume {:verifier.code 0} true;
    out_$i96 := $eq.i32(out_$i95, 2);
    goto corral_source_split_15274;

  $bb77:
    assume {:verifier.code 0} true;
    out_$i95 := $M.8;
    goto corral_source_split_15273;

  $bb76:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_15271:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_15270:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 5109} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_15271;

  corral_source_split_15269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5108} out_vslice_dummy_var_161 := rtl8180_prepare_multicast(out_$p93, in_$p27);
    goto corral_source_split_15270;

  corral_source_split_15268:
    assume {:verifier.code 0} true;
    out_$p93 := $M.7;
    goto corral_source_split_15269;

  $bb75:
    assume out_$i92 == 1;
    goto corral_source_split_15268;

  corral_source_split_15222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_15221:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i91, 1);
    goto corral_source_split_15222;

  corral_source_split_15220:
    assume {:verifier.code 0} true;
    out_$i91 := $M.8;
    goto corral_source_split_15221;

  $bb54:
    assume out_$i69 == 1;
    goto corral_source_split_15220;

  $bb53:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    out_$i69 := $slt.i32(out_$i60, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb85:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_15296:
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_15295:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 5115} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_15296;

  corral_source_split_15294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5114} rtl8180_configure_filter(out_$p106, out_$i107, in_$p23, out_$i108);
    goto corral_source_split_15295;

  corral_source_split_15293:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i64($M.52, in_$p4);
    goto corral_source_split_15294;

  corral_source_split_15292:
    assume {:verifier.code 0} true;
    out_$i107 := $load.i32($M.52, in_$p3);
    goto corral_source_split_15293;

  corral_source_split_15291:
    assume {:verifier.code 0} true;
    out_$p106 := $M.7;
    goto corral_source_split_15292;

  $bb84:
    assume out_$i105 == 1;
    goto corral_source_split_15291;

  corral_source_split_15289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_15288:
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i104, 2);
    goto corral_source_split_15289;

  $bb83:
    assume {:verifier.code 0} true;
    out_$i104 := $M.8;
    goto corral_source_split_15288;

  $bb82:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_15286:
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_15285:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 5113} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_15286;

  corral_source_split_15284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5112} rtl8180_configure_filter(out_$p101, out_$i102, in_$p23, out_$i103);
    goto corral_source_split_15285;

  corral_source_split_15283:
    assume {:verifier.code 0} true;
    out_$i103 := $load.i64($M.52, in_$p4);
    goto corral_source_split_15284;

  corral_source_split_15282:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i32($M.52, in_$p3);
    goto corral_source_split_15283;

  corral_source_split_15281:
    assume {:verifier.code 0} true;
    out_$p101 := $M.7;
    goto corral_source_split_15282;

  $bb81:
    assume out_$i100 == 1;
    goto corral_source_split_15281;

  corral_source_split_15226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_15225:
    assume {:verifier.code 0} true;
    out_$i100 := $eq.i32(out_$i99, 1);
    goto corral_source_split_15226;

  corral_source_split_15224:
    assume {:verifier.code 0} true;
    out_$i99 := $M.8;
    goto corral_source_split_15225;

  $bb56:
    assume out_$i70 == 1;
    goto corral_source_split_15224;

  $bb55:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i32(out_$i60, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb91:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_15309:
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_15308:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 5119} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_15309;

  corral_source_split_15307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5118} out_vslice_dummy_var_164 := rtl8180_get_tsf(out_$p115, in_$p15);
    goto corral_source_split_15308;

  corral_source_split_15306:
    assume {:verifier.code 0} true;
    out_$p115 := $M.7;
    goto corral_source_split_15307;

  $bb90:
    assume out_$i114 == 1;
    goto corral_source_split_15306;

  corral_source_split_15304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_15303:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i113, 2);
    goto corral_source_split_15304;

  $bb89:
    assume {:verifier.code 0} true;
    out_$i113 := $M.8;
    goto corral_source_split_15303;

  $bb88:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_15301:
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_15300:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 5117} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_15301;

  corral_source_split_15299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5116} out_vslice_dummy_var_163 := rtl8180_get_tsf(out_$p111, in_$p15);
    goto corral_source_split_15300;

  corral_source_split_15298:
    assume {:verifier.code 0} true;
    out_$p111 := $M.7;
    goto corral_source_split_15299;

  $bb87:
    assume out_$i110 == 1;
    goto corral_source_split_15298;

  corral_source_split_15230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_15229:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i32(out_$i109, 1);
    goto corral_source_split_15230;

  corral_source_split_15228:
    assume {:verifier.code 0} true;
    out_$i109 := $M.8;
    goto corral_source_split_15229;

  $bb57:
    assume !(out_$i70 == 1);
    goto corral_source_split_15228;

  $bb97:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_15324:
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_15323:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 5123} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_15324;

  corral_source_split_15322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5122} rtl8180_bss_info_changed(out_$p123, in_$p11, in_$p7, out_$i124);
    goto corral_source_split_15323;

  corral_source_split_15321:
    assume {:verifier.code 0} true;
    out_$i124 := $load.i32($M.52, in_$p2);
    goto corral_source_split_15322;

  corral_source_split_15320:
    assume {:verifier.code 0} true;
    out_$p123 := $M.7;
    goto corral_source_split_15321;

  $bb96:
    assume out_$i122 == 1;
    goto corral_source_split_15320;

  corral_source_split_15318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_15317:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 2);
    goto corral_source_split_15318;

  $bb95:
    assume {:verifier.code 0} true;
    out_$i121 := $M.8;
    goto corral_source_split_15317;

  $bb94:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_15315:
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_15314:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 5121} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_15315;

  corral_source_split_15313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5120} rtl8180_bss_info_changed(out_$p119, in_$p11, in_$p7, out_$i120);
    goto corral_source_split_15314;

  corral_source_split_15312:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i32($M.52, in_$p2);
    goto corral_source_split_15313;

  corral_source_split_15311:
    assume {:verifier.code 0} true;
    out_$p119 := $M.7;
    goto corral_source_split_15312;

  $bb93:
    assume out_$i118 == 1;
    goto corral_source_split_15311;

  corral_source_split_15210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_15209:
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i32(out_$i117, 1);
    goto corral_source_split_15210;

  corral_source_split_15208:
    assume {:verifier.code 0} true;
    out_$i117 := $M.8;
    goto corral_source_split_15209;

  $bb48:
    assume out_$i66 == 1;
    goto corral_source_split_15208;

  $bb39:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i66 := $slt.i32(out_$i60, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb38:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    out_$i62 := $slt.i32(out_$i60, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb103:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_15337:
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_15336:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 5127} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_15337;

  corral_source_split_15335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5126} out_vslice_dummy_var_166 := rtl8180_add_interface(out_$p131, in_$p17);
    goto corral_source_split_15336;

  corral_source_split_15334:
    assume {:verifier.code 0} true;
    out_$p131 := $M.7;
    goto corral_source_split_15335;

  $bb102:
    assume out_$i130 == 1;
    goto corral_source_split_15334;

  corral_source_split_15332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  corral_source_split_15331:
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i129, 2);
    goto corral_source_split_15332;

  $bb101:
    assume {:verifier.code 0} true;
    out_$i129 := $M.8;
    goto corral_source_split_15331;

  $bb100:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_15329:
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_15328:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 5125} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_15329;

  corral_source_split_15327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5124} out_vslice_dummy_var_165 := rtl8180_add_interface(out_$p127, in_$p17);
    goto corral_source_split_15328;

  corral_source_split_15326:
    assume {:verifier.code 0} true;
    out_$p127 := $M.7;
    goto corral_source_split_15327;

  $bb99:
    assume out_$i126 == 1;
    goto corral_source_split_15326;

  corral_source_split_15214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_15213:
    assume {:verifier.code 0} true;
    out_$i126 := $eq.i32(out_$i125, 1);
    goto corral_source_split_15214;

  corral_source_split_15212:
    assume {:verifier.code 0} true;
    out_$i125 := $M.8;
    goto corral_source_split_15213;

  $bb50:
    assume out_$i67 == 1;
    goto corral_source_split_15212;

  $bb49:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    out_$i67 := $slt.i32(out_$i60, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb109:
    assume !(out_$i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_15356:
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_15355:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 5131} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_15356;

  corral_source_split_15354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5130} out_vslice_dummy_var_168 := rtl8180_conf_tx(out_$p142, in_$p13, out_$i145, in_$p21);
    goto corral_source_split_15355;

  corral_source_split_15353:
    assume {:verifier.code 0} true;
    out_$i145 := $trunc.i32.i16(out_$i144);
    goto corral_source_split_15354;

  corral_source_split_15352:
    assume {:verifier.code 0} true;
    out_$i144 := $zext.i16.i32(out_$i143);
    goto corral_source_split_15353;

  corral_source_split_15351:
    assume {:verifier.code 0} true;
    out_$i143 := $load.i16($M.52, in_$p1);
    goto corral_source_split_15352;

  corral_source_split_15350:
    assume {:verifier.code 0} true;
    out_$p142 := $M.7;
    goto corral_source_split_15351;

  $bb108:
    assume out_$i141 == 1;
    goto corral_source_split_15350;

  corral_source_split_15348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_15347:
    assume {:verifier.code 0} true;
    out_$i141 := $eq.i32(out_$i140, 2);
    goto corral_source_split_15348;

  $bb107:
    assume {:verifier.code 0} true;
    out_$i140 := $M.8;
    goto corral_source_split_15347;

  $bb106:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_15345:
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_15344:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 5129} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_15345;

  corral_source_split_15343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5128} out_vslice_dummy_var_167 := rtl8180_conf_tx(out_$p135, in_$p13, out_$i138, in_$p21);
    goto corral_source_split_15344;

  corral_source_split_15342:
    assume {:verifier.code 0} true;
    out_$i138 := $trunc.i32.i16(out_$i137);
    goto corral_source_split_15343;

  corral_source_split_15341:
    assume {:verifier.code 0} true;
    out_$i137 := $zext.i16.i32(out_$i136);
    goto corral_source_split_15342;

  corral_source_split_15340:
    assume {:verifier.code 0} true;
    out_$i136 := $load.i16($M.52, in_$p1);
    goto corral_source_split_15341;

  corral_source_split_15339:
    assume {:verifier.code 0} true;
    out_$p135 := $M.7;
    goto corral_source_split_15340;

  $bb105:
    assume out_$i134 == 1;
    goto corral_source_split_15339;

  corral_source_split_15218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  corral_source_split_15217:
    assume {:verifier.code 0} true;
    out_$i134 := $eq.i32(out_$i133, 1);
    goto corral_source_split_15218;

  corral_source_split_15216:
    assume {:verifier.code 0} true;
    out_$i133 := $M.8;
    goto corral_source_split_15217;

  $bb51:
    assume !(out_$i67 == 1);
    goto corral_source_split_15216;

  $bb112:
    assume !(out_$i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_15364:
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_15363:
    assume {:verifier.code 0} true;
    $M.75 := out_$i151;
    call {:si_unique_call 5134} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i151);
    goto corral_source_split_15364;

  corral_source_split_15362:
    assume {:verifier.code 0} true;
    out_$i151 := $sub.i32(out_$i150, 1);
    goto corral_source_split_15363;

  corral_source_split_15361:
    assume {:verifier.code 0} true;
    out_$i150 := $M.75;
    goto corral_source_split_15362;

  corral_source_split_15360:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 5133} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_15361;

  corral_source_split_15359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5132} rtl8180_stop(out_$p149);
    goto corral_source_split_15360;

  corral_source_split_15358:
    assume {:verifier.code 0} true;
    out_$p149 := $M.7;
    goto corral_source_split_15359;

  $bb111:
    assume out_$i148 == 1;
    goto corral_source_split_15358;

  corral_source_split_15198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_15197:
    assume {:verifier.code 0} true;
    out_$i148 := $eq.i32(out_$i147, 2);
    goto corral_source_split_15198;

  corral_source_split_15196:
    assume {:verifier.code 0} true;
    out_$i147 := $M.8;
    goto corral_source_split_15197;

  $bb41:
    assume out_$i63 == 1;
    goto corral_source_split_15196;

  $bb40:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    out_$i63 := $slt.i32(out_$i60, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb118:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_15377:
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_15376:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 5138} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_15377;

  corral_source_split_15375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5137} rtl8180_tx(out_$p157, in_$p19, in_$p25);
    goto corral_source_split_15376;

  corral_source_split_15374:
    assume {:verifier.code 0} true;
    out_$p157 := $M.7;
    goto corral_source_split_15375;

  $bb117:
    assume out_$i156 == 1;
    goto corral_source_split_15374;

  corral_source_split_15372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_15371:
    assume {:verifier.code 0} true;
    out_$i156 := $eq.i32(out_$i155, 2);
    goto corral_source_split_15372;

  $bb116:
    assume {:verifier.code 0} true;
    out_$i155 := $M.8;
    goto corral_source_split_15371;

  $bb115:
    assume !(out_$i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_15369:
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_15368:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 5136} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_15369;

  corral_source_split_15367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5135} rtl8180_tx(out_$p154, in_$p19, in_$p25);
    goto corral_source_split_15368;

  corral_source_split_15366:
    assume {:verifier.code 0} true;
    out_$p154 := $M.7;
    goto corral_source_split_15367;

  $bb114:
    assume out_$i153 == 1;
    goto corral_source_split_15366;

  corral_source_split_15202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  corral_source_split_15201:
    assume {:verifier.code 0} true;
    out_$i153 := $eq.i32(out_$i152, 1);
    goto corral_source_split_15202;

  corral_source_split_15200:
    assume {:verifier.code 0} true;
    out_$i152 := $M.8;
    goto corral_source_split_15201;

  $bb43:
    assume out_$i64 == 1;
    goto corral_source_split_15200;

  $bb42:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    out_$i64 := $slt.i32(out_$i60, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb124:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_15390:
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_15389:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 5142} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_15390;

  corral_source_split_15388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5141} rtl8180_remove_interface(out_$p163, in_$p9);
    goto corral_source_split_15389;

  corral_source_split_15387:
    assume {:verifier.code 0} true;
    out_$p163 := $M.7;
    goto corral_source_split_15388;

  $bb123:
    assume out_$i162 == 1;
    goto corral_source_split_15387;

  corral_source_split_15385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_15384:
    assume {:verifier.code 0} true;
    out_$i162 := $eq.i32(out_$i161, 2);
    goto corral_source_split_15385;

  $bb122:
    assume {:verifier.code 0} true;
    out_$i161 := $M.8;
    goto corral_source_split_15384;

  $bb121:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  corral_source_split_15382:
    assume {:verifier.code 0} true;
    goto $bb122;

  corral_source_split_15381:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 5140} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_15382;

  corral_source_split_15380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5139} rtl8180_remove_interface(out_$p160, in_$p9);
    goto corral_source_split_15381;

  corral_source_split_15379:
    assume {:verifier.code 0} true;
    out_$p160 := $M.7;
    goto corral_source_split_15380;

  $bb120:
    assume out_$i159 == 1;
    goto corral_source_split_15379;

  corral_source_split_15206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  corral_source_split_15205:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i158, 1);
    goto corral_source_split_15206;

  corral_source_split_15204:
    assume {:verifier.code 0} true;
    out_$i158 := $M.8;
    goto corral_source_split_15205;

  $bb45:
    assume out_$i65 == 1;
    goto corral_source_split_15204;

  $bb44:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i60, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_15392:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5143} ldv_stop();
    goto corral_source_split_15392;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb46:
    assume {:verifier.code 0} true;
    assume !(out_$i65 == 1);
    goto $bb47;

  $bb61:
    assume {:verifier.code 0} true;
    assume !(out_$i72 == 1);
    goto $bb47;

  $bb130:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_15395:
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_15394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5144} invoke_work_3();
    goto corral_source_split_15395;

  $bb129:
    assume out_$i165 == 1;
    goto corral_source_split_15394;

  corral_source_split_15185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  corral_source_split_15184:
    assume {:verifier.code 0} true;
    out_$i165 := $ne.i32(out_$i164, 0);
    goto corral_source_split_15185;

  corral_source_split_15183:
    assume {:verifier.code 0} true;
    out_$i164 := $M.68;
    goto corral_source_split_15184;

  $bb27:
    assume !(out_$i54 == 1);
    goto corral_source_split_15183;

  $bb133:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  corral_source_split_15398:
    assume {:verifier.code 0} true;
    goto $bb134;

  corral_source_split_15397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5145} ldv_main_exported_7();
    goto corral_source_split_15398;

  $bb132:
    assume out_$i167 == 1;
    goto corral_source_split_15397;

  corral_source_split_15169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  corral_source_split_15168:
    assume {:verifier.code 0} true;
    out_$i167 := $ne.i32(out_$i166, 0);
    goto corral_source_split_15169;

  corral_source_split_15167:
    assume {:verifier.code 0} true;
    out_$i166 := $M.69;
    goto corral_source_split_15168;

  $bb20:
    assume out_$i51 == 1;
    goto corral_source_split_15167;

  $bb19:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    out_$i51 := $slt.i32(out_$i42, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb136:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_15401:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_15400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5146} ldv_main_exported_9();
    goto corral_source_split_15401;

  $bb135:
    assume out_$i169 == 1;
    goto corral_source_split_15400;

  corral_source_split_15173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  corral_source_split_15172:
    assume {:verifier.code 0} true;
    out_$i169 := $ne.i32(out_$i168, 0);
    goto corral_source_split_15173;

  corral_source_split_15171:
    assume {:verifier.code 0} true;
    out_$i168 := $M.70;
    goto corral_source_split_15172;

  $bb22:
    assume out_$i52 == 1;
    goto corral_source_split_15171;

  $bb21:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    out_$i52 := $slt.i32(out_$i42, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb139:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  corral_source_split_15404:
    assume {:verifier.code 0} true;
    goto $bb140;

  SeqInstr_174:
    goto corral_source_split_15404;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  corral_source_split_15403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5147} choose_interrupt_2();
    goto SeqInstr_173;

  $bb138:
    assume out_$i171 == 1;
    goto corral_source_split_15403;

  corral_source_split_15177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  corral_source_split_15176:
    assume {:verifier.code 0} true;
    out_$i171 := $ne.i32(out_$i170, 0);
    goto corral_source_split_15177;

  corral_source_split_15175:
    assume {:verifier.code 0} true;
    out_$i170 := $M.71;
    goto corral_source_split_15176;

  $bb23:
    assume !(out_$i52 == 1);
    goto corral_source_split_15175;

  $bb142:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  corral_source_split_15407:
    assume {:verifier.code 0} true;
    goto $bb143;

  corral_source_split_15406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5148} ldv_main_exported_8();
    goto corral_source_split_15407;

  $bb141:
    assume out_$i173 == 1;
    goto corral_source_split_15406;

  corral_source_split_15157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  corral_source_split_15156:
    assume {:verifier.code 0} true;
    out_$i173 := $ne.i32(out_$i172, 0);
    goto corral_source_split_15157;

  corral_source_split_15155:
    assume {:verifier.code 0} true;
    out_$i172 := $M.72;
    goto corral_source_split_15156;

  $bb14:
    assume out_$i48 == 1;
    goto corral_source_split_15155;

  $bb5:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$i48 := $slt.i32(out_$i42, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb4:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(out_$i42, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb145:
    assume !(out_$i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  corral_source_split_15410:
    assume {:verifier.code 0} true;
    goto $bb146;

  SeqInstr_177:
    goto corral_source_split_15410;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  corral_source_split_15409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5149} choose_interrupt_1();
    goto SeqInstr_176;

  $bb144:
    assume out_$i175 == 1;
    goto corral_source_split_15409;

  corral_source_split_15161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  corral_source_split_15160:
    assume {:verifier.code 0} true;
    out_$i175 := $ne.i32(out_$i174, 0);
    goto corral_source_split_15161;

  corral_source_split_15159:
    assume {:verifier.code 0} true;
    out_$i174 := $M.73;
    goto corral_source_split_15160;

  $bb16:
    assume out_$i49 == 1;
    goto corral_source_split_15159;

  $bb15:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i42, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb148:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_15413:
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_15412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5150} ldv_main_exported_4();
    goto corral_source_split_15413;

  $bb147:
    assume out_$i177 == 1;
    goto corral_source_split_15412;

  corral_source_split_15165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  corral_source_split_15164:
    assume {:verifier.code 0} true;
    out_$i177 := $ne.i32(out_$i176, 0);
    goto corral_source_split_15165;

  corral_source_split_15163:
    assume {:verifier.code 0} true;
    out_$i176 := $M.74;
    goto corral_source_split_15164;

  $bb17:
    assume !(out_$i49 == 1);
    goto corral_source_split_15163;

  $bb151:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb161:
    assume {:verifier.code 0} true;
    assume !(out_$i185 == 1);
    goto $bb162;

  $bb164:
    assume {:verifier.code 0} true;
    assume !(out_$i187 == 1);
    goto $bb162;

  corral_source_split_15427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164;

  corral_source_split_15426:
    assume {:verifier.code 0} true;
    out_$i187 := $eq.i32(out_$i186, 0);
    goto corral_source_split_15427;

  corral_source_split_15425:
    assume {:verifier.code 0} true;
    out_$i186 := $M.75;
    goto corral_source_split_15426;

  $bb160:
    assume out_$i185 == 1;
    goto corral_source_split_15425;

  corral_source_split_15423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_15422:
    assume {:verifier.code 0} true;
    out_$i185 := $eq.i32(out_$i184, 3);
    goto corral_source_split_15423;

  corral_source_split_15421:
    assume {:verifier.code 0} true;
    out_$i184 := $M.76;
    goto corral_source_split_15422;

  $bb158:
    assume out_$i183 == 1;
    goto corral_source_split_15421;

  $bb153:
    assume out_$i181 == 1;
    assume {:verifier.code 0} true;
    out_$i183 := $eq.i32(out_$i180, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb152:
    assume {:verifier.code 0} true;
    out_$i181 := $slt.i32(out_$i180, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  corral_source_split_15415:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5151} out_$i180 := __VERIFIER_nondet_int();
    call {:si_unique_call 5152} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i180);
    call {:si_unique_call 5153} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i180);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb150:
    assume out_$i179 == 1;
    goto corral_source_split_15415;

  corral_source_split_15145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  corral_source_split_15144:
    assume {:verifier.code 0} true;
    out_$i179 := $ne.i32(out_$i178, 0);
    goto corral_source_split_15145;

  corral_source_split_15143:
    assume {:verifier.code 0} true;
    out_$i178 := $M.76;
    goto corral_source_split_15144;

  $bb7:
    assume out_$i45 == 1;
    goto corral_source_split_15143;

  $bb6:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i32(out_$i42, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb169:
    assume !(out_$i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb174:
    assume !(out_$i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_15457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174;

  corral_source_split_15456:
    assume {:verifier.code 0} true;
    out_$i194 := $ne.i32(out_$i193, 0);
    goto corral_source_split_15457;

  $bb172:
    assume {:verifier.code 0} true;
    out_$i193 := $M.80;
    goto corral_source_split_15456;

  $bb171:
    assume !(out_$i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  corral_source_split_15454:
    assume {:verifier.code 0} true;
    goto $bb172;

  corral_source_split_15453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5171} ldv_initialize_rtl818x_rf_ops_8();
    goto corral_source_split_15454;

  corral_source_split_15452:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 5170} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_15453;

  corral_source_split_15451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5169} ldv_initialize_rtl818x_rf_ops_6();
    goto corral_source_split_15452;

  corral_source_split_15450:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 5168} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_15451;

  corral_source_split_15449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5167} ldv_initialize_rtl818x_rf_ops_4();
    goto corral_source_split_15450;

  corral_source_split_15448:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 5166} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_15449;

  corral_source_split_15447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5165} ldv_initialize_rtl818x_rf_ops_7();
    goto corral_source_split_15448;

  corral_source_split_15446:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 5164} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_15447;

  corral_source_split_15445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5163} ldv_initialize_rtl818x_rf_ops_9();
    goto corral_source_split_15446;

  corral_source_split_15444:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 5162} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_15445;

  corral_source_split_15443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5161} ldv_initialize_rtl818x_rf_ops_5();
    goto corral_source_split_15444;

  corral_source_split_15442:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 5160} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_15443;

  corral_source_split_15441:
    assume {:verifier.code 0} true;
    $M.76 := 3;
    call {:si_unique_call 5159} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_15442;

  $bb170:
    assume out_$i192 == 1;
    goto corral_source_split_15441;

  corral_source_split_15439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  corral_source_split_15438:
    assume {:verifier.code 0} true;
    out_$i192 := $eq.i32(out_$i191, 0);
    goto corral_source_split_15439;

  corral_source_split_15437:
    assume {:verifier.code 0} true;
    out_$i191 := $M.80;
    goto corral_source_split_15438;

  corral_source_split_15436:
    assume {:verifier.code 0} true;
    $M.80 := out_$i190;
    call {:si_unique_call 5158} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i190);
    goto corral_source_split_15437;

  corral_source_split_15435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5157} out_$i190 := rtl8180_driver_init();
    goto corral_source_split_15436;

  $bb168:
    assume out_$i189 == 1;
    goto corral_source_split_15435;

  corral_source_split_15419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  corral_source_split_15418:
    assume {:verifier.code 0} true;
    out_$i189 := $eq.i32(out_$i188, 1);
    goto corral_source_split_15419;

  corral_source_split_15417:
    assume {:verifier.code 0} true;
    out_$i188 := $M.76;
    goto corral_source_split_15418;

  $bb155:
    assume out_$i182 == 1;
    goto corral_source_split_15417;

  $bb154:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    out_$i182 := $eq.i32(out_$i180, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_15462:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5173} ldv_stop();
    goto corral_source_split_15462;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb156:
    assume {:verifier.code 0} true;
    assume !(out_$i182 == 1);
    goto $bb157;

  $bb159:
    assume {:verifier.code 0} true;
    assume !(out_$i183 == 1);
    goto $bb157;

  $bb181:
    assume !(out_$i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb263:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb201:
    assume !(out_$i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb203:
    assume !(out_$i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_15505:
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_15504:
    assume {:verifier.code 0} true;
    $M.75 := out_$i213;
    call {:si_unique_call 5180} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i213);
    goto corral_source_split_15505;

  corral_source_split_15503:
    assume {:verifier.code 0} true;
    out_$i213 := $add.i32(out_$i212, 1);
    goto corral_source_split_15504;

  corral_source_split_15502:
    assume {:verifier.code 0} true;
    out_$i212 := $M.75;
    goto corral_source_split_15503;

  corral_source_split_15501:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 5179} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_15502;

  $bb202:
    assume out_$i211 == 1;
    goto corral_source_split_15501;

  corral_source_split_15499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  corral_source_split_15498:
    assume {:verifier.code 0} true;
    out_$i211 := $eq.i32(out_$i210, 0);
    goto corral_source_split_15499;

  corral_source_split_15497:
    assume {:verifier.code 0} true;
    out_$i210 := $M.81;
    goto corral_source_split_15498;

  corral_source_split_15496:
    assume {:verifier.code 0} true;
    $M.81 := out_$i209;
    call {:si_unique_call 5178} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i209);
    goto corral_source_split_15497;

  corral_source_split_15495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5177} out_$i209 := rtl8180_probe(out_$p208, in_$p29);
    goto corral_source_split_15496;

  corral_source_split_15494:
    assume {:verifier.code 0} true;
    out_$p208 := $M.66;
    goto corral_source_split_15495;

  $bb200:
    assume out_$i207 == 1;
    goto corral_source_split_15494;

  corral_source_split_15492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  corral_source_split_15491:
    assume {:verifier.code 0} true;
    out_$i207 := $eq.i32(out_$i206, 1);
    goto corral_source_split_15492;

  corral_source_split_15490:
    assume {:verifier.code 0} true;
    out_$i206 := $M.77;
    goto corral_source_split_15491;

  $bb198:
    assume out_$i205 == 1;
    goto corral_source_split_15490;

  $bb194:
    assume out_$i203 == 1;
    assume {:verifier.code 0} true;
    out_$i205 := $eq.i32(out_$i197, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb183:
    assume out_$i198 == 1;
    assume {:verifier.code 0} true;
    out_$i203 := $slt.i32(out_$i197, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb182:
    assume {:verifier.code 0} true;
    out_$i198 := $slt.i32(out_$i197, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  corral_source_split_15464:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5174} out_$i197 := __VERIFIER_nondet_int();
    call {:si_unique_call 5175} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i197);
    call {:si_unique_call 5176} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i197);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb180:
    assume out_$i196 == 1;
    goto corral_source_split_15464;

  corral_source_split_15149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  corral_source_split_15148:
    assume {:verifier.code 0} true;
    out_$i196 := $ne.i32(out_$i195, 0);
    goto corral_source_split_15149;

  corral_source_split_15147:
    assume {:verifier.code 0} true;
    out_$i195 := $M.77;
    goto corral_source_split_15148;

  $bb9:
    assume out_$i46 == 1;
    goto corral_source_split_15147;

  $bb8:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i42, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb213:
    assume !(out_$i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_15521:
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_15520:
    assume {:verifier.code 0} true;
    $M.77 := 3;
    call {:si_unique_call 5183} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(3);
    goto corral_source_split_15521;

  $bb212:
    assume out_$i223 == 1;
    goto corral_source_split_15520;

  corral_source_split_15518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  corral_source_split_15517:
    assume {:verifier.code 0} true;
    out_$i223 := $eq.i32(out_$i222, 0);
    goto corral_source_split_15518;

  corral_source_split_15516:
    assume {:verifier.code 0} true;
    out_$i222 := $M.83;
    goto corral_source_split_15517;

  corral_source_split_15515:
    assume {:verifier.code 0} true;
    $M.83 := out_$i221;
    call {:si_unique_call 5182} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i221);
    goto corral_source_split_15516;

  corral_source_split_15514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5181} out_$i221 := rtl8180_suspend(out_$p218, out_$i220);
    goto corral_source_split_15515;

  corral_source_split_15513:
    assume {:verifier.code 0} true;
    out_$i220 := $load.i32($M.52, out_$p219);
    goto corral_source_split_15514;

  corral_source_split_15512:
    assume {:verifier.code 0} true;
    out_$p219 := $add.ref($add.ref(in_$p5, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_15513;

  corral_source_split_15511:
    assume {:verifier.code 0} true;
    out_$p218 := $M.66;
    goto corral_source_split_15512;

  $bb210:
    assume out_$i217 == 1;
    goto corral_source_split_15511;

  corral_source_split_15509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  corral_source_split_15508:
    assume {:verifier.code 0} true;
    out_$i217 := $eq.i32(out_$i216, 0);
    goto corral_source_split_15509;

  corral_source_split_15507:
    assume {:verifier.code 0} true;
    out_$i216 := $M.82;
    goto corral_source_split_15508;

  $bb207:
    assume out_$i215 == 1;
    goto corral_source_split_15507;

  corral_source_split_15484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  corral_source_split_15483:
    assume {:verifier.code 0} true;
    out_$i215 := $eq.i32(out_$i214, 2);
    goto corral_source_split_15484;

  corral_source_split_15482:
    assume {:verifier.code 0} true;
    out_$i214 := $M.77;
    goto corral_source_split_15483;

  $bb196:
    assume out_$i204 == 1;
    goto corral_source_split_15482;

  $bb195:
    assume !(out_$i203 == 1);
    assume {:verifier.code 0} true;
    out_$i204 := $slt.i32(out_$i197, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb208:
    assume {:verifier.code 0} true;
    assume !(out_$i215 == 1);
    goto $bb209;

  $bb211:
    assume {:verifier.code 0} true;
    assume !(out_$i217 == 1);
    goto $bb209;

  $bb226:
    assume !(out_$i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_15550:
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_15549:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 5191} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_15550;

  corral_source_split_15548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5190} rtl8180_remove(out_$p235);
    goto corral_source_split_15549;

  corral_source_split_15547:
    assume {:verifier.code 0} true;
    out_$p235 := $M.66;
    goto corral_source_split_15548;

  $bb225:
    assume out_$i234 == 1;
    goto corral_source_split_15547;

  corral_source_split_15545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  corral_source_split_15544:
    assume {:verifier.code 0} true;
    out_$i234 := $eq.i32(out_$i233, 5);
    goto corral_source_split_15545;

  $bb224:
    assume {:verifier.code 0} true;
    out_$i233 := $M.77;
    goto corral_source_split_15544;

  $bb223:
    assume !(out_$i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_15542:
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_15541:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 5189} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_15542;

  corral_source_split_15540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5188} rtl8180_remove(out_$p232);
    goto corral_source_split_15541;

  corral_source_split_15539:
    assume {:verifier.code 0} true;
    out_$p232 := $M.66;
    goto corral_source_split_15540;

  $bb222:
    assume out_$i231 == 1;
    goto corral_source_split_15539;

  corral_source_split_15537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  corral_source_split_15536:
    assume {:verifier.code 0} true;
    out_$i231 := $eq.i32(out_$i230, 2);
    goto corral_source_split_15537;

  $bb221:
    assume {:verifier.code 0} true;
    out_$i230 := $M.77;
    goto corral_source_split_15536;

  $bb220:
    assume !(out_$i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  corral_source_split_15534:
    assume {:verifier.code 0} true;
    goto $bb221;

  corral_source_split_15533:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 5187} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_15534;

  corral_source_split_15532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5186} rtl8180_remove(out_$p229);
    goto corral_source_split_15533;

  corral_source_split_15531:
    assume {:verifier.code 0} true;
    out_$p229 := $M.66;
    goto corral_source_split_15532;

  $bb219:
    assume out_$i228 == 1;
    goto corral_source_split_15531;

  corral_source_split_15529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  corral_source_split_15528:
    assume {:verifier.code 0} true;
    out_$i228 := $eq.i32(out_$i227, 3);
    goto corral_source_split_15529;

  $bb218:
    assume {:verifier.code 0} true;
    out_$i227 := $M.77;
    goto corral_source_split_15528;

  $bb217:
    assume !(out_$i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  corral_source_split_15526:
    assume {:verifier.code 0} true;
    goto $bb218;

  corral_source_split_15525:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 5185} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_15526;

  corral_source_split_15524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5184} rtl8180_remove(out_$p226);
    goto corral_source_split_15525;

  corral_source_split_15523:
    assume {:verifier.code 0} true;
    out_$p226 := $M.66;
    goto corral_source_split_15524;

  $bb216:
    assume out_$i225 == 1;
    goto corral_source_split_15523;

  corral_source_split_15488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  corral_source_split_15487:
    assume {:verifier.code 0} true;
    out_$i225 := $eq.i32(out_$i224, 4);
    goto corral_source_split_15488;

  corral_source_split_15486:
    assume {:verifier.code 0} true;
    out_$i224 := $M.77;
    goto corral_source_split_15487;

  $bb197:
    assume !(out_$i204 == 1);
    goto corral_source_split_15486;

  $bb241:
    assume !(out_$i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb243:
    assume !(out_$i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_15586:
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_15585:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 5200} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_15586;

  $bb242:
    assume out_$i253 == 1;
    goto corral_source_split_15585;

  corral_source_split_15583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  corral_source_split_15582:
    assume {:verifier.code 0} true;
    out_$i253 := $eq.i32(out_$i252, 0);
    goto corral_source_split_15583;

  corral_source_split_15581:
    assume {:verifier.code 0} true;
    out_$i252 := $M.84;
    goto corral_source_split_15582;

  corral_source_split_15580:
    assume {:verifier.code 0} true;
    $M.84 := out_$i251;
    call {:si_unique_call 5199} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i251);
    goto corral_source_split_15581;

  corral_source_split_15579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5198} out_$i251 := rtl8180_resume(out_$p250);
    goto corral_source_split_15580;

  corral_source_split_15578:
    assume {:verifier.code 0} true;
    out_$p250 := $M.66;
    goto corral_source_split_15579;

  $bb240:
    assume out_$i249 == 1;
    goto corral_source_split_15578;

  corral_source_split_15576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  corral_source_split_15575:
    assume {:verifier.code 0} true;
    out_$i249 := $eq.i32(out_$i248, 5);
    goto corral_source_split_15576;

  $bb239:
    assume {:verifier.code 0} true;
    out_$i248 := $M.77;
    goto corral_source_split_15575;

  $bb235:
    assume !(out_$i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb237:
    assume !(out_$i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  corral_source_split_15573:
    assume {:verifier.code 0} true;
    goto $bb238;

  corral_source_split_15572:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 5197} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_15573;

  $bb236:
    assume out_$i247 == 1;
    goto corral_source_split_15572;

  corral_source_split_15570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  corral_source_split_15569:
    assume {:verifier.code 0} true;
    out_$i247 := $eq.i32(out_$i246, 0);
    goto corral_source_split_15570;

  corral_source_split_15568:
    assume {:verifier.code 0} true;
    out_$i246 := $M.84;
    goto corral_source_split_15569;

  corral_source_split_15567:
    assume {:verifier.code 0} true;
    $M.84 := out_$i245;
    call {:si_unique_call 5196} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i245);
    goto corral_source_split_15568;

  corral_source_split_15566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5195} out_$i245 := rtl8180_resume(out_$p244);
    goto corral_source_split_15567;

  corral_source_split_15565:
    assume {:verifier.code 0} true;
    out_$p244 := $M.66;
    goto corral_source_split_15566;

  $bb234:
    assume out_$i243 == 1;
    goto corral_source_split_15565;

  corral_source_split_15563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  corral_source_split_15562:
    assume {:verifier.code 0} true;
    out_$i243 := $eq.i32(out_$i242, 3);
    goto corral_source_split_15563;

  $bb233:
    assume {:verifier.code 0} true;
    out_$i242 := $M.77;
    goto corral_source_split_15562;

  $bb229:
    assume !(out_$i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb231:
    assume !(out_$i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_15560:
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_15559:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 5194} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_15560;

  $bb230:
    assume out_$i241 == 1;
    goto corral_source_split_15559;

  corral_source_split_15557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  corral_source_split_15556:
    assume {:verifier.code 0} true;
    out_$i241 := $eq.i32(out_$i240, 0);
    goto corral_source_split_15557;

  corral_source_split_15555:
    assume {:verifier.code 0} true;
    out_$i240 := $M.84;
    goto corral_source_split_15556;

  corral_source_split_15554:
    assume {:verifier.code 0} true;
    $M.84 := out_$i239;
    call {:si_unique_call 5193} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i239);
    goto corral_source_split_15555;

  corral_source_split_15553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5192} out_$i239 := rtl8180_resume(out_$p238);
    goto corral_source_split_15554;

  corral_source_split_15552:
    assume {:verifier.code 0} true;
    out_$p238 := $M.66;
    goto corral_source_split_15553;

  $bb228:
    assume out_$i237 == 1;
    goto corral_source_split_15552;

  corral_source_split_15476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  corral_source_split_15475:
    assume {:verifier.code 0} true;
    out_$i237 := $eq.i32(out_$i236, 4);
    goto corral_source_split_15476;

  corral_source_split_15474:
    assume {:verifier.code 0} true;
    out_$i236 := $M.77;
    goto corral_source_split_15475;

  $bb192:
    assume out_$i202 == 1;
    goto corral_source_split_15474;

  $bb185:
    assume out_$i199 == 1;
    assume {:verifier.code 0} true;
    out_$i202 := $slt.i32(out_$i197, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  $bb184:
    assume !(out_$i198 == 1);
    assume {:verifier.code 0} true;
    out_$i199 := $slt.i32(out_$i197, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb247:
    assume !(out_$i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb249:
    assume !(out_$i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_15595:
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_15594:
    assume {:verifier.code 0} true;
    $M.77 := 4;
    call {:si_unique_call 5203} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(4);
    goto corral_source_split_15595;

  $bb248:
    assume out_$i258 == 1;
    goto corral_source_split_15594;

  corral_source_split_15592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  corral_source_split_15591:
    assume {:verifier.code 0} true;
    out_$i258 := $eq.i32(out_$i257, 0);
    goto corral_source_split_15592;

  corral_source_split_15590:
    assume {:verifier.code 0} true;
    out_$i257 := $M.85;
    goto corral_source_split_15591;

  corral_source_split_15589:
    assume {:verifier.code 0} true;
    $M.85 := out_$i256;
    call {:si_unique_call 5202} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i256);
    goto corral_source_split_15590;

  corral_source_split_15588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5201} out_$i256 := ldv_suspend_late_10();
    goto corral_source_split_15589;

  $bb246:
    assume out_$i255 == 1;
    goto corral_source_split_15588;

  corral_source_split_15480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  corral_source_split_15479:
    assume {:verifier.code 0} true;
    out_$i255 := $eq.i32(out_$i254, 3);
    goto corral_source_split_15480;

  corral_source_split_15478:
    assume {:verifier.code 0} true;
    out_$i254 := $M.77;
    goto corral_source_split_15479;

  $bb193:
    assume !(out_$i202 == 1);
    goto corral_source_split_15478;

  $bb259:
    assume !(out_$i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb261:
    assume !(out_$i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_15616:
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_15615:
    assume {:verifier.code 0} true;
    $M.77 := 5;
    call {:si_unique_call 5209} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(5);
    goto corral_source_split_15616;

  $bb260:
    assume out_$i268 == 1;
    goto corral_source_split_15615;

  corral_source_split_15613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  corral_source_split_15612:
    assume {:verifier.code 0} true;
    out_$i268 := $eq.i32(out_$i267, 0);
    goto corral_source_split_15613;

  corral_source_split_15611:
    assume {:verifier.code 0} true;
    out_$i267 := $M.86;
    goto corral_source_split_15612;

  corral_source_split_15610:
    assume {:verifier.code 0} true;
    $M.86 := out_$i266;
    call {:si_unique_call 5208} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i266);
    goto corral_source_split_15611;

  corral_source_split_15609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5207} out_$i266 := ldv_resume_early_10();
    goto corral_source_split_15610;

  $bb258:
    assume out_$i265 == 1;
    goto corral_source_split_15609;

  corral_source_split_15607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  corral_source_split_15606:
    assume {:verifier.code 0} true;
    out_$i265 := $eq.i32(out_$i264, 3);
    goto corral_source_split_15607;

  $bb257:
    assume {:verifier.code 0} true;
    out_$i264 := $M.77;
    goto corral_source_split_15606;

  $bb253:
    assume !(out_$i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb255:
    assume !(out_$i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_15604:
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_15603:
    assume {:verifier.code 0} true;
    $M.77 := 5;
    call {:si_unique_call 5206} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(5);
    goto corral_source_split_15604;

  $bb254:
    assume out_$i263 == 1;
    goto corral_source_split_15603;

  corral_source_split_15601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_15600:
    assume {:verifier.code 0} true;
    out_$i263 := $eq.i32(out_$i262, 0);
    goto corral_source_split_15601;

  corral_source_split_15599:
    assume {:verifier.code 0} true;
    out_$i262 := $M.86;
    goto corral_source_split_15600;

  corral_source_split_15598:
    assume {:verifier.code 0} true;
    $M.86 := out_$i261;
    call {:si_unique_call 5205} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i261);
    goto corral_source_split_15599;

  corral_source_split_15597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5204} out_$i261 := ldv_resume_early_10();
    goto corral_source_split_15598;

  $bb252:
    assume out_$i260 == 1;
    goto corral_source_split_15597;

  corral_source_split_15468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  corral_source_split_15467:
    assume {:verifier.code 0} true;
    out_$i260 := $eq.i32(out_$i259, 4);
    goto corral_source_split_15468;

  corral_source_split_15466:
    assume {:verifier.code 0} true;
    out_$i259 := $M.77;
    goto corral_source_split_15467;

  $bb187:
    assume out_$i200 == 1;
    goto corral_source_split_15466;

  $bb186:
    assume !(out_$i199 == 1);
    assume {:verifier.code 0} true;
    out_$i200 := $slt.i32(out_$i197, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb274:
    assume !(out_$i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb275;

  corral_source_split_15641:
    assume {:verifier.code 0} true;
    goto $bb275;

  corral_source_split_15640:
    assume {:verifier.code 0} true;
    $M.77 := 5;
    call {:si_unique_call 5217} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(5);
    goto corral_source_split_15641;

  corral_source_split_15639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5216} out_vslice_dummy_var_172 := ldv_shutdown_10();
    goto corral_source_split_15640;

  $bb273:
    assume out_$i279 == 1;
    goto corral_source_split_15639;

  corral_source_split_15637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb273, $bb274;

  corral_source_split_15636:
    assume {:verifier.code 0} true;
    out_$i279 := $eq.i32(out_$i278, 5);
    goto corral_source_split_15637;

  $bb272:
    assume {:verifier.code 0} true;
    out_$i278 := $M.77;
    goto corral_source_split_15636;

  $bb271:
    assume !(out_$i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  corral_source_split_15634:
    assume {:verifier.code 0} true;
    goto $bb272;

  corral_source_split_15633:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 5215} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_15634;

  corral_source_split_15632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5214} out_vslice_dummy_var_171 := ldv_shutdown_10();
    goto corral_source_split_15633;

  $bb270:
    assume out_$i276 == 1;
    goto corral_source_split_15632;

  corral_source_split_15630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb270, $bb271;

  corral_source_split_15629:
    assume {:verifier.code 0} true;
    out_$i276 := $eq.i32(out_$i275, 2);
    goto corral_source_split_15630;

  $bb269:
    assume {:verifier.code 0} true;
    out_$i275 := $M.77;
    goto corral_source_split_15629;

  $bb268:
    assume !(out_$i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  corral_source_split_15627:
    assume {:verifier.code 0} true;
    goto $bb269;

  corral_source_split_15626:
    assume {:verifier.code 0} true;
    $M.77 := 3;
    call {:si_unique_call 5213} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(3);
    goto corral_source_split_15627;

  corral_source_split_15625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5212} out_vslice_dummy_var_170 := ldv_shutdown_10();
    goto corral_source_split_15626;

  $bb267:
    assume out_$i273 == 1;
    goto corral_source_split_15625;

  corral_source_split_15623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  corral_source_split_15622:
    assume {:verifier.code 0} true;
    out_$i273 := $eq.i32(out_$i272, 3);
    goto corral_source_split_15623;

  $bb266:
    assume {:verifier.code 0} true;
    out_$i272 := $M.77;
    goto corral_source_split_15622;

  $bb265:
    assume !(out_$i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  corral_source_split_15620:
    assume {:verifier.code 0} true;
    goto $bb266;

  corral_source_split_15619:
    assume {:verifier.code 0} true;
    $M.77 := 4;
    call {:si_unique_call 5211} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(4);
    goto corral_source_split_15620;

  corral_source_split_15618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5210} out_vslice_dummy_var_169 := ldv_shutdown_10();
    goto corral_source_split_15619;

  $bb264:
    assume out_$i270 == 1;
    goto corral_source_split_15618;

  corral_source_split_15472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264, $bb265;

  corral_source_split_15471:
    assume {:verifier.code 0} true;
    out_$i270 := $eq.i32(out_$i269, 4);
    goto corral_source_split_15472;

  corral_source_split_15470:
    assume {:verifier.code 0} true;
    out_$i269 := $M.77;
    goto corral_source_split_15471;

  $bb189:
    assume out_$i201 == 1;
    goto corral_source_split_15470;

  $bb188:
    assume !(out_$i200 == 1);
    assume {:verifier.code 0} true;
    out_$i201 := $eq.i32(out_$i197, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  corral_source_split_15643:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5218} ldv_stop();
    goto corral_source_split_15643;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb190:
    assume {:verifier.code 0} true;
    assume !(out_$i201 == 1);
    goto $bb191;

  $bb199:
    assume {:verifier.code 0} true;
    assume !(out_$i205 == 1);
    goto $bb191;

  $bb280:
    assume !(out_$i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  corral_source_split_15646:
    assume {:verifier.code 0} true;
    goto $bb281;

  corral_source_split_15645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5219} ldv_main_exported_5();
    goto corral_source_split_15646;

  $bb279:
    assume out_$i282 == 1;
    goto corral_source_split_15645;

  corral_source_split_15153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  corral_source_split_15152:
    assume {:verifier.code 0} true;
    out_$i282 := $ne.i32(out_$i281, 0);
    goto corral_source_split_15153;

  corral_source_split_15151:
    assume {:verifier.code 0} true;
    out_$i281 := $M.78;
    goto corral_source_split_15152;

  $bb11:
    assume out_$i47 == 1;
    goto corral_source_split_15151;

  $bb10:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i42, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_15648:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5220} ldv_stop();
    goto corral_source_split_15648;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i47 == 1);
    goto $bb13;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb13;

  $bb33_dummy:
    call {:si_unique_call 1} out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i86, out_$i87, out_$p88, out_$i89, out_$i91, out_$i92, out_$p93, out_$i95, out_$i96, out_$p97, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$p127, out_$i129, out_$i130, out_$p131, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i140, out_$i141, out_$p142, out_$i143, out_$i144, out_$i145, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$p160, out_$i161, out_$i162, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$p208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$p218, out_$p219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$p226, out_$i227, out_$i228, out_$p229, out_$i230, out_$i231, out_$p232, out_$i233, out_$i234, out_$p235, out_$i236, out_$i237, out_$p238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$p250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i272, out_$i273, out_$i275, out_$i276, out_$i278, out_$i279, out_$i281, out_$i282, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p7, in_$p9, in_$p11, in_$p13, in_$p15, in_$p17, in_$p19, in_$p21, in_$p23, in_$p25, in_$p27, in_$p29, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i86, out_$i87, out_$p88, out_$i89, out_$i91, out_$i92, out_$p93, out_$i95, out_$i96, out_$p97, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i126, out_$p127, out_$i129, out_$i130, out_$p131, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i140, out_$i141, out_$p142, out_$i143, out_$i144, out_$i145, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$p160, out_$i161, out_$i162, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$p208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$p218, out_$p219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$p226, out_$i227, out_$i228, out_$p229, out_$i230, out_$i231, out_$p232, out_$i233, out_$i234, out_$p235, out_$i236, out_$i237, out_$p238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$p250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i272, out_$i273, out_$i275, out_$i276, out_$i278, out_$i279, out_$i281, out_$i282, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$p15: ref, in_$p17: ref, in_$p19: ref, in_$p21: ref, in_$p23: ref, in_$p25: ref, in_$p27: ref, in_$p29: ref, in_$i42: i32, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i32, in_$i74: i1, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$i78: i1, in_$i79: i32, in_$i80: i32, in_$i81: i32, in_$i82: i1, in_$p83: ref, in_$i84: i32, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$i89: i32, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$i102: i32, in_$i103: i64, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i107: i32, in_$i108: i64, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$i120: i32, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i136: i16, in_$i137: i32, in_$i138: i16, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$i143: i16, in_$i144: i32, in_$i145: i16, in_$i147: i32, in_$i148: i1, in_$p149: ref, in_$i150: i32, in_$i151: i32, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$i164: i32, in_$i165: i1, in_$i166: i32, in_$i167: i1, in_$i168: i32, in_$i169: i1, in_$i170: i32, in_$i171: i1, in_$i172: i32, in_$i173: i1, in_$i174: i32, in_$i175: i1, in_$i176: i32, in_$i177: i1, in_$i178: i32, in_$i179: i1, in_$i180: i32, in_$i181: i1, in_$i182: i1, in_$i183: i1, in_$i184: i32, in_$i185: i1, in_$i186: i32, in_$i187: i1, in_$i188: i32, in_$i189: i1, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$i193: i32, in_$i194: i1, in_$i195: i32, in_$i196: i1, in_$i197: i32, in_$i198: i1, in_$i199: i1, in_$i200: i1, in_$i201: i1, in_$i202: i1, in_$i203: i1, in_$i204: i1, in_$i205: i1, in_$i206: i32, in_$i207: i1, in_$p208: ref, in_$i209: i32, in_$i210: i32, in_$i211: i1, in_$i212: i32, in_$i213: i32, in_$i214: i32, in_$i215: i1, in_$i216: i32, in_$i217: i1, in_$p218: ref, in_$p219: ref, in_$i220: i32, in_$i221: i32, in_$i222: i32, in_$i223: i1, in_$i224: i32, in_$i225: i1, in_$p226: ref, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$i230: i32, in_$i231: i1, in_$p232: ref, in_$i233: i32, in_$i234: i1, in_$p235: ref, in_$i236: i32, in_$i237: i1, in_$p238: ref, in_$i239: i32, in_$i240: i32, in_$i241: i1, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$i245: i32, in_$i246: i32, in_$i247: i1, in_$i248: i32, in_$i249: i1, in_$p250: ref, in_$i251: i32, in_$i252: i32, in_$i253: i1, in_$i254: i32, in_$i255: i1, in_$i256: i32, in_$i257: i32, in_$i258: i1, in_$i259: i32, in_$i260: i1, in_$i261: i32, in_$i262: i32, in_$i263: i1, in_$i264: i32, in_$i265: i1, in_$i266: i32, in_$i267: i32, in_$i268: i1, in_$i269: i32, in_$i270: i1, in_$i272: i32, in_$i273: i1, in_$i275: i32, in_$i276: i1, in_$i278: i32, in_$i279: i1, in_$i281: i32, in_$i282: i1, in_vslice_dummy_var_159: i32, in_vslice_dummy_var_160: i32, in_vslice_dummy_var_161: i64, in_vslice_dummy_var_162: i64, in_vslice_dummy_var_163: i64, in_vslice_dummy_var_164: i64, in_vslice_dummy_var_165: i32, in_vslice_dummy_var_166: i32, in_vslice_dummy_var_167: i32, in_vslice_dummy_var_168: i32, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i32, in_vslice_dummy_var_171: i32, in_vslice_dummy_var_172: i32) returns (out_$i42: i32, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i32, out_$i74: i1, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$i78: i1, out_$i79: i32, out_$i80: i32, out_$i81: i32, out_$i82: i1, out_$p83: ref, out_$i84: i32, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$i89: i32, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$i102: i32, out_$i103: i64, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i107: i32, out_$i108: i64, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$i120: i32, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i136: i16, out_$i137: i32, out_$i138: i16, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$i143: i16, out_$i144: i32, out_$i145: i16, out_$i147: i32, out_$i148: i1, out_$p149: ref, out_$i150: i32, out_$i151: i32, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$i164: i32, out_$i165: i1, out_$i166: i32, out_$i167: i1, out_$i168: i32, out_$i169: i1, out_$i170: i32, out_$i171: i1, out_$i172: i32, out_$i173: i1, out_$i174: i32, out_$i175: i1, out_$i176: i32, out_$i177: i1, out_$i178: i32, out_$i179: i1, out_$i180: i32, out_$i181: i1, out_$i182: i1, out_$i183: i1, out_$i184: i32, out_$i185: i1, out_$i186: i32, out_$i187: i1, out_$i188: i32, out_$i189: i1, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$i193: i32, out_$i194: i1, out_$i195: i32, out_$i196: i1, out_$i197: i32, out_$i198: i1, out_$i199: i1, out_$i200: i1, out_$i201: i1, out_$i202: i1, out_$i203: i1, out_$i204: i1, out_$i205: i1, out_$i206: i32, out_$i207: i1, out_$p208: ref, out_$i209: i32, out_$i210: i32, out_$i211: i1, out_$i212: i32, out_$i213: i32, out_$i214: i32, out_$i215: i1, out_$i216: i32, out_$i217: i1, out_$p218: ref, out_$p219: ref, out_$i220: i32, out_$i221: i32, out_$i222: i32, out_$i223: i1, out_$i224: i32, out_$i225: i1, out_$p226: ref, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$i230: i32, out_$i231: i1, out_$p232: ref, out_$i233: i32, out_$i234: i1, out_$p235: ref, out_$i236: i32, out_$i237: i1, out_$p238: ref, out_$i239: i32, out_$i240: i32, out_$i241: i1, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$i245: i32, out_$i246: i32, out_$i247: i1, out_$i248: i32, out_$i249: i1, out_$p250: ref, out_$i251: i32, out_$i252: i32, out_$i253: i1, out_$i254: i32, out_$i255: i1, out_$i256: i32, out_$i257: i32, out_$i258: i1, out_$i259: i32, out_$i260: i1, out_$i261: i32, out_$i262: i32, out_$i263: i1, out_$i264: i32, out_$i265: i1, out_$i266: i32, out_$i267: i32, out_$i268: i1, out_$i269: i32, out_$i270: i1, out_$i272: i32, out_$i273: i1, out_$i275: i32, out_$i276: i1, out_$i278: i32, out_$i279: i1, out_$i281: i32, out_$i282: i1, out_vslice_dummy_var_159: i32, out_vslice_dummy_var_160: i32, out_vslice_dummy_var_161: i64, out_vslice_dummy_var_162: i64, out_vslice_dummy_var_163: i64, out_vslice_dummy_var_164: i64, out_vslice_dummy_var_165: i32, out_vslice_dummy_var_166: i32, out_vslice_dummy_var_167: i32, out_vslice_dummy_var_168: i32, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i32, out_vslice_dummy_var_171: i32, out_vslice_dummy_var_172: i32);
  modifies $M.52, $M.67, $M.75, $M.0, $CurrAddr, $M.8, $M.79, $M.28, $M.36, $M.27, $M.30, $M.37, $M.29, $M.32, $M.38, $M.31, $M.34, $M.39, $M.33, $M.41, $M.51, assertsPassed, $M.20, $M.19, $M.22, $M.21, $M.24, $M.23, $M.26, $M.25, $M.69, $M.70, $M.72, $M.54, $M.74, $M.90, $M.87, $M.91, $M.88, $M.89, $M.92, $M.78, $M.76, $M.80, $M.77, $M.66, $M.81, $M.7, $M.9, $M.10, $M.11, $M.12, $M.13, $M.83, $M.5, $M.6, $M.84, $M.85, $M.86;


