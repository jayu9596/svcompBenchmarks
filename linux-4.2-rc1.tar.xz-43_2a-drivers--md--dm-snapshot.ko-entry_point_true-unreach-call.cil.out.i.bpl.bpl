var $M.0: [ref]i8;

var $M.1: i32;

var $M.2: [ref]i8;

var $M.3: [ref]i32;

var $M.4: [ref]i32;

var $M.6: ref;

var $M.8: ref;

var $M.9: [ref]ref;

var $M.10: [ref]ref;

var $M.11: [ref]ref;

var $M.12: [ref]i64;

var $M.13: ref;

var $M.14: ref;

var $M.15: [ref]i8;

var $M.16: [ref]i64;

var $M.17: [ref]ref;

var $M.18: [ref]i64;

var $M.19: [ref]i64;

var $M.20: [ref]ref;

var $M.21: [ref]i64;

var $M.22: [ref]i64;

var $M.23: i64;

var $M.24: [ref]ref;

var $M.25: [ref]ref;

var $M.26: [ref]ref;

var $M.27: [ref]ref;

var $M.28: [ref]ref;

var $M.29: [ref]ref;

var $M.30: [ref]ref;

var $M.31: [ref]i32;

var $M.32: [ref]i64;

var $M.33: [ref]i64;

var $M.34: [ref]i64;

var $M.35: [ref]i64;

var $M.36: [ref]ref;

var $M.37: [ref]i64;

var $M.38: [ref]i64;

var $M.39: [ref]i8;

var $M.40: [ref]ref;

var $M.41: [ref]i32;

var $M.42: [ref]ref;

var $M.43: ref;

var $M.44: ref;

var $M.45: ref;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: i32;

var $M.51: i32;

var $M.52: i32;

var $M.53: i32;

var $M.54: i32;

var $M.55: i32;

var $M.56: i32;

var $M.57: i32;

var $M.58: i32;

var $M.59: i32;

var $M.60: i32;

var $M.61: i32;

var $M.62: ref;

var $M.63: ref;

var $M.64: ref;

var $M.65: ref;

var $M.66: ref;

var $M.67: ref;

var $M.68: ref;

var $M.69: ref;

var $M.73: [ref]i8;

var $M.74: [ref]i8;

var $M.75: [ref]i8;

var $M.76: [ref]i8;

var $M.77: [ref]i8;

var $M.78: [ref]i8;

var $M.79: [ref]i8;

var $M.80: [ref]i8;

var $M.91: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 582307);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const __ksymtab_dm_snap_origin: ref;

axiom __ksymtab_dm_snap_origin == $sub.ref(0, 2068);

const {:count 15} __kstrtab_dm_snap_origin: ref;

axiom __kstrtab_dm_snap_origin == $sub.ref(0, 3107);

const _persistent_compat_type: ref;

axiom _persistent_compat_type == $sub.ref(0, 4243);

const _persistent_type: ref;

axiom _persistent_type == $sub.ref(0, 5379);

const _transient_compat_type: ref;

axiom _transient_compat_type == $sub.ref(0, 6515);

const _transient_type: ref;

axiom _transient_type == $sub.ref(0, 7651);

const {:count 27} __kstrtab_dm_exception_store_destroy: ref;

axiom __kstrtab_dm_exception_store_destroy == $sub.ref(0, 8702);

const {:count 26} __kstrtab_dm_exception_store_create: ref;

axiom __kstrtab_dm_exception_store_create == $sub.ref(0, 9752);

const {:count 35} __kstrtab_dm_exception_store_type_unregister: ref;

axiom __kstrtab_dm_exception_store_type_unregister == $sub.ref(0, 10811);

const {:count 33} __kstrtab_dm_exception_store_type_register: ref;

axiom __kstrtab_dm_exception_store_type_register == $sub.ref(0, 11868);

const _exception_store_types: ref;

axiom _exception_store_types == $sub.ref(0, 12908);

const _lock: ref;

axiom _lock == $sub.ref(0, 14004);

const merge_target: ref;

axiom merge_target == $sub.ref(0, 15244);

const origin_target: ref;

axiom origin_target == $sub.ref(0, 16484);

const snapshot_target: ref;

axiom snapshot_target == $sub.ref(0, 17724);

const _dm_origins: ref;

axiom _dm_origins == $sub.ref(0, 18756);

const _pending_exceptions_done: ref;

axiom _pending_exceptions_done == $sub.ref(0, 19868);

const _pending_exceptions_done_count: ref;

axiom _pending_exceptions_done_count == $sub.ref(0, 20900);

const _pending_exceptions_done_spinlock: ref;

axiom _pending_exceptions_done_spinlock == $sub.ref(0, 21996);

const exception_cache: ref;

axiom exception_cache == $sub.ref(0, 23028);

const _origins: ref;

axiom _origins == $sub.ref(0, 24060);

const _origins_lock: ref;

axiom _origins_lock == $sub.ref(0, 25244);

const pending_cache: ref;

axiom pending_cache == $sub.ref(0, 26276);

const dm_kcopyd_throttle: ref;

axiom dm_kcopyd_throttle == $sub.ref(0, 27320);

const {:count 15} dm_snapshot_merge_target_name: ref;

axiom dm_snapshot_merge_target_name == $sub.ref(0, 28359);

const {:count 12} __kstrtab_dm_snap_cow: ref;

axiom __kstrtab_dm_snap_cow == $sub.ref(0, 29395);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 30423);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 31451);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 32479);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 33507);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 34535);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 35563);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 36591);

const _persistent_type_group1: ref;

axiom _persistent_type_group1 == $sub.ref(0, 37623);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 38651);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 39679);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 40707);

const _transient_compat_type_group1: ref;

axiom _transient_compat_type_group1 == $sub.ref(0, 41739);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 42767);

const _transient_compat_type_group0: ref;

axiom _transient_compat_type_group0 == $sub.ref(0, 43799);

const _transient_type_group0: ref;

axiom _transient_type_group0 == $sub.ref(0, 44831);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 45859);

const snapshot_target_group1: ref;

axiom snapshot_target_group1 == $sub.ref(0, 46891);

const _persistent_compat_type_group1: ref;

axiom _persistent_compat_type_group1 == $sub.ref(0, 47923);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 48951);

const merge_target_group1: ref;

axiom merge_target_group1 == $sub.ref(0, 49983);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 51011);

const origin_target_group1: ref;

axiom origin_target_group1 == $sub.ref(0, 52043);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 53071);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 54099);

const _transient_type_group1: ref;

axiom _transient_type_group1 == $sub.ref(0, 55131);

const _persistent_compat_type_group0: ref;

axiom _persistent_compat_type_group0 == $sub.ref(0, 56163);

const _persistent_type_group0: ref;

axiom _persistent_type_group0 == $sub.ref(0, 57195);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 58223);

const __ksymtab_dm_exception_store_destroy: ref;

axiom __ksymtab_dm_exception_store_destroy == $sub.ref(0, 59263);

const __ksymtab_dm_exception_store_create: ref;

axiom __ksymtab_dm_exception_store_create == $sub.ref(0, 60303);

const __ksymtab_dm_exception_store_type_unregister: ref;

axiom __ksymtab_dm_exception_store_type_unregister == $sub.ref(0, 61343);

const __ksymtab_dm_exception_store_type_register: ref;

axiom __ksymtab_dm_exception_store_type_register == $sub.ref(0, 62383);

const __ksymtab_dm_snap_cow: ref;

axiom __ksymtab_dm_snap_cow == $sub.ref(0, 63423);

const {:count 39} .str.3: ref;

axiom .str.3 == $sub.ref(0, 64486);

const {:count 34} .str.4: ref;

axiom .str.4 == $sub.ref(0, 65544);

const {:count 2} .str.5: ref;

axiom .str.5 == $sub.ref(0, 66570);

const {:count 2} .str.6: ref;

axiom .str.6 == $sub.ref(0, 67596);

const {:count 30} .str.7: ref;

axiom .str.7 == $sub.ref(0, 68650);

const {:count 36} .str.8: ref;

axiom .str.8 == $sub.ref(0, 69710);

const {:count 40} .str.9: ref;

axiom .str.9 == $sub.ref(0, 70774);

const {:count 19} .str.78: ref;

axiom .str.78 == $sub.ref(0, 71817);

const .str: ref;

axiom .str == $sub.ref(0, 72872);

const {:count 49} .str.1: ref;

axiom .str.1 == $sub.ref(0, 73945);

const {:count 23} .str.2: ref;

axiom .str.2 == $sub.ref(0, 74992);

const {:count 84} .str.75: ref;

axiom .str.75 == $sub.ref(0, 76100);

const {:count 14} .str.76: ref;

axiom .str.76 == $sub.ref(0, 77138);

const {:count 84} .str.77: ref;

axiom .str.77 == $sub.ref(0, 78246);

const _ctype: ref;

axiom _ctype == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 34} .str.42: ref;

axiom .str.42 == $sub.ref(0, 79304);

const {:count 30} .str.43: ref;

axiom .str.43 == $sub.ref(0, 80358);

const {:count 9} .str.60: ref;

axiom .str.60 == $sub.ref(0, 81391);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 8} .str.44: ref;

axiom .str.44 == $sub.ref(0, 82423);

const {:count 13} .str.45: ref;

axiom .str.45 == $sub.ref(0, 83460);

const {:count 15} .str.46: ref;

axiom .str.46 == $sub.ref(0, 84499);

const {:count 8} .str.47: ref;

axiom .str.47 == $sub.ref(0, 85531);

const {:count 6} .str.48: ref;

axiom .str.48 == $sub.ref(0, 86561);

const {:count 199} .str.36: ref;

axiom .str.36 == $sub.ref(0, 87784);

const {:count 61} .str.49: ref;

axiom .str.49 == $sub.ref(0, 88869);

const {:count 79} .str.50: ref;

axiom .str.50 == $sub.ref(0, 89972);

const {:count 61} .str.51: ref;

axiom .str.51 == $sub.ref(0, 91057);

const {:count 62} .str.52: ref;

axiom .str.52 == $sub.ref(0, 92143);

const {:count 80} .str.53: ref;

axiom .str.53 == $sub.ref(0, 93247);

const {:count 103} .str.54: ref;

axiom .str.54 == $sub.ref(0, 94374);

const {:count 103} .str.55: ref;

axiom .str.55 == $sub.ref(0, 95501);

const {:count 114} .str.34: ref;

axiom .str.34 == $sub.ref(0, 96639);

const {:count 74} .str.40: ref;

axiom .str.40 == $sub.ref(0, 97737);

const {:count 81} .str.41: ref;

axiom .str.41 == $sub.ref(0, 98842);

const {:count 21} .str.37: ref;

axiom .str.37 == $sub.ref(0, 99887);

const {:count 87} .str.38: ref;

axiom .str.38 == $sub.ref(0, 100998);

const {:count 91} .str.39: ref;

axiom .str.39 == $sub.ref(0, 102113);

const {:count 58} .str.35: ref;

axiom .str.35 == $sub.ref(0, 103195);

const {:count 29} .str.16: ref;

axiom .str.16 == $sub.ref(0, 104248);

const {:count 43} .str.17: ref;

axiom .str.17 == $sub.ref(0, 105315);

const {:count 25} .str.18: ref;

axiom .str.18 == $sub.ref(0, 106364);

const {:count 22} .str.19: ref;

axiom .str.19 == $sub.ref(0, 107410);

const {:count 32} .str.20: ref;

axiom .str.20 == $sub.ref(0, 108466);

const {:count 9} .str.21: ref;

axiom .str.21 == $sub.ref(0, 109499);

const {:count 22} .str.22: ref;

axiom .str.22 == $sub.ref(0, 110545);

const {:count 36} .str.23: ref;

axiom .str.23 == $sub.ref(0, 111605);

const {:count 31} .str.24: ref;

axiom .str.24 == $sub.ref(0, 112660);

const {:count 50} .str.25: ref;

axiom .str.25 == $sub.ref(0, 113734);

const {:count 33} .str.26: ref;

axiom .str.26 == $sub.ref(0, 114791);

const {:count 41} .str.27: ref;

axiom .str.27 == $sub.ref(0, 115856);

const {:count 33} .str.28: ref;

axiom .str.28 == $sub.ref(0, 116913);

const {:count 56} .str.29: ref;

axiom .str.29 == $sub.ref(0, 117993);

const {:count 19} .str.30: ref;

axiom .str.30 == $sub.ref(0, 119036);

const {:count 57} .str.31: ref;

axiom .str.31 == $sub.ref(0, 120117);

const {:count 31} .str.32: ref;

axiom .str.32 == $sub.ref(0, 121172);

const {:count 58} .str.33: ref;

axiom .str.33 == $sub.ref(0, 122254);

const {:count 16} .str.61: ref;

axiom .str.61 == $sub.ref(0, 123294);

const {:count 3} .str.59: ref;

axiom .str.59 == $sub.ref(0, 124321);

const {:count 38} .str.56: ref;

axiom .str.56 == $sub.ref(0, 125383);

const {:count 41} .str.57: ref;

axiom .str.57 == $sub.ref(0, 126448);

const {:count 25} .str.58: ref;

axiom .str.58 == $sub.ref(0, 127497);

const {:count 6} .str.74: ref;

axiom .str.74 == $sub.ref(0, 128527);

const {:count 10} .str.79: ref;

axiom .str.79 == $sub.ref(0, 129561);

const {:count 8} .str.80: ref;

axiom .str.80 == $sub.ref(0, 130593);

const {:count 11} .str.81: ref;

axiom .str.81 == $sub.ref(0, 131628);

const {:count 8} .str.94: ref;

axiom .str.94 == $sub.ref(0, 132660);

const {:count 58} .str.93: ref;

axiom .str.93 == $sub.ref(0, 133742);

const {:count 12} .str.86: ref;

axiom .str.86 == $sub.ref(0, 134778);

const {:count 210} .str.85: ref;

axiom .str.85 == $sub.ref(0, 136012);

const {:count 58} .str.87: ref;

axiom .str.87 == $sub.ref(0, 137094);

const {:count 63} .str.88: ref;

axiom .str.88 == $sub.ref(0, 138181);

const {:count 80} .str.89: ref;

axiom .str.89 == $sub.ref(0, 139285);

const {:count 66} .str.90: ref;

axiom .str.90 == $sub.ref(0, 140375);

const {:count 105} .str.91: ref;

axiom .str.91 == $sub.ref(0, 141504);

const {:count 73} .str.92: ref;

axiom .str.92 == $sub.ref(0, 142601);

const {:count 10} .str.82: ref;

axiom .str.82 == $sub.ref(0, 143635);

const {:count 8} .str.83: ref;

axiom .str.83 == $sub.ref(0, 144667);

const {:count 83} .str.84: ref;

axiom .str.84 == $sub.ref(0, 145774);

const {:count 66} .str.62: ref;

axiom .str.62 == $sub.ref(0, 146864);

const {:count 63} .str.63: ref;

axiom .str.63 == $sub.ref(0, 147951);

const {:count 61} .str.64: ref;

axiom .str.64 == $sub.ref(0, 149036);

const {:count 60} .str.65: ref;

axiom .str.65 == $sub.ref(0, 150120);

const {:count 53} .str.66: ref;

axiom .str.66 == $sub.ref(0, 151197);

const {:count 13} .str.67: ref;

axiom .str.67 == $sub.ref(0, 152234);

const {:count 61} .str.68: ref;

axiom .str.68 == $sub.ref(0, 153319);

const {:count 26} .str.69: ref;

axiom .str.69 == $sub.ref(0, 154369);

const {:count 59} .str.70: ref;

axiom .str.70 == $sub.ref(0, 155452);

const {:count 67} .str.71: ref;

axiom .str.71 == $sub.ref(0, 156543);

const {:count 70} .str.72: ref;

axiom .str.72 == $sub.ref(0, 157637);

const {:count 15} .str.73: ref;

axiom .str.73 == $sub.ref(0, 158676);

const {:count 95} .str.10: ref;

axiom .str.10 == $sub.ref(0, 159795);

const {:count 95} .str.11: ref;

axiom .str.11 == $sub.ref(0, 160914);

const {:count 89} .str.14: ref;

axiom .str.14 == $sub.ref(0, 162027);

const {:count 99} .str.15: ref;

axiom .str.15 == $sub.ref(0, 163150);

const {:count 87} .str.12: ref;

axiom .str.12 == $sub.ref(0, 164261);

const {:count 97} .str.13: ref;

axiom .str.13 == $sub.ref(0, 165382);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 166414);

const {:count 3} .str.1.204: ref;

axiom .str.1.204 == $sub.ref(0, 167441);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 168479);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 169507);

const dm_snap_origin: ref;

axiom dm_snap_origin == $sub.ref(0, 170539);

procedure dm_snap_origin($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dm_snap_origin($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(160, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 171571);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const dm_snap_cow: ref;

axiom dm_snap_cow == $sub.ref(0, 172603);

procedure dm_snap_cow($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dm_snap_cow($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(168, 1));
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dm_exception_store_type_register: ref;

axiom dm_exception_store_type_register == $sub.ref(0, 173635);

procedure dm_exception_store_type_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation dm_exception_store_type_register($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} spin_lock(_lock);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p3 := __find_exception_store_type($p2);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 17);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} spin_unlock(_lock);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} list_add($p6, _exception_store_types);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 174667);

procedure spin_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} ldv_spin_lock();
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} ldv_spin_lock_5($p0);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    return;
}



const __find_exception_store_type: ref;

axiom __find_exception_store_type == $sub.ref(0, 175699);

procedure __find_exception_store_type($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __find_exception_store_type($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p7: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, _exception_store_types);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 96), 112));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 96), 112)), $mul.ref(96, 1));
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, $p2i.ref.i64(_exception_store_types));
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p13 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p7 := $p3;
    goto $bb4;

  $bb4:
    call $p8, $p9, $i10, $i11, $p12, $p15, $p16, $p17, $p18, $p19, $i20, $i21, $p7 := __find_exception_store_type_loop_$bb4($p0, $p8, $p9, $i10, $i11, $p12, $p15, $p16, $p17, $p18, $p19, $i20, $i21, $p7);
    goto $bb4_last;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $i10 := strcmp($p0, $p9);
    call {:si_unique_call 7} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p12 := $p7;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 112)), $mul.ref(96, 1)), $mul.ref(0, 1));
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref($sub.ref(0, 96), 112));
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p17, $mul.ref($sub.ref(0, 96), 112)), $mul.ref(96, 1));
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, $p2i.ref.i64(_exception_store_types));
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $p7 := $p18;
    goto $bb10_dummy;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_38;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 176731);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} __list_add($p0, $p1, $p3);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 177763);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} ldv_spin_unlock();
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} ldv_spin_unlock_9($p0);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 178795);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $M.1 := 0;
    call {:si_unique_call 11} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_9: ref;

axiom ldv_spin_unlock_9 == $sub.ref(0, 179827);

procedure ldv_spin_unlock_9($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_9($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} _raw_spin_unlock($p2);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 180859);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 181891);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    return;
}



const strcmp: ref;

axiom strcmp == $sub.ref(0, 182923);

procedure strcmp($p0: ref, $p1: ref) returns ($r: i32);



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 183955);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $M.1 := 1;
    call {:si_unique_call 13} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_5: ref;

axiom ldv_spin_lock_5 == $sub.ref(0, 184987);

procedure ldv_spin_lock_5($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_5($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} _raw_spin_lock($p2);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 186019);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    return;
}



const dm_exception_store_type_unregister: ref;

axiom dm_exception_store_type_unregister == $sub.ref(0, 187051);

procedure dm_exception_store_type_unregister($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation dm_exception_store_type_unregister($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} spin_lock(_lock);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $p3 := __find_exception_store_type($p2);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} list_del($p7);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} spin_unlock(_lock);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} spin_unlock(_lock);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 188083);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    return;
}



const dm_exception_store_create: ref;

axiom dm_exception_store_create == $sub.ref(0, 189115);

procedure dm_exception_store_create($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.1, $M.9, $M.10, $M.11, $M.31, $CurrAddr, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35, assertsPassed;



implementation dm_exception_store_create($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i1;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i8;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p22: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i38: i32;
  var $i27: i32;
  var $p44: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} {:cexpr "dm_exception_store_create:arg:argc"} boogie_si_record_i32($i1);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i6 := $sle.i32($i1, 1);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $p9 := kmalloc(40, 208);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p2);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.2, $p14);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $i18 := __toupper($i17);
    call {:si_unique_call 23} {:cexpr "tmp___0"} boogie_si_record_i8($i18);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i19 := $sext.i8.i32($i18);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 80);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i23 := $sext.i8.i32($i18);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 78);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, .str.7);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 22);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p10);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} kfree($p44);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i8 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $p25 := get_type(.str.6);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p22 := $p25;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p22);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p22);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $p3);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p2, $mul.ref(1, 8));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $i36 := set_chunk_size($p10, $p34, $p35);
    call {:si_unique_call 28} {:cexpr "r"} boogie_si_record_i32($i36);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p22, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    call {:si_unique_call 30} $i41 := devirtbounce($p40, $p10, 0, $0.ref);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 31} {:cexpr "r"} boogie_si_record_i32($i41);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p4, 2);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p9);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb22:
    assume $i42 == 1;
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, .str.9);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i38 := $i41;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} put_type($p22);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i27 := $i38;
    goto $bb14;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i37 == 1;
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i38 := $i36;
    goto $bb20;

  $bb15:
    assume $i29 == 1;
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, .str.8);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 22);
    goto $bb14;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $p21 := get_type(.str.5);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p22 := $p21;
    goto $bb10;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, .str.4);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, .str.3);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 190147);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 33} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} ldv_check_alloc_flags($i1);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $p2 := ldv_undef_ptr();
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const __toupper: ref;

axiom __toupper == $sub.ref(0, 191179);

procedure __toupper($i0: i8) returns ($r: i8);
  free requires assertsPassed;



implementation __toupper($i0: i8) returns ($r: i8)
{
  var $i1: i32;
  var $i2: i64;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $i11: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} {:cexpr "__toupper:arg:c"} boogie_si_record_i8($i0);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref(_ctype, $mul.ref(0, 0)), $mul.ref($i2, 1));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 2);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i0);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, 224);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    call {:si_unique_call 37} {:cexpr "c"} boogie_si_record_i8($i10);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const get_type: ref;

axiom get_type == $sub.ref(0, 192211);

procedure get_type($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1;



implementation get_type($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p9: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p15: ref;
  var $i22: i64;
  var $i23: i1;
  var $p4: ref;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $p1 := _get_exception_store_type($p0);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $p5 := kstrdup($p0, 208);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $p1;
    goto $bb8;

  $bb8:
    call $p10, $p11, $i12, $i13, $p14, $p9, $i16, $i17, $p18, $i19, $i20, $p21 := get_type_loop_$bb8($p0, $p5, $p10, $p11, $i12, $i13, $p14, $p9, $i16, $i17, $p18, $i19, $i20, $p21);
    goto $bb8_last;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $i16 := __request_module.i1.ref.ref(1, .str.76, $p5);
    call {:si_unique_call 42} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i17 == 1);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $p18 := _get_exception_store_type($p0);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p21 := $p18;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $p15 := $p21;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p15);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} kfree($p5);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p4 := $p15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb18:
    assume $i23 == 1;
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} vslice_dummy_var_27 := printk.ref.ref(.str.77, $p0);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb16:
    assume $i20 == 1;
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p10 := $p18;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $p11 := strrchr($p5, 45);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p14 := $p10;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 0);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p9 := $p10;
    goto corral_source_split_238_dummy;

  $bb10:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p15 := $p14;
    goto $bb12;

  $bb14:
    assume $i17 == 1;
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p10 := $p9;
    goto $bb9;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} vslice_dummy_var_26 := printk.ref.ref(.str.75, $p0);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p4 := $p1;
    goto $bb3;

  corral_source_split_238_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_223;
}



const set_chunk_size: ref;

axiom set_chunk_size == $sub.ref(0, 193243);

procedure set_chunk_size($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation set_chunk_size($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $i4 := kstrtouint($p1, 10, $p3);
    call {:si_unique_call 49} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.4, $p3);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.4, $p3);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $i13 := dm_exception_store_set_chunk_size($p0, $i12, $p2);
    call {:si_unique_call 51} {:cexpr "tmp___2"} boogie_si_record_i32($i13);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i6 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 0);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, .str.78);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const put_type: ref;

axiom put_type == $sub.ref(0, 194275);

procedure put_type($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation put_type($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} spin_lock(_lock);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(8, 1));
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} module_put($p2);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} spin_unlock(_lock);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 195307);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} free_($p0);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 196339);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 56} $free($p0);
    return;
}



const module_put: ref;

axiom module_put == $sub.ref(0, 197371);

procedure module_put($p0: ref);
  free requires assertsPassed;



implementation module_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    return;
}



const kstrtouint: ref;

axiom kstrtouint == $sub.ref(0, 198403);

procedure kstrtouint($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtouint($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 57} {:cexpr "kstrtouint:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 1} true;
    call {:si_unique_call 58} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 59} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dm_exception_store_set_chunk_size: ref;

axiom dm_exception_store_set_chunk_size == $sub.ref(0, 199435);

procedure dm_exception_store_set_chunk_size($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation dm_exception_store_set_chunk_size($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} {:cexpr "dm_exception_store_set_chunk_size:arg:chunk_size"} boogie_si_record_i32($i1);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i1);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $i4 := is_power_of_2($i3);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 62} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $p12 := dm_snap_cow($p11);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $i15 := bdev_logical_block_size($p14);
    call {:si_unique_call 65} {:cexpr "tmp___2"} boogie_si_record_i16($i15);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i17 := $ashr.i32($i16, 9);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i18 := $urem.i32($i1, $i17);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} $p22 := dm_snap_origin($p21);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $i25 := bdev_logical_block_size($p24);
    call {:si_unique_call 68} {:cexpr "tmp___4"} boogie_si_record_i16($i25);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i27 := $ashr.i32($i26, 9);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i28 := $urem.i32($i1, $i27);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i30 := $ugt.i32($i1, 4194303);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i1);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i1, 1);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $i34 := ffs($i1);
    call {:si_unique_call 70} {:cexpr "tmp___5"} boogie_si_record_i32($i34);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, $sub.i32(0, 1));
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, .str.2);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb6;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, .str.1);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb6;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, .str.1);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb6;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, .str);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const is_power_of_2: ref;

axiom is_power_of_2 == $sub.ref(0, 200467);

procedure is_power_of_2($i0: i64) returns ($r: i1);
  free requires assertsPassed;



implementation is_power_of_2($i0: i64) returns ($r: i1)
{
  var $i1: i1;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} {:cexpr "is_power_of_2:arg:n"} boogie_si_record_i64($i0);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i1 := $ne.i64($i0, 0);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i3 := $sub.i64($i0, 1);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i3, $i0);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    assume {:verifier.code 0} true;
    $i2 := $i5;
    goto $bb3;
}



const bdev_logical_block_size: ref;

axiom bdev_logical_block_size == $sub.ref(0, 201499);

procedure bdev_logical_block_size($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation bdev_logical_block_size($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $i2: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $p1 := bdev_get_queue($p0);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} $i2 := queue_logical_block_size($p1);
    call {:si_unique_call 74} {:cexpr "tmp___0"} boogie_si_record_i16($i2);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ffs: ref;

axiom ffs == $sub.ref(0, 202531);

procedure ffs($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ffs($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} {:cexpr "ffs:arg:x"} boogie_si_record_i32($i0);
    call {:si_unique_call 76} $i1 := devirtbounce.1(0, $i0, $sub.i32(0, 1));
    call {:si_unique_call 77} {:cexpr "r"} boogie_si_record_i32($i1);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const bdev_get_queue: ref;

axiom bdev_get_queue == $sub.ref(0, 203563);

procedure bdev_get_queue($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation bdev_get_queue($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(272, 1));
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1752)), $mul.ref(1672, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const queue_logical_block_size: ref;

axiom queue_logical_block_size == $sub.ref(0, 204595);

procedure queue_logical_block_size($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation queue_logical_block_size($p0: ref) returns ($r: i16)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $i13: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := 512;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4216)), $mul.ref(3488, 1)), $mul.ref(64, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4216)), $mul.ref(3488, 1)), $mul.ref(64, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    call {:si_unique_call 78} {:cexpr "retval"} boogie_si_record_i32($i11);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb6;
}



const _get_exception_store_type: ref;

axiom _get_exception_store_type == $sub.ref(0, 205627);

procedure _get_exception_store_type($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation _get_exception_store_type($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} spin_lock(_lock);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $p1 := __find_exception_store_type($p0);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p12 := $p1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} spin_unlock(_lock);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(8, 1));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $i6 := try_module_get($p5);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 82} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $p11 := $p1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $p12 := $p11;
    goto $bb9;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb8;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb5;
}



const kstrdup: ref;

axiom kstrdup == $sub.ref(0, 206659);

procedure kstrdup($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kstrdup($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} {:cexpr "kstrdup:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $p2 := external_alloc();
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 207691);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 1} true;
    call {:si_unique_call 86} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 87} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 1} true;
    call {:si_unique_call 88} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 89} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref($p0: ref, p.1: i32, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref($p0: ref, p.1: i32, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 1} true;
    call {:si_unique_call 90} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 91} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 1} true;
    call {:si_unique_call 92} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 93} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i64.i64.i64($p0: ref, p.1: i64, p.2: i64, p.3: i64) returns ($r: i32);



procedure printk.ref.i64($p0: ref, p.1: i64) returns ($r: i32);



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 1} true;
    call {:si_unique_call 94} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 95} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const strrchr: ref;

axiom strrchr == $sub.ref(0, 208723);

procedure strrchr($p0: ref, $i1: i32) returns ($r: ref);



const __request_module: ref;

axiom __request_module == $sub.ref(0, 209755);

procedure __request_module.i1.ref.ref($i0: i1, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __request_module.i1.ref.ref($i0: i1, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 96} {:cexpr "__request_module:arg:arg0"} boogie_si_record_i1($i0);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 1} true;
    call {:si_unique_call 97} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 98} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 210787);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 1} true;
    call {:si_unique_call 99} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 100} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const try_module_get: ref;

axiom try_module_get == $sub.ref(0, 211819);

procedure try_module_get($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation try_module_get($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 1} true;
    call {:si_unique_call 101} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 102} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 212851);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i1 := $M.1;
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} ldv_error();
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 213883);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 1} true;
    call {:si_unique_call 105} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 106} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 214915);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 107} __VERIFIER_error();
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const dm_exception_store_destroy: ref;

axiom dm_exception_store_destroy == $sub.ref(0, 215947);

procedure dm_exception_store_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.9, $M.10, $M.0, $M.11, $M.1, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr, $M.31, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35, assertsPassed;



implementation dm_exception_store_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    call {:si_unique_call 108} devirtbounce.2($p4, $p0);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} put_type($p6);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} kfree($p7);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const snapshot_ctr: ref;

axiom snapshot_ctr == $sub.ref(0, 216979);

procedure snapshot_ctr($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.9, $M.10, $M.11, $M.1, $M.31, $CurrAddr, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35, assertsPassed;



implementation snapshot_ctr($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i1;
  var $i77: i8;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $i83: i32;
  var $p84: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $i92: i1;
  var $p93: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p101: ref;
  var $p102: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $i111: i1;
  var $i112: i1;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i130: i1;
  var $p131: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i32;
  var $i143: i64;
  var $i144: i32;
  var $i145: i1;
  var $i129: i32;
  var $i110: i32;
  var $p146: ref;
  var $p147: ref;
  var $i94: i32;
  var $p148: ref;
  var $p149: ref;
  var $i85: i32;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $i70: i32;
  var $p154: ref;
  var $p155: ref;
  var $i47: i32;
  var $p156: ref;
  var $p157: ref;
  var $i42: i32;
  var $p158: ref;
  var $p159: ref;
  var $i30: i32;
  var $p160: ref;
  var $i9: i32;
  var $i116: i32;
  var $p161: ref;
  var $p162: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p220: ref;
  var vslice_dummy_var_28: ref;
  var vslice_dummy_var_29: ref;
  var vslice_dummy_var_30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 115} {:cexpr "snapshot_ctr:arg:argc"} boogie_si_record_i32($i1);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i1, 4);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, $p2i.ref.i64(dm_snapshot_merge_target_name));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16, $i17 := 1, 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $p18 := kmalloc(616, 208);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p2);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p2, $mul.ref(1, 8));
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i1, 1);
    call {:si_unique_call 117} {:cexpr "argc"} boogie_si_record_i32($i25);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(160, 1));
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $i27 := dm_get_device($p0, $p23, $i17, $p26);
    call {:si_unique_call 119} {:cexpr "r"} boogie_si_record_i32($i27);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p24);
    $i32 := $add.i64(1, 1);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p2, $mul.ref($i32, 8));
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32($i25, 1);
    call {:si_unique_call 121} {:cexpr "argc"} boogie_si_record_i32($i34);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $i37 := dm_table_get_mode($p36);
    call {:si_unique_call 123} {:cexpr "tmp___0"} boogie_si_record_i32($i37);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(168, 1));
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} $i39 := dm_get_device($p0, $p31, $i37, $p38);
    call {:si_unique_call 125} {:cexpr "r"} boogie_si_record_i32($i39);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $i44 := dm_exception_store_create($p0, $i34, $p33, $p19, $p3, $p43);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 128} {:cexpr "r"} boogie_si_record_i32($i44);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(176, 1));
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $p0);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 1);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(204, 1));
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 0);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} atomic_set($p51, 0);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(216, 1));
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p52, 0);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(224, 1));
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p53, 0);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(232, 1));
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} INIT_LIST_HEAD($p54);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} __init_rwsem($p55, .str.21, $p4);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(184, 1));
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} INIT_LIST_HEAD($p56);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(288, 1));
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} vslice_dummy_var_28 := spinlock_check($p57);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(288, 1)), $mul.ref(0, 1));
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} __raw_spin_lock_init($p61, .str.22, $p5);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(576, 1));
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p62, 0);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(596, 1));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, 0);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(584, 1));
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p64, 0);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(592, 1));
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, 0);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(600, 1));
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} bio_list_init($p66);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $i67 := init_hash_tables($p19);
    call {:si_unique_call 138} {:cexpr "tmp___1"} boogie_si_record_i32($i67);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $p71 := dm_kcopyd_client_create(dm_kcopyd_throttle);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(568, 1));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p72, $p71);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(568, 1));
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $i76 := IS_ERR($p75);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i77 := $zext.i1.i8($i76);
    call {:si_unique_call 142} {:cexpr "tmp___3"} boogie_si_record_i8($i77);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i8.i1($i77);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p86 := $M.6;
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $p87 := mempool_create_slab_pool(256, $p86);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(248, 1));
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p88, $p87);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(248, 1));
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p90);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i92 := $eq.i64($i91, 0);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(432, 1));
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p96, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p97, $0.ref);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(432, 1));
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p162 := $bitcast.ref.ref($p161);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p162, $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p164, $0.ref);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(432, 1));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p166 := $bitcast.ref.ref($p165);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p166, $mul.ref(2, 8)), $mul.ref(0, 1));
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p168, $0.ref);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(432, 1));
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p170 := $bitcast.ref.ref($p169);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p170, $mul.ref(3, 8)), $mul.ref(0, 1));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p172, $0.ref);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(432, 1));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p174 := $bitcast.ref.ref($p173);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p174, $mul.ref(4, 8)), $mul.ref(0, 1));
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p176, $0.ref);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(432, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p177);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p178, $mul.ref(5, 8)), $mul.ref(0, 1));
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p180, $0.ref);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(432, 1));
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p182 := $bitcast.ref.ref($p181);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p182, $mul.ref(6, 8)), $mul.ref(0, 1));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p184, $0.ref);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(432, 1));
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p186 := $bitcast.ref.ref($p185);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p186, $mul.ref(7, 8)), $mul.ref(0, 1));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p188, $0.ref);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(432, 1));
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $p190 := $bitcast.ref.ref($p189);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p190, $mul.ref(8, 8)), $mul.ref(0, 1));
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p192, $0.ref);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(432, 1));
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p194 := $bitcast.ref.ref($p193);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p194, $mul.ref(9, 8)), $mul.ref(0, 1));
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p196, $0.ref);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(432, 1));
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p197);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p198, $mul.ref(10, 8)), $mul.ref(0, 1));
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p200, $0.ref);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(432, 1));
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $p202 := $bitcast.ref.ref($p201);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p202, $mul.ref(11, 8)), $mul.ref(0, 1));
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p204, $0.ref);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(432, 1));
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p206 := $bitcast.ref.ref($p205);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p206, $mul.ref(12, 8)), $mul.ref(0, 1));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p208, $0.ref);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(432, 1));
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p210 := $bitcast.ref.ref($p209);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p210, $mul.ref(13, 8)), $mul.ref(0, 1));
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p212, $0.ref);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(432, 1));
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p214 := $bitcast.ref.ref($p213);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p214, $mul.ref(14, 8)), $mul.ref(0, 1));
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p216, $0.ref);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(432, 1));
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p218 := $bitcast.ref.ref($p217);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p218, $mul.ref(15, 8)), $mul.ref(0, 1));
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p220, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(360, 1));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} vslice_dummy_var_29 := spinlock_check($p98);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} __raw_spin_lock_init($p102, .str.26, $p6);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p104, $p18);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(36, 1));
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p105, $i16);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, 24);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $i107 := register_snapshot($p19);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 153} {:cexpr "r"} boogie_si_record_i32($i107);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, $sub.i32(0, 12));
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i108 == 1);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i111 := $slt.i32($i107, 0);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i112 := $sgt.i32($i107, 0);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p118, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p120, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.0, $p123);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p19);
    call {:si_unique_call 155} $i126 := devirtbounce.3($p122, $p124, dm_add_exception, $p125);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 156} {:cexpr "r"} boogie_si_record_i32($i126);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i127 := $slt.i32($i126, 0);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i127 == 1);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i130 := $sgt.i32($i126, 0);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p134, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.0, $p135);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i136, 0);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.0, $p139);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p140, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i143 := $zext.i32.i64($i142);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $i144 := dm_set_target_max_io_len($p0, $i143);
    call {:si_unique_call 160} {:cexpr "r"} boogie_si_record_i32($i144);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i145 := $ne.i32($i144, 0);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i116 := 0;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $r := $i116;
    return;

  $bb60:
    assume $i145 == 1;
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i129 := $i144;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} unregister_snapshot($p19);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i110 := $i129;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(248, 1));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} mempool_destroy($p147);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i94 := $i110;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(568, 1));
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} dm_kcopyd_client_destroy($p149);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i85 := $i94;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(256, 1));
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p151 := $M.6;
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} dm_exception_table_exit($p150, $p151);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(272, 1));
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p153 := $M.8;
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} dm_exception_table_exit($p152, $p153);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $i70 := $i85;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.0, $p154);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} dm_exception_store_destroy($p155);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i47 := $i70;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(168, 1));
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p156);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} dm_put_device($p0, $p157);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i42 := $i47;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(160, 1));
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.0, $p158);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} dm_put_device($p0, $p159);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i30 := $i42;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $p160 := $bitcast.ref.ref($p19);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} kfree($p160);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $i9 := $i30;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i116 := $i9;
    goto $bb48;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb57:
    assume $i137 == 1;
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p138, .str.30);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i129 := $i126;
    goto $bb52;

  $bb53:
    assume $i130 == 1;
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p131, 0);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} vslice_dummy_var_30 := printk.ref(.str.29);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb50:
    assume $i127 == 1;
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p128, .str.28);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i129 := $i126;
    goto $bb52;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i112 == 1;
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p114, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p115, 0);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i116 := 0;
    goto $bb48;

  $bb42:
    assume $i111 == 1;
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i110 := $i107;
    goto $bb41;

  $bb39:
    assume $i108 == 1;
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p109, .str.27);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i110 := $i107;
    goto $bb41;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i92 == 1;
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p93, .str.25);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i94 := $sub.i32(0, 12);
    goto $bb33;

  $bb27:
    assume $i78 == 1;
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(568, 1));
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $i82 := PTR_ERR($p81);
    call {:si_unique_call 144} {:cexpr "tmp___2"} boogie_si_record_i64($i82);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i64.i32($i82);
    call {:si_unique_call 145} {:cexpr "r"} boogie_si_record_i32($i83);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p84, .str.24);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i85 := $i83;
    goto $bb29;

  $bb23:
    assume $i68 == 1;
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p69, .str.23);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i70 := $sub.i32(0, 12);
    goto $bb25;

  $bb19:
    assume $i45 == 1;
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p46, .str.20);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32(0, 22);
    goto $bb21;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i40 == 1;
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, .str.19);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i42 := $i39;
    goto $bb17;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, .str.18);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i30 := $i27;
    goto $bb13;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, .str.17);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i16, $i17 := 2, 2;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, .str.16);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;
}



const snapshot_dtr: ref;

axiom snapshot_dtr == $sub.ref(0, 218011);

procedure snapshot_dtr($p0: ref);
  free requires assertsPassed;
  modifies $M.9, $M.10, $M.0, $M.11, $M.1, $CurrAddr, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.31, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35, assertsPassed;



implementation snapshot_dtr($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $i35: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p1, $0.ref);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p2, $0.ref);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} down_read(_origins_lock);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} vslice_dummy_var_31 := __find_snapshots_sharing_cow($p5, $p1, $p2, $0.ref);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.9, $p1);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} up_read(_origins_lock);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, $p2i.ref.i64(dm_snapshot_merge_target_name));
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} unregister_snapshot($p5);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $i31 := atomic_read($p30);
    call {:si_unique_call 172} {:cexpr "tmp"} boogie_si_record_i32($i31);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    call {:si_unique_call 176} devirtbounce.4(0);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb20;

  $bb20:
    call $p36, $p37, $i38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i35 := snapshot_dtr_loop_$bb20($p5, $p36, $p37, $i38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i35);
    goto $bb20_last;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(432, 1));
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i35);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p37, $mul.ref($i38, 8));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $i40 := hlist_empty($p39);
    call {:si_unique_call 178} {:cexpr "tmp___0"} boogie_si_record_i32($i40);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i41);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $i44 := ldv__builtin_expect($i43, 0);
    call {:si_unique_call 180} {:cexpr "tmp___1"} boogie_si_record_i64($i44);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i35, 1);
    call {:si_unique_call 182} {:cexpr "i"} boogie_si_record_i32($i46);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i47 := $sle.i32($i46, 15);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} __free_exceptions($p5);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(248, 1));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} mempool_destroy($p49);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} dm_exception_store_destroy($p51);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(168, 1));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} dm_put_device($p0, $p53);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(160, 1));
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} dm_put_device($p0, $p55);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p5);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} kfree($p56);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i35 := $i46;
    goto $bb26_dummy;

  $bb22:
    assume $i45 == 1;
    call {:si_unique_call 181} devirtbounce.5(0, .str.36, 1347, 12);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    call snapshot_dtr_loop_$bb24();
    goto $bb24_last;

  $bb12:
    assume $i32 == 1;
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    call $i33, $i34 := snapshot_dtr_loop_$bb15($p30, $i33, $i34);
    goto $bb15_last;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} msleep(1);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i33 := atomic_read($p30);
    call {:si_unique_call 175} {:cexpr "tmp"} boogie_si_record_i32($i33);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb17_dummy;

  $bb9:
    assume $i29 == 1;
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} stop_merge($p5);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.10, $p2);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p5);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.9, $p1);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i13, $i15);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.10, $p2);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} down_write($p18);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.10, $p2);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 0);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.10, $p2);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} up_write($p22);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} vslice_dummy_var_32 := printk.ref(.str.35);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb24_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    goto $bb24_dummy;

  $bb26_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_880;

  $bb17_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto $bb16;
}



const snapshot_map: ref;

axiom snapshot_map == $sub.ref(0, 219043);

procedure snapshot_map($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.20, $M.21, $M.22, $M.17, $M.18, $M.19, $M.9, $M.10, $M.11, $M.16, $CurrAddr, assertsPassed, $M.31, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35;



implementation snapshot_map($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p59: ref;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i76: i32;
  var $i28: i32;
  var $p82: ref;
  var $i69: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} init_tracked_chunk($p1);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i7 := $and.i64($i6, 8192);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $i20 := sector_to_chunk($p16, $i19);
    call {:si_unique_call 191} {:cexpr "chunk"} boogie_si_record_i64($i20);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} down_write($p24);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(272, 1));
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $p30 := dm_lookup_exception($p29, $i20);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i35 := $and.i64($i34, 16385);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 1);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i36 == 1);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(160, 1));
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p81, $p80);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} track_chunk($p4, $p1, $i20);
    assume {:verifier.code 0} true;
    $i76 := 1;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i28 := $i76;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} up_write($p82);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i69 := $i28;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i14 := $i69;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb15:
    assume $i36 == 1;
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} $p37 := __lookup_pending_exception($p4, $i20);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i38, 0);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $p53 := $p37;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} remap_exception($p4, $p54, $p1, $i20);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p53, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 0);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p53, $mul.ref(0, 128)), $mul.ref(48, 1));
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} bio_list_add($p70, $p1);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p53, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 0);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i76 := 0;
    goto $bb39;

  $bb36:
    assume $i73 == 1;
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p53, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, 1);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} up_write($p75);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} start_copy($p53);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i69 := 0;
    goto $bb34;

  $bb29:
    assume $i57 == 1;
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i65 := $shl.i32($i64, 9);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i60, $i65);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb31;

  $bb32:
    assume $i66 == 1;
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p53, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, 1);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} up_write($p68);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} start_full_bio($p53, $p1);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i69 := 0;
    goto $bb34;

  $bb17:
    assume $i39 == 1;
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} up_write($p40);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $p41 := alloc_pending_exception($p4);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} down_write($p42);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(272, 1));
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $p47 := dm_lookup_exception($p46, $i20);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $p50 := __find_pending_exception($p4, $p41, $i20);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i52 := $eq.i64($i51, 0);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p53 := $p50;
    goto $bb28;

  $bb25:
    assume $i52 == 1;
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} __invalidate_snapshot($p4, $sub.i32(0, 12));
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 5);
    goto $bb10;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i49 == 1;
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} free_pending_exception($p41);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} remap_exception($p4, $p47, $p1, $i20);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i28 := 1;
    goto $bb10;

  $bb19:
    assume $i45 == 1;
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} free_pending_exception($p41);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 5);
    goto $bb10;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i32 == 1;
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} remap_exception($p4, $p30, $p1, $i20);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i28 := 1;
    goto $bb10;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 5);
    goto $bb10;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 5);
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(168, 1));
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p12);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb3;
}



const snapshot_end_io: ref;

axiom snapshot_end_io == $sub.ref(0, 220075);

procedure snapshot_end_io($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0;



implementation snapshot_end_io($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} {:cexpr "snapshot_end_io:arg:error"} boogie_si_record_i32($i2);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $i6 := is_bio_tracked($p1);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 215} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} stop_tracking_chunk($p5, $p1);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snapshot_preresume: ref;

axiom snapshot_preresume == $sub.ref(0, 221107);

procedure snapshot_preresume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.10, $M.11, $CurrAddr;



implementation snapshot_preresume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i27: i32;
  var $i20: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p1, $0.ref);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p2, $0.ref);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} down_read(_origins_lock);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} vslice_dummy_var_33 := __find_snapshots_sharing_cow($p5, $p1, $p2, $0.ref);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.9, $p1);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} up_read(_origins_lock);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.10, $p2);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.9, $p1);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} down_read($p14);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p5);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.9, $p1);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i15, $i17);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.9, $p1);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 616)), $mul.ref(176, 1));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $i24 := dm_suspended($p23);
    call {:si_unique_call 224} {:cexpr "tmp"} boogie_si_record_i32($i24);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i20 := $i27;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.9, $p1);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} up_read($p29);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i30 := $i20;
    goto $bb12;

  $bb9:
    assume $i25 == 1;
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} vslice_dummy_var_35 := printk.ref(.str.39);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 22);
    goto $bb11;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} vslice_dummy_var_34 := printk.ref(.str.38);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 22);
    goto $bb8;
}



const snapshot_resume: ref;

axiom snapshot_resume == $sub.ref(0, 222139);

procedure snapshot_resume($p0: ref);
  free requires assertsPassed;
  modifies $M.9, $M.10, $M.11, $M.0, $CurrAddr, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.31, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35, $M.1, assertsPassed;



implementation snapshot_resume($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i8;
  var $i58: i8;
  var $i59: i8;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p1, $0.ref);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p2, $0.ref);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p3, $0.ref);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} down_read(_origins_lock);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 616)), $mul.ref(160, 1));
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $p11 := __lookup_dm_origin($p10);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $p19 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $p33 := $p19;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $p36 := dm_table_get_md($p35);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p33);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i37, $i38);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $p40 := $p33;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $p46 := $p40;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} up_read(_origins_lock);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} down_read(_origins_lock);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} vslice_dummy_var_37 := __find_snapshots_sharing_cow($p6, $p1, $p2, $0.ref);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.9, $p1);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} up_read(_origins_lock);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p46);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} reregister_snapshot($p6);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p6, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} down_write($p81);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p6, $mul.ref(0, 616)), $mul.ref(204, 1));
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, 1);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p6, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} up_write($p83);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    return;

  $bb34:
    assume $i78 == 1;
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i8.i1($i59);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} dm_internal_resume_fast($p46);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} dm_put($p46);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i79 == 1;
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.11, $p3);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} start_merge($p80);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i63 == 1;
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.10, $p2);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb30;

  $bb31:
    assume $i66 == 1;
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.9, $p1);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} down_write($p68);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.10, $p2);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} down_write_nested($p70, 1);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.9, $p1);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.10, $p2);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} __handover_exceptions($p71, $p72);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.10, $p2);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} up_write($p74);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.9, $p1);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} up_write($p76);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb19:
    assume $i48 == 1;
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} dm_internal_suspend_fast($p46);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.11, $p3);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i59 := $i58;
    goto $bb27;

  $bb21:
    assume $i51 == 1;
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.11, $p3);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 616)), $mul.ref(576, 1));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $i54 := constant_test_bit(0, $p53);
    call {:si_unique_call 242} {:cexpr "tmp___1"} boogie_si_record_i32($i54);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i58 := $i57;
    goto $bb26;

  $bb23:
    assume $i55 == 1;
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.11, $p3);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} stop_merge($p56);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i57 := 1;
    goto $bb25;

  $bb13:
    assume $i42 == 1;
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} $i43 := dm_hold($p40);
    call {:si_unique_call 238} {:cexpr "tmp___0"} boogie_si_record_i32($i43);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $p45 := $p40;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p46 := $p45;
    goto $bb18;

  $bb15:
    assume $i44 == 1;
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $p45 := $0.ref;
    goto $bb17;

  $bb10:
    assume $i39 == 1;
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p40 := $0.ref;
    goto $bb12;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} vslice_dummy_var_36 := __find_snapshots_sharing_cow($p6, $0.ref, $0.ref, $p3);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.11, $p3);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $p32 := $p19;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $p33 := $p32;
    goto $bb9;

  $bb6:
    assume $i25 == 1;
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.11, $p3);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 616)), $mul.ref(176, 1));
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $p31 := dm_table_get_md($p30);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p32 := $p31;
    goto $bb8;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} $p18 := dm_table_get_md($p17);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p19 := $p18;
    goto $bb3;
}



const snapshot_status: ref;

axiom snapshot_status == $sub.ref(0, 223171);

procedure snapshot_status($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32);
  free requires assertsPassed;
  modifies $M.0, $M.32, $M.33, $CurrAddr, $M.36, $M.37, $M.38, $M.9, $M.10, $M.11, $M.23, $M.1, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.31, $M.41, $M.34, $M.35, assertsPassed;



implementation snapshot_status($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i1;
  var $i50: i64;
  var $p51: ref;
  var $i52: i32;
  var $i53: i64;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $i57: i32;
  var $i58: i1;
  var $i59: i64;
  var $p60: ref;
  var $i61: i32;
  var $i62: i64;
  var $i63: i32;
  var $p64: ref;
  var $i65: i1;
  var $i66: i64;
  var $p67: ref;
  var $i68: i32;
  var $i69: i64;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $p90: ref;
  var $i91: i32;
  var vslice_dummy_var_38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 261} {:cexpr "snapshot_status:arg:type"} boogie_si_record_i32($i1);
    call {:si_unique_call 262} {:cexpr "snapshot_status:arg:status_flags"} boogie_si_record_i32($i2);
    call {:si_unique_call 263} {:cexpr "snapshot_status:arg:maxlen"} boogie_si_record_i32($i4);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i65 := $ult.i32(0, $i4);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i79 := 0;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i80 := $add.i32($i79, 0);
    call {:si_unique_call 277} {:cexpr "sz"} boogie_si_record_i32($i80);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p10, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p10, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i89 := $zext.i32.i64($i80);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p3, $mul.ref($i89, 1));
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i91 := $sub.i32($i4, $i80);
    call {:si_unique_call 278} vslice_dummy_var_38 := devirtbounce.7($p86, $p88, $i1, $p90, $i91);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb31:
    assume $i65 == 1;
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i66 := $zext.i32.i64(0);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p3, $mul.ref($i66, 1));
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i68 := $sub.i32($i4, 0);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i69 := $zext.i32.i64($i68);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p10, $mul.ref(0, 616)), $mul.ref(160, 1));
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p10, $mul.ref(0, 616)), $mul.ref(168, 1));
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $i78 := scnprintf.ref.i64.ref.ref.ref($p67, $i69, .str.48, $p73, $p77);
    call {:si_unique_call 276} {:cexpr "tmp___7"} boogie_si_record_i32($i78);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i79 := $i78;
    goto $bb33;

  $bb2:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb6;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p10, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} down_write($p14);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p10, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p10, $mul.ref(0, 616)), $mul.ref(596, 1));
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i26 == 1);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p10, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i40 == 1);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i58 := $ult.i32(0, $i4);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p10, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} up_write($p64);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i58 == 1;
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i59 := $zext.i32.i64(0);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p3, $mul.ref($i59, 1));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32($i4, 0);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i62 := $zext.i32.i64($i61);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $i63 := scnprintf.ref.i64.ref($p60, $i62, .str.47);
    call {:si_unique_call 274} {:cexpr "tmp___5"} boogie_si_record_i32($i63);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb21:
    assume $i40 == 1;
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p10, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p10, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    call {:si_unique_call 270} devirtbounce.6($p46, $p48, $p5, $p6, $p7);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i49 := $ult.i32(0, $i4);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i49 == 1;
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i50 := $zext.i32.i64(0);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p3, $mul.ref($i50, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32($i4, 0);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i53 := $zext.i32.i64($i52);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.0, $p6);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.12, $p5);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.0, $p7);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $i57 := scnprintf.ref.i64.ref.i64.i64.i64($p51, $i53, .str.46, $i54, $i55, $i56);
    call {:si_unique_call 272} {:cexpr "tmp___3"} boogie_si_record_i32($i57);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i26 == 1;
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i27 := $ult.i32(0, $i4);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i27 == 1;
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64(0);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p3, $mul.ref($i28, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32($i4, 0);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i30);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $i32 := scnprintf.ref.i64.ref($p29, $i31, .str.45);
    call {:si_unique_call 269} {:cexpr "tmp___1"} boogie_si_record_i32($i32);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i18 := $ult.i32(0, $i4);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64(0);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p3, $mul.ref($i19, 1));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i4, 0);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $i23 := scnprintf.ref.i64.ref($p20, $i22, .str.44);
    call {:si_unique_call 266} {:cexpr "tmp"} boogie_si_record_i32($i23);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const snapshot_iterate_devices: ref;

axiom snapshot_iterate_devices == $sub.ref(0, 224203);

procedure snapshot_iterate_devices($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snapshot_iterate_devices($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(160, 1));
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    call {:si_unique_call 279} $i10 := devirtbounce.8($p1, $p0, $p7, 0, $i9, $p2);
    call {:si_unique_call 280} {:cexpr "r"} boogie_si_record_i32($i10);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i20 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(168, 1));
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $i16 := get_dev_size($p15);
    call {:si_unique_call 282} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(168, 1));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    call {:si_unique_call 283} $i19 := devirtbounce.8($p1, $p0, $p18, 0, $i16, $p2);
    call {:si_unique_call 284} {:cexpr "r"} boogie_si_record_i32($i19);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb3;
}



const get_dev_size: ref;

axiom get_dev_size == $sub.ref(0, 225235);

procedure get_dev_size($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation get_dev_size($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(8, 1));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $i3 := i_size_read($p2);
    call {:si_unique_call 286} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i4 := $ashr.i64($i3, 9);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const i_size_read: ref;

axiom i_size_read == $sub.ref(0, 226267);

procedure i_size_read($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation i_size_read($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1000)), $mul.ref(80, 1));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const down_write: ref;

axiom down_write == $sub.ref(0, 227299);

procedure down_write($p0: ref);
  free requires assertsPassed;



implementation down_write($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    return;
}



const scnprintf: ref;

axiom scnprintf == $sub.ref(0, 228331);

procedure scnprintf.ref.i64.ref.i64($p0: ref, $i1: i64, $p2: ref, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.i64($p0: ref, $i1: i64, $p2: ref, p.3: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 287} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 1} true;
    call {:si_unique_call 288} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 289} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 290} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 1} true;
    call {:si_unique_call 291} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 292} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb2:
    assume {:verifier.code 1} true;
    call {:si_unique_call 293} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 1} true;
    call {:si_unique_call 294} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 295} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.i64.i64.i64($p0: ref, $i1: i64, $p2: ref, p.3: i64, p.4: i64, p.5: i64) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.i64.i64.i64($p0: ref, $i1: i64, $p2: ref, p.3: i64, p.4: i64, p.5: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb3:
    assume {:verifier.code 1} true;
    call {:si_unique_call 296} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 1} true;
    call {:si_unique_call 297} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 298} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const up_write: ref;

axiom up_write == $sub.ref(0, 229363);

procedure up_write($p0: ref);
  free requires assertsPassed;



implementation up_write($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    return;
}



const down_read: ref;

axiom down_read == $sub.ref(0, 230395);

procedure down_read($p0: ref);
  free requires assertsPassed;



implementation down_read($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    return;
}



const __lookup_dm_origin: ref;

axiom __lookup_dm_origin == $sub.ref(0, 231427);

procedure __lookup_dm_origin($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __lookup_dm_origin($p0: ref) returns ($r: ref)
{
  var $i1: i32;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p13: ref;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $i1 := origin_hash($p0);
    call {:si_unique_call 300} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p2 := $M.13;
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i1);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p2, $mul.ref($i3, 16));
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref($i3, 16)), $mul.ref(0, 1));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p4);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i10, $i11);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p21 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $r := $p21;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p13 := $p8;
    goto $bb4;

  $bb4:
    call $p14, $p15, $p16, $p17, $i18, $i19, $p20, $p23, $p24, $p25, $p26, $p27, $i28, $i29, $p13 := __lookup_dm_origin_loop_$bb4($p0, $i11, $p14, $p15, $p16, $p17, $i18, $i19, $p20, $p23, $p24, $p25, $p26, $p27, $i28, $i29, $p13);
    goto $bb4_last;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} $i18 := bdev_equal($p17, $p0);
    call {:si_unique_call 302} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p20 := $p13;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p25, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, $i11);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $p13 := $p26;
    goto $bb10_dummy;

  $bb6:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p21 := $p20;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1429;
}



const dm_table_get_md: ref;

axiom dm_table_get_md == $sub.ref(0, 232459);

procedure dm_table_get_md($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dm_table_get_md($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} $p1 := external_alloc();
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __find_snapshots_sharing_cow: ref;

axiom __find_snapshots_sharing_cow == $sub.ref(0, 233491);

procedure __find_snapshots_sharing_cow($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.9, $M.10;



implementation __find_snapshots_sharing_cow($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $i50: i1;
  var $i51: i64;
  var $i52: i1;
  var $i53: i64;
  var $i54: i1;
  var $i55: i32;
  var $i45: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $i23: i32;
  var $p24: ref;
  var $i64: i32;
  var $i22: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(160, 1));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} $p8 := __lookup_origin($p7);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref($sub.ref(0, 184), 616));
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p15, $mul.ref($sub.ref(0, 184), 616)), $mul.ref(184, 1));
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i18, $i20);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i22 := 0;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i11 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i23, $p24 := 0, $p16;
    goto $bb8;

  $bb8:
    call $p25, $p26, $p27, $p28, $p29, $p30, $i31, $i32, $i33, $i34, $p35, $p36, $p37, $p38, $p39, $p40, $p41, $p42, $i43, $i44, $p46, $p47, $i48, $p49, $i50, $i51, $i52, $i53, $i54, $i55, $i45, $p57, $p58, $p59, $p60, $p61, $i62, $i63, $i23, $p24, $i64 := __find_snapshots_sharing_cow_loop_$bb8($p0, $p1, $p2, $p3, $i20, $p25, $p26, $p27, $p28, $p29, $p30, $i31, $i32, $i33, $i34, $p35, $p36, $p37, $p38, $p39, $p40, $p41, $p42, $i43, $i44, $p46, $p47, $i48, $p49, $i50, $i51, $i52, $i53, $i54, $i55, $i45, $p57, $p58, $p59, $p60, $p61, $i62, $i63, $i23, $p24, $i64);
    goto $bb8_last;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 616)), $mul.ref(176, 1));
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, $p2i.ref.i64(dm_snapshot_merge_target_name));
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p24, $mul.ref(0, 616)), $mul.ref(168, 1));
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(168, 1));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i43 := bdev_equal($p38, $p42);
    call {:si_unique_call 306} {:cexpr "tmp"} boogie_si_record_i32($i43);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p24, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} down_read($p46);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p24, $mul.ref(0, 616)), $mul.ref(204, 1));
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    call {:si_unique_call 308} {:cexpr "active"} boogie_si_record_i32($i48);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p24, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} up_read($p49);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i48, 0);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i50 == 1);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p2);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i23, 1);
    call {:si_unique_call 310} {:cexpr "count"} boogie_si_record_i32($i55);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i45 := $i55;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 616)), $mul.ref(184, 1)), $mul.ref(0, 1));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p59, $mul.ref($sub.ref(0, 184), 616));
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p59, $mul.ref($sub.ref(0, 184), 616)), $mul.ref(184, 1));
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, $i20);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i64 := $i45;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i22 := $i64;
    goto $bb7;

  $bb29:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $i23, $p24 := $i45, $p60;
    goto $bb29_dummy;

  $bb26:
    assume $i54 == 1;
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p2, $p24);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb20:
    assume $i50 == 1;
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p1);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i52 == 1;
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p1, $p24);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb16:
    assume $i44 == 1;
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i45 := $i23;
    goto $bb18;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p3);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb12;

  $bb13:
    assume $i34 == 1;
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p3, $p24);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb29_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1481;
}



const dm_hold: ref;

axiom dm_hold == $sub.ref(0, 234523);

procedure dm_hold($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_hold($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 1} true;
    call {:si_unique_call 311} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 312} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const up_read: ref;

axiom up_read == $sub.ref(0, 235555);

procedure up_read($p0: ref);
  free requires assertsPassed;



implementation up_read($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    return;
}



const dm_internal_suspend_fast: ref;

axiom dm_internal_suspend_fast == $sub.ref(0, 236587);

procedure dm_internal_suspend_fast($p0: ref);
  free requires assertsPassed;



implementation dm_internal_suspend_fast($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 237619);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const stop_merge: ref;

axiom stop_merge == $sub.ref(0, 238651);

procedure stop_merge($p0: ref);
  free requires assertsPassed;



implementation stop_merge($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var vslice_dummy_var_39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(576, 1));
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} set_bit(1, $p1);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(576, 1));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} vslice_dummy_var_39 := wait_on_bit($p2, 0, 2);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(576, 1));
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} clear_bit(1, $p4);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    return;
}



const down_write_nested: ref;

axiom down_write_nested == $sub.ref(0, 239683);

procedure down_write_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation down_write_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} {:cexpr "down_write_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    return;
}



const __handover_exceptions: ref;

axiom __handover_exceptions == $sub.ref(0, 240715);

procedure __handover_exceptions($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation __handover_exceptions($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 616)), $mul.ref(272, 1));
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p4);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 319} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p5, $p6, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 616)), $mul.ref(272, 1));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(272, 1));
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p7);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p8);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 320} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p9, $p10, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(272, 1));
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p11);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p12);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 321} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p13, $p14, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p2);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p16);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p19);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p2);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p22);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p1);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p0);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 616)), $mul.ref(176, 1));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 88)), $mul.ref(32, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i33);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, 0);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    return;
}



const start_merge: ref;

axiom start_merge == $sub.ref(0, 241747);

procedure start_merge($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.31, $CurrAddr, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35, $M.1, $M.9, $M.10, $M.11, assertsPassed;



implementation start_merge($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(576, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $i2 := test_and_set_bit(0, $p1);
    call {:si_unique_call 323} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} snapshot_merge_next_chunks($p0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const dm_internal_resume_fast: ref;

axiom dm_internal_resume_fast == $sub.ref(0, 242779);

procedure dm_internal_resume_fast($p0: ref);
  free requires assertsPassed;



implementation dm_internal_resume_fast($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    return;
}



const dm_put: ref;

axiom dm_put == $sub.ref(0, 243811);

procedure dm_put($p0: ref);
  free requires assertsPassed;



implementation dm_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    return;
}



const reregister_snapshot: ref;

axiom reregister_snapshot == $sub.ref(0, 244843);

procedure reregister_snapshot($p0: ref);
  free requires assertsPassed;



implementation reregister_snapshot($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(160, 1));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} down_write(_origins_lock);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(184, 1));
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} list_del($p5);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $p6 := __lookup_origin($p4);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} __insert_snapshot($p6, $p0);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} up_write(_origins_lock);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    return;
}



const __lookup_origin: ref;

axiom __lookup_origin == $sub.ref(0, 245875);

procedure __lookup_origin($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __lookup_origin($p0: ref) returns ($r: ref)
{
  var $i1: i32;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p13: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $i1 := origin_hash($p0);
    call {:si_unique_call 331} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p2 := $M.14;
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i1);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p2, $mul.ref($i3, 16));
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref($i3, 16)), $mul.ref(0, 1));
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 8), 40));
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 8), 40)), $mul.ref(8, 1));
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p4);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i10, $i11);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p19 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $r := $p19;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p13 := $p8;
    goto $bb4;

  $bb4:
    call $p14, $p15, $i16, $i17, $p18, $p21, $p22, $p23, $p24, $p25, $i26, $i27, $p13 := __lookup_origin_loop_$bb4($p0, $i11, $p14, $p15, $i16, $i17, $p18, $p21, $p22, $p23, $p24, $p25, $i26, $i27, $p13);
    goto $bb4_last;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $i16 := bdev_equal($p15, $p0);
    call {:si_unique_call 333} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p18 := $p13;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref($sub.ref(0, 8), 40));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p23, $mul.ref($sub.ref(0, 8), 40)), $mul.ref(8, 1));
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, $i11);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $p13 := $p24;
    goto $bb10_dummy;

  $bb6:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p19 := $p18;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1666;
}



const __insert_snapshot: ref;

axiom __insert_snapshot == $sub.ref(0, 246907);

procedure __insert_snapshot($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation __insert_snapshot($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p13: ref;
  var $p33: ref;
  var $p12: ref;
  var $p24: ref;
  var $p34: ref;
  var $p35: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 184), 616));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 184), 616)), $mul.ref(184, 1));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i8, $i10);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p12 := $p6;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p24 := $p12;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 616)), $mul.ref(184, 1));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p24, $mul.ref(0, 616)), $mul.ref(184, 1));
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} list_add_tail($p34, $p35);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p13 := $p6;
    goto $bb4;

  $bb4:
    call $p14, $p15, $p16, $i17, $p18, $p19, $p20, $i21, $i22, $p23, $p26, $p27, $p28, $p29, $p30, $i31, $i32, $p13, $p33 := __insert_snapshot_loop_$bb4($p1, $i10, $p14, $p15, $p16, $i17, $p18, $p19, $p20, $i21, $i22, $p23, $p26, $p27, $p28, $p29, $p30, $i31, $i32, $p13, $p33);
    goto $bb4_last;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i22 := $ult.i32($i17, $i21);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $p23 := $p13;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 616)), $mul.ref(184, 1)), $mul.ref(0, 1));
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref($sub.ref(0, 184), 616));
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p28, $mul.ref($sub.ref(0, 184), 616)), $mul.ref(184, 1));
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, $i10);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p33 := $p29;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $p12 := $p33;
    goto $bb3;

  $bb10:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $p13 := $p29;
    goto $bb10_dummy;

  $bb6:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p24 := $p23;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1700;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 247939);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} __list_add($p0, $p3, $p1);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    return;
}



const origin_hash: ref;

axiom origin_hash == $sub.ref(0, 248971);

procedure origin_hash($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation origin_hash($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(0, 1));
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 255);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const bdev_equal: ref;

axiom bdev_equal == $sub.ref(0, 250003);

procedure bdev_equal($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation bdev_equal($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, $i3);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 251035);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 337} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 338} devirtbounce.9(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.15, $p2);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const snapshot_merge_next_chunks: ref;

axiom snapshot_merge_next_chunks == $sub.ref(0, 252067);

procedure snapshot_merge_next_chunks($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.31, $CurrAddr, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35, $M.1, $M.9, $M.10, $M.11, assertsPassed;



implementation snapshot_merge_next_chunks($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $i69: i1;
  var $i70: i64;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i64;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $p84: ref;
  var $i85: i64;
  var $p86: ref;
  var $i87: i64;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $i92: i64;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $i97: i64;
  var $i98: i1;
  var $i99: i64;
  var $i100: i64;
  var $i101: i1;
  var $i102: i64;
  var $i103: i64;
  var $i104: i32;
  var $i105: i1;
  var $i91: i64;
  var $p106: ref;
  var $i107: i64;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i1;
  var $i113: i64;
  var $i114: i64;
  var $i115: i64;
  var $i116: i32;
  var $i117: i1;
  var $i112: i32;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $p4 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(576, 1));
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $i7 := constant_test_bit(0, $p6);
    call {:si_unique_call 345} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 347} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(576, 1));
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $i14 := constant_test_bit(1, $p13);
    call {:si_unique_call 350} {:cexpr "tmp___1"} boogie_si_record_i32($i14);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 352} {:cexpr "tmp___2"} boogie_si_record_i64($i18);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 112)), $mul.ref(56, 1));
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    call {:si_unique_call 355} $i32 := devirtbounce.10($p29, $p31, $p1, $p2);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    call {:si_unique_call 356} {:cexpr "linear_chunks"} boogie_si_record_i32($i32);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i33 := $sle.i32($i32, 0);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p1);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i32);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i41 := $sub.i64($i39, $i40);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, 1);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1, $i42);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.16, $p2);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i32);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i45 := $sub.i64($i43, $i44);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i45, 1);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $M.16 := $store.i64($M.16, $p2, $i46);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i51 := $mul.i32($i50, $i32);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i52 := $zext.i32.i64($i51);
    call {:si_unique_call 360} {:cexpr "io_size"} boogie_si_record_i64($i52);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(160, 1));
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $M.17 := $store.ref($M.17, $p57, $p56);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.0, $p1);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $i61 := chunk_to_sector($p59, $i60);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $M.18 := $store.i64($M.18, $p62, $i61);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.17, $p63);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $i65 := get_dev_size($p64);
    call {:si_unique_call 363} {:cexpr "tmp___3"} boogie_si_record_i64($i65);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.18, $p66);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i68 := $sub.i64($i65, $i67);
    call {:si_unique_call 364} {:cexpr "_min2"} boogie_si_record_i64($i68);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i69 := $ult.i64($i52, $i68);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i69 == 1);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i70 := $i68;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $M.19 := $store.i64($M.19, $p71, $i70);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(168, 1));
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p76, $p75);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.16, $p2);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $i80 := chunk_to_sector($p78, $i79);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $M.21 := $store.i64($M.21, $p81, $i80);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.19, $p82);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $M.22 := $store.i64($M.22, $p84, $i83);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $i85 := read_pending_exceptions_done_count();
    call {:si_unique_call 367} {:cexpr "previous_count"} boogie_si_record_i64($i85);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i87 := $load.i64($M.18, $p86);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i64.i32($i52);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $i89 := origin_write_extent($p0, $i87, $i88);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    call {:si_unique_call 369} {:cexpr "tmp___7"} boogie_si_record_i32($i89);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} down_write($p106);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i107 := $load.i64($M.0, $p1);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(584, 1));
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p108, $i107);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(592, 1));
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p109, $i32);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} up_write($p110);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i111 := $slt.i32(0, $i32);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(568, 1));
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p0);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} vslice_dummy_var_42 := dm_kcopyd_copy($p119, $p3, 1, $p4, 0, merge_callback, $p120);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    return;

  $bb41:
    assume $i111 == 1;
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i112 := 0;
    goto $bb44;

  $bb44:
    call $i113, $i114, $i115, $i116, $i117, $i112 := snapshot_merge_next_chunks_loop_$bb44($p0, $p1, $i32, $i113, $i114, $i115, $i116, $i117, $i112);
    goto $bb44_last;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i113 := $sext.i32.i64($i112);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i114 := $load.i64($M.0, $p1);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i115 := $add.i64($i113, $i114);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} __check_for_conflicting_io($p0, $i115);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i116 := $add.i32($i112, 1);
    call {:si_unique_call 391} {:cexpr "i"} boogie_si_record_i32($i116);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i117 := $slt.i32($i116, $i32);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i117 == 1);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb46:
    assume $i117 == 1;
    assume {:verifier.code 0} true;
    $i112 := $i116;
    goto $bb46_dummy;

  $bb21:
    assume $i90 == 1;
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i91 := $i85;
    goto $bb24;

  $bb24:
    call $i92, $i93, $p94, $p95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i91 := snapshot_merge_next_chunks_loop_$bb24($p0, $p5, $p86, $i88, $i92, $i93, $p94, $p95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i91);
    goto $bb24_last;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} __might_sleep(.str.36, 1018, 0);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $i92 := read_pending_exceptions_done_count();
    call {:si_unique_call 372} {:cexpr "tmp___4"} boogie_si_record_i64($i92);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i93 := $ne.i64($i92, $i91);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} INIT_LIST_HEAD($p94);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p95, 0);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $i96 := prepare_to_wait_event(_pending_exceptions_done, $p5, 2);
    call {:si_unique_call 379} {:cexpr "tmp___5"} boogie_si_record_i64($i96);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $i97 := read_pending_exceptions_done_count();
    call {:si_unique_call 381} {:cexpr "tmp___6"} boogie_si_record_i64($i97);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i98 := $ne.i64($i97, $i91);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb32;

  $bb32:
    assume !($i98 == 1);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    call $i99, $i100, $i101 := snapshot_merge_next_chunks_loop_$bb33($p5, $i99, $i100, $i101, $i91);
    goto $bb33_last;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} schedule();
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $i99 := prepare_to_wait_event(_pending_exceptions_done, $p5, 2);
    call {:si_unique_call 385} {:cexpr "tmp___5"} boogie_si_record_i64($i99);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $i100 := read_pending_exceptions_done_count();
    call {:si_unique_call 387} {:cexpr "tmp___6"} boogie_si_record_i64($i100);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i100, $i91);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb37_dummy;

  $bb34:
    assume $i101 == 1;
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} finish_wait(_pending_exceptions_done, $p5);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} $i102 := read_pending_exceptions_done_count();
    call {:si_unique_call 374} {:cexpr "previous_count"} boogie_si_record_i64($i102);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i103 := $load.i64($M.18, $p86);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $i104 := origin_write_extent($p0, $i103, $i88);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 376} {:cexpr "tmp___7"} boogie_si_record_i32($i104);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 0);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i105 == 1);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb38:
    assume $i105 == 1;
    assume {:verifier.code 0} true;
    $i91 := $i102;
    goto $bb38_dummy;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb31;

  $bb26:
    assume $i93 == 1;
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i69 == 1;
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i70 := $i52;
    goto $bb20;

  $bb12:
    assume $i33 == 1;
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i32, 0);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} merge_shutdown($p0);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} vslice_dummy_var_41 := printk.ref(.str.50);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} down_write($p36);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(596, 1));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 1);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} up_write($p38);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} vslice_dummy_var_40 := printk.ref(.str.49);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i12 == 1;
    call {:si_unique_call 348} devirtbounce.5(0, .str.36, 962, 12);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call snapshot_merge_next_chunks_loop_$bb3();
    goto $bb3_last;

  $bb46_dummy:
    assume false;
    return;

  $bb44_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1918;

  $bb37_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb38_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1871;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 253099);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 394} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const chunk_to_sector: ref;

axiom chunk_to_sector == $sub.ref(0, 254131);

procedure chunk_to_sector($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation chunk_to_sector($p0: ref, $i1: i64) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} {:cexpr "chunk_to_sector:arg:chunk"} boogie_si_record_i64($i1);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i3);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i5 := $shl.i64($i1, $i4);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const read_pending_exceptions_done_count: ref;

axiom read_pending_exceptions_done_count == $sub.ref(0, 255163);

procedure read_pending_exceptions_done_count() returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1;



implementation read_pending_exceptions_done_count() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} spin_lock(_pending_exceptions_done_spinlock);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i0 := $M.23;
    call {:si_unique_call 397} {:cexpr "pending_exceptions_done"} boogie_si_record_i64($i0);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} spin_unlock(_pending_exceptions_done_spinlock);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 256195);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 400} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 257227);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    return;
}



const prepare_to_wait_event: ref;

axiom prepare_to_wait_event == $sub.ref(0, 258259);

procedure prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 401} {:cexpr "prepare_to_wait_event:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 1} true;
    call {:si_unique_call 402} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 403} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 259291);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 260323);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    return;
}



const origin_write_extent: ref;

axiom origin_write_extent == $sub.ref(0, 261355);

procedure origin_write_extent($p0: ref, $i1: i64, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $M.22, $M.17, $M.18, $M.19, $M.1, $M.9, $M.10, $M.11, $M.16, $CurrAddr, assertsPassed, $M.31, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35;



implementation origin_write_extent($p0: ref, $i1: i64, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i11: i64;
  var $i12: i32;
  var $i25: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} {:cexpr "origin_write_extent:arg:sector"} boogie_si_record_i64($i1);
    call {:si_unique_call 405} {:cexpr "origin_write_extent:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} down_read(_origins_lock);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(160, 1));
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $p7 := __lookup_origin($p6);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i2);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i9 := $ugt.i64($i8, 0);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i10 := 0;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} up_read(_origins_lock);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i11, $i12 := 0, 0;
    goto $bb4;

  $bb4:
    call $p13, $i14, $i15, $i16, $i17, $p18, $p19, $p20, $i21, $i22, $i23, $i24, $i11, $i12, $i25 := origin_write_extent_loop_$bb4($p0, $i1, $p7, $i8, $p13, $i14, $i15, $i16, $i17, $p18, $p19, $p20, $i21, $i22, $i23, $i24, $i11, $i12, $i25);
    goto $bb4_last;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i1, $i11);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $i15 := __origin_write($p13, $i14, $0.ref);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 409} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $i12;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(176, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 88)), $mul.ref(32, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, $i11);
    call {:si_unique_call 410} {:cexpr "n"} boogie_si_record_i64($i23);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i24 := $ugt.i64($i8, $i23);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i25 := $i17;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i10 := $i25;
    goto $bb3;

  $bb9:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i11, $i12 := $i23, $i17;
    goto $bb9_dummy;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb8;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1974;
}



const __check_for_conflicting_io: ref;

axiom __check_for_conflicting_io == $sub.ref(0, 262387);

procedure __check_for_conflicting_io($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.1;



implementation __check_for_conflicting_io($p0: ref, $i1: i64)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} {:cexpr "__check_for_conflicting_io:arg:chunk"} boogie_si_record_i64($i1);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $i2 := __chunk_is_tracked($p0, $i1);
    call {:si_unique_call 414} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i4, $i5 := __check_for_conflicting_io_loop_$bb4($p0, $i1, $i4, $i5);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} msleep(1);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $i4 := __chunk_is_tracked($p0, $i1);
    call {:si_unique_call 417} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const merge_callback: ref;

axiom merge_callback == $sub.ref(0, 263419);

procedure merge_callback($i0: i32, $i1: i64, $p2: ref);



const dm_kcopyd_copy: ref;

axiom dm_kcopyd_copy == $sub.ref(0, 264451);

procedure dm_kcopyd_copy($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_kcopyd_copy($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $i7: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 418} {:cexpr "dm_kcopyd_copy:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 419} {:cexpr "dm_kcopyd_copy:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 1} true;
    call {:si_unique_call 420} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 421} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const merge_shutdown: ref;

axiom merge_shutdown == $sub.ref(0, 265483);

procedure merge_shutdown($p0: ref);
  free requires assertsPassed;



implementation merge_shutdown($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(576, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} clear_bit_unlock(0, $p1);
    call {:si_unique_call 423} devirtbounce.4(0);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(576, 1));
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} wake_up_bit($p3, 0);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    return;
}



const clear_bit_unlock: ref;

axiom clear_bit_unlock == $sub.ref(0, 266515);

procedure clear_bit_unlock($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit_unlock($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} {:cexpr "clear_bit_unlock:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 426} devirtbounce.4(0);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} clear_bit($i0, $p1);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    return;
}



const wake_up_bit: ref;

axiom wake_up_bit == $sub.ref(0, 267547);

procedure wake_up_bit($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation wake_up_bit($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} {:cexpr "wake_up_bit:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 268579);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 430} devirtbounce.12(0, $p1, $i0, $p1);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    return;
}



const remove_single_exception_chunk: ref;

axiom remove_single_exception_chunk == $sub.ref(0, 269611);

procedure remove_single_exception_chunk($p0: ref) returns ($r: i32);



const __release_queued_bios_after_merge: ref;

axiom __release_queued_bios_after_merge == $sub.ref(0, 270643);

procedure __release_queued_bios_after_merge($p0: ref) returns ($r: ref);



const error_bios: ref;

axiom error_bios == $sub.ref(0, 271675);

procedure error_bios($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation error_bios($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p3 := $p0;
    goto $bb4;

  $bb4:
    call $p4, $p5, $p6, $i7, $i8, $p3 := error_bios_loop_$bb4($p4, $p5, $p6, $i7, $i8, $p3);
    goto $bb4_last;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $0.ref);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} bio_endio($p3, $sub.i32(0, 5));
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p5);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $p3 := $p5;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2031;
}



const bio_endio: ref;

axiom bio_endio == $sub.ref(0, 272707);

procedure bio_endio($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation bio_endio($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} {:cexpr "bio_endio:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    return;
}



const bio_list_get: ref;

axiom bio_list_get == $sub.ref(0, 273739);

procedure bio_list_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation bio_list_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $0.ref);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $0.ref);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __remove_single_exception_chunk: ref;

axiom __remove_single_exception_chunk == $sub.ref(0, 274771);

procedure __remove_single_exception_chunk($p0: ref, $i1: i64) returns ($r: i32);



const flush_bios: ref;

axiom flush_bios == $sub.ref(0, 275803);

procedure flush_bios($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation flush_bios($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p3 := $p0;
    goto $bb4;

  $bb4:
    call $p4, $p5, $p6, $i7, $i8, $p3 := flush_bios_loop_$bb4($p4, $p5, $p6, $i7, $i8, $p3);
    goto $bb4_last;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $0.ref);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} generic_make_request($p3);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p5);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $p3 := $p5;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2059;
}



const generic_make_request: ref;

axiom generic_make_request == $sub.ref(0, 276835);

procedure generic_make_request($p0: ref);
  free requires assertsPassed;



implementation generic_make_request($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    return;
}



const dm_lookup_exception: ref;

axiom dm_lookup_exception == $sub.ref(0, 277867);

procedure dm_lookup_exception($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation dm_lookup_exception($p0: ref, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p14: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} {:cexpr "dm_lookup_exception:arg:chunk"} boogie_si_record_i64($i1);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $i2 := exception_hash($p0, $i1);
    call {:si_unique_call 436} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i2);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 16));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref($i5, 16)), $mul.ref(0, 1));
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p6);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i11, $i12);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p25 := $0.ref;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $r := $p25;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p14 := $p8;
    goto $bb4;

  $bb4:
    call $p15, $i16, $i17, $i18, $p19, $i20, $i21, $i22, $i23, $p24, $p27, $p28, $p29, $p30, $i31, $i32, $p14 := dm_lookup_exception_loop_$bb4($i1, $i12, $p15, $i16, $i17, $i18, $p19, $i20, $i21, $i22, $i23, $p24, $p27, $p28, $p29, $p30, $i31, $i32, $p14);
    goto $bb4_last;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i17 := $ule.i64($i16, $i1);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, $i12);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $p14 := $p28;
    goto $bb13_dummy;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $i18 := dm_consecutive_chunk_count($p14);
    call {:si_unique_call 438} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i18);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i20, $i21);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i23 := $uge.i64($i22, $i1);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $p24 := $p14;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb8:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p25 := $p24;
    goto $bb10;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2089;
}



const dm_consecutive_chunk_count: ref;

axiom dm_consecutive_chunk_count == $sub.ref(0, 278899);

procedure dm_consecutive_chunk_count($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_consecutive_chunk_count($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i3 := $lshr.i64($i2, 56);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dm_remove_exception: ref;

axiom dm_remove_exception == $sub.ref(0, 279931);

procedure dm_remove_exception($p0: ref);
  free requires assertsPassed;



implementation dm_remove_exception($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} list_del($p1);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    return;
}



const free_completed_exception: ref;

axiom free_completed_exception == $sub.ref(0, 280963);

procedure free_completed_exception($p0: ref);
  free requires assertsPassed;



implementation free_completed_exception($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p1 := $M.8;
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} kmem_cache_free($p1, $p2);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    return;
}



const dm_consecutive_chunk_count_dec: ref;

axiom dm_consecutive_chunk_count_dec == $sub.ref(0, 281995);

procedure dm_consecutive_chunk_count_dec($p0: ref);



const kmem_cache_free: ref;

axiom kmem_cache_free == $sub.ref(0, 283027);

procedure kmem_cache_free($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation kmem_cache_free($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    return;
}



const exception_hash: ref;

axiom exception_hash == $sub.ref(0, 284059);

procedure exception_hash($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation exception_hash($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} {:cexpr "exception_hash:arg:chunk"} boogie_si_record_i64($i1);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i3);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i64($i1, $i4);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i6, $i8);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 285091);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    return;
}



const __chunk_is_tracked: ref;

axiom __chunk_is_tracked == $sub.ref(0, 286123);

procedure __chunk_is_tracked($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation __chunk_is_tracked($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p15: ref;
  var $i19: i32;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} {:cexpr "__chunk_is_tracked:arg:chunk"} boogie_si_record_i64($i1);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(360, 1));
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} spin_lock_irq($p2);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(432, 1));
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i1, 15);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref($i5, 8)), $mul.ref(0, 1));
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(360, 1));
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} spin_unlock_irq($p29);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p15 := $p12;
    goto $bb7;

  $bb7:
    call $p16, $i17, $i18, $p21, $p22, $i23, $i24, $p26, $i27, $i28, $p15 := __chunk_is_tracked_loop_$bb7($i1, $p16, $i17, $i18, $p21, $p22, $i23, $i24, $p26, $i27, $i28, $p15);
    goto $bb7_last;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, $i1);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $p26 := $0.ref;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i28 == 1);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb16:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $p15 := $p26;
    goto $bb16_dummy;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p26 := $p22;
    goto $bb15;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i19 := 1;
    goto $bb11;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p12 := $p8;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2166;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 287155);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} ldv_spin_lock();
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} ldv_spin_lock_irq_8($p0);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 288187);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} ldv_spin_unlock();
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} ldv_spin_unlock_irq_11($p0);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irq_11: ref;

axiom ldv_spin_unlock_irq_11 == $sub.ref(0, 289219);

procedure ldv_spin_unlock_irq_11($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_irq_11($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} _raw_spin_unlock_irq($p2);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 290251);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_irq_8: ref;

axiom ldv_spin_lock_irq_8 == $sub.ref(0, 291283);

procedure ldv_spin_lock_irq_8($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_irq_8($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} _raw_spin_lock_irq($p2);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 292315);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    return;
}



const __origin_write: ref;

axiom __origin_write == $sub.ref(0, 293347);

procedure __origin_write($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $M.22, $M.17, $M.18, $M.19, $M.1, $M.9, $M.10, $M.11, $M.16, $CurrAddr, assertsPassed, $M.31, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35;



implementation __origin_write($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $i98: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i99: i32;
  var $p100: ref;
  var $i11: i32;
  var $p12: ref;
  var $i101: i64;
  var $i102: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} {:cexpr "__origin_write:arg:sector"} boogie_si_record_i64($i1);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 184), 616));
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 184), 616)), $mul.ref(184, 1));
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i8, $i9);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i11, $p12 := 1, $0.ref;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p12);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, 0);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb50:
    assume $i102 == 1;
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} start_copy($p12);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $p13, $p14, $p15, $i16, $p17 := $0.ref, $0.ref, $p2, 1, $p6;
    goto $bb4;

  $bb4:
    call $p18, $p19, $p20, $p21, $p22, $p23, $i24, $i25, $p31, $p32, $i33, $i34, $p35, $i36, $i37, $p42, $p43, $p44, $p45, $i46, $i47, $p48, $p49, $i50, $p51, $p52, $i53, $i54, $p55, $i56, $i57, $p58, $p59, $p60, $p61, $i62, $i63, $p64, $p65, $i66, $i67, $p68, $i69, $i70, $p71, $i72, $i73, $p74, $p75, $i76, $i77, $p78, $p79, $p80, $p81, $p82, $i83, $i84, $p85, $p86, $i38, $p39, $p40, $p41, $p87, $i88, $i89, $p90, $p26, $i27, $p28, $p29, $p30, $p92, $p93, $p94, $p95, $p96, $i97, $i98, $p13, $p14, $p15, $i16, $p17, $i99, $p100 := __origin_write_loop_$bb4($i1, $i9, $p18, $p19, $p20, $p21, $p22, $p23, $i24, $i25, $p31, $p32, $i33, $i34, $p35, $i36, $i37, $p42, $p43, $p44, $p45, $i46, $i47, $p48, $p49, $i50, $p51, $p52, $i53, $i54, $p55, $i56, $i57, $p58, $p59, $p60, $p61, $i62, $i63, $p64, $p65, $i66, $i67, $p68, $i69, $i70, $p71, $i72, $i73, $p74, $p75, $i76, $i77, $p78, $p79, $p80, $p81, $p82, $i83, $i84, $p85, $p86, $i38, $p39, $p40, $p41, $p87, $i88, $i89, $p90, $p26, $i27, $p28, $p29, $p30, $p92, $p93, $p94, $p95, $p96, $i97, $i98, $p13, $p14, $p15, $i16, $p17, $i99, $p100);
    goto $bb4_last;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 616)), $mul.ref(176, 1));
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, $p2i.ref.i64(dm_snapshot_merge_target_name));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p17, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} down_write($p31);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p17, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i34 == 1);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p17, $mul.ref(0, 616)), $mul.ref(204, 1));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p17, $mul.ref(0, 616)), $mul.ref(176, 1));
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $i46 := dm_table_get_size($p45);
    call {:si_unique_call 456} {:cexpr "tmp"} boogie_si_record_i64($i46);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i47 := $ule.i64($i46, $i1);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p17, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} $i50 := sector_to_chunk($p49, $i1);
    call {:si_unique_call 458} {:cexpr "chunk"} boogie_si_record_i64($i50);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p17, $mul.ref(0, 616)), $mul.ref(272, 1));
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $p52 := dm_lookup_exception($p51, $i50);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $p55 := __lookup_pending_exception($p17, $i50);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i57 := $eq.i64($i56, 0);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $p71 := $p55;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p15);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $p80, $p81 := $p15, $p13;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p71, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 0);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $p86 := $p14;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i38, $p39, $p40, $p41 := 0, $p80, $p86, $p81;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p17, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} up_write($p87);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p40);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    $p90 := $p40;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p26, $i27, $p28, $p29, $p30 := $p17, $i38, $p39, $p90, $p41;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 616)), $mul.ref(184, 1)), $mul.ref(0, 1));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p94, $mul.ref($sub.ref(0, 184), 616));
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p94, $mul.ref($sub.ref(0, 184), 616)), $mul.ref(184, 1));
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i97 := $p2i.ref.i64($p96);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i98 := $ne.i64($i97, $i9);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i99, $p100 := $i27, $p30;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i11, $p12 := $i99, $p100;
    goto $bb3;

  $bb47:
    assume $i98 == 1;
    assume {:verifier.code 0} true;
    $p13, $p14, $p15, $i16, $p17 := $p30, $p29, $p28, $i27, $p95;
    goto $bb47_dummy;

  $bb44:
    assume $i89 == 1;
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} start_copy($p40);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p90 := $0.ref;
    goto $bb46;

  $bb41:
    assume $i84 == 1;
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p71, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, 1);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $p86 := $p71;
    goto $bb43;

  $bb35:
    assume $i73 == 1;
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p71, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} bio_list_add($p74, $p15);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p71, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 0);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $p79 := $p13;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p80, $p81 := $0.ref, $p79;
    goto $bb40;

  $bb37:
    assume $i77 == 1;
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p71, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, 1);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p79 := $p71;
    goto $bb39;

  $bb23:
    assume $i57 == 1;
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p17, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} up_write($p58);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $p59 := alloc_pending_exception($p17);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p17, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} down_write($p60);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p17, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 0);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p17, $mul.ref(0, 616)), $mul.ref(272, 1));
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $p65 := dm_lookup_exception($p64, $i50);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $p68 := __find_pending_exception($p17, $p59, $i50);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i70 := $eq.i64($i69, 0);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p71 := $p68;
    goto $bb34;

  $bb31:
    assume $i70 == 1;
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} __invalidate_snapshot($p17, $sub.i32(0, 12));
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $i38, $p39, $p40, $p41 := $i16, $p15, $p14, $p13;
    goto $bb15;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i67 == 1;
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} free_pending_exception($p59);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i38, $p39, $p40, $p41 := $i16, $p15, $p14, $p13;
    goto $bb15;

  $bb25:
    assume $i63 == 1;
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} free_pending_exception($p59);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i38, $p39, $p40, $p41 := $i16, $p15, $p14, $p13;
    goto $bb15;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i54 == 1;
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i38, $p39, $p40, $p41 := $i16, $p15, $p14, $p13;
    goto $bb15;

  $bb17:
    assume $i47 == 1;
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i38, $p39, $p40, $p41 := $i16, $p15, $p14, $p13;
    goto $bb15;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i38, $p39, $p40, $p41 := $i16, $p15, $p14, $p13;
    goto $bb15;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb11;

  $bb6:
    assume $i25 == 1;
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p26, $i27, $p28, $p29, $p30 := $p17, $i16, $p15, $p14, $p13;
    goto $bb8;

  $bb47_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2226;
}



const dm_table_get_size: ref;

axiom dm_table_get_size == $sub.ref(0, 294379);

procedure dm_table_get_size($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dm_table_get_size($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 1} true;
    call {:si_unique_call 472} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 473} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const sector_to_chunk: ref;

axiom sector_to_chunk == $sub.ref(0, 295411);

procedure sector_to_chunk($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation sector_to_chunk($p0: ref, $i1: i64) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} {:cexpr "sector_to_chunk:arg:sector"} boogie_si_record_i64($i1);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i3);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i64($i1, $i4);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __lookup_pending_exception: ref;

axiom __lookup_pending_exception == $sub.ref(0, 296443);

procedure __lookup_pending_exception($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation __lookup_pending_exception($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} {:cexpr "__lookup_pending_exception:arg:chunk"} boogie_si_record_i64($i1);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(256, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $p3 := dm_lookup_exception($p2, $i1);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p6 := $p3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;
}



const alloc_pending_exception: ref;

axiom alloc_pending_exception == $sub.ref(0, 297475);

procedure alloc_pending_exception($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation alloc_pending_exception($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(248, 1));
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $p3 := ldv_mempool_alloc_25($p2, 16);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} atomic_inc($p5);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p0);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const free_pending_exception: ref;

axiom free_pending_exception == $sub.ref(0, 298507);

procedure free_pending_exception($p0: ref);
  free requires assertsPassed;



implementation free_pending_exception($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(248, 1));
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} mempool_free($p3, $p5);
    call {:si_unique_call 480} devirtbounce.4(0);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} atomic_dec($p6);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    return;
}



const __find_pending_exception: ref;

axiom __find_pending_exception == $sub.ref(0, 299539);

procedure __find_pending_exception($p0: ref, $p1: ref, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.20, $M.21, $M.22, $M.17, $M.18, $M.19, $M.9, $M.10, $M.11, $M.16, $CurrAddr, assertsPassed, $M.31, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35;



implementation __find_pending_exception($p0: ref, $p1: ref, $i2: i64) returns ($r: ref)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} {:cexpr "__find_pending_exception:arg:chunk"} boogie_si_record_i64($i2);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $p3 := __lookup_pending_exception($p0, $i2);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, $i2);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} bio_list_init($p9);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(48, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} bio_list_init($p10);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 0);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(104, 1));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $0.ref);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 112)), $mul.ref(40, 1));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(0, 1));
    call {:si_unique_call 487} $i22 := devirtbounce.13($p18, $p20, $p21);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 488} {:cexpr "tmp"} boogie_si_record_i32($i22);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1));
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    call {:si_unique_call 490} {:cexpr "tmp___0"} boogie_si_record_i64($i25);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1));
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 1);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i28);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(80, 1));
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p30, $i25);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(256, 1));
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} dm_insert_exception($p31, $p32);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p6 := $p1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} free_pending_exception($p1);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} free_pending_exception($p1);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p6 := $p3;
    goto $bb3;
}



const __invalidate_snapshot: ref;

axiom __invalidate_snapshot == $sub.ref(0, 300571);

procedure __invalidate_snapshot($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $M.11, $M.1, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr, $M.31, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35, assertsPassed;



implementation __invalidate_snapshot($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} {:cexpr "__invalidate_snapshot:arg:err"} boogie_si_record_i32($i1);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, $sub.i32(0, 5));
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, $sub.i32(0, 12));
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 0);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(176, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} dm_table_event($p29);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    call {:si_unique_call 495} devirtbounce.2($p22, $p24);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} vslice_dummy_var_44 := printk.ref(.str.41);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} vslice_dummy_var_43 := printk.ref(.str.40);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bio_list_add: ref;

axiom bio_list_add == $sub.ref(0, 301603);

procedure bio_list_add($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation bio_list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $0.ref);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p1);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p1);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const start_copy: ref;

axiom start_copy == $sub.ref(0, 302635);

procedure start_copy($p0: ref);
  free requires assertsPassed;
  modifies $M.20, $M.21, $M.22, $M.17, $M.18, $M.19, $CurrAddr;



implementation start_copy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var vslice_dummy_var_45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $p1 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(160, 1));
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.24, $p5);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.25, $p7);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $i9 := get_dev_size($p8);
    call {:si_unique_call 500} {:cexpr "dev_size"} boogie_si_record_i64($i9);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p10, $p8);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.26, $p11);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $i16 := chunk_to_sector($p12, $i15);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $M.21 := $store.i64($M.21, $p17, $i16);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.26, $p18);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    call {:si_unique_call 502} {:cexpr "_min1"} boogie_si_record_i64($i22);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.21, $p23);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64($i9, $i24);
    call {:si_unique_call 503} {:cexpr "_min2"} boogie_si_record_i64($i25);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i26 := $ult.i64($i22, $i25);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i27 := $i25;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $M.22 := $store.i64($M.22, $p28, $i27);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(168, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.27, $p29);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.28, $p31);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $M.17 := $store.ref($M.17, $p33, $p32);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.26, $p34);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $i39 := chunk_to_sector($p35, $i38);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $M.18 := $store.i64($M.18, $p40, $i39);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.22, $p41);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $M.19 := $store.i64($M.19, $p43, $i42);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(568, 1));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.29, $p44);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p0);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} vslice_dummy_var_45 := dm_kcopyd_copy($p45, $p1, 1, $p2, 0, copy_callback, $p46);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i27 := $i22;
    goto $bb3;
}



const copy_callback: ref;

axiom copy_callback == $sub.ref(0, 303667);

procedure copy_callback($i0: i32, $i1: i64, $p2: ref);



const complete_exception: ref;

axiom complete_exception == $sub.ref(0, 304699);

procedure complete_exception($p0: ref);



const list_empty: ref;

axiom list_empty == $sub.ref(0, 305731);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const pending_complete: ref;

axiom pending_complete == $sub.ref(0, 306763);

procedure pending_complete($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $M.11, $M.23, $M.1, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr, $M.31, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35, assertsPassed;



implementation pending_complete($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $p5: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i6: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i1;
  var $i39: i64;
  var $i40: i1;
  var $i41: i64;
  var $i42: i1;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} {:cexpr "pending_complete:arg:success"} boogie_si_record_i32($i1);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 0);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $p7 := alloc_completed_exception(16);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p7);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p11);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 515} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p12, $p13, 32, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} down_write($p14);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} __check_for_conflicting_io($p3, $i20);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 616)), $mul.ref(272, 1));
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} dm_insert_exception($p21, $p7);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} dm_remove_exception($p22);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1));
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $p24 := bio_list_get($p23);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $p26 := bio_list_get($p25);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(104, 1));
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} increment_pending_exceptions_done_count();
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} up_write($p37);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i6, 0);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i38 == 1);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p28);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} flush_bios($p24);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} retry_origin_bios($p3, $p26);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} free_pending_exception($p0);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i42 == 1;
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} bio_endio($p28, 0);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i38 == 1;
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p28);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} error_bios($p24);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i40 == 1;
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} bio_endio($p28, $sub.i32(0, 5));
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(112, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p28, $mul.ref(0, 136)), $mul.ref(72, 1));
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p32);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p28, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $p35);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} free_completed_exception($p7);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} down_write($p10);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} __invalidate_snapshot($p3, $sub.i32(0, 12));
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} down_write($p5);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} __invalidate_snapshot($p3, $sub.i32(0, 5));
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  SeqInstr_85:
    assume !assertsPassed;
    return;
}



const commit_callback: ref;

axiom commit_callback == $sub.ref(0, 307795);

procedure commit_callback($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $M.11, $M.23, $M.1, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr, $M.31, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35, assertsPassed;



implementation commit_callback($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} {:cexpr "commit_callback:arg:success"} boogie_si_record_i32($i1);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} pending_complete($p2, $i1);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;
}



const alloc_completed_exception: ref;

axiom alloc_completed_exception == $sub.ref(0, 308827);

procedure alloc_completed_exception($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation alloc_completed_exception($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} {:cexpr "alloc_completed_exception:arg:gfp"} boogie_si_record_i32($i0);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p1 := $M.8;
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $p2 := ldv_kmem_cache_alloc_23($p1, $i0);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $p2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 16);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p7 := $M.8;
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $p8 := ldv_kmem_cache_alloc_24($p7, 32);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $p10 := $p8;
    goto $bb6;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 309859);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const dm_insert_exception: ref;

axiom dm_insert_exception == $sub.ref(0, 310891);

procedure dm_insert_exception($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dm_insert_exception($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i22: i32;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $i34: i32;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $p21: ref;
  var $p78: ref;
  var $p20: ref;
  var $p70: ref;
  var $p12: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $p83: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $i4 := exception_hash($p0, $i3);
    call {:si_unique_call 534} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i4);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p6, $mul.ref($i7, 16));
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref($i7, 16)), $mul.ref(8, 1));
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p8);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i17, $i18);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p20 := $p14;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p70 := $p20;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $p12 := $p70;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p12);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i81 == 1);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p83 := $p8;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} list_add($p79, $p83);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb30:
    assume $i81 == 1;
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $p83 := $p12;
    goto $bb32;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p21 := $p14;
    goto $bb8;

  $bb8:
    call $i22, $p23, $i24, $p25, $i26, $i27, $i28, $i29, $i30, $p31, $i32, $i33, $i34, $p35, $i36, $i37, $i38, $i39, $i40, $p41, $p42, $i43, $p44, $i45, $i46, $i47, $p48, $i49, $i50, $p51, $i52, $i53, $i54, $p55, $p64, $i65, $p66, $i67, $i68, $p69, $p72, $p73, $p74, $p75, $i76, $i77, $p21, $p78 := dm_insert_exception_loop_$bb8($p1, $i18, $i22, $p23, $i24, $p25, $i26, $i27, $i28, $i29, $i30, $p31, $i32, $i33, $i34, $p35, $i36, $i37, $i38, $i39, $i40, $p41, $p42, $i43, $p44, $i45, $i46, $i47, $p48, $i49, $i50, $p51, $i52, $i53, $i54, $p55, $p64, $i65, $p66, $i67, $i68, $p69, $p72, $p73, $p74, $p75, $i76, $i77, $p21, $p78);
    goto $bb8_last;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $i22 := dm_consecutive_chunk_count($p21);
    call {:si_unique_call 536} {:cexpr "tmp___0"} boogie_si_record_i32($i22);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p21, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i22);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i26, $i27);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 1);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i24, $i29);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p21, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i46 := $sub.i64($i45, 1);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i43, $i46);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.0, $p64);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p21, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.0, $p66);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i68 := $ugt.i64($i65, $i67);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p69 := $p21;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p75);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, $i18);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p78 := $p73;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p20 := $p78;
    goto $bb7;

  $bb27:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    $p21 := $p73;
    goto $bb27_dummy;

  $bb23:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $p70 := $p69;
    goto $bb25;

  $bb17:
    assume $i47 == 1;
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p21, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $i50 := dm_chunk_number($i49);
    call {:si_unique_call 544} {:cexpr "tmp___3"} boogie_si_record_i64($i50);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.0, $p51);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i53 := $sub.i64($i50, 1);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i52, $i53);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p55 := $p21;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} dm_consecutive_chunk_count_inc($p55);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.0, $p56);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i58 := $sub.i64($i57, 1);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p55, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p59, $i58);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p55, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.0, $p60);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i62 := $sub.i64($i61, 1);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p55, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p63, $i62);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} free_completed_exception($p1);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb10:
    assume $i30 == 1;
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p21, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $i33 := dm_chunk_number($i32);
    call {:si_unique_call 538} {:cexpr "tmp___1"} boogie_si_record_i64($i33);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $i34 := dm_consecutive_chunk_count($p21);
    call {:si_unique_call 540} {:cexpr "tmp___2"} boogie_si_record_i32($i34);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, $p35);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i34);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i33, $i37);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 1);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i36, $i39);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p41 := $p21;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb12:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} dm_consecutive_chunk_count_inc($p41);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} free_completed_exception($p1);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb3;

  $bb27_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2708;
}



const increment_pending_exceptions_done_count: ref;

axiom increment_pending_exceptions_done_count == $sub.ref(0, 311923);

procedure increment_pending_exceptions_done_count();
  free requires assertsPassed;
  modifies $M.23, $M.1;



implementation increment_pending_exceptions_done_count()
{
  var $i0: i64;
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} spin_lock(_pending_exceptions_done_spinlock);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i0 := $M.23;
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i1 := $add.i64($i0, 1);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $M.23 := $i1;
    call {:si_unique_call 549} {:cexpr "_pending_exceptions_done_count"} boogie_si_record_i64($i1);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} spin_unlock(_pending_exceptions_done_spinlock);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} __wake_up(_pending_exceptions_done, 3, 0, $0.ref);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    return;
}



const retry_origin_bios: ref;

axiom retry_origin_bios == $sub.ref(0, 312955);

procedure retry_origin_bios($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $M.22, $M.17, $M.18, $M.19, $M.1, $M.9, $M.10, $M.11, $M.16, $CurrAddr, assertsPassed, $M.31, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35;



implementation retry_origin_bios($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $i13: i1;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p4 := $p1;
    goto $bb4;

  $bb4:
    call $p5, $p6, $p7, $p8, $p9, $i10, $i11, $i12, $i13, $p4 := retry_origin_bios_loop_$bb4($p0, $p5, $p6, $p7, $p8, $p9, $i10, $i11, $i12, $i13, $p4);
    goto $bb4_last;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(160, 1));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $i10 := do_origin($p9, $p4);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    call {:si_unique_call 553} {:cexpr "r"} boogie_si_record_i32($i10);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p6);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i13 == 1);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb9_dummy;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} generic_make_request($p4);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2807;
}



const do_origin: ref;

axiom do_origin == $sub.ref(0, 313987);

procedure do_origin($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $M.22, $M.17, $M.18, $M.19, $M.1, $M.9, $M.10, $M.11, $M.16, $CurrAddr, assertsPassed, $M.31, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35;



implementation do_origin($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} down_read(_origins_lock);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $p4 := __lookup_origin($p3);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} up_read(_origins_lock);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $i11 := __origin_write($p7, $i10, $p1);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    call {:si_unique_call 558} {:cexpr "r"} boogie_si_record_i32($i11);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 315019);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 561} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    return;
}



const dm_chunk_number: ref;

axiom dm_chunk_number == $sub.ref(0, 316051);

procedure dm_chunk_number($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation dm_chunk_number($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} {:cexpr "dm_chunk_number:arg:chunk"} boogie_si_record_i64($i0);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 72057594037927935);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dm_consecutive_chunk_count_inc: ref;

axiom dm_consecutive_chunk_count_inc == $sub.ref(0, 317083);

procedure dm_consecutive_chunk_count_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dm_consecutive_chunk_count_inc($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 72057594037927936);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, $i3);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $i5 := dm_consecutive_chunk_count($p0);
    call {:si_unique_call 564} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 566} {:cexpr "tmp___0"} boogie_si_record_i64($i9);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    call {:si_unique_call 567} devirtbounce.5(0, .str.34, 155, 12);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dm_consecutive_chunk_count_inc_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv_kmem_cache_alloc_23: ref;

axiom ldv_kmem_cache_alloc_23 == $sub.ref(0, 318115);

procedure ldv_kmem_cache_alloc_23($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_kmem_cache_alloc_23($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} {:cexpr "ldv_kmem_cache_alloc_23:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} ldv_check_alloc_flags($i1);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $p2 := ldv_undef_ptr();
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;
}



const ldv_kmem_cache_alloc_24: ref;

axiom ldv_kmem_cache_alloc_24 == $sub.ref(0, 319147);

procedure ldv_kmem_cache_alloc_24($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_kmem_cache_alloc_24($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} {:cexpr "ldv_kmem_cache_alloc_24:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} ldv_check_alloc_flags($i1);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $p2 := ldv_undef_ptr();
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;
}



const dm_table_event: ref;

axiom dm_table_event == $sub.ref(0, 320179);

procedure dm_table_event($p0: ref);
  free requires assertsPassed;



implementation dm_table_event($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    return;
}



const bio_list_init: ref;

axiom bio_list_init == $sub.ref(0, 321211);

procedure bio_list_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation bio_list_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $0.ref);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $0.ref);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    return;
}



const mempool_free: ref;

axiom mempool_free == $sub.ref(0, 322243);

procedure mempool_free($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation mempool_free($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    return;
}



const atomic_dec: ref;

axiom atomic_dec == $sub.ref(0, 323275);

procedure atomic_dec($p0: ref);
  free requires assertsPassed;



implementation atomic_dec($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 574} devirtbounce.15(0, $p1, $p1);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mempool_alloc_25: ref;

axiom ldv_mempool_alloc_25 == $sub.ref(0, 324307);

procedure ldv_mempool_alloc_25($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_mempool_alloc_25($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} {:cexpr "ldv_mempool_alloc_25:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} ldv_check_alloc_flags($i1);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $p2 := ldv_undef_ptr();
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 325339);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 578} devirtbounce.15(0, $p1, $p1);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 326371);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 580} devirtbounce.12(0, $p1, $i0, $p1);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    return;
}



const wait_on_bit: ref;

axiom wait_on_bit == $sub.ref(0, 327403);

procedure wait_on_bit($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation wait_on_bit($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} {:cexpr "wait_on_bit:arg:bit"} boogie_si_record_i32($i1);
    call {:si_unique_call 582} {:cexpr "wait_on_bit:arg:mode"} boogie_si_record_i32($i2);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} __might_sleep(.str.37, 987, 0);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i1);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $i4 := variable_test_bit($i3, $p0);
    call {:si_unique_call 585} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $i8 := out_of_line_wait_on_bit($p7, $i1, bit_wait, $i2);
    call {:si_unique_call 587} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i6 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 328435);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation variable_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 589} $i2 := devirtbounce.16(0, $p1, $i0);
    call {:si_unique_call 590} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const bit_wait: ref;

axiom bit_wait == $sub.ref(0, 329467);

procedure bit_wait($p0: ref) returns ($r: i32);



const out_of_line_wait_on_bit: ref;

axiom out_of_line_wait_on_bit == $sub.ref(0, 330499);

procedure out_of_line_wait_on_bit($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation out_of_line_wait_on_bit($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 591} {:cexpr "out_of_line_wait_on_bit:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 592} {:cexpr "out_of_line_wait_on_bit:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 1} true;
    call {:si_unique_call 593} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 594} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dm_suspended: ref;

axiom dm_suspended == $sub.ref(0, 331531);

procedure dm_suspended($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_suspended($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 1} true;
    call {:si_unique_call 595} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 596} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const is_bio_tracked: ref;

axiom is_bio_tracked == $sub.ref(0, 332563);

procedure is_bio_tracked($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_bio_tracked($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $p1 := dm_per_bio_data($p0, 24);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $i4 := hlist_unhashed($p3);
    call {:si_unique_call 599} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const stop_tracking_chunk: ref;

axiom stop_tracking_chunk == $sub.ref(0, 333595);

procedure stop_tracking_chunk($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0;



implementation stop_tracking_chunk($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $p2 := dm_per_bio_data($p1, 24);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} ldv_spin_lock();
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} hlist_del($p4);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(360, 1));
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} spin_unlock_irqrestore($p5, $u0);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    return;
}



const dm_per_bio_data: ref;

axiom dm_per_bio_data == $sub.ref(0, 334627);

procedure dm_per_bio_data($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation dm_per_bio_data($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} {:cexpr "dm_per_bio_data:arg:data_size"} boogie_si_record_i64($i1);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i3 := $sub.i64($sub.i64(0, 32), $i1);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p2, $mul.ref($i3, 1));
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const hlist_del: ref;

axiom hlist_del == $sub.ref(0, 335659);

procedure hlist_del($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation hlist_del($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} __hlist_del($p0);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $i2p.i64.ref($sub.i64(0, 2401263026317557504)));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $i2p.i64.ref($sub.i64(0, 2401263026316508672)));
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 336691);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.1;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} ldv_spin_unlock();
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} ldv_spin_unlock_irqrestore_12($p0, $i1);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_12: ref;

axiom ldv_spin_unlock_irqrestore_12 == $sub.ref(0, 337723);

procedure ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} {:cexpr "ldv_spin_unlock_irqrestore_12:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 338755);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    return;
}



const __hlist_del: ref;

axiom __hlist_del == $sub.ref(0, 339787);

procedure __hlist_del($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __hlist_del($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p2);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p2);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p4);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const hlist_unhashed: ref;

axiom hlist_unhashed == $sub.ref(0, 340819);

procedure hlist_unhashed($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation hlist_unhashed($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const init_tracked_chunk: ref;

axiom init_tracked_chunk == $sub.ref(0, 341851);

procedure init_tracked_chunk($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation init_tracked_chunk($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $p1 := dm_per_bio_data($p0, 24);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} INIT_HLIST_NODE($p3);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    return;
}



const remap_exception: ref;

axiom remap_exception == $sub.ref(0, 342883);

procedure remap_exception($p0: ref, $p1: ref, $p2: ref, $i3: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation remap_exception($p0: ref, $p1: ref, $p2: ref, $i3: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $p30: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} {:cexpr "remap_exception:arg:chunk"} boogie_si_record_i64($i3);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(168, 1));
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p7);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $i11 := dm_chunk_number($i10);
    call {:si_unique_call 616} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i16 := $sub.i64($i3, $i15);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i11, $i16);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $i18 := chunk_to_sector($p13, $i17);
    call {:si_unique_call 618} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i25);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i21, $i26);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i18, $i27);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p30, $i28);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    return;
}



const start_full_bio: ref;

axiom start_full_bio == $sub.ref(0, 343915);

procedure start_full_bio($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation start_full_bio($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(104, 1));
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p1);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(72, 1));
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(112, 1));
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p6);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p9);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 616)), $mul.ref(568, 1));
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.30, $p11);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p0);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $p14 := dm_kcopyd_prepare_callback($p12, copy_callback, $p13);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(72, 1));
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, full_bio_end_io);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p14);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} generic_make_request($p1);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    return;
}



const track_chunk: ref;

axiom track_chunk == $sub.ref(0, 344947);

procedure track_chunk($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;
  modifies $M.0, $M.1;



implementation track_chunk($p0: ref, $p1: ref, $i2: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} {:cexpr "track_chunk:arg:chunk"} boogie_si_record_i64($i2);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $p3 := dm_per_bio_data($p1, 24);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p5, $i2);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(360, 1));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} spin_lock_irq($p6);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(432, 1));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i10 := $and.i64($i2, 15);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p9, $mul.ref($i10, 8));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} hlist_add_head($p7, $p11);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(360, 1));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} spin_unlock_irq($p12);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    return;
}



const hlist_add_head: ref;

axiom hlist_add_head == $sub.ref(0, 345979);

procedure hlist_add_head($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation hlist_add_head($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p3);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p3);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p0);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p1);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p0);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dm_kcopyd_prepare_callback: ref;

axiom dm_kcopyd_prepare_callback == $sub.ref(0, 347011);

procedure dm_kcopyd_prepare_callback($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dm_kcopyd_prepare_callback($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $p3 := external_alloc();
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const full_bio_end_io: ref;

axiom full_bio_end_io == $sub.ref(0, 348043);

procedure full_bio_end_io($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation full_bio_end_io($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} {:cexpr "full_bio_end_io:arg:error"} boogie_si_record_i32($i1);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i1, 0);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} dm_kcopyd_do_callback($p3, 0, $i6);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    return;
}



const dm_kcopyd_do_callback: ref;

axiom dm_kcopyd_do_callback == $sub.ref(0, 349075);

procedure dm_kcopyd_do_callback($p0: ref, $i1: i32, $i2: i64);
  free requires assertsPassed;



implementation dm_kcopyd_do_callback($p0: ref, $i1: i32, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} {:cexpr "dm_kcopyd_do_callback:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 630} {:cexpr "dm_kcopyd_do_callback:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    return;
}



const INIT_HLIST_NODE: ref;

axiom INIT_HLIST_NODE == $sub.ref(0, 350107);

procedure INIT_HLIST_NODE($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_HLIST_NODE($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $0.ref);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $0.ref);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    return;
}



const unregister_snapshot: ref;

axiom unregister_snapshot == $sub.ref(0, 351139);

procedure unregister_snapshot($p0: ref);
  free requires assertsPassed;



implementation unregister_snapshot($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} down_write(_origins_lock);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(160, 1));
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $p5 := __lookup_origin($p4);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(184, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} list_del($p6);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p5);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} up_write(_origins_lock);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $i10 := list_empty($p9);
    call {:si_unique_call 635} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} list_del($p12);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p5);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} kfree($p13);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 352171);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const hlist_empty: ref;

axiom hlist_empty == $sub.ref(0, 353203);

procedure hlist_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation hlist_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __free_exceptions: ref;

axiom __free_exceptions == $sub.ref(0, 354235);

procedure __free_exceptions($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __free_exceptions($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(568, 1));
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} dm_kcopyd_client_destroy($p2);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(568, 1));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $0.ref);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(256, 1));
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p5 := $M.6;
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} dm_exception_table_exit($p4, $p5);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(272, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p7 := $M.8;
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} dm_exception_table_exit($p6, $p7);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    return;
}



const mempool_destroy: ref;

axiom mempool_destroy == $sub.ref(0, 355267);

procedure mempool_destroy($p0: ref);
  free requires assertsPassed;



implementation mempool_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    return;
}



const dm_put_device: ref;

axiom dm_put_device == $sub.ref(0, 356299);

procedure dm_put_device($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dm_put_device($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    return;
}



const dm_kcopyd_client_destroy: ref;

axiom dm_kcopyd_client_destroy == $sub.ref(0, 357331);

procedure dm_kcopyd_client_destroy($p0: ref);
  free requires assertsPassed;



implementation dm_kcopyd_client_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    return;
}



const dm_exception_table_exit: ref;

axiom dm_exception_table_exit == $sub.ref(0, 358363);

procedure dm_exception_table_exit($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dm_exception_table_exit($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p22: ref;
  var $p23: ref;
  var $i32: i32;
  var $i33: i1;
  var $i6: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    call {:si_unique_call 642} {:cexpr "size"} boogie_si_record_i32($i4);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32(0, $i4);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} vfree($p36);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $p7, $p8, $i9, $p10, $p11, $p12, $p13, $p15, $p16, $p18, $i19, $i20, $i21, $p24, $p26, $p27, $p29, $i30, $i31, $p22, $p23, $i32, $i33, $i6 := dm_exception_table_exit_loop_$bb4($p0, $p1, $i4, $p7, $p8, $i9, $p10, $p11, $p12, $p13, $p15, $p16, $p18, $i19, $i20, $i21, $p24, $p26, $p27, $p29, $i30, $i31, $p22, $p23, $i32, $i33, $i6);
    goto $bb4_last;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i6);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p8, $mul.ref($i9, 16));
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref($i9, 16)), $mul.ref(0, 1));
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p10);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i19, $i20);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i6, 1);
    call {:si_unique_call 644} {:cexpr "i"} boogie_si_record_i32($i32);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, $i4);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i33 == 1);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i32;
    goto $bb14_dummy;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p22, $p23 := $p16, $p12;
    goto $bb9;

  $bb9:
    call $p24, $p26, $p27, $p29, $i30, $i31, $p22, $p23 := dm_exception_table_exit_loop_$bb9($p1, $i20, $p24, $p26, $p27, $p29, $i30, $i31, $p22, $p23);
    goto $bb9_last;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} kmem_cache_free($p1, $p24);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p22, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, $i20);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb11:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $p22, $p23 := $p27, $p22;
    goto $bb11_dummy;

  $bb11_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3167;

  $bb14_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3148;
}



const vfree: ref;

axiom vfree == $sub.ref(0, 359395);

procedure vfree($p0: ref);
  free requires assertsPassed;



implementation vfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    return;
}



const dm_get_device: ref;

axiom dm_get_device == $sub.ref(0, 360427);

procedure dm_get_device($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_get_device($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 646} {:cexpr "dm_get_device:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 1} true;
    call {:si_unique_call 647} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 648} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dm_table_get_mode: ref;

axiom dm_table_get_mode == $sub.ref(0, 361459);

procedure dm_table_get_mode($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_table_get_mode($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 1} true;
    call {:si_unique_call 649} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 650} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 362491);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    return;
}



const __init_rwsem: ref;

axiom __init_rwsem == $sub.ref(0, 363523);

procedure __init_rwsem($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_rwsem($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 364555);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 365587);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    return;
}



const init_hash_tables: ref;

axiom init_hash_tables == $sub.ref(0, 366619);

procedure init_hash_tables($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation init_hash_tables($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i64;
  var $i16: i1;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i24: i64;
  var $i25: i1;
  var $i26: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(168, 1));
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $i5 := get_dev_size($p4);
    call {:si_unique_call 653} {:cexpr "cow_dev_size"} boogie_si_record_i64($i5);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $i6 := calc_max_buckets();
    call {:si_unique_call 655} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    call {:si_unique_call 656} {:cexpr "max_buckets"} boogie_si_record_i64($i7);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i13 := $lshr.i64($i5, $i12);
    call {:si_unique_call 657} {:cexpr "hash_size"} boogie_si_record_i64($i13);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i14 := $ult.i64($i13, $i7);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i15 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i16 := $ule.i64($i15, 63);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $i15;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $i18 := __rounddown_pow_of_two($i17);
    call {:si_unique_call 659} {:cexpr "hash_size"} boogie_si_record_i64($i18);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(272, 1));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i18);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $i21 := dm_exception_table_init($p19, $i20, 8);
    call {:si_unique_call 661} {:cexpr "tmp___0"} boogie_si_record_i32($i21);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i64($i18, 3);
    call {:si_unique_call 662} {:cexpr "hash_size"} boogie_si_record_i64($i24);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i25 := $ule.i64($i24, 63);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $i24;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(256, 1));
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i64.i32($i26);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $i29 := dm_exception_table_init($p27, $i28, 0);
    call {:si_unique_call 664} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(272, 1));
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $p32 := $M.8;
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} dm_exception_table_exit($p31, $p32);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 12);
    goto $bb9;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i26 := 64;
    goto $bb13;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 12);
    goto $bb9;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i17 := 64;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    goto $bb3;
}



const dm_kcopyd_client_create: ref;

axiom dm_kcopyd_client_create == $sub.ref(0, 367651);

procedure dm_kcopyd_client_create($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dm_kcopyd_client_create($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $p1 := external_alloc();
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 368683);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $i1 := ldv_is_err($p0);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 668} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 369715);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 670} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mempool_create_slab_pool: ref;

axiom mempool_create_slab_pool == $sub.ref(0, 370747);

procedure mempool_create_slab_pool($i0: i32, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation mempool_create_slab_pool($i0: i32, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} {:cexpr "mempool_create_slab_pool:arg:min_nr"} boogie_si_record_i32($i0);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $p3 := mempool_create($i0, mempool_alloc_slab, mempool_free_slab, $p2);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const register_snapshot: ref;

axiom register_snapshot == $sub.ref(0, 371779);

procedure register_snapshot($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $M.11, assertsPassed, $CurrAddr;



implementation register_snapshot($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p17: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(160, 1));
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} $p5 := kmalloc(40, 208);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} down_write(_origins_lock);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $i10 := __validate_exception_handover($p0);
    call {:si_unique_call 676} {:cexpr "r"} boogie_si_record_i32($i10);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $p13 := __lookup_origin($p4);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i15 == 1);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} INIT_LIST_HEAD($p18);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p4);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} __insert_origin($p6);
    assume {:verifier.code 0} true;
    $p17 := $p5;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} __insert_snapshot($p17, $p0);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} up_write(_origins_lock);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb9:
    assume $i15 == 1;
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p6);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} kfree($p16);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $p17 := $p13;
    goto $bb11;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p6);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} kfree($p12);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const dm_add_exception: ref;

axiom dm_add_exception == $sub.ref(0, 372811);

procedure dm_add_exception($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation dm_add_exception($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} {:cexpr "dm_add_exception:arg:old"} boogie_si_record_i64($i1);
    call {:si_unique_call 685} {:cexpr "dm_add_exception:arg:new"} boogie_si_record_i64($i2);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $p4 := alloc_completed_exception(208);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, $i1);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p9, $i2);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 616)), $mul.ref(272, 1));
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} dm_insert_exception($p10, $p4);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_124:
    assume !assertsPassed;
    return;
}



const dm_set_target_max_io_len: ref;

axiom dm_set_target_max_io_len == $sub.ref(0, 373843);

procedure dm_set_target_max_io_len($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dm_set_target_max_io_len($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 688} {:cexpr "dm_set_target_max_io_len:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 1} true;
    call {:si_unique_call 689} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 690} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __validate_exception_handover: ref;

axiom __validate_exception_handover == $sub.ref(0, 374875);

procedure __validate_exception_handover($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.10, $M.11, $M.0, $CurrAddr;



implementation __validate_exception_handover($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p1, $0.ref);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p2, $0.ref);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p3, $0.ref);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $i4 := __find_snapshots_sharing_cow($p0, $p1, $p2, $p3);
    call {:si_unique_call 695} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.10, $p2);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.9, $p1);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(176, 1));
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, $p2i.ref.i64(dm_snapshot_merge_target_name));
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.11, $p3);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.9, $p1);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 112)), $mul.ref(56, 1));
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i38 == 1);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.9, $p1);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(176, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, .str.33);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb6;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb18;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(176, 1));
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, .str.32);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb6;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb6;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(176, 1));
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, .str.31);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __insert_origin: ref;

axiom __insert_origin == $sub.ref(0, 375907);

procedure __insert_origin($p0: ref);
  free requires assertsPassed;



implementation __insert_origin($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $i3 := origin_hash($p2);
    call {:si_unique_call 697} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p4 := $M.14;
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i3);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 16));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} list_add_tail($p7, $p6);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    return;
}



const mempool_alloc_slab: ref;

axiom mempool_alloc_slab == $sub.ref(0, 376939);

procedure mempool_alloc_slab($i0: i32, $p1: ref) returns ($r: ref);



const mempool_free_slab: ref;

axiom mempool_free_slab == $sub.ref(0, 377971);

procedure mempool_free_slab($p0: ref, $p1: ref);



const mempool_create: ref;

axiom mempool_create == $sub.ref(0, 379003);

procedure mempool_create($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation mempool_create($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} {:cexpr "mempool_create:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $p4 := external_alloc();
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 380035);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 381067);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const calc_max_buckets: ref;

axiom calc_max_buckets == $sub.ref(0, 382099);

procedure calc_max_buckets() returns ($r: i32);
  free requires assertsPassed;



implementation calc_max_buckets() returns ($r: i32)
{
  var $i0: i64;
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i0 := $udiv.i64(2097152, 16);
    call {:si_unique_call 701} {:cexpr "mem"} boogie_si_record_i64($i0);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i64.i32($i0);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __rounddown_pow_of_two: ref;

axiom __rounddown_pow_of_two == $sub.ref(0, 383131);

procedure __rounddown_pow_of_two($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __rounddown_pow_of_two($i0: i64) returns ($r: i64)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} {:cexpr "__rounddown_pow_of_two:arg:n"} boogie_si_record_i64($i0);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $i1 := fls_long($i0);
    call {:si_unique_call 704} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32($i1, 1);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64(1, $i3);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dm_exception_table_init: ref;

axiom dm_exception_table_init == $sub.ref(0, 384163);

procedure dm_exception_table_init($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation dm_exception_table_init($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i16: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} {:cexpr "dm_exception_table_init:arg:size"} boogie_si_record_i32($i1);
    call {:si_unique_call 706} {:cexpr "dm_exception_table_init:arg:hash_shift"} boogie_si_record_i32($i2);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i2);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i1, 1);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i1);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $p7 := dm_vcalloc($i6, 16);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p7);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i15 := $ult.i32(0, $i1);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb8;

  $bb8:
    call $p17, $p18, $i19, $p20, $i21, $i22, $i16 := dm_exception_table_init_loop_$bb8($p0, $i1, $p17, $p18, $i19, $p20, $i21, $i22, $i16);
    goto $bb8_last;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i16);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p18, $mul.ref($i19, 16));
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} INIT_LIST_HEAD($p20);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i16, 1);
    call {:si_unique_call 709} {:cexpr "i"} boogie_si_record_i32($i21);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i22 := $ult.i32($i21, $i1);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i16 := $i21;
    goto $bb10_dummy;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 12);
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3467;
}



const dm_vcalloc: ref;

axiom dm_vcalloc == $sub.ref(0, 385195);

procedure dm_vcalloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation dm_vcalloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} {:cexpr "dm_vcalloc:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 711} {:cexpr "dm_vcalloc:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $p2 := external_alloc();
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fls_long: ref;

axiom fls_long == $sub.ref(0, 386227);

procedure fls_long($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation fls_long($i0: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} {:cexpr "fls_long:arg:l"} boogie_si_record_i64($i0);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} $i1 := fls64($i0);
    call {:si_unique_call 715} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fls64: ref;

axiom fls64 == $sub.ref(0, 387259);

procedure fls64($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation fls64($i0: i64) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} {:cexpr "fls64:arg:x"} boogie_si_record_i64($i0);
    call {:si_unique_call 717} $i1 := devirtbounce.17(0, $i0, $sub.i32(0, 1));
    call {:si_unique_call 718} {:cexpr "bitpos"} boogie_si_record_i32($i1);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const origin_ctr: ref;

axiom origin_ctr == $sub.ref(0, 388291);

procedure origin_ctr($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation origin_ctr($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i11: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} {:cexpr "origin_ctr:arg:argc"} boogie_si_record_i32($i1);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i1, 1);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $p6 := kmalloc(40, 208);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $i14 := dm_table_get_mode($p13);
    call {:si_unique_call 722} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p2);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $i17 := dm_get_device($p0, $p15, $i14, $p16);
    call {:si_unique_call 724} {:cexpr "r"} boogie_si_record_i32($i17);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p0);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p6);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(36, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 1);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, .str.58);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p7);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} kfree($p24);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i11 := $i17;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i5 := $i11;
    goto $bb3;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, .str.57);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb7;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, .str.56);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const origin_dtr: ref;

axiom origin_dtr == $sub.ref(0, 389323);

procedure origin_dtr($p0: ref);
  free requires assertsPassed;



implementation origin_dtr($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} dm_put_device($p0, $p5);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p3);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} kfree($p6);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    return;
}



const origin_map: ref;

axiom origin_map == $sub.ref(0, 390355);

procedure origin_map($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $M.22, $M.17, $M.18, $M.19, $M.1, $M.9, $M.10, $M.11, $M.16, $CurrAddr, assertsPassed, $M.31, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35;



implementation origin_map($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $p26: ref;
  var $i27: i64;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p8);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i12 := $and.i64($i11, 8192);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 729} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 16385);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 1);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i64.i32($i27);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32($i30, 1);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i28, $i31);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32($i24, $i32);
    call {:si_unique_call 730} {:cexpr "available_sectors"} boogie_si_record_i32($i33);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i37 := $lshr.i32($i36, 9);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i38 := $ugt.i32($i37, $i33);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $i41 := do_origin($p40, $p1);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    call {:si_unique_call 733} {:cexpr "tmp___0"} boogie_si_record_i32($i41);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i18 := $i41;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} dm_accept_partial_bio($p1, $i33);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb3;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb3;
}



const origin_postsuspend: ref;

axiom origin_postsuspend == $sub.ref(0, 391387);

procedure origin_postsuspend($p0: ref);
  free requires assertsPassed;



implementation origin_postsuspend($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} down_write(_origins_lock);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} __remove_dm_origin($p3);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} up_write(_origins_lock);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    return;
}



const origin_resume: ref;

axiom origin_resume == $sub.ref(0, 392419);

procedure origin_resume($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation origin_resume($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} $i8 := get_origin_minimum_chunksize($p7);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} down_write(_origins_lock);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} __insert_dm_origin($p3);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} up_write(_origins_lock);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    return;
}



const origin_status: ref;

axiom origin_status == $sub.ref(0, 393451);

procedure origin_status($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation origin_status($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var vslice_dummy_var_46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} {:cexpr "origin_status:arg:type"} boogie_si_record_i32($i1);
    call {:si_unique_call 742} {:cexpr "origin_status:arg:status_flags"} boogie_si_record_i32($i2);
    call {:si_unique_call 743} {:cexpr "origin_status:arg:maxlen"} boogie_si_record_i32($i4);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i4);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} vslice_dummy_var_46 := snprintf.ref.i64.ref.ref($p3, $i11, .str.59, $p15);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb2:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb6;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 0);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const origin_merge: ref;

axiom origin_merge == $sub.ref(0, 394483);

procedure origin_merge($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.31, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35, $CurrAddr, assertsPassed;



implementation origin_merge($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} {:cexpr "origin_merge:arg:max_size"} boogie_si_record_i32($i3);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $p11 := bdev_get_queue($p10);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 4216)), $mul.ref(304, 1));
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p20);
    call {:si_unique_call 747} {:cexpr "origin_merge:arg:_min1"} boogie_si_record_i32($i3);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p11, $mul.ref(0, 4216)), $mul.ref(304, 1));
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    call {:si_unique_call 748} $i24 := devirtbounce.18($p23, $p11, $p1, $p2);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    call {:si_unique_call 749} {:cexpr "tmp___0"} boogie_si_record_i32($i24);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i3, $i24);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i26 := $i24;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i16 := $i26;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i26 := $i3;
    goto $bb7;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i16 := $i3;
    goto $bb3;
}



const origin_iterate_devices: ref;

axiom origin_iterate_devices == $sub.ref(0, 395515);

procedure origin_iterate_devices($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation origin_iterate_devices($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    call {:si_unique_call 750} $i10 := devirtbounce.8($p1, $p0, $p7, 0, $i9, $p2);
    call {:si_unique_call 751} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 396547);

procedure snprintf.ref.i64.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref) returns ($r: i32);



const get_origin_minimum_chunksize: ref;

axiom get_origin_minimum_chunksize == $sub.ref(0, 397579);

procedure get_origin_minimum_chunksize($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_origin_minimum_chunksize($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} down_read(_origins_lock);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $p1 := __lookup_origin($p0);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $i2 := __minimum_chunk_size($p1);
    call {:si_unique_call 755} {:cexpr "min_chunksize"} boogie_si_record_i32($i2);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} up_read(_origins_lock);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __insert_dm_origin: ref;

axiom __insert_dm_origin == $sub.ref(0, 398611);

procedure __insert_dm_origin($p0: ref);
  free requires assertsPassed;



implementation __insert_dm_origin($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $i5 := origin_hash($p4);
    call {:si_unique_call 758} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $p6 := $M.13;
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i5);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p6, $mul.ref($i7, 16));
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} list_add_tail($p9, $p8);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    return;
}



const __minimum_chunk_size: ref;

axiom __minimum_chunk_size == $sub.ref(0, 399643);

procedure __minimum_chunk_size($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __minimum_chunk_size($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p14: ref;
  var $i15: i32;
  var $i34: i32;
  var $i13: i32;
  var $i35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $r := $i35;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref($sub.ref(0, 184), 616));
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref($sub.ref(0, 184), 616)), $mul.ref(184, 1));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i9, $i11);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i13 := 0;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i35 := $i13;
    goto $bb20;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $p14, $i15 := $p7, 0;
    goto $bb6;

  $bb6:
    call $p16, $p17, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $p27, $p28, $p29, $p30, $p31, $i32, $i33, $p14, $i15, $i34 := __minimum_chunk_size_loop_$bb6($i11, $p16, $p17, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $p27, $p28, $p29, $p30, $p31, $i32, $i33, $p14, $i15, $i34);
    goto $bb6_last;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p14, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    call {:si_unique_call 760} {:cexpr "__y"} boogie_si_record_i32($i19);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i15, 0);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i25 := $i19;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 616)), $mul.ref(184, 1)), $mul.ref(0, 1));
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p29, $mul.ref($sub.ref(0, 184), 616));
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p29, $mul.ref($sub.ref(0, 184), 616)), $mul.ref(184, 1));
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, $i11);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i34 := $i25;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i13 := $i34;
    goto $bb5;

  $bb17:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $p14, $i15 := $p30, $i25;
    goto $bb17_dummy;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i19, 0);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i15;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb16;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i22 := $ult.i32($i15, $i19);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i22 == 1);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i23 := $i19;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb15;

  $bb12:
    assume $i22 == 1;
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i23 := $i15;
    goto $bb14;

  $bb17_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3709;
}



const __remove_dm_origin: ref;

axiom __remove_dm_origin == $sub.ref(0, 400675);

procedure __remove_dm_origin($p0: ref);
  free requires assertsPassed;



implementation __remove_dm_origin($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} list_del($p1);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    return;
}



const dm_accept_partial_bio: ref;

axiom dm_accept_partial_bio == $sub.ref(0, 401707);

procedure dm_accept_partial_bio($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation dm_accept_partial_bio($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} {:cexpr "dm_accept_partial_bio:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    return;
}



const snapshot_merge_map: ref;

axiom snapshot_merge_map == $sub.ref(0, 402739);

procedure snapshot_merge_map($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.20, $M.21, $M.22, $M.17, $M.18, $M.19, $M.9, $M.10, $M.11, $M.16, $CurrAddr, assertsPassed, $M.31, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35;



implementation snapshot_merge_map($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i56: i32;
  var $p74: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} init_tracked_chunk($p1);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i7 := $and.i64($i6, 8192);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $i27 := sector_to_chunk($p23, $i26);
    call {:si_unique_call 767} {:cexpr "chunk"} boogie_si_record_i64($i27);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} down_write($p28);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(272, 1));
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $p33 := dm_lookup_exception($p32, $i27);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(160, 1));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p65, $p64);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.0, $p66);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $i68 := $and.i64($i67, 16385);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i69 := $eq.i64($i68, 1);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i56 := 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} up_write($p74);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i21 := $i56;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb27:
    assume $i69 == 1;
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} up_write($p70);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(160, 1));
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $i73 := do_origin($p72, $p1);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    call {:si_unique_call 776} {:cexpr "tmp___0"} boogie_si_record_i32($i73);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i21 := $i73;
    goto $bb6;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i35 == 1;
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i38 := $and.i64($i37, 16385);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i38, 1);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} remap_exception($p4, $p33, $p1, $i27);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.0, $p57);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i59 := $and.i64($i58, 16385);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i60 := $eq.i64($i59, 1);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i56 := 1;
    goto $bb21;

  $bb23:
    assume $i60 == 1;
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} track_chunk($p4, $p1, $i27);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb14:
    assume $i39 == 1;
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(584, 1));
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $i42 := $ule.i64($i41, $i27);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb16;

  $bb17:
    assume $i42 == 1;
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(584, 1));
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(592, 1));
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i44, $i47);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i49 := $ugt.i64($i48, $i27);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb16;

  $bb19:
    assume $i49 == 1;
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(160, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p54, $p53);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(600, 1));
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} bio_list_add($p55, $p1);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i56 := 0;
    goto $bb21;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $i9 := dm_bio_get_target_bio_nr($p1);
    call {:si_unique_call 765} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(168, 1));
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p19);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i21 := 1;
    goto $bb6;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(160, 1));
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p14);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const snapshot_merge_presuspend: ref;

axiom snapshot_merge_presuspend == $sub.ref(0, 403771);

procedure snapshot_merge_presuspend($p0: ref);
  free requires assertsPassed;



implementation snapshot_merge_presuspend($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} stop_merge($p3);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    return;
}



const snapshot_merge_resume: ref;

axiom snapshot_merge_resume == $sub.ref(0, 404803);

procedure snapshot_merge_resume($p0: ref);
  free requires assertsPassed;
  modifies $M.9, $M.10, $M.11, $M.0, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr, $M.31, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35, $M.1, assertsPassed;



implementation snapshot_merge_resume($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} snapshot_resume($p0);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 616)), $mul.ref(160, 1));
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $i8 := get_origin_minimum_chunksize($p7);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(32, 1));
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} start_merge($p3);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;
}



const dm_bio_get_target_bio_nr: ref;

axiom dm_bio_get_target_bio_nr == $sub.ref(0, 405835);

procedure dm_bio_get_target_bio_nr($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_bio_get_target_bio_nr($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 32), 168)), $mul.ref(16, 1));
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const transient_ctr: ref;

axiom transient_ctr == $sub.ref(0, 406867);

procedure transient_ctr($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation transient_ctr($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p10: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} {:cexpr "transient_ctr:arg:argc"} boogie_si_record_i32($i1);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $p3 := kmalloc(8, 208);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, 0);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p3);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_145:
    assume !assertsPassed;
    return;
}



const transient_dtr: ref;

axiom transient_dtr == $sub.ref(0, 407899);

procedure transient_dtr($p0: ref);
  free requires assertsPassed;



implementation transient_dtr($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} kfree($p2);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    return;
}



const transient_read_metadata: ref;

axiom transient_read_metadata == $sub.ref(0, 408931);

procedure transient_read_metadata($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation transient_read_metadata($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const transient_prepare_exception: ref;

axiom transient_prepare_exception == $sub.ref(0, 409963);

procedure transient_prepare_exception($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation transient_prepare_exception($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $p7 := dm_snap_cow($p6);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $i10 := get_dev_size($p9);
    call {:si_unique_call 786} {:cexpr "tmp___0"} boogie_si_record_i64($i10);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i14);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i12, $i15);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i64($i16, $i10);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $i21 := sector_to_chunk($p0, $i20);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p22, $i21);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i24, $i27);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i28);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 1);
    goto $bb3;
}



const transient_commit_exception: ref;

axiom transient_commit_exception == $sub.ref(0, 410995);

procedure transient_commit_exception($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $M.11, $M.23, $M.1, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr, $M.31, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35, assertsPassed;



implementation transient_commit_exception($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} devirtbounce.19($p2, $p3, 1);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;
}



const transient_status: ref;

axiom transient_status == $sub.ref(0, 412027);

procedure transient_status($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation transient_status($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i7: i32;

  $bb0:
    call {:si_unique_call 789} {:cexpr "transient_status:arg:status"} boogie_si_record_i32($i1);
    call {:si_unique_call 790} {:cexpr "transient_status:arg:maxlen"} boogie_si_record_i32($i3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i7 := $i19;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i8 := $ult.i32(0, $i3);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 0);
    call {:si_unique_call 793} {:cexpr "sz"} boogie_si_record_i32($i18);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb13;

  $bb10:
    assume $i8 == 1;
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64(0);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p2, $mul.ref($i9, 1));
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i3, 0);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i14);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $i16 := scnprintf.ref.i64.ref.i64($p10, $i12, .str.80, $i15);
    call {:si_unique_call 792} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb12;

  $bb2:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb7:
    assume $i6 == 1;
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb9;
}



const transient_usage: ref;

axiom transient_usage == $sub.ref(0, 413059);

procedure transient_usage($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation transient_usage($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i8);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} $p11 := dm_snap_cow($p10);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $i14 := get_dev_size($p13);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1, $i14);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, 0);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    return;
}



const persistent_ctr: ref;

axiom persistent_ctr == $sub.ref(0, 414091);

procedure persistent_ctr($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation persistent_ctr($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p29: ref;
  var $i8: i32;
  var vslice_dummy_var_47: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 797} {:cexpr "persistent_ctr:arg:argc"} boogie_si_record_i32($i1);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $p4 := kmalloc(104, 208);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p0);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(12, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 1);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 1);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $0.ref);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $0.ref);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(40, 1));
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $0.ref);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(56, 1));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, 2);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(64, 1));
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 0);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(72, 1));
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 0);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(68, 1));
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} atomic_set($p18, 0);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(80, 1));
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $0.ref);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $p20 := __alloc_workqueue_key.ref.i32.i32.ref.ref(.str.83, 8, 0, $p3, .str.82);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(96, 1));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p20);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(96, 1));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p4);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p5);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} kfree($p26);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} vslice_dummy_var_47 := printk.ref(.str.84);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_151:
    assume !assertsPassed;
    return;
}



const persistent_dtr: ref;

axiom persistent_dtr == $sub.ref(0, 415123);

procedure persistent_dtr($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation persistent_dtr($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $p1 := get_info($p0);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(96, 1));
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} destroy_workqueue($p3);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} free_area($p1);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(80, 1));
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} vfree($p12);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} kfree($p13);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} dm_io_client_destroy($p9);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const persistent_read_metadata: ref;

axiom persistent_read_metadata == $sub.ref(0, 416155);

procedure persistent_read_metadata($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, $M.0, $M.36, $M.37, $M.38, $M.41, $CurrAddr, $M.34, $M.35, assertsPassed;



implementation persistent_read_metadata($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i8: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.31, $p3);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $M.31 := $store.i32($M.31, $p3, $i4);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $p5 := get_info($p0);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $i6 := read_header($p5, $p3);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    call {:si_unique_call 812} {:cexpr "r"} boogie_si_record_i32($i6);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i13 := $shl.i32($i12, 9);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i14 := $udiv.i32($i13, 16);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $p19 := dm_vcalloc($i18, 16);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(80, 1));
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p19);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(80, 1));
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.31, $p3);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 1);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(12, 1));
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $i44 := read_exceptions($p5, $p1, $p2);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    call {:si_unique_call 823} {:cexpr "r"} boogie_si_record_i32($i44);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i8 := $i44;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i43 == 1;
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} vslice_dummy_var_50 := printk.ref.i32(.str.89, $i39);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $i28 := write_header($p5);
    call {:si_unique_call 815} {:cexpr "r"} boogie_si_record_i32($i28);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p31, 0);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} zero_memory_area($p5);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $i32 := zero_disk_area($p5, 0);
    call {:si_unique_call 819} {:cexpr "r"} boogie_si_record_i32($i32);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i8 := $i32;
    goto $bb3;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} vslice_dummy_var_49 := printk.ref(.str.88);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} vslice_dummy_var_48 := printk.ref(.str.87);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i8 := $i28;
    goto $bb3;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;

  SeqInstr_154:
    assume !assertsPassed;
    return;
}



const persistent_prepare_exception: ref;

axiom persistent_prepare_exception == $sub.ref(0, 417187);

procedure persistent_prepare_exception($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation persistent_prepare_exception($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $p2 := get_info($p0);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $p5 := dm_snap_cow($p4);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $i8 := get_dev_size($p7);
    call {:si_unique_call 827} {:cexpr "tmp___1"} boogie_si_record_i64($i8);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(56, 1));
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 1);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i15 := $mul.i64($i11, $i14);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i16 := $ugt.i64($i15, $i8);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(56, 1));
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i19);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(56, 1));
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 1);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(56, 1));
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, $i23);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} skip_metadata($p2);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(68, 1));
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} atomic_inc($p25);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 28);
    goto $bb3;
}



const persistent_commit_exception: ref;

axiom persistent_commit_exception == $sub.ref(0, 418219);

procedure persistent_commit_exception($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.32, $M.33, $M.0, $M.36, $M.37, $M.38, $CurrAddr, $M.9, $M.10, $M.11, $M.23, $M.1, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.31, $M.41, $M.34, $M.35, assertsPassed;



implementation persistent_commit_exception($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $i68: i32;
  var $p82: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $p5 := get_info($p0);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $M.32 := $store.i64($M.32, $p8, $i7);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $M.33 := $store.i64($M.33, $p11, $i10);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(64, 1));
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    call {:si_unique_call 832} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(64, 1));
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 1);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(64, 1));
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} write_exception($p5, $i13, $p4);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(72, 1));
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    call {:si_unique_call 834} {:cexpr "tmp___1"} boogie_si_record_i32($i19);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(72, 1));
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 1);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(72, 1));
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(80, 1));
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i19);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p25, $mul.ref($i26, 16)), $mul.ref(0, 1));
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p2);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p25, $mul.ref($i26, 16)), $mul.ref(8, 1));
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p3);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(68, 1));
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $i31 := atomic_dec_and_test($p30);
    call {:si_unique_call 836} {:cexpr "tmp___2"} boogie_si_record_i32($i31);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(64, 1));
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i39, $i41);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(12, 1));
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(64, 1));
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i56, $i58);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(72, 1));
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i67 := $ugt.i32($i66, 0);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(72, 1));
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, 0);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume $i67 == 1;
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i68 := 0;
    goto $bb26;

  $bb26:
    call $p69, $p70, $i71, $p73, $p74, $p75, $p76, $p77, $i78, $i79, $i80, $i81, $i68 := persistent_commit_exception_loop_$bb26($p5, $p65, $p69, $p70, $i71, $p73, $p74, $p75, $p76, $p77, $i78, $i79, $i80, $i81, $i68);
    goto $bb26_last;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(80, 1));
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i71 := $zext.i32.i64($i68);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p70, $mul.ref($i71, 16)), $mul.ref(0, 1));
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p70, $mul.ref($i71, 16)), $mul.ref(8, 1));
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(12, 1));
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    call {:si_unique_call 842} devirtbounce.19($p74, $p76, $i78);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i68, 1);
    call {:si_unique_call 843} {:cexpr "i"} boogie_si_record_i32($i79);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p65);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i81 := $ugt.i32($i80, $i79);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i81 == 1);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb28:
    assume $i81 == 1;
    assume {:verifier.code 0} true;
    $i68 := $i79;
    goto $bb28_dummy;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i59 == 1;
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(64, 1));
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, 0);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.0, $p61);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 1);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p64, $i63);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} zero_memory_area($p5);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i51 == 1;
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} $i52 := area_io($p5, 13329);
    call {:si_unique_call 840} {:cexpr "tmp___4"} boogie_si_record_i32($i52);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i53 == 1;
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(12, 1));
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 0);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume $i42 == 1;
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 1);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $i46 := zero_disk_area($p5, $i45);
    call {:si_unique_call 838} {:cexpr "tmp___3"} boogie_si_record_i32($i46);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i47 == 1;
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(12, 1));
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, 0);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i32 == 1;
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(64, 1));
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i34, $i36);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb3;

  $bb4:
    assume $i37 == 1;
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb28_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4257;
}



const persistent_prepare_merge: ref;

axiom persistent_prepare_merge == $sub.ref(0, 419251);

procedure persistent_prepare_merge($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.36, $M.37, $M.38, $M.34, $M.35, $CurrAddr;



implementation persistent_prepare_merge($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $i47: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $i34: i32;
  var $i58: i32;
  var $i33: i32;
  var $i54: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $p4 := get_info($p0);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 104)), $mul.ref(64, 1));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 104)), $mul.ref(64, 1));
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i24, 1);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} read_exception($p4, $p22, $i25, $p3);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.34, $p26);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1, $i27);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.35, $p28);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i29);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 104)), $mul.ref(64, 1));
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i32 := $ult.i32(1, $i31);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i33 := 1;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i54 := $i33;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $i11 := $i54;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb11:
    assume $i32 == 1;
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i34 := 1;
    goto $bb14;

  $bb14:
    call $p35, $p36, $p37, $i38, $i39, $i40, $p41, $i42, $i43, $i44, $i45, $i46, $p48, $i49, $i50, $i51, $i52, $i53, $i47, $i55, $i56, $i57, $i34, $i58 := persistent_prepare_merge_loop_$bb14($p1, $p2, $p3, $p4, $p30, $p35, $p36, $p37, $i38, $i39, $i40, $p41, $i42, $i43, $i44, $i45, $i46, $p48, $i49, $i50, $i51, $i52, $i53, $i47, $i55, $i56, $i57, $i34, $i58);
    goto $bb14_last;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 104)), $mul.ref(64, 1));
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32($i38, $i34);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i39, 1);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} read_exception($p4, $p36, $i40, $p3);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.34, $p41);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p1);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i34);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i45 := $sub.i64($i43, $i44);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i42, $i45);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $i47 := $i34;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i46 == 1);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.35, $p48);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.0, $p2);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i34);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i52 := $sub.i64($i50, $i51);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i49, $i52);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i47 := $i34;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i34, 1);
    call {:si_unique_call 850} {:cexpr "nr_consecutive"} boogie_si_record_i32($i55);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p30);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i57 := $ult.i32($i55, $i56);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i58 := $i55;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i33 := $i58;
    goto $bb13;

  $bb23:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i34 := $i55;
    goto $bb23_dummy;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i54 := $i47;
    goto $bb21;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb17;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64($i13, 1);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, $i14);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $i16 := area_io($p4, 0);
    call {:si_unique_call 847} {:cexpr "r"} boogie_si_record_i32($i16);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 104)), $mul.ref(64, 1));
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i11 := $i16;
    goto $bb5;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb5;

  $bb23_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4326;
}



const persistent_commit_merge: ref;

axiom persistent_commit_merge == $sub.ref(0, 420283);

procedure persistent_commit_merge($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.36, $M.37, $M.38, $CurrAddr;



implementation persistent_commit_merge($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i11: i32;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} {:cexpr "persistent_commit_merge:arg:nr_merged"} boogie_si_record_i32($i1);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $p2 := get_info($p0);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(64, 1));
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i1, $i4);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 854} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32(0, $i1);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $i18 := area_io($p2, 13329);
    call {:si_unique_call 859} {:cexpr "r"} boogie_si_record_i32($i18);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 0);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(64, 1));
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32($i22, $i1);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(64, 1));
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} $i27 := area_location($p2, $i26);
    call {:si_unique_call 861} {:cexpr "tmp___1"} boogie_si_record_i64($i27);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(64, 1));
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i29);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i27, $i30);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 1);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(56, 1));
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p33, $i32);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    goto $bb15;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb8;

  $bb8:
    call $p12, $i13, $i14, $i15, $i16, $i17, $i11 := persistent_commit_merge_loop_$bb8($i1, $p2, $p12, $i13, $i14, $i15, $i16, $i17, $i11);
    goto $bb8_last;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(64, 1));
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32($i13, $i11);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i14, 1);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} clear_exception($p2, $i15);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i11, 1);
    call {:si_unique_call 857} {:cexpr "i"} boogie_si_record_i32($i16);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, $i1);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i16;
    goto $bb10_dummy;

  $bb1:
    assume $i9 == 1;
    call {:si_unique_call 855} devirtbounce.5(0, .str.85, 810, 12);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call persistent_commit_merge_loop_$bb3();
    goto $bb3_last;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4376;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const persistent_drop_snapshot: ref;

axiom persistent_drop_snapshot == $sub.ref(0, 421315);

procedure persistent_drop_snapshot($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.36, $M.37, $M.38, $CurrAddr;



implementation persistent_drop_snapshot($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var vslice_dummy_var_51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $p1 := get_info($p0);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(12, 1));
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $i3 := write_header($p1);
    call {:si_unique_call 864} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} vslice_dummy_var_51 := printk.ref(.str.93);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const persistent_status: ref;

axiom persistent_status == $sub.ref(0, 422347);

procedure persistent_status($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation persistent_status($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i7: i32;

  $bb0:
    call {:si_unique_call 866} {:cexpr "persistent_status:arg:status"} boogie_si_record_i32($i1);
    call {:si_unique_call 867} {:cexpr "persistent_status:arg:maxlen"} boogie_si_record_i32($i3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i7 := $i19;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i8 := $ult.i32(0, $i3);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 0);
    call {:si_unique_call 870} {:cexpr "sz"} boogie_si_record_i32($i18);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb13;

  $bb10:
    assume $i8 == 1;
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64(0);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p2, $mul.ref($i9, 1));
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i3, 0);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i14);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $i16 := scnprintf.ref.i64.ref.i64($p10, $i12, .str.94, $i15);
    call {:si_unique_call 869} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb12;

  $bb2:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb7:
    assume $i6 == 1;
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb9;
}



const persistent_usage: ref;

axiom persistent_usage == $sub.ref(0, 423379);

procedure persistent_usage($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation persistent_usage($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} $p4 := get_info($p0);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 104)), $mul.ref(56, 1));
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i10 := $mul.i64($i6, $i9);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i10);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $p13 := dm_snap_cow($p12);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $i16 := get_dev_size($p15);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1, $i16);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 2);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i23 := $mul.i64($i19, $i22);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i23);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    return;
}



const get_info: ref;

axiom get_info == $sub.ref(0, 424411);

procedure get_info($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_info($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const write_header: ref;

axiom write_header == $sub.ref(0, 425443);

procedure write_header($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.36, $M.37, $M.38, $CurrAddr;



implementation write_header($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(40, 1));
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i7 := $shl.i32($i6, 9);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 874} cmdloc_dummy_var_13 := $memset.i8(cmdloc_dummy_var_12, $p2, 0, $i8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_13;
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(40, 1));
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 1883336275);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(12, 1));
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(40, 1));
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} $i26 := chunk_io($p0, $p25, 0, 1, 1);
    call {:si_unique_call 876} {:cexpr "tmp"} boogie_si_record_i32($i26);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 426475);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const chunk_io: ref;

axiom chunk_io == $sub.ref(0, 427507);

procedure chunk_io($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.36, $M.37, $M.38, $M.0, $CurrAddr;



implementation chunk_io($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i1;
  var $i47: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $p60: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i48: i32;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var vslice_dummy_var_52: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $p5 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $p6 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} $p7 := $alloc($mul.ref(104, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 882} {:cexpr "chunk_io:arg:chunk"} boogie_si_record_i64($i2);
    call {:si_unique_call 883} {:cexpr "chunk_io:arg:rw"} boogie_si_record_i32($i3);
    call {:si_unique_call 884} {:cexpr "chunk_io:arg:metadata"} boogie_si_record_i32($i4);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} $p14 := dm_snap_cow($p13);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p17, $p16);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i23 := $mul.i64($i22, $i2);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $M.37 := $store.i64($M.37, $p24, $i23);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i28);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $M.38 := $store.i64($M.38, $p30, $i29);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i3);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 2);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 0);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $p1);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $0.ref);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $0.ref);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $p44);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i4, 0);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p7, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, $p5);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p7, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $p6);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p7, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} __init_work($p51, 1);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p9, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p52, 137438953408);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 104)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p9);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    cmdloc_dummy_var_15 := $M.0;
    call {:si_unique_call 889} cmdloc_dummy_var_16 := $memcpy.i8(cmdloc_dummy_var_14, cmdloc_dummy_var_15, $p55, $p56, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_16;
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 104)), $mul.ref(16, 1)), $mul.ref(32, 1));
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} lockdep_init_map($p58, .str.86, $p8, 0);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 104)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} INIT_LIST_HEAD($p60);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 104)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p62, do_metadata);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(96, 1));
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p7, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} vslice_dummy_var_52 := queue_work($p64, $p65);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(96, 1));
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} flush_workqueue($p68);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p7, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} destroy_work_on_stack($p69);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p7, $mul.ref(0, 104)), $mul.ref(96, 1));
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i48 := $i71;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $r := $i48;
    return;

  $bb1:
    assume $i46 == 1;
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} $i47 := dm_io($p6, 1, $p5, $0.ref);
    call {:si_unique_call 887} {:cexpr "tmp___0"} boogie_si_record_i32($i47);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i48 := $i47;
    goto $bb3;
}



const dm_io: ref;

axiom dm_io == $sub.ref(0, 428539);

procedure dm_io($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_io($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 895} {:cexpr "dm_io:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 1} true;
    call {:si_unique_call 896} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 897} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 429571);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 430603);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    return;
}



const do_metadata: ref;

axiom do_metadata == $sub.ref(0, 431635);

procedure do_metadata($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation do_metadata($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 16), 104)), $mul.ref(8, 1));
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 16), 104)), $mul.ref(0, 1));
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} $i7 := dm_io($p4, 1, $p6, $0.ref);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 16), 104)), $mul.ref(96, 1));
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 432667);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $i2 := queue_work_on(8192, $p0, $p1);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 902} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const flush_workqueue: ref;

axiom flush_workqueue == $sub.ref(0, 433699);

procedure flush_workqueue($p0: ref);
  free requires assertsPassed;



implementation flush_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    return;
}



const destroy_work_on_stack: ref;

axiom destroy_work_on_stack == $sub.ref(0, 434731);

procedure destroy_work_on_stack($p0: ref);
  free requires assertsPassed;



implementation destroy_work_on_stack($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 435763);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 903} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 1} true;
    call {:si_unique_call 904} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 905} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const clear_exception: ref;

axiom clear_exception == $sub.ref(0, 436795);

procedure clear_exception($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation clear_exception($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} {:cexpr "clear_exception:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $p4 := get_exception($p0, $p3, $i1);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p5, 0);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p6, 0);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    return;
}



const area_io: ref;

axiom area_io == $sub.ref(0, 437827);

procedure area_io($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.36, $M.37, $M.38, $M.0, $CurrAddr;



implementation area_io($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} {:cexpr "area_io:arg:rw"} boogie_si_record_i32($i1);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} $i4 := area_location($p0, $i3);
    call {:si_unique_call 910} {:cexpr "chunk"} boogie_si_record_i64($i4);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} $i7 := chunk_io($p0, $p6, $i4, $i1, 0);
    call {:si_unique_call 912} {:cexpr "r"} boogie_si_record_i32($i7);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;
}



const area_location: ref;

axiom area_location == $sub.ref(0, 438859);

procedure area_location($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation area_location($p0: ref, $i1: i64) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} {:cexpr "area_location:arg:area"} boogie_si_record_i64($i1);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i6 := $mul.i64($i5, $i1);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 1);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const get_exception: ref;

axiom get_exception == $sub.ref(0, 439891);

procedure get_exception($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation get_exception($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} {:cexpr "get_exception:arg:index"} boogie_si_record_i32($i2);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i5 := $ule.i32($i4, $i2);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 916} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i2);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p10, $mul.ref($i11, 16));
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb1:
    assume $i9 == 1;
    call {:si_unique_call 917} devirtbounce.5(0, .str.85, 406, 12);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call get_exception_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const read_exception: ref;

axiom read_exception == $sub.ref(0, 440923);

procedure read_exception($p0: ref, $p1: ref, $i2: i32, $p3: ref);
  free requires assertsPassed;
  modifies $M.34, $M.35;



implementation read_exception($p0: ref, $p1: ref, $i2: i32, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} {:cexpr "read_exception:arg:index"} boogie_si_record_i32($i2);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $p4 := get_exception($p0, $p1, $i2);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $M.34 := $store.i64($M.34, $p7, $i6);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $M.35 := $store.i64($M.35, $p10, $i9);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    return;
}



const write_exception: ref;

axiom write_exception == $sub.ref(0, 441955);

procedure write_exception($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation write_exception($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} {:cexpr "write_exception:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $p5 := get_exception($p0, $p4, $i1);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.32, $p6);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, $i7);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.33, $p9);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i10);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    return;
}



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 442987);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 923} devirtbounce.20(0, $p2, $p1, $p2);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.39, $p1);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const zero_disk_area: ref;

axiom zero_disk_area == $sub.ref(0, 444019);

procedure zero_disk_area($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.36, $M.37, $M.38, $M.0, $CurrAddr;



implementation zero_disk_area($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} {:cexpr "zero_disk_area:arg:area"} boogie_si_record_i64($i1);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} $i2 := area_location($p0, $i1);
    call {:si_unique_call 926} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} $i5 := chunk_io($p0, $p4, $i2, 1, 0);
    call {:si_unique_call 928} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const zero_memory_area: ref;

axiom zero_memory_area == $sub.ref(0, 445051);

procedure zero_memory_area($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation zero_memory_area($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i7 := $shl.i32($i6, 9);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.0;
    call {:si_unique_call 929} cmdloc_dummy_var_18 := $memset.i8(cmdloc_dummy_var_17, $p2, 0, $i8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_18;
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    return;
}



const skip_metadata: ref;

axiom skip_metadata == $sub.ref(0, 446083);

procedure skip_metadata($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation skip_metadata($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 1);
    call {:si_unique_call 930} {:cexpr "stride"} boogie_si_record_i32($i3);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(56, 1));
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    call {:si_unique_call 931} {:cexpr "next_free"} boogie_si_record_i64($i5);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i3);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i7 := $urem.i64($i5, $i6);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    call {:si_unique_call 932} {:cexpr "_res"} boogie_si_record_i32($i8);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(56, 1));
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 1);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(56, 1));
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i12);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const read_header: ref;

axiom read_header == $sub.ref(0, 447115);

procedure read_header($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.36, $M.37, $M.38, $M.31, $CurrAddr, assertsPassed;



implementation read_header($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i1;
  var $i47: i8;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i32;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i97: i32;
  var $i61: i32;
  var $i54: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i40 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} $p41 := dm_io_client_create();
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $p41);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} $i46 := IS_ERR($p45);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i8($i46);
    call {:si_unique_call 942} {:cexpr "tmp___3"} boogie_si_record_i8($i47);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i8.i1($i47);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $i55 := alloc_area($p0);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    call {:si_unique_call 946} {:cexpr "r"} boogie_si_record_i32($i55);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(40, 1));
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} $i59 := chunk_io($p0, $p58, 0, 0, 1);
    call {:si_unique_call 948} {:cexpr "r"} boogie_si_record_i32($i59);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(40, 1));
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 0);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p64, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 1883336275);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $M.31 := $store.i32($M.31, $p1, 0);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p64, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(12, 1));
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, $i73);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p64, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p77, $i76);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p64, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    call {:si_unique_call 951} {:cexpr "chunk_size"} boogie_si_record_i32($i79);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, $i79);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i40, 0);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} free_area($p0);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} $i93 := dm_exception_store_set_chunk_size($p92, $i79, $p2);
    call {:si_unique_call 955} {:cexpr "r"} boogie_si_record_i32($i93);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $i97 := alloc_area($p0);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    call {:si_unique_call 958} {:cexpr "r"} boogie_si_record_i32($i97);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i54 := $i97;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $r := $i54;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i94 == 1;
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.40, $p2);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} vslice_dummy_var_55 := printk.ref.i32.ref(.str.92, $i79, $p95);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i54 := $i93;
    goto $bb9;

  $bb27:
    assume $i85 == 1;
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} vslice_dummy_var_54 := printk.ref.i32.i32(.str.91, $i79, $i89);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i84 == 1;
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i54 := 0;
    goto $bb9;

  $bb21:
    assume $i70 == 1;
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} vslice_dummy_var_53 := printk.ref(.str.90);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32(0, 6);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} free_area($p0);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i54 := $i61;
    goto $bb9;

  $bb18:
    assume $i67 == 1;
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $M.31 := $store.i32($M.31, $p1, 1);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i54 := 0;
    goto $bb9;

  $bb14:
    assume $i60 == 1;
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i61 := $i59;
    goto $bb16;

  $bb11:
    assume $i56 == 1;
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i54 := $i55;
    goto $bb9;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i48 == 1;
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} $i52 := PTR_ERR($p51);
    call {:si_unique_call 944} {:cexpr "tmp___2"} boogie_si_record_i64($i52);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i64.i32($i52);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i54 := $i53;
    goto $bb9;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} $p12 := dm_snap_cow($p11);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $i15 := bdev_logical_block_size($p14);
    call {:si_unique_call 936} {:cexpr "tmp___0"} boogie_si_record_i16($i15);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i17 := $ashr.i32($i16, 9);
    call {:si_unique_call 937} {:cexpr "_max2"} boogie_si_record_i32($i17);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $i18 := $sgt.i32(32, $i17);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i18 == 1);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i19 := $i17;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i19);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32($i26, 1);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i27);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} $i35 := ffs($i34);
    call {:si_unique_call 939} {:cexpr "tmp___1"} boogie_si_record_i32($i35);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, $sub.i32(0, 1));
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i36);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb6;

  $bb3:
    assume $i18 == 1;
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i19 := 32;
    goto $bb5;
}



const read_exceptions: ref;

axiom read_exceptions == $sub.ref(0, 448147);

procedure read_exceptions($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.0, $M.34, $M.35, $CurrAddr, assertsPassed;



implementation read_exceptions($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $p22: ref;
  var $i23: i64;
  var $i24: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $i43: i32;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $i54: i32;
  var $i55: i64;
  var $i56: i64;
  var $i57: i1;
  var $i58: i64;
  var $i47: i64;
  var $i48: i64;
  var $i49: i64;
  var $i60: i64;
  var $i61: i1;
  var $i62: i32;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $i66: i64;
  var $p67: ref;
  var $i68: i64;
  var $i69: i64;
  var $i70: i1;
  var $i71: i64;
  var $i59: i64;
  var $p72: ref;
  var $i73: i64;
  var $i74: i64;
  var $p75: ref;
  var $i76: i1;
  var $i77: i8;
  var $i78: i1;
  var $i79: i64;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $i83: i64;
  var $i84: i32;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i32;
  var $i96: i64;
  var $p97: ref;
  var $i98: i1;
  var $i99: i32;
  var $i100: i64;
  var $i101: i64;
  var $i102: i1;
  var $i103: i32;
  var $p104: ref;
  var $i105: i64;
  var $i106: i64;
  var $p107: ref;
  var $i108: i32;
  var $i109: i1;
  var $i29: i64;
  var $p110: ref;
  var $i111: i64;
  var $i112: i64;
  var $p113: ref;
  var $i85: i32;
  var $i25: i32;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p3, 1);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} $p9 := dm_snap_cow($p8);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i16 := $shl.i32($i15, 9);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} $p17 := dm_bufio_client_create($p11, $i16, 1, 0, $0.ref, $0.ref);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} $i19 := IS_ERR($p18);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i8($i19);
    call {:si_unique_call 964} {:cexpr "tmp___1"} boogie_si_record_i8($i20);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} dm_bufio_set_minimum_buffers($p17, 13);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p26, 0);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.41, $p3);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i111 := $load.i64($M.0, $p110);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i112 := $sub.i64($i111, 1);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p113, $i112);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} skip_metadata($p0);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i85 := 0;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} dm_bufio_client_destroy($p17);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i25 := $i85;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb8;

  $bb8:
    call $p30, $i31, $i32, $i33, $i34, $i35, $i36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i47, $i48, $i49, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $p67, $i68, $i69, $i70, $i71, $i59, $p72, $i73, $i74, $p75, $i76, $i77, $i78, $i79, $i80, $i81, $p82, $i86, $i87, $i88, $p89, $p90, $p91, $p92, $p93, $i94, $i95, $i96, $p97, $i98, $i99, $i100, $i101, $i102, $i103, $p104, $i105, $i106, $p107, $i108, $i109, $i29, cmdloc_dummy_var_19, cmdloc_dummy_var_20, cmdloc_dummy_var_21 := read_exceptions_loop_$bb8($p0, $p1, $p2, $p3, $p4, $p17, $p30, $i31, $i32, $i33, $i34, $i35, $i36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i47, $i48, $i49, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $p67, $i68, $i69, $i70, $i71, $i59, $p72, $i73, $i74, $p75, $i76, $i77, $i78, $i79, $i80, $i81, $p82, $i86, $i87, $i88, $p89, $p90, $p91, $p92, $p93, $i94, $i95, $i96, $p97, $i98, $i99, $i100, $i101, $i102, $i103, $p104, $i105, $i106, $p107, $i108, $i109, $i29, cmdloc_dummy_var_19, cmdloc_dummy_var_20, cmdloc_dummy_var_21);
    goto $bb8_last;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i32 := $ugt.i64($i31, $i29);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 969} {:cexpr "tmp___2"} boogie_si_record_i64($i35);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i39 := $i29;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} $i40 := area_location($p0, $i39);
    call {:si_unique_call 972} {:cexpr "tmp___3"} boogie_si_record_i64($i40);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} $i41 := dm_bufio_get_device_size($p17);
    call {:si_unique_call 974} {:cexpr "tmp___4"} boogie_si_record_i64($i41);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i42 := $ule.i64($i41, $i40);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i32($i42);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} $i45 := ldv__builtin_expect($i44, 0);
    call {:si_unique_call 976} {:cexpr "tmp___5"} boogie_si_record_i64($i45);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i47 := $i39;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i46 == 1);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i48, $i49 := $i40, $i39;
    goto $bb16;

  $bb16:
    call $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i48, $i49, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $p67, $i68, $i69, $i70, $i71 := read_exceptions_loop_$bb16($p0, $p17, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i48, $i49, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $p67, $i68, $i69, $i70, $i71);
    goto $bb16_last;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} dm_bufio_prefetch($p17, $i48, 1);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i60 := $add.i64($i49, 1);
    call {:si_unique_call 991} {:cexpr "prefetch_area"} boogie_si_record_i64($i60);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $i61 := $eq.i64($i60, 0);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i62 := $zext.i1.i32($i61);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} $i64 := ldv__builtin_expect($i63, 0);
    call {:si_unique_call 993} {:cexpr "tmp___6"} boogie_si_record_i64($i64);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i66 := $i60;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i68 := $load.i64($M.0, $p67);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i69 := $add.i64($i68, 12);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i70 := $uge.i64($i69, $i60);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i50, $i71 := $i60, $i60;
    assume true;
    goto $bb17, $bb25;

  $bb25:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i59 := $i71;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i73 := $load.i64($M.0, $p72);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $i74 := area_location($p0, $i73);
    call {:si_unique_call 984} {:cexpr "chunk"} boogie_si_record_i64($i74);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} $p75 := dm_bufio_read($p17, $i74, $p4);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} $i76 := IS_ERR($p75);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i77 := $zext.i1.i8($i76);
    call {:si_unique_call 987} {:cexpr "tmp___8"} boogie_si_record_i8($i77);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i8.i1($i77);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i79 := $zext.i1.i64($i78);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} $i80 := ldv__builtin_expect($i79, 0);
    call {:si_unique_call 989} {:cexpr "tmp___9"} boogie_si_record_i64($i80);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $p82 := $p75;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} $i86 := insert_exceptions($p0, $p75, $p1, $p2, $p3);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    call {:si_unique_call 999} {:cexpr "r"} boogie_si_record_i32($i86);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.41, $p3);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 0);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.42, $p4);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} dm_bufio_release($p97);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} dm_bufio_forget($p17, $i74);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i86, 0);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i99 := $zext.i1.i32($i98);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i100 := $sext.i32.i64($i99);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} $i101 := ldv__builtin_expect($i100, 0);
    call {:si_unique_call 1004} {:cexpr "tmp___10"} boogie_si_record_i64($i101);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, 0);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $i103 := $i86;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i105 := $load.i64($M.0, $p104);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i106 := $add.i64($i105, 1);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p107, $i106);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.41, $p3);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i109 == 1);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb37:
    assume $i109 == 1;
    assume {:verifier.code 0} true;
    $i29 := $i59;
    goto $bb37_dummy;

  $bb34:
    assume $i102 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $i85 := $i103;
    goto $bb29;

  $bb31:
    assume $i88 == 1;
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i95 := $shl.i32($i94, 9);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i96 := $zext.i32.i64($i95);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.0;
    cmdloc_dummy_var_20 := $M.0;
    call {:si_unique_call 1000} cmdloc_dummy_var_21 := $memcpy.i8(cmdloc_dummy_var_19, cmdloc_dummy_var_20, $p90, $p75, $i96, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_21;
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    goto $bb33;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i81 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $i83 := PTR_ERR($p82);
    call {:si_unique_call 995} {:cexpr "tmp___7"} boogie_si_record_i64($i83);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i64.i32($i83);
    call {:si_unique_call 996} {:cexpr "r"} boogie_si_record_i32($i84);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i85 := $i84;
    goto $bb29;

  $bb17:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $i51 := area_location($p0, $i50);
    call {:si_unique_call 978} {:cexpr "tmp___3"} boogie_si_record_i64($i51);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} $i52 := dm_bufio_get_device_size($p17);
    call {:si_unique_call 980} {:cexpr "tmp___4"} boogie_si_record_i64($i52);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i53 := $ule.i64($i52, $i51);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i54 := $zext.i1.i32($i53);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i54);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} $i56 := ldv__builtin_expect($i55, 0);
    call {:si_unique_call 982} {:cexpr "tmp___5"} boogie_si_record_i64($i56);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i58 := $i50;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i48, $i49 := $i51, $i50;
    goto $bb19_dummy;

  $bb18:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i47 := $i58;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i59 := $i47;
    goto $bb20;

  $bb22:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i59 := $i66;
    goto $bb20;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb14;

  $bb10:
    assume $i36 == 1;
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    call {:si_unique_call 970} {:cexpr "prefetch_area"} boogie_si_record_i64($i38);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb12;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p17);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} $i23 := PTR_ERR($p22);
    call {:si_unique_call 966} {:cexpr "tmp___0"} boogie_si_record_i64($i23);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i23);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb37_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4902;
}



const dm_bufio_client_create: ref;

axiom dm_bufio_client_create == $sub.ref(0, 449179);

procedure dm_bufio_client_create($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref, $p5: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dm_bufio_client_create($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref, $p5: ref) returns ($r: ref)
{
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} {:cexpr "dm_bufio_client_create:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1007} {:cexpr "dm_bufio_client_create:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1008} {:cexpr "dm_bufio_client_create:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $p6 := external_alloc();
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;
}



const dm_bufio_set_minimum_buffers: ref;

axiom dm_bufio_set_minimum_buffers == $sub.ref(0, 450211);

procedure dm_bufio_set_minimum_buffers($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation dm_bufio_set_minimum_buffers($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} {:cexpr "dm_bufio_set_minimum_buffers:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    return;
}



const dm_bufio_get_device_size: ref;

axiom dm_bufio_get_device_size == $sub.ref(0, 451243);

procedure dm_bufio_get_device_size($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dm_bufio_get_device_size($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1011} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1012} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dm_bufio_prefetch: ref;

axiom dm_bufio_prefetch == $sub.ref(0, 452275);

procedure dm_bufio_prefetch($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;



implementation dm_bufio_prefetch($p0: ref, $i1: i64, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} {:cexpr "dm_bufio_prefetch:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1014} {:cexpr "dm_bufio_prefetch:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    return;
}



const dm_bufio_read: ref;

axiom dm_bufio_read == $sub.ref(0, 453307);

procedure dm_bufio_read($p0: ref, $i1: i64, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dm_bufio_read($p0: ref, $i1: i64, $p2: ref) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} {:cexpr "dm_bufio_read:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} $p3 := external_alloc();
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const insert_exceptions: ref;

axiom insert_exceptions == $sub.ref(0, 454339);

procedure insert_exceptions($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.34, $M.35, $M.0, $CurrAddr, assertsPassed;



implementation insert_exceptions($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i9: i32;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p4, 1);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i32($i7, 0);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb4;

  $bb4:
    call $p10, $i11, $i12, $i13, $p15, $i16, $p17, $i18, $i19, $p20, $i21, $i22, $p23, $p24, $i25, $p26, $i27, $i28, $i29, $i30, $i32, $i33, $i34, $i9 := insert_exceptions_loop_$bb4($p0, $p1, $p2, $p3, $p5, $p6, $p10, $i11, $i12, $i13, $p15, $i16, $p17, $i18, $i19, $p20, $i21, $i22, $p23, $p24, $i25, $p26, $i27, $i28, $i29, $i30, $i32, $i33, $i34, $i9);
    goto $bb4_last;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} read_exception($p0, $p1, $i9, $p5);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.35, $p10);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i13 := $i9;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(56, 1));
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.35, $p17);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i19 := $ule.i64($i16, $i18);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.34, $p24);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.35, $p26);
    call {:si_unique_call 1019} $i28 := devirtbounce.21($p2, $p3, $i25, $i27);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    call {:si_unique_call 1020} {:cexpr "r"} boogie_si_record_i32($i28);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i30 := $i28;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i9, 1);
    call {:si_unique_call 1021} {:cexpr "i"} boogie_si_record_i32($i32);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p6);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i34 := $ugt.i32($i33, $i32);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb17:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i9 := $i32;
    goto $bb17_dummy;

  $bb13:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb15;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.35, $p20);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 1);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(56, 1));
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p23, $i22);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(64, 1));
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p4, 0);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb17_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5039;
}



const dm_bufio_release: ref;

axiom dm_bufio_release == $sub.ref(0, 455371);

procedure dm_bufio_release($p0: ref);
  free requires assertsPassed;



implementation dm_bufio_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    return;
}



const dm_bufio_forget: ref;

axiom dm_bufio_forget == $sub.ref(0, 456403);

procedure dm_bufio_forget($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation dm_bufio_forget($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} {:cexpr "dm_bufio_forget:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    return;
}



const dm_bufio_client_destroy: ref;

axiom dm_bufio_client_destroy == $sub.ref(0, 457435);

procedure dm_bufio_client_destroy($p0: ref);
  free requires assertsPassed;



implementation dm_bufio_client_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    return;
}



const dm_io_client_create: ref;

axiom dm_io_client_create == $sub.ref(0, 458467);

procedure dm_io_client_create() returns ($r: ref);
  free requires assertsPassed;



implementation dm_io_client_create() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} $p0 := external_alloc();
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const alloc_area: ref;

axiom alloc_area == $sub.ref(0, 459499);

procedure alloc_area($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation alloc_area($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i4, 9);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    call {:si_unique_call 1024} {:cexpr "len"} boogie_si_record_i64($i6);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} $p7 := ldv_vmalloc_92($i6);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p7);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} $p13 := ldv_vzalloc_93($i6);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p13);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} $p19 := ldv_vmalloc_94($i6);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(40, 1));
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p19);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(40, 1));
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb9:
    assume $i24 == 1;
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} vfree($p27);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} vfree($p29);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 12);
    goto $bb13;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_175:
    assume !assertsPassed;
    return;
}



const free_area: ref;

axiom free_area == $sub.ref(0, 460531);

procedure free_area($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation free_area($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} vfree($p2);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $0.ref);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} vfree($p5);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $0.ref);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(40, 1));
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} vfree($p8);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(40, 1));
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $0.ref);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    return;
}



const ldv_vmalloc_92: ref;

axiom ldv_vmalloc_92 == $sub.ref(0, 461563);

procedure ldv_vmalloc_92($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_vmalloc_92($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} {:cexpr "ldv_vmalloc_92:arg:ldv_func_arg1"} boogie_si_record_i64($i0);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} ldv_check_alloc_nonatomic();
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} $p1 := ldv_undef_ptr();
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;
}



const ldv_vzalloc_93: ref;

axiom ldv_vzalloc_93 == $sub.ref(0, 462595);

procedure ldv_vzalloc_93($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_vzalloc_93($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} {:cexpr "ldv_vzalloc_93:arg:ldv_func_arg1"} boogie_si_record_i64($i0);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} ldv_check_alloc_nonatomic();
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} $p1 := ldv_undef_ptr();
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;
}



const ldv_vmalloc_94: ref;

axiom ldv_vmalloc_94 == $sub.ref(0, 463627);

procedure ldv_vmalloc_94($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_vmalloc_94($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} {:cexpr "ldv_vmalloc_94:arg:ldv_func_arg1"} boogie_si_record_i64($i0);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} ldv_check_alloc_nonatomic();
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $p1 := ldv_undef_ptr();
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;
}



const ldv_check_alloc_nonatomic: ref;

axiom ldv_check_alloc_nonatomic == $sub.ref(0, 464659);

procedure ldv_check_alloc_nonatomic();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_nonatomic()
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $i0 := $M.1;
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} ldv_error();
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_193:
    assume !assertsPassed;
    return;
}



const destroy_workqueue: ref;

axiom destroy_workqueue == $sub.ref(0, 465691);

procedure destroy_workqueue($p0: ref);
  free requires assertsPassed;



implementation destroy_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    return;
}



const dm_io_client_destroy: ref;

axiom dm_io_client_destroy == $sub.ref(0, 466723);

procedure dm_io_client_destroy($p0: ref);
  free requires assertsPassed;



implementation dm_io_client_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    return;
}



const __alloc_workqueue_key: ref;

axiom __alloc_workqueue_key == $sub.ref(0, 467755);

procedure __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1044} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} $p5 := external_alloc();
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 468787);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 1046} $r := $malloc($i0);
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 469819);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} $p1 := calloc(1, $i0);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1049} __VERIFIER_assume($i4);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 470851);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1051} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 1052} cmdloc_dummy_var_23 := $memset.i8(cmdloc_dummy_var_22, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_23;
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_target_type_5: ref;

axiom ldv_target_type_5 == $sub.ref(0, 471883);

procedure ldv_target_type_5();
  free requires assertsPassed;
  modifies $M.43, $M.0, $CurrAddr;



implementation ldv_target_type_5()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $p0 := ldv_init_zalloc(88);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $M.43 := $p0;
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    return;
}



const ldv_target_type_7: ref;

axiom ldv_target_type_7 == $sub.ref(0, 472915);

procedure ldv_target_type_7();
  free requires assertsPassed;
  modifies $M.44, $M.0, $CurrAddr;



implementation ldv_target_type_7()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} $p0 := ldv_init_zalloc(88);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $M.44 := $p0;
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    return;
}



const ldv_target_type_6: ref;

axiom ldv_target_type_6 == $sub.ref(0, 473947);

procedure ldv_target_type_6();
  free requires assertsPassed;
  modifies $M.45, $M.0, $CurrAddr;



implementation ldv_target_type_6()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} $p0 := ldv_init_zalloc(88);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $M.45 := $p0;
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 474979);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.3, $M.55, $M.9, $M.10, $M.56, $M.11, $M.57, $M.58, $M.59, $M.43, $M.44, $M.45, $M.60, $M.61, $M.1, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.13, $M.23, $M.8, $M.14, $M.6, $M.80, $M.64, $M.62, $M.63, $M.69, $M.66, $M.68, $M.67, $M.65, $M.91, $CurrAddr, $M.31, $M.20, $M.21, $M.22, $M.17, $M.18, $M.19, $M.32, $M.33, $M.16, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p56: ref;
  var $p58: ref;
  var $p60: ref;
  var $p62: ref;
  var $p64: ref;
  var $p66: ref;
  var $p68: ref;
  var $p70: ref;
  var $p72: ref;
  var $p74: ref;
  var $p76: ref;
  var $p78: ref;
  var $i80: i32;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i32;
  var $i91: i1;
  var $i92: i32;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i107: i32;
  var $i108: i32;
  var $i109: i32;
  var $i110: i1;
  var $i111: i32;
  var $i112: i32;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $i116: i32;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $i121: i32;
  var $i123: i32;
  var $i124: i1;
  var $p125: ref;
  var $i126: i32;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $i131: i32;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $i136: i32;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $i141: i32;
  var $i142: i32;
  var $i143: i32;
  var $i144: i1;
  var $p145: ref;
  var $i146: i32;
  var $i147: i32;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $i151: i32;
  var $i152: i32;
  var $i153: i32;
  var $i154: i1;
  var $p155: ref;
  var $i156: i32;
  var $i157: i32;
  var $i158: i32;
  var $i159: i1;
  var $p160: ref;
  var $i161: i32;
  var $i162: i32;
  var $i163: i1;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $p167: ref;
  var $i169: i32;
  var $i170: i1;
  var $p171: ref;
  var $p172: ref;
  var $i174: i32;
  var $i175: i1;
  var $p176: ref;
  var $p177: ref;
  var $i179: i32;
  var $i180: i1;
  var $p181: ref;
  var $p182: ref;
  var $i184: i32;
  var $i185: i1;
  var $p186: ref;
  var $p187: ref;
  var $i189: i32;
  var $i190: i1;
  var $p191: ref;
  var $i193: i32;
  var $i194: i1;
  var $p195: ref;
  var $i197: i32;
  var $i198: i1;
  var $p199: ref;
  var $i201: i32;
  var $i202: i1;
  var $p203: ref;
  var $i205: i32;
  var $i206: i1;
  var $p207: ref;
  var $i208: i32;
  var $i209: i32;
  var $i210: i32;
  var $i211: i32;
  var $i212: i1;
  var $p213: ref;
  var $i214: i32;
  var $i215: i32;
  var $i216: i32;
  var $i217: i32;
  var $i218: i1;
  var $p219: ref;
  var $i220: i32;
  var $i221: i32;
  var $i222: i32;
  var $i223: i32;
  var $i224: i1;
  var $p225: ref;
  var $i226: i32;
  var $i227: i32;
  var $i228: i32;
  var $i229: i32;
  var $i230: i1;
  var $p231: ref;
  var $i232: i32;
  var $i233: i32;
  var $i234: i32;
  var $i235: i32;
  var $i236: i1;
  var $p237: ref;
  var $i238: i32;
  var $i239: i1;
  var $i241: i32;
  var $i242: i1;
  var $i244: i32;
  var $i245: i1;
  var $i246: i32;
  var $i247: i1;
  var $i248: i32;
  var $i249: i1;
  var $i250: i1;
  var $i251: i1;
  var $i252: i1;
  var $i253: i1;
  var $i254: i1;
  var $i255: i1;
  var $i256: i1;
  var $i257: i1;
  var $i258: i1;
  var $i259: i1;
  var $i260: i32;
  var $i261: i1;
  var $p262: ref;
  var $i263: i32;
  var $i264: i32;
  var $i265: i32;
  var $i266: i1;
  var $i267: i32;
  var $i268: i32;
  var $i269: i32;
  var $i270: i1;
  var $p271: ref;
  var $i272: i32;
  var $i273: i32;
  var $i274: i32;
  var $i275: i1;
  var $p276: ref;
  var $i277: i32;
  var $i278: i32;
  var $i279: i32;
  var $i280: i1;
  var $p281: ref;
  var $i282: i32;
  var $i283: i32;
  var $i284: i32;
  var $i285: i1;
  var $p286: ref;
  var $i287: i32;
  var $i288: i32;
  var $i289: i32;
  var $i290: i1;
  var $p291: ref;
  var $p292: ref;
  var $i294: i32;
  var $i295: i1;
  var $p296: ref;
  var $p297: ref;
  var $i299: i32;
  var $i300: i1;
  var $p301: ref;
  var $p302: ref;
  var $i304: i32;
  var $i305: i1;
  var $p306: ref;
  var $p307: ref;
  var $i309: i32;
  var $i310: i1;
  var $p311: ref;
  var $p312: ref;
  var $i314: i32;
  var $i315: i1;
  var $p316: ref;
  var $i317: i32;
  var $i319: i32;
  var $i320: i1;
  var $p321: ref;
  var $i322: i32;
  var $i324: i32;
  var $i325: i1;
  var $p326: ref;
  var $i327: i32;
  var $i329: i32;
  var $i330: i1;
  var $p331: ref;
  var $i332: i32;
  var $i334: i32;
  var $i335: i1;
  var $p336: ref;
  var $i337: i32;
  var $i339: i32;
  var $i340: i1;
  var $p341: ref;
  var $i343: i32;
  var $i344: i1;
  var $p345: ref;
  var $i347: i32;
  var $i348: i1;
  var $p349: ref;
  var $i351: i32;
  var $i352: i1;
  var $p353: ref;
  var $i355: i32;
  var $i356: i1;
  var $p357: ref;
  var $i358: i32;
  var $i359: i1;
  var $p360: ref;
  var $i361: i32;
  var $i362: i32;
  var $i363: i32;
  var $i364: i32;
  var $i365: i1;
  var $p366: ref;
  var $i367: i32;
  var $i368: i32;
  var $i369: i32;
  var $i370: i32;
  var $i371: i1;
  var $p372: ref;
  var $i373: i32;
  var $i374: i32;
  var $i375: i32;
  var $i376: i32;
  var $i377: i1;
  var $p378: ref;
  var $i379: i32;
  var $i380: i32;
  var $i381: i32;
  var $i382: i32;
  var $i383: i1;
  var $p384: ref;
  var $i385: i32;
  var $i386: i32;
  var $i387: i32;
  var $i388: i32;
  var $i389: i1;
  var $p390: ref;
  var $i391: i32;
  var $i392: i1;
  var $i394: i32;
  var $i395: i1;
  var $i396: i32;
  var $i397: i32;
  var $i398: i1;
  var $i399: i32;
  var $i400: i1;
  var $i401: i32;
  var $i402: i1;
  var $i403: i32;
  var $i404: i1;
  var $i405: i32;
  var $i406: i1;
  var $i407: i32;
  var $i408: i1;
  var $i409: i1;
  var $i410: i1;
  var $i411: i32;
  var $i412: i1;
  var $i413: i32;
  var $i414: i1;
  var $i415: i32;
  var $i416: i1;
  var $i417: i32;
  var $i418: i32;
  var $i419: i1;
  var $i420: i32;
  var $i421: i1;
  var $i422: i32;
  var $i423: i1;
  var $i424: i32;
  var $i425: i1;
  var $i426: i1;
  var $i427: i1;
  var $i428: i1;
  var $i429: i1;
  var $i430: i1;
  var $i431: i1;
  var $i432: i1;
  var $i433: i1;
  var $i434: i1;
  var $i435: i1;
  var $i436: i32;
  var $i437: i1;
  var $p438: ref;
  var $i439: i32;
  var $i440: i32;
  var $i441: i32;
  var $i442: i1;
  var $i443: i32;
  var $i444: i32;
  var $i445: i32;
  var $i446: i1;
  var $p447: ref;
  var $i448: i32;
  var $i450: i32;
  var $i451: i1;
  var $p452: ref;
  var $i453: i32;
  var $i455: i32;
  var $i456: i1;
  var $p457: ref;
  var $i458: i32;
  var $i460: i32;
  var $i461: i1;
  var $p462: ref;
  var $i463: i32;
  var $i465: i32;
  var $i466: i1;
  var $p467: ref;
  var $i468: i32;
  var $i470: i32;
  var $i471: i1;
  var $p472: ref;
  var $i473: i32;
  var $i474: i32;
  var $i475: i32;
  var $i476: i1;
  var $p477: ref;
  var $i478: i32;
  var $i479: i32;
  var $i480: i32;
  var $i481: i1;
  var $p482: ref;
  var $i483: i32;
  var $i484: i32;
  var $i485: i32;
  var $i486: i1;
  var $p487: ref;
  var $i488: i32;
  var $i489: i32;
  var $i490: i32;
  var $i491: i1;
  var $p492: ref;
  var $p493: ref;
  var $i495: i32;
  var $i496: i1;
  var $p497: ref;
  var $p498: ref;
  var $i500: i32;
  var $i501: i1;
  var $p502: ref;
  var $p503: ref;
  var $i505: i32;
  var $i506: i1;
  var $p507: ref;
  var $p508: ref;
  var $i510: i32;
  var $i511: i1;
  var $p512: ref;
  var $p513: ref;
  var $i515: i32;
  var $i516: i1;
  var $p517: ref;
  var $i518: i32;
  var $i519: i32;
  var $i520: i1;
  var $i521: i32;
  var $i522: i1;
  var $p523: ref;
  var $i525: i32;
  var $i526: i1;
  var $p527: ref;
  var $i529: i32;
  var $i530: i1;
  var $p531: ref;
  var $i533: i32;
  var $i534: i1;
  var $p535: ref;
  var $i537: i32;
  var $i538: i1;
  var $p539: ref;
  var $i540: i32;
  var $i541: i32;
  var $i542: i32;
  var $i543: i32;
  var $i544: i1;
  var $p545: ref;
  var $i546: i32;
  var $i547: i32;
  var $i548: i32;
  var $i549: i32;
  var $i550: i1;
  var $p551: ref;
  var $i552: i32;
  var $i553: i32;
  var $i554: i32;
  var $i555: i32;
  var $i556: i1;
  var $p557: ref;
  var $i558: i32;
  var $i559: i32;
  var $i560: i32;
  var $i561: i32;
  var $i562: i1;
  var $p563: ref;
  var $i564: i32;
  var $i565: i32;
  var $i566: i32;
  var $i567: i32;
  var $i568: i1;
  var $p569: ref;
  var $i570: i32;
  var $i571: i1;
  var $p572: ref;
  var $i573: i32;
  var $i574: i1;
  var vslice_dummy_var_56: ref;
  var vslice_dummy_var_57: ref;
  var vslice_dummy_var_58: ref;
  var vslice_dummy_var_59: ref;
  var vslice_dummy_var_60: ref;
  var vslice_dummy_var_61: ref;
  var vslice_dummy_var_62: ref;
  var vslice_dummy_var_63: ref;
  var vslice_dummy_var_64: ref;
  var vslice_dummy_var_65: ref;
  var vslice_dummy_var_66: ref;
  var vslice_dummy_var_67: ref;
  var vslice_dummy_var_68: ref;
  var vslice_dummy_var_69: ref;
  var vslice_dummy_var_70: ref;
  var vslice_dummy_var_71: ref;
  var vslice_dummy_var_72: ref;
  var vslice_dummy_var_73: ref;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;

  $bb0:
    call {:si_unique_call 1056} $initialize();
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} $p9 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} $p10 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} $p11 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} $p12 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} $p13 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} $p14 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} $p15 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $p16 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} $p17 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} $p18 := ldv_init_zalloc(1);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} $p19 := ldv_init_zalloc(1);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $p20 := ldv_init_zalloc(136);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} $p22 := ldv_init_zalloc(136);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} $p24 := ldv_init_zalloc(8);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} $p26 := ldv_init_zalloc(136);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} $p28 := ldv_init_zalloc(1);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} $p29 := ldv_init_zalloc(1);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $p30 := ldv_init_zalloc(8);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} $p32 := ldv_init_zalloc(32);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $p34 := ldv_init_zalloc(16);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $p36 := ldv_init_zalloc(136);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} $p38 := ldv_init_zalloc(1);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} $p39 := ldv_init_zalloc(136);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} $p41 := ldv_init_zalloc(8);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} $p43 := ldv_init_zalloc(1);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} ldv_initialize();
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p0);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} vslice_dummy_var_56 := ldv_memset($p44, 0, 4);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p1);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} vslice_dummy_var_57 := ldv_memset($p46, 0, 4);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p2);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} vslice_dummy_var_58 := ldv_memset($p48, 0, 8);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p3);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} vslice_dummy_var_59 := ldv_memset($p50, 0, 4);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p4);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} vslice_dummy_var_60 := ldv_memset($p52, 0, 4);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p5);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} vslice_dummy_var_61 := ldv_memset($p54, 0, 4);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p6);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} vslice_dummy_var_62 := ldv_memset($p56, 0, 4);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p7);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} vslice_dummy_var_63 := ldv_memset($p58, 0, 4);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p8);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} vslice_dummy_var_64 := ldv_memset($p60, 0, 8);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p9);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} vslice_dummy_var_65 := ldv_memset($p62, 0, 4);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p10);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} vslice_dummy_var_66 := ldv_memset($p64, 0, 4);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p11);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} vslice_dummy_var_67 := ldv_memset($p66, 0, 4);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p12);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} vslice_dummy_var_68 := ldv_memset($p68, 0, 4);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p13);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} vslice_dummy_var_69 := ldv_memset($p70, 0, 4);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p14);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} vslice_dummy_var_70 := ldv_memset($p72, 0, 4);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p15);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} vslice_dummy_var_71 := ldv_memset($p74, 0, 4);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p16);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} vslice_dummy_var_72 := ldv_memset($p76, 0, 4);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p17);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} vslice_dummy_var_73 := ldv_memset($p78, 0, 8);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $M.46 := 0;
    call {:si_unique_call 1111} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $M.47 := 0;
    call {:si_unique_call 1112} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $M.48 := 0;
    call {:si_unique_call 1113} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $M.49 := 0;
    call {:si_unique_call 1114} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $M.50 := 0;
    call {:si_unique_call 1115} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $M.51 := 0;
    call {:si_unique_call 1116} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $M.52 := 0;
    call {:si_unique_call 1117} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1118} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $M.54 := 0;
    call {:si_unique_call 1119} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $p106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $p115, $i116, $i118, $i119, $p120, $i121, $i123, $i124, $p125, $i126, $i128, $i129, $p130, $i131, $i133, $i134, $p135, $i136, $i138, $i139, $p140, $i141, $i142, $i143, $i144, $p145, $i146, $i147, $i148, $i149, $p150, $i151, $i152, $i153, $i154, $p155, $i156, $i157, $i158, $i159, $p160, $i161, $i162, $i163, $i164, $i165, $p166, $p167, $i169, $i170, $p171, $p172, $i174, $i175, $p176, $p177, $i179, $i180, $p181, $p182, $i184, $i185, $p186, $p187, $i189, $i190, $p191, $i193, $i194, $p195, $i197, $i198, $p199, $i201, $i202, $p203, $i205, $i206, $p207, $i208, $i209, $i210, $i211, $i212, $p213, $i214, $i215, $i216, $i217, $i218, $p219, $i220, $i221, $i222, $i223, $i224, $p225, $i226, $i227, $i228, $i229, $i230, $p231, $i232, $i233, $i234, $i235, $i236, $p237, $i238, $i239, $i241, $i242, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $p262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $p271, $i272, $i273, $i274, $i275, $p276, $i277, $i278, $i279, $i280, $p281, $i282, $i283, $i284, $i285, $p286, $i287, $i288, $i289, $i290, $p291, $p292, $i294, $i295, $p296, $p297, $i299, $i300, $p301, $p302, $i304, $i305, $p306, $p307, $i309, $i310, $p311, $p312, $i314, $i315, $p316, $i317, $i319, $i320, $p321, $i322, $i324, $i325, $p326, $i327, $i329, $i330, $p331, $i332, $i334, $i335, $p336, $i337, $i339, $i340, $p341, $i343, $i344, $p345, $i347, $i348, $p349, $i351, $i352, $p353, $i355, $i356, $p357, $i358, $i359, $p360, $i361, $i362, $i363, $i364, $i365, $p366, $i367, $i368, $i369, $i370, $i371, $p372, $i373, $i374, $i375, $i376, $i377, $p378, $i379, $i380, $i381, $i382, $i383, $p384, $i385, $i386, $i387, $i388, $i389, $p390, $i391, $i392, $i394, $i395, $i396, $i397, $i398, $i399, $i400, $i401, $i402, $i403, $i404, $i405, $i406, $i407, $i408, $i409, $i410, $i411, $i412, $i413, $i414, $i415, $i416, $i417, $i418, $i419, $i420, $i421, $i422, $i423, $i424, $i425, $i426, $i427, $i428, $i429, $i430, $i431, $i432, $i433, $i434, $i435, $i436, $i437, $p438, $i439, $i440, $i441, $i442, $i443, $i444, $i445, $i446, $p447, $i448, $i450, $i451, $p452, $i453, $i455, $i456, $p457, $i458, $i460, $i461, $p462, $i463, $i465, $i466, $p467, $i468, $i470, $i471, $p472, $i473, $i474, $i475, $i476, $p477, $i478, $i479, $i480, $i481, $p482, $i483, $i484, $i485, $i486, $p487, $i488, $i489, $i490, $i491, $p492, $p493, $i495, $i496, $p497, $p498, $i500, $i501, $p502, $p503, $i505, $i506, $p507, $p508, $i510, $i511, $p512, $p513, $i515, $i516, $p517, $i518, $i519, $i520, $i521, $i522, $p523, $i525, $i526, $p527, $i529, $i530, $p531, $i533, $i534, $p535, $i537, $i538, $p539, $i540, $i541, $i542, $i543, $i544, $p545, $i546, $i547, $i548, $i549, $i550, $p551, $i552, $i553, $i554, $i555, $i556, $p557, $i558, $i559, $i560, $i561, $i562, $p563, $i564, $i565, $i566, $i567, $i568, $p569, $i570, $i571, $p572, $i573, $i574, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p10, $p11, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $p19, $p21, $p23, $p25, $p27, $p28, $p29, $p31, $p33, $p35, $p37, $p38, $p40, $p42, $p43, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $p106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $p115, $i116, $i118, $i119, $p120, $i121, $i123, $i124, $p125, $i126, $i128, $i129, $p130, $i131, $i133, $i134, $p135, $i136, $i138, $i139, $p140, $i141, $i142, $i143, $i144, $p145, $i146, $i147, $i148, $i149, $p150, $i151, $i152, $i153, $i154, $p155, $i156, $i157, $i158, $i159, $p160, $i161, $i162, $i163, $i164, $i165, $p166, $p167, $i169, $i170, $p171, $p172, $i174, $i175, $p176, $p177, $i179, $i180, $p181, $p182, $i184, $i185, $p186, $p187, $i189, $i190, $p191, $i193, $i194, $p195, $i197, $i198, $p199, $i201, $i202, $p203, $i205, $i206, $p207, $i208, $i209, $i210, $i211, $i212, $p213, $i214, $i215, $i216, $i217, $i218, $p219, $i220, $i221, $i222, $i223, $i224, $p225, $i226, $i227, $i228, $i229, $i230, $p231, $i232, $i233, $i234, $i235, $i236, $p237, $i238, $i239, $i241, $i242, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $p262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $p271, $i272, $i273, $i274, $i275, $p276, $i277, $i278, $i279, $i280, $p281, $i282, $i283, $i284, $i285, $p286, $i287, $i288, $i289, $i290, $p291, $p292, $i294, $i295, $p296, $p297, $i299, $i300, $p301, $p302, $i304, $i305, $p306, $p307, $i309, $i310, $p311, $p312, $i314, $i315, $p316, $i317, $i319, $i320, $p321, $i322, $i324, $i325, $p326, $i327, $i329, $i330, $p331, $i332, $i334, $i335, $p336, $i337, $i339, $i340, $p341, $i343, $i344, $p345, $i347, $i348, $p349, $i351, $i352, $p353, $i355, $i356, $p357, $i358, $i359, $p360, $i361, $i362, $i363, $i364, $i365, $p366, $i367, $i368, $i369, $i370, $i371, $p372, $i373, $i374, $i375, $i376, $i377, $p378, $i379, $i380, $i381, $i382, $i383, $p384, $i385, $i386, $i387, $i388, $i389, $p390, $i391, $i392, $i394, $i395, $i396, $i397, $i398, $i399, $i400, $i401, $i402, $i403, $i404, $i405, $i406, $i407, $i408, $i409, $i410, $i411, $i412, $i413, $i414, $i415, $i416, $i417, $i418, $i419, $i420, $i421, $i422, $i423, $i424, $i425, $i426, $i427, $i428, $i429, $i430, $i431, $i432, $i433, $i434, $i435, $i436, $i437, $p438, $i439, $i440, $i441, $i442, $i443, $i444, $i445, $i446, $p447, $i448, $i450, $i451, $p452, $i453, $i455, $i456, $p457, $i458, $i460, $i461, $p462, $i463, $i465, $i466, $p467, $i468, $i470, $i471, $p472, $i473, $i474, $i475, $i476, $p477, $i478, $i479, $i480, $i481, $p482, $i483, $i484, $i485, $i486, $p487, $i488, $i489, $i490, $i491, $p492, $p493, $i495, $i496, $p497, $p498, $i500, $i501, $p502, $p503, $i505, $i506, $p507, $p508, $i510, $i511, $p512, $p513, $i515, $i516, $p517, $i518, $i519, $i520, $i521, $i522, $p523, $i525, $i526, $p527, $i529, $i530, $p531, $i533, $i534, $p535, $i537, $i538, $p539, $i540, $i541, $i542, $i543, $i544, $p545, $i546, $i547, $i548, $i549, $i550, $p551, $i552, $i553, $i554, $i555, $i556, $p557, $i558, $i559, $i560, $i561, $i562, $p563, $i564, $i565, $i566, $i567, $i568, $p569, $i570, $i571, $p572, $i573, $i574, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i80, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i80, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i80, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i80, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} ldv_stop();
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb142_dummy;

  $bb9:
    assume $i84 == 1;
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $i422 := $M.54;
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i423 := $ne.i32($i422, 0);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  $bb306:
    assume !($i423 == 1);
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb305:
    assume $i423 == 1;
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1286} $i424 := __VERIFIER_nondet_int();
    call {:si_unique_call 1287} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i424);
    call {:si_unique_call 1288} {:cexpr "tmp___19"} boogie_si_record_i32($i424);
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    $i425 := $slt.i32($i424, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i425 == 1);
    assume {:verifier.code 0} true;
    $i426 := $slt.i32($i424, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  $bb311:
    assume !($i426 == 1);
    assume {:verifier.code 0} true;
    $i427 := $slt.i32($i424, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb312, $bb313;

  $bb313:
    assume !($i427 == 1);
    assume {:verifier.code 0} true;
    $i428 := $slt.i32($i424, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  $bb315:
    assume !($i428 == 1);
    assume {:verifier.code 0} true;
    $i429 := $eq.i32($i424, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    assume !($i429 == 1);
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} ldv_stop();
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb423:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb316:
    assume $i429 == 1;
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $i573 := $M.54;
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $i574 := $eq.i32($i573, 3);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb419, $bb420;

  $bb420:
    assume !($i574 == 1);
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb421:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb419:
    assume $i574 == 1;
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} vslice_dummy_var_119 := ldv_postsuspend_5();
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $M.54 := 4;
    call {:si_unique_call 1351} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb314:
    assume $i428 == 1;
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i570 := $M.54;
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $i571 := $eq.i32($i570, 5);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb416, $bb417;

  $bb417:
    assume !($i571 == 1);
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb416:
    assume $i571 == 1;
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $p572 := $M.43;
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} snapshot_merge_resume($p572);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $M.54 := 2;
    call {:si_unique_call 1349} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    goto $bb418;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb312:
    assume $i427 == 1;
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $i567 := $M.54;
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i568 := $eq.i32($i567, 2);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb413, $bb414;

  $bb414:
    assume !($i568 == 1);
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb413:
    assume $i568 == 1;
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $p569 := $M.43;
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} snapshot_merge_presuspend($p569);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $M.54 := 3;
    call {:si_unique_call 1347} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb310:
    assume $i426 == 1;
    assume {:verifier.code 0} true;
    $i430 := $slt.i32($i424, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb320:
    assume !($i430 == 1);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i537 := $M.54;
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $i538 := $eq.i32($i537, 4);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb398, $bb399;

  $bb399:
    assume !($i538 == 1);
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    $i543 := $M.54;
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $i544 := $eq.i32($i543, 1);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb401, $bb402;

  $bb402:
    assume !($i544 == 1);
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    $i549 := $M.54;
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i550 := $eq.i32($i549, 3);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb404, $bb405;

  $bb405:
    assume !($i550 == 1);
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    $i555 := $M.54;
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $i556 := $eq.i32($i555, 2);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb407, $bb408;

  $bb408:
    assume !($i556 == 1);
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb409:
    assume {:verifier.code 0} true;
    $i561 := $M.54;
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $i562 := $eq.i32($i561, 5);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb410, $bb411;

  $bb411:
    assume !($i562 == 1);
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb410:
    assume $i562 == 1;
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $p563 := $M.43;
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i564 := $load.i32($M.0, $p16);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $i565 := $load.i32($M.0, $p14);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i566 := $load.i32($M.0, $p13);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} snapshot_status($p563, $i564, $i565, $p38, $i566);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $M.54 := 5;
    call {:si_unique_call 1345} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    goto $bb412;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb407:
    assume $i556 == 1;
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $p557 := $M.43;
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i558 := $load.i32($M.0, $p16);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $i559 := $load.i32($M.0, $p14);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $i560 := $load.i32($M.0, $p13);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} snapshot_status($p557, $i558, $i559, $p38, $i560);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $M.54 := 2;
    call {:si_unique_call 1343} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    goto $bb409;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  $bb404:
    assume $i550 == 1;
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $p551 := $M.43;
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $i552 := $load.i32($M.0, $p16);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $i553 := $load.i32($M.0, $p14);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i554 := $load.i32($M.0, $p13);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} snapshot_status($p551, $i552, $i553, $p38, $i554);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $M.54 := 3;
    call {:si_unique_call 1341} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    goto $bb406;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb401:
    assume $i544 == 1;
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $p545 := $M.43;
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $i546 := $load.i32($M.0, $p16);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $i547 := $load.i32($M.0, $p14);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $i548 := $load.i32($M.0, $p13);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} snapshot_status($p545, $i546, $i547, $p38, $i548);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1339} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    goto $bb403;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb398:
    assume $i538 == 1;
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $p539 := $M.43;
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $i540 := $load.i32($M.0, $p16);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $i541 := $load.i32($M.0, $p14);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $i542 := $load.i32($M.0, $p13);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} snapshot_status($p539, $i540, $i541, $p38, $i542);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $M.54 := 4;
    call {:si_unique_call 1337} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    goto $bb400;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb319:
    assume $i430 == 1;
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i521 := $M.54;
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i522 := $eq.i32($i521, 4);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  $bb387:
    assume !($i522 == 1);
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    $i525 := $M.54;
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i526 := $eq.i32($i525, 3);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb389, $bb390;

  $bb390:
    assume !($i526 == 1);
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    $i529 := $M.54;
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $i530 := $eq.i32($i529, 2);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb392, $bb393;

  $bb393:
    assume !($i530 == 1);
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    $i533 := $M.54;
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $i534 := $eq.i32($i533, 5);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb395, $bb396;

  $bb396:
    assume !($i534 == 1);
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb395:
    assume $i534 == 1;
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $p535 := $M.43;
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} vslice_dummy_var_118 := snapshot_merge_map($p535, $p37);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $M.54 := 5;
    call {:si_unique_call 1335} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    goto $bb397;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb392:
    assume $i530 == 1;
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $p531 := $M.43;
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} vslice_dummy_var_117 := snapshot_merge_map($p531, $p37);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $M.54 := 2;
    call {:si_unique_call 1333} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    goto $bb394;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb389:
    assume $i526 == 1;
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $p527 := $M.43;
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} vslice_dummy_var_116 := snapshot_merge_map($p527, $p37);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $M.54 := 3;
    call {:si_unique_call 1331} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    goto $bb391;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb386:
    assume $i522 == 1;
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $p523 := $M.43;
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} vslice_dummy_var_115 := snapshot_merge_map($p523, $p37);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $M.54 := 4;
    call {:si_unique_call 1329} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    goto $bb388;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb308:
    assume $i425 == 1;
    assume {:verifier.code 0} true;
    $i431 := $slt.i32($i424, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb321, $bb322;

  $bb322:
    assume !($i431 == 1);
    assume {:verifier.code 0} true;
    $i432 := $slt.i32($i424, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb323, $bb324;

  $bb324:
    assume !($i432 == 1);
    assume {:verifier.code 0} true;
    $i433 := $slt.i32($i424, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  $bb326:
    assume !($i433 == 1);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i515 := $M.54;
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i516 := $eq.i32($i515, 4);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb380, $bb381;

  $bb381:
    assume !($i516 == 1);
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb380:
    assume $i516 == 1;
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $p517 := $M.43;
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} $i518 := snapshot_preresume($p517);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $M.61 := $i518;
    call {:si_unique_call 1326} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i518);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i519 := $M.61;
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i520 := $eq.i32($i519, 0);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb382, $bb383;

  $bb383:
    assume !($i520 == 1);
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb382:
    assume $i520 == 1;
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $M.54 := 5;
    call {:si_unique_call 1327} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb325:
    assume $i433 == 1;
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $i490 := $M.54;
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $i491 := $eq.i32($i490, 4);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb365, $bb366;

  $bb366:
    assume !($i491 == 1);
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    $i495 := $M.54;
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $i496 := $eq.i32($i495, 1);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb368, $bb369;

  $bb369:
    assume !($i496 == 1);
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    $i500 := $M.54;
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $i501 := $eq.i32($i500, 3);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb371, $bb372;

  $bb372:
    assume !($i501 == 1);
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    $i505 := $M.54;
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $i506 := $eq.i32($i505, 2);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb374, $bb375;

  $bb375:
    assume !($i506 == 1);
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    $i510 := $M.54;
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i511 := $eq.i32($i510, 5);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb377, $bb378;

  $bb378:
    assume !($i511 == 1);
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb377:
    assume $i511 == 1;
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $p512 := $M.43;
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $p513 := $load.ref($M.0, $p17);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} vslice_dummy_var_114 := snapshot_iterate_devices($p512, $p513, $p43);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $M.54 := 5;
    call {:si_unique_call 1324} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb374:
    assume $i506 == 1;
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $p507 := $M.43;
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $p508 := $load.ref($M.0, $p17);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} vslice_dummy_var_113 := snapshot_iterate_devices($p507, $p508, $p43);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $M.54 := 2;
    call {:si_unique_call 1322} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb371:
    assume $i501 == 1;
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $p502 := $M.43;
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $p503 := $load.ref($M.0, $p17);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} vslice_dummy_var_112 := snapshot_iterate_devices($p502, $p503, $p43);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $M.54 := 3;
    call {:si_unique_call 1320} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb368:
    assume $i496 == 1;
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $p497 := $M.43;
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $p498 := $load.ref($M.0, $p17);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} vslice_dummy_var_111 := snapshot_iterate_devices($p497, $p498, $p43);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1318} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb365:
    assume $i491 == 1;
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $p492 := $M.43;
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $p493 := $load.ref($M.0, $p17);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} vslice_dummy_var_110 := snapshot_iterate_devices($p492, $p493, $p43);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $M.54 := 4;
    call {:si_unique_call 1316} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb323:
    assume $i432 == 1;
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $i470 := $M.54;
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $i471 := $eq.i32($i470, 4);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb353, $bb354;

  $bb354:
    assume !($i471 == 1);
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    $i475 := $M.54;
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i476 := $eq.i32($i475, 3);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  $bb357:
    assume !($i476 == 1);
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    $i480 := $M.54;
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i481 := $eq.i32($i480, 2);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb359, $bb360;

  $bb360:
    assume !($i481 == 1);
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    $i485 := $M.54;
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $i486 := $eq.i32($i485, 5);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb362, $bb363;

  $bb363:
    assume !($i486 == 1);
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb362:
    assume $i486 == 1;
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $p487 := $M.43;
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} snapshot_dtr($p487);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1313} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $i488 := $M.52;
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $i489 := $sub.i32($i488, 1);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $M.52 := $i489;
    call {:si_unique_call 1314} {:cexpr "ref_cnt"} boogie_si_record_i32($i489);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    goto $bb364;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb359:
    assume $i481 == 1;
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $p482 := $M.43;
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} snapshot_dtr($p482);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1310} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i483 := $M.52;
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i484 := $sub.i32($i483, 1);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $M.52 := $i484;
    call {:si_unique_call 1311} {:cexpr "ref_cnt"} boogie_si_record_i32($i484);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    goto $bb361;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb356:
    assume $i476 == 1;
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $p477 := $M.43;
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} snapshot_dtr($p477);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1307} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $i478 := $M.52;
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $i479 := $sub.i32($i478, 1);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $M.52 := $i479;
    call {:si_unique_call 1308} {:cexpr "ref_cnt"} boogie_si_record_i32($i479);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    goto $bb358;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb353:
    assume $i471 == 1;
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $p472 := $M.43;
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} snapshot_dtr($p472);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1304} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $i473 := $M.52;
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $i474 := $sub.i32($i473, 1);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $M.52 := $i474;
    call {:si_unique_call 1305} {:cexpr "ref_cnt"} boogie_si_record_i32($i474);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    goto $bb355;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb321:
    assume $i431 == 1;
    assume {:verifier.code 0} true;
    $i434 := $slt.i32($i424, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb327, $bb328;

  $bb328:
    assume !($i434 == 1);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $i445 := $M.54;
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $i446 := $eq.i32($i445, 4);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  $bb339:
    assume !($i446 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    $i450 := $M.54;
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $i451 := $eq.i32($i450, 1);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  $bb342:
    assume !($i451 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    $i455 := $M.54;
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $i456 := $eq.i32($i455, 3);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  $bb345:
    assume !($i456 == 1);
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    $i460 := $M.54;
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i461 := $eq.i32($i460, 2);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb347, $bb348;

  $bb348:
    assume !($i461 == 1);
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    $i465 := $M.54;
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i466 := $eq.i32($i465, 5);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  $bb351:
    assume !($i466 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb350:
    assume $i466 == 1;
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $p467 := $M.43;
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i468 := $load.i32($M.0, $p12);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} vslice_dummy_var_109 := snapshot_end_io($p467, $p40, $i468);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $M.54 := 5;
    call {:si_unique_call 1302} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb347:
    assume $i461 == 1;
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $p462 := $M.43;
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i463 := $load.i32($M.0, $p12);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} vslice_dummy_var_108 := snapshot_end_io($p462, $p40, $i463);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $M.54 := 2;
    call {:si_unique_call 1300} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb344:
    assume $i456 == 1;
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $p457 := $M.43;
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i458 := $load.i32($M.0, $p12);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} vslice_dummy_var_107 := snapshot_end_io($p457, $p40, $i458);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $M.54 := 3;
    call {:si_unique_call 1298} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb341:
    assume $i451 == 1;
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $p452 := $M.43;
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i453 := $load.i32($M.0, $p12);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} vslice_dummy_var_106 := snapshot_end_io($p452, $p40, $i453);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1296} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb338:
    assume $i446 == 1;
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $p447 := $M.43;
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $i448 := $load.i32($M.0, $p12);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} vslice_dummy_var_105 := snapshot_end_io($p447, $p40, $i448);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $M.54 := 4;
    call {:si_unique_call 1294} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb327:
    assume $i434 == 1;
    assume {:verifier.code 0} true;
    $i435 := $eq.i32($i424, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    assume !($i435 == 1);
    goto $bb318;

  $bb329:
    assume $i435 == 1;
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i436 := $M.54;
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $i437 := $eq.i32($i436, 1);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  $bb332:
    assume !($i437 == 1);
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb331:
    assume $i437 == 1;
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $p438 := $M.43;
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i439 := $load.i32($M.0, $p15);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} $i440 := snapshot_ctr($p438, $i439, $p42);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $M.60 := $i440;
    call {:si_unique_call 1290} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i440);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i441 := $M.60;
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $i442 := $eq.i32($i441, 0);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb333, $bb334;

  $bb334:
    assume !($i442 == 1);
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb333:
    assume $i442 == 1;
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $M.54 := 2;
    call {:si_unique_call 1291} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $i443 := $M.52;
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i444 := $add.i32($i443, 1);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $M.52 := $i444;
    call {:si_unique_call 1292} {:cexpr "ref_cnt"} boogie_si_record_i32($i444);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    goto $bb335;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i83 == 1;
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i405 := $M.53;
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $i406 := $ne.i32($i405, 0);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i406 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb275:
    assume $i406 == 1;
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1261} $i407 := __VERIFIER_nondet_int();
    call {:si_unique_call 1262} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i407);
    call {:si_unique_call 1263} {:cexpr "tmp___18"} boogie_si_record_i32($i407);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    $i408 := $slt.i32($i407, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  $bb279:
    assume !($i408 == 1);
    assume {:verifier.code 0} true;
    $i409 := $eq.i32($i407, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    assume !($i409 == 1);
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} ldv_stop();
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb280:
    assume $i409 == 1;
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i415 := $M.53;
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $i416 := $eq.i32($i415, 1);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  $bb294:
    assume !($i416 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb293:
    assume $i416 == 1;
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} $i417 := dm_snapshot_init();
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $M.59 := $i417;
    call {:si_unique_call 1268} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i417);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $i418 := $M.59;
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i419 := $eq.i32($i418, 0);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i419 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    $i420 := $M.59;
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $i421 := $ne.i32($i420, 0);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb298, $bb299;

  $bb299:
    assume !($i421 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb298:
    assume $i421 == 1;
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1284} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} ldv_check_final_state();
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb295:
    assume $i419 == 1;
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $M.53 := 3;
    call {:si_unique_call 1269} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1270} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} ldv_target_type_5();
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1272} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} ldv_initialize_dm_exception_store_type_2();
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1274} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} ldv_target_type_7();
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1276} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} ldv_initialize_dm_exception_store_type_3();
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1278} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} ldv_initialize_dm_exception_store_type_1();
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1280} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} ldv_initialize_dm_exception_store_type_4();
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1282} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} ldv_target_type_6();
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    goto $bb297;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb278:
    assume $i408 == 1;
    assume {:verifier.code 0} true;
    $i410 := $eq.i32($i407, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    assume !($i410 == 1);
    goto $bb282;

  $bb283:
    assume $i410 == 1;
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $i411 := $M.53;
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i412 := $eq.i32($i411, 3);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    assume !($i412 == 1);
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb285:
    assume $i412 == 1;
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i413 := $M.52;
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i414 := $eq.i32($i413, 0);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288, $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    assume !($i414 == 1);
    goto $bb287;

  $bb288:
    assume $i414 == 1;
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} dm_snapshot_exit();
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1265} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb5:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i80, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i85 == 1);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i403 := $M.51;
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i404 := $ne.i32($i403, 0);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i404 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb272:
    assume $i404 == 1;
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} ldv_main_exported_4();
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    goto $bb274;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i85 == 1;
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i401 := $M.50;
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $i402 := $ne.i32($i401, 0);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i402 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb269:
    assume $i402 == 1;
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} ldv_main_exported_1();
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    goto $bb271;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i81 == 1;
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i80, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i80, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i87 == 1);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $i399 := $M.49;
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i400 := $ne.i32($i399, 0);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i400 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb266:
    assume $i400 == 1;
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} ldv_main_exported_2();
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    goto $bb268;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i87 == 1;
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i246 := $M.48;
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i247 := $ne.i32($i246, 0);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb146:
    assume $i247 == 1;
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1191} $i248 := __VERIFIER_nondet_int();
    call {:si_unique_call 1192} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i248);
    call {:si_unique_call 1193} {:cexpr "tmp___17"} boogie_si_record_i32($i248);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $i249 := $slt.i32($i248, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    $i250 := $slt.i32($i248, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    $i251 := $slt.i32($i248, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    $i252 := $slt.i32($i248, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    $i253 := $eq.i32($i248, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    assume !($i253 == 1);
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} ldv_stop();
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb157:
    assume $i253 == 1;
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i394 := $M.48;
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i395 := $eq.i32($i394, 4);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i395 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb257:
    assume $i395 == 1;
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $i396 := ldv_preresume_7();
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $M.58 := $i396;
    call {:si_unique_call 1255} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i396);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $i397 := $M.58;
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i398 := $eq.i32($i397, 0);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i398 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb259:
    assume $i398 == 1;
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $M.48 := 5;
    call {:si_unique_call 1256} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(5);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb155:
    assume $i252 == 1;
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i391 := $M.48;
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $i392 := $eq.i32($i391, 2);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb254:
    assume $i392 == 1;
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} vslice_dummy_var_104 := ldv_presuspend_7();
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 1253} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb153:
    assume $i251 == 1;
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i388 := $M.48;
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $i389 := $eq.i32($i388, 5);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i389 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb251:
    assume $i389 == 1;
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $p390 := $M.44;
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} origin_resume($p390);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1251} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb151:
    assume $i250 == 1;
    assume {:verifier.code 0} true;
    $i254 := $slt.i32($i248, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i254 == 1);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $i358 := $M.48;
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i359 := $eq.i32($i358, 4);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i359 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $i364 := $M.48;
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i365 := $eq.i32($i364, 1);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $i370 := $M.48;
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i371 := $eq.i32($i370, 3);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $i376 := $M.48;
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i377 := $eq.i32($i376, 2);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i377 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $i382 := $M.48;
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i383 := $eq.i32($i382, 5);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i383 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb248:
    assume $i383 == 1;
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $p384 := $M.44;
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i385 := $load.i32($M.0, $p9);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $i386 := $load.i32($M.0, $p6);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i387 := $load.i32($M.0, $p7);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} origin_status($p384, $i385, $i386, $p29, $i387);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $M.48 := 5;
    call {:si_unique_call 1249} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(5);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb245:
    assume $i377 == 1;
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $p378 := $M.44;
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $i379 := $load.i32($M.0, $p9);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i380 := $load.i32($M.0, $p6);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i381 := $load.i32($M.0, $p7);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} origin_status($p378, $i379, $i380, $p29, $i381);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1247} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb242:
    assume $i371 == 1;
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $p372 := $M.44;
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $i373 := $load.i32($M.0, $p9);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $i374 := $load.i32($M.0, $p6);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $i375 := $load.i32($M.0, $p7);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} origin_status($p372, $i373, $i374, $p29, $i375);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 1245} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb239:
    assume $i365 == 1;
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $p366 := $M.44;
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $i367 := $load.i32($M.0, $p9);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $i368 := $load.i32($M.0, $p6);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i369 := $load.i32($M.0, $p7);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} origin_status($p366, $i367, $i368, $p29, $i369);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1243} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb236:
    assume $i359 == 1;
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $p360 := $M.44;
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $i361 := $load.i32($M.0, $p9);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $i362 := $load.i32($M.0, $p6);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $i363 := $load.i32($M.0, $p7);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} origin_status($p360, $i361, $i362, $p29, $i363);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $M.48 := 4;
    call {:si_unique_call 1241} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb160:
    assume $i254 == 1;
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $i355 := $M.48;
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $i356 := $eq.i32($i355, 3);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i356 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb233:
    assume $i356 == 1;
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $p357 := $M.44;
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} origin_postsuspend($p357);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $M.48 := 4;
    call {:si_unique_call 1239} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb149:
    assume $i249 == 1;
    assume {:verifier.code 0} true;
    $i255 := $slt.i32($i248, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    $i256 := $slt.i32($i248, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    $i257 := $slt.i32($i248, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i257 == 1);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $i339 := $M.48;
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $i340 := $eq.i32($i339, 4);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $i343 := $M.48;
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i344 := $eq.i32($i343, 3);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    $i347 := $M.48;
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i348 := $eq.i32($i347, 2);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i348 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    $i351 := $M.48;
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $i352 := $eq.i32($i351, 5);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb230:
    assume $i352 == 1;
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $p353 := $M.44;
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} vslice_dummy_var_103 := origin_map($p353, $p27);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $M.48 := 5;
    call {:si_unique_call 1237} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(5);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    goto $bb232;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb227:
    assume $i348 == 1;
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $p349 := $M.44;
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} vslice_dummy_var_102 := origin_map($p349, $p27);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1235} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    goto $bb229;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb224:
    assume $i344 == 1;
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $p345 := $M.44;
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} vslice_dummy_var_101 := origin_map($p345, $p27);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 1233} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    goto $bb226;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb221:
    assume $i340 == 1;
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $p341 := $M.44;
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} vslice_dummy_var_100 := origin_map($p341, $p27);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $M.48 := 4;
    call {:si_unique_call 1231} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    goto $bb223;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb166:
    assume $i257 == 1;
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i314 := $M.48;
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i315 := $eq.i32($i314, 4);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    $i319 := $M.48;
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i320 := $eq.i32($i319, 1);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $i324 := $M.48;
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $i325 := $eq.i32($i324, 3);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $i329 := $M.48;
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i330 := $eq.i32($i329, 2);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $i334 := $M.48;
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i335 := $eq.i32($i334, 5);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb218:
    assume $i335 == 1;
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p336 := $M.44;
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $i337 := $load.i32($M.0, $p11);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} vslice_dummy_var_99 := origin_merge($p336, $p33, $p35, $i337);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $M.48 := 5;
    call {:si_unique_call 1229} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(5);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    goto $bb220;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb215:
    assume $i330 == 1;
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $p331 := $M.44;
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $i332 := $load.i32($M.0, $p11);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} vslice_dummy_var_98 := origin_merge($p331, $p33, $p35, $i332);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1227} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    goto $bb217;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb212:
    assume $i325 == 1;
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $p326 := $M.44;
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $i327 := $load.i32($M.0, $p11);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} vslice_dummy_var_97 := origin_merge($p326, $p33, $p35, $i327);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 1225} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    goto $bb214;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb209:
    assume $i320 == 1;
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $p321 := $M.44;
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $i322 := $load.i32($M.0, $p11);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} vslice_dummy_var_96 := origin_merge($p321, $p33, $p35, $i322);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1223} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    goto $bb211;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb206:
    assume $i315 == 1;
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $p316 := $M.44;
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $i317 := $load.i32($M.0, $p11);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} vslice_dummy_var_95 := origin_merge($p316, $p33, $p35, $i317);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $M.48 := 4;
    call {:si_unique_call 1221} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    goto $bb208;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb164:
    assume $i256 == 1;
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i289 := $M.48;
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i290 := $eq.i32($i289, 4);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $i294 := $M.48;
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i295 := $eq.i32($i294, 1);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $i299 := $M.48;
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i300 := $eq.i32($i299, 3);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $i304 := $M.48;
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i305 := $eq.i32($i304, 2);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $i309 := $M.48;
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i310 := $eq.i32($i309, 5);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb203:
    assume $i310 == 1;
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p311 := $M.44;
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $p312 := $load.ref($M.0, $p8);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} vslice_dummy_var_94 := origin_iterate_devices($p311, $p312, $p28);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $M.48 := 5;
    call {:si_unique_call 1219} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(5);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb200:
    assume $i305 == 1;
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $p306 := $M.44;
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $p307 := $load.ref($M.0, $p8);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} vslice_dummy_var_93 := origin_iterate_devices($p306, $p307, $p28);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1217} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb197:
    assume $i300 == 1;
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $p301 := $M.44;
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $p302 := $load.ref($M.0, $p8);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} vslice_dummy_var_92 := origin_iterate_devices($p301, $p302, $p28);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 1215} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb194:
    assume $i295 == 1;
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $p296 := $M.44;
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $p297 := $load.ref($M.0, $p8);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} vslice_dummy_var_91 := origin_iterate_devices($p296, $p297, $p28);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1213} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb191:
    assume $i290 == 1;
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $p291 := $M.44;
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $p292 := $load.ref($M.0, $p8);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} vslice_dummy_var_90 := origin_iterate_devices($p291, $p292, $p28);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $M.48 := 4;
    call {:si_unique_call 1211} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb162:
    assume $i255 == 1;
    assume {:verifier.code 0} true;
    $i258 := $slt.i32($i248, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i258 == 1);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $i269 := $M.48;
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $i270 := $eq.i32($i269, 4);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $i274 := $M.48;
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $i275 := $eq.i32($i274, 3);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $i279 := $M.48;
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i280 := $eq.i32($i279, 2);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $i284 := $M.48;
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i285 := $eq.i32($i284, 5);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb188:
    assume $i285 == 1;
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $p286 := $M.44;
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} origin_dtr($p286);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1208} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i287 := $M.52;
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i288 := $sub.i32($i287, 1);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $M.52 := $i288;
    call {:si_unique_call 1209} {:cexpr "ref_cnt"} boogie_si_record_i32($i288);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb185:
    assume $i280 == 1;
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $p281 := $M.44;
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} origin_dtr($p281);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1205} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $i282 := $M.52;
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i283 := $sub.i32($i282, 1);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $M.52 := $i283;
    call {:si_unique_call 1206} {:cexpr "ref_cnt"} boogie_si_record_i32($i283);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb182:
    assume $i275 == 1;
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $p276 := $M.44;
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} origin_dtr($p276);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1202} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i277 := $M.52;
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i278 := $sub.i32($i277, 1);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $M.52 := $i278;
    call {:si_unique_call 1203} {:cexpr "ref_cnt"} boogie_si_record_i32($i278);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb179:
    assume $i270 == 1;
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $p271 := $M.44;
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} origin_dtr($p271);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1199} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i272 := $M.52;
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i273 := $sub.i32($i272, 1);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $M.52 := $i273;
    call {:si_unique_call 1200} {:cexpr "ref_cnt"} boogie_si_record_i32($i273);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb168:
    assume $i258 == 1;
    assume {:verifier.code 0} true;
    $i259 := $eq.i32($i248, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    assume !($i259 == 1);
    goto $bb159;

  $bb170:
    assume $i259 == 1;
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i260 := $M.48;
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $i261 := $eq.i32($i260, 1);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb172:
    assume $i261 == 1;
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $p262 := $M.44;
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $i263 := $load.i32($M.0, $p10);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} $i264 := origin_ctr($p262, $i263, $p31);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $M.57 := $i264;
    call {:si_unique_call 1195} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i264);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i265 := $M.57;
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i265, 0);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb174:
    assume $i266 == 1;
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1196} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $i267 := $M.52;
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i268 := $add.i32($i267, 1);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $M.52 := $i268;
    call {:si_unique_call 1197} {:cexpr "ref_cnt"} boogie_si_record_i32($i268);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    goto $bb176;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    $i88 := $slt.i32($i80, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i88 == 1);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i244 := $M.47;
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $i245 := $ne.i32($i244, 0);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb143:
    assume $i245 == 1;
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} ldv_main_exported_3();
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    goto $bb145;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i88 == 1;
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i80, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb11;

  $bb20:
    assume $i89 == 1;
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i90 := $M.46;
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb22:
    assume $i91 == 1;
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1123} $i92 := __VERIFIER_nondet_int();
    call {:si_unique_call 1124} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i92);
    call {:si_unique_call 1125} {:cexpr "tmp___16"} boogie_si_record_i32($i92);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i92, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94 := $slt.i32($i92, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i92, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i92, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i92, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i97 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} ldv_stop();
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb33:
    assume $i97 == 1;
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i241 := $M.46;
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i241, 3);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb136:
    assume $i242 == 1;
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} vslice_dummy_var_89 := ldv_postsuspend_6();
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1188} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb31:
    assume $i96 == 1;
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i238 := $M.46;
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i239 := $eq.i32($i238, 2);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb133:
    assume $i239 == 1;
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} vslice_dummy_var_88 := ldv_presuspend_6();
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1186} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb29:
    assume $i95 == 1;
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i235 := $M.46;
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $i236 := $eq.i32($i235, 5);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb130:
    assume $i236 == 1;
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $p237 := $M.45;
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} snapshot_resume($p237);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1184} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    goto $bb132;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i94 == 1;
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i92, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i98 == 1);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i205 := $M.46;
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $i206 := $eq.i32($i205, 4);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $i211 := $M.46;
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i211, 1);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $i217 := $M.46;
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i217, 3);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $i223 := $M.46;
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i224 := $eq.i32($i223, 2);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i229 := $M.46;
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i229, 5);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb127:
    assume $i230 == 1;
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $p231 := $M.45;
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $i232 := $load.i32($M.0, $p5);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i233 := $load.i32($M.0, $p3);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i234 := $load.i32($M.0, $p1);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} snapshot_status($p231, $i232, $i233, $p18, $i234);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $M.46 := 5;
    call {:si_unique_call 1182} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    goto $bb129;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb124:
    assume $i224 == 1;
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $p225 := $M.45;
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i226 := $load.i32($M.0, $p5);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i227 := $load.i32($M.0, $p3);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i228 := $load.i32($M.0, $p1);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} snapshot_status($p225, $i226, $i227, $p18, $i228);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1180} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    goto $bb126;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb121:
    assume $i218 == 1;
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $p219 := $M.45;
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i220 := $load.i32($M.0, $p5);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i221 := $load.i32($M.0, $p3);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i222 := $load.i32($M.0, $p1);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} snapshot_status($p219, $i220, $i221, $p18, $i222);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1178} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    goto $bb123;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb118:
    assume $i212 == 1;
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p213 := $M.45;
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i214 := $load.i32($M.0, $p5);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.0, $p3);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i216 := $load.i32($M.0, $p1);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} snapshot_status($p213, $i214, $i215, $p18, $i216);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1176} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    goto $bb120;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb115:
    assume $i206 == 1;
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $p207 := $M.45;
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $i208 := $load.i32($M.0, $p5);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i209 := $load.i32($M.0, $p3);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $i210 := $load.i32($M.0, $p1);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} snapshot_status($p207, $i208, $i209, $p18, $i210);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1174} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    goto $bb117;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i98 == 1;
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $i189 := $M.46;
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $i190 := $eq.i32($i189, 4);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $i193 := $M.46;
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $i194 := $eq.i32($i193, 3);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $i197 := $M.46;
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $i198 := $eq.i32($i197, 2);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $i201 := $M.46;
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i202 := $eq.i32($i201, 5);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb112:
    assume $i202 == 1;
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $p203 := $M.45;
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} vslice_dummy_var_87 := snapshot_map($p203, $p23);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $M.46 := 5;
    call {:si_unique_call 1172} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    goto $bb114;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb109:
    assume $i198 == 1;
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $p199 := $M.45;
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} vslice_dummy_var_86 := snapshot_map($p199, $p23);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1170} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    goto $bb111;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb106:
    assume $i194 == 1;
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $p195 := $M.45;
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} vslice_dummy_var_85 := snapshot_map($p195, $p23);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1168} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    goto $bb108;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb103:
    assume $i190 == 1;
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $p191 := $M.45;
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} vslice_dummy_var_84 := snapshot_map($p191, $p23);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1166} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    goto $bb105;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i93 == 1;
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i92, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i92, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i92, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i101 == 1);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i164 := $M.46;
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, 4);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i169 := $M.46;
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i169, 1);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i174 := $M.46;
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i175 := $eq.i32($i174, 3);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i179 := $M.46;
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i179, 2);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i184 := $M.46;
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i184, 5);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb100:
    assume $i185 == 1;
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $p186 := $M.45;
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $p187 := $load.ref($M.0, $p2);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} vslice_dummy_var_83 := snapshot_iterate_devices($p186, $p187, $p19);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $M.46 := 5;
    call {:si_unique_call 1164} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb97:
    assume $i180 == 1;
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $p181 := $M.45;
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $p182 := $load.ref($M.0, $p2);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} vslice_dummy_var_82 := snapshot_iterate_devices($p181, $p182, $p19);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1162} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb94:
    assume $i175 == 1;
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $p176 := $M.45;
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p2);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} vslice_dummy_var_81 := snapshot_iterate_devices($p176, $p177, $p19);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1160} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb91:
    assume $i170 == 1;
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $p171 := $M.45;
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.0, $p2);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} vslice_dummy_var_80 := snapshot_iterate_devices($p171, $p172, $p19);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1158} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb88:
    assume $i165 == 1;
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $p166 := $M.45;
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.0, $p2);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} vslice_dummy_var_79 := snapshot_iterate_devices($p166, $p167, $p19);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1156} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb42:
    assume $i101 == 1;
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i158 := $M.46;
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 4);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb82:
    assume $i159 == 1;
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $p160 := $M.45;
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} $i161 := snapshot_preresume($p160);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $M.56 := $i161;
    call {:si_unique_call 1153} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i161);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i162 := $M.56;
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i162, 0);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb84:
    assume $i163 == 1;
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $M.46 := 5;
    call {:si_unique_call 1154} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb40:
    assume $i100 == 1;
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $i138 := $M.46;
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i138, 4);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i143 := $M.46;
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i143, 3);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i148 := $M.46;
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 2);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i153 := $M.46;
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i153, 5);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb79:
    assume $i154 == 1;
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $p155 := $M.45;
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} snapshot_dtr($p155);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1150} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $i156 := $M.52;
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i157 := $sub.i32($i156, 1);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $M.52 := $i157;
    call {:si_unique_call 1151} {:cexpr "ref_cnt"} boogie_si_record_i32($i157);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    goto $bb81;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb76:
    assume $i149 == 1;
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $p150 := $M.45;
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} snapshot_dtr($p150);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1147} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $i151 := $M.52;
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $i152 := $sub.i32($i151, 1);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $M.52 := $i152;
    call {:si_unique_call 1148} {:cexpr "ref_cnt"} boogie_si_record_i32($i152);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    goto $bb78;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb73:
    assume $i144 == 1;
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $p145 := $M.45;
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} snapshot_dtr($p145);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1144} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $i146 := $M.52;
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i147 := $sub.i32($i146, 1);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $M.52 := $i147;
    call {:si_unique_call 1145} {:cexpr "ref_cnt"} boogie_si_record_i32($i147);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    goto $bb75;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb70:
    assume $i139 == 1;
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $p140 := $M.45;
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} snapshot_dtr($p140);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1141} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i141 := $M.52;
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i142 := $sub.i32($i141, 1);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $M.52 := $i142;
    call {:si_unique_call 1142} {:cexpr "ref_cnt"} boogie_si_record_i32($i142);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    goto $bb72;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i99 == 1;
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i92, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i102 == 1);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i113 := $M.46;
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 4);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i118 := $M.46;
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 1);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i123 := $M.46;
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, 3);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i128 := $M.46;
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 2);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i133 := $M.46;
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, 5);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb67:
    assume $i134 == 1;
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $p135 := $M.45;
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.0, $p0);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} vslice_dummy_var_78 := snapshot_end_io($p135, $p21, $i136);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $M.46 := 5;
    call {:si_unique_call 1139} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb64:
    assume $i129 == 1;
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $p130 := $M.45;
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p0);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} vslice_dummy_var_77 := snapshot_end_io($p130, $p21, $i131);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1137} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb61:
    assume $i124 == 1;
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $p125 := $M.45;
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.0, $p0);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} vslice_dummy_var_76 := snapshot_end_io($p125, $p21, $i126);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1135} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb58:
    assume $i119 == 1;
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $p120 := $M.45;
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p0);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} vslice_dummy_var_75 := snapshot_end_io($p120, $p21, $i121);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1133} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb55:
    assume $i114 == 1;
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $p115 := $M.45;
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p0);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} vslice_dummy_var_74 := snapshot_end_io($p115, $p21, $i116);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1131} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb44:
    assume $i102 == 1;
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i92, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i103 == 1);
    goto $bb35;

  $bb46:
    assume $i103 == 1;
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i104 := $M.46;
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 1);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb48:
    assume $i105 == 1;
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $p106 := $M.45;
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p4);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} $i108 := snapshot_ctr($p106, $i107, $p25);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $M.55 := $i108;
    call {:si_unique_call 1127} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i108);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i109 := $M.55;
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 0);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb50:
    assume $i110 == 1;
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1128} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i111 := $M.52;
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i112 := $add.i32($i111, 1);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $M.52 := $i112;
    call {:si_unique_call 1129} {:cexpr "ref_cnt"} boogie_si_record_i32($i112);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb142_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1120} $i80 := __VERIFIER_nondet_int();
    call {:si_unique_call 1121} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i80);
    call {:si_unique_call 1122} {:cexpr "tmp___15"} boogie_si_record_i32($i80);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 476011);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    return;
}



const ldv_presuspend_6: ref;

axiom ldv_presuspend_6 == $sub.ref(0, 477043);

procedure ldv_presuspend_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_presuspend_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1354} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1355} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_postsuspend_6: ref;

axiom ldv_postsuspend_6 == $sub.ref(0, 478075);

procedure ldv_postsuspend_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_postsuspend_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1356} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1357} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 479107);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_main_exported_3: ref;

axiom ldv_main_exported_3 == $sub.ref(0, 480139);

procedure ldv_main_exported_3();
  free requires assertsPassed;
  modifies $M.0, $M.47, $M.52, $CurrAddr, $M.9, $M.10, $M.11, $M.23, assertsPassed, $M.1, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.31, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35;



implementation ldv_main_exported_3()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $i104: i32;
  var $i105: i32;
  var vslice_dummy_var_120: ref;
  var vslice_dummy_var_121: ref;
  var vslice_dummy_var_122: ref;
  var vslice_dummy_var_123: ref;
  var vslice_dummy_var_124: ref;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} $p6 := ldv_init_zalloc(8);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} $p8 := ldv_init_zalloc(1);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} $p9 := ldv_init_zalloc(8);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} $p11 := ldv_init_zalloc(1);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $p12 := ldv_init_zalloc(8);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} $p14 := ldv_init_zalloc(8);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p0);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} vslice_dummy_var_120 := ldv_memset($p16, 0, 4);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p1);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} vslice_dummy_var_121 := ldv_memset($p18, 0, 4);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p2);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} vslice_dummy_var_122 := ldv_memset($p20, 0, 4);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p3);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} vslice_dummy_var_123 := ldv_memset($p22, 0, 8);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p4);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} vslice_dummy_var_124 := ldv_memset($p24, 0, 8);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1375} $i26 := __VERIFIER_nondet_int();
    call {:si_unique_call 1376} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i26);
    call {:si_unique_call 1377} {:cexpr "tmp___6"} boogie_si_record_i32($i26);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i26, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i26, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i26, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i26, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} ldv_stop();
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i31 == 1;
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i101 := $M.47;
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 1);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb66:
    assume $i102 == 1;
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} vslice_dummy_var_133 := ldv_probe_3();
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1408} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $i104 := $M.52;
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $i105 := $add.i32($i104, 1);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $M.52 := $i105;
    call {:si_unique_call 1409} {:cexpr "ref_cnt"} boogie_si_record_i32($i105);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i96 := $M.47;
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 2);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb63:
    assume $i97 == 1;
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} vslice_dummy_var_132 := ldv_release_3();
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1405} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $i99 := $M.52;
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $i100 := $sub.i32($i99, 1);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $M.52 := $i100;
    call {:si_unique_call 1406} {:cexpr "ref_cnt"} boogie_si_record_i32($i100);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb6:
    assume $i29 == 1;
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i90 := $M.47;
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 1);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i93 := $M.47;
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 2);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb60:
    assume $i94 == 1;
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $p95 := $M.62;
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} transient_usage($p95, $p7, $p13, $p15);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1403} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb57:
    assume $i91 == 1;
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $p92 := $M.62;
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} transient_usage($p92, $p7, $p13, $p15);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1401} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb4:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i26, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $i78 := $M.47;
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 1);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i84 := $M.47;
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 2);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb54:
    assume $i85 == 1;
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $p86 := $M.62;
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p2);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p1);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} vslice_dummy_var_131 := transient_status($p86, $i87, $p11, $i88);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1399} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb51:
    assume $i79 == 1;
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $p80 := $M.62;
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p2);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p1);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} vslice_dummy_var_130 := transient_status($p80, $i81, $p11, $i82);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1397} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb13:
    assume $i32 == 1;
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $i68 := $M.47;
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 1);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i73 := $M.47;
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 2);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb48:
    assume $i74 == 1;
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $p75 := $M.62;
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $p76 := $M.63;
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p4);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} transient_commit_exception($p75, $p76, $p77, $p8);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1395} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    goto $bb50;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i69 == 1;
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $p70 := $M.62;
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $p71 := $M.63;
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p4);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} transient_commit_exception($p70, $p71, $p72, $p8);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1393} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i26, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i26, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $i58 := $M.47;
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 1);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i63 := $M.47;
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 2);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb42:
    assume $i64 == 1;
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $p65 := $M.62;
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $p66 := $M.63;
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} vslice_dummy_var_129 := transient_prepare_exception($p65, $p66);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1391} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i59 == 1;
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $p60 := $M.62;
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $p61 := $M.63;
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} vslice_dummy_var_128 := transient_prepare_exception($p60, $p61);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1389} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb17:
    assume $i34 == 1;
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $i53 := $M.47;
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 2);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb36:
    assume $i54 == 1;
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $p55 := $M.62;
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p3);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} vslice_dummy_var_127 := transient_read_metadata($p55, $p56, $p5);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1387} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb15:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i26, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i35 == 1);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i47 := $M.47;
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 1);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i50 := $M.47;
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 2);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb33:
    assume $i51 == 1;
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $p52 := $M.62;
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} transient_dtr($p52);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1385} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i48 == 1;
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $p49 := $M.62;
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} transient_dtr($p49);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1383} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb19:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i26, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb12;

  $bb21:
    assume $i36 == 1;
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $i37 := $M.47;
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 1);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i42 := $M.47;
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 2);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i43 == 1;
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $p44 := $M.62;
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p0);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} vslice_dummy_var_126 := transient_ctr($p44, $i45, $p10);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1381} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i38 == 1;
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $p39 := $M.62;
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p0);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} vslice_dummy_var_125 := transient_ctr($p39, $i40, $p10);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1379} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_331:
    assume !assertsPassed;
    return;
}



const ldv_presuspend_7: ref;

axiom ldv_presuspend_7 == $sub.ref(0, 481171);

procedure ldv_presuspend_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_presuspend_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1411} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1412} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_preresume_7: ref;

axiom ldv_preresume_7 == $sub.ref(0, 482203);

procedure ldv_preresume_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_preresume_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1413} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1414} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_main_exported_2: ref;

axiom ldv_main_exported_2 == $sub.ref(0, 483235);

procedure ldv_main_exported_2();
  free requires assertsPassed;
  modifies $M.0, $M.49, $M.31, $M.32, $M.33, $M.52, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35, $CurrAddr, $M.9, $M.10, $M.11, $M.23, assertsPassed, $M.1, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22;



implementation ldv_main_exported_2()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i32;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i107: i32;
  var $i108: i32;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i130: i32;
  var $i131: i1;
  var $i133: i32;
  var $i134: i32;
  var $i135: i32;
  var $i136: i1;
  var $i138: i32;
  var $i139: i32;
  var vslice_dummy_var_134: ref;
  var vslice_dummy_var_135: ref;
  var vslice_dummy_var_136: ref;
  var vslice_dummy_var_137: ref;
  var vslice_dummy_var_138: ref;
  var vslice_dummy_var_139: ref;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} $p6 := ldv_init_zalloc(8);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} $p8 := ldv_init_zalloc(8);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} $p10 := ldv_init_zalloc(8);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} $p12 := ldv_init_zalloc(8);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} $p14 := ldv_init_zalloc(1);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} $p15 := ldv_init_zalloc(1);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} $p16 := ldv_init_zalloc(8);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} $p18 := ldv_init_zalloc(8);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} $p20 := ldv_init_zalloc(1);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p0);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} vslice_dummy_var_134 := ldv_memset($p21, 0, 4);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p1);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} vslice_dummy_var_135 := ldv_memset($p23, 0, 8);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p2);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} vslice_dummy_var_136 := ldv_memset($p25, 0, 4);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p3);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} vslice_dummy_var_137 := ldv_memset($p27, 0, 8);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p4);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} vslice_dummy_var_138 := ldv_memset($p29, 0, 4);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p5);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} vslice_dummy_var_139 := ldv_memset($p31, 0, 4);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1436} $i33 := __VERIFIER_nondet_int();
    call {:si_unique_call 1437} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i33);
    call {:si_unique_call 1438} {:cexpr "tmp___8"} boogie_si_record_i32($i33);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i33, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i33, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i33, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i33, 11);
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} ldv_stop();
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i38 == 1;
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $i135 := $M.49;
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 1);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb90:
    assume $i136 == 1;
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} vslice_dummy_var_152 := ldv_probe_2();
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1481} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $i138 := $M.52;
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $i139 := $add.i32($i138, 1);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $M.52 := $i139;
    call {:si_unique_call 1482} {:cexpr "ref_cnt"} boogie_si_record_i32($i139);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb8:
    assume $i37 == 1;
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $i130 := $M.49;
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i130, 2);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb87:
    assume $i131 == 1;
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} vslice_dummy_var_151 := ldv_release_2();
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1478} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $i133 := $M.52;
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $i134 := $sub.i32($i133, 1);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $M.52 := $i134;
    call {:si_unique_call 1479} {:cexpr "ref_cnt"} boogie_si_record_i32($i134);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb6:
    assume $i36 == 1;
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $i122 := $M.49;
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 1);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i126 := $M.49;
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, 2);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb84:
    assume $i127 == 1;
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $p128 := $M.64;
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} vslice_dummy_var_150 := persistent_prepare_merge($p128, $p7, $p17);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1476} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb81:
    assume $i123 == 1;
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $p124 := $M.64;
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} vslice_dummy_var_149 := persistent_prepare_merge($p124, $p7, $p17);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1474} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb4:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i33, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i33, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i40 == 1);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $i116 := $M.49;
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 1);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i119 := $M.49;
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 2);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb78:
    assume $i120 == 1;
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $p121 := $M.64;
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} persistent_usage($p121, $p19, $p13, $p9);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1472} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb75:
    assume $i117 == 1;
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $p118 := $M.64;
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} persistent_usage($p118, $p19, $p13, $p9);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1470} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb15:
    assume $i40 == 1;
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i104 := $M.49;
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 1);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i110 := $M.49;
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 2);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb72:
    assume $i111 == 1;
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $p112 := $M.64;
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p5);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p2);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} vslice_dummy_var_148 := persistent_status($p112, $i113, $p15, $i114);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1468} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb69:
    assume $i105 == 1;
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $p106 := $M.64;
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p5);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p2);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} vslice_dummy_var_147 := persistent_status($p106, $i107, $p15, $i108);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1466} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $i94 := $M.49;
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 1);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i99 := $M.49;
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 2);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb66:
    assume $i100 == 1;
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $p101 := $M.64;
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $p102 := $M.65;
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p1);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} persistent_commit_exception($p101, $p102, $p103, $p14);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1464} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    goto $bb68;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  $bb63:
    assume $i95 == 1;
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $p96 := $M.64;
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $p97 := $M.65;
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p1);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} persistent_commit_exception($p96, $p97, $p98, $p14);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1462} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i33, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i33, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i33, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i43 == 1);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $i88 := $M.49;
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 1);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i91 := $M.49;
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 2);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb60:
    assume $i92 == 1;
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $p93 := $M.64;
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} persistent_drop_snapshot($p93);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1460} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb57:
    assume $i89 == 1;
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $p90 := $M.64;
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} persistent_drop_snapshot($p90);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1458} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb21:
    assume $i43 == 1;
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $i78 := $M.49;
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 1);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i83 := $M.49;
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 2);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb54:
    assume $i84 == 1;
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $p85 := $M.64;
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $p86 := $M.65;
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} vslice_dummy_var_146 := persistent_prepare_exception($p85, $p86);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1456} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb51:
    assume $i79 == 1;
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $p80 := $M.64;
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $p81 := $M.65;
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} vslice_dummy_var_145 := persistent_prepare_exception($p80, $p81);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1454} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb19:
    assume $i42 == 1;
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $i73 := $M.49;
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 2);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb48:
    assume $i74 == 1;
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $p75 := $M.64;
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p3);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} vslice_dummy_var_144 := persistent_read_metadata($p75, $p76, $p20);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1452} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    goto $bb50;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i33, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i33, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i45 == 1);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $i67 := $M.49;
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 1);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i70 := $M.49;
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 2);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb45:
    assume $i71 == 1;
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $p72 := $M.64;
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} persistent_dtr($p72);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1450} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb42:
    assume $i68 == 1;
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $p69 := $M.64;
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} persistent_dtr($p69);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1448} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb25:
    assume $i45 == 1;
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $i57 := $M.49;
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 1);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i62 := $M.49;
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 2);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb39:
    assume $i63 == 1;
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $p64 := $M.64;
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p0);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} vslice_dummy_var_143 := persistent_commit_merge($p64, $i65);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1446} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i58 == 1;
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $p59 := $M.64;
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p0);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} vslice_dummy_var_142 := persistent_commit_merge($p59, $i60);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1444} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb23:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i33, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb12;

  $bb27:
    assume $i46 == 1;
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $i47 := $M.49;
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 1);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i52 := $M.49;
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 2);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume $i53 == 1;
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $p54 := $M.64;
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p4);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} vslice_dummy_var_141 := persistent_ctr($p54, $i55, $p11);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1442} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i48 == 1;
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $p49 := $M.64;
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p4);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} vslice_dummy_var_140 := persistent_ctr($p49, $i50, $p11);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1440} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_343:
    assume !assertsPassed;
    return;
}



const ldv_main_exported_1: ref;

axiom ldv_main_exported_1 == $sub.ref(0, 484267);

procedure ldv_main_exported_1();
  free requires assertsPassed;
  modifies $M.0, $M.50, $M.31, $M.32, $M.33, $M.52, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35, $CurrAddr, $M.9, $M.10, $M.11, $M.23, assertsPassed, $M.1, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22;



implementation ldv_main_exported_1()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i32;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i107: i32;
  var $i108: i32;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i130: i32;
  var $i131: i1;
  var $i133: i32;
  var $i134: i32;
  var $i135: i32;
  var $i136: i1;
  var $i138: i32;
  var $i139: i32;
  var vslice_dummy_var_153: ref;
  var vslice_dummy_var_154: ref;
  var vslice_dummy_var_155: ref;
  var vslice_dummy_var_156: ref;
  var vslice_dummy_var_157: ref;
  var vslice_dummy_var_158: ref;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} $p6 := ldv_init_zalloc(8);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} $p8 := ldv_init_zalloc(8);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} $p10 := ldv_init_zalloc(8);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} $p12 := ldv_init_zalloc(1);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} $p13 := ldv_init_zalloc(8);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} $p15 := ldv_init_zalloc(1);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} $p16 := ldv_init_zalloc(1);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} $p17 := ldv_init_zalloc(8);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} $p19 := ldv_init_zalloc(8);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p0);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} vslice_dummy_var_153 := ldv_memset($p21, 0, 4);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p1);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} vslice_dummy_var_154 := ldv_memset($p23, 0, 4);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p2);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} vslice_dummy_var_155 := ldv_memset($p25, 0, 8);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p3);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} vslice_dummy_var_156 := ldv_memset($p27, 0, 4);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p4);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} vslice_dummy_var_157 := ldv_memset($p29, 0, 4);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p5);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} vslice_dummy_var_158 := ldv_memset($p31, 0, 8);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1505} $i33 := __VERIFIER_nondet_int();
    call {:si_unique_call 1506} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i33);
    call {:si_unique_call 1507} {:cexpr "tmp___8"} boogie_si_record_i32($i33);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i33, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i33, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i33, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i33, 11);
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} ldv_stop();
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i38 == 1;
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $i135 := $M.50;
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 1);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb90:
    assume $i136 == 1;
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} vslice_dummy_var_171 := ldv_probe_1();
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1550} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $i138 := $M.52;
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $i139 := $add.i32($i138, 1);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $M.52 := $i139;
    call {:si_unique_call 1551} {:cexpr "ref_cnt"} boogie_si_record_i32($i139);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb8:
    assume $i37 == 1;
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $i130 := $M.50;
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i130, 2);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb87:
    assume $i131 == 1;
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} vslice_dummy_var_170 := ldv_release_1();
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1547} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $i133 := $M.52;
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $i134 := $sub.i32($i133, 1);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $M.52 := $i134;
    call {:si_unique_call 1548} {:cexpr "ref_cnt"} boogie_si_record_i32($i134);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb6:
    assume $i36 == 1;
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i122 := $M.50;
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 1);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i126 := $M.50;
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, 2);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb84:
    assume $i127 == 1;
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $p128 := $M.66;
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} vslice_dummy_var_169 := persistent_prepare_merge($p128, $p18, $p14);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1545} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb81:
    assume $i123 == 1;
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $p124 := $M.66;
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} vslice_dummy_var_168 := persistent_prepare_merge($p124, $p18, $p14);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1543} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb4:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i33, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i33, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i40 == 1);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $i116 := $M.50;
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 1);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i119 := $M.50;
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 2);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb78:
    assume $i120 == 1;
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $p121 := $M.66;
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} persistent_usage($p121, $p11, $p9, $p7);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1541} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb75:
    assume $i117 == 1;
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $p118 := $M.66;
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} persistent_usage($p118, $p11, $p9, $p7);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1539} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb15:
    assume $i40 == 1;
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $i104 := $M.50;
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 1);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i110 := $M.50;
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 2);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb72:
    assume $i111 == 1;
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $p112 := $M.66;
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p3);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p0);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} vslice_dummy_var_167 := persistent_status($p112, $i113, $p15, $i114);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1537} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb69:
    assume $i105 == 1;
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $p106 := $M.66;
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p3);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p0);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} vslice_dummy_var_166 := persistent_status($p106, $i107, $p15, $i108);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1535} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i94 := $M.50;
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 1);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i99 := $M.50;
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 2);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb66:
    assume $i100 == 1;
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $p101 := $M.66;
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $p102 := $M.67;
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p5);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} persistent_commit_exception($p101, $p102, $p103, $p12);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1533} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    goto $bb68;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb63:
    assume $i95 == 1;
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $p96 := $M.66;
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $p97 := $M.67;
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p5);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} persistent_commit_exception($p96, $p97, $p98, $p12);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1531} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i33, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i33, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i33, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i43 == 1);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $i88 := $M.50;
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 1);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i91 := $M.50;
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 2);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb60:
    assume $i92 == 1;
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $p93 := $M.66;
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} persistent_drop_snapshot($p93);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1529} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb57:
    assume $i89 == 1;
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $p90 := $M.66;
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} persistent_drop_snapshot($p90);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1527} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb21:
    assume $i43 == 1;
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $i78 := $M.50;
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 1);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i83 := $M.50;
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 2);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb54:
    assume $i84 == 1;
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $p85 := $M.66;
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $p86 := $M.67;
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} vslice_dummy_var_165 := persistent_prepare_exception($p85, $p86);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1525} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb51:
    assume $i79 == 1;
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $p80 := $M.66;
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $p81 := $M.67;
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} vslice_dummy_var_164 := persistent_prepare_exception($p80, $p81);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1523} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb19:
    assume $i42 == 1;
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $i73 := $M.50;
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 2);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb48:
    assume $i74 == 1;
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $p75 := $M.66;
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p2);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} vslice_dummy_var_163 := persistent_read_metadata($p75, $p76, $p16);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1521} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    goto $bb50;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i33, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i33, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i45 == 1);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $i67 := $M.50;
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 1);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i70 := $M.50;
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 2);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb45:
    assume $i71 == 1;
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $p72 := $M.66;
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} persistent_dtr($p72);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1519} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb42:
    assume $i68 == 1;
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $p69 := $M.66;
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} persistent_dtr($p69);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1517} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb25:
    assume $i45 == 1;
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i57 := $M.50;
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 1);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i62 := $M.50;
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 2);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb39:
    assume $i63 == 1;
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $p64 := $M.66;
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p4);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} vslice_dummy_var_162 := persistent_commit_merge($p64, $i65);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1515} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i58 == 1;
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $p59 := $M.66;
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p4);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} vslice_dummy_var_161 := persistent_commit_merge($p59, $i60);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1513} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb23:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i33, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb12;

  $bb27:
    assume $i46 == 1;
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $i47 := $M.50;
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 1);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i52 := $M.50;
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 2);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume $i53 == 1;
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $p54 := $M.66;
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p1);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} vslice_dummy_var_160 := persistent_ctr($p54, $i55, $p20);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1511} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i48 == 1;
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $p49 := $M.66;
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p1);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} vslice_dummy_var_159 := persistent_ctr($p49, $i50, $p20);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1509} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_358:
    assume !assertsPassed;
    return;
}



const ldv_main_exported_4: ref;

axiom ldv_main_exported_4 == $sub.ref(0, 485299);

procedure ldv_main_exported_4();
  free requires assertsPassed;
  modifies $M.0, $M.51, $M.52, $CurrAddr, $M.9, $M.10, $M.11, $M.23, assertsPassed, $M.1, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.31, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35;



implementation ldv_main_exported_4()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $i104: i32;
  var $i105: i32;
  var vslice_dummy_var_172: ref;
  var vslice_dummy_var_173: ref;
  var vslice_dummy_var_174: ref;
  var vslice_dummy_var_175: ref;
  var vslice_dummy_var_176: ref;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} $p5 := ldv_init_zalloc(8);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} $p7 := ldv_init_zalloc(8);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} $p9 := ldv_init_zalloc(8);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} $p11 := ldv_init_zalloc(1);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} $p12 := ldv_init_zalloc(1);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} $p13 := ldv_init_zalloc(8);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} $p15 := ldv_init_zalloc(1);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p0);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} vslice_dummy_var_172 := ldv_memset($p16, 0, 8);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p1);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} vslice_dummy_var_173 := ldv_memset($p18, 0, 4);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p2);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} vslice_dummy_var_174 := ldv_memset($p20, 0, 8);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p3);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} vslice_dummy_var_175 := ldv_memset($p22, 0, 4);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p4);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} vslice_dummy_var_176 := ldv_memset($p24, 0, 4);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1570} $i26 := __VERIFIER_nondet_int();
    call {:si_unique_call 1571} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i26);
    call {:si_unique_call 1572} {:cexpr "tmp___6"} boogie_si_record_i32($i26);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i26, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i26, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i26, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i26, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} ldv_stop();
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i31 == 1;
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $i101 := $M.51;
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 1);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb66:
    assume $i102 == 1;
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} vslice_dummy_var_185 := ldv_probe_4();
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1603} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $i104 := $M.52;
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $i105 := $add.i32($i104, 1);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $M.52 := $i105;
    call {:si_unique_call 1604} {:cexpr "ref_cnt"} boogie_si_record_i32($i105);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $i96 := $M.51;
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 2);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb63:
    assume $i97 == 1;
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} vslice_dummy_var_184 := ldv_release_4();
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1600} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $i99 := $M.52;
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $i100 := $sub.i32($i99, 1);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $M.52 := $i100;
    call {:si_unique_call 1601} {:cexpr "ref_cnt"} boogie_si_record_i32($i100);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb6:
    assume $i29 == 1;
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $i90 := $M.51;
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 1);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i93 := $M.51;
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 2);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb60:
    assume $i94 == 1;
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $p95 := $M.68;
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} transient_usage($p95, $p14, $p8, $p10);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1598} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb57:
    assume $i91 == 1;
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $p92 := $M.68;
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} transient_usage($p92, $p14, $p8, $p10);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1596} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb4:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i26, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $i78 := $M.51;
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 1);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i84 := $M.51;
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 2);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb54:
    assume $i85 == 1;
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $p86 := $M.68;
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p4);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p3);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} vslice_dummy_var_183 := transient_status($p86, $i87, $p11, $i88);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1594} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb51:
    assume $i79 == 1;
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $p80 := $M.68;
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p4);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p3);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} vslice_dummy_var_182 := transient_status($p80, $i81, $p11, $i82);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1592} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb13:
    assume $i32 == 1;
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $i68 := $M.51;
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 1);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i73 := $M.51;
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 2);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb48:
    assume $i74 == 1;
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $p75 := $M.68;
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $p76 := $M.69;
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p2);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} transient_commit_exception($p75, $p76, $p77, $p12);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1590} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    goto $bb50;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i69 == 1;
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $p70 := $M.68;
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $p71 := $M.69;
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p2);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} transient_commit_exception($p70, $p71, $p72, $p12);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1588} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i26, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i26, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $i58 := $M.51;
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 1);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i63 := $M.51;
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 2);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb42:
    assume $i64 == 1;
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $p65 := $M.68;
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $p66 := $M.69;
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} vslice_dummy_var_181 := transient_prepare_exception($p65, $p66);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1586} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i59 == 1;
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $p60 := $M.68;
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $p61 := $M.69;
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} vslice_dummy_var_180 := transient_prepare_exception($p60, $p61);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1584} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb17:
    assume $i34 == 1;
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $i53 := $M.51;
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 2);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb36:
    assume $i54 == 1;
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $p55 := $M.68;
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p0);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} vslice_dummy_var_179 := transient_read_metadata($p55, $p56, $p15);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1582} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb15:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i26, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i35 == 1);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i47 := $M.51;
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 1);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i50 := $M.51;
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 2);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb33:
    assume $i51 == 1;
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $p52 := $M.68;
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} transient_dtr($p52);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1580} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i48 == 1;
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $p49 := $M.68;
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} transient_dtr($p49);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1578} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb19:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i26, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb12;

  $bb21:
    assume $i36 == 1;
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $i37 := $M.51;
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 1);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i42 := $M.51;
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 2);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i43 == 1;
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $p44 := $M.68;
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p1);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} vslice_dummy_var_178 := transient_ctr($p44, $i45, $p6);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1576} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i38 == 1;
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $p39 := $M.68;
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p1);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} vslice_dummy_var_177 := transient_ctr($p39, $i40, $p6);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1574} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_373:
    assume !assertsPassed;
    return;
}



const dm_snapshot_exit: ref;

axiom dm_snapshot_exit == $sub.ref(0, 486331);

procedure dm_snapshot_exit();
  free requires assertsPassed;
  modifies $M.1;



implementation dm_snapshot_exit()
{
  var $p0: ref;
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} dm_unregister_target(snapshot_target);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} dm_unregister_target(origin_target);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} dm_unregister_target(merge_target);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} exit_origin_hash();
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $p0 := $M.6;
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} kmem_cache_destroy($p0);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $p1 := $M.8;
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} kmem_cache_destroy($p1);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} dm_exception_store_exit();
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    return;
}



const dm_snapshot_init: ref;

axiom dm_snapshot_init == $sub.ref(0, 487363);

procedure dm_snapshot_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.6, $M.14, $M.0, $M.13, $M.1, $CurrAddr, assertsPassed;



implementation dm_snapshot_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i4: i32;
  var $i5: i1;
  var $i8: i32;
  var $i9: i1;
  var $i12: i32;
  var $i13: i1;
  var $i16: i32;
  var $i17: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $i19: i32;
  var $i15: i32;
  var $i11: i32;
  var $i7: i32;
  var $i3: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;
  var vslice_dummy_var_188: i32;
  var vslice_dummy_var_189: i32;
  var vslice_dummy_var_190: i32;
  var vslice_dummy_var_191: i32;
  var vslice_dummy_var_192: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} $i0 := dm_exception_store_init();
    call {:si_unique_call 1614} {:cexpr "r"} boogie_si_record_i32($i0);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} $i4 := dm_register_target(snapshot_target);
    call {:si_unique_call 1617} {:cexpr "r"} boogie_si_record_i32($i4);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} $i8 := dm_register_target(origin_target);
    call {:si_unique_call 1621} {:cexpr "r"} boogie_si_record_i32($i8);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} $i12 := dm_register_target(merge_target);
    call {:si_unique_call 1625} {:cexpr "r"} boogie_si_record_i32($i12);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} $i16 := init_origin_hash();
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    call {:si_unique_call 1629} {:cexpr "r"} boogie_si_record_i32($i16);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} $p20 := kmem_cache_create(.str.67, 32, 8, 0, $0.ref);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $M.8 := $p20;
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $p21 := $M.8;
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} $p25 := kmem_cache_create(.str.69, 128, 8, 0, $0.ref);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $M.6 := $p25;
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $p26 := $M.6;
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb25:
    assume $i28 == 1;
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} vslice_dummy_var_192 := printk.ref(.str.70);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p30 := $M.8;
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} kmem_cache_destroy($p30);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} exit_origin_hash();
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 12);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} dm_unregister_target(merge_target);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $i15 := $i19;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} dm_unregister_target(origin_target);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $i11 := $i15;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} dm_unregister_target(snapshot_target);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $i7 := $i11;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} dm_exception_store_exit();
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $i3 := $i7;
    goto $bb3;

  $bb21:
    assume $i23 == 1;
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} vslice_dummy_var_191 := printk.ref(.str.68);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb17:
    assume $i17 == 1;
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} vslice_dummy_var_190 := printk.ref(.str.66);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $i19 := $i16;
    goto $bb19;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i13 == 1;
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} vslice_dummy_var_189 := printk.ref.i32(.str.65, $i12);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $i15 := $i12;
    goto $bb15;

  $bb9:
    assume $i9 == 1;
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} vslice_dummy_var_188 := printk.ref.i32(.str.64, $i8);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i11 := $i8;
    goto $bb11;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} vslice_dummy_var_187 := printk.ref.i32(.str.63, $i4);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $i7 := $i4;
    goto $bb7;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} vslice_dummy_var_186 := printk.ref(.str.62);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i3 := $i0;
    goto $bb3;
}



const ldv_initialize_dm_exception_store_type_2: ref;

axiom ldv_initialize_dm_exception_store_type_2 == $sub.ref(0, 488395);

procedure ldv_initialize_dm_exception_store_type_2();
  free requires assertsPassed;
  modifies $M.64, $M.65, $M.0, $CurrAddr;



implementation ldv_initialize_dm_exception_store_type_2()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} $p0 := ldv_init_zalloc(40);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $M.64 := $p0;
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} $p2 := ldv_init_zalloc(32);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $M.65 := $p2;
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_dm_exception_store_type_3: ref;

axiom ldv_initialize_dm_exception_store_type_3 == $sub.ref(0, 489427);

procedure ldv_initialize_dm_exception_store_type_3();
  free requires assertsPassed;
  modifies $M.62, $M.63, $M.0, $CurrAddr;



implementation ldv_initialize_dm_exception_store_type_3()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} $p0 := ldv_init_zalloc(40);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $M.62 := $p0;
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} $p2 := ldv_init_zalloc(32);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $M.63 := $p2;
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_dm_exception_store_type_1: ref;

axiom ldv_initialize_dm_exception_store_type_1 == $sub.ref(0, 490459);

procedure ldv_initialize_dm_exception_store_type_1();
  free requires assertsPassed;
  modifies $M.66, $M.67, $M.0, $CurrAddr;



implementation ldv_initialize_dm_exception_store_type_1()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} $p0 := ldv_init_zalloc(40);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $M.66 := $p0;
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} $p2 := ldv_init_zalloc(32);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $M.67 := $p2;
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_dm_exception_store_type_4: ref;

axiom ldv_initialize_dm_exception_store_type_4 == $sub.ref(0, 491491);

procedure ldv_initialize_dm_exception_store_type_4();
  free requires assertsPassed;
  modifies $M.68, $M.69, $M.0, $CurrAddr;



implementation ldv_initialize_dm_exception_store_type_4()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} $p0 := ldv_init_zalloc(40);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $M.68 := $p0;
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} $p2 := ldv_init_zalloc(32);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $M.69 := $p2;
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    return;
}



const ldv_postsuspend_5: ref;

axiom ldv_postsuspend_5 == $sub.ref(0, 492523);

procedure ldv_postsuspend_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_postsuspend_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1646} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1647} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 493555);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    return;
}



const dm_exception_store_init: ref;

axiom dm_exception_store_init == $sub.ref(0, 494587);

procedure dm_exception_store_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation dm_exception_store_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i32;
  var $i7: i32;
  var vslice_dummy_var_193: i32;
  var vslice_dummy_var_194: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} $i0 := dm_transient_snapshot_init();
    call {:si_unique_call 1649} {:cexpr "r"} boogie_si_record_i32($i0);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} $i4 := dm_persistent_snapshot_init();
    call {:si_unique_call 1652} {:cexpr "r"} boogie_si_record_i32($i4);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} vslice_dummy_var_194 := printk.ref(.str.11);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} dm_transient_snapshot_exit();
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $i3 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i7 := $i3;
    goto $bb9;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} vslice_dummy_var_193 := printk.ref(.str.10);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $i3 := $i0;
    goto $bb3;
}



const dm_register_target: ref;

axiom dm_register_target == $sub.ref(0, 495619);

procedure dm_register_target($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_register_target($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1655} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1656} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const init_origin_hash: ref;

axiom init_origin_hash == $sub.ref(0, 496651);

procedure init_origin_hash() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.0, $M.13, $CurrAddr, assertsPassed;



implementation init_origin_hash() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i7: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $p272: ref;
  var $p273: ref;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $p286: ref;
  var $p287: ref;
  var $p288: ref;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $p294: ref;
  var $p295: ref;
  var $p296: ref;
  var $p297: ref;
  var $p298: ref;
  var $p299: ref;
  var $p300: ref;
  var $p301: ref;
  var $p302: ref;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $p308: ref;
  var $p309: ref;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $p314: ref;
  var $p315: ref;
  var $p316: ref;
  var $p317: ref;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $p322: ref;
  var $p323: ref;
  var $p324: ref;
  var $p325: ref;
  var $p326: ref;
  var $p327: ref;
  var $p328: ref;
  var $p329: ref;
  var $p330: ref;
  var $p331: ref;
  var $p332: ref;
  var $p333: ref;
  var $p334: ref;
  var $p335: ref;
  var $p336: ref;
  var $p337: ref;
  var $p338: ref;
  var $p339: ref;
  var $p340: ref;
  var $p341: ref;
  var $p342: ref;
  var $p343: ref;
  var $p344: ref;
  var $p345: ref;
  var $p346: ref;
  var $p347: ref;
  var $p348: ref;
  var $p349: ref;
  var $p350: ref;
  var $p351: ref;
  var $p352: ref;
  var $p353: ref;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $p358: ref;
  var $p359: ref;
  var $p360: ref;
  var $p361: ref;
  var $p362: ref;
  var $p363: ref;
  var $p364: ref;
  var $p365: ref;
  var $p366: ref;
  var $p367: ref;
  var $p368: ref;
  var $p369: ref;
  var $p370: ref;
  var $p371: ref;
  var $p372: ref;
  var $p373: ref;
  var $p374: ref;
  var $p375: ref;
  var $p376: ref;
  var $p377: ref;
  var $p378: ref;
  var $p379: ref;
  var $p380: ref;
  var $p381: ref;
  var $p382: ref;
  var $p383: ref;
  var $p384: ref;
  var $p385: ref;
  var $p386: ref;
  var $p387: ref;
  var $p388: ref;
  var $p389: ref;
  var $p390: ref;
  var $p391: ref;
  var $p392: ref;
  var $p393: ref;
  var $p394: ref;
  var $p395: ref;
  var $p396: ref;
  var $p397: ref;
  var $p398: ref;
  var $p399: ref;
  var $p400: ref;
  var $p401: ref;
  var $p402: ref;
  var $p403: ref;
  var $p404: ref;
  var $p405: ref;
  var $p406: ref;
  var $p407: ref;
  var $p408: ref;
  var $p409: ref;
  var $p410: ref;
  var $p411: ref;
  var $p412: ref;
  var $p413: ref;
  var $p414: ref;
  var $p415: ref;
  var $p416: ref;
  var $p417: ref;
  var $p418: ref;
  var $p419: ref;
  var $p420: ref;
  var $p421: ref;
  var $p422: ref;
  var $p423: ref;
  var $p424: ref;
  var $p425: ref;
  var $p426: ref;
  var $p427: ref;
  var $p428: ref;
  var $p429: ref;
  var $p430: ref;
  var $p431: ref;
  var $p432: ref;
  var $p433: ref;
  var $p434: ref;
  var $p435: ref;
  var $p436: ref;
  var $p437: ref;
  var $p438: ref;
  var $p439: ref;
  var $p440: ref;
  var $p441: ref;
  var $p442: ref;
  var $p443: ref;
  var $p444: ref;
  var $p445: ref;
  var $p446: ref;
  var $p447: ref;
  var $p448: ref;
  var $p449: ref;
  var $p450: ref;
  var $p451: ref;
  var $p452: ref;
  var $p453: ref;
  var $p454: ref;
  var $p455: ref;
  var $p456: ref;
  var $p457: ref;
  var $p458: ref;
  var $p459: ref;
  var $p460: ref;
  var $p461: ref;
  var $p462: ref;
  var $p463: ref;
  var $p464: ref;
  var $p465: ref;
  var $p466: ref;
  var $p467: ref;
  var $p468: ref;
  var $p469: ref;
  var $p470: ref;
  var $p471: ref;
  var $p472: ref;
  var $p473: ref;
  var $p474: ref;
  var $p475: ref;
  var $p476: ref;
  var $p477: ref;
  var $p478: ref;
  var $p479: ref;
  var $p480: ref;
  var $p481: ref;
  var $p482: ref;
  var $p483: ref;
  var $p484: ref;
  var $p485: ref;
  var $p486: ref;
  var $p487: ref;
  var $p488: ref;
  var $p489: ref;
  var $p490: ref;
  var $p491: ref;
  var $p492: ref;
  var $p493: ref;
  var $p494: ref;
  var $p495: ref;
  var $p496: ref;
  var $p497: ref;
  var $p498: ref;
  var $p499: ref;
  var $p500: ref;
  var $p501: ref;
  var $p502: ref;
  var $p503: ref;
  var $p504: ref;
  var $p505: ref;
  var $p506: ref;
  var $p507: ref;
  var $p508: ref;
  var $p509: ref;
  var $p510: ref;
  var $p511: ref;
  var $p512: ref;
  var $p513: ref;
  var $p514: ref;
  var $p515: ref;
  var $p516: ref;
  var $p517: ref;
  var $p518: ref;
  var $p519: ref;
  var $p520: ref;
  var $p521: ref;
  var $p522: ref;
  var $p523: ref;
  var $p524: ref;
  var $p525: ref;
  var $p526: ref;
  var $p527: ref;
  var $p528: ref;
  var $p529: ref;
  var $p530: ref;
  var $p531: ref;
  var $p532: ref;
  var $p533: ref;
  var $p534: ref;
  var $p535: ref;
  var $p536: ref;
  var $p537: ref;
  var $p538: ref;
  var $p539: ref;
  var $p540: ref;
  var $p541: ref;
  var $p542: ref;
  var $p543: ref;
  var $p544: ref;
  var $p545: ref;
  var $p546: ref;
  var $p547: ref;
  var $p548: ref;
  var $p549: ref;
  var $p550: ref;
  var $p551: ref;
  var $p552: ref;
  var $p553: ref;
  var $p554: ref;
  var $p555: ref;
  var $p556: ref;
  var $p557: ref;
  var $p558: ref;
  var $p559: ref;
  var $p560: ref;
  var $p561: ref;
  var $p562: ref;
  var $p563: ref;
  var $p564: ref;
  var $p565: ref;
  var $p566: ref;
  var $p567: ref;
  var $p568: ref;
  var $p569: ref;
  var $p570: ref;
  var $p571: ref;
  var $p572: ref;
  var $p573: ref;
  var $p574: ref;
  var $p575: ref;
  var $p576: ref;
  var $p577: ref;
  var $p578: ref;
  var $p579: ref;
  var $p580: ref;
  var $p581: ref;
  var $p582: ref;
  var $p583: ref;
  var $p584: ref;
  var $p585: ref;
  var $p586: ref;
  var $p587: ref;
  var $p588: ref;
  var $p589: ref;
  var $p590: ref;
  var $p591: ref;
  var $p592: ref;
  var $p593: ref;
  var $p594: ref;
  var $p595: ref;
  var $p596: ref;
  var $p597: ref;
  var $p598: ref;
  var $p599: ref;
  var $p600: ref;
  var $p601: ref;
  var $p602: ref;
  var $p603: ref;
  var $p604: ref;
  var $p605: ref;
  var $p606: ref;
  var $p607: ref;
  var $p608: ref;
  var $p609: ref;
  var $p610: ref;
  var $p611: ref;
  var $p612: ref;
  var $p613: ref;
  var $p614: ref;
  var $p615: ref;
  var $p616: ref;
  var $p617: ref;
  var $p618: ref;
  var $p619: ref;
  var $p620: ref;
  var $p621: ref;
  var $p622: ref;
  var $p623: ref;
  var $p624: ref;
  var $p625: ref;
  var $p626: ref;
  var $p627: ref;
  var $p628: ref;
  var $p629: ref;
  var $p630: ref;
  var $p631: ref;
  var $p632: ref;
  var $p633: ref;
  var $p634: ref;
  var $p635: ref;
  var $p636: ref;
  var $p637: ref;
  var $p638: ref;
  var $p639: ref;
  var $p640: ref;
  var $p641: ref;
  var $p642: ref;
  var $p643: ref;
  var $p644: ref;
  var $p645: ref;
  var $p646: ref;
  var $p647: ref;
  var $p648: ref;
  var $p649: ref;
  var $p650: ref;
  var $p651: ref;
  var $p652: ref;
  var $p653: ref;
  var $p654: ref;
  var $p655: ref;
  var $p656: ref;
  var $p657: ref;
  var $p658: ref;
  var $p659: ref;
  var $p660: ref;
  var $p661: ref;
  var $p662: ref;
  var $p663: ref;
  var $p664: ref;
  var $p665: ref;
  var $p666: ref;
  var $p667: ref;
  var $p668: ref;
  var $p669: ref;
  var $p670: ref;
  var $p671: ref;
  var $p672: ref;
  var $p673: ref;
  var $p674: ref;
  var $p675: ref;
  var $p676: ref;
  var $p677: ref;
  var $p678: ref;
  var $p679: ref;
  var $p680: ref;
  var $p681: ref;
  var $p682: ref;
  var $p683: ref;
  var $p684: ref;
  var $p685: ref;
  var $p686: ref;
  var $p687: ref;
  var $p688: ref;
  var $p689: ref;
  var $p690: ref;
  var $p691: ref;
  var $p692: ref;
  var $p693: ref;
  var $p694: ref;
  var $p695: ref;
  var $p696: ref;
  var $p697: ref;
  var $p698: ref;
  var $p699: ref;
  var $p700: ref;
  var $p701: ref;
  var $p702: ref;
  var $p703: ref;
  var $p704: ref;
  var $p705: ref;
  var $p706: ref;
  var $p707: ref;
  var $p708: ref;
  var $p709: ref;
  var $p710: ref;
  var $p711: ref;
  var $p712: ref;
  var $p713: ref;
  var $p714: ref;
  var $p715: ref;
  var $p716: ref;
  var $p717: ref;
  var $p718: ref;
  var $p719: ref;
  var $p720: ref;
  var $p721: ref;
  var $p722: ref;
  var $p723: ref;
  var $p724: ref;
  var $p725: ref;
  var $p726: ref;
  var $p727: ref;
  var $p728: ref;
  var $p729: ref;
  var $p730: ref;
  var $p731: ref;
  var $p732: ref;
  var $p733: ref;
  var $p734: ref;
  var $p735: ref;
  var $p736: ref;
  var $p737: ref;
  var $p738: ref;
  var $p739: ref;
  var $p740: ref;
  var $p741: ref;
  var $p742: ref;
  var $p743: ref;
  var $p744: ref;
  var $p745: ref;
  var $p746: ref;
  var $p747: ref;
  var $p748: ref;
  var $p749: ref;
  var $p750: ref;
  var $p751: ref;
  var $p752: ref;
  var $p753: ref;
  var $p754: ref;
  var $p755: ref;
  var $p756: ref;
  var $p757: ref;
  var $p758: ref;
  var $p759: ref;
  var $p760: ref;
  var $p761: ref;
  var $p762: ref;
  var $p763: ref;
  var $p764: ref;
  var $p765: ref;
  var $p766: ref;
  var $p767: ref;
  var $p768: ref;
  var $p769: ref;
  var $p770: ref;
  var $p771: ref;
  var $p772: ref;
  var $p773: ref;
  var $p774: ref;
  var $p775: ref;
  var $p776: ref;
  var $p777: ref;
  var $p778: ref;
  var $p779: ref;
  var $p780: ref;
  var $p781: ref;
  var $p782: ref;
  var $p783: ref;
  var $p784: ref;
  var $p785: ref;
  var $p786: ref;
  var $p787: ref;
  var $p788: ref;
  var $p789: ref;
  var $p790: ref;
  var $p791: ref;
  var $p792: ref;
  var $p793: ref;
  var $p794: ref;
  var $p795: ref;
  var $p796: ref;
  var $p797: ref;
  var $p798: ref;
  var $p799: ref;
  var $p800: ref;
  var $p801: ref;
  var $p802: ref;
  var $p803: ref;
  var $p804: ref;
  var $p805: ref;
  var $p806: ref;
  var $p807: ref;
  var $p808: ref;
  var $p809: ref;
  var $p810: ref;
  var $p811: ref;
  var $p812: ref;
  var $p813: ref;
  var $p814: ref;
  var $p815: ref;
  var $p816: ref;
  var $p817: ref;
  var $p818: ref;
  var $p819: ref;
  var $p820: ref;
  var $p821: ref;
  var $p822: ref;
  var $p823: ref;
  var $p824: ref;
  var $p825: ref;
  var $p826: ref;
  var $p827: ref;
  var $p828: ref;
  var $p829: ref;
  var $p830: ref;
  var $p831: ref;
  var $p832: ref;
  var $p833: ref;
  var $p834: ref;
  var $p835: ref;
  var $p836: ref;
  var $p837: ref;
  var $p838: ref;
  var $p839: ref;
  var $p840: ref;
  var $p841: ref;
  var $p842: ref;
  var $p843: ref;
  var $p844: ref;
  var $p845: ref;
  var $p846: ref;
  var $p847: ref;
  var $p848: ref;
  var $p849: ref;
  var $p850: ref;
  var $p851: ref;
  var $p852: ref;
  var $p853: ref;
  var $p854: ref;
  var $p855: ref;
  var $p856: ref;
  var $p857: ref;
  var $p858: ref;
  var $p859: ref;
  var $p860: ref;
  var $p861: ref;
  var $p862: ref;
  var $p863: ref;
  var $p864: ref;
  var $p865: ref;
  var $p866: ref;
  var $p867: ref;
  var $p868: ref;
  var $p869: ref;
  var $p870: ref;
  var $p871: ref;
  var $p872: ref;
  var $p873: ref;
  var $p874: ref;
  var $p875: ref;
  var $p876: ref;
  var $p877: ref;
  var $p878: ref;
  var $p879: ref;
  var $p880: ref;
  var $p881: ref;
  var $p882: ref;
  var $p883: ref;
  var $p884: ref;
  var $p885: ref;
  var $p886: ref;
  var $p887: ref;
  var $p888: ref;
  var $p889: ref;
  var $p890: ref;
  var $p891: ref;
  var $p892: ref;
  var $p893: ref;
  var $p894: ref;
  var $p895: ref;
  var $p896: ref;
  var $p897: ref;
  var $p898: ref;
  var $p899: ref;
  var $p900: ref;
  var $p901: ref;
  var $p902: ref;
  var $p903: ref;
  var $p904: ref;
  var $p905: ref;
  var $p906: ref;
  var $p907: ref;
  var $p908: ref;
  var $p909: ref;
  var $p910: ref;
  var $p911: ref;
  var $p912: ref;
  var $p913: ref;
  var $p914: ref;
  var $p915: ref;
  var $p916: ref;
  var $p917: ref;
  var $p918: ref;
  var $p919: ref;
  var $p920: ref;
  var $p921: ref;
  var $p922: ref;
  var $p923: ref;
  var $p924: ref;
  var $p925: ref;
  var $p926: ref;
  var $p927: ref;
  var $p928: ref;
  var $p929: ref;
  var $p930: ref;
  var $p931: ref;
  var $p932: ref;
  var $p933: ref;
  var $p934: ref;
  var $p935: ref;
  var $p936: ref;
  var $p937: ref;
  var $p938: ref;
  var $p939: ref;
  var $p940: ref;
  var $p941: ref;
  var $p942: ref;
  var $p943: ref;
  var $p944: ref;
  var $p945: ref;
  var $p946: ref;
  var $p947: ref;
  var $p948: ref;
  var $p949: ref;
  var $p950: ref;
  var $p951: ref;
  var $p952: ref;
  var $p953: ref;
  var $p954: ref;
  var $p955: ref;
  var $p956: ref;
  var $p957: ref;
  var $p958: ref;
  var $p959: ref;
  var $p960: ref;
  var $p961: ref;
  var $p962: ref;
  var $p963: ref;
  var $p964: ref;
  var $p965: ref;
  var $p966: ref;
  var $p967: ref;
  var $p968: ref;
  var $p969: ref;
  var $p970: ref;
  var $p971: ref;
  var $p972: ref;
  var $p973: ref;
  var $p974: ref;
  var $p975: ref;
  var $p976: ref;
  var $p977: ref;
  var $p978: ref;
  var $p979: ref;
  var $p980: ref;
  var $p981: ref;
  var $p982: ref;
  var $p983: ref;
  var $p984: ref;
  var $p985: ref;
  var $p986: ref;
  var $p987: ref;
  var $p988: ref;
  var $p989: ref;
  var $p990: ref;
  var $p991: ref;
  var $p992: ref;
  var $p993: ref;
  var $p994: ref;
  var $p995: ref;
  var $p996: ref;
  var $p997: ref;
  var $p998: ref;
  var $p999: ref;
  var $p1000: ref;
  var $p1001: ref;
  var $p1002: ref;
  var $p1003: ref;
  var $p1004: ref;
  var $p1005: ref;
  var $p1006: ref;
  var $p1007: ref;
  var $p1008: ref;
  var $p1009: ref;
  var $p1010: ref;
  var $p1011: ref;
  var $p1012: ref;
  var $p1013: ref;
  var $p1014: ref;
  var $p1015: ref;
  var $p1016: ref;
  var $p1017: ref;
  var $p1018: ref;
  var $p1019: ref;
  var $p1020: ref;
  var $p1021: ref;
  var $p1022: ref;
  var $p1023: ref;
  var $p1024: ref;
  var $p1025: ref;
  var $p1026: ref;
  var $p1027: ref;
  var $p1028: ref;
  var $p1029: ref;
  var $p1030: ref;
  var $p1031: ref;
  var $p1032: ref;
  var $p1033: ref;
  var $p1034: ref;
  var $p1035: ref;
  var $p1036: ref;
  var $p1037: ref;
  var vslice_dummy_var_195: i32;
  var vslice_dummy_var_196: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} $p1 := kmalloc(4096, 208);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $M.14 := $p1;
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $p3 := $M.14;
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p8 := $M.14;
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} INIT_LIST_HEAD($p8);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p528 := $M.14;
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($p528, $mul.ref(1, 16));
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} INIT_LIST_HEAD($p529);
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    $p530 := $M.14;
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($p530, $mul.ref(2, 16));
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} INIT_LIST_HEAD($p531);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    $p532 := $M.14;
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $p533 := $add.ref($p532, $mul.ref(3, 16));
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} INIT_LIST_HEAD($p533);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    $p534 := $M.14;
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $p535 := $add.ref($p534, $mul.ref(4, 16));
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} INIT_LIST_HEAD($p535);
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    $p536 := $M.14;
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($p536, $mul.ref(5, 16));
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1925} INIT_LIST_HEAD($p537);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    $p538 := $M.14;
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $p539 := $add.ref($p538, $mul.ref(6, 16));
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1926} INIT_LIST_HEAD($p539);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    $p540 := $M.14;
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    $p541 := $add.ref($p540, $mul.ref(7, 16));
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1927} INIT_LIST_HEAD($p541);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    $p542 := $M.14;
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($p542, $mul.ref(8, 16));
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} INIT_LIST_HEAD($p543);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    $p544 := $M.14;
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($p544, $mul.ref(9, 16));
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1929} INIT_LIST_HEAD($p545);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    $p546 := $M.14;
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($p546, $mul.ref(10, 16));
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} INIT_LIST_HEAD($p547);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    $p548 := $M.14;
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($p548, $mul.ref(11, 16));
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} INIT_LIST_HEAD($p549);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    $p550 := $M.14;
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($p550, $mul.ref(12, 16));
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} INIT_LIST_HEAD($p551);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    $p552 := $M.14;
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $p553 := $add.ref($p552, $mul.ref(13, 16));
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} INIT_LIST_HEAD($p553);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    $p554 := $M.14;
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $p555 := $add.ref($p554, $mul.ref(14, 16));
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1934} INIT_LIST_HEAD($p555);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    $p556 := $M.14;
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $p557 := $add.ref($p556, $mul.ref(15, 16));
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} INIT_LIST_HEAD($p557);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    $p558 := $M.14;
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $p559 := $add.ref($p558, $mul.ref(16, 16));
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} INIT_LIST_HEAD($p559);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    $p560 := $M.14;
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($p560, $mul.ref(17, 16));
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1937} INIT_LIST_HEAD($p561);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    $p562 := $M.14;
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $p563 := $add.ref($p562, $mul.ref(18, 16));
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1938} INIT_LIST_HEAD($p563);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    $p564 := $M.14;
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $p565 := $add.ref($p564, $mul.ref(19, 16));
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} INIT_LIST_HEAD($p565);
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    $p566 := $M.14;
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $p567 := $add.ref($p566, $mul.ref(20, 16));
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} INIT_LIST_HEAD($p567);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    $p568 := $M.14;
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($p568, $mul.ref(21, 16));
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1941} INIT_LIST_HEAD($p569);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    $p570 := $M.14;
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $p571 := $add.ref($p570, $mul.ref(22, 16));
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1942} INIT_LIST_HEAD($p571);
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    $p572 := $M.14;
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($p572, $mul.ref(23, 16));
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} INIT_LIST_HEAD($p573);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    $p574 := $M.14;
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $p575 := $add.ref($p574, $mul.ref(24, 16));
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1944} INIT_LIST_HEAD($p575);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    $p576 := $M.14;
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $p577 := $add.ref($p576, $mul.ref(25, 16));
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} INIT_LIST_HEAD($p577);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    $p578 := $M.14;
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $p579 := $add.ref($p578, $mul.ref(26, 16));
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} INIT_LIST_HEAD($p579);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    $p580 := $M.14;
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $p581 := $add.ref($p580, $mul.ref(27, 16));
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} INIT_LIST_HEAD($p581);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    $p582 := $M.14;
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $p583 := $add.ref($p582, $mul.ref(28, 16));
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1948} INIT_LIST_HEAD($p583);
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    $p584 := $M.14;
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($p584, $mul.ref(29, 16));
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} INIT_LIST_HEAD($p585);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    $p586 := $M.14;
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $p587 := $add.ref($p586, $mul.ref(30, 16));
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1950} INIT_LIST_HEAD($p587);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    $p588 := $M.14;
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $p589 := $add.ref($p588, $mul.ref(31, 16));
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} INIT_LIST_HEAD($p589);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    $p590 := $M.14;
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($p590, $mul.ref(32, 16));
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} INIT_LIST_HEAD($p591);
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    $p592 := $M.14;
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $p593 := $add.ref($p592, $mul.ref(33, 16));
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1953} INIT_LIST_HEAD($p593);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    $p594 := $M.14;
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $p595 := $add.ref($p594, $mul.ref(34, 16));
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1954} INIT_LIST_HEAD($p595);
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    $p596 := $M.14;
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $p597 := $add.ref($p596, $mul.ref(35, 16));
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} INIT_LIST_HEAD($p597);
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    $p598 := $M.14;
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $p599 := $add.ref($p598, $mul.ref(36, 16));
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1956} INIT_LIST_HEAD($p599);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    $p600 := $M.14;
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $p601 := $add.ref($p600, $mul.ref(37, 16));
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} INIT_LIST_HEAD($p601);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    $p602 := $M.14;
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $p603 := $add.ref($p602, $mul.ref(38, 16));
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} INIT_LIST_HEAD($p603);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    $p604 := $M.14;
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $p605 := $add.ref($p604, $mul.ref(39, 16));
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} INIT_LIST_HEAD($p605);
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    $p606 := $M.14;
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $p607 := $add.ref($p606, $mul.ref(40, 16));
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1960} INIT_LIST_HEAD($p607);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    $p608 := $M.14;
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $p609 := $add.ref($p608, $mul.ref(41, 16));
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} INIT_LIST_HEAD($p609);
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    $p610 := $M.14;
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $p611 := $add.ref($p610, $mul.ref(42, 16));
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1962} INIT_LIST_HEAD($p611);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    $p612 := $M.14;
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($p612, $mul.ref(43, 16));
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1963} INIT_LIST_HEAD($p613);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    $p614 := $M.14;
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $p615 := $add.ref($p614, $mul.ref(44, 16));
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} INIT_LIST_HEAD($p615);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    $p616 := $M.14;
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $p617 := $add.ref($p616, $mul.ref(45, 16));
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} INIT_LIST_HEAD($p617);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    $p618 := $M.14;
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    $p619 := $add.ref($p618, $mul.ref(46, 16));
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} INIT_LIST_HEAD($p619);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    $p620 := $M.14;
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $p621 := $add.ref($p620, $mul.ref(47, 16));
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} INIT_LIST_HEAD($p621);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    $p622 := $M.14;
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $p623 := $add.ref($p622, $mul.ref(48, 16));
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1968} INIT_LIST_HEAD($p623);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    $p624 := $M.14;
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $p625 := $add.ref($p624, $mul.ref(49, 16));
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} INIT_LIST_HEAD($p625);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    $p626 := $M.14;
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $p627 := $add.ref($p626, $mul.ref(50, 16));
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1970} INIT_LIST_HEAD($p627);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    $p628 := $M.14;
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $p629 := $add.ref($p628, $mul.ref(51, 16));
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} INIT_LIST_HEAD($p629);
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    $p630 := $M.14;
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $p631 := $add.ref($p630, $mul.ref(52, 16));
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1972} INIT_LIST_HEAD($p631);
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    $p632 := $M.14;
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $p633 := $add.ref($p632, $mul.ref(53, 16));
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} INIT_LIST_HEAD($p633);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    $p634 := $M.14;
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    $p635 := $add.ref($p634, $mul.ref(54, 16));
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1974} INIT_LIST_HEAD($p635);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    $p636 := $M.14;
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $p637 := $add.ref($p636, $mul.ref(55, 16));
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1975} INIT_LIST_HEAD($p637);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    $p638 := $M.14;
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $p639 := $add.ref($p638, $mul.ref(56, 16));
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1976} INIT_LIST_HEAD($p639);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    $p640 := $M.14;
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($p640, $mul.ref(57, 16));
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} INIT_LIST_HEAD($p641);
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    $p642 := $M.14;
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $p643 := $add.ref($p642, $mul.ref(58, 16));
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1978} INIT_LIST_HEAD($p643);
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    $p644 := $M.14;
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $p645 := $add.ref($p644, $mul.ref(59, 16));
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} INIT_LIST_HEAD($p645);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    $p646 := $M.14;
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $p647 := $add.ref($p646, $mul.ref(60, 16));
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} INIT_LIST_HEAD($p647);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    $p648 := $M.14;
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $p649 := $add.ref($p648, $mul.ref(61, 16));
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1981} INIT_LIST_HEAD($p649);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    $p650 := $M.14;
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $p651 := $add.ref($p650, $mul.ref(62, 16));
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} INIT_LIST_HEAD($p651);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    $p652 := $M.14;
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $p653 := $add.ref($p652, $mul.ref(63, 16));
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} INIT_LIST_HEAD($p653);
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    $p654 := $M.14;
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $p655 := $add.ref($p654, $mul.ref(64, 16));
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1984} INIT_LIST_HEAD($p655);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    $p656 := $M.14;
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $p657 := $add.ref($p656, $mul.ref(65, 16));
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1985} INIT_LIST_HEAD($p657);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    $p658 := $M.14;
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    $p659 := $add.ref($p658, $mul.ref(66, 16));
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} INIT_LIST_HEAD($p659);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    $p660 := $M.14;
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    $p661 := $add.ref($p660, $mul.ref(67, 16));
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} INIT_LIST_HEAD($p661);
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    $p662 := $M.14;
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $p663 := $add.ref($p662, $mul.ref(68, 16));
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} INIT_LIST_HEAD($p663);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    $p664 := $M.14;
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $p665 := $add.ref($p664, $mul.ref(69, 16));
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1989} INIT_LIST_HEAD($p665);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    $p666 := $M.14;
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $p667 := $add.ref($p666, $mul.ref(70, 16));
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} INIT_LIST_HEAD($p667);
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    $p668 := $M.14;
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $p669 := $add.ref($p668, $mul.ref(71, 16));
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1991} INIT_LIST_HEAD($p669);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    $p670 := $M.14;
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $p671 := $add.ref($p670, $mul.ref(72, 16));
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1992} INIT_LIST_HEAD($p671);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    $p672 := $M.14;
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $p673 := $add.ref($p672, $mul.ref(73, 16));
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} INIT_LIST_HEAD($p673);
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    $p674 := $M.14;
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $p675 := $add.ref($p674, $mul.ref(74, 16));
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1994} INIT_LIST_HEAD($p675);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    $p676 := $M.14;
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $p677 := $add.ref($p676, $mul.ref(75, 16));
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} INIT_LIST_HEAD($p677);
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    $p678 := $M.14;
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $p679 := $add.ref($p678, $mul.ref(76, 16));
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1996} INIT_LIST_HEAD($p679);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    $p680 := $M.14;
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $p681 := $add.ref($p680, $mul.ref(77, 16));
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1997} INIT_LIST_HEAD($p681);
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    $p682 := $M.14;
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $p683 := $add.ref($p682, $mul.ref(78, 16));
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1998} INIT_LIST_HEAD($p683);
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    $p684 := $M.14;
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $p685 := $add.ref($p684, $mul.ref(79, 16));
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1999} INIT_LIST_HEAD($p685);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    $p686 := $M.14;
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $p687 := $add.ref($p686, $mul.ref(80, 16));
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2000} INIT_LIST_HEAD($p687);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    $p688 := $M.14;
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $p689 := $add.ref($p688, $mul.ref(81, 16));
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2001} INIT_LIST_HEAD($p689);
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    $p690 := $M.14;
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $p691 := $add.ref($p690, $mul.ref(82, 16));
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2002} INIT_LIST_HEAD($p691);
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    $p692 := $M.14;
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $p693 := $add.ref($p692, $mul.ref(83, 16));
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2003} INIT_LIST_HEAD($p693);
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    $p694 := $M.14;
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $p695 := $add.ref($p694, $mul.ref(84, 16));
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2004} INIT_LIST_HEAD($p695);
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    $p696 := $M.14;
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $p697 := $add.ref($p696, $mul.ref(85, 16));
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2005} INIT_LIST_HEAD($p697);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    $p698 := $M.14;
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $p699 := $add.ref($p698, $mul.ref(86, 16));
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2006} INIT_LIST_HEAD($p699);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    $p700 := $M.14;
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $p701 := $add.ref($p700, $mul.ref(87, 16));
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2007} INIT_LIST_HEAD($p701);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    $p702 := $M.14;
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $p703 := $add.ref($p702, $mul.ref(88, 16));
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2008} INIT_LIST_HEAD($p703);
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    $p704 := $M.14;
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $p705 := $add.ref($p704, $mul.ref(89, 16));
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2009} INIT_LIST_HEAD($p705);
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    $p706 := $M.14;
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $p707 := $add.ref($p706, $mul.ref(90, 16));
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2010} INIT_LIST_HEAD($p707);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    $p708 := $M.14;
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    $p709 := $add.ref($p708, $mul.ref(91, 16));
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2011} INIT_LIST_HEAD($p709);
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    $p710 := $M.14;
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $p711 := $add.ref($p710, $mul.ref(92, 16));
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2012} INIT_LIST_HEAD($p711);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    $p712 := $M.14;
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $p713 := $add.ref($p712, $mul.ref(93, 16));
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2013} INIT_LIST_HEAD($p713);
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    $p714 := $M.14;
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $p715 := $add.ref($p714, $mul.ref(94, 16));
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2014} INIT_LIST_HEAD($p715);
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    $p716 := $M.14;
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $p717 := $add.ref($p716, $mul.ref(95, 16));
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2015} INIT_LIST_HEAD($p717);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    $p718 := $M.14;
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $p719 := $add.ref($p718, $mul.ref(96, 16));
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} INIT_LIST_HEAD($p719);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    $p720 := $M.14;
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $p721 := $add.ref($p720, $mul.ref(97, 16));
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2017} INIT_LIST_HEAD($p721);
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    $p722 := $M.14;
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $p723 := $add.ref($p722, $mul.ref(98, 16));
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2018} INIT_LIST_HEAD($p723);
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    $p724 := $M.14;
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $p725 := $add.ref($p724, $mul.ref(99, 16));
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2019} INIT_LIST_HEAD($p725);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    $p726 := $M.14;
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    $p727 := $add.ref($p726, $mul.ref(100, 16));
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2020} INIT_LIST_HEAD($p727);
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    $p728 := $M.14;
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $p729 := $add.ref($p728, $mul.ref(101, 16));
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2021} INIT_LIST_HEAD($p729);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    $p730 := $M.14;
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $p731 := $add.ref($p730, $mul.ref(102, 16));
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2022} INIT_LIST_HEAD($p731);
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    $p732 := $M.14;
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $p733 := $add.ref($p732, $mul.ref(103, 16));
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} INIT_LIST_HEAD($p733);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    $p734 := $M.14;
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $p735 := $add.ref($p734, $mul.ref(104, 16));
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2024} INIT_LIST_HEAD($p735);
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    $p736 := $M.14;
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $p737 := $add.ref($p736, $mul.ref(105, 16));
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2025} INIT_LIST_HEAD($p737);
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    $p738 := $M.14;
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $p739 := $add.ref($p738, $mul.ref(106, 16));
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2026} INIT_LIST_HEAD($p739);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    $p740 := $M.14;
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $p741 := $add.ref($p740, $mul.ref(107, 16));
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2027} INIT_LIST_HEAD($p741);
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    $p742 := $M.14;
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $p743 := $add.ref($p742, $mul.ref(108, 16));
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2028} INIT_LIST_HEAD($p743);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    $p744 := $M.14;
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $p745 := $add.ref($p744, $mul.ref(109, 16));
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} INIT_LIST_HEAD($p745);
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    $p746 := $M.14;
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $p747 := $add.ref($p746, $mul.ref(110, 16));
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2030} INIT_LIST_HEAD($p747);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    $p748 := $M.14;
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $p749 := $add.ref($p748, $mul.ref(111, 16));
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2031} INIT_LIST_HEAD($p749);
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    $p750 := $M.14;
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $p751 := $add.ref($p750, $mul.ref(112, 16));
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2032} INIT_LIST_HEAD($p751);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    $p752 := $M.14;
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    $p753 := $add.ref($p752, $mul.ref(113, 16));
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} INIT_LIST_HEAD($p753);
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    $p754 := $M.14;
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $p755 := $add.ref($p754, $mul.ref(114, 16));
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2034} INIT_LIST_HEAD($p755);
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    $p756 := $M.14;
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $p757 := $add.ref($p756, $mul.ref(115, 16));
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} INIT_LIST_HEAD($p757);
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    $p758 := $M.14;
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $p759 := $add.ref($p758, $mul.ref(116, 16));
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} INIT_LIST_HEAD($p759);
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    $p760 := $M.14;
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $p761 := $add.ref($p760, $mul.ref(117, 16));
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} INIT_LIST_HEAD($p761);
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    $p762 := $M.14;
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $p763 := $add.ref($p762, $mul.ref(118, 16));
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2038} INIT_LIST_HEAD($p763);
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    $p764 := $M.14;
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $p765 := $add.ref($p764, $mul.ref(119, 16));
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} INIT_LIST_HEAD($p765);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    $p766 := $M.14;
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $p767 := $add.ref($p766, $mul.ref(120, 16));
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2040} INIT_LIST_HEAD($p767);
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    $p768 := $M.14;
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $p769 := $add.ref($p768, $mul.ref(121, 16));
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} INIT_LIST_HEAD($p769);
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    $p770 := $M.14;
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $p771 := $add.ref($p770, $mul.ref(122, 16));
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} INIT_LIST_HEAD($p771);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    $p772 := $M.14;
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $p773 := $add.ref($p772, $mul.ref(123, 16));
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} INIT_LIST_HEAD($p773);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    $p774 := $M.14;
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $p775 := $add.ref($p774, $mul.ref(124, 16));
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2044} INIT_LIST_HEAD($p775);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    $p776 := $M.14;
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $p777 := $add.ref($p776, $mul.ref(125, 16));
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2045} INIT_LIST_HEAD($p777);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    $p778 := $M.14;
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $p779 := $add.ref($p778, $mul.ref(126, 16));
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2046} INIT_LIST_HEAD($p779);
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    $p780 := $M.14;
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $p781 := $add.ref($p780, $mul.ref(127, 16));
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2047} INIT_LIST_HEAD($p781);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    $p782 := $M.14;
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $p783 := $add.ref($p782, $mul.ref(128, 16));
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} INIT_LIST_HEAD($p783);
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    $p784 := $M.14;
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $p785 := $add.ref($p784, $mul.ref(129, 16));
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2049} INIT_LIST_HEAD($p785);
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    $p786 := $M.14;
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $p787 := $add.ref($p786, $mul.ref(130, 16));
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2050} INIT_LIST_HEAD($p787);
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    $p788 := $M.14;
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $p789 := $add.ref($p788, $mul.ref(131, 16));
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} INIT_LIST_HEAD($p789);
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    $p790 := $M.14;
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $p791 := $add.ref($p790, $mul.ref(132, 16));
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} INIT_LIST_HEAD($p791);
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    $p792 := $M.14;
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $p793 := $add.ref($p792, $mul.ref(133, 16));
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} INIT_LIST_HEAD($p793);
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    $p794 := $M.14;
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $p795 := $add.ref($p794, $mul.ref(134, 16));
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} INIT_LIST_HEAD($p795);
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    $p796 := $M.14;
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $p797 := $add.ref($p796, $mul.ref(135, 16));
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2055} INIT_LIST_HEAD($p797);
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    $p798 := $M.14;
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $p799 := $add.ref($p798, $mul.ref(136, 16));
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} INIT_LIST_HEAD($p799);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    $p800 := $M.14;
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $p801 := $add.ref($p800, $mul.ref(137, 16));
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} INIT_LIST_HEAD($p801);
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    $p802 := $M.14;
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $p803 := $add.ref($p802, $mul.ref(138, 16));
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2058} INIT_LIST_HEAD($p803);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    $p804 := $M.14;
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $p805 := $add.ref($p804, $mul.ref(139, 16));
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2059} INIT_LIST_HEAD($p805);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    $p806 := $M.14;
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $p807 := $add.ref($p806, $mul.ref(140, 16));
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2060} INIT_LIST_HEAD($p807);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb409:
    assume {:verifier.code 0} true;
    $p808 := $M.14;
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $p809 := $add.ref($p808, $mul.ref(141, 16));
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} INIT_LIST_HEAD($p809);
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    $p810 := $M.14;
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $p811 := $add.ref($p810, $mul.ref(142, 16));
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2062} INIT_LIST_HEAD($p811);
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    $p812 := $M.14;
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $p813 := $add.ref($p812, $mul.ref(143, 16));
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} INIT_LIST_HEAD($p813);
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    $p814 := $M.14;
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $p815 := $add.ref($p814, $mul.ref(144, 16));
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2064} INIT_LIST_HEAD($p815);
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    $p816 := $M.14;
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $p817 := $add.ref($p816, $mul.ref(145, 16));
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} INIT_LIST_HEAD($p817);
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    $p818 := $M.14;
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $p819 := $add.ref($p818, $mul.ref(146, 16));
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2066} INIT_LIST_HEAD($p819);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    $p820 := $M.14;
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $p821 := $add.ref($p820, $mul.ref(147, 16));
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2067} INIT_LIST_HEAD($p821);
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    $p822 := $M.14;
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    $p823 := $add.ref($p822, $mul.ref(148, 16));
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2068} INIT_LIST_HEAD($p823);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    $p824 := $M.14;
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    $p825 := $add.ref($p824, $mul.ref(149, 16));
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} INIT_LIST_HEAD($p825);
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    $p826 := $M.14;
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    $p827 := $add.ref($p826, $mul.ref(150, 16));
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2070} INIT_LIST_HEAD($p827);
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    $p828 := $M.14;
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $p829 := $add.ref($p828, $mul.ref(151, 16));
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} INIT_LIST_HEAD($p829);
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb420:
    assume {:verifier.code 0} true;
    $p830 := $M.14;
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $p831 := $add.ref($p830, $mul.ref(152, 16));
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2072} INIT_LIST_HEAD($p831);
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb421:
    assume {:verifier.code 0} true;
    $p832 := $M.14;
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    $p833 := $add.ref($p832, $mul.ref(153, 16));
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} INIT_LIST_HEAD($p833);
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    $p834 := $M.14;
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    $p835 := $add.ref($p834, $mul.ref(154, 16));
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2074} INIT_LIST_HEAD($p835);
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb423:
    assume {:verifier.code 0} true;
    $p836 := $M.14;
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $p837 := $add.ref($p836, $mul.ref(155, 16));
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} INIT_LIST_HEAD($p837);
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    $p838 := $M.14;
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $p839 := $add.ref($p838, $mul.ref(156, 16));
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2076} INIT_LIST_HEAD($p839);
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    $p840 := $M.14;
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $p841 := $add.ref($p840, $mul.ref(157, 16));
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} INIT_LIST_HEAD($p841);
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    $p842 := $M.14;
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $p843 := $add.ref($p842, $mul.ref(158, 16));
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2078} INIT_LIST_HEAD($p843);
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    $p844 := $M.14;
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $p845 := $add.ref($p844, $mul.ref(159, 16));
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} INIT_LIST_HEAD($p845);
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    $p846 := $M.14;
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    $p847 := $add.ref($p846, $mul.ref(160, 16));
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2080} INIT_LIST_HEAD($p847);
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    $p848 := $M.14;
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $p849 := $add.ref($p848, $mul.ref(161, 16));
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} INIT_LIST_HEAD($p849);
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    $p850 := $M.14;
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $p851 := $add.ref($p850, $mul.ref(162, 16));
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2082} INIT_LIST_HEAD($p851);
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    $p852 := $M.14;
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $p853 := $add.ref($p852, $mul.ref(163, 16));
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2083} INIT_LIST_HEAD($p853);
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb432:
    assume {:verifier.code 0} true;
    $p854 := $M.14;
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $p855 := $add.ref($p854, $mul.ref(164, 16));
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2084} INIT_LIST_HEAD($p855);
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    $p856 := $M.14;
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $p857 := $add.ref($p856, $mul.ref(165, 16));
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2085} INIT_LIST_HEAD($p857);
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    $p858 := $M.14;
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $p859 := $add.ref($p858, $mul.ref(166, 16));
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2086} INIT_LIST_HEAD($p859);
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    $p860 := $M.14;
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $p861 := $add.ref($p860, $mul.ref(167, 16));
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} INIT_LIST_HEAD($p861);
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    $p862 := $M.14;
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    $p863 := $add.ref($p862, $mul.ref(168, 16));
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2088} INIT_LIST_HEAD($p863);
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb437:
    assume {:verifier.code 0} true;
    $p864 := $M.14;
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    $p865 := $add.ref($p864, $mul.ref(169, 16));
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2089} INIT_LIST_HEAD($p865);
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    $p866 := $M.14;
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $p867 := $add.ref($p866, $mul.ref(170, 16));
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2090} INIT_LIST_HEAD($p867);
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    $p868 := $M.14;
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $p869 := $add.ref($p868, $mul.ref(171, 16));
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2091} INIT_LIST_HEAD($p869);
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    $p870 := $M.14;
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $p871 := $add.ref($p870, $mul.ref(172, 16));
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2092} INIT_LIST_HEAD($p871);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    $p872 := $M.14;
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $p873 := $add.ref($p872, $mul.ref(173, 16));
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2093} INIT_LIST_HEAD($p873);
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    $p874 := $M.14;
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $p875 := $add.ref($p874, $mul.ref(174, 16));
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2094} INIT_LIST_HEAD($p875);
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    $p876 := $M.14;
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $p877 := $add.ref($p876, $mul.ref(175, 16));
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} INIT_LIST_HEAD($p877);
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb444:
    assume {:verifier.code 0} true;
    $p878 := $M.14;
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $p879 := $add.ref($p878, $mul.ref(176, 16));
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2096} INIT_LIST_HEAD($p879);
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb445:
    assume {:verifier.code 0} true;
    $p880 := $M.14;
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $p881 := $add.ref($p880, $mul.ref(177, 16));
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2097} INIT_LIST_HEAD($p881);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    $p882 := $M.14;
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $p883 := $add.ref($p882, $mul.ref(178, 16));
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2098} INIT_LIST_HEAD($p883);
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    $p884 := $M.14;
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $p885 := $add.ref($p884, $mul.ref(179, 16));
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} INIT_LIST_HEAD($p885);
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    $p886 := $M.14;
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $p887 := $add.ref($p886, $mul.ref(180, 16));
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2100} INIT_LIST_HEAD($p887);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb449:
    assume {:verifier.code 0} true;
    $p888 := $M.14;
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $p889 := $add.ref($p888, $mul.ref(181, 16));
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} INIT_LIST_HEAD($p889);
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    $p890 := $M.14;
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $p891 := $add.ref($p890, $mul.ref(182, 16));
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2102} INIT_LIST_HEAD($p891);
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    $p892 := $M.14;
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $p893 := $add.ref($p892, $mul.ref(183, 16));
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2103} INIT_LIST_HEAD($p893);
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb452:
    assume {:verifier.code 0} true;
    $p894 := $M.14;
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $p895 := $add.ref($p894, $mul.ref(184, 16));
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2104} INIT_LIST_HEAD($p895);
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb453:
    assume {:verifier.code 0} true;
    $p896 := $M.14;
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $p897 := $add.ref($p896, $mul.ref(185, 16));
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} INIT_LIST_HEAD($p897);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    $p898 := $M.14;
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    $p899 := $add.ref($p898, $mul.ref(186, 16));
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2106} INIT_LIST_HEAD($p899);
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    $p900 := $M.14;
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $p901 := $add.ref($p900, $mul.ref(187, 16));
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2107} INIT_LIST_HEAD($p901);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb456:
    assume {:verifier.code 0} true;
    $p902 := $M.14;
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $p903 := $add.ref($p902, $mul.ref(188, 16));
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2108} INIT_LIST_HEAD($p903);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    $p904 := $M.14;
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $p905 := $add.ref($p904, $mul.ref(189, 16));
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} INIT_LIST_HEAD($p905);
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    $p906 := $M.14;
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    $p907 := $add.ref($p906, $mul.ref(190, 16));
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2110} INIT_LIST_HEAD($p907);
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb459:
    assume {:verifier.code 0} true;
    $p908 := $M.14;
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $p909 := $add.ref($p908, $mul.ref(191, 16));
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2111} INIT_LIST_HEAD($p909);
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb460:
    assume {:verifier.code 0} true;
    $p910 := $M.14;
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    $p911 := $add.ref($p910, $mul.ref(192, 16));
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2112} INIT_LIST_HEAD($p911);
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb461:
    assume {:verifier.code 0} true;
    $p912 := $M.14;
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    $p913 := $add.ref($p912, $mul.ref(193, 16));
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2113} INIT_LIST_HEAD($p913);
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    goto $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    $p914 := $M.14;
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $p915 := $add.ref($p914, $mul.ref(194, 16));
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2114} INIT_LIST_HEAD($p915);
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    goto $bb463;

  $bb463:
    assume {:verifier.code 0} true;
    $p916 := $M.14;
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $p917 := $add.ref($p916, $mul.ref(195, 16));
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} INIT_LIST_HEAD($p917);
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb464:
    assume {:verifier.code 0} true;
    $p918 := $M.14;
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $p919 := $add.ref($p918, $mul.ref(196, 16));
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2116} INIT_LIST_HEAD($p919);
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb465:
    assume {:verifier.code 0} true;
    $p920 := $M.14;
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $p921 := $add.ref($p920, $mul.ref(197, 16));
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} INIT_LIST_HEAD($p921);
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    $p922 := $M.14;
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    $p923 := $add.ref($p922, $mul.ref(198, 16));
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2118} INIT_LIST_HEAD($p923);
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    $p924 := $M.14;
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    $p925 := $add.ref($p924, $mul.ref(199, 16));
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} INIT_LIST_HEAD($p925);
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    goto $bb468;

  $bb468:
    assume {:verifier.code 0} true;
    $p926 := $M.14;
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    $p927 := $add.ref($p926, $mul.ref(200, 16));
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2120} INIT_LIST_HEAD($p927);
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb469:
    assume {:verifier.code 0} true;
    $p928 := $M.14;
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    $p929 := $add.ref($p928, $mul.ref(201, 16));
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} INIT_LIST_HEAD($p929);
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    $p930 := $M.14;
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    $p931 := $add.ref($p930, $mul.ref(202, 16));
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2122} INIT_LIST_HEAD($p931);
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb471:
    assume {:verifier.code 0} true;
    $p932 := $M.14;
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    $p933 := $add.ref($p932, $mul.ref(203, 16));
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} INIT_LIST_HEAD($p933);
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb472:
    assume {:verifier.code 0} true;
    $p934 := $M.14;
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $p935 := $add.ref($p934, $mul.ref(204, 16));
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} INIT_LIST_HEAD($p935);
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb473:
    assume {:verifier.code 0} true;
    $p936 := $M.14;
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    $p937 := $add.ref($p936, $mul.ref(205, 16));
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} INIT_LIST_HEAD($p937);
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    $p938 := $M.14;
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $p939 := $add.ref($p938, $mul.ref(206, 16));
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2126} INIT_LIST_HEAD($p939);
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    $p940 := $M.14;
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $p941 := $add.ref($p940, $mul.ref(207, 16));
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} INIT_LIST_HEAD($p941);
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb476:
    assume {:verifier.code 0} true;
    $p942 := $M.14;
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $p943 := $add.ref($p942, $mul.ref(208, 16));
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2128} INIT_LIST_HEAD($p943);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    goto $bb477;

  $bb477:
    assume {:verifier.code 0} true;
    $p944 := $M.14;
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $p945 := $add.ref($p944, $mul.ref(209, 16));
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} INIT_LIST_HEAD($p945);
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    $p946 := $M.14;
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $p947 := $add.ref($p946, $mul.ref(210, 16));
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2130} INIT_LIST_HEAD($p947);
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb479:
    assume {:verifier.code 0} true;
    $p948 := $M.14;
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    $p949 := $add.ref($p948, $mul.ref(211, 16));
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} INIT_LIST_HEAD($p949);
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    goto $bb480;

  $bb480:
    assume {:verifier.code 0} true;
    $p950 := $M.14;
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $p951 := $add.ref($p950, $mul.ref(212, 16));
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2132} INIT_LIST_HEAD($p951);
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb481:
    assume {:verifier.code 0} true;
    $p952 := $M.14;
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $p953 := $add.ref($p952, $mul.ref(213, 16));
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2133} INIT_LIST_HEAD($p953);
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    $p954 := $M.14;
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $p955 := $add.ref($p954, $mul.ref(214, 16));
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2134} INIT_LIST_HEAD($p955);
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb483:
    assume {:verifier.code 0} true;
    $p956 := $M.14;
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $p957 := $add.ref($p956, $mul.ref(215, 16));
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2135} INIT_LIST_HEAD($p957);
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    $p958 := $M.14;
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $p959 := $add.ref($p958, $mul.ref(216, 16));
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2136} INIT_LIST_HEAD($p959);
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    $p960 := $M.14;
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $p961 := $add.ref($p960, $mul.ref(217, 16));
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} INIT_LIST_HEAD($p961);
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    goto $bb486;

  $bb486:
    assume {:verifier.code 0} true;
    $p962 := $M.14;
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $p963 := $add.ref($p962, $mul.ref(218, 16));
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2138} INIT_LIST_HEAD($p963);
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    $p964 := $M.14;
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $p965 := $add.ref($p964, $mul.ref(219, 16));
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2139} INIT_LIST_HEAD($p965);
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb488:
    assume {:verifier.code 0} true;
    $p966 := $M.14;
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    $p967 := $add.ref($p966, $mul.ref(220, 16));
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2140} INIT_LIST_HEAD($p967);
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb489:
    assume {:verifier.code 0} true;
    $p968 := $M.14;
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    $p969 := $add.ref($p968, $mul.ref(221, 16));
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2141} INIT_LIST_HEAD($p969);
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    $p970 := $M.14;
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $p971 := $add.ref($p970, $mul.ref(222, 16));
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2142} INIT_LIST_HEAD($p971);
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb491:
    assume {:verifier.code 0} true;
    $p972 := $M.14;
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    $p973 := $add.ref($p972, $mul.ref(223, 16));
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} INIT_LIST_HEAD($p973);
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    goto $bb492;

  $bb492:
    assume {:verifier.code 0} true;
    $p974 := $M.14;
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $p975 := $add.ref($p974, $mul.ref(224, 16));
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2144} INIT_LIST_HEAD($p975);
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    goto $bb493;

  $bb493:
    assume {:verifier.code 0} true;
    $p976 := $M.14;
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $p977 := $add.ref($p976, $mul.ref(225, 16));
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} INIT_LIST_HEAD($p977);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    $p978 := $M.14;
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    $p979 := $add.ref($p978, $mul.ref(226, 16));
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2146} INIT_LIST_HEAD($p979);
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    goto $bb495;

  $bb495:
    assume {:verifier.code 0} true;
    $p980 := $M.14;
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $p981 := $add.ref($p980, $mul.ref(227, 16));
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} INIT_LIST_HEAD($p981);
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    goto $bb496;

  $bb496:
    assume {:verifier.code 0} true;
    $p982 := $M.14;
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    $p983 := $add.ref($p982, $mul.ref(228, 16));
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2148} INIT_LIST_HEAD($p983);
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    goto $bb497;

  $bb497:
    assume {:verifier.code 0} true;
    $p984 := $M.14;
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    $p985 := $add.ref($p984, $mul.ref(229, 16));
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2149} INIT_LIST_HEAD($p985);
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    goto $bb498;

  $bb498:
    assume {:verifier.code 0} true;
    $p986 := $M.14;
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    $p987 := $add.ref($p986, $mul.ref(230, 16));
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2150} INIT_LIST_HEAD($p987);
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb499:
    assume {:verifier.code 0} true;
    $p988 := $M.14;
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $p989 := $add.ref($p988, $mul.ref(231, 16));
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2151} INIT_LIST_HEAD($p989);
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    goto $bb500;

  $bb500:
    assume {:verifier.code 0} true;
    $p990 := $M.14;
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $p991 := $add.ref($p990, $mul.ref(232, 16));
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2152} INIT_LIST_HEAD($p991);
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    goto $bb501;

  $bb501:
    assume {:verifier.code 0} true;
    $p992 := $M.14;
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    $p993 := $add.ref($p992, $mul.ref(233, 16));
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2153} INIT_LIST_HEAD($p993);
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    $p994 := $M.14;
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    $p995 := $add.ref($p994, $mul.ref(234, 16));
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2154} INIT_LIST_HEAD($p995);
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    $p996 := $M.14;
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    $p997 := $add.ref($p996, $mul.ref(235, 16));
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2155} INIT_LIST_HEAD($p997);
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb504:
    assume {:verifier.code 0} true;
    $p998 := $M.14;
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $p999 := $add.ref($p998, $mul.ref(236, 16));
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2156} INIT_LIST_HEAD($p999);
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb505:
    assume {:verifier.code 0} true;
    $p1000 := $M.14;
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $p1001 := $add.ref($p1000, $mul.ref(237, 16));
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2157} INIT_LIST_HEAD($p1001);
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    $p1002 := $M.14;
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $p1003 := $add.ref($p1002, $mul.ref(238, 16));
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2158} INIT_LIST_HEAD($p1003);
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb507:
    assume {:verifier.code 0} true;
    $p1004 := $M.14;
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $p1005 := $add.ref($p1004, $mul.ref(239, 16));
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2159} INIT_LIST_HEAD($p1005);
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb508:
    assume {:verifier.code 0} true;
    $p1006 := $M.14;
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $p1007 := $add.ref($p1006, $mul.ref(240, 16));
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2160} INIT_LIST_HEAD($p1007);
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb509:
    assume {:verifier.code 0} true;
    $p1008 := $M.14;
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    $p1009 := $add.ref($p1008, $mul.ref(241, 16));
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2161} INIT_LIST_HEAD($p1009);
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    goto $bb510;

  $bb510:
    assume {:verifier.code 0} true;
    $p1010 := $M.14;
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    $p1011 := $add.ref($p1010, $mul.ref(242, 16));
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2162} INIT_LIST_HEAD($p1011);
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb511:
    assume {:verifier.code 0} true;
    $p1012 := $M.14;
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $p1013 := $add.ref($p1012, $mul.ref(243, 16));
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2163} INIT_LIST_HEAD($p1013);
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    goto $bb512;

  $bb512:
    assume {:verifier.code 0} true;
    $p1014 := $M.14;
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    $p1015 := $add.ref($p1014, $mul.ref(244, 16));
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2164} INIT_LIST_HEAD($p1015);
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    goto $bb513;

  $bb513:
    assume {:verifier.code 0} true;
    $p1016 := $M.14;
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $p1017 := $add.ref($p1016, $mul.ref(245, 16));
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2165} INIT_LIST_HEAD($p1017);
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    $p1018 := $M.14;
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $p1019 := $add.ref($p1018, $mul.ref(246, 16));
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2166} INIT_LIST_HEAD($p1019);
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    goto $bb515;

  $bb515:
    assume {:verifier.code 0} true;
    $p1020 := $M.14;
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    $p1021 := $add.ref($p1020, $mul.ref(247, 16));
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2167} INIT_LIST_HEAD($p1021);
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    goto $bb516;

  $bb516:
    assume {:verifier.code 0} true;
    $p1022 := $M.14;
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    $p1023 := $add.ref($p1022, $mul.ref(248, 16));
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2168} INIT_LIST_HEAD($p1023);
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb517:
    assume {:verifier.code 0} true;
    $p1024 := $M.14;
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    $p1025 := $add.ref($p1024, $mul.ref(249, 16));
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2169} INIT_LIST_HEAD($p1025);
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb518:
    assume {:verifier.code 0} true;
    $p1026 := $M.14;
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    $p1027 := $add.ref($p1026, $mul.ref(250, 16));
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2170} INIT_LIST_HEAD($p1027);
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    goto $bb519;

  $bb519:
    assume {:verifier.code 0} true;
    $p1028 := $M.14;
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $p1029 := $add.ref($p1028, $mul.ref(251, 16));
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2171} INIT_LIST_HEAD($p1029);
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    goto $bb520;

  $bb520:
    assume {:verifier.code 0} true;
    $p1030 := $M.14;
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    $p1031 := $add.ref($p1030, $mul.ref(252, 16));
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2172} INIT_LIST_HEAD($p1031);
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb521:
    assume {:verifier.code 0} true;
    $p1032 := $M.14;
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    $p1033 := $add.ref($p1032, $mul.ref(253, 16));
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2173} INIT_LIST_HEAD($p1033);
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    goto $bb522;

  $bb522:
    assume {:verifier.code 0} true;
    $p1034 := $M.14;
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    $p1035 := $add.ref($p1034, $mul.ref(254, 16));
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2174} INIT_LIST_HEAD($p1035);
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb523:
    assume {:verifier.code 0} true;
    $p1036 := $M.14;
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    $p1037 := $add.ref($p1036, $mul.ref(255, 16));
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} INIT_LIST_HEAD($p1037);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} $p9 := kmalloc(4096, 208);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $M.13 := $p9;
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $p11 := $M.13;
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p17 := $M.13;
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} INIT_LIST_HEAD($p17);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p18 := $M.13;
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(1, 16));
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} INIT_LIST_HEAD($p19);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p20 := $M.13;
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref(2, 16));
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} INIT_LIST_HEAD($p21);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p22 := $M.13;
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref(3, 16));
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} INIT_LIST_HEAD($p23);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p24 := $M.13;
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(4, 16));
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} INIT_LIST_HEAD($p25);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p26 := $M.13;
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(5, 16));
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} INIT_LIST_HEAD($p27);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p28 := $M.13;
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref(6, 16));
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} INIT_LIST_HEAD($p29);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p30 := $M.13;
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref(7, 16));
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} INIT_LIST_HEAD($p31);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p32 := $M.13;
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p32, $mul.ref(8, 16));
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} INIT_LIST_HEAD($p33);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p34 := $M.13;
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p34, $mul.ref(9, 16));
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} INIT_LIST_HEAD($p35);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p36 := $M.13;
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p36, $mul.ref(10, 16));
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} INIT_LIST_HEAD($p37);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p38 := $M.13;
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p38, $mul.ref(11, 16));
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} INIT_LIST_HEAD($p39);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p40 := $M.13;
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p40, $mul.ref(12, 16));
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} INIT_LIST_HEAD($p41);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p42 := $M.13;
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref(13, 16));
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} INIT_LIST_HEAD($p43);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p44 := $M.13;
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p44, $mul.ref(14, 16));
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} INIT_LIST_HEAD($p45);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p46 := $M.13;
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p46, $mul.ref(15, 16));
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} INIT_LIST_HEAD($p47);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p48 := $M.13;
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p48, $mul.ref(16, 16));
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} INIT_LIST_HEAD($p49);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p50 := $M.13;
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p50, $mul.ref(17, 16));
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} INIT_LIST_HEAD($p51);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p52 := $M.13;
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p52, $mul.ref(18, 16));
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} INIT_LIST_HEAD($p53);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p54 := $M.13;
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p54, $mul.ref(19, 16));
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} INIT_LIST_HEAD($p55);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p56 := $M.13;
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p56, $mul.ref(20, 16));
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} INIT_LIST_HEAD($p57);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p58 := $M.13;
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref(21, 16));
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} INIT_LIST_HEAD($p59);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p60 := $M.13;
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p60, $mul.ref(22, 16));
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} INIT_LIST_HEAD($p61);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p62 := $M.13;
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p62, $mul.ref(23, 16));
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} INIT_LIST_HEAD($p63);
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p64 := $M.13;
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p64, $mul.ref(24, 16));
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} INIT_LIST_HEAD($p65);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p66 := $M.13;
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref(25, 16));
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} INIT_LIST_HEAD($p67);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p68 := $M.13;
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p68, $mul.ref(26, 16));
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} INIT_LIST_HEAD($p69);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p70 := $M.13;
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p70, $mul.ref(27, 16));
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} INIT_LIST_HEAD($p71);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p72 := $M.13;
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p72, $mul.ref(28, 16));
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} INIT_LIST_HEAD($p73);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p74 := $M.13;
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p74, $mul.ref(29, 16));
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} INIT_LIST_HEAD($p75);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p76 := $M.13;
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p76, $mul.ref(30, 16));
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} INIT_LIST_HEAD($p77);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p78 := $M.13;
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p78, $mul.ref(31, 16));
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} INIT_LIST_HEAD($p79);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p80 := $M.13;
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p80, $mul.ref(32, 16));
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} INIT_LIST_HEAD($p81);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p82 := $M.13;
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p82, $mul.ref(33, 16));
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} INIT_LIST_HEAD($p83);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p84 := $M.13;
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p84, $mul.ref(34, 16));
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} INIT_LIST_HEAD($p85);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p86 := $M.13;
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p86, $mul.ref(35, 16));
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} INIT_LIST_HEAD($p87);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p88 := $M.13;
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p88, $mul.ref(36, 16));
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} INIT_LIST_HEAD($p89);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p90 := $M.13;
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p90, $mul.ref(37, 16));
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} INIT_LIST_HEAD($p91);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p92 := $M.13;
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p92, $mul.ref(38, 16));
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} INIT_LIST_HEAD($p93);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p94 := $M.13;
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p94, $mul.ref(39, 16));
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} INIT_LIST_HEAD($p95);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p96 := $M.13;
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p96, $mul.ref(40, 16));
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} INIT_LIST_HEAD($p97);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p98 := $M.13;
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p98, $mul.ref(41, 16));
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} INIT_LIST_HEAD($p99);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p100 := $M.13;
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p100, $mul.ref(42, 16));
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} INIT_LIST_HEAD($p101);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p102 := $M.13;
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p102, $mul.ref(43, 16));
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} INIT_LIST_HEAD($p103);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p104 := $M.13;
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p104, $mul.ref(44, 16));
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} INIT_LIST_HEAD($p105);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p106 := $M.13;
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p106, $mul.ref(45, 16));
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} INIT_LIST_HEAD($p107);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p108 := $M.13;
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p108, $mul.ref(46, 16));
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} INIT_LIST_HEAD($p109);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p110 := $M.13;
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p110, $mul.ref(47, 16));
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} INIT_LIST_HEAD($p111);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p112 := $M.13;
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p112, $mul.ref(48, 16));
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} INIT_LIST_HEAD($p113);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p114 := $M.13;
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($p114, $mul.ref(49, 16));
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} INIT_LIST_HEAD($p115);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p116 := $M.13;
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p116, $mul.ref(50, 16));
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} INIT_LIST_HEAD($p117);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p118 := $M.13;
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p118, $mul.ref(51, 16));
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} INIT_LIST_HEAD($p119);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p120 := $M.13;
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p120, $mul.ref(52, 16));
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} INIT_LIST_HEAD($p121);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p122 := $M.13;
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($p122, $mul.ref(53, 16));
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} INIT_LIST_HEAD($p123);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p124 := $M.13;
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($p124, $mul.ref(54, 16));
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} INIT_LIST_HEAD($p125);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p126 := $M.13;
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p126, $mul.ref(55, 16));
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} INIT_LIST_HEAD($p127);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p128 := $M.13;
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($p128, $mul.ref(56, 16));
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} INIT_LIST_HEAD($p129);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p130 := $M.13;
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($p130, $mul.ref(57, 16));
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} INIT_LIST_HEAD($p131);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p132 := $M.13;
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($p132, $mul.ref(58, 16));
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} INIT_LIST_HEAD($p133);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p134 := $M.13;
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($p134, $mul.ref(59, 16));
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} INIT_LIST_HEAD($p135);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p136 := $M.13;
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($p136, $mul.ref(60, 16));
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} INIT_LIST_HEAD($p137);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p138 := $M.13;
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p138, $mul.ref(61, 16));
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} INIT_LIST_HEAD($p139);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p140 := $M.13;
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($p140, $mul.ref(62, 16));
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} INIT_LIST_HEAD($p141);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p142 := $M.13;
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($p142, $mul.ref(63, 16));
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} INIT_LIST_HEAD($p143);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p144 := $M.13;
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($p144, $mul.ref(64, 16));
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} INIT_LIST_HEAD($p145);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p146 := $M.13;
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($p146, $mul.ref(65, 16));
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} INIT_LIST_HEAD($p147);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p148 := $M.13;
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($p148, $mul.ref(66, 16));
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} INIT_LIST_HEAD($p149);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p150 := $M.13;
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p150, $mul.ref(67, 16));
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} INIT_LIST_HEAD($p151);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p152 := $M.13;
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($p152, $mul.ref(68, 16));
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} INIT_LIST_HEAD($p153);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p154 := $M.13;
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($p154, $mul.ref(69, 16));
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} INIT_LIST_HEAD($p155);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p156 := $M.13;
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($p156, $mul.ref(70, 16));
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} INIT_LIST_HEAD($p157);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p158 := $M.13;
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($p158, $mul.ref(71, 16));
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} INIT_LIST_HEAD($p159);
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p160 := $M.13;
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($p160, $mul.ref(72, 16));
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} INIT_LIST_HEAD($p161);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p162 := $M.13;
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($p162, $mul.ref(73, 16));
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} INIT_LIST_HEAD($p163);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p164 := $M.13;
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($p164, $mul.ref(74, 16));
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} INIT_LIST_HEAD($p165);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p166 := $M.13;
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($p166, $mul.ref(75, 16));
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} INIT_LIST_HEAD($p167);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p168 := $M.13;
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($p168, $mul.ref(76, 16));
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} INIT_LIST_HEAD($p169);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p170 := $M.13;
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($p170, $mul.ref(77, 16));
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} INIT_LIST_HEAD($p171);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p172 := $M.13;
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($p172, $mul.ref(78, 16));
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} INIT_LIST_HEAD($p173);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p174 := $M.13;
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($p174, $mul.ref(79, 16));
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} INIT_LIST_HEAD($p175);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p176 := $M.13;
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($p176, $mul.ref(80, 16));
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} INIT_LIST_HEAD($p177);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p178 := $M.13;
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($p178, $mul.ref(81, 16));
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} INIT_LIST_HEAD($p179);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p180 := $M.13;
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($p180, $mul.ref(82, 16));
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} INIT_LIST_HEAD($p181);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p182 := $M.13;
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($p182, $mul.ref(83, 16));
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} INIT_LIST_HEAD($p183);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p184 := $M.13;
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($p184, $mul.ref(84, 16));
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} INIT_LIST_HEAD($p185);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p186 := $M.13;
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($p186, $mul.ref(85, 16));
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} INIT_LIST_HEAD($p187);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p188 := $M.13;
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($p188, $mul.ref(86, 16));
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} INIT_LIST_HEAD($p189);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p190 := $M.13;
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($p190, $mul.ref(87, 16));
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} INIT_LIST_HEAD($p191);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p192 := $M.13;
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($p192, $mul.ref(88, 16));
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} INIT_LIST_HEAD($p193);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p194 := $M.13;
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($p194, $mul.ref(89, 16));
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} INIT_LIST_HEAD($p195);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p196 := $M.13;
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($p196, $mul.ref(90, 16));
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} INIT_LIST_HEAD($p197);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p198 := $M.13;
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($p198, $mul.ref(91, 16));
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} INIT_LIST_HEAD($p199);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p200 := $M.13;
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($p200, $mul.ref(92, 16));
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} INIT_LIST_HEAD($p201);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p202 := $M.13;
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($p202, $mul.ref(93, 16));
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} INIT_LIST_HEAD($p203);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p204 := $M.13;
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($p204, $mul.ref(94, 16));
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} INIT_LIST_HEAD($p205);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p206 := $M.13;
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($p206, $mul.ref(95, 16));
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} INIT_LIST_HEAD($p207);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p208 := $M.13;
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($p208, $mul.ref(96, 16));
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} INIT_LIST_HEAD($p209);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p210 := $M.13;
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($p210, $mul.ref(97, 16));
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} INIT_LIST_HEAD($p211);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $p212 := $M.13;
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($p212, $mul.ref(98, 16));
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} INIT_LIST_HEAD($p213);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p214 := $M.13;
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($p214, $mul.ref(99, 16));
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} INIT_LIST_HEAD($p215);
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p216 := $M.13;
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($p216, $mul.ref(100, 16));
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} INIT_LIST_HEAD($p217);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p218 := $M.13;
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($p218, $mul.ref(101, 16));
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} INIT_LIST_HEAD($p219);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p220 := $M.13;
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($p220, $mul.ref(102, 16));
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} INIT_LIST_HEAD($p221);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $p222 := $M.13;
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($p222, $mul.ref(103, 16));
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} INIT_LIST_HEAD($p223);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p224 := $M.13;
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($p224, $mul.ref(104, 16));
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} INIT_LIST_HEAD($p225);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p226 := $M.13;
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($p226, $mul.ref(105, 16));
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} INIT_LIST_HEAD($p227);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p228 := $M.13;
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($p228, $mul.ref(106, 16));
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} INIT_LIST_HEAD($p229);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p230 := $M.13;
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($p230, $mul.ref(107, 16));
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} INIT_LIST_HEAD($p231);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $p232 := $M.13;
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($p232, $mul.ref(108, 16));
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} INIT_LIST_HEAD($p233);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p234 := $M.13;
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($p234, $mul.ref(109, 16));
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} INIT_LIST_HEAD($p235);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p236 := $M.13;
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($p236, $mul.ref(110, 16));
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} INIT_LIST_HEAD($p237);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $p238 := $M.13;
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($p238, $mul.ref(111, 16));
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} INIT_LIST_HEAD($p239);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p240 := $M.13;
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($p240, $mul.ref(112, 16));
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} INIT_LIST_HEAD($p241);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p242 := $M.13;
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($p242, $mul.ref(113, 16));
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} INIT_LIST_HEAD($p243);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $p244 := $M.13;
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($p244, $mul.ref(114, 16));
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} INIT_LIST_HEAD($p245);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p246 := $M.13;
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($p246, $mul.ref(115, 16));
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} INIT_LIST_HEAD($p247);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p248 := $M.13;
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($p248, $mul.ref(116, 16));
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} INIT_LIST_HEAD($p249);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $p250 := $M.13;
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($p250, $mul.ref(117, 16));
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} INIT_LIST_HEAD($p251);
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $p252 := $M.13;
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($p252, $mul.ref(118, 16));
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} INIT_LIST_HEAD($p253);
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $p254 := $M.13;
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($p254, $mul.ref(119, 16));
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} INIT_LIST_HEAD($p255);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $p256 := $M.13;
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($p256, $mul.ref(120, 16));
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} INIT_LIST_HEAD($p257);
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $p258 := $M.13;
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($p258, $mul.ref(121, 16));
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} INIT_LIST_HEAD($p259);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $p260 := $M.13;
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($p260, $mul.ref(122, 16));
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} INIT_LIST_HEAD($p261);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $p262 := $M.13;
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($p262, $mul.ref(123, 16));
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} INIT_LIST_HEAD($p263);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p264 := $M.13;
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($p264, $mul.ref(124, 16));
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} INIT_LIST_HEAD($p265);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $p266 := $M.13;
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($p266, $mul.ref(125, 16));
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} INIT_LIST_HEAD($p267);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $p268 := $M.13;
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($p268, $mul.ref(126, 16));
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} INIT_LIST_HEAD($p269);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $p270 := $M.13;
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($p270, $mul.ref(127, 16));
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} INIT_LIST_HEAD($p271);
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $p272 := $M.13;
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($p272, $mul.ref(128, 16));
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} INIT_LIST_HEAD($p273);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $p274 := $M.13;
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($p274, $mul.ref(129, 16));
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} INIT_LIST_HEAD($p275);
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $p276 := $M.13;
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($p276, $mul.ref(130, 16));
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} INIT_LIST_HEAD($p277);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $p278 := $M.13;
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($p278, $mul.ref(131, 16));
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} INIT_LIST_HEAD($p279);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $p280 := $M.13;
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($p280, $mul.ref(132, 16));
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} INIT_LIST_HEAD($p281);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $p282 := $M.13;
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($p282, $mul.ref(133, 16));
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} INIT_LIST_HEAD($p283);
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $p284 := $M.13;
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($p284, $mul.ref(134, 16));
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} INIT_LIST_HEAD($p285);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $p286 := $M.13;
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($p286, $mul.ref(135, 16));
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} INIT_LIST_HEAD($p287);
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $p288 := $M.13;
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($p288, $mul.ref(136, 16));
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} INIT_LIST_HEAD($p289);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $p290 := $M.13;
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($p290, $mul.ref(137, 16));
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} INIT_LIST_HEAD($p291);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $p292 := $M.13;
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($p292, $mul.ref(138, 16));
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} INIT_LIST_HEAD($p293);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $p294 := $M.13;
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($p294, $mul.ref(139, 16));
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} INIT_LIST_HEAD($p295);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $p296 := $M.13;
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($p296, $mul.ref(140, 16));
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} INIT_LIST_HEAD($p297);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $p298 := $M.13;
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($p298, $mul.ref(141, 16));
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} INIT_LIST_HEAD($p299);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $p300 := $M.13;
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($p300, $mul.ref(142, 16));
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} INIT_LIST_HEAD($p301);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $p302 := $M.13;
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($p302, $mul.ref(143, 16));
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} INIT_LIST_HEAD($p303);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p304 := $M.13;
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($p304, $mul.ref(144, 16));
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} INIT_LIST_HEAD($p305);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $p306 := $M.13;
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($p306, $mul.ref(145, 16));
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} INIT_LIST_HEAD($p307);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $p308 := $M.13;
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($p308, $mul.ref(146, 16));
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} INIT_LIST_HEAD($p309);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $p310 := $M.13;
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($p310, $mul.ref(147, 16));
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} INIT_LIST_HEAD($p311);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $p312 := $M.13;
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($p312, $mul.ref(148, 16));
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} INIT_LIST_HEAD($p313);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $p314 := $M.13;
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($p314, $mul.ref(149, 16));
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} INIT_LIST_HEAD($p315);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $p316 := $M.13;
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($p316, $mul.ref(150, 16));
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} INIT_LIST_HEAD($p317);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $p318 := $M.13;
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($p318, $mul.ref(151, 16));
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} INIT_LIST_HEAD($p319);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $p320 := $M.13;
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($p320, $mul.ref(152, 16));
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} INIT_LIST_HEAD($p321);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    $p322 := $M.13;
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($p322, $mul.ref(153, 16));
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} INIT_LIST_HEAD($p323);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $p324 := $M.13;
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($p324, $mul.ref(154, 16));
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} INIT_LIST_HEAD($p325);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $p326 := $M.13;
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($p326, $mul.ref(155, 16));
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} INIT_LIST_HEAD($p327);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    $p328 := $M.13;
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($p328, $mul.ref(156, 16));
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} INIT_LIST_HEAD($p329);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $p330 := $M.13;
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($p330, $mul.ref(157, 16));
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} INIT_LIST_HEAD($p331);
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $p332 := $M.13;
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($p332, $mul.ref(158, 16));
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} INIT_LIST_HEAD($p333);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    $p334 := $M.13;
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($p334, $mul.ref(159, 16));
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} INIT_LIST_HEAD($p335);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $p336 := $M.13;
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($p336, $mul.ref(160, 16));
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} INIT_LIST_HEAD($p337);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $p338 := $M.13;
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($p338, $mul.ref(161, 16));
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} INIT_LIST_HEAD($p339);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    $p340 := $M.13;
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($p340, $mul.ref(162, 16));
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} INIT_LIST_HEAD($p341);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    $p342 := $M.13;
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($p342, $mul.ref(163, 16));
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} INIT_LIST_HEAD($p343);
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $p344 := $M.13;
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($p344, $mul.ref(164, 16));
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1830} INIT_LIST_HEAD($p345);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $p346 := $M.13;
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($p346, $mul.ref(165, 16));
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} INIT_LIST_HEAD($p347);
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $p348 := $M.13;
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($p348, $mul.ref(166, 16));
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} INIT_LIST_HEAD($p349);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $p350 := $M.13;
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($p350, $mul.ref(167, 16));
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} INIT_LIST_HEAD($p351);
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $p352 := $M.13;
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($p352, $mul.ref(168, 16));
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} INIT_LIST_HEAD($p353);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    $p354 := $M.13;
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($p354, $mul.ref(169, 16));
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} INIT_LIST_HEAD($p355);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $p356 := $M.13;
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($p356, $mul.ref(170, 16));
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} INIT_LIST_HEAD($p357);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $p358 := $M.13;
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($p358, $mul.ref(171, 16));
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} INIT_LIST_HEAD($p359);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $p360 := $M.13;
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($p360, $mul.ref(172, 16));
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} INIT_LIST_HEAD($p361);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $p362 := $M.13;
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($p362, $mul.ref(173, 16));
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} INIT_LIST_HEAD($p363);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $p364 := $M.13;
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($p364, $mul.ref(174, 16));
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} INIT_LIST_HEAD($p365);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $p366 := $M.13;
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($p366, $mul.ref(175, 16));
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} INIT_LIST_HEAD($p367);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    $p368 := $M.13;
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($p368, $mul.ref(176, 16));
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} INIT_LIST_HEAD($p369);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $p370 := $M.13;
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($p370, $mul.ref(177, 16));
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} INIT_LIST_HEAD($p371);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $p372 := $M.13;
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($p372, $mul.ref(178, 16));
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} INIT_LIST_HEAD($p373);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $p374 := $M.13;
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($p374, $mul.ref(179, 16));
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} INIT_LIST_HEAD($p375);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $p376 := $M.13;
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($p376, $mul.ref(180, 16));
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} INIT_LIST_HEAD($p377);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    $p378 := $M.13;
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($p378, $mul.ref(181, 16));
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} INIT_LIST_HEAD($p379);
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $p380 := $M.13;
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($p380, $mul.ref(182, 16));
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} INIT_LIST_HEAD($p381);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    $p382 := $M.13;
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($p382, $mul.ref(183, 16));
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} INIT_LIST_HEAD($p383);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $p384 := $M.13;
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($p384, $mul.ref(184, 16));
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} INIT_LIST_HEAD($p385);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $p386 := $M.13;
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($p386, $mul.ref(185, 16));
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} INIT_LIST_HEAD($p387);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $p388 := $M.13;
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($p388, $mul.ref(186, 16));
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} INIT_LIST_HEAD($p389);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $p390 := $M.13;
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($p390, $mul.ref(187, 16));
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} INIT_LIST_HEAD($p391);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $p392 := $M.13;
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($p392, $mul.ref(188, 16));
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} INIT_LIST_HEAD($p393);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $p394 := $M.13;
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($p394, $mul.ref(189, 16));
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} INIT_LIST_HEAD($p395);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $p396 := $M.13;
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($p396, $mul.ref(190, 16));
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} INIT_LIST_HEAD($p397);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $p398 := $M.13;
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($p398, $mul.ref(191, 16));
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} INIT_LIST_HEAD($p399);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $p400 := $M.13;
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($p400, $mul.ref(192, 16));
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} INIT_LIST_HEAD($p401);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $p402 := $M.13;
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($p402, $mul.ref(193, 16));
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} INIT_LIST_HEAD($p403);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    $p404 := $M.13;
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($p404, $mul.ref(194, 16));
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} INIT_LIST_HEAD($p405);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    $p406 := $M.13;
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($p406, $mul.ref(195, 16));
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} INIT_LIST_HEAD($p407);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $p408 := $M.13;
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($p408, $mul.ref(196, 16));
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} INIT_LIST_HEAD($p409);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $p410 := $M.13;
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($p410, $mul.ref(197, 16));
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1863} INIT_LIST_HEAD($p411);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    $p412 := $M.13;
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($p412, $mul.ref(198, 16));
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} INIT_LIST_HEAD($p413);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    $p414 := $M.13;
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($p414, $mul.ref(199, 16));
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} INIT_LIST_HEAD($p415);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $p416 := $M.13;
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($p416, $mul.ref(200, 16));
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} INIT_LIST_HEAD($p417);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    $p418 := $M.13;
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($p418, $mul.ref(201, 16));
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} INIT_LIST_HEAD($p419);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $p420 := $M.13;
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($p420, $mul.ref(202, 16));
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} INIT_LIST_HEAD($p421);
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $p422 := $M.13;
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($p422, $mul.ref(203, 16));
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1869} INIT_LIST_HEAD($p423);
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    $p424 := $M.13;
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($p424, $mul.ref(204, 16));
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} INIT_LIST_HEAD($p425);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $p426 := $M.13;
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($p426, $mul.ref(205, 16));
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} INIT_LIST_HEAD($p427);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $p428 := $M.13;
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($p428, $mul.ref(206, 16));
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} INIT_LIST_HEAD($p429);
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $p430 := $M.13;
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($p430, $mul.ref(207, 16));
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} INIT_LIST_HEAD($p431);
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $p432 := $M.13;
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($p432, $mul.ref(208, 16));
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} INIT_LIST_HEAD($p433);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $p434 := $M.13;
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($p434, $mul.ref(209, 16));
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} INIT_LIST_HEAD($p435);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $p436 := $M.13;
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($p436, $mul.ref(210, 16));
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} INIT_LIST_HEAD($p437);
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    $p438 := $M.13;
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($p438, $mul.ref(211, 16));
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} INIT_LIST_HEAD($p439);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    $p440 := $M.13;
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($p440, $mul.ref(212, 16));
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1878} INIT_LIST_HEAD($p441);
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $p442 := $M.13;
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($p442, $mul.ref(213, 16));
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} INIT_LIST_HEAD($p443);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $p444 := $M.13;
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($p444, $mul.ref(214, 16));
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} INIT_LIST_HEAD($p445);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    $p446 := $M.13;
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($p446, $mul.ref(215, 16));
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} INIT_LIST_HEAD($p447);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    $p448 := $M.13;
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($p448, $mul.ref(216, 16));
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} INIT_LIST_HEAD($p449);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $p450 := $M.13;
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($p450, $mul.ref(217, 16));
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} INIT_LIST_HEAD($p451);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    $p452 := $M.13;
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($p452, $mul.ref(218, 16));
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} INIT_LIST_HEAD($p453);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    $p454 := $M.13;
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($p454, $mul.ref(219, 16));
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} INIT_LIST_HEAD($p455);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    $p456 := $M.13;
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($p456, $mul.ref(220, 16));
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} INIT_LIST_HEAD($p457);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    $p458 := $M.13;
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($p458, $mul.ref(221, 16));
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} INIT_LIST_HEAD($p459);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $p460 := $M.13;
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($p460, $mul.ref(222, 16));
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} INIT_LIST_HEAD($p461);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $p462 := $M.13;
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($p462, $mul.ref(223, 16));
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} INIT_LIST_HEAD($p463);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $p464 := $M.13;
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $p465 := $add.ref($p464, $mul.ref(224, 16));
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} INIT_LIST_HEAD($p465);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    $p466 := $M.13;
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($p466, $mul.ref(225, 16));
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} INIT_LIST_HEAD($p467);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    $p468 := $M.13;
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($p468, $mul.ref(226, 16));
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} INIT_LIST_HEAD($p469);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $p470 := $M.13;
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($p470, $mul.ref(227, 16));
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} INIT_LIST_HEAD($p471);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    $p472 := $M.13;
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($p472, $mul.ref(228, 16));
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} INIT_LIST_HEAD($p473);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    $p474 := $M.13;
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $p475 := $add.ref($p474, $mul.ref(229, 16));
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} INIT_LIST_HEAD($p475);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $p476 := $M.13;
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($p476, $mul.ref(230, 16));
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} INIT_LIST_HEAD($p477);
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    $p478 := $M.13;
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $p479 := $add.ref($p478, $mul.ref(231, 16));
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} INIT_LIST_HEAD($p479);
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    $p480 := $M.13;
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($p480, $mul.ref(232, 16));
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} INIT_LIST_HEAD($p481);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $p482 := $M.13;
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $p483 := $add.ref($p482, $mul.ref(233, 16));
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} INIT_LIST_HEAD($p483);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    $p484 := $M.13;
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $p485 := $add.ref($p484, $mul.ref(234, 16));
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} INIT_LIST_HEAD($p485);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    $p486 := $M.13;
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $p487 := $add.ref($p486, $mul.ref(235, 16));
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} INIT_LIST_HEAD($p487);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $p488 := $M.13;
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($p488, $mul.ref(236, 16));
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} INIT_LIST_HEAD($p489);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $p490 := $M.13;
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($p490, $mul.ref(237, 16));
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} INIT_LIST_HEAD($p491);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $p492 := $M.13;
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $p493 := $add.ref($p492, $mul.ref(238, 16));
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} INIT_LIST_HEAD($p493);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    $p494 := $M.13;
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($p494, $mul.ref(239, 16));
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} INIT_LIST_HEAD($p495);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    $p496 := $M.13;
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($p496, $mul.ref(240, 16));
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} INIT_LIST_HEAD($p497);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    $p498 := $M.13;
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $p499 := $add.ref($p498, $mul.ref(241, 16));
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} INIT_LIST_HEAD($p499);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    $p500 := $M.13;
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($p500, $mul.ref(242, 16));
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} INIT_LIST_HEAD($p501);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $p502 := $M.13;
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($p502, $mul.ref(243, 16));
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} INIT_LIST_HEAD($p503);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    $p504 := $M.13;
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($p504, $mul.ref(244, 16));
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} INIT_LIST_HEAD($p505);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $p506 := $M.13;
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($p506, $mul.ref(245, 16));
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} INIT_LIST_HEAD($p507);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    $p508 := $M.13;
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $p509 := $add.ref($p508, $mul.ref(246, 16));
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} INIT_LIST_HEAD($p509);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    $p510 := $M.13;
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($p510, $mul.ref(247, 16));
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1913} INIT_LIST_HEAD($p511);
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    $p512 := $M.13;
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($p512, $mul.ref(248, 16));
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} INIT_LIST_HEAD($p513);
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $p514 := $M.13;
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($p514, $mul.ref(249, 16));
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} INIT_LIST_HEAD($p515);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    $p516 := $M.13;
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($p516, $mul.ref(250, 16));
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} INIT_LIST_HEAD($p517);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    $p518 := $M.13;
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $p519 := $add.ref($p518, $mul.ref(251, 16));
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} INIT_LIST_HEAD($p519);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    $p520 := $M.13;
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $p521 := $add.ref($p520, $mul.ref(252, 16));
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} INIT_LIST_HEAD($p521);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    $p522 := $M.13;
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($p522, $mul.ref(253, 16));
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} INIT_LIST_HEAD($p523);
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    $p524 := $M.13;
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($p524, $mul.ref(254, 16));
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} INIT_LIST_HEAD($p525);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    $p526 := $M.13;
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $p527 := $add.ref($p526, $mul.ref(255, 16));
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1921} INIT_LIST_HEAD($p527);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} __init_rwsem(_origins_lock, .str.73, $p0);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb9:
    assume $i13 == 1;
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} vslice_dummy_var_196 := printk.ref(.str.72);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $p15 := $M.14;
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} kfree($p16);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} vslice_dummy_var_195 := printk.ref(.str.71);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_388:
    assume !assertsPassed;
    return;
}



const kmem_cache_create: ref;

axiom kmem_cache_create == $sub.ref(0, 497683);

procedure kmem_cache_create($p0: ref, $i1: i64, $i2: i64, $i3: i64, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kmem_cache_create($p0: ref, $i1: i64, $i2: i64, $i3: i64, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} {:cexpr "kmem_cache_create:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 2177} {:cexpr "kmem_cache_create:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 2178} {:cexpr "kmem_cache_create:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2179} $p5 := external_alloc();
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const kmem_cache_destroy: ref;

axiom kmem_cache_destroy == $sub.ref(0, 498715);

procedure kmem_cache_destroy($p0: ref);
  free requires assertsPassed;



implementation kmem_cache_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    return;
}



const exit_origin_hash: ref;

axiom exit_origin_hash == $sub.ref(0, 499747);

procedure exit_origin_hash();
  free requires assertsPassed;



implementation exit_origin_hash()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    $p0 := $M.14;
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2180} kfree($p1);
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $p2 := $M.13;
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2181} kfree($p3);
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    return;
}



const dm_unregister_target: ref;

axiom dm_unregister_target == $sub.ref(0, 500779);

procedure dm_unregister_target($p0: ref);
  free requires assertsPassed;



implementation dm_unregister_target($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    return;
}



const dm_exception_store_exit: ref;

axiom dm_exception_store_exit == $sub.ref(0, 501811);

procedure dm_exception_store_exit();
  free requires assertsPassed;
  modifies $M.1;



implementation dm_exception_store_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2182} dm_persistent_snapshot_exit();
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2183} dm_transient_snapshot_exit();
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    return;
}



const dm_persistent_snapshot_exit: ref;

axiom dm_persistent_snapshot_exit == $sub.ref(0, 502843);

procedure dm_persistent_snapshot_exit();
  free requires assertsPassed;
  modifies $M.1;



implementation dm_persistent_snapshot_exit()
{
  var vslice_dummy_var_197: i32;
  var vslice_dummy_var_198: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2184} vslice_dummy_var_197 := dm_exception_store_type_unregister(_persistent_type);
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2185} vslice_dummy_var_198 := dm_exception_store_type_unregister(_persistent_compat_type);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    return;
}



const dm_transient_snapshot_exit: ref;

axiom dm_transient_snapshot_exit == $sub.ref(0, 503875);

procedure dm_transient_snapshot_exit();
  free requires assertsPassed;
  modifies $M.1;



implementation dm_transient_snapshot_exit()
{
  var vslice_dummy_var_199: i32;
  var vslice_dummy_var_200: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2186} vslice_dummy_var_199 := dm_exception_store_type_unregister(_transient_type);
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2187} vslice_dummy_var_200 := dm_exception_store_type_unregister(_transient_compat_type);
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    return;
}



const dm_transient_snapshot_init: ref;

axiom dm_transient_snapshot_init == $sub.ref(0, 504907);

procedure dm_transient_snapshot_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation dm_transient_snapshot_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i32;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2188} $i0 := dm_exception_store_type_register(_transient_type);
    call {:si_unique_call 2189} {:cexpr "r"} boogie_si_record_i32($i0);
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2191} $i4 := dm_exception_store_type_register(_transient_compat_type);
    call {:si_unique_call 2192} {:cexpr "r"} boogie_si_record_i32($i4);
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i3 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2193} vslice_dummy_var_202 := printk.ref(.str.13);
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2194} vslice_dummy_var_203 := dm_exception_store_type_unregister(_transient_type);
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    $i3 := $i4;
    goto $bb3;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2190} vslice_dummy_var_201 := printk.ref(.str.12);
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    $i3 := $i0;
    goto $bb3;
}



const dm_persistent_snapshot_init: ref;

axiom dm_persistent_snapshot_init == $sub.ref(0, 505939);

procedure dm_persistent_snapshot_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation dm_persistent_snapshot_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i32;
  var vslice_dummy_var_204: i32;
  var vslice_dummy_var_205: i32;
  var vslice_dummy_var_206: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2195} $i0 := dm_exception_store_type_register(_persistent_type);
    call {:si_unique_call 2196} {:cexpr "r"} boogie_si_record_i32($i0);
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2198} $i4 := dm_exception_store_type_register(_persistent_compat_type);
    call {:si_unique_call 2199} {:cexpr "r"} boogie_si_record_i32($i4);
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i3 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2200} vslice_dummy_var_205 := printk.ref(.str.15);
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2201} vslice_dummy_var_206 := dm_exception_store_type_unregister(_persistent_type);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $i3 := $i4;
    goto $bb3;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2197} vslice_dummy_var_204 := printk.ref(.str.14);
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    $i3 := $i0;
    goto $bb3;
}



const ldv_release_4: ref;

axiom ldv_release_4 == $sub.ref(0, 506971);

procedure ldv_release_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2202} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2203} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_4: ref;

axiom ldv_probe_4 == $sub.ref(0, 508003);

procedure ldv_probe_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2204} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2205} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_1: ref;

axiom ldv_release_1 == $sub.ref(0, 509035);

procedure ldv_release_1() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_1() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2206} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2207} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_1: ref;

axiom ldv_probe_1 == $sub.ref(0, 510067);

procedure ldv_probe_1() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_1() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2208} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2209} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_2: ref;

axiom ldv_release_2 == $sub.ref(0, 511099);

procedure ldv_release_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2210} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2211} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_2: ref;

axiom ldv_probe_2 == $sub.ref(0, 512131);

procedure ldv_probe_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2212} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2213} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_3: ref;

axiom ldv_release_3 == $sub.ref(0, 513163);

procedure ldv_release_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2214} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2215} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_3: ref;

axiom ldv_probe_3 == $sub.ref(0, 514195);

procedure ldv_probe_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2216} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2217} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 515227);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2218} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 1} true;
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 516259);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 517291);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 518323);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 519355);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 520387);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 521419);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 522451);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 523483);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 524515);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 525547);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 526579);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 527611);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 528643);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2219} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 2220} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2221} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2222} __VERIFIER_assume($i4);
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 529675);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 530707);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 531739);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 532771);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2223} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2224} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2225} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2226} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2227} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 2228} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2229} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2230} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 2231} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2232} __VERIFIER_assume($i7);
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2233} __VERIFIER_assume($i11);
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 533803);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 534835);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2234} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 2235} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2236} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2237} __VERIFIER_assume($i4);
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 535867);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 536899);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 537931);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 538963);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 539995);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2238} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2239} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2240} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2241} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2242} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 2243} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2244} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2245} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 2246} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2247} __VERIFIER_assume($i7);
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2248} __VERIFIER_assume($i11);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 541027);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 542059);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 543091);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 544123);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 545155);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 546187);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 547219);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 548251);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 549283);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2249} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2250} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2251} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2252} __VERIFIER_assume($i10);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 550315);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2253} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 2254} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2255} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 551347);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2256} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 2257} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2258} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 552379);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2259} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 2260} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 553411);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 554443);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2261} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2262} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 555475);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 556507);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 557539);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2263} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 2264} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2265} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2266} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2267} $p6 := malloc($i5);
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.0;
    call {:si_unique_call 2268} cmdloc_dummy_var_25 := $memset.i8(cmdloc_dummy_var_24, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_25;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 558571);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 559603);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.73, $M.0, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.13, $M.23, $M.8, $M.14, $M.6, $M.80, $M.57, $M.55, $M.60, $M.59, $M.56, $M.61, $M.58, $M.64, $M.51, $M.48, $M.50, $M.62, $M.52, $M.63, $M.69, $M.49, $M.45, $M.66, $M.47, $M.43, $M.54, $M.44, $M.53, $M.46, $M.68, $M.67, $M.65, $M.1, $M.91;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 2269} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.73 := $store.i8($M.73, __kstrtab_dm_snap_origin, 100);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_dm_snap_origin, $mul.ref(0, 15)), $mul.ref(1, 1)), 109);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_dm_snap_origin, $mul.ref(0, 15)), $mul.ref(2, 1)), 95);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_dm_snap_origin, $mul.ref(0, 15)), $mul.ref(3, 1)), 115);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_dm_snap_origin, $mul.ref(0, 15)), $mul.ref(4, 1)), 110);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_dm_snap_origin, $mul.ref(0, 15)), $mul.ref(5, 1)), 97);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_dm_snap_origin, $mul.ref(0, 15)), $mul.ref(6, 1)), 112);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_dm_snap_origin, $mul.ref(0, 15)), $mul.ref(7, 1)), 95);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_dm_snap_origin, $mul.ref(0, 15)), $mul.ref(8, 1)), 111);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_dm_snap_origin, $mul.ref(0, 15)), $mul.ref(9, 1)), 114);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_dm_snap_origin, $mul.ref(0, 15)), $mul.ref(10, 1)), 105);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_dm_snap_origin, $mul.ref(0, 15)), $mul.ref(11, 1)), 103);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_dm_snap_origin, $mul.ref(0, 15)), $mul.ref(12, 1)), 105);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_dm_snap_origin, $mul.ref(0, 15)), $mul.ref(13, 1)), 110);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(__kstrtab_dm_snap_origin, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.ref($M.0, _persistent_compat_type, .str.5);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_persistent_compat_type, $mul.ref(0, 112)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_persistent_compat_type, $mul.ref(0, 112)), $mul.ref(16, 1)), persistent_ctr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_persistent_compat_type, $mul.ref(0, 112)), $mul.ref(24, 1)), persistent_dtr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_persistent_compat_type, $mul.ref(0, 112)), $mul.ref(32, 1)), persistent_read_metadata);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_persistent_compat_type, $mul.ref(0, 112)), $mul.ref(40, 1)), persistent_prepare_exception);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_persistent_compat_type, $mul.ref(0, 112)), $mul.ref(48, 1)), persistent_commit_exception);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_persistent_compat_type, $mul.ref(0, 112)), $mul.ref(56, 1)), persistent_prepare_merge);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_persistent_compat_type, $mul.ref(0, 112)), $mul.ref(64, 1)), persistent_commit_merge);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_persistent_compat_type, $mul.ref(0, 112)), $mul.ref(72, 1)), persistent_drop_snapshot);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_persistent_compat_type, $mul.ref(0, 112)), $mul.ref(80, 1)), persistent_status);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_persistent_compat_type, $mul.ref(0, 112)), $mul.ref(88, 1)), persistent_usage);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(_persistent_compat_type, $mul.ref(0, 112)), $mul.ref(96, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(_persistent_compat_type, $mul.ref(0, 112)), $mul.ref(96, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, _persistent_type, .str.81);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_persistent_type, $mul.ref(0, 112)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_persistent_type, $mul.ref(0, 112)), $mul.ref(16, 1)), persistent_ctr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_persistent_type, $mul.ref(0, 112)), $mul.ref(24, 1)), persistent_dtr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_persistent_type, $mul.ref(0, 112)), $mul.ref(32, 1)), persistent_read_metadata);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_persistent_type, $mul.ref(0, 112)), $mul.ref(40, 1)), persistent_prepare_exception);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_persistent_type, $mul.ref(0, 112)), $mul.ref(48, 1)), persistent_commit_exception);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_persistent_type, $mul.ref(0, 112)), $mul.ref(56, 1)), persistent_prepare_merge);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_persistent_type, $mul.ref(0, 112)), $mul.ref(64, 1)), persistent_commit_merge);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_persistent_type, $mul.ref(0, 112)), $mul.ref(72, 1)), persistent_drop_snapshot);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_persistent_type, $mul.ref(0, 112)), $mul.ref(80, 1)), persistent_status);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_persistent_type, $mul.ref(0, 112)), $mul.ref(88, 1)), persistent_usage);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(_persistent_type, $mul.ref(0, 112)), $mul.ref(96, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(_persistent_type, $mul.ref(0, 112)), $mul.ref(96, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, _transient_compat_type, .str.6);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_transient_compat_type, $mul.ref(0, 112)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_transient_compat_type, $mul.ref(0, 112)), $mul.ref(16, 1)), transient_ctr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_transient_compat_type, $mul.ref(0, 112)), $mul.ref(24, 1)), transient_dtr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_transient_compat_type, $mul.ref(0, 112)), $mul.ref(32, 1)), transient_read_metadata);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_transient_compat_type, $mul.ref(0, 112)), $mul.ref(40, 1)), transient_prepare_exception);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_transient_compat_type, $mul.ref(0, 112)), $mul.ref(48, 1)), transient_commit_exception);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_transient_compat_type, $mul.ref(0, 112)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_transient_compat_type, $mul.ref(0, 112)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_transient_compat_type, $mul.ref(0, 112)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_transient_compat_type, $mul.ref(0, 112)), $mul.ref(80, 1)), transient_status);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_transient_compat_type, $mul.ref(0, 112)), $mul.ref(88, 1)), transient_usage);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(_transient_compat_type, $mul.ref(0, 112)), $mul.ref(96, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(_transient_compat_type, $mul.ref(0, 112)), $mul.ref(96, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, _transient_type, .str.79);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_transient_type, $mul.ref(0, 112)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_transient_type, $mul.ref(0, 112)), $mul.ref(16, 1)), transient_ctr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_transient_type, $mul.ref(0, 112)), $mul.ref(24, 1)), transient_dtr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_transient_type, $mul.ref(0, 112)), $mul.ref(32, 1)), transient_read_metadata);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_transient_type, $mul.ref(0, 112)), $mul.ref(40, 1)), transient_prepare_exception);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_transient_type, $mul.ref(0, 112)), $mul.ref(48, 1)), transient_commit_exception);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_transient_type, $mul.ref(0, 112)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_transient_type, $mul.ref(0, 112)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_transient_type, $mul.ref(0, 112)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_transient_type, $mul.ref(0, 112)), $mul.ref(80, 1)), transient_status);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_transient_type, $mul.ref(0, 112)), $mul.ref(88, 1)), transient_usage);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(_transient_type, $mul.ref(0, 112)), $mul.ref(96, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(_transient_type, $mul.ref(0, 112)), $mul.ref(96, 1)), $mul.ref(8, 1)), $0.ref);
    $M.74 := $store.i8($M.74, __kstrtab_dm_exception_store_destroy, 100);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_dm_exception_store_destroy, $mul.ref(0, 27)), $mul.ref(1, 1)), 109);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_dm_exception_store_destroy, $mul.ref(0, 27)), $mul.ref(2, 1)), 95);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_dm_exception_store_destroy, $mul.ref(0, 27)), $mul.ref(3, 1)), 101);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_dm_exception_store_destroy, $mul.ref(0, 27)), $mul.ref(4, 1)), 120);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_dm_exception_store_destroy, $mul.ref(0, 27)), $mul.ref(5, 1)), 99);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_dm_exception_store_destroy, $mul.ref(0, 27)), $mul.ref(6, 1)), 101);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_dm_exception_store_destroy, $mul.ref(0, 27)), $mul.ref(7, 1)), 112);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_dm_exception_store_destroy, $mul.ref(0, 27)), $mul.ref(8, 1)), 116);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_dm_exception_store_destroy, $mul.ref(0, 27)), $mul.ref(9, 1)), 105);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_dm_exception_store_destroy, $mul.ref(0, 27)), $mul.ref(10, 1)), 111);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_dm_exception_store_destroy, $mul.ref(0, 27)), $mul.ref(11, 1)), 110);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_dm_exception_store_destroy, $mul.ref(0, 27)), $mul.ref(12, 1)), 95);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_dm_exception_store_destroy, $mul.ref(0, 27)), $mul.ref(13, 1)), 115);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_dm_exception_store_destroy, $mul.ref(0, 27)), $mul.ref(14, 1)), 116);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_dm_exception_store_destroy, $mul.ref(0, 27)), $mul.ref(15, 1)), 111);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_dm_exception_store_destroy, $mul.ref(0, 27)), $mul.ref(16, 1)), 114);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_dm_exception_store_destroy, $mul.ref(0, 27)), $mul.ref(17, 1)), 101);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_dm_exception_store_destroy, $mul.ref(0, 27)), $mul.ref(18, 1)), 95);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_dm_exception_store_destroy, $mul.ref(0, 27)), $mul.ref(19, 1)), 100);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_dm_exception_store_destroy, $mul.ref(0, 27)), $mul.ref(20, 1)), 101);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_dm_exception_store_destroy, $mul.ref(0, 27)), $mul.ref(21, 1)), 115);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_dm_exception_store_destroy, $mul.ref(0, 27)), $mul.ref(22, 1)), 116);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_dm_exception_store_destroy, $mul.ref(0, 27)), $mul.ref(23, 1)), 114);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_dm_exception_store_destroy, $mul.ref(0, 27)), $mul.ref(24, 1)), 111);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_dm_exception_store_destroy, $mul.ref(0, 27)), $mul.ref(25, 1)), 121);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(__kstrtab_dm_exception_store_destroy, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.75 := $store.i8($M.75, __kstrtab_dm_exception_store_create, 100);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_dm_exception_store_create, $mul.ref(0, 26)), $mul.ref(1, 1)), 109);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_dm_exception_store_create, $mul.ref(0, 26)), $mul.ref(2, 1)), 95);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_dm_exception_store_create, $mul.ref(0, 26)), $mul.ref(3, 1)), 101);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_dm_exception_store_create, $mul.ref(0, 26)), $mul.ref(4, 1)), 120);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_dm_exception_store_create, $mul.ref(0, 26)), $mul.ref(5, 1)), 99);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_dm_exception_store_create, $mul.ref(0, 26)), $mul.ref(6, 1)), 101);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_dm_exception_store_create, $mul.ref(0, 26)), $mul.ref(7, 1)), 112);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_dm_exception_store_create, $mul.ref(0, 26)), $mul.ref(8, 1)), 116);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_dm_exception_store_create, $mul.ref(0, 26)), $mul.ref(9, 1)), 105);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_dm_exception_store_create, $mul.ref(0, 26)), $mul.ref(10, 1)), 111);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_dm_exception_store_create, $mul.ref(0, 26)), $mul.ref(11, 1)), 110);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_dm_exception_store_create, $mul.ref(0, 26)), $mul.ref(12, 1)), 95);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_dm_exception_store_create, $mul.ref(0, 26)), $mul.ref(13, 1)), 115);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_dm_exception_store_create, $mul.ref(0, 26)), $mul.ref(14, 1)), 116);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_dm_exception_store_create, $mul.ref(0, 26)), $mul.ref(15, 1)), 111);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_dm_exception_store_create, $mul.ref(0, 26)), $mul.ref(16, 1)), 114);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_dm_exception_store_create, $mul.ref(0, 26)), $mul.ref(17, 1)), 101);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_dm_exception_store_create, $mul.ref(0, 26)), $mul.ref(18, 1)), 95);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_dm_exception_store_create, $mul.ref(0, 26)), $mul.ref(19, 1)), 99);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_dm_exception_store_create, $mul.ref(0, 26)), $mul.ref(20, 1)), 114);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_dm_exception_store_create, $mul.ref(0, 26)), $mul.ref(21, 1)), 101);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_dm_exception_store_create, $mul.ref(0, 26)), $mul.ref(22, 1)), 97);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_dm_exception_store_create, $mul.ref(0, 26)), $mul.ref(23, 1)), 116);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_dm_exception_store_create, $mul.ref(0, 26)), $mul.ref(24, 1)), 101);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_dm_exception_store_create, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.76 := $store.i8($M.76, __kstrtab_dm_exception_store_type_unregister, 100);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(1, 1)), 109);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(2, 1)), 95);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(3, 1)), 101);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(4, 1)), 120);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(5, 1)), 99);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(6, 1)), 101);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(7, 1)), 112);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(8, 1)), 116);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(9, 1)), 105);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(10, 1)), 111);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(11, 1)), 110);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(12, 1)), 95);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(13, 1)), 115);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(14, 1)), 116);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(15, 1)), 111);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(16, 1)), 114);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(17, 1)), 101);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(18, 1)), 95);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(19, 1)), 116);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(20, 1)), 121);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(21, 1)), 112);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(22, 1)), 101);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(23, 1)), 95);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(24, 1)), 117);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(25, 1)), 110);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(26, 1)), 114);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(27, 1)), 101);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(28, 1)), 103);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(29, 1)), 105);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(30, 1)), 115);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(31, 1)), 116);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(32, 1)), 101);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(33, 1)), 114);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(__kstrtab_dm_exception_store_type_unregister, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.77 := $store.i8($M.77, __kstrtab_dm_exception_store_type_register, 100);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(1, 1)), 109);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(2, 1)), 95);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(3, 1)), 101);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(4, 1)), 120);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(5, 1)), 99);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(6, 1)), 101);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(7, 1)), 112);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(8, 1)), 116);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(9, 1)), 105);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(10, 1)), 111);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(11, 1)), 110);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(12, 1)), 95);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(13, 1)), 115);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(14, 1)), 116);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(15, 1)), 111);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(16, 1)), 114);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(17, 1)), 101);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(18, 1)), 95);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(19, 1)), 116);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(20, 1)), 121);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(21, 1)), 112);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(22, 1)), 101);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(23, 1)), 95);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(24, 1)), 114);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(25, 1)), 101);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(26, 1)), 103);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(27, 1)), 105);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(28, 1)), 115);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(29, 1)), 116);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(30, 1)), 101);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(31, 1)), 114);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(__kstrtab_dm_exception_store_type_register, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.0 := $store.ref($M.0, _exception_store_types, _exception_store_types);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_exception_store_types, $mul.ref(0, 16)), $mul.ref(8, 1)), _exception_store_types);
    $M.78 := $store.i32($M.78, _lock, 0);
    $M.78 := $store.i32($M.78, $add.ref($add.ref($add.ref($add.ref(_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.78 := $store.i32($M.78, $add.ref($add.ref($add.ref($add.ref(_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref(_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref($add.ref(_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref($add.ref(_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.74);
    $M.78 := $store.i32($M.78, $add.ref($add.ref($add.ref($add.ref($add.ref(_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.78 := $store.i64($M.78, $add.ref($add.ref($add.ref($add.ref($add.ref(_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.79 := $store.i64($M.79, merge_target, 0);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(merge_target, $mul.ref(0, 216)), $mul.ref(8, 1)), dm_snapshot_merge_target_name);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(merge_target, $mul.ref(0, 216)), $mul.ref(16, 1)), __this_module);
    $M.79 := $store.i32($M.79, $add.ref($add.ref($add.ref(merge_target, $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(0, 4)), 1);
    $M.79 := $store.i32($M.79, $add.ref($add.ref($add.ref(merge_target, $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(1, 4)), 3);
    $M.79 := $store.i32($M.79, $add.ref($add.ref($add.ref(merge_target, $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(2, 4)), 0);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(merge_target, $mul.ref(0, 216)), $mul.ref(40, 1)), snapshot_ctr);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(merge_target, $mul.ref(0, 216)), $mul.ref(48, 1)), snapshot_dtr);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(merge_target, $mul.ref(0, 216)), $mul.ref(56, 1)), snapshot_merge_map);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(merge_target, $mul.ref(0, 216)), $mul.ref(64, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(merge_target, $mul.ref(0, 216)), $mul.ref(72, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(merge_target, $mul.ref(0, 216)), $mul.ref(80, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(merge_target, $mul.ref(0, 216)), $mul.ref(88, 1)), snapshot_end_io);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(merge_target, $mul.ref(0, 216)), $mul.ref(96, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(merge_target, $mul.ref(0, 216)), $mul.ref(104, 1)), snapshot_merge_presuspend);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(merge_target, $mul.ref(0, 216)), $mul.ref(112, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(merge_target, $mul.ref(0, 216)), $mul.ref(120, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(merge_target, $mul.ref(0, 216)), $mul.ref(128, 1)), snapshot_preresume);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(merge_target, $mul.ref(0, 216)), $mul.ref(136, 1)), snapshot_merge_resume);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(merge_target, $mul.ref(0, 216)), $mul.ref(144, 1)), snapshot_status);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(merge_target, $mul.ref(0, 216)), $mul.ref(152, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(merge_target, $mul.ref(0, 216)), $mul.ref(160, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(merge_target, $mul.ref(0, 216)), $mul.ref(168, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(merge_target, $mul.ref(0, 216)), $mul.ref(176, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(merge_target, $mul.ref(0, 216)), $mul.ref(184, 1)), snapshot_iterate_devices);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(merge_target, $mul.ref(0, 216)), $mul.ref(192, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref($add.ref(merge_target, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref($add.ref(merge_target, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(8, 1)), $0.ref);
    $M.79 := $store.i64($M.79, origin_target, 0);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(origin_target, $mul.ref(0, 216)), $mul.ref(8, 1)), .str.61);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(origin_target, $mul.ref(0, 216)), $mul.ref(16, 1)), __this_module);
    $M.79 := $store.i32($M.79, $add.ref($add.ref($add.ref(origin_target, $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(0, 4)), 1);
    $M.79 := $store.i32($M.79, $add.ref($add.ref($add.ref(origin_target, $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(1, 4)), 9);
    $M.79 := $store.i32($M.79, $add.ref($add.ref($add.ref(origin_target, $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(2, 4)), 0);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(origin_target, $mul.ref(0, 216)), $mul.ref(40, 1)), origin_ctr);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(origin_target, $mul.ref(0, 216)), $mul.ref(48, 1)), origin_dtr);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(origin_target, $mul.ref(0, 216)), $mul.ref(56, 1)), origin_map);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(origin_target, $mul.ref(0, 216)), $mul.ref(64, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(origin_target, $mul.ref(0, 216)), $mul.ref(72, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(origin_target, $mul.ref(0, 216)), $mul.ref(80, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(origin_target, $mul.ref(0, 216)), $mul.ref(88, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(origin_target, $mul.ref(0, 216)), $mul.ref(96, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(origin_target, $mul.ref(0, 216)), $mul.ref(104, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(origin_target, $mul.ref(0, 216)), $mul.ref(112, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(origin_target, $mul.ref(0, 216)), $mul.ref(120, 1)), origin_postsuspend);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(origin_target, $mul.ref(0, 216)), $mul.ref(128, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(origin_target, $mul.ref(0, 216)), $mul.ref(136, 1)), origin_resume);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(origin_target, $mul.ref(0, 216)), $mul.ref(144, 1)), origin_status);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(origin_target, $mul.ref(0, 216)), $mul.ref(152, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(origin_target, $mul.ref(0, 216)), $mul.ref(160, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(origin_target, $mul.ref(0, 216)), $mul.ref(168, 1)), origin_merge);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(origin_target, $mul.ref(0, 216)), $mul.ref(176, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(origin_target, $mul.ref(0, 216)), $mul.ref(184, 1)), origin_iterate_devices);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(origin_target, $mul.ref(0, 216)), $mul.ref(192, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref($add.ref(origin_target, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref($add.ref(origin_target, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(8, 1)), $0.ref);
    $M.79 := $store.i64($M.79, snapshot_target, 0);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(snapshot_target, $mul.ref(0, 216)), $mul.ref(8, 1)), .str.60);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(snapshot_target, $mul.ref(0, 216)), $mul.ref(16, 1)), __this_module);
    $M.79 := $store.i32($M.79, $add.ref($add.ref($add.ref(snapshot_target, $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(0, 4)), 1);
    $M.79 := $store.i32($M.79, $add.ref($add.ref($add.ref(snapshot_target, $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(1, 4)), 13);
    $M.79 := $store.i32($M.79, $add.ref($add.ref($add.ref(snapshot_target, $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(2, 4)), 0);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(snapshot_target, $mul.ref(0, 216)), $mul.ref(40, 1)), snapshot_ctr);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(snapshot_target, $mul.ref(0, 216)), $mul.ref(48, 1)), snapshot_dtr);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(snapshot_target, $mul.ref(0, 216)), $mul.ref(56, 1)), snapshot_map);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(snapshot_target, $mul.ref(0, 216)), $mul.ref(64, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(snapshot_target, $mul.ref(0, 216)), $mul.ref(72, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(snapshot_target, $mul.ref(0, 216)), $mul.ref(80, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(snapshot_target, $mul.ref(0, 216)), $mul.ref(88, 1)), snapshot_end_io);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(snapshot_target, $mul.ref(0, 216)), $mul.ref(96, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(snapshot_target, $mul.ref(0, 216)), $mul.ref(104, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(snapshot_target, $mul.ref(0, 216)), $mul.ref(112, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(snapshot_target, $mul.ref(0, 216)), $mul.ref(120, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(snapshot_target, $mul.ref(0, 216)), $mul.ref(128, 1)), snapshot_preresume);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(snapshot_target, $mul.ref(0, 216)), $mul.ref(136, 1)), snapshot_resume);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(snapshot_target, $mul.ref(0, 216)), $mul.ref(144, 1)), snapshot_status);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(snapshot_target, $mul.ref(0, 216)), $mul.ref(152, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(snapshot_target, $mul.ref(0, 216)), $mul.ref(160, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(snapshot_target, $mul.ref(0, 216)), $mul.ref(168, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(snapshot_target, $mul.ref(0, 216)), $mul.ref(176, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(snapshot_target, $mul.ref(0, 216)), $mul.ref(184, 1)), snapshot_iterate_devices);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(snapshot_target, $mul.ref(0, 216)), $mul.ref(192, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref($add.ref(snapshot_target, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref($add.ref(snapshot_target, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(8, 1)), $0.ref);
    $M.13 := $0.ref;
    $M.0 := $store.i32($M.0, _pending_exceptions_done, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(_pending_exceptions_done, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(_pending_exceptions_done, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(_pending_exceptions_done, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(_pending_exceptions_done, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(_pending_exceptions_done, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(_pending_exceptions_done, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(_pending_exceptions_done, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.43);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(_pending_exceptions_done, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(_pending_exceptions_done, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(_pending_exceptions_done, $mul.ref(0, 88)), $mul.ref(72, 1)), $mul.ref(0, 1)), $add.ref(_pending_exceptions_done, $mul.ref(72, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(_pending_exceptions_done, $mul.ref(0, 88)), $mul.ref(72, 1)), $mul.ref(8, 1)), $add.ref(_pending_exceptions_done, $mul.ref(72, 1)));
    $M.23 := 0;
    call {:si_unique_call 2270} {:cexpr "_pending_exceptions_done_count"} boogie_si_record_i64(0);
    $M.78 := $store.i32($M.78, _pending_exceptions_done_spinlock, 0);
    $M.78 := $store.i32($M.78, $add.ref($add.ref($add.ref($add.ref(_pending_exceptions_done_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.78 := $store.i32($M.78, $add.ref($add.ref($add.ref($add.ref(_pending_exceptions_done_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref(_pending_exceptions_done_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref($add.ref(_pending_exceptions_done_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(_pending_exceptions_done_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(_pending_exceptions_done_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref($add.ref(_pending_exceptions_done_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.42);
    $M.78 := $store.i32($M.78, $add.ref($add.ref($add.ref($add.ref($add.ref(_pending_exceptions_done_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.78 := $store.i64($M.78, $add.ref($add.ref($add.ref($add.ref($add.ref(_pending_exceptions_done_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.8 := $0.ref;
    $M.14 := $0.ref;
    $M.0 := $store.i64($M.0, _origins_lock, 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(_origins_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(_origins_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(_origins_lock, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(_origins_lock, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(_origins_lock, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(_origins_lock, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(_origins_lock, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(_origins_lock, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(_origins_lock, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(_origins_lock, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(_origins_lock, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(_origins_lock, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(_origins_lock, $mul.ref(0, 160)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_origins_lock, $mul.ref(0, 160)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(_origins_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(_origins_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(_origins_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(_origins_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(_origins_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(_origins_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.6 := $0.ref;
    $M.0 := $store.i32($M.0, dm_kcopyd_throttle, 100);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(dm_kcopyd_throttle, $mul.ref(0, 20)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(dm_kcopyd_throttle, $mul.ref(0, 20)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(dm_kcopyd_throttle, $mul.ref(0, 20)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(dm_kcopyd_throttle, $mul.ref(0, 20)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, dm_snapshot_merge_target_name, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(dm_snapshot_merge_target_name, $mul.ref(0, 15)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(dm_snapshot_merge_target_name, $mul.ref(0, 15)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(dm_snapshot_merge_target_name, $mul.ref(0, 15)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(dm_snapshot_merge_target_name, $mul.ref(0, 15)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(dm_snapshot_merge_target_name, $mul.ref(0, 15)), $mul.ref(5, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(dm_snapshot_merge_target_name, $mul.ref(0, 15)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(dm_snapshot_merge_target_name, $mul.ref(0, 15)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(dm_snapshot_merge_target_name, $mul.ref(0, 15)), $mul.ref(8, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(dm_snapshot_merge_target_name, $mul.ref(0, 15)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(dm_snapshot_merge_target_name, $mul.ref(0, 15)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(dm_snapshot_merge_target_name, $mul.ref(0, 15)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(dm_snapshot_merge_target_name, $mul.ref(0, 15)), $mul.ref(12, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(dm_snapshot_merge_target_name, $mul.ref(0, 15)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(dm_snapshot_merge_target_name, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, __kstrtab_dm_snap_cow, 100);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_dm_snap_cow, $mul.ref(0, 12)), $mul.ref(1, 1)), 109);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_dm_snap_cow, $mul.ref(0, 12)), $mul.ref(2, 1)), 95);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_dm_snap_cow, $mul.ref(0, 12)), $mul.ref(3, 1)), 115);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_dm_snap_cow, $mul.ref(0, 12)), $mul.ref(4, 1)), 110);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_dm_snap_cow, $mul.ref(0, 12)), $mul.ref(5, 1)), 97);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_dm_snap_cow, $mul.ref(0, 12)), $mul.ref(6, 1)), 112);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_dm_snap_cow, $mul.ref(0, 12)), $mul.ref(7, 1)), 95);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_dm_snap_cow, $mul.ref(0, 12)), $mul.ref(8, 1)), 99);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_dm_snap_cow, $mul.ref(0, 12)), $mul.ref(9, 1)), 111);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_dm_snap_cow, $mul.ref(0, 12)), $mul.ref(10, 1)), 119);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_dm_snap_cow, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.57 := 0;
    call {:si_unique_call 2271} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.55 := 0;
    call {:si_unique_call 2272} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.60 := 0;
    call {:si_unique_call 2273} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.59 := 0;
    call {:si_unique_call 2274} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 2275} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.61 := 0;
    call {:si_unique_call 2276} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.58 := 0;
    call {:si_unique_call 2277} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.64 := $0.ref;
    $M.51 := 0;
    call {:si_unique_call 2278} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 2279} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.50 := 0;
    call {:si_unique_call 2280} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.62 := $0.ref;
    $M.52 := 0;
    call {:si_unique_call 2281} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.63 := $0.ref;
    $M.69 := $0.ref;
    $M.49 := 0;
    call {:si_unique_call 2282} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.45 := $0.ref;
    $M.66 := $0.ref;
    $M.47 := 0;
    call {:si_unique_call 2283} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.43 := $0.ref;
    $M.54 := 0;
    call {:si_unique_call 2284} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.44 := $0.ref;
    $M.53 := 0;
    call {:si_unique_call 2285} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 2286} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.68 := $0.ref;
    $M.67 := $0.ref;
    $M.65 := $0.ref;
    $M.1 := 0;
    call {:si_unique_call 2287} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.0 := $store.i8($M.0, .str.3, 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(4, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(5, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(14, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(15, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(17, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(19, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(20, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(21, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(22, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(23, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(24, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(25, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(26, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(28, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(29, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(30, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(31, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(32, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(33, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(34, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(35, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(36, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(37, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 39)), $mul.ref(38, 1)), 0);
    $M.0 := $store.i8($M.0, .str.4, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(4, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(17, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(19, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(20, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(21, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(23, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(24, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(25, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(26, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(27, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(28, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(29, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(30, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(31, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(32, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 34)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, .str.5, 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, .str.6, 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, .str.7, 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(11, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(12, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(14, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(19, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(20, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(22, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(23, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(24, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(25, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(26, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(27, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(28, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, .str.8, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(4, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(17, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(18, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(20, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(21, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(22, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(23, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(24, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(25, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(26, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(27, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(28, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(29, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(30, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(31, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(32, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(33, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(34, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 36)), $mul.ref(35, 1)), 0);
    $M.0 := $store.i8($M.0, .str.9, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(4, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(17, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(18, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(20, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(21, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(22, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(23, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(24, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(25, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(26, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(27, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(28, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(29, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(30, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(31, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(32, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(33, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(34, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(35, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(36, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(37, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(38, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 40)), $mul.ref(39, 1)), 0);
    $M.0 := $store.i8($M.0, .str.78, 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 19)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 19)), $mul.ref(2, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 19)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 19)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 19)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 19)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 19)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 19)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 19)), $mul.ref(9, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 19)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 19)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 19)), $mul.ref(12, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 19)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 19)), $mul.ref(14, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 19)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 19)), $mul.ref(16, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 19)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(1, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(2, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(4, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(8, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(19, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(20, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(22, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(24, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(25, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(26, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(27, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(28, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(29, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, .str.1, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(1, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(2, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(4, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(8, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(19, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(20, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(21, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(22, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(23, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(24, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(25, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(26, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(28, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(29, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(30, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(31, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(32, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(33, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(34, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(35, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(36, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(37, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(38, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(39, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(40, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(41, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(42, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(43, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(44, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(45, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(46, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(47, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 49)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, .str.2, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 23)), $mul.ref(1, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 23)), $mul.ref(2, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 23)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 23)), $mul.ref(4, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 23)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 23)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 23)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 23)), $mul.ref(8, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 23)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 23)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 23)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 23)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 23)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 23)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 23)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 23)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 23)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 23)), $mul.ref(18, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 23)), $mul.ref(19, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 23)), $mul.ref(20, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 23)), $mul.ref(21, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.16, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(2, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(10, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(14, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(15, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(16, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(17, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(21, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(22, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(23, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(24, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(25, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(26, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(27, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, .str.17, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(16, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(19, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(22, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(23, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(24, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(25, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(26, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(27, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(28, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(29, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(30, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(31, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(32, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(33, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(34, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(35, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(36, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(37, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(38, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(39, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(40, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(41, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 43)), $mul.ref(42, 1)), 0);
    $M.0 := $store.i8($M.0, .str.18, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(7, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(14, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(20, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(21, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(22, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.19, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 22)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 22)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 22)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 22)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 22)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 22)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 22)), $mul.ref(7, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 22)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 22)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 22)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 22)), $mul.ref(11, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 22)), $mul.ref(12, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 22)), $mul.ref(13, 1)), 87);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 22)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 22)), $mul.ref(15, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 22)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 22)), $mul.ref(17, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 22)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 22)), $mul.ref(19, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 22)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.20, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(2, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(6, 1)), 39);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(17, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(18, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(20, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(22, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(23, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(24, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(25, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(26, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(27, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(28, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(29, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(30, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, .str.23, 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(12, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(19, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(21, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(22, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(23, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(24, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(25, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(26, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(27, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(28, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(29, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(30, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(31, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(32, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(33, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(34, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 36)), $mul.ref(35, 1)), 0);
    $M.0 := $store.i8($M.0, .str.24, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(2, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(16, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(17, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(18, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(19, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(20, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(21, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(22, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(23, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(24, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(25, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(26, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(28, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(29, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, .str.25, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(2, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(12, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(19, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(21, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(22, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(23, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(24, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(25, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(26, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(27, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(28, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(29, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(30, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(31, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(32, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(33, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(34, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(35, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(36, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(37, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(38, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(39, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(40, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(41, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(42, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(43, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(44, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(45, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(46, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(47, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(48, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 50)), $mul.ref(49, 1)), 0);
    $M.0 := $store.i8($M.0, .str.27, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(5, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(12, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(18, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(19, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(20, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(22, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(23, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(24, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(25, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(26, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(27, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(28, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(29, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(30, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(31, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(32, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(33, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(34, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(35, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(36, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(37, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(38, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(39, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 41)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, .str.28, 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(13, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(18, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(19, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(20, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(23, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(24, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(25, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(26, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(27, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(28, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(29, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(30, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(31, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, .str.30, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(1, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(2, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(4, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(8, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.31, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(5, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(11, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(17, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(18, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(19, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(20, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(21, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(22, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(23, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(24, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(25, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(26, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(27, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(28, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(29, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(30, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(31, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(32, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(33, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(34, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(35, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(36, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(37, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(38, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(39, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(40, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(41, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(42, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(43, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(44, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(45, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(46, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(47, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(48, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(49, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(50, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(51, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(52, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(53, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(54, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(55, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 57)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i8($M.0, .str.32, 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(1, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(7, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(19, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(20, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(21, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(22, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(24, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(25, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(26, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(27, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(28, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(29, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, .str.33, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(5, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(10, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(17, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(19, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(22, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(24, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(25, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(26, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(28, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(29, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(30, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(31, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(32, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(33, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(34, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(35, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(36, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(37, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(38, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(39, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(40, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(41, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(42, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(43, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(44, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(45, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(46, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(47, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(48, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(49, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(50, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(51, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(52, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(53, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(54, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(55, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(56, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 58)), $mul.ref(57, 1)), 0);
    $M.91 := $store.i8($M.91, .str.59, 37);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(.str.59, $mul.ref(0, 3)), $mul.ref(1, 1)), 115);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(.str.59, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, .str.56, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(3, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(6, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(15, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(18, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(19, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(20, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(21, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(22, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(23, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(24, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(25, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(26, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(27, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(28, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(29, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(30, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(31, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(32, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(33, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(34, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(35, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(36, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 38)), $mul.ref(37, 1)), 0);
    $M.0 := $store.i8($M.0, .str.57, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(16, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(19, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(22, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(23, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(24, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(25, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(26, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(27, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(28, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(29, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(30, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(31, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(32, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(33, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(34, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(35, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(36, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(37, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(38, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(39, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 41)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, .str.58, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(7, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(14, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(20, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(21, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(22, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.79, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.81, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 11)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 11)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 11)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 11)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 11)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 11)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 11)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 11)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 11)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    call {:si_unique_call 2288} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 560635);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.9, $M.10, $M.11, $M.1, $M.31, $CurrAddr, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35, assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i10 := $eq.ref(persistent_ctr, $p0);
    assume {:branchcond $i10} true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i10 == 1);
    $i9 := $eq.ref(transient_ctr, $p0);
    assume {:branchcond $i9} true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i9 == 1);
    $i8 := $eq.ref(origin_ctr, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i8 == 1);
    $i7 := $eq.ref(snapshot_ctr, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2289} $i2 := snapshot_ctr($p1, arg1, arg2);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    $r := $i2;
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i8 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2290} $i4 := origin_ctr($p3, arg1, arg2);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    $r := $i4;
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i9 == 1;
    call {:si_unique_call 2291} $i5 := transient_ctr(arg, arg1, arg2);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    $r := $i5;
    return;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    call {:si_unique_call 2292} $i6 := persistent_ctr(arg, arg1, arg2);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    $r := $i6;
    return;

  SeqInstr_406:
    assume !assertsPassed;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 561667);

procedure devirtbounce.1(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 562699);

procedure devirtbounce.2(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.9, $M.10, $M.0, $M.11, $M.1, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr, $M.31, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35, assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i20 := $eq.ref(do_metadata, $p0);
    assume true;
    goto $bb13, $bb25;

  $bb25:
    assume !($i20 == 1);
    $i19 := $eq.ref(persistent_drop_snapshot, $p0);
    assume true;
    goto $bb12, $bb24;

  $bb24:
    assume !($i19 == 1);
    $i18 := $eq.ref(persistent_dtr, $p0);
    assume true;
    goto $bb11, $bb23;

  $bb23:
    assume !($i18 == 1);
    $i17 := $eq.ref(transient_dtr, $p0);
    assume true;
    goto $bb10, $bb22;

  $bb22:
    assume !($i17 == 1);
    $i16 := $eq.ref(snapshot_merge_resume, $p0);
    assume true;
    goto $bb9, $bb21;

  $bb21:
    assume !($i16 == 1);
    $i15 := $eq.ref(snapshot_merge_presuspend, $p0);
    assume {:branchcond $i15} true;
    goto $bb8, $bb20;

  $bb20:
    assume !($i15 == 1);
    $i14 := $eq.ref(origin_resume, $p0);
    assume {:branchcond $i14} true;
    goto $bb7, $bb19;

  $bb19:
    assume !($i14 == 1);
    $i13 := $eq.ref(origin_postsuspend, $p0);
    assume true;
    goto $bb6, $bb18;

  $bb18:
    assume !($i13 == 1);
    $i12 := $eq.ref(origin_dtr, $p0);
    assume true;
    goto $bb5, $bb17;

  $bb17:
    assume !($i12 == 1);
    $i11 := $eq.ref(snapshot_resume, $p0);
    assume true;
    goto $bb4, $bb16;

  $bb16:
    assume !($i11 == 1);
    $i10 := $eq.ref(snapshot_dtr, $p0);
    assume {:branchcond $i10} true;
    goto $bb3, $bb15;

  $bb15:
    assume !($i10 == 1);
    $i9 := $eq.ref(dm_exception_store_destroy, $p0);
    assume {:branchcond $i9} true;
    goto $bb2, $bb14;

  $bb14:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    call {:si_unique_call 2293} dm_exception_store_destroy(arg);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    return;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i10 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2294} snapshot_dtr($p1);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    return;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i11 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2295} snapshot_resume($p2);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2296} origin_dtr($p3);
    return;

  $bb6:
    assume $i13 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2297} origin_postsuspend($p4);
    return;

  $bb7:
    assume $i14 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2298} origin_resume($p5);
    return;

  $bb8:
    assume $i15 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2299} snapshot_merge_presuspend($p6);
    return;

  $bb9:
    assume $i16 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2300} snapshot_merge_resume($p7);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    return;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i17 == 1;
    call {:si_unique_call 2301} transient_dtr(arg);
    return;

  $bb11:
    assume $i18 == 1;
    call {:si_unique_call 2302} persistent_dtr(arg);
    return;

  $bb12:
    assume $i19 == 1;
    call {:si_unique_call 2303} persistent_drop_snapshot(arg);
    return;

  $bb13:
    assume $i20 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2304} do_metadata($p8);
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 563731);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, $M.0, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35, $CurrAddr, assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i16 := $eq.ref(persistent_prepare_merge, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i16 == 1);
    $i15 := $eq.ref(persistent_read_metadata, $p0);
    assume {:branchcond $i15} true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i15 == 1);
    $i14 := $eq.ref(transient_read_metadata, $p0);
    assume {:branchcond $i14} true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i14 == 1);
    $i13 := $eq.ref(origin_iterate_devices, $p0);
    assume true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i13 == 1);
    $i12 := $eq.ref(snapshot_iterate_devices, $p0);
    assume true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume false;
    return;

  $bb2:
    assume $i12 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2305} $i3 := snapshot_iterate_devices($p1, $p2, arg2);
    $r := $i3;
    return;

  $bb3:
    assume $i13 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2306} $i6 := origin_iterate_devices($p4, $p5, arg2);
    $r := $i6;
    return;

  $bb4:
    assume $i14 == 1;
    call {:si_unique_call 2307} $i7 := transient_read_metadata(arg, arg1, arg2);
    $r := $i7;
    return;

  $bb5:
    assume $i15 == 1;
    call {:si_unique_call 2308} $i8 := persistent_read_metadata(arg, arg1, arg2);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    $r := $i8;
    return;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i16 == 1;
    $p9 := $bitcast.ref.ref(arg1);
    $p10 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 2309} $i11 := persistent_prepare_merge(arg, $p9, $p10);
    $r := $i11;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 564763);

procedure devirtbounce.4(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 565795);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 566827);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.32, $M.33, $M.36, $M.37, $M.38, $M.9, $M.10, $M.11, $M.23, $CurrAddr, $M.1, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.31, $M.41, $M.34, $M.35, assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i10 := $eq.ref(persistent_usage, $p0);
    assume {:branchcond $i10} true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i10 == 1);
    $i9 := $eq.ref(persistent_commit_exception, $p0);
    assume {:branchcond $i9} true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i9 == 1);
    $i8 := $eq.ref(transient_usage, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i8 == 1);
    $i7 := $eq.ref(transient_commit_exception, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg1);
    $p2 := $bitcast.ref.ref(arg2);
    $p3 := $bitcast.ref.ref(arg3);
    call {:si_unique_call 2310} transient_commit_exception(arg, $p1, $p2, $p3);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    return;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i8 == 1;
    call {:si_unique_call 2311} transient_usage(arg, arg1, arg2, arg3);
    return;

  $bb4:
    assume $i9 == 1;
    $p4 := $bitcast.ref.ref(arg1);
    $p5 := $bitcast.ref.ref(arg2);
    $p6 := $bitcast.ref.ref(arg3);
    call {:si_unique_call 2312} persistent_commit_exception(arg, $p4, $p5, $p6);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    return;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    call {:si_unique_call 2313} persistent_usage(arg, arg1, arg2, arg3);
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 567859);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32, arg2: ref, arg3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32, arg2: ref, arg3: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(persistent_status, $p0);
    assume {:branchcond $i4} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(transient_status, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 2314} $i1 := transient_status(arg, arg1, arg2, arg3);
    $r := $i1;
    return;

  $bb3:
    assume $i4 == 1;
    call {:si_unique_call 2315} $i2 := persistent_status(arg, arg1, arg2, arg3);
    $r := $i2;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 568891);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 569923);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 570955);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, $M.0, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35, $CurrAddr, assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i20 := $eq.ref(persistent_prepare_merge, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i20 == 1);
    $i19 := $eq.ref(persistent_read_metadata, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i19 == 1);
    $i18 := $eq.ref(transient_read_metadata, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i18 == 1);
    $i17 := $eq.ref(origin_iterate_devices, $p0);
    assume true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i17 == 1);
    $i16 := $eq.ref(snapshot_iterate_devices, $p0);
    assume true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume false;
    return;

  $bb2:
    assume $i16 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    $p3 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 2316} $i4 := snapshot_iterate_devices($p1, $p2, $p3);
    $r := $i4;
    return;

  $bb3:
    assume $i17 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    $p7 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 2317} $i8 := origin_iterate_devices($p5, $p6, $p7);
    $r := $i8;
    return;

  $bb4:
    assume $i18 == 1;
    $p9 := $bitcast.ref.ref(arg1);
    $p10 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 2318} $i11 := transient_read_metadata(arg, $p9, $p10);
    $r := $i11;
    return;

  $bb5:
    assume $i19 == 1;
    $p12 := $bitcast.ref.ref(arg1);
    $p13 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 2319} $i14 := persistent_read_metadata(arg, $p12, $p13);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    $r := $i14;
    return;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i20 == 1;
    call {:si_unique_call 2320} $i15 := persistent_prepare_merge(arg, arg1, arg2);
    $r := $i15;
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 571987);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 573019);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 574051);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.20, $M.21, $M.22, $M.17, $M.18, $M.19, $M.9, $M.10, $M.11, $M.16, $CurrAddr, assertsPassed, $M.31, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i16 := $eq.ref(persistent_prepare_exception, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i16 == 1);
    $i15 := $eq.ref(transient_prepare_exception, $p0);
    assume {:branchcond $i15} true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i15 == 1);
    $i14 := $eq.ref(snapshot_merge_map, $p0);
    assume {:branchcond $i14} true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i14 == 1);
    $i13 := $eq.ref(origin_map, $p0);
    assume true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i13 == 1);
    $i12 := $eq.ref(snapshot_map, $p0);
    assume true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume false;
    return;

  $bb2:
    assume $i12 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2321} $i3 := snapshot_map($p1, $p2);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    $r := $i3;
    return;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i13 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2322} $i6 := origin_map($p4, $p5);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    $r := $i6;
    return;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i14 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2323} $i9 := snapshot_merge_map($p7, $p8);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    $r := $i9;
    return;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i15 == 1;
    call {:si_unique_call 2324} $i10 := transient_prepare_exception(arg, arg1);
    $r := $i10;
    return;

  $bb6:
    assume $i16 == 1;
    call {:si_unique_call 2325} $i11 := persistent_prepare_exception(arg, arg1);
    $r := $i11;
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 575083);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref);



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 576115);

procedure devirtbounce.15(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(mempool_free_slab, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2326} mempool_free_slab($p1, $p2);
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 577147);

procedure devirtbounce.16(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 578179);

procedure devirtbounce.17(funcPtr: ref, arg: i64, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.17(funcPtr: ref, arg: i64, arg1: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 579211);

procedure devirtbounce.18(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, $M.0, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35, $CurrAddr, assertsPassed;



implementation devirtbounce.18(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i25 := $eq.ref(persistent_prepare_merge, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i25 == 1);
    $i24 := $eq.ref(persistent_read_metadata, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i24 == 1);
    $i23 := $eq.ref(transient_read_metadata, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i23 == 1);
    $i22 := $eq.ref(origin_iterate_devices, $p0);
    assume true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i22 == 1);
    $i21 := $eq.ref(snapshot_iterate_devices, $p0);
    assume true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume false;
    return;

  $bb2:
    assume $i21 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    $p3 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 2327} $i4 := snapshot_iterate_devices($p1, $p2, $p3);
    $r := $i4;
    return;

  $bb3:
    assume $i22 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    $p7 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 2328} $i8 := origin_iterate_devices($p5, $p6, $p7);
    $r := $i8;
    return;

  $bb4:
    assume $i23 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    $p11 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 2329} $i12 := transient_read_metadata($p9, $p10, $p11);
    $r := $i12;
    return;

  $bb5:
    assume $i24 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    $p15 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 2330} $i16 := persistent_read_metadata($p13, $p14, $p15);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    $r := $i16;
    return;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i25 == 1;
    $p17 := $bitcast.ref.ref(arg);
    $p18 := $bitcast.ref.ref(arg1);
    $p19 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 2331} $i20 := persistent_prepare_merge($p17, $p18, $p19);
    $r := $i20;
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 580243);

procedure devirtbounce.19(funcPtr: ref, arg: ref, arg1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $M.11, $M.23, $M.1, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr, $M.31, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35, assertsPassed;



implementation devirtbounce.19(funcPtr: ref, arg: ref, arg1: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i1;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(full_bio_end_io, $p0);
    assume {:branchcond $i3} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i3 == 1);
    $i2 := $eq.ref(commit_callback, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2332} commit_callback(arg, arg1);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    return;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2333} full_bio_end_io($p1, arg1);
    return;
}



const devirtbounce.20: ref;

axiom devirtbounce.20 == $sub.ref(0, 581275);

procedure devirtbounce.20(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.20(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.21: ref;

axiom devirtbounce.21 == $sub.ref(0, 582307);

procedure devirtbounce.21(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation devirtbounce.21(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(dm_add_exception, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2334} $i1 := dm_add_exception(arg, arg1, arg2);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    $r := $i1;
    return;

  SeqInstr_448:
    assume !assertsPassed;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.73, $M.0, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.13, $M.23, $M.8, $M.14, $M.6, $M.80, $M.57, $M.55, $M.60, $M.59, $M.56, $M.61, $M.58, $M.64, $M.51, $M.48, $M.50, $M.62, $M.52, $M.63, $M.69, $M.49, $M.45, $M.66, $M.47, $M.43, $M.54, $M.44, $M.53, $M.46, $M.68, $M.67, $M.65, $M.1, $M.91, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 2335} __SMACK_static_init();
    call {:si_unique_call 2336} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.0, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.3, $M.55, $M.9, $M.10, $M.56, $M.11, $M.57, $M.58, $M.59, $M.43, $M.44, $M.45, $M.60, $M.61, $M.1, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.13, $M.23, $M.8, $M.14, $M.6, $M.80, $M.64, $M.62, $M.63, $M.69, $M.66, $M.68, $M.67, $M.65, $M.91, $CurrAddr, $M.31, $M.20, $M.21, $M.22, $M.17, $M.18, $M.19, $M.32, $M.33, $M.16, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation __find_exception_store_type_loop_$bb4(in_$p0: ref, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p7: ref) returns (out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p7: ref)
{

  entry:
    out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p7 := in_$p8, in_$p9, in_$i10, in_$i11, in_$p12, in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$i20, in_$i21, in_$p7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_38;

  $bb10:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$p7 := out_$p18;
    goto $bb10_dummy;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i64(out_$i20, $p2i.ref.i64(_exception_store_types));
    goto corral_source_split_55;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_54;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p17, $mul.ref($sub.ref(0, 96), 112)), $mul.ref(96, 1));
    goto corral_source_split_53;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p17, $mul.ref($sub.ref(0, 96), 112));
    goto corral_source_split_52;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    out_$p17 := $bitcast.ref.ref(out_$p16);
    goto corral_source_split_51;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_50;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref($add.ref(out_$p7, $mul.ref(0, 112)), $mul.ref(96, 1)), $mul.ref(0, 1));
    goto corral_source_split_49;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    out_$p12 := out_$p7;
    assume true;
    goto $bb7;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i10, 0);
    goto corral_source_split_43;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} out_$i10 := strcmp(in_$p0, out_$p9);
    call {:si_unique_call 7} {:cexpr "tmp"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_42;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_41;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(out_$p7, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_40;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p7 := __find_exception_store_type_loop_$bb4(in_$p0, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p7);
    return;

  exit:
    return;
}



procedure __find_exception_store_type_loop_$bb4(in_$p0: ref, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p7: ref) returns (out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p7: ref);



implementation get_type_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$p14: ref, in_$p9: ref, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$p14: ref, out_$p9: ref, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref)
{

  entry:
    out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p9, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p21 := in_$p10, in_$p11, in_$i12, in_$i13, in_$p14, in_$p9, in_$i16, in_$i17, in_$p18, in_$i19, in_$i20, in_$p21;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_223;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    out_$p9 := out_$p10;
    goto corral_source_split_238_dummy;

  $bb13:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p11, 0);
    goto corral_source_split_238;

  $bb11:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    out_$p14 := out_$p10;
    assume true;
    goto $bb11;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i64(out_$i12, 0);
    goto corral_source_split_230;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(out_$p11);
    goto corral_source_split_229;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} out_$p11 := strrchr(in_$p5, 45);
    goto corral_source_split_228;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_227;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    out_$p10 := out_$p18;
    goto $bb9;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    out_$p10 := out_$p9;
    goto $bb9;

  $bb14:
    assume out_$i17 == 1;
    goto corral_source_split_240;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_225;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} out_$i16 := __request_module.i1.ref.ref(1, .str.76, in_$p5);
    call {:si_unique_call 42} {:cexpr "tmp"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_224;

  $bb16:
    assume out_$i20 == 1;
    goto corral_source_split_247;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    out_$p21 := out_$p18;
    assume true;
    goto $bb16;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i64(out_$i19, 0);
    goto corral_source_split_245;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_244;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} out_$p18 := _get_exception_store_type(in_$p0);
    goto corral_source_split_243;

  $bb15:
    assume !(out_$i17 == 1);
    goto corral_source_split_242;

  corral_source_split_238_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p9, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p21 := get_type_loop_$bb8(in_$p0, in_$p5, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p9, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p21);
    return;

  exit:
    return;
}



procedure get_type_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$p14: ref, in_$p9: ref, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$p14: ref, out_$p9: ref, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref);
  modifies $M.0, $M.1;



implementation snapshot_dtr_loop_$bb24()
{

  entry:
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb24_dummy;

  $bb24_dummy:
    call {:si_unique_call 1} snapshot_dtr_loop_$bb24();
    return;

  exit:
    return;
}



procedure snapshot_dtr_loop_$bb24();



implementation {:SIextraRecBound 16} snapshot_dtr_loop_$bb20(in_$p5: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i64, in_$i44: i64, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$i35: i32) returns (out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i64, out_$i44: i64, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$i35: i32)
{

  entry:
    out_$p36, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i35 := in_$p36, in_$p37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i35;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_880;

  $bb26:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i35 := out_$i46;
    goto $bb26_dummy;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    out_$i47 := $sle.i32(out_$i46, 15);
    goto corral_source_split_896;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i35, 1);
    call {:si_unique_call 182} {:cexpr "i"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_895;

  $bb23:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i64(out_$i44, 0);
    goto corral_source_split_891;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} out_$i44 := ldv__builtin_expect(out_$i43, 0);
    call {:si_unique_call 180} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i44);
    goto corral_source_split_890;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i32.i64(out_$i42);
    goto corral_source_split_889;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i1.i32(out_$i41);
    goto corral_source_split_888;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, 0);
    goto corral_source_split_887;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} out_$i40 := hlist_empty(out_$p39);
    call {:si_unique_call 178} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_886;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(out_$p37, $mul.ref(out_$i38, 8));
    goto corral_source_split_885;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i35);
    goto corral_source_split_884;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p36);
    goto corral_source_split_883;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p5, $mul.ref(0, 616)), $mul.ref(432, 1));
    goto corral_source_split_882;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb26_dummy:
    call {:si_unique_call 1} out_$p36, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i35 := snapshot_dtr_loop_$bb20(in_$p5, out_$p36, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i35);
    return;

  exit:
    return;
}



procedure snapshot_dtr_loop_$bb20(in_$p5: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i64, in_$i44: i64, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$i35: i32) returns (out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i64, out_$i44: i64, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$i35: i32);



implementation snapshot_dtr_loop_$bb15(in_$p30: ref, in_$i33: i32, in_$i34: i1) returns (out_$i33: i32, out_$i34: i1)
{

  entry:
    out_$i33, out_$i34 := in_$i33, in_$i34;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume {:verifier.code 0} true;
    assume out_$i34 == 1;
    goto $bb17_dummy;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i33, 0);
    goto corral_source_split_874;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} out_$i33 := atomic_read(in_$p30);
    call {:si_unique_call 175} {:cexpr "tmp"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_873;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} msleep(1);
    goto corral_source_split_872;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i33, out_$i34 := snapshot_dtr_loop_$bb15(in_$p30, out_$i33, out_$i34);
    return;

  exit:
    return;
}



procedure snapshot_dtr_loop_$bb15(in_$p30: ref, in_$i33: i32, in_$i34: i1) returns (out_$i33: i32, out_$i34: i1);



implementation __lookup_dm_origin_loop_$bb4(in_$p0: ref, in_$i11: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p13: ref) returns (out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p13: ref)
{

  entry:
    out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p13 := in_$p14, in_$p15, in_$p16, in_$p17, in_$i18, in_$i19, in_$p20, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$i28, in_$i29, in_$p13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1429;

  $bb10:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$p13 := out_$p26;
    goto $bb10_dummy;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i28, in_$i11);
    goto corral_source_split_1448;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_1447;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p25, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_1446;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p25, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_1445;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_1444;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_1443;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p13, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1442;

  $bb7:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    out_$p20 := out_$p13;
    assume true;
    goto $bb7;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i18, 0);
    goto corral_source_split_1436;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} out_$i18 := bdev_equal(out_$p17, in_$p0);
    call {:si_unique_call 302} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_1435;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_1434;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1433;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_1432;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1431;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p13 := __lookup_dm_origin_loop_$bb4(in_$p0, in_$i11, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p13);
    return;

  exit:
    return;
}



procedure __lookup_dm_origin_loop_$bb4(in_$p0: ref, in_$i11: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p13: ref) returns (out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p13: ref);



implementation __find_snapshots_sharing_cow_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i20: i64, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$p46: ref, in_$p47: ref, in_$i48: i32, in_$p49: ref, in_$i50: i1, in_$i51: i64, in_$i52: i1, in_$i53: i64, in_$i54: i1, in_$i55: i32, in_$i45: i32, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$i23: i32, in_$p24: ref, in_$i64: i32) returns (out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$p46: ref, out_$p47: ref, out_$i48: i32, out_$p49: ref, out_$i50: i1, out_$i51: i64, out_$i52: i1, out_$i53: i64, out_$i54: i1, out_$i55: i32, out_$i45: i32, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$i23: i32, out_$p24: ref, out_$i64: i32)
{

  entry:
    out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i45, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i23, out_$p24, out_$i64 := in_$p25, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$p37, in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$i43, in_$i44, in_$p46, in_$p47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i45, in_$p57, in_$p58, in_$p59, in_$p60, in_$p61, in_$i62, in_$i63, in_$i23, in_$p24, in_$i64;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1481;

  $bb29:
    assume out_$i63 == 1;
    assume {:verifier.code 0} true;
    out_$i23, out_$p24 := out_$i45, out_$p60;
    goto $bb29_dummy;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    out_$i64 := out_$i45;
    assume true;
    goto $bb29;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i64(out_$i62, in_$i20);
    goto corral_source_split_1519;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    out_$i62 := $p2i.ref.i64(out_$p61);
    goto corral_source_split_1518;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p59, $mul.ref($sub.ref(0, 184), 616)), $mul.ref(184, 1));
    goto corral_source_split_1517;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref(out_$p59, $mul.ref($sub.ref(0, 184), 616));
    goto corral_source_split_1516;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    out_$p59 := $bitcast.ref.ref(out_$p58);
    goto corral_source_split_1515;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_1514;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref($add.ref(out_$p24, $mul.ref(0, 616)), $mul.ref(184, 1)), $mul.ref(0, 1));
    goto corral_source_split_1513;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1512;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i55;
    goto $bb18;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i23;
    goto $bb18;

  $bb16:
    assume out_$i44 == 1;
    goto corral_source_split_1510;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i43, 0);
    goto corral_source_split_1508;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} out_$i43 := bdev_equal(out_$p38, out_$p42);
    call {:si_unique_call 306} {:cexpr "tmp"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_1507;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_1506;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p40, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1505;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_1504;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(168, 1));
    goto corral_source_split_1503;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_1502;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p36, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1501;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_1500;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p24, $mul.ref(0, 616)), $mul.ref(168, 1));
    goto corral_source_split_1499;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, in_$p3, out_$p24);
    goto corral_source_split_1497;

  $bb13:
    assume out_$i34 == 1;
    goto corral_source_split_1496;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, 0);
    goto corral_source_split_1494;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(in_$p3);
    goto corral_source_split_1493;

  $bb10:
    assume out_$i32 == 1;
    goto corral_source_split_1492;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i64(out_$i31, $p2i.ref.i64(dm_snapshot_merge_target_name));
    goto corral_source_split_1490;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_1489;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_1488;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p28, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_1487;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_1486;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_1485;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_1484;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p24, $mul.ref(0, 616)), $mul.ref(176, 1));
    goto corral_source_split_1483;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i32 == 1);
    goto $bb12;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb12;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i32(out_$i23, 1);
    call {:si_unique_call 310} {:cexpr "count"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_1540;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, in_$p1, out_$p24);
    goto corral_source_split_1538;

  $bb22:
    assume out_$i52 == 1;
    goto corral_source_split_1537;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, 0);
    goto corral_source_split_1531;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_1530;

  $bb20:
    assume out_$i50 == 1;
    goto corral_source_split_1529;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i48, 0);
    goto corral_source_split_1527;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} up_read(out_$p49);
    goto corral_source_split_1526;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p24, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1525;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, out_$p47);
    call {:si_unique_call 308} {:cexpr "active"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_1524;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p24, $mul.ref(0, 616)), $mul.ref(204, 1));
    goto corral_source_split_1523;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} down_read(out_$p46);
    goto corral_source_split_1522;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p24, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1521;

  $bb17:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb27:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, in_$p2, out_$p24);
    goto corral_source_split_1543;

  $bb26:
    assume out_$i54 == 1;
    goto corral_source_split_1542;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i64(out_$i53, 0);
    goto corral_source_split_1535;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(in_$p2);
    goto corral_source_split_1534;

  $bb21:
    assume !(out_$i50 == 1);
    goto corral_source_split_1533;

  $bb29_dummy:
    call {:si_unique_call 1} out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i45, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i23, out_$p24, out_$i64 := __find_snapshots_sharing_cow_loop_$bb8(in_$p0, in_$p1, in_$p2, in_$p3, in_$i20, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i45, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i23, out_$p24, out_$i64);
    return;

  exit:
    return;
}



procedure __find_snapshots_sharing_cow_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i20: i64, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$p46: ref, in_$p47: ref, in_$i48: i32, in_$p49: ref, in_$i50: i1, in_$i51: i64, in_$i52: i1, in_$i53: i64, in_$i54: i1, in_$i55: i32, in_$i45: i32, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$i23: i32, in_$p24: ref, in_$i64: i32) returns (out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$p46: ref, out_$p47: ref, out_$i48: i32, out_$p49: ref, out_$i50: i1, out_$i51: i64, out_$i52: i1, out_$i53: i64, out_$i54: i1, out_$i55: i32, out_$i45: i32, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$i23: i32, out_$p24: ref, out_$i64: i32);
  modifies $M.11, $M.9, $M.10;



implementation __lookup_origin_loop_$bb4(in_$p0: ref, in_$i11: i64, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p13: ref) returns (out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p13: ref)
{

  entry:
    out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p13 := in_$p14, in_$p15, in_$i16, in_$i17, in_$p18, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$i26, in_$i27, in_$p13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1666;

  $bb10:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$p13 := out_$p24;
    goto $bb10_dummy;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i64(out_$i26, in_$i11);
    goto corral_source_split_1683;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p25);
    goto corral_source_split_1682;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p23, $mul.ref($sub.ref(0, 8), 40)), $mul.ref(8, 1));
    goto corral_source_split_1681;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(out_$p23, $mul.ref($sub.ref(0, 8), 40));
    goto corral_source_split_1680;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_1679;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_1678;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(out_$p13, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1677;

  $bb7:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    out_$p18 := out_$p13;
    assume true;
    goto $bb7;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_1671;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} out_$i16 := bdev_equal(out_$p15, in_$p0);
    call {:si_unique_call 333} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_1670;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_1669;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1668;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p13 := __lookup_origin_loop_$bb4(in_$p0, in_$i11, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p13);
    return;

  exit:
    return;
}



procedure __lookup_origin_loop_$bb4(in_$p0: ref, in_$i11: i64, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p13: ref) returns (out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p13: ref);



implementation __insert_snapshot_loop_$bb4(in_$p1: ref, in_$i10: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p13: ref, in_$p33: ref) returns (out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p13: ref, out_$p33: ref)
{

  entry:
    out_$p14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p13, out_$p33 := in_$p14, in_$p15, in_$p16, in_$i17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$p13, in_$p33;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1700;

  $bb10:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$p13 := out_$p29;
    goto $bb10_dummy;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    out_$p33 := out_$p29;
    assume true;
    goto $bb10;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, in_$i10);
    goto corral_source_split_1725;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_1724;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p28, $mul.ref($sub.ref(0, 184), 616)), $mul.ref(184, 1));
    goto corral_source_split_1723;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref(out_$p28, $mul.ref($sub.ref(0, 184), 616));
    goto corral_source_split_1722;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(out_$p27);
    goto corral_source_split_1721;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_1720;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(out_$p13, $mul.ref(0, 616)), $mul.ref(184, 1)), $mul.ref(0, 1));
    goto corral_source_split_1719;

  $bb7:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    out_$p23 := out_$p13;
    assume true;
    goto $bb7;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    out_$i22 := $ult.i32(out_$i17, out_$i21);
    goto corral_source_split_1710;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, out_$p20);
    goto corral_source_split_1709;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1708;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_1707;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p1, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_1706;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.0, out_$p16);
    goto corral_source_split_1705;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1704;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_1703;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p13, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_1702;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p13, out_$p33 := __insert_snapshot_loop_$bb4(in_$p1, in_$i10, out_$p14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p13, out_$p33);
    return;

  exit:
    return;
}



procedure __insert_snapshot_loop_$bb4(in_$p1: ref, in_$i10: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p13: ref, in_$p33: ref) returns (out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p13: ref, out_$p33: ref);



implementation snapshot_merge_next_chunks_loop_$bb44(in_$p0: ref, in_$p1: ref, in_$i32: i32, in_$i113: i64, in_$i114: i64, in_$i115: i64, in_$i116: i32, in_$i117: i1, in_$i112: i32) returns (out_$i113: i64, out_$i114: i64, out_$i115: i64, out_$i116: i32, out_$i117: i1, out_$i112: i32)
{

  entry:
    out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i112 := in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i112;
    goto $bb44, exit;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_1918;

  $bb46:
    assume out_$i117 == 1;
    assume {:verifier.code 0} true;
    out_$i112 := out_$i116;
    goto $bb46_dummy;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    out_$i117 := $slt.i32(out_$i116, in_$i32);
    goto corral_source_split_1925;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    out_$i116 := $add.i32(out_$i112, 1);
    call {:si_unique_call 391} {:cexpr "i"} boogie_si_record_i32(out_$i116);
    goto corral_source_split_1924;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} __check_for_conflicting_io(in_$p0, out_$i115);
    goto corral_source_split_1923;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    out_$i115 := $add.i64(out_$i113, out_$i114);
    goto corral_source_split_1922;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i64($M.0, in_$p1);
    goto corral_source_split_1921;

  $bb45:
    assume {:verifier.code 0} true;
    out_$i113 := $sext.i32.i64(out_$i112);
    goto corral_source_split_1920;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb46_dummy:
    call {:si_unique_call 1} out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i112 := snapshot_merge_next_chunks_loop_$bb44(in_$p0, in_$p1, in_$i32, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i112);
    return;

  exit:
    return;
}



procedure snapshot_merge_next_chunks_loop_$bb44(in_$p0: ref, in_$p1: ref, in_$i32: i32, in_$i113: i64, in_$i114: i64, in_$i115: i64, in_$i116: i32, in_$i117: i1, in_$i112: i32) returns (out_$i113: i64, out_$i114: i64, out_$i115: i64, out_$i116: i32, out_$i117: i1, out_$i112: i32);
  modifies $M.1;



implementation snapshot_merge_next_chunks_loop_$bb33(in_$p5: ref, in_$i99: i64, in_$i100: i64, in_$i101: i1, in_$i91: i64) returns (out_$i99: i64, out_$i100: i64, out_$i101: i1)
{

  entry:
    out_$i99, out_$i100, out_$i101 := in_$i99, in_$i100, in_$i101;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i101 == 1);
    goto $bb37_dummy;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    out_$i101 := $ne.i64(out_$i100, in_$i91);
    goto corral_source_split_1901;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} out_$i100 := read_pending_exceptions_done_count();
    call {:si_unique_call 387} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i100);
    goto corral_source_split_1900;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} out_$i99 := prepare_to_wait_event(_pending_exceptions_done, in_$p5, 2);
    call {:si_unique_call 385} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i99);
    goto corral_source_split_1899;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} schedule();
    goto corral_source_split_1898;

  $bb37_dummy:
    call {:si_unique_call 1} out_$i99, out_$i100, out_$i101 := snapshot_merge_next_chunks_loop_$bb33(in_$p5, out_$i99, out_$i100, out_$i101, in_$i91);
    return;

  exit:
    return;
}



procedure snapshot_merge_next_chunks_loop_$bb33(in_$p5: ref, in_$i99: i64, in_$i100: i64, in_$i101: i1, in_$i91: i64) returns (out_$i99: i64, out_$i100: i64, out_$i101: i1);
  modifies $M.1;



implementation snapshot_merge_next_chunks_loop_$bb24(in_$p0: ref, in_$p5: ref, in_$p86: ref, in_$i88: i32, in_$i92: i64, in_$i93: i1, in_$p94: ref, in_$p95: ref, in_$i96: i64, in_$i97: i64, in_$i98: i1, in_$i99: i64, in_$i100: i64, in_$i101: i1, in_$i102: i64, in_$i103: i64, in_$i104: i32, in_$i105: i1, in_$i91: i64) returns (out_$i92: i64, out_$i93: i1, out_$p94: ref, out_$p95: ref, out_$i96: i64, out_$i97: i64, out_$i98: i1, out_$i99: i64, out_$i100: i64, out_$i101: i1, out_$i102: i64, out_$i103: i64, out_$i104: i32, out_$i105: i1, out_$i91: i64)
{

  entry:
    out_$i92, out_$i93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i91 := in_$i92, in_$i93, in_$p94, in_$p95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i91;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_1871;

  $bb38:
    assume out_$i105 == 1;
    assume {:verifier.code 0} true;
    out_$i91 := out_$i102;
    goto $bb38_dummy;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    out_$i105 := $ne.i32(out_$i104, 0);
    goto corral_source_split_1882;

  SeqInstr_63:
    call {:si_unique_call 376} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_1881;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} out_$i104 := origin_write_extent(in_$p0, out_$i103, in_$i88);
    goto SeqInstr_62;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    out_$i103 := $load.i64($M.18, in_$p86);
    goto corral_source_split_1880;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} out_$i102 := read_pending_exceptions_done_count();
    call {:si_unique_call 374} {:cexpr "previous_count"} boogie_si_record_i64(out_$i102);
    goto corral_source_split_1879;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume out_$i93 == 1;
    goto corral_source_split_1877;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    out_$i93 := $ne.i64(out_$i92, out_$i91);
    goto corral_source_split_1875;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} out_$i92 := read_pending_exceptions_done_count();
    call {:si_unique_call 372} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i92);
    goto corral_source_split_1874;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} __might_sleep(.str.36, 1018, 0);
    goto corral_source_split_1873;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} finish_wait(_pending_exceptions_done, in_$p5);
    goto corral_source_split_1896;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb30:
    assume {:verifier.code 0} true;
    assume out_$i98 == 1;
    goto $bb31;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb32;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i64(out_$i97, out_$i91);
    goto corral_source_split_1890;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} out_$i97 := read_pending_exceptions_done_count();
    call {:si_unique_call 381} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i97);
    goto corral_source_split_1889;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} out_$i96 := prepare_to_wait_event(_pending_exceptions_done, in_$p5, 2);
    call {:si_unique_call 379} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i96);
    goto corral_source_split_1888;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p95, 0);
    goto corral_source_split_1887;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1886;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} INIT_LIST_HEAD(out_$p94);
    goto corral_source_split_1885;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1884;

  $bb27:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb34:
    assume out_$i101 == 1;
    goto corral_source_split_1894;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb37;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    out_$i101 := $ne.i64(out_$i100, out_$i91);
    goto corral_source_split_1901;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} out_$i100 := read_pending_exceptions_done_count();
    call {:si_unique_call 387} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i100);
    goto corral_source_split_1900;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} out_$i99 := prepare_to_wait_event(_pending_exceptions_done, in_$p5, 2);
    call {:si_unique_call 385} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i99);
    goto corral_source_split_1899;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} schedule();
    goto corral_source_split_1898;

  $bb33:
    call out_$i99, out_$i100, out_$i101 := snapshot_merge_next_chunks_loop_$bb33(in_$p5, out_$i99, out_$i100, out_$i101, out_$i91);
    goto $bb33_last;

  $bb33_last:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i101 == 1);
    assume false;
    return;

  $bb32:
    assume !(out_$i98 == 1);
    goto corral_source_split_1892;

  $bb38_dummy:
    call {:si_unique_call 1} out_$i92, out_$i93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i91 := snapshot_merge_next_chunks_loop_$bb24(in_$p0, in_$p5, in_$p86, in_$i88, out_$i92, out_$i93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i91);
    return;

  exit:
    return;
}



procedure snapshot_merge_next_chunks_loop_$bb24(in_$p0: ref, in_$p5: ref, in_$p86: ref, in_$i88: i32, in_$i92: i64, in_$i93: i1, in_$p94: ref, in_$p95: ref, in_$i96: i64, in_$i97: i64, in_$i98: i1, in_$i99: i64, in_$i100: i64, in_$i101: i1, in_$i102: i64, in_$i103: i64, in_$i104: i32, in_$i105: i1, in_$i91: i64) returns (out_$i92: i64, out_$i93: i1, out_$p94: ref, out_$p95: ref, out_$i96: i64, out_$i97: i64, out_$i98: i1, out_$i99: i64, out_$i100: i64, out_$i101: i1, out_$i102: i64, out_$i103: i64, out_$i104: i32, out_$i105: i1, out_$i91: i64);
  modifies $M.0, $M.20, $M.21, $M.22, $M.17, $M.18, $M.19, $M.1, $M.9, $M.10, $M.11, $M.16, $CurrAddr, assertsPassed, $M.31, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35;



implementation snapshot_merge_next_chunks_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} snapshot_merge_next_chunks_loop_$bb3();
    return;

  exit:
    return;
}



procedure snapshot_merge_next_chunks_loop_$bb3();



implementation origin_write_extent_loop_$bb4(in_$p0: ref, in_$i1: i64, in_$p7: ref, in_$i8: i64, in_$p13: ref, in_$i14: i64, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i64, in_$i23: i64, in_$i24: i1, in_$i11: i64, in_$i12: i32, in_$i25: i32) returns (out_$p13: ref, out_$i14: i64, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i64, out_$i23: i64, out_$i24: i1, out_$i11: i64, out_$i12: i32, out_$i25: i32)
{

  entry:
    out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i11, out_$i12, out_$i25 := in_$p13, in_$i14, in_$i15, in_$i16, in_$i17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i11, in_$i12, in_$i25;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1974;

  $bb9:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$i11, out_$i12 := out_$i23, out_$i17;
    goto $bb9_dummy;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i17;
    assume true;
    goto $bb9;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    out_$i24 := $ugt.i64(in_$i8, out_$i23);
    goto corral_source_split_1990;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i64(out_$i22, out_$i11);
    call {:si_unique_call 410} {:cexpr "n"} boogie_si_record_i64(out_$i23);
    goto corral_source_split_1989;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i32.i64(out_$i21);
    goto corral_source_split_1988;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, out_$p20);
    goto corral_source_split_1987;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 88)), $mul.ref(32, 1));
    goto corral_source_split_1986;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_1985;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(176, 1));
    goto corral_source_split_1984;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1983;

  $bb7:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := out_$i12;
    goto $bb8;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    out_$i17 := 1;
    goto $bb8;

  $bb6:
    assume out_$i16 == 1;
    goto corral_source_split_1981;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i15, 0);
    goto corral_source_split_1979;

  SeqInstr_66:
    call {:si_unique_call 409} {:cexpr "tmp"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_1978;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} out_$i15 := __origin_write(out_$p13, out_$i14, $0.ref);
    goto SeqInstr_65;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i64(in_$i1, out_$i11);
    goto corral_source_split_1977;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1976;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i11, out_$i12, out_$i25 := origin_write_extent_loop_$bb4(in_$p0, in_$i1, in_$p7, in_$i8, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i11, out_$i12, out_$i25);
    return;

  exit:
    return;
}



procedure origin_write_extent_loop_$bb4(in_$p0: ref, in_$i1: i64, in_$p7: ref, in_$i8: i64, in_$p13: ref, in_$i14: i64, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i64, in_$i23: i64, in_$i24: i1, in_$i11: i64, in_$i12: i32, in_$i25: i32) returns (out_$p13: ref, out_$i14: i64, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i64, out_$i23: i64, out_$i24: i1, out_$i11: i64, out_$i12: i32, out_$i25: i32);
  modifies $M.0, $M.20, $M.21, $M.22, $M.17, $M.18, $M.19, $M.1, $M.9, $M.10, $M.11, $M.16, $CurrAddr, assertsPassed, $M.31, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35;



implementation __check_for_conflicting_io_loop_$bb4(in_$p0: ref, in_$i1: i64, in_$i4: i32, in_$i5: i1) returns (out_$i4: i32, out_$i5: i1)
{

  entry:
    out_$i4, out_$i5 := in_$i4, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i5 == 1;
    goto $bb6_dummy;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_2004;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} out_$i4 := __chunk_is_tracked(in_$p0, in_$i1);
    call {:si_unique_call 417} {:cexpr "tmp"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_2003;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} msleep(1);
    goto corral_source_split_2002;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5 := __check_for_conflicting_io_loop_$bb4(in_$p0, in_$i1, out_$i4, out_$i5);
    return;

  exit:
    return;
}



procedure __check_for_conflicting_io_loop_$bb4(in_$p0: ref, in_$i1: i64, in_$i4: i32, in_$i5: i1) returns (out_$i4: i32, out_$i5: i1);
  modifies $M.1;



implementation error_bios_loop_$bb4(in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$p3: ref) returns (out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$p3: ref)
{

  entry:
    out_$p4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p3 := in_$p4, in_$p5, in_$p6, in_$i7, in_$i8, in_$p3;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2031;

  $bb6:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$p3 := out_$p5;
    goto $bb6_dummy;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_2039;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64(out_$p5);
    goto corral_source_split_2038;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} bio_endio(out_$p3, $sub.i32(0, 5));
    goto corral_source_split_2037;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p6, $0.ref);
    goto corral_source_split_2036;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(out_$p3, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_2035;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    out_$p5 := $load.ref($M.0, out_$p4);
    goto corral_source_split_2034;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p4 := $add.ref($add.ref(out_$p3, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_2033;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p3 := error_bios_loop_$bb4(out_$p4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p3);
    return;

  exit:
    return;
}



procedure error_bios_loop_$bb4(in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$p3: ref) returns (out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$p3: ref);
  modifies $M.0;



implementation flush_bios_loop_$bb4(in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$p3: ref) returns (out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$p3: ref)
{

  entry:
    out_$p4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p3 := in_$p4, in_$p5, in_$p6, in_$i7, in_$i8, in_$p3;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2059;

  $bb6:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$p3 := out_$p5;
    goto $bb6_dummy;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_2067;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64(out_$p5);
    goto corral_source_split_2066;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} generic_make_request(out_$p3);
    goto corral_source_split_2065;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p6, $0.ref);
    goto corral_source_split_2064;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(out_$p3, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_2063;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    out_$p5 := $load.ref($M.0, out_$p4);
    goto corral_source_split_2062;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p4 := $add.ref($add.ref(out_$p3, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_2061;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p3 := flush_bios_loop_$bb4(out_$p4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p3);
    return;

  exit:
    return;
}



procedure flush_bios_loop_$bb4(in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$p3: ref) returns (out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$p3: ref);
  modifies $M.0;



implementation dm_lookup_exception_loop_$bb4(in_$i1: i64, in_$i12: i64, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$i18: i32, in_$p19: ref, in_$i20: i64, in_$i21: i64, in_$i22: i64, in_$i23: i1, in_$p24: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p14: ref) returns (out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$i18: i32, out_$p19: ref, out_$i20: i64, out_$i21: i64, out_$i22: i64, out_$i23: i1, out_$p24: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p14: ref)
{

  entry:
    out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p14 := in_$p15, in_$i16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i23, in_$p24, in_$p27, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$p14;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2089;

  $bb13:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$p14 := out_$p28;
    goto $bb13_dummy;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, in_$i12);
    goto corral_source_split_2112;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_2111;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p29, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2110;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(out_$p28);
    goto corral_source_split_2109;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_2108;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(out_$p14, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2107;

  $bb7:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    out_$p24 := out_$p14;
    assume true;
    goto $bb9;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    out_$i23 := $uge.i64(out_$i22, in_$i1);
    goto corral_source_split_2101;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i64(out_$i20, out_$i21);
    goto corral_source_split_2100;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i32.i64(out_$i18);
    goto corral_source_split_2099;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i64($M.0, out_$p19);
    goto corral_source_split_2098;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p14, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2097;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} out_$i18 := dm_consecutive_chunk_count(out_$p14);
    call {:si_unique_call 438} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_2096;

  $bb6:
    assume out_$i17 == 1;
    goto corral_source_split_2095;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    out_$i17 := $ule.i64(out_$i16, in_$i1);
    goto corral_source_split_2093;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i64($M.0, out_$p15);
    goto corral_source_split_2092;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2091;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p14 := dm_lookup_exception_loop_$bb4(in_$i1, in_$i12, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p14);
    return;

  exit:
    return;
}



procedure dm_lookup_exception_loop_$bb4(in_$i1: i64, in_$i12: i64, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$i18: i32, in_$p19: ref, in_$i20: i64, in_$i21: i64, in_$i22: i64, in_$i23: i1, in_$p24: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p14: ref) returns (out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$i18: i32, out_$p19: ref, out_$i20: i64, out_$i21: i64, out_$i22: i64, out_$i23: i1, out_$p24: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p14: ref);



implementation __chunk_is_tracked_loop_$bb7(in_$i1: i64, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p15: ref) returns (out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p15: ref)
{

  entry:
    out_$p16, out_$i17, out_$i18, out_$p21, out_$p22, out_$i23, out_$i24, out_$p26, out_$i27, out_$i28, out_$p15 := in_$p16, in_$i17, in_$i18, in_$p21, in_$p22, in_$i23, in_$i24, in_$p26, in_$i27, in_$i28, in_$p15;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2166;

  $bb16:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$p15 := out_$p26;
    goto $bb16_dummy;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, 0);
    goto corral_source_split_2188;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_2187;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2186;

  $bb14:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    out_$p26 := $0.ref;
    goto $bb15;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    out_$p26 := out_$p22;
    goto $bb15;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    goto corral_source_split_2184;

  $bb13:
    assume out_$i24 == 1;
    goto corral_source_split_2183;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, 0);
    goto corral_source_split_2181;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_2180;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_2179;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2178;

  $bb10:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i64(out_$i17, in_$i1);
    goto corral_source_split_2170;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i64($M.0, out_$p16);
    goto corral_source_split_2169;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2168;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p16, out_$i17, out_$i18, out_$p21, out_$p22, out_$i23, out_$i24, out_$p26, out_$i27, out_$i28, out_$p15 := __chunk_is_tracked_loop_$bb7(in_$i1, out_$p16, out_$i17, out_$i18, out_$p21, out_$p22, out_$i23, out_$i24, out_$p26, out_$i27, out_$i28, out_$p15);
    return;

  exit:
    return;
}



procedure __chunk_is_tracked_loop_$bb7(in_$i1: i64, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p15: ref) returns (out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p15: ref);



implementation __origin_write_loop_$bb4(in_$i1: i64, in_$i9: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$i67: i1, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i32, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$i38: i32, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p87: ref, in_$i88: i64, in_$i89: i1, in_$p90: ref, in_$p26: ref, in_$i27: i32, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i97: i64, in_$i98: i1, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$p17: ref, in_$i99: i32, in_$p100: ref) returns (out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$i67: i1, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i32, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$i38: i32, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p87: ref, out_$i88: i64, out_$i89: i1, out_$p90: ref, out_$p26: ref, out_$i27: i32, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i97: i64, out_$i98: i1, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$p17: ref, out_$i99: i32, out_$p100: ref)
{

  entry:
    out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$i38, out_$p39, out_$p40, out_$p41, out_$p87, out_$i88, out_$i89, out_$p90, out_$p26, out_$i27, out_$p28, out_$p29, out_$p30, out_$p92, out_$p93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$p13, out_$p14, out_$p15, out_$i16, out_$p17, out_$i99, out_$p100 := in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$i24, in_$i25, in_$p31, in_$p32, in_$i33, in_$i34, in_$p35, in_$i36, in_$i37, in_$p42, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$p48, in_$p49, in_$i50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p55, in_$i56, in_$i57, in_$p58, in_$p59, in_$p60, in_$p61, in_$i62, in_$i63, in_$p64, in_$p65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$p71, in_$i72, in_$i73, in_$p74, in_$p75, in_$i76, in_$i77, in_$p78, in_$p79, in_$p80, in_$p81, in_$p82, in_$i83, in_$i84, in_$p85, in_$p86, in_$i38, in_$p39, in_$p40, in_$p41, in_$p87, in_$i88, in_$i89, in_$p90, in_$p26, in_$i27, in_$p28, in_$p29, in_$p30, in_$p92, in_$p93, in_$p94, in_$p95, in_$p96, in_$i97, in_$i98, in_$p13, in_$p14, in_$p15, in_$i16, in_$p17, in_$i99, in_$p100;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2226;

  $bb47:
    assume out_$i98 == 1;
    assume {:verifier.code 0} true;
    out_$p13, out_$p14, out_$p15, out_$i16, out_$p17 := out_$p30, out_$p29, out_$p28, out_$i27, out_$p95;
    goto $bb47_dummy;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    out_$i99, out_$p100 := out_$i27, out_$p30;
    assume true;
    goto $bb47;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i64(out_$i97, in_$i9);
    goto corral_source_split_2246;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    out_$i97 := $p2i.ref.i64(out_$p96);
    goto corral_source_split_2245;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p94, $mul.ref($sub.ref(0, 184), 616)), $mul.ref(184, 1));
    goto corral_source_split_2244;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref(out_$p94, $mul.ref($sub.ref(0, 184), 616));
    goto corral_source_split_2243;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    out_$p94 := $bitcast.ref.ref(out_$p93);
    goto corral_source_split_2242;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.0, out_$p92);
    goto corral_source_split_2241;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref($add.ref(out_$p26, $mul.ref(0, 616)), $mul.ref(184, 1)), $mul.ref(0, 1));
    goto corral_source_split_2240;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2239;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    out_$p26, out_$i27, out_$p28, out_$p29, out_$p30 := out_$p17, out_$i38, out_$p39, out_$p90, out_$p41;
    goto $bb8;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    out_$p26, out_$i27, out_$p28, out_$p29, out_$p30 := out_$p17, out_$i16, out_$p15, out_$p14, out_$p13;
    goto $bb8;

  $bb6:
    assume out_$i25 == 1;
    goto corral_source_split_2237;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i64(out_$i24, $p2i.ref.i64(dm_snapshot_merge_target_name));
    goto corral_source_split_2235;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_2234;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_2233;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_2232;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_2231;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_2230;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_2229;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p17, $mul.ref(0, 616)), $mul.ref(176, 1));
    goto corral_source_split_2228;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_2347;

  $bb45:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    out_$p90 := out_$p40;
    goto $bb46;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    out_$p90 := $0.ref;
    goto $bb46;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} start_copy(out_$p40);
    goto corral_source_split_2345;

  $bb44:
    assume out_$i89 == 1;
    goto corral_source_split_2344;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    out_$i89 := $ne.i64(out_$i88, 0);
    goto corral_source_split_2263;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    out_$i88 := $p2i.ref.i64(out_$p40);
    goto corral_source_split_2262;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} up_write(out_$p87);
    goto corral_source_split_2261;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p17, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_2260;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2259;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    out_$i38, out_$p39, out_$p40, out_$p41 := 0, out_$p80, out_$p86, out_$p81;
    goto $bb15;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    out_$i38, out_$p39, out_$p40, out_$p41 := out_$i16, out_$p15, out_$p14, out_$p13;
    goto $bb15;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    out_$i38, out_$p39, out_$p40, out_$p41 := out_$i16, out_$p15, out_$p14, out_$p13;
    goto $bb15;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    out_$i38, out_$p39, out_$p40, out_$p41 := out_$i16, out_$p15, out_$p14, out_$p13;
    goto $bb15;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    out_$i38, out_$p39, out_$p40, out_$p41 := out_$i16, out_$p15, out_$p14, out_$p13;
    goto $bb15;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    out_$i38, out_$p39, out_$p40, out_$p41 := out_$i16, out_$p15, out_$p14, out_$p13;
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i38, out_$p39, out_$p40, out_$p41 := out_$i16, out_$p15, out_$p14, out_$p13;
    goto $bb15;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i37 == 1;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i34 == 1;
    goto $bb11;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 0);
    goto corral_source_split_2252;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, out_$p32);
    goto corral_source_split_2251;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p17, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2250;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} down_write(out_$p31);
    goto corral_source_split_2249;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p17, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_2248;

  $bb7:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, 0);
    goto corral_source_split_2257;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.0, out_$p35);
    goto corral_source_split_2256;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p17, $mul.ref(0, 616)), $mul.ref(204, 1));
    goto corral_source_split_2255;

  $bb12:
    assume !(out_$i34 == 1);
    goto corral_source_split_2254;

  $bb17:
    assume out_$i47 == 1;
    goto corral_source_split_2272;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    out_$i47 := $ule.i64(out_$i46, in_$i1);
    goto corral_source_split_2270;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} out_$i46 := dm_table_get_size(out_$p45);
    call {:si_unique_call 456} {:cexpr "tmp"} boogie_si_record_i64(out_$i46);
    goto corral_source_split_2269;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_2268;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2267;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_2266;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p17, $mul.ref(0, 616)), $mul.ref(176, 1));
    goto corral_source_split_2265;

  $bb14:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume out_$i54 == 1;
    goto corral_source_split_2282;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i64(out_$i53, 0);
    goto corral_source_split_2280;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_2279;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} out_$p52 := dm_lookup_exception(out_$p51, out_$i50);
    goto corral_source_split_2278;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p17, $mul.ref(0, 616)), $mul.ref(272, 1));
    goto corral_source_split_2277;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} out_$i50 := sector_to_chunk(out_$p49, in_$i1);
    call {:si_unique_call 458} {:cexpr "chunk"} boogie_si_record_i64(out_$i50);
    goto corral_source_split_2276;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_2275;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p17, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_2274;

  $bb18:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} free_pending_exception(out_$p59);
    goto corral_source_split_2299;

  $bb25:
    assume out_$i63 == 1;
    goto corral_source_split_2298;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i62, 0);
    goto corral_source_split_2296;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.0, out_$p61);
    goto corral_source_split_2295;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p17, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2294;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} down_write(out_$p60);
    goto corral_source_split_2293;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p17, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_2292;

  SeqInstr_69:
    goto corral_source_split_2291;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} out_$p59 := alloc_pending_exception(out_$p17);
    goto SeqInstr_68;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} up_write(out_$p58);
    goto corral_source_split_2290;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p17, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_2289;

  $bb23:
    assume out_$i57 == 1;
    goto corral_source_split_2288;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i64(out_$i56, 0);
    goto corral_source_split_2286;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    out_$i56 := $p2i.ref.i64(out_$p55);
    goto corral_source_split_2285;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} out_$p55 := __lookup_pending_exception(out_$p17, out_$i50);
    goto corral_source_split_2284;

  $bb21:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} free_pending_exception(out_$p59);
    goto corral_source_split_2307;

  $bb28:
    assume out_$i67 == 1;
    goto corral_source_split_2306;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i64(out_$i66, 0);
    goto corral_source_split_2304;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    out_$i66 := $p2i.ref.i64(out_$p65);
    goto corral_source_split_2303;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} out_$p65 := dm_lookup_exception(out_$p64, out_$i50);
    goto corral_source_split_2302;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p17, $mul.ref(0, 616)), $mul.ref(272, 1));
    goto corral_source_split_2301;

  $bb26:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_75:
    goto corral_source_split_2314;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} __invalidate_snapshot(out_$p17, $sub.i32(0, 12));
    goto SeqInstr_74;

  $bb31:
    assume out_$i70 == 1;
    goto corral_source_split_2313;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i64(out_$i69, 0);
    goto corral_source_split_2311;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p68);
    goto corral_source_split_2310;

  SeqInstr_72:
    goto corral_source_split_2309;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} out_$p68 := __find_pending_exception(out_$p17, out_$p59, out_$i50);
    goto SeqInstr_71;

  $bb29:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_2342;

  $bb42:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    out_$p86 := out_$p14;
    goto $bb43;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    out_$p86 := out_$p71;
    goto $bb43;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p85, 1);
    goto corral_source_split_2340;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p71, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_2339;

  $bb41:
    assume out_$i84 == 1;
    goto corral_source_split_2338;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i83, 0);
    goto corral_source_split_2336;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i32($M.0, out_$p82);
    goto corral_source_split_2335;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p71, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_2334;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2333;

  $bb36:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    out_$p80, out_$p81 := out_$p15, out_$p13;
    goto $bb40;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    out_$p80, out_$p81 := $0.ref, out_$p79;
    goto $bb40;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_2331;

  $bb38:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    out_$p79 := out_$p13;
    goto $bb39;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    out_$p79 := out_$p71;
    goto $bb39;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p78, 1);
    goto corral_source_split_2329;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(out_$p71, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_2328;

  $bb37:
    assume out_$i77 == 1;
    goto corral_source_split_2327;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i76, 0);
    goto corral_source_split_2325;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i32($M.0, out_$p75);
    goto corral_source_split_2324;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p71, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_2323;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} bio_list_add(out_$p74, out_$p15);
    goto corral_source_split_2322;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p71, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2321;

  $bb35:
    assume out_$i73 == 1;
    goto corral_source_split_2320;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i64(out_$i72, 0);
    goto corral_source_split_2318;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    out_$i72 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_2317;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_2316;

  $bb24:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    out_$p71 := out_$p55;
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p71 := out_$p68;
    goto $bb34;

  $bb32:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb47_dummy:
    call {:si_unique_call 1} out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$i38, out_$p39, out_$p40, out_$p41, out_$p87, out_$i88, out_$i89, out_$p90, out_$p26, out_$i27, out_$p28, out_$p29, out_$p30, out_$p92, out_$p93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$p13, out_$p14, out_$p15, out_$i16, out_$p17, out_$i99, out_$p100 := __origin_write_loop_$bb4(in_$i1, in_$i9, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$i38, out_$p39, out_$p40, out_$p41, out_$p87, out_$i88, out_$i89, out_$p90, out_$p26, out_$i27, out_$p28, out_$p29, out_$p30, out_$p92, out_$p93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$p13, out_$p14, out_$p15, out_$i16, out_$p17, out_$i99, out_$p100);
    return;

  exit:
    return;
}



procedure __origin_write_loop_$bb4(in_$i1: i64, in_$i9: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$i67: i1, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i32, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$i38: i32, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p87: ref, in_$i88: i64, in_$i89: i1, in_$p90: ref, in_$p26: ref, in_$i27: i32, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i97: i64, in_$i98: i1, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$p17: ref, in_$i99: i32, in_$p100: ref) returns (out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$i67: i1, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i32, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$i38: i32, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p87: ref, out_$i88: i64, out_$i89: i1, out_$p90: ref, out_$p26: ref, out_$i27: i32, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i97: i64, out_$i98: i1, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$p17: ref, out_$i99: i32, out_$p100: ref);
  modifies $M.20, $M.21, $M.22, $M.17, $M.18, $M.19, $CurrAddr, $M.0, assertsPassed, $M.9, $M.10, $M.11, $M.1, $M.16, $M.31, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35;



implementation dm_insert_exception_loop_$bb8(in_$p1: ref, in_$i18: i64, in_$i22: i32, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$i26: i64, in_$i27: i64, in_$i28: i64, in_$i29: i64, in_$i30: i1, in_$p31: ref, in_$i32: i64, in_$i33: i64, in_$i34: i32, in_$p35: ref, in_$i36: i64, in_$i37: i64, in_$i38: i64, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$p44: ref, in_$i45: i64, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$i49: i64, in_$i50: i64, in_$p51: ref, in_$i52: i64, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p64: ref, in_$i65: i64, in_$p66: ref, in_$i67: i64, in_$i68: i1, in_$p69: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$i77: i1, in_$p21: ref, in_$p78: ref) returns (out_$i22: i32, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$i26: i64, out_$i27: i64, out_$i28: i64, out_$i29: i64, out_$i30: i1, out_$p31: ref, out_$i32: i64, out_$i33: i64, out_$i34: i32, out_$p35: ref, out_$i36: i64, out_$i37: i64, out_$i38: i64, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$p44: ref, out_$i45: i64, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$i49: i64, out_$i50: i64, out_$p51: ref, out_$i52: i64, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p64: ref, out_$i65: i64, out_$p66: ref, out_$i67: i64, out_$i68: i1, out_$p69: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$i77: i1, out_$p21: ref, out_$p78: ref)
{

  entry:
    out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p72, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p21, out_$p78 := in_$i22, in_$p23, in_$i24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$p31, in_$i32, in_$i33, in_$i34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$p41, in_$p42, in_$i43, in_$p44, in_$i45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$p51, in_$i52, in_$i53, in_$i54, in_$p55, in_$p64, in_$i65, in_$p66, in_$i67, in_$i68, in_$p69, in_$p72, in_$p73, in_$p74, in_$p75, in_$i76, in_$i77, in_$p21, in_$p78;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2708;

  $bb27:
    assume out_$i77 == 1;
    assume {:verifier.code 0} true;
    out_$p21 := out_$p73;
    goto $bb27_dummy;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    out_$p78 := out_$p73;
    assume true;
    goto $bb27;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    out_$i77 := $ne.i64(out_$i76, in_$i18);
    goto corral_source_split_2781;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    out_$i76 := $p2i.ref.i64(out_$p75);
    goto corral_source_split_2780;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p74, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2779;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    out_$p74 := $bitcast.ref.ref(out_$p73);
    goto corral_source_split_2778;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.0, out_$p72);
    goto corral_source_split_2777;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref($add.ref(out_$p21, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2776;

  $bb24:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    out_$p69 := out_$p21;
    assume true;
    goto $bb24;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    out_$i68 := $ugt.i64(out_$i65, out_$i67);
    goto corral_source_split_2770;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i64($M.0, out_$p66);
    goto corral_source_split_2769;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p21, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2768;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i64($M.0, out_$p64);
    goto corral_source_split_2767;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2766;

  $bb18:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    out_$p55 := out_$p21;
    assume true;
    goto $bb20;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i64(out_$i52, out_$i53);
    goto corral_source_split_2750;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    out_$i53 := $sub.i64(out_$i50, 1);
    goto corral_source_split_2749;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i64($M.0, out_$p51);
    goto corral_source_split_2748;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2747;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} out_$i50 := dm_chunk_number(out_$i49);
    call {:si_unique_call 544} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i50);
    goto corral_source_split_2746;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i64($M.0, out_$p48);
    goto corral_source_split_2745;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p21, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2744;

  $bb17:
    assume out_$i47 == 1;
    goto corral_source_split_2743;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i64(out_$i43, out_$i46);
    goto corral_source_split_2741;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    out_$i46 := $sub.i64(out_$i45, 1);
    goto corral_source_split_2740;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i64($M.0, out_$p44);
    goto corral_source_split_2739;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p21, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2738;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i64($M.0, out_$p42);
    goto corral_source_split_2737;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2736;

  $bb11:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    out_$p41 := out_$p21;
    assume true;
    goto $bb13;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i64(out_$i36, out_$i39);
    goto corral_source_split_2730;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i64(out_$i38, 1);
    goto corral_source_split_2729;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i64(out_$i33, out_$i37);
    goto corral_source_split_2728;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i32.i64(out_$i34);
    goto corral_source_split_2727;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i64($M.0, out_$p35);
    goto corral_source_split_2726;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2725;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} out_$i34 := dm_consecutive_chunk_count(out_$p21);
    call {:si_unique_call 540} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_2724;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} out_$i33 := dm_chunk_number(out_$i32);
    call {:si_unique_call 538} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i33);
    goto corral_source_split_2723;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.0, out_$p31);
    goto corral_source_split_2722;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p21, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2721;

  $bb10:
    assume out_$i30 == 1;
    goto corral_source_split_2720;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i64(out_$i24, out_$i29);
    goto corral_source_split_2718;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i64(out_$i28, 1);
    goto corral_source_split_2717;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i64(out_$i26, out_$i27);
    goto corral_source_split_2716;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i32.i64(out_$i22);
    goto corral_source_split_2715;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i64($M.0, out_$p25);
    goto corral_source_split_2714;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p21, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2713;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i64($M.0, out_$p23);
    goto corral_source_split_2712;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2711;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} out_$i22 := dm_consecutive_chunk_count(out_$p21);
    call {:si_unique_call 536} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_2710;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb27_dummy:
    call {:si_unique_call 1} out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p72, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p21, out_$p78 := dm_insert_exception_loop_$bb8(in_$p1, in_$i18, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p72, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p21, out_$p78);
    return;

  exit:
    return;
}



procedure dm_insert_exception_loop_$bb8(in_$p1: ref, in_$i18: i64, in_$i22: i32, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$i26: i64, in_$i27: i64, in_$i28: i64, in_$i29: i64, in_$i30: i1, in_$p31: ref, in_$i32: i64, in_$i33: i64, in_$i34: i32, in_$p35: ref, in_$i36: i64, in_$i37: i64, in_$i38: i64, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$p44: ref, in_$i45: i64, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$i49: i64, in_$i50: i64, in_$p51: ref, in_$i52: i64, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p64: ref, in_$i65: i64, in_$p66: ref, in_$i67: i64, in_$i68: i1, in_$p69: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$i77: i1, in_$p21: ref, in_$p78: ref) returns (out_$i22: i32, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$i26: i64, out_$i27: i64, out_$i28: i64, out_$i29: i64, out_$i30: i1, out_$p31: ref, out_$i32: i64, out_$i33: i64, out_$i34: i32, out_$p35: ref, out_$i36: i64, out_$i37: i64, out_$i38: i64, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$p44: ref, out_$i45: i64, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$i49: i64, out_$i50: i64, out_$p51: ref, out_$i52: i64, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p64: ref, out_$i65: i64, out_$p66: ref, out_$i67: i64, out_$i68: i1, out_$p69: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$i77: i1, out_$p21: ref, out_$p78: ref);



implementation retry_origin_bios_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$i12: i64, in_$i13: i1, in_$p4: ref) returns (out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$i12: i64, out_$i13: i1, out_$p4: ref)
{

  entry:
    out_$p5, out_$p6, out_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p4 := in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$i10, in_$i11, in_$i12, in_$i13, in_$p4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2807;

  $bb9:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$p4 := out_$p6;
    goto $bb9_dummy;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i64(out_$i12, 0);
    goto corral_source_split_2822;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(out_$p6);
    goto corral_source_split_2821;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} generic_make_request(out_$p4);
    goto corral_source_split_2819;

  $bb6:
    assume out_$i11 == 1;
    goto corral_source_split_2818;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i10, 1);
    goto corral_source_split_2816;

  SeqInstr_108:
    call {:si_unique_call 553} {:cexpr "r"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_2815;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} out_$i10 := do_origin(out_$p9, out_$p4);
    goto SeqInstr_107;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_2814;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(160, 1));
    goto corral_source_split_2813;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p7, $0.ref);
    goto corral_source_split_2812;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(out_$p4, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_2811;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.0, out_$p5);
    goto corral_source_split_2810;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(out_$p4, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_2809;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p4 := retry_origin_bios_loop_$bb4(in_$p0, out_$p5, out_$p6, out_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p4);
    return;

  exit:
    return;
}



procedure retry_origin_bios_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$i12: i64, in_$i13: i1, in_$p4: ref) returns (out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$i12: i64, out_$i13: i1, out_$p4: ref);
  modifies $M.0, $M.20, $M.21, $M.22, $M.17, $M.18, $M.19, $M.1, $M.9, $M.10, $M.11, $M.16, $CurrAddr, assertsPassed, $M.31, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35;



implementation dm_consecutive_chunk_count_inc_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dm_consecutive_chunk_count_inc_loop_$bb3();
    return;

  exit:
    return;
}



procedure dm_consecutive_chunk_count_inc_loop_$bb3();



implementation dm_exception_table_exit_loop_$bb9(in_$p1: ref, in_$i20: i64, in_$p24: ref, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p22: ref, in_$p23: ref) returns (out_$p24: ref, out_$p26: ref, out_$p27: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p22: ref, out_$p23: ref)
{

  entry:
    out_$p24, out_$p26, out_$p27, out_$p29, out_$i30, out_$i31, out_$p22, out_$p23 := in_$p24, in_$p26, in_$p27, in_$p29, in_$i30, in_$i31, in_$p22, in_$p23;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3167;

  $bb11:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$p22, out_$p23 := out_$p27, out_$p22;
    goto $bb11_dummy;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i30, in_$i20);
    goto corral_source_split_3176;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p29);
    goto corral_source_split_3175;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p22, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3174;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    goto corral_source_split_3173;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_3172;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(out_$p22, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3171;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} kmem_cache_free(in_$p1, out_$p24);
    goto corral_source_split_3170;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_3169;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p24, out_$p26, out_$p27, out_$p29, out_$i30, out_$i31, out_$p22, out_$p23 := dm_exception_table_exit_loop_$bb9(in_$p1, in_$i20, out_$p24, out_$p26, out_$p27, out_$p29, out_$i30, out_$i31, out_$p22, out_$p23);
    return;

  exit:
    return;
}



procedure dm_exception_table_exit_loop_$bb9(in_$p1: ref, in_$i20: i64, in_$p24: ref, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p22: ref, in_$p23: ref) returns (out_$p24: ref, out_$p26: ref, out_$p27: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p22: ref, out_$p23: ref);



implementation dm_exception_table_exit_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i4: i32, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$p18: ref, in_$i19: i64, in_$i20: i64, in_$i21: i1, in_$p24: ref, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p22: ref, in_$p23: ref, in_$i32: i32, in_$i33: i1, in_$i6: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p15: ref, out_$p16: ref, out_$p18: ref, out_$i19: i64, out_$i20: i64, out_$i21: i1, out_$p24: ref, out_$p26: ref, out_$p27: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p22: ref, out_$p23: ref, out_$i32: i32, out_$i33: i1, out_$i6: i32)
{

  entry:
    out_$p7, out_$p8, out_$i9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p15, out_$p16, out_$p18, out_$i19, out_$i20, out_$i21, out_$p24, out_$p26, out_$p27, out_$p29, out_$i30, out_$i31, out_$p22, out_$p23, out_$i32, out_$i33, out_$i6 := in_$p7, in_$p8, in_$i9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p15, in_$p16, in_$p18, in_$i19, in_$i20, in_$i21, in_$p24, in_$p26, in_$p27, in_$p29, in_$i30, in_$i31, in_$p22, in_$p23, in_$i32, in_$i33, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3148;

  $bb14:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i32;
    goto $bb14_dummy;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    out_$i33 := $slt.i32(out_$i32, in_$i4);
    goto corral_source_split_3181;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i32(out_$i6, 1);
    call {:si_unique_call 644} {:cexpr "i"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_3180;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i21 == 1);
    goto $bb8;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb12:
    assume !(out_$i31 == 1);
    goto corral_source_split_3178;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i30, out_$i20);
    goto corral_source_split_3176;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p29);
    goto corral_source_split_3175;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p22, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3174;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    goto corral_source_split_3173;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_3172;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(out_$p22, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3171;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} kmem_cache_free(in_$p1, out_$p24);
    goto corral_source_split_3170;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_3169;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$p24, out_$p26, out_$p27, out_$p29, out_$i30, out_$i31, out_$p22, out_$p23 := dm_exception_table_exit_loop_$bb9(in_$p1, out_$i20, out_$p24, out_$p26, out_$p27, out_$p29, out_$i30, out_$i31, out_$p22, out_$p23);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3167;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    out_$p22, out_$p23 := out_$p16, out_$p12;
    goto $bb9;

  $bb11:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$p22, out_$p23 := out_$p27, out_$p22;
    assume false;
    return;

  $bb6:
    assume out_$i21 == 1;
    goto corral_source_split_3165;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i64(out_$i19, out_$i20);
    goto corral_source_split_3163;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p10);
    goto corral_source_split_3162;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_3161;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p13, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3160;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    goto corral_source_split_3159;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_3158;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref($add.ref(out_$p13, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3157;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    out_$p13 := $bitcast.ref.ref(out_$p12);
    goto corral_source_split_3156;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_3155;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p8, $mul.ref(out_$i9, 16)), $mul.ref(0, 1));
    goto corral_source_split_3154;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref(out_$p8, $mul.ref(out_$i9, 16));
    goto corral_source_split_3153;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i6);
    goto corral_source_split_3152;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.0, out_$p7);
    goto corral_source_split_3151;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3150;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$i9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p15, out_$p16, out_$p18, out_$i19, out_$i20, out_$i21, out_$p24, out_$p26, out_$p27, out_$p29, out_$i30, out_$i31, out_$p22, out_$p23, out_$i32, out_$i33, out_$i6 := dm_exception_table_exit_loop_$bb4(in_$p0, in_$p1, in_$i4, out_$p7, out_$p8, out_$i9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p15, out_$p16, out_$p18, out_$i19, out_$i20, out_$i21, out_$p24, out_$p26, out_$p27, out_$p29, out_$i30, out_$i31, out_$p22, out_$p23, out_$i32, out_$i33, out_$i6);
    return;

  exit:
    return;
}



procedure dm_exception_table_exit_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i4: i32, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$p18: ref, in_$i19: i64, in_$i20: i64, in_$i21: i1, in_$p24: ref, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p22: ref, in_$p23: ref, in_$i32: i32, in_$i33: i1, in_$i6: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p15: ref, out_$p16: ref, out_$p18: ref, out_$i19: i64, out_$i20: i64, out_$i21: i1, out_$p24: ref, out_$p26: ref, out_$p27: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p22: ref, out_$p23: ref, out_$i32: i32, out_$i33: i1, out_$i6: i32);



implementation dm_exception_table_init_loop_$bb8(in_$p0: ref, in_$i1: i32, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i16: i32) returns (out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i16: i32)
{

  entry:
    out_$p17, out_$p18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i16 := in_$p17, in_$p18, in_$i19, in_$p20, in_$i21, in_$i22, in_$i16;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3467;

  $bb10:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := out_$i21;
    goto $bb10_dummy;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    out_$i22 := $ult.i32(out_$i21, in_$i1);
    goto corral_source_split_3475;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i16, 1);
    call {:si_unique_call 709} {:cexpr "i"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_3474;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} INIT_LIST_HEAD(out_$p20);
    goto corral_source_split_3473;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref(out_$p18, $mul.ref(out_$i19, 16));
    goto corral_source_split_3472;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i32.i64(out_$i16);
    goto corral_source_split_3471;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_3470;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3469;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i16 := dm_exception_table_init_loop_$bb8(in_$p0, in_$i1, out_$p17, out_$p18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i16);
    return;

  exit:
    return;
}



procedure dm_exception_table_init_loop_$bb8(in_$p0: ref, in_$i1: i32, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i16: i32) returns (out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i16: i32);
  modifies $M.0;



implementation __minimum_chunk_size_loop_$bb6(in_$i11: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p14: ref, in_$i15: i32, in_$i34: i32) returns (out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p14: ref, out_$i15: i32, out_$i34: i32)
{

  entry:
    out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p14, out_$i15, out_$i34 := in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p27, in_$p28, in_$p29, in_$p30, in_$p31, in_$i32, in_$i33, in_$p14, in_$i15, in_$i34;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3709;

  $bb17:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$p14, out_$i15 := out_$p30, out_$i25;
    goto $bb17_dummy;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i25;
    assume true;
    goto $bb17;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i64(out_$i32, in_$i11);
    goto corral_source_split_3738;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    out_$i32 := $p2i.ref.i64(out_$p31);
    goto corral_source_split_3737;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p29, $mul.ref($sub.ref(0, 184), 616)), $mul.ref(184, 1));
    goto corral_source_split_3736;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref(out_$p29, $mul.ref($sub.ref(0, 184), 616));
    goto corral_source_split_3735;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(out_$p28);
    goto corral_source_split_3734;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_3733;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(out_$p14, $mul.ref(0, 616)), $mul.ref(184, 1)), $mul.ref(0, 1));
    goto corral_source_split_3732;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3731;

  $bb9:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    out_$i25 := out_$i19;
    goto $bb16;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i24;
    goto $bb16;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3729;

  $bb11:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := out_$i15;
    goto $bb15;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i23;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3727;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i19;
    goto $bb14;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i15;
    goto $bb14;

  $bb12:
    assume out_$i22 == 1;
    goto corral_source_split_3723;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    out_$i22 := $ult.i32(out_$i15, out_$i19);
    goto corral_source_split_3721;

  $bb10:
    assume out_$i21 == 1;
    goto corral_source_split_3720;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i32(out_$i19, 0);
    goto corral_source_split_3718;

  $bb8:
    assume out_$i20 == 1;
    goto corral_source_split_3717;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i15, 0);
    goto corral_source_split_3715;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    call {:si_unique_call 760} {:cexpr "__y"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_3714;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p17, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3713;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_3712;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p14, $mul.ref(0, 616)), $mul.ref(560, 1));
    goto corral_source_split_3711;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13:
    assume !(out_$i22 == 1);
    goto corral_source_split_3725;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p14, out_$i15, out_$i34 := __minimum_chunk_size_loop_$bb6(in_$i11, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p14, out_$i15, out_$i34);
    return;

  exit:
    return;
}



procedure __minimum_chunk_size_loop_$bb6(in_$i11: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p14: ref, in_$i15: i32, in_$i34: i32) returns (out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p14: ref, out_$i15: i32, out_$i34: i32);



implementation persistent_commit_exception_loop_$bb26(in_$p5: ref, in_$p65: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i68: i32) returns (out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i68: i32)
{

  entry:
    out_$p69, out_$p70, out_$i71, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i68 := in_$p69, in_$p70, in_$i71, in_$p73, in_$p74, in_$p75, in_$p76, in_$p77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i68;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_4257;

  $bb28:
    assume out_$i81 == 1;
    assume {:verifier.code 0} true;
    out_$i68 := out_$i79;
    goto $bb28_dummy;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    out_$i81 := $ugt.i32(out_$i80, out_$i79);
    goto corral_source_split_4271;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.0, in_$p65);
    goto corral_source_split_4270;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i68, 1);
    call {:si_unique_call 843} {:cexpr "i"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_4269;

  SeqInstr_162:
    goto corral_source_split_4268;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.0, out_$p77);
    call {:si_unique_call 842} devirtbounce.19(out_$p74, out_$p76, out_$i78);
    goto SeqInstr_161;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p5, $mul.ref(0, 104)), $mul.ref(12, 1));
    goto corral_source_split_4267;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.0, out_$p75);
    goto corral_source_split_4266;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p70, $mul.ref(out_$i71, 16)), $mul.ref(8, 1));
    goto corral_source_split_4265;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_4264;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p70, $mul.ref(out_$i71, 16)), $mul.ref(0, 1));
    goto corral_source_split_4263;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    goto corral_source_split_4262;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.i32.i64(out_$i68);
    goto corral_source_split_4261;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.0, out_$p69);
    goto corral_source_split_4260;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p5, $mul.ref(0, 104)), $mul.ref(80, 1));
    goto corral_source_split_4259;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p69, out_$p70, out_$i71, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i68 := persistent_commit_exception_loop_$bb26(in_$p5, in_$p65, out_$p69, out_$p70, out_$i71, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i68);
    return;

  exit:
    return;
}



procedure persistent_commit_exception_loop_$bb26(in_$p5: ref, in_$p65: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i68: i32) returns (out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i68: i32);
  modifies $M.0, $M.9, $M.10, $M.11, $M.23, $M.1, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr, $M.31, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35, assertsPassed;



implementation persistent_prepare_merge_loop_$bb14(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p30: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$i42: i64, in_$i43: i64, in_$i44: i64, in_$i45: i64, in_$i46: i1, in_$p48: ref, in_$i49: i64, in_$i50: i64, in_$i51: i64, in_$i52: i64, in_$i53: i1, in_$i47: i32, in_$i55: i32, in_$i56: i32, in_$i57: i1, in_$i34: i32, in_$i58: i32) returns (out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$i42: i64, out_$i43: i64, out_$i44: i64, out_$i45: i64, out_$i46: i1, out_$p48: ref, out_$i49: i64, out_$i50: i64, out_$i51: i64, out_$i52: i64, out_$i53: i1, out_$i47: i32, out_$i55: i32, out_$i56: i32, out_$i57: i1, out_$i34: i32, out_$i58: i32)
{

  entry:
    out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i47, out_$i55, out_$i56, out_$i57, out_$i34, out_$i58 := in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$i40, in_$p41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i47, in_$i55, in_$i56, in_$i57, in_$i34, in_$i58;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4326;

  $bb23:
    assume out_$i57 == 1;
    assume {:verifier.code 0} true;
    out_$i34 := out_$i55;
    goto $bb23_dummy;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    out_$i58 := out_$i55;
    assume true;
    goto $bb23;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    out_$i57 := $ult.i32(out_$i55, out_$i56);
    goto corral_source_split_4356;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i32($M.0, in_$p30);
    goto corral_source_split_4355;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i32(out_$i34, 1);
    call {:si_unique_call 850} {:cexpr "nr_consecutive"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_4354;

  $bb20:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i34;
    assume true;
    goto $bb20;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i64(out_$i49, out_$i52);
    goto corral_source_split_4350;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    out_$i52 := $sub.i64(out_$i50, out_$i51);
    goto corral_source_split_4349;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i32.i64(out_$i34);
    goto corral_source_split_4348;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i64($M.0, in_$p2);
    goto corral_source_split_4347;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i64($M.35, out_$p48);
    goto corral_source_split_4346;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4345;

  $bb18:
    assume !(out_$i46 == 1);
    goto corral_source_split_4344;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i34;
    assume true;
    goto $bb18;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i42, out_$i45);
    goto corral_source_split_4340;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    out_$i45 := $sub.i64(out_$i43, out_$i44);
    goto corral_source_split_4339;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i34);
    goto corral_source_split_4338;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i64($M.0, in_$p1);
    goto corral_source_split_4337;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i64($M.34, out_$p41);
    goto corral_source_split_4336;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4335;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} read_exception(in_$p4, out_$p36, out_$i40, in_$p3);
    goto corral_source_split_4334;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    out_$i40 := $sub.i32(out_$i39, 1);
    goto corral_source_split_4333;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    out_$i39 := $sub.i32(out_$i38, out_$i34);
    goto corral_source_split_4332;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, out_$p37);
    goto corral_source_split_4331;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p4, $mul.ref(0, 104)), $mul.ref(64, 1));
    goto corral_source_split_4330;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_4329;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p4, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_4328;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb23_dummy:
    call {:si_unique_call 1} out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i47, out_$i55, out_$i56, out_$i57, out_$i34, out_$i58 := persistent_prepare_merge_loop_$bb14(in_$p1, in_$p2, in_$p3, in_$p4, in_$p30, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i47, out_$i55, out_$i56, out_$i57, out_$i34, out_$i58);
    return;

  exit:
    return;
}



procedure persistent_prepare_merge_loop_$bb14(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p30: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$i42: i64, in_$i43: i64, in_$i44: i64, in_$i45: i64, in_$i46: i1, in_$p48: ref, in_$i49: i64, in_$i50: i64, in_$i51: i64, in_$i52: i64, in_$i53: i1, in_$i47: i32, in_$i55: i32, in_$i56: i32, in_$i57: i1, in_$i34: i32, in_$i58: i32) returns (out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$i42: i64, out_$i43: i64, out_$i44: i64, out_$i45: i64, out_$i46: i1, out_$p48: ref, out_$i49: i64, out_$i50: i64, out_$i51: i64, out_$i52: i64, out_$i53: i1, out_$i47: i32, out_$i55: i32, out_$i56: i32, out_$i57: i1, out_$i34: i32, out_$i58: i32);
  modifies $M.34, $M.35;



implementation persistent_commit_merge_loop_$bb8(in_$i1: i32, in_$p2: ref, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i11: i32) returns (out_$p12: ref, out_$i13: i32, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i11: i32)
{

  entry:
    out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i11 := in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i11;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4376;

  $bb10:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i16;
    goto $bb10_dummy;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i16, in_$i1);
    goto corral_source_split_4384;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i11, 1);
    call {:si_unique_call 857} {:cexpr "i"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_4383;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} clear_exception(in_$p2, out_$i15);
    goto corral_source_split_4382;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    out_$i15 := $sub.i32(out_$i14, 1);
    goto corral_source_split_4381;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    out_$i14 := $sub.i32(out_$i13, out_$i11);
    goto corral_source_split_4380;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.0, out_$p12);
    goto corral_source_split_4379;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p2, $mul.ref(0, 104)), $mul.ref(64, 1));
    goto corral_source_split_4378;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i11 := persistent_commit_merge_loop_$bb8(in_$i1, in_$p2, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i11);
    return;

  exit:
    return;
}



procedure persistent_commit_merge_loop_$bb8(in_$i1: i32, in_$p2: ref, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i11: i32) returns (out_$p12: ref, out_$i13: i32, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i11: i32);
  modifies $M.0;



implementation persistent_commit_merge_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} persistent_commit_merge_loop_$bb3();
    return;

  exit:
    return;
}



procedure persistent_commit_merge_loop_$bb3();



implementation get_exception_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} get_exception_loop_$bb3();
    return;

  exit:
    return;
}



procedure get_exception_loop_$bb3();



implementation read_exceptions_loop_$bb16(in_$p0: ref, in_$p17: ref, in_$i50: i64, in_$i51: i64, in_$i52: i64, in_$i53: i1, in_$i54: i32, in_$i55: i64, in_$i56: i64, in_$i57: i1, in_$i58: i64, in_$i48: i64, in_$i49: i64, in_$i60: i64, in_$i61: i1, in_$i62: i32, in_$i63: i64, in_$i64: i64, in_$i65: i1, in_$i66: i64, in_$p67: ref, in_$i68: i64, in_$i69: i64, in_$i70: i1, in_$i71: i64) returns (out_$i50: i64, out_$i51: i64, out_$i52: i64, out_$i53: i1, out_$i54: i32, out_$i55: i64, out_$i56: i64, out_$i57: i1, out_$i58: i64, out_$i48: i64, out_$i49: i64, out_$i60: i64, out_$i61: i1, out_$i62: i32, out_$i63: i64, out_$i64: i64, out_$i65: i1, out_$i66: i64, out_$p67: ref, out_$i68: i64, out_$i69: i64, out_$i70: i1, out_$i71: i64)
{

  entry:
    out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i48, out_$i49, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71 := in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i48, in_$i49, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$p67, in_$i68, in_$i69, in_$i70, in_$i71;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    out_$i48, out_$i49 := out_$i51, out_$i50;
    goto $bb19_dummy;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    out_$i58 := out_$i50;
    assume true;
    goto $bb19;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i64(out_$i56, 0);
    goto corral_source_split_4936;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} out_$i56 := ldv__builtin_expect(out_$i55, 0);
    call {:si_unique_call 982} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i56);
    goto corral_source_split_4935;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i54);
    goto corral_source_split_4934;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i1.i32(out_$i53);
    goto corral_source_split_4933;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    out_$i53 := $ule.i64(out_$i52, out_$i51);
    goto corral_source_split_4932;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} out_$i52 := dm_bufio_get_device_size(in_$p17);
    call {:si_unique_call 980} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i52);
    goto corral_source_split_4931;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} out_$i51 := area_location(in_$p0, out_$i50);
    call {:si_unique_call 978} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i51);
    goto corral_source_split_4930;

  $bb17:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4929;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    out_$i50, out_$i71 := out_$i60, out_$i60;
    assume true;
    goto $bb17;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    out_$i70 := $uge.i64(out_$i69, out_$i60);
    goto corral_source_split_4965;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    out_$i69 := $add.i64(out_$i68, 12);
    goto corral_source_split_4964;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i64($M.0, out_$p67);
    goto corral_source_split_4963;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p0, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_4962;

  $bb23:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    out_$i66 := out_$i60;
    assume true;
    goto $bb23;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i64(out_$i64, 0);
    goto corral_source_split_4958;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} out_$i64 := ldv__builtin_expect(out_$i63, 0);
    call {:si_unique_call 993} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i64);
    goto corral_source_split_4957;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    out_$i63 := $sext.i32.i64(out_$i62);
    goto corral_source_split_4956;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i1.i32(out_$i61);
    goto corral_source_split_4955;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i64(out_$i60, 0);
    goto corral_source_split_4954;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i64(out_$i49, 1);
    call {:si_unique_call 991} {:cexpr "prefetch_area"} boogie_si_record_i64(out_$i60);
    goto corral_source_split_4953;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} dm_bufio_prefetch(in_$p17, out_$i48, 1);
    goto corral_source_split_4952;

  $bb19_dummy:
    call {:si_unique_call 1} out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i48, out_$i49, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71 := read_exceptions_loop_$bb16(in_$p0, in_$p17, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i48, out_$i49, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71);
    return;

  exit:
    return;
}



procedure read_exceptions_loop_$bb16(in_$p0: ref, in_$p17: ref, in_$i50: i64, in_$i51: i64, in_$i52: i64, in_$i53: i1, in_$i54: i32, in_$i55: i64, in_$i56: i64, in_$i57: i1, in_$i58: i64, in_$i48: i64, in_$i49: i64, in_$i60: i64, in_$i61: i1, in_$i62: i32, in_$i63: i64, in_$i64: i64, in_$i65: i1, in_$i66: i64, in_$p67: ref, in_$i68: i64, in_$i69: i64, in_$i70: i1, in_$i71: i64) returns (out_$i50: i64, out_$i51: i64, out_$i52: i64, out_$i53: i1, out_$i54: i32, out_$i55: i64, out_$i56: i64, out_$i57: i1, out_$i58: i64, out_$i48: i64, out_$i49: i64, out_$i60: i64, out_$i61: i1, out_$i62: i32, out_$i63: i64, out_$i64: i64, out_$i65: i1, out_$i66: i64, out_$p67: ref, out_$i68: i64, out_$i69: i64, out_$i70: i1, out_$i71: i64);



implementation read_exceptions_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p17: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$i33: i32, in_$i34: i64, in_$i35: i64, in_$i36: i1, in_$p37: ref, in_$i38: i64, in_$i39: i64, in_$i40: i64, in_$i41: i64, in_$i42: i1, in_$i43: i32, in_$i44: i64, in_$i45: i64, in_$i46: i1, in_$i50: i64, in_$i51: i64, in_$i52: i64, in_$i53: i1, in_$i54: i32, in_$i55: i64, in_$i56: i64, in_$i57: i1, in_$i58: i64, in_$i47: i64, in_$i48: i64, in_$i49: i64, in_$i60: i64, in_$i61: i1, in_$i62: i32, in_$i63: i64, in_$i64: i64, in_$i65: i1, in_$i66: i64, in_$p67: ref, in_$i68: i64, in_$i69: i64, in_$i70: i1, in_$i71: i64, in_$i59: i64, in_$p72: ref, in_$i73: i64, in_$i74: i64, in_$p75: ref, in_$i76: i1, in_$i77: i8, in_$i78: i1, in_$i79: i64, in_$i80: i64, in_$i81: i1, in_$p82: ref, in_$i86: i32, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$i94: i32, in_$i95: i32, in_$i96: i64, in_$p97: ref, in_$i98: i1, in_$i99: i32, in_$i100: i64, in_$i101: i64, in_$i102: i1, in_$i103: i32, in_$p104: ref, in_$i105: i64, in_$i106: i64, in_$p107: ref, in_$i108: i32, in_$i109: i1, in_$i29: i64, in_cmdloc_dummy_var_19: [ref]i8, in_cmdloc_dummy_var_20: [ref]i8, in_cmdloc_dummy_var_21: [ref]i8) returns (out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$i33: i32, out_$i34: i64, out_$i35: i64, out_$i36: i1, out_$p37: ref, out_$i38: i64, out_$i39: i64, out_$i40: i64, out_$i41: i64, out_$i42: i1, out_$i43: i32, out_$i44: i64, out_$i45: i64, out_$i46: i1, out_$i50: i64, out_$i51: i64, out_$i52: i64, out_$i53: i1, out_$i54: i32, out_$i55: i64, out_$i56: i64, out_$i57: i1, out_$i58: i64, out_$i47: i64, out_$i48: i64, out_$i49: i64, out_$i60: i64, out_$i61: i1, out_$i62: i32, out_$i63: i64, out_$i64: i64, out_$i65: i1, out_$i66: i64, out_$p67: ref, out_$i68: i64, out_$i69: i64, out_$i70: i1, out_$i71: i64, out_$i59: i64, out_$p72: ref, out_$i73: i64, out_$i74: i64, out_$p75: ref, out_$i76: i1, out_$i77: i8, out_$i78: i1, out_$i79: i64, out_$i80: i64, out_$i81: i1, out_$p82: ref, out_$i86: i32, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$i94: i32, out_$i95: i32, out_$i96: i64, out_$p97: ref, out_$i98: i1, out_$i99: i32, out_$i100: i64, out_$i101: i64, out_$i102: i1, out_$i103: i32, out_$p104: ref, out_$i105: i64, out_$i106: i64, out_$p107: ref, out_$i108: i32, out_$i109: i1, out_$i29: i64, out_cmdloc_dummy_var_19: [ref]i8, out_cmdloc_dummy_var_20: [ref]i8, out_cmdloc_dummy_var_21: [ref]i8)
{

  entry:
    out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i47, out_$i48, out_$i49, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i59, out_$p72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i29, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21 := in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i47, in_$i48, in_$i49, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$p67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i59, in_$p72, in_$i73, in_$i74, in_$p75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$p82, in_$i86, in_$i87, in_$i88, in_$p89, in_$p90, in_$p91, in_$p92, in_$p93, in_$i94, in_$i95, in_$i96, in_$p97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$p104, in_$i105, in_$i106, in_$p107, in_$i108, in_$i109, in_$i29, in_cmdloc_dummy_var_19, in_cmdloc_dummy_var_20, in_cmdloc_dummy_var_21;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4902;

  $bb37:
    assume out_$i109 == 1;
    assume {:verifier.code 0} true;
    out_$i29 := out_$i59;
    goto $bb37_dummy;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    out_$i109 := $ne.i32(out_$i108, 0);
    goto corral_source_split_5006;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i32($M.41, in_$p3);
    goto corral_source_split_5005;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p107, out_$i106);
    goto corral_source_split_5004;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(in_$p0, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_5003;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    out_$i106 := $add.i64(out_$i105, 1);
    goto corral_source_split_5002;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i64($M.0, out_$p104);
    goto corral_source_split_5001;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p0, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_5000;

  $bb35:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    out_$i103 := out_$i86;
    assume true;
    goto $bb35;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i64(out_$i101, 0);
    goto corral_source_split_4996;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} out_$i101 := ldv__builtin_expect(out_$i100, 0);
    call {:si_unique_call 1004} {:cexpr "tmp___10"} boogie_si_record_i64(out_$i101);
    goto corral_source_split_4995;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    out_$i100 := $sext.i32.i64(out_$i99);
    goto corral_source_split_4994;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i1.i32(out_$i98);
    goto corral_source_split_4993;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i32(out_$i86, 0);
    goto corral_source_split_4992;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} dm_bufio_forget(in_$p17, out_$i74);
    goto corral_source_split_4991;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} dm_bufio_release(out_$p97);
    goto corral_source_split_4990;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p97 := $load.ref($M.42, in_$p4);
    goto corral_source_split_4989;

  $bb32:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_19 := $M.0;
    out_cmdloc_dummy_var_20 := $M.0;
    call {:si_unique_call 1000} out_cmdloc_dummy_var_21 := $memcpy.i8(out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_$p90, out_$p75, out_$i96, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_21;
    goto corral_source_split_4987;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i32.i64(out_$i95);
    goto corral_source_split_4986;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    out_$i95 := $shl.i32(out_$i94, 9);
    goto corral_source_split_4985;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i32($M.0, out_$p93);
    goto corral_source_split_4984;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(out_$p92, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4983;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.0, out_$p91);
    goto corral_source_split_4982;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(in_$p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_4981;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    out_$p90 := $load.ref($M.0, out_$p89);
    goto corral_source_split_4980;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_4979;

  $bb31:
    assume out_$i88 == 1;
    goto corral_source_split_4978;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i87, 0);
    goto corral_source_split_4976;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i32($M.41, in_$p3);
    goto corral_source_split_4975;

  SeqInstr_171:
    call {:si_unique_call 999} {:cexpr "r"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_4974;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} out_$i86 := insert_exceptions(in_$p0, out_$p75, in_$p1, in_$p2, in_$p3);
    goto SeqInstr_170;

  $bb28:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    out_$p82 := out_$p75;
    assume true;
    goto $bb28;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    out_$i81 := $ne.i64(out_$i80, 0);
    goto corral_source_split_4950;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} out_$i80 := ldv__builtin_expect(out_$i79, 0);
    call {:si_unique_call 989} {:cexpr "tmp___9"} boogie_si_record_i64(out_$i80);
    goto corral_source_split_4949;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    out_$i79 := $zext.i1.i64(out_$i78);
    goto corral_source_split_4948;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    out_$i78 := $trunc.i8.i1(out_$i77);
    goto corral_source_split_4947;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i1.i8(out_$i76);
    call {:si_unique_call 987} {:cexpr "tmp___8"} boogie_si_record_i8(out_$i77);
    goto corral_source_split_4946;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} out_$i76 := IS_ERR(out_$p75);
    goto corral_source_split_4945;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} out_$p75 := dm_bufio_read(in_$p17, out_$i74, in_$p4);
    goto corral_source_split_4944;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} out_$i74 := area_location(in_$p0, out_$i73);
    call {:si_unique_call 984} {:cexpr "chunk"} boogie_si_record_i64(out_$i74);
    goto corral_source_split_4943;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i64($M.0, out_$p72);
    goto corral_source_split_4942;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p0, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_4941;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_4940;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i59 := out_$i71;
    goto $bb20;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    out_$i59 := out_$i47;
    goto $bb20;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    out_$i59 := out_$i66;
    goto $bb20;

  $bb22:
    assume out_$i65 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4960;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    out_$i66 := out_$i60;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i64(out_$i64, 0);
    goto corral_source_split_4958;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} out_$i64 := ldv__builtin_expect(out_$i63, 0);
    call {:si_unique_call 993} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i64);
    goto corral_source_split_4957;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    out_$i63 := $sext.i32.i64(out_$i62);
    goto corral_source_split_4956;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i1.i32(out_$i61);
    goto corral_source_split_4955;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i64(out_$i60, 0);
    goto corral_source_split_4954;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i64(out_$i49, 1);
    call {:si_unique_call 991} {:cexpr "prefetch_area"} boogie_si_record_i64(out_$i60);
    goto corral_source_split_4953;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} dm_bufio_prefetch(in_$p17, out_$i48, 1);
    goto corral_source_split_4952;

  $bb16:
    call out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i48, out_$i49, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71 := read_exceptions_loop_$bb16(in_$p0, in_$p17, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i48, out_$i49, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71);
    goto $bb16_last;

  $bb16_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    out_$i48, out_$i49 := out_$i40, out_$i39;
    goto $bb16;

  $bb19:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    out_$i48, out_$i49 := out_$i51, out_$i50;
    assume false;
    return;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    out_$i58 := out_$i50;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i64(out_$i56, 0);
    goto corral_source_split_4936;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} out_$i56 := ldv__builtin_expect(out_$i55, 0);
    call {:si_unique_call 982} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i56);
    goto corral_source_split_4935;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i54);
    goto corral_source_split_4934;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i1.i32(out_$i53);
    goto corral_source_split_4933;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    out_$i53 := $ule.i64(out_$i52, out_$i51);
    goto corral_source_split_4932;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} out_$i52 := dm_bufio_get_device_size(in_$p17);
    call {:si_unique_call 980} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i52);
    goto corral_source_split_4931;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} out_$i51 := area_location(in_$p0, out_$i50);
    call {:si_unique_call 978} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i51);
    goto corral_source_split_4930;

  $bb17:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4929;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    out_$i50, out_$i71 := out_$i60, out_$i60;
    assume true;
    goto $bb17, $bb25;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    out_$i70 := $uge.i64(out_$i69, out_$i60);
    goto corral_source_split_4965;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    out_$i69 := $add.i64(out_$i68, 12);
    goto corral_source_split_4964;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i64($M.0, out_$p67);
    goto corral_source_split_4963;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p0, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_4962;

  $bb23:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb15:
    assume !(out_$i46 == 1);
    goto corral_source_split_4927;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i39;
    assume true;
    goto $bb13, $bb15;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, 0);
    goto corral_source_split_4923;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} out_$i45 := ldv__builtin_expect(out_$i44, 0);
    call {:si_unique_call 976} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i45);
    goto corral_source_split_4922;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i43);
    goto corral_source_split_4921;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i1.i32(out_$i42);
    goto corral_source_split_4920;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    out_$i42 := $ule.i64(out_$i41, out_$i40);
    goto corral_source_split_4919;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} out_$i41 := dm_bufio_get_device_size(in_$p17);
    call {:si_unique_call 974} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i41);
    goto corral_source_split_4918;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} out_$i40 := area_location(in_$p0, out_$i39);
    call {:si_unique_call 972} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i40);
    goto corral_source_split_4917;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4916;

  $bb11:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    out_$i39 := out_$i29;
    goto $bb12;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i38;
    goto $bb12;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i64($M.0, out_$p37);
    call {:si_unique_call 970} {:cexpr "prefetch_area"} boogie_si_record_i64(out_$i38);
    goto corral_source_split_4914;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_4913;

  $bb10:
    assume out_$i36 == 1;
    goto corral_source_split_4912;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i64(out_$i35, 0);
    goto corral_source_split_4910;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} out_$i35 := ldv__builtin_expect(out_$i34, 0);
    call {:si_unique_call 969} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i35);
    goto corral_source_split_4909;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i33);
    goto corral_source_split_4908;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i1.i32(out_$i32);
    goto corral_source_split_4907;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    out_$i32 := $ugt.i64(out_$i31, out_$i29);
    goto corral_source_split_4906;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i64($M.0, out_$p30);
    goto corral_source_split_4905;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_4904;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4925;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i58;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i46 == 1;
    goto $bb14;

  $bb18:
    assume out_$i57 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4938;

  $bb25:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb37_dummy:
    call {:si_unique_call 1} out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i47, out_$i48, out_$i49, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i59, out_$p72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i29, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21 := read_exceptions_loop_$bb8(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p17, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i47, out_$i48, out_$i49, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i59, out_$p72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i29, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21);
    return;

  exit:
    return;
}



procedure read_exceptions_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p17: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$i33: i32, in_$i34: i64, in_$i35: i64, in_$i36: i1, in_$p37: ref, in_$i38: i64, in_$i39: i64, in_$i40: i64, in_$i41: i64, in_$i42: i1, in_$i43: i32, in_$i44: i64, in_$i45: i64, in_$i46: i1, in_$i50: i64, in_$i51: i64, in_$i52: i64, in_$i53: i1, in_$i54: i32, in_$i55: i64, in_$i56: i64, in_$i57: i1, in_$i58: i64, in_$i47: i64, in_$i48: i64, in_$i49: i64, in_$i60: i64, in_$i61: i1, in_$i62: i32, in_$i63: i64, in_$i64: i64, in_$i65: i1, in_$i66: i64, in_$p67: ref, in_$i68: i64, in_$i69: i64, in_$i70: i1, in_$i71: i64, in_$i59: i64, in_$p72: ref, in_$i73: i64, in_$i74: i64, in_$p75: ref, in_$i76: i1, in_$i77: i8, in_$i78: i1, in_$i79: i64, in_$i80: i64, in_$i81: i1, in_$p82: ref, in_$i86: i32, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$i94: i32, in_$i95: i32, in_$i96: i64, in_$p97: ref, in_$i98: i1, in_$i99: i32, in_$i100: i64, in_$i101: i64, in_$i102: i1, in_$i103: i32, in_$p104: ref, in_$i105: i64, in_$i106: i64, in_$p107: ref, in_$i108: i32, in_$i109: i1, in_$i29: i64, in_cmdloc_dummy_var_19: [ref]i8, in_cmdloc_dummy_var_20: [ref]i8, in_cmdloc_dummy_var_21: [ref]i8) returns (out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$i33: i32, out_$i34: i64, out_$i35: i64, out_$i36: i1, out_$p37: ref, out_$i38: i64, out_$i39: i64, out_$i40: i64, out_$i41: i64, out_$i42: i1, out_$i43: i32, out_$i44: i64, out_$i45: i64, out_$i46: i1, out_$i50: i64, out_$i51: i64, out_$i52: i64, out_$i53: i1, out_$i54: i32, out_$i55: i64, out_$i56: i64, out_$i57: i1, out_$i58: i64, out_$i47: i64, out_$i48: i64, out_$i49: i64, out_$i60: i64, out_$i61: i1, out_$i62: i32, out_$i63: i64, out_$i64: i64, out_$i65: i1, out_$i66: i64, out_$p67: ref, out_$i68: i64, out_$i69: i64, out_$i70: i1, out_$i71: i64, out_$i59: i64, out_$p72: ref, out_$i73: i64, out_$i74: i64, out_$p75: ref, out_$i76: i1, out_$i77: i8, out_$i78: i1, out_$i79: i64, out_$i80: i64, out_$i81: i1, out_$p82: ref, out_$i86: i32, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$i94: i32, out_$i95: i32, out_$i96: i64, out_$p97: ref, out_$i98: i1, out_$i99: i32, out_$i100: i64, out_$i101: i64, out_$i102: i1, out_$i103: i32, out_$p104: ref, out_$i105: i64, out_$i106: i64, out_$p107: ref, out_$i108: i32, out_$i109: i1, out_$i29: i64, out_cmdloc_dummy_var_19: [ref]i8, out_cmdloc_dummy_var_20: [ref]i8, out_cmdloc_dummy_var_21: [ref]i8);
  modifies $M.0, $M.41, $M.34, $M.35, $CurrAddr, assertsPassed;



implementation insert_exceptions_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$p6: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$i13: i32, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p20: ref, in_$i21: i64, in_$i22: i64, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$i27: i64, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i9: i32) returns (out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$i13: i32, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p20: ref, out_$i21: i64, out_$i22: i64, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$i27: i64, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i9: i32)
{

  entry:
    out_$p10, out_$i11, out_$i12, out_$i13, out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i32, out_$i33, out_$i34, out_$i9 := in_$p10, in_$i11, in_$i12, in_$i13, in_$p15, in_$i16, in_$p17, in_$i18, in_$i19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i32, in_$i33, in_$i34, in_$i9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5039;

  $bb17:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := out_$i32;
    goto $bb17_dummy;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    out_$i34 := $ugt.i32(out_$i33, out_$i32);
    goto corral_source_split_5076;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, in_$p6);
    goto corral_source_split_5075;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i32(out_$i9, 1);
    call {:si_unique_call 1021} {:cexpr "i"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_5074;

  $bb14:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i28;
    assume true;
    goto $bb14;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_5068;

  SeqInstr_174:
    call {:si_unique_call 1020} {:cexpr "r"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_5067;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i64($M.35, out_$p26);
    call {:si_unique_call 1019} out_$i28 := devirtbounce.21(in_$p2, in_$p3, out_$i25, out_$i27);
    goto SeqInstr_173;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5066;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.34, out_$p24);
    goto corral_source_split_5065;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5064;

  $bb11:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p23, out_$i22);
    goto corral_source_split_5062;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 104)), $mul.ref(56, 1));
    goto corral_source_split_5061;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i64(out_$i21, 1);
    goto corral_source_split_5060;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i64($M.35, out_$p20);
    goto corral_source_split_5059;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5058;

  $bb10:
    assume out_$i19 == 1;
    goto corral_source_split_5057;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    out_$i19 := $ule.i64(out_$i16, out_$i18);
    goto corral_source_split_5055;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i64($M.35, out_$p17);
    goto corral_source_split_5054;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5053;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i64($M.0, out_$p15);
    goto corral_source_split_5052;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 104)), $mul.ref(56, 1));
    goto corral_source_split_5051;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i9;
    assume true;
    goto $bb7;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i64(out_$i11, 0);
    goto corral_source_split_5044;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i64($M.35, out_$p10);
    goto corral_source_split_5043;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5042;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} read_exception(in_$p0, in_$p1, out_$i9, in_$p5);
    goto corral_source_split_5041;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p10, out_$i11, out_$i12, out_$i13, out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i32, out_$i33, out_$i34, out_$i9 := insert_exceptions_loop_$bb4(in_$p0, in_$p1, in_$p2, in_$p3, in_$p5, in_$p6, out_$p10, out_$i11, out_$i12, out_$i13, out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i32, out_$i33, out_$i34, out_$i9);
    return;

  exit:
    return;
}



procedure insert_exceptions_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$p6: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$i13: i32, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p20: ref, in_$i21: i64, in_$i22: i64, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$i27: i64, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i9: i32) returns (out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$i13: i32, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p20: ref, out_$i21: i64, out_$i22: i64, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$i27: i64, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i9: i32);
  modifies $M.0, assertsPassed, $M.34, $M.35;



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p23: ref, in_$p25: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p31: ref, in_$p33: ref, in_$p35: ref, in_$p37: ref, in_$p38: ref, in_$p40: ref, in_$p42: ref, in_$p43: ref, in_$i80: i32, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i107: i32, in_$i108: i32, in_$i109: i32, in_$i110: i1, in_$i111: i32, in_$i112: i32, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i116: i32, in_$i118: i32, in_$i119: i1, in_$p120: ref, in_$i121: i32, in_$i123: i32, in_$i124: i1, in_$p125: ref, in_$i126: i32, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$i131: i32, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i136: i32, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$i141: i32, in_$i142: i32, in_$i143: i32, in_$i144: i1, in_$p145: ref, in_$i146: i32, in_$i147: i32, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$i151: i32, in_$i152: i32, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$i156: i32, in_$i157: i32, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$i161: i32, in_$i162: i32, in_$i163: i1, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$p167: ref, in_$i169: i32, in_$i170: i1, in_$p171: ref, in_$p172: ref, in_$i174: i32, in_$i175: i1, in_$p176: ref, in_$p177: ref, in_$i179: i32, in_$i180: i1, in_$p181: ref, in_$p182: ref, in_$i184: i32, in_$i185: i1, in_$p186: ref, in_$p187: ref, in_$i189: i32, in_$i190: i1, in_$p191: ref, in_$i193: i32, in_$i194: i1, in_$p195: ref, in_$i197: i32, in_$i198: i1, in_$p199: ref, in_$i201: i32, in_$i202: i1, in_$p203: ref, in_$i205: i32, in_$i206: i1, in_$p207: ref, in_$i208: i32, in_$i209: i32, in_$i210: i32, in_$i211: i32, in_$i212: i1, in_$p213: ref, in_$i214: i32, in_$i215: i32, in_$i216: i32, in_$i217: i32, in_$i218: i1, in_$p219: ref, in_$i220: i32, in_$i221: i32, in_$i222: i32, in_$i223: i32, in_$i224: i1, in_$p225: ref, in_$i226: i32, in_$i227: i32, in_$i228: i32, in_$i229: i32, in_$i230: i1, in_$p231: ref, in_$i232: i32, in_$i233: i32, in_$i234: i32, in_$i235: i32, in_$i236: i1, in_$p237: ref, in_$i238: i32, in_$i239: i1, in_$i241: i32, in_$i242: i1, in_$i244: i32, in_$i245: i1, in_$i246: i32, in_$i247: i1, in_$i248: i32, in_$i249: i1, in_$i250: i1, in_$i251: i1, in_$i252: i1, in_$i253: i1, in_$i254: i1, in_$i255: i1, in_$i256: i1, in_$i257: i1, in_$i258: i1, in_$i259: i1, in_$i260: i32, in_$i261: i1, in_$p262: ref, in_$i263: i32, in_$i264: i32, in_$i265: i32, in_$i266: i1, in_$i267: i32, in_$i268: i32, in_$i269: i32, in_$i270: i1, in_$p271: ref, in_$i272: i32, in_$i273: i32, in_$i274: i32, in_$i275: i1, in_$p276: ref, in_$i277: i32, in_$i278: i32, in_$i279: i32, in_$i280: i1, in_$p281: ref, in_$i282: i32, in_$i283: i32, in_$i284: i32, in_$i285: i1, in_$p286: ref, in_$i287: i32, in_$i288: i32, in_$i289: i32, in_$i290: i1, in_$p291: ref, in_$p292: ref, in_$i294: i32, in_$i295: i1, in_$p296: ref, in_$p297: ref, in_$i299: i32, in_$i300: i1, in_$p301: ref, in_$p302: ref, in_$i304: i32, in_$i305: i1, in_$p306: ref, in_$p307: ref, in_$i309: i32, in_$i310: i1, in_$p311: ref, in_$p312: ref, in_$i314: i32, in_$i315: i1, in_$p316: ref, in_$i317: i32, in_$i319: i32, in_$i320: i1, in_$p321: ref, in_$i322: i32, in_$i324: i32, in_$i325: i1, in_$p326: ref, in_$i327: i32, in_$i329: i32, in_$i330: i1, in_$p331: ref, in_$i332: i32, in_$i334: i32, in_$i335: i1, in_$p336: ref, in_$i337: i32, in_$i339: i32, in_$i340: i1, in_$p341: ref, in_$i343: i32, in_$i344: i1, in_$p345: ref, in_$i347: i32, in_$i348: i1, in_$p349: ref, in_$i351: i32, in_$i352: i1, in_$p353: ref, in_$i355: i32, in_$i356: i1, in_$p357: ref, in_$i358: i32, in_$i359: i1, in_$p360: ref, in_$i361: i32, in_$i362: i32, in_$i363: i32, in_$i364: i32, in_$i365: i1, in_$p366: ref, in_$i367: i32, in_$i368: i32, in_$i369: i32, in_$i370: i32, in_$i371: i1, in_$p372: ref, in_$i373: i32, in_$i374: i32, in_$i375: i32, in_$i376: i32, in_$i377: i1, in_$p378: ref, in_$i379: i32, in_$i380: i32, in_$i381: i32, in_$i382: i32, in_$i383: i1, in_$p384: ref, in_$i385: i32, in_$i386: i32, in_$i387: i32, in_$i388: i32, in_$i389: i1, in_$p390: ref, in_$i391: i32, in_$i392: i1, in_$i394: i32, in_$i395: i1, in_$i396: i32, in_$i397: i32, in_$i398: i1, in_$i399: i32, in_$i400: i1, in_$i401: i32, in_$i402: i1, in_$i403: i32, in_$i404: i1, in_$i405: i32, in_$i406: i1, in_$i407: i32, in_$i408: i1, in_$i409: i1, in_$i410: i1, in_$i411: i32, in_$i412: i1, in_$i413: i32, in_$i414: i1, in_$i415: i32, in_$i416: i1, in_$i417: i32, in_$i418: i32, in_$i419: i1, in_$i420: i32, in_$i421: i1, in_$i422: i32, in_$i423: i1, in_$i424: i32, in_$i425: i1, in_$i426: i1, in_$i427: i1, in_$i428: i1, in_$i429: i1, in_$i430: i1, in_$i431: i1, in_$i432: i1, in_$i433: i1, in_$i434: i1, in_$i435: i1, in_$i436: i32, in_$i437: i1, in_$p438: ref, in_$i439: i32, in_$i440: i32, in_$i441: i32, in_$i442: i1, in_$i443: i32, in_$i444: i32, in_$i445: i32, in_$i446: i1, in_$p447: ref, in_$i448: i32, in_$i450: i32, in_$i451: i1, in_$p452: ref, in_$i453: i32, in_$i455: i32, in_$i456: i1, in_$p457: ref, in_$i458: i32, in_$i460: i32, in_$i461: i1, in_$p462: ref, in_$i463: i32, in_$i465: i32, in_$i466: i1, in_$p467: ref, in_$i468: i32, in_$i470: i32, in_$i471: i1, in_$p472: ref, in_$i473: i32, in_$i474: i32, in_$i475: i32, in_$i476: i1, in_$p477: ref, in_$i478: i32, in_$i479: i32, in_$i480: i32, in_$i481: i1, in_$p482: ref, in_$i483: i32, in_$i484: i32, in_$i485: i32, in_$i486: i1, in_$p487: ref, in_$i488: i32, in_$i489: i32, in_$i490: i32, in_$i491: i1, in_$p492: ref, in_$p493: ref, in_$i495: i32, in_$i496: i1, in_$p497: ref, in_$p498: ref, in_$i500: i32, in_$i501: i1, in_$p502: ref, in_$p503: ref, in_$i505: i32, in_$i506: i1, in_$p507: ref, in_$p508: ref, in_$i510: i32, in_$i511: i1, in_$p512: ref, in_$p513: ref, in_$i515: i32, in_$i516: i1, in_$p517: ref, in_$i518: i32, in_$i519: i32, in_$i520: i1, in_$i521: i32, in_$i522: i1, in_$p523: ref, in_$i525: i32, in_$i526: i1, in_$p527: ref, in_$i529: i32, in_$i530: i1, in_$p531: ref, in_$i533: i32, in_$i534: i1, in_$p535: ref, in_$i537: i32, in_$i538: i1, in_$p539: ref, in_$i540: i32, in_$i541: i32, in_$i542: i32, in_$i543: i32, in_$i544: i1, in_$p545: ref, in_$i546: i32, in_$i547: i32, in_$i548: i32, in_$i549: i32, in_$i550: i1, in_$p551: ref, in_$i552: i32, in_$i553: i32, in_$i554: i32, in_$i555: i32, in_$i556: i1, in_$p557: ref, in_$i558: i32, in_$i559: i32, in_$i560: i32, in_$i561: i32, in_$i562: i1, in_$p563: ref, in_$i564: i32, in_$i565: i32, in_$i566: i32, in_$i567: i32, in_$i568: i1, in_$p569: ref, in_$i570: i32, in_$i571: i1, in_$p572: ref, in_$i573: i32, in_$i574: i1, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i32, in_vslice_dummy_var_117: i32, in_vslice_dummy_var_118: i32, in_vslice_dummy_var_119: i32) returns (out_$i80: i32, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i107: i32, out_$i108: i32, out_$i109: i32, out_$i110: i1, out_$i111: i32, out_$i112: i32, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i116: i32, out_$i118: i32, out_$i119: i1, out_$p120: ref, out_$i121: i32, out_$i123: i32, out_$i124: i1, out_$p125: ref, out_$i126: i32, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$i131: i32, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i136: i32, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$i141: i32, out_$i142: i32, out_$i143: i32, out_$i144: i1, out_$p145: ref, out_$i146: i32, out_$i147: i32, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$i151: i32, out_$i152: i32, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$i156: i32, out_$i157: i32, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$i161: i32, out_$i162: i32, out_$i163: i1, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$p167: ref, out_$i169: i32, out_$i170: i1, out_$p171: ref, out_$p172: ref, out_$i174: i32, out_$i175: i1, out_$p176: ref, out_$p177: ref, out_$i179: i32, out_$i180: i1, out_$p181: ref, out_$p182: ref, out_$i184: i32, out_$i185: i1, out_$p186: ref, out_$p187: ref, out_$i189: i32, out_$i190: i1, out_$p191: ref, out_$i193: i32, out_$i194: i1, out_$p195: ref, out_$i197: i32, out_$i198: i1, out_$p199: ref, out_$i201: i32, out_$i202: i1, out_$p203: ref, out_$i205: i32, out_$i206: i1, out_$p207: ref, out_$i208: i32, out_$i209: i32, out_$i210: i32, out_$i211: i32, out_$i212: i1, out_$p213: ref, out_$i214: i32, out_$i215: i32, out_$i216: i32, out_$i217: i32, out_$i218: i1, out_$p219: ref, out_$i220: i32, out_$i221: i32, out_$i222: i32, out_$i223: i32, out_$i224: i1, out_$p225: ref, out_$i226: i32, out_$i227: i32, out_$i228: i32, out_$i229: i32, out_$i230: i1, out_$p231: ref, out_$i232: i32, out_$i233: i32, out_$i234: i32, out_$i235: i32, out_$i236: i1, out_$p237: ref, out_$i238: i32, out_$i239: i1, out_$i241: i32, out_$i242: i1, out_$i244: i32, out_$i245: i1, out_$i246: i32, out_$i247: i1, out_$i248: i32, out_$i249: i1, out_$i250: i1, out_$i251: i1, out_$i252: i1, out_$i253: i1, out_$i254: i1, out_$i255: i1, out_$i256: i1, out_$i257: i1, out_$i258: i1, out_$i259: i1, out_$i260: i32, out_$i261: i1, out_$p262: ref, out_$i263: i32, out_$i264: i32, out_$i265: i32, out_$i266: i1, out_$i267: i32, out_$i268: i32, out_$i269: i32, out_$i270: i1, out_$p271: ref, out_$i272: i32, out_$i273: i32, out_$i274: i32, out_$i275: i1, out_$p276: ref, out_$i277: i32, out_$i278: i32, out_$i279: i32, out_$i280: i1, out_$p281: ref, out_$i282: i32, out_$i283: i32, out_$i284: i32, out_$i285: i1, out_$p286: ref, out_$i287: i32, out_$i288: i32, out_$i289: i32, out_$i290: i1, out_$p291: ref, out_$p292: ref, out_$i294: i32, out_$i295: i1, out_$p296: ref, out_$p297: ref, out_$i299: i32, out_$i300: i1, out_$p301: ref, out_$p302: ref, out_$i304: i32, out_$i305: i1, out_$p306: ref, out_$p307: ref, out_$i309: i32, out_$i310: i1, out_$p311: ref, out_$p312: ref, out_$i314: i32, out_$i315: i1, out_$p316: ref, out_$i317: i32, out_$i319: i32, out_$i320: i1, out_$p321: ref, out_$i322: i32, out_$i324: i32, out_$i325: i1, out_$p326: ref, out_$i327: i32, out_$i329: i32, out_$i330: i1, out_$p331: ref, out_$i332: i32, out_$i334: i32, out_$i335: i1, out_$p336: ref, out_$i337: i32, out_$i339: i32, out_$i340: i1, out_$p341: ref, out_$i343: i32, out_$i344: i1, out_$p345: ref, out_$i347: i32, out_$i348: i1, out_$p349: ref, out_$i351: i32, out_$i352: i1, out_$p353: ref, out_$i355: i32, out_$i356: i1, out_$p357: ref, out_$i358: i32, out_$i359: i1, out_$p360: ref, out_$i361: i32, out_$i362: i32, out_$i363: i32, out_$i364: i32, out_$i365: i1, out_$p366: ref, out_$i367: i32, out_$i368: i32, out_$i369: i32, out_$i370: i32, out_$i371: i1, out_$p372: ref, out_$i373: i32, out_$i374: i32, out_$i375: i32, out_$i376: i32, out_$i377: i1, out_$p378: ref, out_$i379: i32, out_$i380: i32, out_$i381: i32, out_$i382: i32, out_$i383: i1, out_$p384: ref, out_$i385: i32, out_$i386: i32, out_$i387: i32, out_$i388: i32, out_$i389: i1, out_$p390: ref, out_$i391: i32, out_$i392: i1, out_$i394: i32, out_$i395: i1, out_$i396: i32, out_$i397: i32, out_$i398: i1, out_$i399: i32, out_$i400: i1, out_$i401: i32, out_$i402: i1, out_$i403: i32, out_$i404: i1, out_$i405: i32, out_$i406: i1, out_$i407: i32, out_$i408: i1, out_$i409: i1, out_$i410: i1, out_$i411: i32, out_$i412: i1, out_$i413: i32, out_$i414: i1, out_$i415: i32, out_$i416: i1, out_$i417: i32, out_$i418: i32, out_$i419: i1, out_$i420: i32, out_$i421: i1, out_$i422: i32, out_$i423: i1, out_$i424: i32, out_$i425: i1, out_$i426: i1, out_$i427: i1, out_$i428: i1, out_$i429: i1, out_$i430: i1, out_$i431: i1, out_$i432: i1, out_$i433: i1, out_$i434: i1, out_$i435: i1, out_$i436: i32, out_$i437: i1, out_$p438: ref, out_$i439: i32, out_$i440: i32, out_$i441: i32, out_$i442: i1, out_$i443: i32, out_$i444: i32, out_$i445: i32, out_$i446: i1, out_$p447: ref, out_$i448: i32, out_$i450: i32, out_$i451: i1, out_$p452: ref, out_$i453: i32, out_$i455: i32, out_$i456: i1, out_$p457: ref, out_$i458: i32, out_$i460: i32, out_$i461: i1, out_$p462: ref, out_$i463: i32, out_$i465: i32, out_$i466: i1, out_$p467: ref, out_$i468: i32, out_$i470: i32, out_$i471: i1, out_$p472: ref, out_$i473: i32, out_$i474: i32, out_$i475: i32, out_$i476: i1, out_$p477: ref, out_$i478: i32, out_$i479: i32, out_$i480: i32, out_$i481: i1, out_$p482: ref, out_$i483: i32, out_$i484: i32, out_$i485: i32, out_$i486: i1, out_$p487: ref, out_$i488: i32, out_$i489: i32, out_$i490: i32, out_$i491: i1, out_$p492: ref, out_$p493: ref, out_$i495: i32, out_$i496: i1, out_$p497: ref, out_$p498: ref, out_$i500: i32, out_$i501: i1, out_$p502: ref, out_$p503: ref, out_$i505: i32, out_$i506: i1, out_$p507: ref, out_$p508: ref, out_$i510: i32, out_$i511: i1, out_$p512: ref, out_$p513: ref, out_$i515: i32, out_$i516: i1, out_$p517: ref, out_$i518: i32, out_$i519: i32, out_$i520: i1, out_$i521: i32, out_$i522: i1, out_$p523: ref, out_$i525: i32, out_$i526: i1, out_$p527: ref, out_$i529: i32, out_$i530: i1, out_$p531: ref, out_$i533: i32, out_$i534: i1, out_$p535: ref, out_$i537: i32, out_$i538: i1, out_$p539: ref, out_$i540: i32, out_$i541: i32, out_$i542: i32, out_$i543: i32, out_$i544: i1, out_$p545: ref, out_$i546: i32, out_$i547: i32, out_$i548: i32, out_$i549: i32, out_$i550: i1, out_$p551: ref, out_$i552: i32, out_$i553: i32, out_$i554: i32, out_$i555: i32, out_$i556: i1, out_$p557: ref, out_$i558: i32, out_$i559: i32, out_$i560: i32, out_$i561: i32, out_$i562: i1, out_$p563: ref, out_$i564: i32, out_$i565: i32, out_$i566: i32, out_$i567: i32, out_$i568: i1, out_$p569: ref, out_$i570: i32, out_$i571: i1, out_$p572: ref, out_$i573: i32, out_$i574: i1, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i32, out_vslice_dummy_var_117: i32, out_vslice_dummy_var_118: i32, out_vslice_dummy_var_119: i32)
{

  entry:
    out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i118, out_$i119, out_$p120, out_$i121, out_$i123, out_$i124, out_$p125, out_$i126, out_$i128, out_$i129, out_$p130, out_$i131, out_$i133, out_$i134, out_$p135, out_$i136, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$p145, out_$i146, out_$i147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$p160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$p166, out_$p167, out_$i169, out_$i170, out_$p171, out_$p172, out_$i174, out_$i175, out_$p176, out_$p177, out_$i179, out_$i180, out_$p181, out_$p182, out_$i184, out_$i185, out_$p186, out_$p187, out_$i189, out_$i190, out_$p191, out_$i193, out_$i194, out_$p195, out_$i197, out_$i198, out_$p199, out_$i201, out_$i202, out_$p203, out_$i205, out_$i206, out_$p207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$p213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$p219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$p225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$p231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$p237, out_$i238, out_$i239, out_$i241, out_$i242, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$p262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$p271, out_$i272, out_$i273, out_$i274, out_$i275, out_$p276, out_$i277, out_$i278, out_$i279, out_$i280, out_$p281, out_$i282, out_$i283, out_$i284, out_$i285, out_$p286, out_$i287, out_$i288, out_$i289, out_$i290, out_$p291, out_$p292, out_$i294, out_$i295, out_$p296, out_$p297, out_$i299, out_$i300, out_$p301, out_$p302, out_$i304, out_$i305, out_$p306, out_$p307, out_$i309, out_$i310, out_$p311, out_$p312, out_$i314, out_$i315, out_$p316, out_$i317, out_$i319, out_$i320, out_$p321, out_$i322, out_$i324, out_$i325, out_$p326, out_$i327, out_$i329, out_$i330, out_$p331, out_$i332, out_$i334, out_$i335, out_$p336, out_$i337, out_$i339, out_$i340, out_$p341, out_$i343, out_$i344, out_$p345, out_$i347, out_$i348, out_$p349, out_$i351, out_$i352, out_$p353, out_$i355, out_$i356, out_$p357, out_$i358, out_$i359, out_$p360, out_$i361, out_$i362, out_$i363, out_$i364, out_$i365, out_$p366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$p372, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$p378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$p384, out_$i385, out_$i386, out_$i387, out_$i388, out_$i389, out_$p390, out_$i391, out_$i392, out_$i394, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i407, out_$i408, out_$i409, out_$i410, out_$i411, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$i436, out_$i437, out_$p438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$i444, out_$i445, out_$i446, out_$p447, out_$i448, out_$i450, out_$i451, out_$p452, out_$i453, out_$i455, out_$i456, out_$p457, out_$i458, out_$i460, out_$i461, out_$p462, out_$i463, out_$i465, out_$i466, out_$p467, out_$i468, out_$i470, out_$i471, out_$p472, out_$i473, out_$i474, out_$i475, out_$i476, out_$p477, out_$i478, out_$i479, out_$i480, out_$i481, out_$p482, out_$i483, out_$i484, out_$i485, out_$i486, out_$p487, out_$i488, out_$i489, out_$i490, out_$i491, out_$p492, out_$p493, out_$i495, out_$i496, out_$p497, out_$p498, out_$i500, out_$i501, out_$p502, out_$p503, out_$i505, out_$i506, out_$p507, out_$p508, out_$i510, out_$i511, out_$p512, out_$p513, out_$i515, out_$i516, out_$p517, out_$i518, out_$i519, out_$i520, out_$i521, out_$i522, out_$p523, out_$i525, out_$i526, out_$p527, out_$i529, out_$i530, out_$p531, out_$i533, out_$i534, out_$p535, out_$i537, out_$i538, out_$p539, out_$i540, out_$i541, out_$i542, out_$i543, out_$i544, out_$p545, out_$i546, out_$i547, out_$i548, out_$i549, out_$i550, out_$p551, out_$i552, out_$i553, out_$i554, out_$i555, out_$i556, out_$p557, out_$i558, out_$i559, out_$i560, out_$i561, out_$i562, out_$p563, out_$i564, out_$i565, out_$i566, out_$i567, out_$i568, out_$p569, out_$i570, out_$i571, out_$p572, out_$i573, out_$i574, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119 := in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$p106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$p115, in_$i116, in_$i118, in_$i119, in_$p120, in_$i121, in_$i123, in_$i124, in_$p125, in_$i126, in_$i128, in_$i129, in_$p130, in_$i131, in_$i133, in_$i134, in_$p135, in_$i136, in_$i138, in_$i139, in_$p140, in_$i141, in_$i142, in_$i143, in_$i144, in_$p145, in_$i146, in_$i147, in_$i148, in_$i149, in_$p150, in_$i151, in_$i152, in_$i153, in_$i154, in_$p155, in_$i156, in_$i157, in_$i158, in_$i159, in_$p160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i165, in_$p166, in_$p167, in_$i169, in_$i170, in_$p171, in_$p172, in_$i174, in_$i175, in_$p176, in_$p177, in_$i179, in_$i180, in_$p181, in_$p182, in_$i184, in_$i185, in_$p186, in_$p187, in_$i189, in_$i190, in_$p191, in_$i193, in_$i194, in_$p195, in_$i197, in_$i198, in_$p199, in_$i201, in_$i202, in_$p203, in_$i205, in_$i206, in_$p207, in_$i208, in_$i209, in_$i210, in_$i211, in_$i212, in_$p213, in_$i214, in_$i215, in_$i216, in_$i217, in_$i218, in_$p219, in_$i220, in_$i221, in_$i222, in_$i223, in_$i224, in_$p225, in_$i226, in_$i227, in_$i228, in_$i229, in_$i230, in_$p231, in_$i232, in_$i233, in_$i234, in_$i235, in_$i236, in_$p237, in_$i238, in_$i239, in_$i241, in_$i242, in_$i244, in_$i245, in_$i246, in_$i247, in_$i248, in_$i249, in_$i250, in_$i251, in_$i252, in_$i253, in_$i254, in_$i255, in_$i256, in_$i257, in_$i258, in_$i259, in_$i260, in_$i261, in_$p262, in_$i263, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$p271, in_$i272, in_$i273, in_$i274, in_$i275, in_$p276, in_$i277, in_$i278, in_$i279, in_$i280, in_$p281, in_$i282, in_$i283, in_$i284, in_$i285, in_$p286, in_$i287, in_$i288, in_$i289, in_$i290, in_$p291, in_$p292, in_$i294, in_$i295, in_$p296, in_$p297, in_$i299, in_$i300, in_$p301, in_$p302, in_$i304, in_$i305, in_$p306, in_$p307, in_$i309, in_$i310, in_$p311, in_$p312, in_$i314, in_$i315, in_$p316, in_$i317, in_$i319, in_$i320, in_$p321, in_$i322, in_$i324, in_$i325, in_$p326, in_$i327, in_$i329, in_$i330, in_$p331, in_$i332, in_$i334, in_$i335, in_$p336, in_$i337, in_$i339, in_$i340, in_$p341, in_$i343, in_$i344, in_$p345, in_$i347, in_$i348, in_$p349, in_$i351, in_$i352, in_$p353, in_$i355, in_$i356, in_$p357, in_$i358, in_$i359, in_$p360, in_$i361, in_$i362, in_$i363, in_$i364, in_$i365, in_$p366, in_$i367, in_$i368, in_$i369, in_$i370, in_$i371, in_$p372, in_$i373, in_$i374, in_$i375, in_$i376, in_$i377, in_$p378, in_$i379, in_$i380, in_$i381, in_$i382, in_$i383, in_$p384, in_$i385, in_$i386, in_$i387, in_$i388, in_$i389, in_$p390, in_$i391, in_$i392, in_$i394, in_$i395, in_$i396, in_$i397, in_$i398, in_$i399, in_$i400, in_$i401, in_$i402, in_$i403, in_$i404, in_$i405, in_$i406, in_$i407, in_$i408, in_$i409, in_$i410, in_$i411, in_$i412, in_$i413, in_$i414, in_$i415, in_$i416, in_$i417, in_$i418, in_$i419, in_$i420, in_$i421, in_$i422, in_$i423, in_$i424, in_$i425, in_$i426, in_$i427, in_$i428, in_$i429, in_$i430, in_$i431, in_$i432, in_$i433, in_$i434, in_$i435, in_$i436, in_$i437, in_$p438, in_$i439, in_$i440, in_$i441, in_$i442, in_$i443, in_$i444, in_$i445, in_$i446, in_$p447, in_$i448, in_$i450, in_$i451, in_$p452, in_$i453, in_$i455, in_$i456, in_$p457, in_$i458, in_$i460, in_$i461, in_$p462, in_$i463, in_$i465, in_$i466, in_$p467, in_$i468, in_$i470, in_$i471, in_$p472, in_$i473, in_$i474, in_$i475, in_$i476, in_$p477, in_$i478, in_$i479, in_$i480, in_$i481, in_$p482, in_$i483, in_$i484, in_$i485, in_$i486, in_$p487, in_$i488, in_$i489, in_$i490, in_$i491, in_$p492, in_$p493, in_$i495, in_$i496, in_$p497, in_$p498, in_$i500, in_$i501, in_$p502, in_$p503, in_$i505, in_$i506, in_$p507, in_$p508, in_$i510, in_$i511, in_$p512, in_$p513, in_$i515, in_$i516, in_$p517, in_$i518, in_$i519, in_$i520, in_$i521, in_$i522, in_$p523, in_$i525, in_$i526, in_$p527, in_$i529, in_$i530, in_$p531, in_$i533, in_$i534, in_$p535, in_$i537, in_$i538, in_$p539, in_$i540, in_$i541, in_$i542, in_$i543, in_$i544, in_$p545, in_$i546, in_$i547, in_$i548, in_$i549, in_$i550, in_$p551, in_$i552, in_$i553, in_$i554, in_$i555, in_$i556, in_$p557, in_$i558, in_$i559, in_$i560, in_$i561, in_$i562, in_$p563, in_$i564, in_$i565, in_$i566, in_$i567, in_$i568, in_$p569, in_$i570, in_$i571, in_$p572, in_$i573, in_$i574, in_vslice_dummy_var_74, in_vslice_dummy_var_75, in_vslice_dummy_var_76, in_vslice_dummy_var_77, in_vslice_dummy_var_78, in_vslice_dummy_var_79, in_vslice_dummy_var_80, in_vslice_dummy_var_81, in_vslice_dummy_var_82, in_vslice_dummy_var_83, in_vslice_dummy_var_84, in_vslice_dummy_var_85, in_vslice_dummy_var_86, in_vslice_dummy_var_87, in_vslice_dummy_var_88, in_vslice_dummy_var_89, in_vslice_dummy_var_90, in_vslice_dummy_var_91, in_vslice_dummy_var_92, in_vslice_dummy_var_93, in_vslice_dummy_var_94, in_vslice_dummy_var_95, in_vslice_dummy_var_96, in_vslice_dummy_var_97, in_vslice_dummy_var_98, in_vslice_dummy_var_99, in_vslice_dummy_var_100, in_vslice_dummy_var_101, in_vslice_dummy_var_102, in_vslice_dummy_var_103, in_vslice_dummy_var_104, in_vslice_dummy_var_105, in_vslice_dummy_var_106, in_vslice_dummy_var_107, in_vslice_dummy_var_108, in_vslice_dummy_var_109, in_vslice_dummy_var_110, in_vslice_dummy_var_111, in_vslice_dummy_var_112, in_vslice_dummy_var_113, in_vslice_dummy_var_114, in_vslice_dummy_var_115, in_vslice_dummy_var_116, in_vslice_dummy_var_117, in_vslice_dummy_var_118, in_vslice_dummy_var_119;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1120} out_$i80 := __VERIFIER_nondet_int();
    call {:si_unique_call 1121} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i80);
    call {:si_unique_call 1122} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i80);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb142_dummy;

  $bb426:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb424:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb23:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb49:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb51:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $M.52 := out_$i112;
    call {:si_unique_call 1129} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i112);
    goto corral_source_split_5368;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    out_$i112 := $add.i32(out_$i111, 1);
    goto corral_source_split_5367;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    out_$i111 := $M.52;
    goto corral_source_split_5366;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1128} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_5365;

  $bb50:
    assume out_$i110 == 1;
    goto corral_source_split_5364;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i32(out_$i109, 0);
    goto corral_source_split_5362;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    out_$i109 := $M.55;
    goto corral_source_split_5361;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $M.55 := out_$i108;
    call {:si_unique_call 1127} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i108);
    goto corral_source_split_5360;

  SeqInstr_198:
    goto corral_source_split_5359;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} out_$i108 := snapshot_ctr(out_$p106, out_$i107, in_$p25);
    goto SeqInstr_197;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    out_$i107 := $load.i32($M.0, in_$p4);
    goto corral_source_split_5358;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    out_$p106 := $M.45;
    goto corral_source_split_5357;

  $bb48:
    assume out_$i105 == 1;
    goto corral_source_split_5356;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i104, 1);
    goto corral_source_split_5354;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    out_$i104 := $M.46;
    goto corral_source_split_5353;

  $bb46:
    assume out_$i103 == 1;
    goto corral_source_split_5352;

  $bb44:
    assume out_$i102 == 1;
    assume {:verifier.code 0} true;
    out_$i103 := $eq.i32(out_$i92, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb38:
    assume out_$i99 == 1;
    assume {:verifier.code 0} true;
    out_$i102 := $slt.i32(out_$i92, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb25:
    assume out_$i93 == 1;
    assume {:verifier.code 0} true;
    out_$i99 := $slt.i32(out_$i92, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i93 := $slt.i32(out_$i92, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_5314:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1123} out_$i92 := __VERIFIER_nondet_int();
    call {:si_unique_call 1124} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i92);
    call {:si_unique_call 1125} {:cexpr "tmp___16"} boogie_si_record_i32(out_$i92);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i91 == 1;
    goto corral_source_split_5314;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    out_$i91 := $ne.i32(out_$i90, 0);
    goto corral_source_split_5312;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    out_$i90 := $M.46;
    goto corral_source_split_5311;

  $bb20:
    assume out_$i89 == 1;
    goto corral_source_split_5310;

  $bb18:
    assume out_$i88 == 1;
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i80, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb14:
    assume out_$i86 == 1;
    assume {:verifier.code 0} true;
    out_$i88 := $slt.i32(out_$i80, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i81 == 1;
    assume {:verifier.code 0} true;
    out_$i86 := $slt.i32(out_$i80, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i81 := $slt.i32(out_$i80, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb68:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $M.46 := 5;
    call {:si_unique_call 1139} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_5410;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} out_vslice_dummy_var_78 := snapshot_end_io(out_$p135, in_$p21, out_$i136);
    goto corral_source_split_5409;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    out_$i136 := $load.i32($M.0, in_$p0);
    goto corral_source_split_5408;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    out_$p135 := $M.45;
    goto corral_source_split_5407;

  $bb67:
    assume out_$i134 == 1;
    goto corral_source_split_5406;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    out_$i134 := $eq.i32(out_$i133, 5);
    goto corral_source_split_5404;

  $bb66:
    assume {:verifier.code 0} true;
    out_$i133 := $M.46;
    goto corral_source_split_5403;

  $bb65:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1137} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_5401;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} out_vslice_dummy_var_77 := snapshot_end_io(out_$p130, in_$p21, out_$i131);
    goto corral_source_split_5400;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    out_$i131 := $load.i32($M.0, in_$p0);
    goto corral_source_split_5399;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    out_$p130 := $M.45;
    goto corral_source_split_5398;

  $bb64:
    assume out_$i129 == 1;
    goto corral_source_split_5397;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    out_$i129 := $eq.i32(out_$i128, 2);
    goto corral_source_split_5395;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i128 := $M.46;
    goto corral_source_split_5394;

  $bb62:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1135} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_5392;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} out_vslice_dummy_var_76 := snapshot_end_io(out_$p125, in_$p21, out_$i126);
    goto corral_source_split_5391;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    out_$i126 := $load.i32($M.0, in_$p0);
    goto corral_source_split_5390;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    out_$p125 := $M.45;
    goto corral_source_split_5389;

  $bb61:
    assume out_$i124 == 1;
    goto corral_source_split_5388;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    out_$i124 := $eq.i32(out_$i123, 3);
    goto corral_source_split_5386;

  $bb60:
    assume {:verifier.code 0} true;
    out_$i123 := $M.46;
    goto corral_source_split_5385;

  $bb59:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1133} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5383;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} out_vslice_dummy_var_75 := snapshot_end_io(out_$p120, in_$p21, out_$i121);
    goto corral_source_split_5382;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i32($M.0, in_$p0);
    goto corral_source_split_5381;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    out_$p120 := $M.45;
    goto corral_source_split_5380;

  $bb58:
    assume out_$i119 == 1;
    goto corral_source_split_5379;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    out_$i119 := $eq.i32(out_$i118, 1);
    goto corral_source_split_5377;

  $bb57:
    assume {:verifier.code 0} true;
    out_$i118 := $M.46;
    goto corral_source_split_5376;

  $bb56:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1131} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_5374;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} out_vslice_dummy_var_74 := snapshot_end_io(out_$p115, in_$p21, out_$i116);
    goto corral_source_split_5373;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i32($M.0, in_$p0);
    goto corral_source_split_5372;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    out_$p115 := $M.45;
    goto corral_source_split_5371;

  $bb55:
    assume out_$i114 == 1;
    goto corral_source_split_5370;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i113, 4);
    goto corral_source_split_5350;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    out_$i113 := $M.46;
    goto corral_source_split_5349;

  $bb45:
    assume !(out_$i102 == 1);
    goto corral_source_split_5348;

  $bb80:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $M.52 := out_$i157;
    call {:si_unique_call 1151} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i157);
    goto corral_source_split_5451;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    out_$i157 := $sub.i32(out_$i156, 1);
    goto corral_source_split_5450;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    out_$i156 := $M.52;
    goto corral_source_split_5449;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1150} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5448;

  SeqInstr_210:
    goto corral_source_split_5447;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} snapshot_dtr(out_$p155);
    goto SeqInstr_209;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    out_$p155 := $M.45;
    goto corral_source_split_5446;

  $bb79:
    assume out_$i154 == 1;
    goto corral_source_split_5445;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    out_$i154 := $eq.i32(out_$i153, 5);
    goto corral_source_split_5443;

  $bb78:
    assume {:verifier.code 0} true;
    out_$i153 := $M.46;
    goto corral_source_split_5442;

  $bb77:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $M.52 := out_$i152;
    call {:si_unique_call 1148} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i152);
    goto corral_source_split_5440;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    out_$i152 := $sub.i32(out_$i151, 1);
    goto corral_source_split_5439;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    out_$i151 := $M.52;
    goto corral_source_split_5438;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1147} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5437;

  SeqInstr_207:
    goto corral_source_split_5436;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} snapshot_dtr(out_$p150);
    goto SeqInstr_206;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    out_$p150 := $M.45;
    goto corral_source_split_5435;

  $bb76:
    assume out_$i149 == 1;
    goto corral_source_split_5434;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    out_$i149 := $eq.i32(out_$i148, 2);
    goto corral_source_split_5432;

  $bb75:
    assume {:verifier.code 0} true;
    out_$i148 := $M.46;
    goto corral_source_split_5431;

  $bb74:
    assume !(out_$i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $M.52 := out_$i147;
    call {:si_unique_call 1145} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i147);
    goto corral_source_split_5429;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    out_$i147 := $sub.i32(out_$i146, 1);
    goto corral_source_split_5428;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    out_$i146 := $M.52;
    goto corral_source_split_5427;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1144} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5426;

  SeqInstr_204:
    goto corral_source_split_5425;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} snapshot_dtr(out_$p145);
    goto SeqInstr_203;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    out_$p145 := $M.45;
    goto corral_source_split_5424;

  $bb73:
    assume out_$i144 == 1;
    goto corral_source_split_5423;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    out_$i144 := $eq.i32(out_$i143, 3);
    goto corral_source_split_5421;

  $bb72:
    assume {:verifier.code 0} true;
    out_$i143 := $M.46;
    goto corral_source_split_5420;

  $bb71:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $M.52 := out_$i142;
    call {:si_unique_call 1142} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i142);
    goto corral_source_split_5418;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    out_$i142 := $sub.i32(out_$i141, 1);
    goto corral_source_split_5417;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    out_$i141 := $M.52;
    goto corral_source_split_5416;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1141} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5415;

  SeqInstr_201:
    goto corral_source_split_5414;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} snapshot_dtr(out_$p140);
    goto SeqInstr_200;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    out_$p140 := $M.45;
    goto corral_source_split_5413;

  $bb70:
    assume out_$i139 == 1;
    goto corral_source_split_5412;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i32(out_$i138, 4);
    goto corral_source_split_5338;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    out_$i138 := $M.46;
    goto corral_source_split_5337;

  $bb40:
    assume out_$i100 == 1;
    goto corral_source_split_5336;

  $bb39:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    out_$i100 := $slt.i32(out_$i92, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb83:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb85:
    assume !(out_$i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $M.46 := 5;
    call {:si_unique_call 1154} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_5461;

  $bb84:
    assume out_$i163 == 1;
    goto corral_source_split_5460;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    out_$i163 := $eq.i32(out_$i162, 0);
    goto corral_source_split_5458;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    out_$i162 := $M.56;
    goto corral_source_split_5457;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $M.56 := out_$i161;
    call {:si_unique_call 1153} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i161);
    goto corral_source_split_5456;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} out_$i161 := snapshot_preresume(out_$p160);
    goto corral_source_split_5455;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    out_$p160 := $M.45;
    goto corral_source_split_5454;

  $bb82:
    assume out_$i159 == 1;
    goto corral_source_split_5453;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i158, 4);
    goto corral_source_split_5342;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    out_$i158 := $M.46;
    goto corral_source_split_5341;

  $bb42:
    assume out_$i101 == 1;
    goto corral_source_split_5340;

  $bb41:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    out_$i101 := $slt.i32(out_$i92, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb101:
    assume !(out_$i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $M.46 := 5;
    call {:si_unique_call 1164} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_5503;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} out_vslice_dummy_var_83 := snapshot_iterate_devices(out_$p186, out_$p187, in_$p19);
    goto corral_source_split_5502;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    out_$p187 := $load.ref($M.0, in_$p2);
    goto corral_source_split_5501;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    out_$p186 := $M.45;
    goto corral_source_split_5500;

  $bb100:
    assume out_$i185 == 1;
    goto corral_source_split_5499;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    out_$i185 := $eq.i32(out_$i184, 5);
    goto corral_source_split_5497;

  $bb99:
    assume {:verifier.code 0} true;
    out_$i184 := $M.46;
    goto corral_source_split_5496;

  $bb98:
    assume !(out_$i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1162} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_5494;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} out_vslice_dummy_var_82 := snapshot_iterate_devices(out_$p181, out_$p182, in_$p19);
    goto corral_source_split_5493;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    out_$p182 := $load.ref($M.0, in_$p2);
    goto corral_source_split_5492;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    out_$p181 := $M.45;
    goto corral_source_split_5491;

  $bb97:
    assume out_$i180 == 1;
    goto corral_source_split_5490;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    out_$i180 := $eq.i32(out_$i179, 2);
    goto corral_source_split_5488;

  $bb96:
    assume {:verifier.code 0} true;
    out_$i179 := $M.46;
    goto corral_source_split_5487;

  $bb95:
    assume !(out_$i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1160} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_5485;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} out_vslice_dummy_var_81 := snapshot_iterate_devices(out_$p176, out_$p177, in_$p19);
    goto corral_source_split_5484;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    out_$p177 := $load.ref($M.0, in_$p2);
    goto corral_source_split_5483;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    out_$p176 := $M.45;
    goto corral_source_split_5482;

  $bb94:
    assume out_$i175 == 1;
    goto corral_source_split_5481;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    out_$i175 := $eq.i32(out_$i174, 3);
    goto corral_source_split_5479;

  $bb93:
    assume {:verifier.code 0} true;
    out_$i174 := $M.46;
    goto corral_source_split_5478;

  $bb92:
    assume !(out_$i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1158} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5476;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} out_vslice_dummy_var_80 := snapshot_iterate_devices(out_$p171, out_$p172, in_$p19);
    goto corral_source_split_5475;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    out_$p172 := $load.ref($M.0, in_$p2);
    goto corral_source_split_5474;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    out_$p171 := $M.45;
    goto corral_source_split_5473;

  $bb91:
    assume out_$i170 == 1;
    goto corral_source_split_5472;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    out_$i170 := $eq.i32(out_$i169, 1);
    goto corral_source_split_5470;

  $bb90:
    assume {:verifier.code 0} true;
    out_$i169 := $M.46;
    goto corral_source_split_5469;

  $bb89:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1156} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_5467;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} out_vslice_dummy_var_79 := snapshot_iterate_devices(out_$p166, out_$p167, in_$p19);
    goto corral_source_split_5466;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    out_$p167 := $load.ref($M.0, in_$p2);
    goto corral_source_split_5465;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    out_$p166 := $M.45;
    goto corral_source_split_5464;

  $bb88:
    assume out_$i165 == 1;
    goto corral_source_split_5463;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    out_$i165 := $eq.i32(out_$i164, 4);
    goto corral_source_split_5346;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    out_$i164 := $M.46;
    goto corral_source_split_5345;

  $bb43:
    assume !(out_$i101 == 1);
    goto corral_source_split_5344;

  $bb113:
    assume !(out_$i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $M.46 := 5;
    call {:si_unique_call 1172} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_5532;

  SeqInstr_222:
    goto corral_source_split_5531;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} out_vslice_dummy_var_87 := snapshot_map(out_$p203, in_$p23);
    goto SeqInstr_221;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    out_$p203 := $M.45;
    goto corral_source_split_5530;

  $bb112:
    assume out_$i202 == 1;
    goto corral_source_split_5529;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    out_$i202 := $eq.i32(out_$i201, 5);
    goto corral_source_split_5527;

  $bb111:
    assume {:verifier.code 0} true;
    out_$i201 := $M.46;
    goto corral_source_split_5526;

  $bb110:
    assume !(out_$i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1170} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_5524;

  SeqInstr_219:
    goto corral_source_split_5523;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} out_vslice_dummy_var_86 := snapshot_map(out_$p199, in_$p23);
    goto SeqInstr_218;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    out_$p199 := $M.45;
    goto corral_source_split_5522;

  $bb109:
    assume out_$i198 == 1;
    goto corral_source_split_5521;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    out_$i198 := $eq.i32(out_$i197, 2);
    goto corral_source_split_5519;

  $bb108:
    assume {:verifier.code 0} true;
    out_$i197 := $M.46;
    goto corral_source_split_5518;

  $bb107:
    assume !(out_$i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1168} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_5516;

  SeqInstr_216:
    goto corral_source_split_5515;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} out_vslice_dummy_var_85 := snapshot_map(out_$p195, in_$p23);
    goto SeqInstr_215;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    out_$p195 := $M.45;
    goto corral_source_split_5514;

  $bb106:
    assume out_$i194 == 1;
    goto corral_source_split_5513;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    out_$i194 := $eq.i32(out_$i193, 3);
    goto corral_source_split_5511;

  $bb105:
    assume {:verifier.code 0} true;
    out_$i193 := $M.46;
    goto corral_source_split_5510;

  $bb104:
    assume !(out_$i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1166} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_5508;

  SeqInstr_213:
    goto corral_source_split_5507;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} out_vslice_dummy_var_84 := snapshot_map(out_$p191, in_$p23);
    goto SeqInstr_212;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    out_$p191 := $M.45;
    goto corral_source_split_5506;

  $bb103:
    assume out_$i190 == 1;
    goto corral_source_split_5505;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    out_$i190 := $eq.i32(out_$i189, 4);
    goto corral_source_split_5330;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    out_$i189 := $M.46;
    goto corral_source_split_5329;

  $bb36:
    assume out_$i98 == 1;
    goto corral_source_split_5328;

  $bb27:
    assume out_$i94 == 1;
    assume {:verifier.code 0} true;
    out_$i98 := $slt.i32(out_$i92, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb26:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    out_$i94 := $slt.i32(out_$i92, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb128:
    assume !(out_$i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $M.46 := 5;
    call {:si_unique_call 1182} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_5584;

  SeqInstr_237:
    goto corral_source_split_5583;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} snapshot_status(out_$p231, out_$i232, out_$i233, in_$p18, out_$i234);
    goto SeqInstr_236;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    out_$i234 := $load.i32($M.0, in_$p1);
    goto corral_source_split_5582;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    out_$i233 := $load.i32($M.0, in_$p3);
    goto corral_source_split_5581;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    out_$i232 := $load.i32($M.0, in_$p5);
    goto corral_source_split_5580;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    out_$p231 := $M.45;
    goto corral_source_split_5579;

  $bb127:
    assume out_$i230 == 1;
    goto corral_source_split_5578;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    out_$i230 := $eq.i32(out_$i229, 5);
    goto corral_source_split_5576;

  $bb126:
    assume {:verifier.code 0} true;
    out_$i229 := $M.46;
    goto corral_source_split_5575;

  $bb125:
    assume !(out_$i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1180} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_5573;

  SeqInstr_234:
    goto corral_source_split_5572;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} snapshot_status(out_$p225, out_$i226, out_$i227, in_$p18, out_$i228);
    goto SeqInstr_233;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    out_$i228 := $load.i32($M.0, in_$p1);
    goto corral_source_split_5571;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    out_$i227 := $load.i32($M.0, in_$p3);
    goto corral_source_split_5570;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    out_$i226 := $load.i32($M.0, in_$p5);
    goto corral_source_split_5569;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    out_$p225 := $M.45;
    goto corral_source_split_5568;

  $bb124:
    assume out_$i224 == 1;
    goto corral_source_split_5567;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    out_$i224 := $eq.i32(out_$i223, 2);
    goto corral_source_split_5565;

  $bb123:
    assume {:verifier.code 0} true;
    out_$i223 := $M.46;
    goto corral_source_split_5564;

  $bb122:
    assume !(out_$i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1178} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_5562;

  SeqInstr_231:
    goto corral_source_split_5561;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} snapshot_status(out_$p219, out_$i220, out_$i221, in_$p18, out_$i222);
    goto SeqInstr_230;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    out_$i222 := $load.i32($M.0, in_$p1);
    goto corral_source_split_5560;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    out_$i221 := $load.i32($M.0, in_$p3);
    goto corral_source_split_5559;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    out_$i220 := $load.i32($M.0, in_$p5);
    goto corral_source_split_5558;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    out_$p219 := $M.45;
    goto corral_source_split_5557;

  $bb121:
    assume out_$i218 == 1;
    goto corral_source_split_5556;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    out_$i218 := $eq.i32(out_$i217, 3);
    goto corral_source_split_5554;

  $bb120:
    assume {:verifier.code 0} true;
    out_$i217 := $M.46;
    goto corral_source_split_5553;

  $bb119:
    assume !(out_$i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1176} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5551;

  SeqInstr_228:
    goto corral_source_split_5550;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} snapshot_status(out_$p213, out_$i214, out_$i215, in_$p18, out_$i216);
    goto SeqInstr_227;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    out_$i216 := $load.i32($M.0, in_$p1);
    goto corral_source_split_5549;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    out_$i215 := $load.i32($M.0, in_$p3);
    goto corral_source_split_5548;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    out_$i214 := $load.i32($M.0, in_$p5);
    goto corral_source_split_5547;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    out_$p213 := $M.45;
    goto corral_source_split_5546;

  $bb118:
    assume out_$i212 == 1;
    goto corral_source_split_5545;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    out_$i212 := $eq.i32(out_$i211, 1);
    goto corral_source_split_5543;

  $bb117:
    assume {:verifier.code 0} true;
    out_$i211 := $M.46;
    goto corral_source_split_5542;

  $bb116:
    assume !(out_$i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1174} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_5540;

  SeqInstr_225:
    goto corral_source_split_5539;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} snapshot_status(out_$p207, out_$i208, out_$i209, in_$p18, out_$i210);
    goto SeqInstr_224;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    out_$i210 := $load.i32($M.0, in_$p1);
    goto corral_source_split_5538;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    out_$i209 := $load.i32($M.0, in_$p3);
    goto corral_source_split_5537;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    out_$i208 := $load.i32($M.0, in_$p5);
    goto corral_source_split_5536;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    out_$p207 := $M.45;
    goto corral_source_split_5535;

  $bb115:
    assume out_$i206 == 1;
    goto corral_source_split_5534;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    out_$i206 := $eq.i32(out_$i205, 4);
    goto corral_source_split_5334;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    out_$i205 := $M.46;
    goto corral_source_split_5333;

  $bb37:
    assume !(out_$i98 == 1);
    goto corral_source_split_5332;

  $bb131:
    assume !(out_$i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1184} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_5589;

  SeqInstr_240:
    goto corral_source_split_5588;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} snapshot_resume(out_$p237);
    goto SeqInstr_239;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    out_$p237 := $M.45;
    goto corral_source_split_5587;

  $bb130:
    assume out_$i236 == 1;
    goto corral_source_split_5586;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    out_$i236 := $eq.i32(out_$i235, 5);
    goto corral_source_split_5318;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    out_$i235 := $M.46;
    goto corral_source_split_5317;

  $bb29:
    assume out_$i95 == 1;
    goto corral_source_split_5316;

  $bb28:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    out_$i95 := $slt.i32(out_$i92, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb134:
    assume !(out_$i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1186} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_5593;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} out_vslice_dummy_var_88 := ldv_presuspend_6();
    goto corral_source_split_5592;

  $bb133:
    assume out_$i239 == 1;
    goto corral_source_split_5591;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    out_$i239 := $eq.i32(out_$i238, 2);
    goto corral_source_split_5322;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    out_$i238 := $M.46;
    goto corral_source_split_5321;

  $bb31:
    assume out_$i96 == 1;
    goto corral_source_split_5320;

  $bb30:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    out_$i96 := $slt.i32(out_$i92, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb137:
    assume !(out_$i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1188} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_5597;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} out_vslice_dummy_var_89 := ldv_postsuspend_6();
    goto corral_source_split_5596;

  $bb136:
    assume out_$i242 == 1;
    goto corral_source_split_5595;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    out_$i242 := $eq.i32(out_$i241, 3);
    goto corral_source_split_5326;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    out_$i241 := $M.46;
    goto corral_source_split_5325;

  $bb33:
    assume out_$i97 == 1;
    goto corral_source_split_5324;

  $bb32:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i32(out_$i92, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} ldv_stop();
    goto corral_source_split_5599;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb34:
    assume {:verifier.code 0} true;
    assume !(out_$i97 == 1);
    goto $bb35;

  $bb47:
    assume {:verifier.code 0} true;
    assume !(out_$i103 == 1);
    goto $bb35;

  $bb144:
    assume !(out_$i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    goto $bb145;

  SeqInstr_243:
    goto corral_source_split_5602;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} ldv_main_exported_3();
    goto SeqInstr_242;

  $bb143:
    assume out_$i245 == 1;
    goto corral_source_split_5601;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    out_$i245 := $ne.i32(out_$i244, 0);
    goto corral_source_split_5308;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    out_$i244 := $M.47;
    goto corral_source_split_5307;

  $bb19:
    assume !(out_$i88 == 1);
    goto corral_source_split_5306;

  $bb147:
    assume !(out_$i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb173:
    assume !(out_$i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb175:
    assume !(out_$i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    goto $bb176;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $M.52 := out_$i268;
    call {:si_unique_call 1197} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i268);
    goto corral_source_split_5658;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    out_$i268 := $add.i32(out_$i267, 1);
    goto corral_source_split_5657;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    out_$i267 := $M.52;
    goto corral_source_split_5656;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1196} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_5655;

  $bb174:
    assume out_$i266 == 1;
    goto corral_source_split_5654;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    out_$i266 := $eq.i32(out_$i265, 0);
    goto corral_source_split_5652;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    out_$i265 := $M.57;
    goto corral_source_split_5651;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $M.57 := out_$i264;
    call {:si_unique_call 1195} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i264);
    goto corral_source_split_5650;

  SeqInstr_246:
    goto corral_source_split_5649;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} out_$i264 := origin_ctr(out_$p262, out_$i263, in_$p31);
    goto SeqInstr_245;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    out_$i263 := $load.i32($M.0, in_$p10);
    goto corral_source_split_5648;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    out_$p262 := $M.44;
    goto corral_source_split_5647;

  $bb172:
    assume out_$i261 == 1;
    goto corral_source_split_5646;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    out_$i261 := $eq.i32(out_$i260, 1);
    goto corral_source_split_5644;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    out_$i260 := $M.48;
    goto corral_source_split_5643;

  $bb170:
    assume out_$i259 == 1;
    goto corral_source_split_5642;

  $bb168:
    assume out_$i258 == 1;
    assume {:verifier.code 0} true;
    out_$i259 := $eq.i32(out_$i248, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb162:
    assume out_$i255 == 1;
    assume {:verifier.code 0} true;
    out_$i258 := $slt.i32(out_$i248, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb149:
    assume out_$i249 == 1;
    assume {:verifier.code 0} true;
    out_$i255 := $slt.i32(out_$i248, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb148:
    assume {:verifier.code 0} true;
    out_$i249 := $slt.i32(out_$i248, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_5604:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1191} out_$i248 := __VERIFIER_nondet_int();
    call {:si_unique_call 1192} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i248);
    call {:si_unique_call 1193} {:cexpr "tmp___17"} boogie_si_record_i32(out_$i248);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb146:
    assume out_$i247 == 1;
    goto corral_source_split_5604;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    out_$i247 := $ne.i32(out_$i246, 0);
    goto corral_source_split_5300;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    out_$i246 := $M.48;
    goto corral_source_split_5299;

  $bb16:
    assume out_$i87 == 1;
    goto corral_source_split_5298;

  $bb15:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    out_$i87 := $slt.i32(out_$i80, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb189:
    assume !(out_$i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $M.52 := out_$i288;
    call {:si_unique_call 1209} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i288);
    goto corral_source_split_5699;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    out_$i288 := $sub.i32(out_$i287, 1);
    goto corral_source_split_5698;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    out_$i287 := $M.52;
    goto corral_source_split_5697;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1208} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5696;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} origin_dtr(out_$p286);
    goto corral_source_split_5695;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    out_$p286 := $M.44;
    goto corral_source_split_5694;

  $bb188:
    assume out_$i285 == 1;
    goto corral_source_split_5693;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    out_$i285 := $eq.i32(out_$i284, 5);
    goto corral_source_split_5691;

  $bb187:
    assume {:verifier.code 0} true;
    out_$i284 := $M.48;
    goto corral_source_split_5690;

  $bb186:
    assume !(out_$i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $M.52 := out_$i283;
    call {:si_unique_call 1206} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i283);
    goto corral_source_split_5688;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    out_$i283 := $sub.i32(out_$i282, 1);
    goto corral_source_split_5687;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    out_$i282 := $M.52;
    goto corral_source_split_5686;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1205} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5685;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} origin_dtr(out_$p281);
    goto corral_source_split_5684;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    out_$p281 := $M.44;
    goto corral_source_split_5683;

  $bb185:
    assume out_$i280 == 1;
    goto corral_source_split_5682;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    out_$i280 := $eq.i32(out_$i279, 2);
    goto corral_source_split_5680;

  $bb184:
    assume {:verifier.code 0} true;
    out_$i279 := $M.48;
    goto corral_source_split_5679;

  $bb183:
    assume !(out_$i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $M.52 := out_$i278;
    call {:si_unique_call 1203} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i278);
    goto corral_source_split_5677;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    out_$i278 := $sub.i32(out_$i277, 1);
    goto corral_source_split_5676;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    out_$i277 := $M.52;
    goto corral_source_split_5675;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1202} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5674;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} origin_dtr(out_$p276);
    goto corral_source_split_5673;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    out_$p276 := $M.44;
    goto corral_source_split_5672;

  $bb182:
    assume out_$i275 == 1;
    goto corral_source_split_5671;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    out_$i275 := $eq.i32(out_$i274, 3);
    goto corral_source_split_5669;

  $bb181:
    assume {:verifier.code 0} true;
    out_$i274 := $M.48;
    goto corral_source_split_5668;

  $bb180:
    assume !(out_$i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    goto $bb181;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $M.52 := out_$i273;
    call {:si_unique_call 1200} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i273);
    goto corral_source_split_5666;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    out_$i273 := $sub.i32(out_$i272, 1);
    goto corral_source_split_5665;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    out_$i272 := $M.52;
    goto corral_source_split_5664;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1199} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5663;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} origin_dtr(out_$p271);
    goto corral_source_split_5662;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    out_$p271 := $M.44;
    goto corral_source_split_5661;

  $bb179:
    assume out_$i270 == 1;
    goto corral_source_split_5660;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    out_$i270 := $eq.i32(out_$i269, 4);
    goto corral_source_split_5640;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    out_$i269 := $M.48;
    goto corral_source_split_5639;

  $bb169:
    assume !(out_$i258 == 1);
    goto corral_source_split_5638;

  $bb204:
    assume !(out_$i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $M.48 := 5;
    call {:si_unique_call 1219} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(5);
    goto corral_source_split_5741;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} out_vslice_dummy_var_94 := origin_iterate_devices(out_$p311, out_$p312, in_$p28);
    goto corral_source_split_5740;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    out_$p312 := $load.ref($M.0, in_$p8);
    goto corral_source_split_5739;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    out_$p311 := $M.44;
    goto corral_source_split_5738;

  $bb203:
    assume out_$i310 == 1;
    goto corral_source_split_5737;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    out_$i310 := $eq.i32(out_$i309, 5);
    goto corral_source_split_5735;

  $bb202:
    assume {:verifier.code 0} true;
    out_$i309 := $M.48;
    goto corral_source_split_5734;

  $bb201:
    assume !(out_$i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1217} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_5732;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} out_vslice_dummy_var_93 := origin_iterate_devices(out_$p306, out_$p307, in_$p28);
    goto corral_source_split_5731;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    out_$p307 := $load.ref($M.0, in_$p8);
    goto corral_source_split_5730;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    out_$p306 := $M.44;
    goto corral_source_split_5729;

  $bb200:
    assume out_$i305 == 1;
    goto corral_source_split_5728;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    out_$i305 := $eq.i32(out_$i304, 2);
    goto corral_source_split_5726;

  $bb199:
    assume {:verifier.code 0} true;
    out_$i304 := $M.48;
    goto corral_source_split_5725;

  $bb198:
    assume !(out_$i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 1215} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_5723;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} out_vslice_dummy_var_92 := origin_iterate_devices(out_$p301, out_$p302, in_$p28);
    goto corral_source_split_5722;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    out_$p302 := $load.ref($M.0, in_$p8);
    goto corral_source_split_5721;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    out_$p301 := $M.44;
    goto corral_source_split_5720;

  $bb197:
    assume out_$i300 == 1;
    goto corral_source_split_5719;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    out_$i300 := $eq.i32(out_$i299, 3);
    goto corral_source_split_5717;

  $bb196:
    assume {:verifier.code 0} true;
    out_$i299 := $M.48;
    goto corral_source_split_5716;

  $bb195:
    assume !(out_$i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    goto $bb196;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1213} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5714;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} out_vslice_dummy_var_91 := origin_iterate_devices(out_$p296, out_$p297, in_$p28);
    goto corral_source_split_5713;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    out_$p297 := $load.ref($M.0, in_$p8);
    goto corral_source_split_5712;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    out_$p296 := $M.44;
    goto corral_source_split_5711;

  $bb194:
    assume out_$i295 == 1;
    goto corral_source_split_5710;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    out_$i295 := $eq.i32(out_$i294, 1);
    goto corral_source_split_5708;

  $bb193:
    assume {:verifier.code 0} true;
    out_$i294 := $M.48;
    goto corral_source_split_5707;

  $bb192:
    assume !(out_$i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $M.48 := 4;
    call {:si_unique_call 1211} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_5705;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} out_vslice_dummy_var_90 := origin_iterate_devices(out_$p291, out_$p292, in_$p28);
    goto corral_source_split_5704;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    out_$p292 := $load.ref($M.0, in_$p8);
    goto corral_source_split_5703;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    out_$p291 := $M.44;
    goto corral_source_split_5702;

  $bb191:
    assume out_$i290 == 1;
    goto corral_source_split_5701;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    out_$i290 := $eq.i32(out_$i289, 4);
    goto corral_source_split_5628;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    out_$i289 := $M.48;
    goto corral_source_split_5627;

  $bb164:
    assume out_$i256 == 1;
    goto corral_source_split_5626;

  $bb163:
    assume !(out_$i255 == 1);
    assume {:verifier.code 0} true;
    out_$i256 := $slt.i32(out_$i248, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb219:
    assume !(out_$i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $M.48 := 5;
    call {:si_unique_call 1229} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(5);
    goto corral_source_split_5783;

  SeqInstr_261:
    goto corral_source_split_5782;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} out_vslice_dummy_var_99 := origin_merge(out_$p336, in_$p33, in_$p35, out_$i337);
    goto SeqInstr_260;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    out_$i337 := $load.i32($M.0, in_$p11);
    goto corral_source_split_5781;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    out_$p336 := $M.44;
    goto corral_source_split_5780;

  $bb218:
    assume out_$i335 == 1;
    goto corral_source_split_5779;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    out_$i335 := $eq.i32(out_$i334, 5);
    goto corral_source_split_5777;

  $bb217:
    assume {:verifier.code 0} true;
    out_$i334 := $M.48;
    goto corral_source_split_5776;

  $bb216:
    assume !(out_$i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    goto $bb217;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1227} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_5774;

  SeqInstr_258:
    goto corral_source_split_5773;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} out_vslice_dummy_var_98 := origin_merge(out_$p331, in_$p33, in_$p35, out_$i332);
    goto SeqInstr_257;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    out_$i332 := $load.i32($M.0, in_$p11);
    goto corral_source_split_5772;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    out_$p331 := $M.44;
    goto corral_source_split_5771;

  $bb215:
    assume out_$i330 == 1;
    goto corral_source_split_5770;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    out_$i330 := $eq.i32(out_$i329, 2);
    goto corral_source_split_5768;

  $bb214:
    assume {:verifier.code 0} true;
    out_$i329 := $M.48;
    goto corral_source_split_5767;

  $bb213:
    assume !(out_$i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 1225} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_5765;

  SeqInstr_255:
    goto corral_source_split_5764;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} out_vslice_dummy_var_97 := origin_merge(out_$p326, in_$p33, in_$p35, out_$i327);
    goto SeqInstr_254;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    out_$i327 := $load.i32($M.0, in_$p11);
    goto corral_source_split_5763;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    out_$p326 := $M.44;
    goto corral_source_split_5762;

  $bb212:
    assume out_$i325 == 1;
    goto corral_source_split_5761;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    out_$i325 := $eq.i32(out_$i324, 3);
    goto corral_source_split_5759;

  $bb211:
    assume {:verifier.code 0} true;
    out_$i324 := $M.48;
    goto corral_source_split_5758;

  $bb210:
    assume !(out_$i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1223} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5756;

  SeqInstr_252:
    goto corral_source_split_5755;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} out_vslice_dummy_var_96 := origin_merge(out_$p321, in_$p33, in_$p35, out_$i322);
    goto SeqInstr_251;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    out_$i322 := $load.i32($M.0, in_$p11);
    goto corral_source_split_5754;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    out_$p321 := $M.44;
    goto corral_source_split_5753;

  $bb209:
    assume out_$i320 == 1;
    goto corral_source_split_5752;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    out_$i320 := $eq.i32(out_$i319, 1);
    goto corral_source_split_5750;

  $bb208:
    assume {:verifier.code 0} true;
    out_$i319 := $M.48;
    goto corral_source_split_5749;

  $bb207:
    assume !(out_$i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    goto $bb208;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $M.48 := 4;
    call {:si_unique_call 1221} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_5747;

  SeqInstr_249:
    goto corral_source_split_5746;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} out_vslice_dummy_var_95 := origin_merge(out_$p316, in_$p33, in_$p35, out_$i317);
    goto SeqInstr_248;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    out_$i317 := $load.i32($M.0, in_$p11);
    goto corral_source_split_5745;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    out_$p316 := $M.44;
    goto corral_source_split_5744;

  $bb206:
    assume out_$i315 == 1;
    goto corral_source_split_5743;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    out_$i315 := $eq.i32(out_$i314, 4);
    goto corral_source_split_5632;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    out_$i314 := $M.48;
    goto corral_source_split_5631;

  $bb166:
    assume out_$i257 == 1;
    goto corral_source_split_5630;

  $bb165:
    assume !(out_$i256 == 1);
    assume {:verifier.code 0} true;
    out_$i257 := $slt.i32(out_$i248, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb231:
    assume !(out_$i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $M.48 := 5;
    call {:si_unique_call 1237} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(5);
    goto corral_source_split_5812;

  SeqInstr_273:
    goto corral_source_split_5811;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} out_vslice_dummy_var_103 := origin_map(out_$p353, in_$p27);
    goto SeqInstr_272;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    out_$p353 := $M.44;
    goto corral_source_split_5810;

  $bb230:
    assume out_$i352 == 1;
    goto corral_source_split_5809;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    out_$i352 := $eq.i32(out_$i351, 5);
    goto corral_source_split_5807;

  $bb229:
    assume {:verifier.code 0} true;
    out_$i351 := $M.48;
    goto corral_source_split_5806;

  $bb228:
    assume !(out_$i348 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    goto $bb229;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1235} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_5804;

  SeqInstr_270:
    goto corral_source_split_5803;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} out_vslice_dummy_var_102 := origin_map(out_$p349, in_$p27);
    goto SeqInstr_269;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    out_$p349 := $M.44;
    goto corral_source_split_5802;

  $bb227:
    assume out_$i348 == 1;
    goto corral_source_split_5801;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    out_$i348 := $eq.i32(out_$i347, 2);
    goto corral_source_split_5799;

  $bb226:
    assume {:verifier.code 0} true;
    out_$i347 := $M.48;
    goto corral_source_split_5798;

  $bb225:
    assume !(out_$i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 1233} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_5796;

  SeqInstr_267:
    goto corral_source_split_5795;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} out_vslice_dummy_var_101 := origin_map(out_$p345, in_$p27);
    goto SeqInstr_266;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    out_$p345 := $M.44;
    goto corral_source_split_5794;

  $bb224:
    assume out_$i344 == 1;
    goto corral_source_split_5793;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    out_$i344 := $eq.i32(out_$i343, 3);
    goto corral_source_split_5791;

  $bb223:
    assume {:verifier.code 0} true;
    out_$i343 := $M.48;
    goto corral_source_split_5790;

  $bb222:
    assume !(out_$i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $M.48 := 4;
    call {:si_unique_call 1231} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_5788;

  SeqInstr_264:
    goto corral_source_split_5787;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} out_vslice_dummy_var_100 := origin_map(out_$p341, in_$p27);
    goto SeqInstr_263;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    out_$p341 := $M.44;
    goto corral_source_split_5786;

  $bb221:
    assume out_$i340 == 1;
    goto corral_source_split_5785;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    out_$i340 := $eq.i32(out_$i339, 4);
    goto corral_source_split_5636;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    out_$i339 := $M.48;
    goto corral_source_split_5635;

  $bb167:
    assume !(out_$i257 == 1);
    goto corral_source_split_5634;

  $bb234:
    assume !(out_$i356 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $M.48 := 4;
    call {:si_unique_call 1239} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_5817;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} origin_postsuspend(out_$p357);
    goto corral_source_split_5816;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    out_$p357 := $M.44;
    goto corral_source_split_5815;

  $bb233:
    assume out_$i356 == 1;
    goto corral_source_split_5814;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    out_$i356 := $eq.i32(out_$i355, 3);
    goto corral_source_split_5620;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    out_$i355 := $M.48;
    goto corral_source_split_5619;

  $bb160:
    assume out_$i254 == 1;
    goto corral_source_split_5618;

  $bb151:
    assume out_$i250 == 1;
    assume {:verifier.code 0} true;
    out_$i254 := $slt.i32(out_$i248, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb150:
    assume !(out_$i249 == 1);
    assume {:verifier.code 0} true;
    out_$i250 := $slt.i32(out_$i248, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb249:
    assume !(out_$i383 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $M.48 := 5;
    call {:si_unique_call 1249} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(5);
    goto corral_source_split_5869;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} origin_status(out_$p384, out_$i385, out_$i386, in_$p29, out_$i387);
    goto corral_source_split_5868;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    out_$i387 := $load.i32($M.0, in_$p7);
    goto corral_source_split_5867;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    out_$i386 := $load.i32($M.0, in_$p6);
    goto corral_source_split_5866;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    out_$i385 := $load.i32($M.0, in_$p9);
    goto corral_source_split_5865;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    out_$p384 := $M.44;
    goto corral_source_split_5864;

  $bb248:
    assume out_$i383 == 1;
    goto corral_source_split_5863;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    out_$i383 := $eq.i32(out_$i382, 5);
    goto corral_source_split_5861;

  $bb247:
    assume {:verifier.code 0} true;
    out_$i382 := $M.48;
    goto corral_source_split_5860;

  $bb246:
    assume !(out_$i377 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1247} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_5858;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} origin_status(out_$p378, out_$i379, out_$i380, in_$p29, out_$i381);
    goto corral_source_split_5857;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    out_$i381 := $load.i32($M.0, in_$p7);
    goto corral_source_split_5856;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    out_$i380 := $load.i32($M.0, in_$p6);
    goto corral_source_split_5855;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    out_$i379 := $load.i32($M.0, in_$p9);
    goto corral_source_split_5854;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    out_$p378 := $M.44;
    goto corral_source_split_5853;

  $bb245:
    assume out_$i377 == 1;
    goto corral_source_split_5852;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    out_$i377 := $eq.i32(out_$i376, 2);
    goto corral_source_split_5850;

  $bb244:
    assume {:verifier.code 0} true;
    out_$i376 := $M.48;
    goto corral_source_split_5849;

  $bb243:
    assume !(out_$i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 1245} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_5847;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} origin_status(out_$p372, out_$i373, out_$i374, in_$p29, out_$i375);
    goto corral_source_split_5846;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    out_$i375 := $load.i32($M.0, in_$p7);
    goto corral_source_split_5845;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    out_$i374 := $load.i32($M.0, in_$p6);
    goto corral_source_split_5844;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    out_$i373 := $load.i32($M.0, in_$p9);
    goto corral_source_split_5843;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    out_$p372 := $M.44;
    goto corral_source_split_5842;

  $bb242:
    assume out_$i371 == 1;
    goto corral_source_split_5841;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    out_$i371 := $eq.i32(out_$i370, 3);
    goto corral_source_split_5839;

  $bb241:
    assume {:verifier.code 0} true;
    out_$i370 := $M.48;
    goto corral_source_split_5838;

  $bb240:
    assume !(out_$i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1243} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5836;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} origin_status(out_$p366, out_$i367, out_$i368, in_$p29, out_$i369);
    goto corral_source_split_5835;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    out_$i369 := $load.i32($M.0, in_$p7);
    goto corral_source_split_5834;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    out_$i368 := $load.i32($M.0, in_$p6);
    goto corral_source_split_5833;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    out_$i367 := $load.i32($M.0, in_$p9);
    goto corral_source_split_5832;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    out_$p366 := $M.44;
    goto corral_source_split_5831;

  $bb239:
    assume out_$i365 == 1;
    goto corral_source_split_5830;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    out_$i365 := $eq.i32(out_$i364, 1);
    goto corral_source_split_5828;

  $bb238:
    assume {:verifier.code 0} true;
    out_$i364 := $M.48;
    goto corral_source_split_5827;

  $bb237:
    assume !(out_$i359 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    goto $bb238;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $M.48 := 4;
    call {:si_unique_call 1241} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_5825;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} origin_status(out_$p360, out_$i361, out_$i362, in_$p29, out_$i363);
    goto corral_source_split_5824;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    out_$i363 := $load.i32($M.0, in_$p7);
    goto corral_source_split_5823;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    out_$i362 := $load.i32($M.0, in_$p6);
    goto corral_source_split_5822;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    out_$i361 := $load.i32($M.0, in_$p9);
    goto corral_source_split_5821;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    out_$p360 := $M.44;
    goto corral_source_split_5820;

  $bb236:
    assume out_$i359 == 1;
    goto corral_source_split_5819;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    out_$i359 := $eq.i32(out_$i358, 4);
    goto corral_source_split_5624;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    out_$i358 := $M.48;
    goto corral_source_split_5623;

  $bb161:
    assume !(out_$i254 == 1);
    goto corral_source_split_5622;

  $bb252:
    assume !(out_$i389 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1251} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_5874;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} origin_resume(out_$p390);
    goto corral_source_split_5873;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    out_$p390 := $M.44;
    goto corral_source_split_5872;

  $bb251:
    assume out_$i389 == 1;
    goto corral_source_split_5871;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    out_$i389 := $eq.i32(out_$i388, 5);
    goto corral_source_split_5608;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    out_$i388 := $M.48;
    goto corral_source_split_5607;

  $bb153:
    assume out_$i251 == 1;
    goto corral_source_split_5606;

  $bb152:
    assume !(out_$i250 == 1);
    assume {:verifier.code 0} true;
    out_$i251 := $slt.i32(out_$i248, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb255:
    assume !(out_$i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 1253} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_5878;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} out_vslice_dummy_var_104 := ldv_presuspend_7();
    goto corral_source_split_5877;

  $bb254:
    assume out_$i392 == 1;
    goto corral_source_split_5876;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    out_$i392 := $eq.i32(out_$i391, 2);
    goto corral_source_split_5612;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    out_$i391 := $M.48;
    goto corral_source_split_5611;

  $bb155:
    assume out_$i252 == 1;
    goto corral_source_split_5610;

  $bb154:
    assume !(out_$i251 == 1);
    assume {:verifier.code 0} true;
    out_$i252 := $slt.i32(out_$i248, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb258:
    assume !(out_$i395 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb260:
    assume !(out_$i398 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    goto $bb261;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $M.48 := 5;
    call {:si_unique_call 1256} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(5);
    goto corral_source_split_5887;

  $bb259:
    assume out_$i398 == 1;
    goto corral_source_split_5886;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    out_$i398 := $eq.i32(out_$i397, 0);
    goto corral_source_split_5884;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    out_$i397 := $M.58;
    goto corral_source_split_5883;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $M.58 := out_$i396;
    call {:si_unique_call 1255} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i396);
    goto corral_source_split_5882;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} out_$i396 := ldv_preresume_7();
    goto corral_source_split_5881;

  $bb257:
    assume out_$i395 == 1;
    goto corral_source_split_5880;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    out_$i395 := $eq.i32(out_$i394, 4);
    goto corral_source_split_5616;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    out_$i394 := $M.48;
    goto corral_source_split_5615;

  $bb157:
    assume out_$i253 == 1;
    goto corral_source_split_5614;

  $bb156:
    assume !(out_$i252 == 1);
    assume {:verifier.code 0} true;
    out_$i253 := $eq.i32(out_$i248, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} ldv_stop();
    goto corral_source_split_5889;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb158:
    assume {:verifier.code 0} true;
    assume !(out_$i253 == 1);
    goto $bb159;

  $bb171:
    assume {:verifier.code 0} true;
    assume !(out_$i259 == 1);
    goto $bb159;

  $bb267:
    assume !(out_$i400 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    goto $bb268;

  SeqInstr_276:
    goto corral_source_split_5892;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} ldv_main_exported_2();
    goto SeqInstr_275;

  $bb266:
    assume out_$i400 == 1;
    goto corral_source_split_5891;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    out_$i400 := $ne.i32(out_$i399, 0);
    goto corral_source_split_5304;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    out_$i399 := $M.49;
    goto corral_source_split_5303;

  $bb17:
    assume !(out_$i87 == 1);
    goto corral_source_split_5302;

  $bb270:
    assume !(out_$i402 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    goto $bb271;

  SeqInstr_279:
    goto corral_source_split_5895;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} ldv_main_exported_1();
    goto SeqInstr_278;

  $bb269:
    assume out_$i402 == 1;
    goto corral_source_split_5894;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    out_$i402 := $ne.i32(out_$i401, 0);
    goto corral_source_split_5292;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    out_$i401 := $M.50;
    goto corral_source_split_5291;

  $bb12:
    assume out_$i85 == 1;
    goto corral_source_split_5290;

  $bb5:
    assume out_$i82 == 1;
    assume {:verifier.code 0} true;
    out_$i85 := $slt.i32(out_$i80, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    out_$i82 := $slt.i32(out_$i80, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb273:
    assume !(out_$i404 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    goto $bb274;

  SeqInstr_282:
    goto corral_source_split_5898;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} ldv_main_exported_4();
    goto SeqInstr_281;

  $bb272:
    assume out_$i404 == 1;
    goto corral_source_split_5897;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    out_$i404 := $ne.i32(out_$i403, 0);
    goto corral_source_split_5296;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    out_$i403 := $M.51;
    goto corral_source_split_5295;

  $bb13:
    assume !(out_$i85 == 1);
    goto corral_source_split_5294;

  $bb276:
    assume !(out_$i406 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb286:
    assume {:verifier.code 0} true;
    assume !(out_$i412 == 1);
    goto $bb287;

  $bb289:
    assume {:verifier.code 0} true;
    assume !(out_$i414 == 1);
    goto $bb287;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    out_$i414 := $eq.i32(out_$i413, 0);
    goto corral_source_split_5912;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    out_$i413 := $M.52;
    goto corral_source_split_5911;

  $bb285:
    assume out_$i412 == 1;
    goto corral_source_split_5910;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    out_$i412 := $eq.i32(out_$i411, 3);
    goto corral_source_split_5908;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    out_$i411 := $M.53;
    goto corral_source_split_5907;

  $bb283:
    assume out_$i410 == 1;
    goto corral_source_split_5906;

  $bb278:
    assume out_$i408 == 1;
    assume {:verifier.code 0} true;
    out_$i410 := $eq.i32(out_$i407, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  $bb277:
    assume {:verifier.code 0} true;
    out_$i408 := $slt.i32(out_$i407, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  corral_source_split_5900:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1261} out_$i407 := __VERIFIER_nondet_int();
    call {:si_unique_call 1262} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i407);
    call {:si_unique_call 1263} {:cexpr "tmp___18"} boogie_si_record_i32(out_$i407);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb275:
    assume out_$i406 == 1;
    goto corral_source_split_5900;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    out_$i406 := $ne.i32(out_$i405, 0);
    goto corral_source_split_5284;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    out_$i405 := $M.53;
    goto corral_source_split_5283;

  $bb7:
    assume out_$i83 == 1;
    goto corral_source_split_5282;

  $bb6:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    out_$i83 := $slt.i32(out_$i80, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb294:
    assume !(out_$i416 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb299:
    assume !(out_$i421 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    out_$i421 := $ne.i32(out_$i420, 0);
    goto corral_source_split_5944;

  $bb297:
    assume {:verifier.code 0} true;
    out_$i420 := $M.59;
    goto corral_source_split_5943;

  $bb296:
    assume !(out_$i419 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    goto $bb297;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} ldv_target_type_6();
    goto corral_source_split_5941;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1282} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5940;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} ldv_initialize_dm_exception_store_type_4();
    goto corral_source_split_5939;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1280} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5938;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} ldv_initialize_dm_exception_store_type_1();
    goto corral_source_split_5937;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1278} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5936;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} ldv_initialize_dm_exception_store_type_3();
    goto corral_source_split_5935;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1276} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5934;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} ldv_target_type_7();
    goto corral_source_split_5933;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1274} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5932;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} ldv_initialize_dm_exception_store_type_2();
    goto corral_source_split_5931;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1272} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5930;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} ldv_target_type_5();
    goto corral_source_split_5929;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1270} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5928;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $M.53 := 3;
    call {:si_unique_call 1269} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_5927;

  $bb295:
    assume out_$i419 == 1;
    goto corral_source_split_5926;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    out_$i419 := $eq.i32(out_$i418, 0);
    goto corral_source_split_5924;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    out_$i418 := $M.59;
    goto corral_source_split_5923;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $M.59 := out_$i417;
    call {:si_unique_call 1268} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i417);
    goto corral_source_split_5922;

  SeqInstr_285:
    goto corral_source_split_5921;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} out_$i417 := dm_snapshot_init();
    goto SeqInstr_284;

  $bb293:
    assume out_$i416 == 1;
    goto corral_source_split_5920;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    out_$i416 := $eq.i32(out_$i415, 1);
    goto corral_source_split_5904;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    out_$i415 := $M.53;
    goto corral_source_split_5903;

  $bb280:
    assume out_$i409 == 1;
    goto corral_source_split_5902;

  $bb279:
    assume !(out_$i408 == 1);
    assume {:verifier.code 0} true;
    out_$i409 := $eq.i32(out_$i407, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} ldv_stop();
    goto corral_source_split_5949;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb281:
    assume {:verifier.code 0} true;
    assume !(out_$i409 == 1);
    goto $bb282;

  $bb284:
    assume {:verifier.code 0} true;
    assume !(out_$i410 == 1);
    goto $bb282;

  $bb306:
    assume !(out_$i423 == 1);
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb337:
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb423:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb421:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb418:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb415:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb412:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb397:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb385:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb379:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb364:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb352:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb332:
    assume !(out_$i437 == 1);
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb335:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb334:
    assume !(out_$i442 == 1);
    assume {:verifier.code 0} true;
    goto $bb335;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    goto $bb335;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $M.52 := out_$i444;
    call {:si_unique_call 1292} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i444);
    goto corral_source_split_6005;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    out_$i444 := $add.i32(out_$i443, 1);
    goto corral_source_split_6004;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    out_$i443 := $M.52;
    goto corral_source_split_6003;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $M.54 := 2;
    call {:si_unique_call 1291} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_6002;

  $bb333:
    assume out_$i442 == 1;
    goto corral_source_split_6001;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb333, $bb334;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    out_$i442 := $eq.i32(out_$i441, 0);
    goto corral_source_split_5999;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    out_$i441 := $M.60;
    goto corral_source_split_5998;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $M.60 := out_$i440;
    call {:si_unique_call 1290} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i440);
    goto corral_source_split_5997;

  SeqInstr_288:
    goto corral_source_split_5996;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} out_$i440 := snapshot_ctr(out_$p438, out_$i439, in_$p42);
    goto SeqInstr_287;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    out_$i439 := $load.i32($M.0, in_$p15);
    goto corral_source_split_5995;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    out_$p438 := $M.43;
    goto corral_source_split_5994;

  $bb331:
    assume out_$i437 == 1;
    goto corral_source_split_5993;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    out_$i437 := $eq.i32(out_$i436, 1);
    goto corral_source_split_5991;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    out_$i436 := $M.54;
    goto corral_source_split_5990;

  $bb329:
    assume out_$i435 == 1;
    goto corral_source_split_5989;

  $bb327:
    assume out_$i434 == 1;
    assume {:verifier.code 0} true;
    out_$i435 := $eq.i32(out_$i424, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  $bb321:
    assume out_$i431 == 1;
    assume {:verifier.code 0} true;
    out_$i434 := $slt.i32(out_$i424, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb327, $bb328;

  $bb308:
    assume out_$i425 == 1;
    assume {:verifier.code 0} true;
    out_$i431 := $slt.i32(out_$i424, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb321, $bb322;

  $bb307:
    assume {:verifier.code 0} true;
    out_$i425 := $slt.i32(out_$i424, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  corral_source_split_5951:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1286} out_$i424 := __VERIFIER_nondet_int();
    call {:si_unique_call 1287} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i424);
    call {:si_unique_call 1288} {:cexpr "tmp___19"} boogie_si_record_i32(out_$i424);
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb305:
    assume out_$i423 == 1;
    goto corral_source_split_5951;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    out_$i423 := $ne.i32(out_$i422, 0);
    goto corral_source_split_5288;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    out_$i422 := $M.54;
    goto corral_source_split_5287;

  $bb9:
    assume out_$i84 == 1;
    goto corral_source_split_5286;

  $bb8:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i80, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb351:
    assume !(out_$i466 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    goto $bb352;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $M.54 := 5;
    call {:si_unique_call 1302} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_6047;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} out_vslice_dummy_var_109 := snapshot_end_io(out_$p467, in_$p40, out_$i468);
    goto corral_source_split_6046;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    out_$i468 := $load.i32($M.0, in_$p12);
    goto corral_source_split_6045;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    out_$p467 := $M.43;
    goto corral_source_split_6044;

  $bb350:
    assume out_$i466 == 1;
    goto corral_source_split_6043;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    out_$i466 := $eq.i32(out_$i465, 5);
    goto corral_source_split_6041;

  $bb349:
    assume {:verifier.code 0} true;
    out_$i465 := $M.54;
    goto corral_source_split_6040;

  $bb348:
    assume !(out_$i461 == 1);
    assume {:verifier.code 0} true;
    goto $bb349;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    goto $bb349;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $M.54 := 2;
    call {:si_unique_call 1300} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_6038;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} out_vslice_dummy_var_108 := snapshot_end_io(out_$p462, in_$p40, out_$i463);
    goto corral_source_split_6037;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    out_$i463 := $load.i32($M.0, in_$p12);
    goto corral_source_split_6036;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    out_$p462 := $M.43;
    goto corral_source_split_6035;

  $bb347:
    assume out_$i461 == 1;
    goto corral_source_split_6034;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb347, $bb348;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    out_$i461 := $eq.i32(out_$i460, 2);
    goto corral_source_split_6032;

  $bb346:
    assume {:verifier.code 0} true;
    out_$i460 := $M.54;
    goto corral_source_split_6031;

  $bb345:
    assume !(out_$i456 == 1);
    assume {:verifier.code 0} true;
    goto $bb346;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    goto $bb346;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $M.54 := 3;
    call {:si_unique_call 1298} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_6029;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} out_vslice_dummy_var_107 := snapshot_end_io(out_$p457, in_$p40, out_$i458);
    goto corral_source_split_6028;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    out_$i458 := $load.i32($M.0, in_$p12);
    goto corral_source_split_6027;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    out_$p457 := $M.43;
    goto corral_source_split_6026;

  $bb344:
    assume out_$i456 == 1;
    goto corral_source_split_6025;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    out_$i456 := $eq.i32(out_$i455, 3);
    goto corral_source_split_6023;

  $bb343:
    assume {:verifier.code 0} true;
    out_$i455 := $M.54;
    goto corral_source_split_6022;

  $bb342:
    assume !(out_$i451 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    goto $bb343;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1296} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6020;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} out_vslice_dummy_var_106 := snapshot_end_io(out_$p452, in_$p40, out_$i453);
    goto corral_source_split_6019;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    out_$i453 := $load.i32($M.0, in_$p12);
    goto corral_source_split_6018;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    out_$p452 := $M.43;
    goto corral_source_split_6017;

  $bb341:
    assume out_$i451 == 1;
    goto corral_source_split_6016;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    out_$i451 := $eq.i32(out_$i450, 1);
    goto corral_source_split_6014;

  $bb340:
    assume {:verifier.code 0} true;
    out_$i450 := $M.54;
    goto corral_source_split_6013;

  $bb339:
    assume !(out_$i446 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    goto $bb340;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $M.54 := 4;
    call {:si_unique_call 1294} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_6011;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} out_vslice_dummy_var_105 := snapshot_end_io(out_$p447, in_$p40, out_$i448);
    goto corral_source_split_6010;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    out_$i448 := $load.i32($M.0, in_$p12);
    goto corral_source_split_6009;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    out_$p447 := $M.43;
    goto corral_source_split_6008;

  $bb338:
    assume out_$i446 == 1;
    goto corral_source_split_6007;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    out_$i446 := $eq.i32(out_$i445, 4);
    goto corral_source_split_5987;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    out_$i445 := $M.54;
    goto corral_source_split_5986;

  $bb328:
    assume !(out_$i434 == 1);
    goto corral_source_split_5985;

  $bb363:
    assume !(out_$i486 == 1);
    assume {:verifier.code 0} true;
    goto $bb364;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    goto $bb364;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $M.52 := out_$i489;
    call {:si_unique_call 1314} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i489);
    goto corral_source_split_6088;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    out_$i489 := $sub.i32(out_$i488, 1);
    goto corral_source_split_6087;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    out_$i488 := $M.52;
    goto corral_source_split_6086;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1313} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6085;

  SeqInstr_300:
    goto corral_source_split_6084;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} snapshot_dtr(out_$p487);
    goto SeqInstr_299;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    out_$p487 := $M.43;
    goto corral_source_split_6083;

  $bb362:
    assume out_$i486 == 1;
    goto corral_source_split_6082;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb362, $bb363;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    out_$i486 := $eq.i32(out_$i485, 5);
    goto corral_source_split_6080;

  $bb361:
    assume {:verifier.code 0} true;
    out_$i485 := $M.54;
    goto corral_source_split_6079;

  $bb360:
    assume !(out_$i481 == 1);
    assume {:verifier.code 0} true;
    goto $bb361;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    goto $bb361;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $M.52 := out_$i484;
    call {:si_unique_call 1311} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i484);
    goto corral_source_split_6077;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    out_$i484 := $sub.i32(out_$i483, 1);
    goto corral_source_split_6076;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    out_$i483 := $M.52;
    goto corral_source_split_6075;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1310} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6074;

  SeqInstr_297:
    goto corral_source_split_6073;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} snapshot_dtr(out_$p482);
    goto SeqInstr_296;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    out_$p482 := $M.43;
    goto corral_source_split_6072;

  $bb359:
    assume out_$i481 == 1;
    goto corral_source_split_6071;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb359, $bb360;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    out_$i481 := $eq.i32(out_$i480, 2);
    goto corral_source_split_6069;

  $bb358:
    assume {:verifier.code 0} true;
    out_$i480 := $M.54;
    goto corral_source_split_6068;

  $bb357:
    assume !(out_$i476 == 1);
    assume {:verifier.code 0} true;
    goto $bb358;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    goto $bb358;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $M.52 := out_$i479;
    call {:si_unique_call 1308} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i479);
    goto corral_source_split_6066;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    out_$i479 := $sub.i32(out_$i478, 1);
    goto corral_source_split_6065;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    out_$i478 := $M.52;
    goto corral_source_split_6064;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1307} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6063;

  SeqInstr_294:
    goto corral_source_split_6062;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} snapshot_dtr(out_$p477);
    goto SeqInstr_293;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    out_$p477 := $M.43;
    goto corral_source_split_6061;

  $bb356:
    assume out_$i476 == 1;
    goto corral_source_split_6060;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    out_$i476 := $eq.i32(out_$i475, 3);
    goto corral_source_split_6058;

  $bb355:
    assume {:verifier.code 0} true;
    out_$i475 := $M.54;
    goto corral_source_split_6057;

  $bb354:
    assume !(out_$i471 == 1);
    assume {:verifier.code 0} true;
    goto $bb355;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    goto $bb355;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $M.52 := out_$i474;
    call {:si_unique_call 1305} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i474);
    goto corral_source_split_6055;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    out_$i474 := $sub.i32(out_$i473, 1);
    goto corral_source_split_6054;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    out_$i473 := $M.52;
    goto corral_source_split_6053;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1304} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6052;

  SeqInstr_291:
    goto corral_source_split_6051;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} snapshot_dtr(out_$p472);
    goto SeqInstr_290;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    out_$p472 := $M.43;
    goto corral_source_split_6050;

  $bb353:
    assume out_$i471 == 1;
    goto corral_source_split_6049;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb353, $bb354;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    out_$i471 := $eq.i32(out_$i470, 4);
    goto corral_source_split_5975;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    out_$i470 := $M.54;
    goto corral_source_split_5974;

  $bb323:
    assume out_$i432 == 1;
    goto corral_source_split_5973;

  $bb322:
    assume !(out_$i431 == 1);
    assume {:verifier.code 0} true;
    out_$i432 := $slt.i32(out_$i424, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb323, $bb324;

  $bb378:
    assume !(out_$i511 == 1);
    assume {:verifier.code 0} true;
    goto $bb379;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    goto $bb379;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $M.54 := 5;
    call {:si_unique_call 1324} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_6130;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} out_vslice_dummy_var_114 := snapshot_iterate_devices(out_$p512, out_$p513, in_$p43);
    goto corral_source_split_6129;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    out_$p513 := $load.ref($M.0, in_$p17);
    goto corral_source_split_6128;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    out_$p512 := $M.43;
    goto corral_source_split_6127;

  $bb377:
    assume out_$i511 == 1;
    goto corral_source_split_6126;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb377, $bb378;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    out_$i511 := $eq.i32(out_$i510, 5);
    goto corral_source_split_6124;

  $bb376:
    assume {:verifier.code 0} true;
    out_$i510 := $M.54;
    goto corral_source_split_6123;

  $bb375:
    assume !(out_$i506 == 1);
    assume {:verifier.code 0} true;
    goto $bb376;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    goto $bb376;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $M.54 := 2;
    call {:si_unique_call 1322} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_6121;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} out_vslice_dummy_var_113 := snapshot_iterate_devices(out_$p507, out_$p508, in_$p43);
    goto corral_source_split_6120;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    out_$p508 := $load.ref($M.0, in_$p17);
    goto corral_source_split_6119;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    out_$p507 := $M.43;
    goto corral_source_split_6118;

  $bb374:
    assume out_$i506 == 1;
    goto corral_source_split_6117;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb374, $bb375;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    out_$i506 := $eq.i32(out_$i505, 2);
    goto corral_source_split_6115;

  $bb373:
    assume {:verifier.code 0} true;
    out_$i505 := $M.54;
    goto corral_source_split_6114;

  $bb372:
    assume !(out_$i501 == 1);
    assume {:verifier.code 0} true;
    goto $bb373;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    goto $bb373;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $M.54 := 3;
    call {:si_unique_call 1320} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_6112;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} out_vslice_dummy_var_112 := snapshot_iterate_devices(out_$p502, out_$p503, in_$p43);
    goto corral_source_split_6111;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    out_$p503 := $load.ref($M.0, in_$p17);
    goto corral_source_split_6110;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    out_$p502 := $M.43;
    goto corral_source_split_6109;

  $bb371:
    assume out_$i501 == 1;
    goto corral_source_split_6108;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb371, $bb372;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    out_$i501 := $eq.i32(out_$i500, 3);
    goto corral_source_split_6106;

  $bb370:
    assume {:verifier.code 0} true;
    out_$i500 := $M.54;
    goto corral_source_split_6105;

  $bb369:
    assume !(out_$i496 == 1);
    assume {:verifier.code 0} true;
    goto $bb370;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    goto $bb370;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1318} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6103;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} out_vslice_dummy_var_111 := snapshot_iterate_devices(out_$p497, out_$p498, in_$p43);
    goto corral_source_split_6102;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    out_$p498 := $load.ref($M.0, in_$p17);
    goto corral_source_split_6101;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    out_$p497 := $M.43;
    goto corral_source_split_6100;

  $bb368:
    assume out_$i496 == 1;
    goto corral_source_split_6099;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb368, $bb369;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    out_$i496 := $eq.i32(out_$i495, 1);
    goto corral_source_split_6097;

  $bb367:
    assume {:verifier.code 0} true;
    out_$i495 := $M.54;
    goto corral_source_split_6096;

  $bb366:
    assume !(out_$i491 == 1);
    assume {:verifier.code 0} true;
    goto $bb367;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    goto $bb367;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $M.54 := 4;
    call {:si_unique_call 1316} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_6094;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} out_vslice_dummy_var_110 := snapshot_iterate_devices(out_$p492, out_$p493, in_$p43);
    goto corral_source_split_6093;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    out_$p493 := $load.ref($M.0, in_$p17);
    goto corral_source_split_6092;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    out_$p492 := $M.43;
    goto corral_source_split_6091;

  $bb365:
    assume out_$i491 == 1;
    goto corral_source_split_6090;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb365, $bb366;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    out_$i491 := $eq.i32(out_$i490, 4);
    goto corral_source_split_5979;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    out_$i490 := $M.54;
    goto corral_source_split_5978;

  $bb325:
    assume out_$i433 == 1;
    goto corral_source_split_5977;

  $bb324:
    assume !(out_$i432 == 1);
    assume {:verifier.code 0} true;
    out_$i433 := $slt.i32(out_$i424, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  $bb381:
    assume !(out_$i516 == 1);
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb384:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb383:
    assume !(out_$i520 == 1);
    assume {:verifier.code 0} true;
    goto $bb384;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    goto $bb384;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $M.54 := 5;
    call {:si_unique_call 1327} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_6140;

  $bb382:
    assume out_$i520 == 1;
    goto corral_source_split_6139;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb382, $bb383;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    out_$i520 := $eq.i32(out_$i519, 0);
    goto corral_source_split_6137;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    out_$i519 := $M.61;
    goto corral_source_split_6136;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $M.61 := out_$i518;
    call {:si_unique_call 1326} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i518);
    goto corral_source_split_6135;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} out_$i518 := snapshot_preresume(out_$p517);
    goto corral_source_split_6134;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    out_$p517 := $M.43;
    goto corral_source_split_6133;

  $bb380:
    assume out_$i516 == 1;
    goto corral_source_split_6132;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb380, $bb381;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    out_$i516 := $eq.i32(out_$i515, 4);
    goto corral_source_split_5983;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    out_$i515 := $M.54;
    goto corral_source_split_5982;

  $bb326:
    assume !(out_$i433 == 1);
    goto corral_source_split_5981;

  $bb396:
    assume !(out_$i534 == 1);
    assume {:verifier.code 0} true;
    goto $bb397;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    goto $bb397;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $M.54 := 5;
    call {:si_unique_call 1335} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_6169;

  SeqInstr_312:
    goto corral_source_split_6168;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} out_vslice_dummy_var_118 := snapshot_merge_map(out_$p535, in_$p37);
    goto SeqInstr_311;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    out_$p535 := $M.43;
    goto corral_source_split_6167;

  $bb395:
    assume out_$i534 == 1;
    goto corral_source_split_6166;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb395, $bb396;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    out_$i534 := $eq.i32(out_$i533, 5);
    goto corral_source_split_6164;

  $bb394:
    assume {:verifier.code 0} true;
    out_$i533 := $M.54;
    goto corral_source_split_6163;

  $bb393:
    assume !(out_$i530 == 1);
    assume {:verifier.code 0} true;
    goto $bb394;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    goto $bb394;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $M.54 := 2;
    call {:si_unique_call 1333} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_6161;

  SeqInstr_309:
    goto corral_source_split_6160;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} out_vslice_dummy_var_117 := snapshot_merge_map(out_$p531, in_$p37);
    goto SeqInstr_308;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    out_$p531 := $M.43;
    goto corral_source_split_6159;

  $bb392:
    assume out_$i530 == 1;
    goto corral_source_split_6158;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb392, $bb393;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    out_$i530 := $eq.i32(out_$i529, 2);
    goto corral_source_split_6156;

  $bb391:
    assume {:verifier.code 0} true;
    out_$i529 := $M.54;
    goto corral_source_split_6155;

  $bb390:
    assume !(out_$i526 == 1);
    assume {:verifier.code 0} true;
    goto $bb391;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    goto $bb391;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $M.54 := 3;
    call {:si_unique_call 1331} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_6153;

  SeqInstr_306:
    goto corral_source_split_6152;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} out_vslice_dummy_var_116 := snapshot_merge_map(out_$p527, in_$p37);
    goto SeqInstr_305;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    out_$p527 := $M.43;
    goto corral_source_split_6151;

  $bb389:
    assume out_$i526 == 1;
    goto corral_source_split_6150;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb389, $bb390;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    out_$i526 := $eq.i32(out_$i525, 3);
    goto corral_source_split_6148;

  $bb388:
    assume {:verifier.code 0} true;
    out_$i525 := $M.54;
    goto corral_source_split_6147;

  $bb387:
    assume !(out_$i522 == 1);
    assume {:verifier.code 0} true;
    goto $bb388;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    goto $bb388;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $M.54 := 4;
    call {:si_unique_call 1329} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_6145;

  SeqInstr_303:
    goto corral_source_split_6144;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} out_vslice_dummy_var_115 := snapshot_merge_map(out_$p523, in_$p37);
    goto SeqInstr_302;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    out_$p523 := $M.43;
    goto corral_source_split_6143;

  $bb386:
    assume out_$i522 == 1;
    goto corral_source_split_6142;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    out_$i522 := $eq.i32(out_$i521, 4);
    goto corral_source_split_5967;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    out_$i521 := $M.54;
    goto corral_source_split_5966;

  $bb319:
    assume out_$i430 == 1;
    goto corral_source_split_5965;

  $bb310:
    assume out_$i426 == 1;
    assume {:verifier.code 0} true;
    out_$i430 := $slt.i32(out_$i424, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb309:
    assume !(out_$i425 == 1);
    assume {:verifier.code 0} true;
    out_$i426 := $slt.i32(out_$i424, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  $bb411:
    assume !(out_$i562 == 1);
    assume {:verifier.code 0} true;
    goto $bb412;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    goto $bb412;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $M.54 := 5;
    call {:si_unique_call 1345} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_6221;

  SeqInstr_327:
    goto corral_source_split_6220;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} snapshot_status(out_$p563, out_$i564, out_$i565, in_$p38, out_$i566);
    goto SeqInstr_326;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    out_$i566 := $load.i32($M.0, in_$p13);
    goto corral_source_split_6219;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    out_$i565 := $load.i32($M.0, in_$p14);
    goto corral_source_split_6218;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    out_$i564 := $load.i32($M.0, in_$p16);
    goto corral_source_split_6217;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    out_$p563 := $M.43;
    goto corral_source_split_6216;

  $bb410:
    assume out_$i562 == 1;
    goto corral_source_split_6215;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb410, $bb411;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    out_$i562 := $eq.i32(out_$i561, 5);
    goto corral_source_split_6213;

  $bb409:
    assume {:verifier.code 0} true;
    out_$i561 := $M.54;
    goto corral_source_split_6212;

  $bb408:
    assume !(out_$i556 == 1);
    assume {:verifier.code 0} true;
    goto $bb409;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    goto $bb409;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $M.54 := 2;
    call {:si_unique_call 1343} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_6210;

  SeqInstr_324:
    goto corral_source_split_6209;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} snapshot_status(out_$p557, out_$i558, out_$i559, in_$p38, out_$i560);
    goto SeqInstr_323;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    out_$i560 := $load.i32($M.0, in_$p13);
    goto corral_source_split_6208;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    out_$i559 := $load.i32($M.0, in_$p14);
    goto corral_source_split_6207;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    out_$i558 := $load.i32($M.0, in_$p16);
    goto corral_source_split_6206;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    out_$p557 := $M.43;
    goto corral_source_split_6205;

  $bb407:
    assume out_$i556 == 1;
    goto corral_source_split_6204;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb407, $bb408;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    out_$i556 := $eq.i32(out_$i555, 2);
    goto corral_source_split_6202;

  $bb406:
    assume {:verifier.code 0} true;
    out_$i555 := $M.54;
    goto corral_source_split_6201;

  $bb405:
    assume !(out_$i550 == 1);
    assume {:verifier.code 0} true;
    goto $bb406;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    goto $bb406;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $M.54 := 3;
    call {:si_unique_call 1341} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_6199;

  SeqInstr_321:
    goto corral_source_split_6198;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} snapshot_status(out_$p551, out_$i552, out_$i553, in_$p38, out_$i554);
    goto SeqInstr_320;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    out_$i554 := $load.i32($M.0, in_$p13);
    goto corral_source_split_6197;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    out_$i553 := $load.i32($M.0, in_$p14);
    goto corral_source_split_6196;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    out_$i552 := $load.i32($M.0, in_$p16);
    goto corral_source_split_6195;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    out_$p551 := $M.43;
    goto corral_source_split_6194;

  $bb404:
    assume out_$i550 == 1;
    goto corral_source_split_6193;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb404, $bb405;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    out_$i550 := $eq.i32(out_$i549, 3);
    goto corral_source_split_6191;

  $bb403:
    assume {:verifier.code 0} true;
    out_$i549 := $M.54;
    goto corral_source_split_6190;

  $bb402:
    assume !(out_$i544 == 1);
    assume {:verifier.code 0} true;
    goto $bb403;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    goto $bb403;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1339} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6188;

  SeqInstr_318:
    goto corral_source_split_6187;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} snapshot_status(out_$p545, out_$i546, out_$i547, in_$p38, out_$i548);
    goto SeqInstr_317;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    out_$i548 := $load.i32($M.0, in_$p13);
    goto corral_source_split_6186;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    out_$i547 := $load.i32($M.0, in_$p14);
    goto corral_source_split_6185;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    out_$i546 := $load.i32($M.0, in_$p16);
    goto corral_source_split_6184;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    out_$p545 := $M.43;
    goto corral_source_split_6183;

  $bb401:
    assume out_$i544 == 1;
    goto corral_source_split_6182;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb401, $bb402;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    out_$i544 := $eq.i32(out_$i543, 1);
    goto corral_source_split_6180;

  $bb400:
    assume {:verifier.code 0} true;
    out_$i543 := $M.54;
    goto corral_source_split_6179;

  $bb399:
    assume !(out_$i538 == 1);
    assume {:verifier.code 0} true;
    goto $bb400;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    goto $bb400;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $M.54 := 4;
    call {:si_unique_call 1337} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_6177;

  SeqInstr_315:
    goto corral_source_split_6176;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} snapshot_status(out_$p539, out_$i540, out_$i541, in_$p38, out_$i542);
    goto SeqInstr_314;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    out_$i542 := $load.i32($M.0, in_$p13);
    goto corral_source_split_6175;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    out_$i541 := $load.i32($M.0, in_$p14);
    goto corral_source_split_6174;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    out_$i540 := $load.i32($M.0, in_$p16);
    goto corral_source_split_6173;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    out_$p539 := $M.43;
    goto corral_source_split_6172;

  $bb398:
    assume out_$i538 == 1;
    goto corral_source_split_6171;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb398, $bb399;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    out_$i538 := $eq.i32(out_$i537, 4);
    goto corral_source_split_5971;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    out_$i537 := $M.54;
    goto corral_source_split_5970;

  $bb320:
    assume !(out_$i430 == 1);
    goto corral_source_split_5969;

  $bb414:
    assume !(out_$i568 == 1);
    assume {:verifier.code 0} true;
    goto $bb415;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    goto $bb415;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $M.54 := 3;
    call {:si_unique_call 1347} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_6226;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} snapshot_merge_presuspend(out_$p569);
    goto corral_source_split_6225;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    out_$p569 := $M.43;
    goto corral_source_split_6224;

  $bb413:
    assume out_$i568 == 1;
    goto corral_source_split_6223;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb413, $bb414;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    out_$i568 := $eq.i32(out_$i567, 2);
    goto corral_source_split_5955;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    out_$i567 := $M.54;
    goto corral_source_split_5954;

  $bb312:
    assume out_$i427 == 1;
    goto corral_source_split_5953;

  $bb311:
    assume !(out_$i426 == 1);
    assume {:verifier.code 0} true;
    out_$i427 := $slt.i32(out_$i424, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb312, $bb313;

  $bb417:
    assume !(out_$i571 == 1);
    assume {:verifier.code 0} true;
    goto $bb418;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    goto $bb418;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $M.54 := 2;
    call {:si_unique_call 1349} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_6231;

  SeqInstr_330:
    goto corral_source_split_6230;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} snapshot_merge_resume(out_$p572);
    goto SeqInstr_329;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    out_$p572 := $M.43;
    goto corral_source_split_6229;

  $bb416:
    assume out_$i571 == 1;
    goto corral_source_split_6228;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb416, $bb417;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    out_$i571 := $eq.i32(out_$i570, 5);
    goto corral_source_split_5959;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    out_$i570 := $M.54;
    goto corral_source_split_5958;

  $bb314:
    assume out_$i428 == 1;
    goto corral_source_split_5957;

  $bb313:
    assume !(out_$i427 == 1);
    assume {:verifier.code 0} true;
    out_$i428 := $slt.i32(out_$i424, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  $bb420:
    assume !(out_$i574 == 1);
    assume {:verifier.code 0} true;
    goto $bb421;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    goto $bb421;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $M.54 := 4;
    call {:si_unique_call 1351} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_6235;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} out_vslice_dummy_var_119 := ldv_postsuspend_5();
    goto corral_source_split_6234;

  $bb419:
    assume out_$i574 == 1;
    goto corral_source_split_6233;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb419, $bb420;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    out_$i574 := $eq.i32(out_$i573, 3);
    goto corral_source_split_5963;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    out_$i573 := $M.54;
    goto corral_source_split_5962;

  $bb316:
    assume out_$i429 == 1;
    goto corral_source_split_5961;

  $bb315:
    assume !(out_$i428 == 1);
    assume {:verifier.code 0} true;
    out_$i429 := $eq.i32(out_$i424, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} ldv_stop();
    goto corral_source_split_6237;

  $bb318:
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb317:
    assume {:verifier.code 0} true;
    assume !(out_$i429 == 1);
    goto $bb318;

  $bb330:
    assume {:verifier.code 0} true;
    assume !(out_$i435 == 1);
    goto $bb318;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} ldv_stop();
    goto corral_source_split_6239;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i84 == 1);
    goto $bb11;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i89 == 1);
    goto $bb11;

  $bb142_dummy:
    call {:si_unique_call 1} out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i118, out_$i119, out_$p120, out_$i121, out_$i123, out_$i124, out_$p125, out_$i126, out_$i128, out_$i129, out_$p130, out_$i131, out_$i133, out_$i134, out_$p135, out_$i136, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$p145, out_$i146, out_$i147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$p160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$p166, out_$p167, out_$i169, out_$i170, out_$p171, out_$p172, out_$i174, out_$i175, out_$p176, out_$p177, out_$i179, out_$i180, out_$p181, out_$p182, out_$i184, out_$i185, out_$p186, out_$p187, out_$i189, out_$i190, out_$p191, out_$i193, out_$i194, out_$p195, out_$i197, out_$i198, out_$p199, out_$i201, out_$i202, out_$p203, out_$i205, out_$i206, out_$p207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$p213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$p219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$p225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$p231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$p237, out_$i238, out_$i239, out_$i241, out_$i242, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$p262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$p271, out_$i272, out_$i273, out_$i274, out_$i275, out_$p276, out_$i277, out_$i278, out_$i279, out_$i280, out_$p281, out_$i282, out_$i283, out_$i284, out_$i285, out_$p286, out_$i287, out_$i288, out_$i289, out_$i290, out_$p291, out_$p292, out_$i294, out_$i295, out_$p296, out_$p297, out_$i299, out_$i300, out_$p301, out_$p302, out_$i304, out_$i305, out_$p306, out_$p307, out_$i309, out_$i310, out_$p311, out_$p312, out_$i314, out_$i315, out_$p316, out_$i317, out_$i319, out_$i320, out_$p321, out_$i322, out_$i324, out_$i325, out_$p326, out_$i327, out_$i329, out_$i330, out_$p331, out_$i332, out_$i334, out_$i335, out_$p336, out_$i337, out_$i339, out_$i340, out_$p341, out_$i343, out_$i344, out_$p345, out_$i347, out_$i348, out_$p349, out_$i351, out_$i352, out_$p353, out_$i355, out_$i356, out_$p357, out_$i358, out_$i359, out_$p360, out_$i361, out_$i362, out_$i363, out_$i364, out_$i365, out_$p366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$p372, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$p378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$p384, out_$i385, out_$i386, out_$i387, out_$i388, out_$i389, out_$p390, out_$i391, out_$i392, out_$i394, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i407, out_$i408, out_$i409, out_$i410, out_$i411, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$i436, out_$i437, out_$p438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$i444, out_$i445, out_$i446, out_$p447, out_$i448, out_$i450, out_$i451, out_$p452, out_$i453, out_$i455, out_$i456, out_$p457, out_$i458, out_$i460, out_$i461, out_$p462, out_$i463, out_$i465, out_$i466, out_$p467, out_$i468, out_$i470, out_$i471, out_$p472, out_$i473, out_$i474, out_$i475, out_$i476, out_$p477, out_$i478, out_$i479, out_$i480, out_$i481, out_$p482, out_$i483, out_$i484, out_$i485, out_$i486, out_$p487, out_$i488, out_$i489, out_$i490, out_$i491, out_$p492, out_$p493, out_$i495, out_$i496, out_$p497, out_$p498, out_$i500, out_$i501, out_$p502, out_$p503, out_$i505, out_$i506, out_$p507, out_$p508, out_$i510, out_$i511, out_$p512, out_$p513, out_$i515, out_$i516, out_$p517, out_$i518, out_$i519, out_$i520, out_$i521, out_$i522, out_$p523, out_$i525, out_$i526, out_$p527, out_$i529, out_$i530, out_$p531, out_$i533, out_$i534, out_$p535, out_$i537, out_$i538, out_$p539, out_$i540, out_$i541, out_$i542, out_$i543, out_$i544, out_$p545, out_$i546, out_$i547, out_$i548, out_$i549, out_$i550, out_$p551, out_$i552, out_$i553, out_$i554, out_$i555, out_$i556, out_$p557, out_$i558, out_$i559, out_$i560, out_$i561, out_$i562, out_$p563, out_$i564, out_$i565, out_$i566, out_$i567, out_$i568, out_$p569, out_$i570, out_$i571, out_$p572, out_$i573, out_$i574, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$p21, in_$p23, in_$p25, in_$p27, in_$p28, in_$p29, in_$p31, in_$p33, in_$p35, in_$p37, in_$p38, in_$p40, in_$p42, in_$p43, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i118, out_$i119, out_$p120, out_$i121, out_$i123, out_$i124, out_$p125, out_$i126, out_$i128, out_$i129, out_$p130, out_$i131, out_$i133, out_$i134, out_$p135, out_$i136, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$p145, out_$i146, out_$i147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$p160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$p166, out_$p167, out_$i169, out_$i170, out_$p171, out_$p172, out_$i174, out_$i175, out_$p176, out_$p177, out_$i179, out_$i180, out_$p181, out_$p182, out_$i184, out_$i185, out_$p186, out_$p187, out_$i189, out_$i190, out_$p191, out_$i193, out_$i194, out_$p195, out_$i197, out_$i198, out_$p199, out_$i201, out_$i202, out_$p203, out_$i205, out_$i206, out_$p207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$p213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$p219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$p225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$p231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$p237, out_$i238, out_$i239, out_$i241, out_$i242, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$p262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$p271, out_$i272, out_$i273, out_$i274, out_$i275, out_$p276, out_$i277, out_$i278, out_$i279, out_$i280, out_$p281, out_$i282, out_$i283, out_$i284, out_$i285, out_$p286, out_$i287, out_$i288, out_$i289, out_$i290, out_$p291, out_$p292, out_$i294, out_$i295, out_$p296, out_$p297, out_$i299, out_$i300, out_$p301, out_$p302, out_$i304, out_$i305, out_$p306, out_$p307, out_$i309, out_$i310, out_$p311, out_$p312, out_$i314, out_$i315, out_$p316, out_$i317, out_$i319, out_$i320, out_$p321, out_$i322, out_$i324, out_$i325, out_$p326, out_$i327, out_$i329, out_$i330, out_$p331, out_$i332, out_$i334, out_$i335, out_$p336, out_$i337, out_$i339, out_$i340, out_$p341, out_$i343, out_$i344, out_$p345, out_$i347, out_$i348, out_$p349, out_$i351, out_$i352, out_$p353, out_$i355, out_$i356, out_$p357, out_$i358, out_$i359, out_$p360, out_$i361, out_$i362, out_$i363, out_$i364, out_$i365, out_$p366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$p372, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$p378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$p384, out_$i385, out_$i386, out_$i387, out_$i388, out_$i389, out_$p390, out_$i391, out_$i392, out_$i394, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i407, out_$i408, out_$i409, out_$i410, out_$i411, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$i436, out_$i437, out_$p438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$i444, out_$i445, out_$i446, out_$p447, out_$i448, out_$i450, out_$i451, out_$p452, out_$i453, out_$i455, out_$i456, out_$p457, out_$i458, out_$i460, out_$i461, out_$p462, out_$i463, out_$i465, out_$i466, out_$p467, out_$i468, out_$i470, out_$i471, out_$p472, out_$i473, out_$i474, out_$i475, out_$i476, out_$p477, out_$i478, out_$i479, out_$i480, out_$i481, out_$p482, out_$i483, out_$i484, out_$i485, out_$i486, out_$p487, out_$i488, out_$i489, out_$i490, out_$i491, out_$p492, out_$p493, out_$i495, out_$i496, out_$p497, out_$p498, out_$i500, out_$i501, out_$p502, out_$p503, out_$i505, out_$i506, out_$p507, out_$p508, out_$i510, out_$i511, out_$p512, out_$p513, out_$i515, out_$i516, out_$p517, out_$i518, out_$i519, out_$i520, out_$i521, out_$i522, out_$p523, out_$i525, out_$i526, out_$p527, out_$i529, out_$i530, out_$p531, out_$i533, out_$i534, out_$p535, out_$i537, out_$i538, out_$p539, out_$i540, out_$i541, out_$i542, out_$i543, out_$i544, out_$p545, out_$i546, out_$i547, out_$i548, out_$i549, out_$i550, out_$p551, out_$i552, out_$i553, out_$i554, out_$i555, out_$i556, out_$p557, out_$i558, out_$i559, out_$i560, out_$i561, out_$i562, out_$p563, out_$i564, out_$i565, out_$i566, out_$i567, out_$i568, out_$p569, out_$i570, out_$i571, out_$p572, out_$i573, out_$i574, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p23: ref, in_$p25: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p31: ref, in_$p33: ref, in_$p35: ref, in_$p37: ref, in_$p38: ref, in_$p40: ref, in_$p42: ref, in_$p43: ref, in_$i80: i32, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i107: i32, in_$i108: i32, in_$i109: i32, in_$i110: i1, in_$i111: i32, in_$i112: i32, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i116: i32, in_$i118: i32, in_$i119: i1, in_$p120: ref, in_$i121: i32, in_$i123: i32, in_$i124: i1, in_$p125: ref, in_$i126: i32, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$i131: i32, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i136: i32, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$i141: i32, in_$i142: i32, in_$i143: i32, in_$i144: i1, in_$p145: ref, in_$i146: i32, in_$i147: i32, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$i151: i32, in_$i152: i32, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$i156: i32, in_$i157: i32, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$i161: i32, in_$i162: i32, in_$i163: i1, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$p167: ref, in_$i169: i32, in_$i170: i1, in_$p171: ref, in_$p172: ref, in_$i174: i32, in_$i175: i1, in_$p176: ref, in_$p177: ref, in_$i179: i32, in_$i180: i1, in_$p181: ref, in_$p182: ref, in_$i184: i32, in_$i185: i1, in_$p186: ref, in_$p187: ref, in_$i189: i32, in_$i190: i1, in_$p191: ref, in_$i193: i32, in_$i194: i1, in_$p195: ref, in_$i197: i32, in_$i198: i1, in_$p199: ref, in_$i201: i32, in_$i202: i1, in_$p203: ref, in_$i205: i32, in_$i206: i1, in_$p207: ref, in_$i208: i32, in_$i209: i32, in_$i210: i32, in_$i211: i32, in_$i212: i1, in_$p213: ref, in_$i214: i32, in_$i215: i32, in_$i216: i32, in_$i217: i32, in_$i218: i1, in_$p219: ref, in_$i220: i32, in_$i221: i32, in_$i222: i32, in_$i223: i32, in_$i224: i1, in_$p225: ref, in_$i226: i32, in_$i227: i32, in_$i228: i32, in_$i229: i32, in_$i230: i1, in_$p231: ref, in_$i232: i32, in_$i233: i32, in_$i234: i32, in_$i235: i32, in_$i236: i1, in_$p237: ref, in_$i238: i32, in_$i239: i1, in_$i241: i32, in_$i242: i1, in_$i244: i32, in_$i245: i1, in_$i246: i32, in_$i247: i1, in_$i248: i32, in_$i249: i1, in_$i250: i1, in_$i251: i1, in_$i252: i1, in_$i253: i1, in_$i254: i1, in_$i255: i1, in_$i256: i1, in_$i257: i1, in_$i258: i1, in_$i259: i1, in_$i260: i32, in_$i261: i1, in_$p262: ref, in_$i263: i32, in_$i264: i32, in_$i265: i32, in_$i266: i1, in_$i267: i32, in_$i268: i32, in_$i269: i32, in_$i270: i1, in_$p271: ref, in_$i272: i32, in_$i273: i32, in_$i274: i32, in_$i275: i1, in_$p276: ref, in_$i277: i32, in_$i278: i32, in_$i279: i32, in_$i280: i1, in_$p281: ref, in_$i282: i32, in_$i283: i32, in_$i284: i32, in_$i285: i1, in_$p286: ref, in_$i287: i32, in_$i288: i32, in_$i289: i32, in_$i290: i1, in_$p291: ref, in_$p292: ref, in_$i294: i32, in_$i295: i1, in_$p296: ref, in_$p297: ref, in_$i299: i32, in_$i300: i1, in_$p301: ref, in_$p302: ref, in_$i304: i32, in_$i305: i1, in_$p306: ref, in_$p307: ref, in_$i309: i32, in_$i310: i1, in_$p311: ref, in_$p312: ref, in_$i314: i32, in_$i315: i1, in_$p316: ref, in_$i317: i32, in_$i319: i32, in_$i320: i1, in_$p321: ref, in_$i322: i32, in_$i324: i32, in_$i325: i1, in_$p326: ref, in_$i327: i32, in_$i329: i32, in_$i330: i1, in_$p331: ref, in_$i332: i32, in_$i334: i32, in_$i335: i1, in_$p336: ref, in_$i337: i32, in_$i339: i32, in_$i340: i1, in_$p341: ref, in_$i343: i32, in_$i344: i1, in_$p345: ref, in_$i347: i32, in_$i348: i1, in_$p349: ref, in_$i351: i32, in_$i352: i1, in_$p353: ref, in_$i355: i32, in_$i356: i1, in_$p357: ref, in_$i358: i32, in_$i359: i1, in_$p360: ref, in_$i361: i32, in_$i362: i32, in_$i363: i32, in_$i364: i32, in_$i365: i1, in_$p366: ref, in_$i367: i32, in_$i368: i32, in_$i369: i32, in_$i370: i32, in_$i371: i1, in_$p372: ref, in_$i373: i32, in_$i374: i32, in_$i375: i32, in_$i376: i32, in_$i377: i1, in_$p378: ref, in_$i379: i32, in_$i380: i32, in_$i381: i32, in_$i382: i32, in_$i383: i1, in_$p384: ref, in_$i385: i32, in_$i386: i32, in_$i387: i32, in_$i388: i32, in_$i389: i1, in_$p390: ref, in_$i391: i32, in_$i392: i1, in_$i394: i32, in_$i395: i1, in_$i396: i32, in_$i397: i32, in_$i398: i1, in_$i399: i32, in_$i400: i1, in_$i401: i32, in_$i402: i1, in_$i403: i32, in_$i404: i1, in_$i405: i32, in_$i406: i1, in_$i407: i32, in_$i408: i1, in_$i409: i1, in_$i410: i1, in_$i411: i32, in_$i412: i1, in_$i413: i32, in_$i414: i1, in_$i415: i32, in_$i416: i1, in_$i417: i32, in_$i418: i32, in_$i419: i1, in_$i420: i32, in_$i421: i1, in_$i422: i32, in_$i423: i1, in_$i424: i32, in_$i425: i1, in_$i426: i1, in_$i427: i1, in_$i428: i1, in_$i429: i1, in_$i430: i1, in_$i431: i1, in_$i432: i1, in_$i433: i1, in_$i434: i1, in_$i435: i1, in_$i436: i32, in_$i437: i1, in_$p438: ref, in_$i439: i32, in_$i440: i32, in_$i441: i32, in_$i442: i1, in_$i443: i32, in_$i444: i32, in_$i445: i32, in_$i446: i1, in_$p447: ref, in_$i448: i32, in_$i450: i32, in_$i451: i1, in_$p452: ref, in_$i453: i32, in_$i455: i32, in_$i456: i1, in_$p457: ref, in_$i458: i32, in_$i460: i32, in_$i461: i1, in_$p462: ref, in_$i463: i32, in_$i465: i32, in_$i466: i1, in_$p467: ref, in_$i468: i32, in_$i470: i32, in_$i471: i1, in_$p472: ref, in_$i473: i32, in_$i474: i32, in_$i475: i32, in_$i476: i1, in_$p477: ref, in_$i478: i32, in_$i479: i32, in_$i480: i32, in_$i481: i1, in_$p482: ref, in_$i483: i32, in_$i484: i32, in_$i485: i32, in_$i486: i1, in_$p487: ref, in_$i488: i32, in_$i489: i32, in_$i490: i32, in_$i491: i1, in_$p492: ref, in_$p493: ref, in_$i495: i32, in_$i496: i1, in_$p497: ref, in_$p498: ref, in_$i500: i32, in_$i501: i1, in_$p502: ref, in_$p503: ref, in_$i505: i32, in_$i506: i1, in_$p507: ref, in_$p508: ref, in_$i510: i32, in_$i511: i1, in_$p512: ref, in_$p513: ref, in_$i515: i32, in_$i516: i1, in_$p517: ref, in_$i518: i32, in_$i519: i32, in_$i520: i1, in_$i521: i32, in_$i522: i1, in_$p523: ref, in_$i525: i32, in_$i526: i1, in_$p527: ref, in_$i529: i32, in_$i530: i1, in_$p531: ref, in_$i533: i32, in_$i534: i1, in_$p535: ref, in_$i537: i32, in_$i538: i1, in_$p539: ref, in_$i540: i32, in_$i541: i32, in_$i542: i32, in_$i543: i32, in_$i544: i1, in_$p545: ref, in_$i546: i32, in_$i547: i32, in_$i548: i32, in_$i549: i32, in_$i550: i1, in_$p551: ref, in_$i552: i32, in_$i553: i32, in_$i554: i32, in_$i555: i32, in_$i556: i1, in_$p557: ref, in_$i558: i32, in_$i559: i32, in_$i560: i32, in_$i561: i32, in_$i562: i1, in_$p563: ref, in_$i564: i32, in_$i565: i32, in_$i566: i32, in_$i567: i32, in_$i568: i1, in_$p569: ref, in_$i570: i32, in_$i571: i1, in_$p572: ref, in_$i573: i32, in_$i574: i1, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i32, in_vslice_dummy_var_117: i32, in_vslice_dummy_var_118: i32, in_vslice_dummy_var_119: i32) returns (out_$i80: i32, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i107: i32, out_$i108: i32, out_$i109: i32, out_$i110: i1, out_$i111: i32, out_$i112: i32, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i116: i32, out_$i118: i32, out_$i119: i1, out_$p120: ref, out_$i121: i32, out_$i123: i32, out_$i124: i1, out_$p125: ref, out_$i126: i32, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$i131: i32, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i136: i32, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$i141: i32, out_$i142: i32, out_$i143: i32, out_$i144: i1, out_$p145: ref, out_$i146: i32, out_$i147: i32, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$i151: i32, out_$i152: i32, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$i156: i32, out_$i157: i32, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$i161: i32, out_$i162: i32, out_$i163: i1, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$p167: ref, out_$i169: i32, out_$i170: i1, out_$p171: ref, out_$p172: ref, out_$i174: i32, out_$i175: i1, out_$p176: ref, out_$p177: ref, out_$i179: i32, out_$i180: i1, out_$p181: ref, out_$p182: ref, out_$i184: i32, out_$i185: i1, out_$p186: ref, out_$p187: ref, out_$i189: i32, out_$i190: i1, out_$p191: ref, out_$i193: i32, out_$i194: i1, out_$p195: ref, out_$i197: i32, out_$i198: i1, out_$p199: ref, out_$i201: i32, out_$i202: i1, out_$p203: ref, out_$i205: i32, out_$i206: i1, out_$p207: ref, out_$i208: i32, out_$i209: i32, out_$i210: i32, out_$i211: i32, out_$i212: i1, out_$p213: ref, out_$i214: i32, out_$i215: i32, out_$i216: i32, out_$i217: i32, out_$i218: i1, out_$p219: ref, out_$i220: i32, out_$i221: i32, out_$i222: i32, out_$i223: i32, out_$i224: i1, out_$p225: ref, out_$i226: i32, out_$i227: i32, out_$i228: i32, out_$i229: i32, out_$i230: i1, out_$p231: ref, out_$i232: i32, out_$i233: i32, out_$i234: i32, out_$i235: i32, out_$i236: i1, out_$p237: ref, out_$i238: i32, out_$i239: i1, out_$i241: i32, out_$i242: i1, out_$i244: i32, out_$i245: i1, out_$i246: i32, out_$i247: i1, out_$i248: i32, out_$i249: i1, out_$i250: i1, out_$i251: i1, out_$i252: i1, out_$i253: i1, out_$i254: i1, out_$i255: i1, out_$i256: i1, out_$i257: i1, out_$i258: i1, out_$i259: i1, out_$i260: i32, out_$i261: i1, out_$p262: ref, out_$i263: i32, out_$i264: i32, out_$i265: i32, out_$i266: i1, out_$i267: i32, out_$i268: i32, out_$i269: i32, out_$i270: i1, out_$p271: ref, out_$i272: i32, out_$i273: i32, out_$i274: i32, out_$i275: i1, out_$p276: ref, out_$i277: i32, out_$i278: i32, out_$i279: i32, out_$i280: i1, out_$p281: ref, out_$i282: i32, out_$i283: i32, out_$i284: i32, out_$i285: i1, out_$p286: ref, out_$i287: i32, out_$i288: i32, out_$i289: i32, out_$i290: i1, out_$p291: ref, out_$p292: ref, out_$i294: i32, out_$i295: i1, out_$p296: ref, out_$p297: ref, out_$i299: i32, out_$i300: i1, out_$p301: ref, out_$p302: ref, out_$i304: i32, out_$i305: i1, out_$p306: ref, out_$p307: ref, out_$i309: i32, out_$i310: i1, out_$p311: ref, out_$p312: ref, out_$i314: i32, out_$i315: i1, out_$p316: ref, out_$i317: i32, out_$i319: i32, out_$i320: i1, out_$p321: ref, out_$i322: i32, out_$i324: i32, out_$i325: i1, out_$p326: ref, out_$i327: i32, out_$i329: i32, out_$i330: i1, out_$p331: ref, out_$i332: i32, out_$i334: i32, out_$i335: i1, out_$p336: ref, out_$i337: i32, out_$i339: i32, out_$i340: i1, out_$p341: ref, out_$i343: i32, out_$i344: i1, out_$p345: ref, out_$i347: i32, out_$i348: i1, out_$p349: ref, out_$i351: i32, out_$i352: i1, out_$p353: ref, out_$i355: i32, out_$i356: i1, out_$p357: ref, out_$i358: i32, out_$i359: i1, out_$p360: ref, out_$i361: i32, out_$i362: i32, out_$i363: i32, out_$i364: i32, out_$i365: i1, out_$p366: ref, out_$i367: i32, out_$i368: i32, out_$i369: i32, out_$i370: i32, out_$i371: i1, out_$p372: ref, out_$i373: i32, out_$i374: i32, out_$i375: i32, out_$i376: i32, out_$i377: i1, out_$p378: ref, out_$i379: i32, out_$i380: i32, out_$i381: i32, out_$i382: i32, out_$i383: i1, out_$p384: ref, out_$i385: i32, out_$i386: i32, out_$i387: i32, out_$i388: i32, out_$i389: i1, out_$p390: ref, out_$i391: i32, out_$i392: i1, out_$i394: i32, out_$i395: i1, out_$i396: i32, out_$i397: i32, out_$i398: i1, out_$i399: i32, out_$i400: i1, out_$i401: i32, out_$i402: i1, out_$i403: i32, out_$i404: i1, out_$i405: i32, out_$i406: i1, out_$i407: i32, out_$i408: i1, out_$i409: i1, out_$i410: i1, out_$i411: i32, out_$i412: i1, out_$i413: i32, out_$i414: i1, out_$i415: i32, out_$i416: i1, out_$i417: i32, out_$i418: i32, out_$i419: i1, out_$i420: i32, out_$i421: i1, out_$i422: i32, out_$i423: i1, out_$i424: i32, out_$i425: i1, out_$i426: i1, out_$i427: i1, out_$i428: i1, out_$i429: i1, out_$i430: i1, out_$i431: i1, out_$i432: i1, out_$i433: i1, out_$i434: i1, out_$i435: i1, out_$i436: i32, out_$i437: i1, out_$p438: ref, out_$i439: i32, out_$i440: i32, out_$i441: i32, out_$i442: i1, out_$i443: i32, out_$i444: i32, out_$i445: i32, out_$i446: i1, out_$p447: ref, out_$i448: i32, out_$i450: i32, out_$i451: i1, out_$p452: ref, out_$i453: i32, out_$i455: i32, out_$i456: i1, out_$p457: ref, out_$i458: i32, out_$i460: i32, out_$i461: i1, out_$p462: ref, out_$i463: i32, out_$i465: i32, out_$i466: i1, out_$p467: ref, out_$i468: i32, out_$i470: i32, out_$i471: i1, out_$p472: ref, out_$i473: i32, out_$i474: i32, out_$i475: i32, out_$i476: i1, out_$p477: ref, out_$i478: i32, out_$i479: i32, out_$i480: i32, out_$i481: i1, out_$p482: ref, out_$i483: i32, out_$i484: i32, out_$i485: i32, out_$i486: i1, out_$p487: ref, out_$i488: i32, out_$i489: i32, out_$i490: i32, out_$i491: i1, out_$p492: ref, out_$p493: ref, out_$i495: i32, out_$i496: i1, out_$p497: ref, out_$p498: ref, out_$i500: i32, out_$i501: i1, out_$p502: ref, out_$p503: ref, out_$i505: i32, out_$i506: i1, out_$p507: ref, out_$p508: ref, out_$i510: i32, out_$i511: i1, out_$p512: ref, out_$p513: ref, out_$i515: i32, out_$i516: i1, out_$p517: ref, out_$i518: i32, out_$i519: i32, out_$i520: i1, out_$i521: i32, out_$i522: i1, out_$p523: ref, out_$i525: i32, out_$i526: i1, out_$p527: ref, out_$i529: i32, out_$i530: i1, out_$p531: ref, out_$i533: i32, out_$i534: i1, out_$p535: ref, out_$i537: i32, out_$i538: i1, out_$p539: ref, out_$i540: i32, out_$i541: i32, out_$i542: i32, out_$i543: i32, out_$i544: i1, out_$p545: ref, out_$i546: i32, out_$i547: i32, out_$i548: i32, out_$i549: i32, out_$i550: i1, out_$p551: ref, out_$i552: i32, out_$i553: i32, out_$i554: i32, out_$i555: i32, out_$i556: i1, out_$p557: ref, out_$i558: i32, out_$i559: i32, out_$i560: i32, out_$i561: i32, out_$i562: i1, out_$p563: ref, out_$i564: i32, out_$i565: i32, out_$i566: i32, out_$i567: i32, out_$i568: i1, out_$p569: ref, out_$i570: i32, out_$i571: i1, out_$p572: ref, out_$i573: i32, out_$i574: i1, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i32, out_vslice_dummy_var_117: i32, out_vslice_dummy_var_118: i32, out_vslice_dummy_var_119: i32);
  modifies $M.52, $M.46, $M.55, $M.0, $M.3, $M.9, $M.10, $M.11, $M.1, $M.31, $CurrAddr, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.36, $M.37, $M.38, $M.41, $M.34, $M.35, assertsPassed, $M.56, $M.32, $M.33, $M.23, $M.47, $M.48, $M.57, $M.58, $M.49, $M.50, $M.51, $M.45, $M.68, $M.69, $M.66, $M.67, $M.62, $M.63, $M.44, $M.64, $M.65, $M.43, $M.54, $M.53, $M.59, $M.8, $M.6, $M.14, $M.13, $M.60, $M.61;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


